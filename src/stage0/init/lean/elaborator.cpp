// Lean compiler output
// Module: init.lean.elaborator
// Imports: init.lean.parser.module init.lean.expander init.lean.expr init.lean.options init.lean.environment
#include "runtime/object.h"
#include "runtime/apply.h"
typedef lean::object obj;    typedef lean::usize  usize;
typedef lean::uint8  uint8;  typedef lean::uint16 uint16;
typedef lean::uint32 uint32; typedef lean::uint64 uint64;
#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-label"
#elif defined(__GNUC__) && !defined(__CLANG__)
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#endif
obj* l_RBTree_toList___at_Lean_Elaborator_oldElabCommand___spec__1___boxed(obj*);
obj* l_List_foldr___main___at_Lean_Elaborator_matchOpenSpec___spec__1___boxed(obj*, obj*, obj*);
obj* l_Lean_Elaborator_currentScope___boxed(obj*, obj*, obj*);
obj* l_RBNode_setBlack___main___rarg(obj*);
extern "C" obj* lean_expr_mk_mdata(obj*, obj*);
obj* l_Lean_Expander_getOptType___main(obj*);
obj* l_Option_toMonad___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__1(obj*);
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__1(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_inferModToPexpr___closed__2;
obj* l_Lean_Elaborator_notation_elaborate(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_postprocessNotationSpec___closed__1;
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__14___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__2;
obj* l_Lean_Elaborator_include_elaborate(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_precToNat(obj*);
obj* l_Lean_Parser_stringLit_View_value(obj*);
extern "C" uint8 lean_name_dec_eq(obj*, obj*);
obj* l_Lean_Elaborator_open_elaborate(obj*, obj*, obj*, obj*);
obj* l_List_zipWith___main___rarg(obj*, obj*, obj*);
extern obj* l_Lean_Expander_getOptType___main___closed__1;
obj* l_Lean_Elaborator_dummy;
obj* l_Lean_Elaborator_toPexpr___main___closed__8;
extern obj* l_Lean_MessageLog_empty;
obj* l_Lean_Elaborator_toPexpr___main___closed__46;
extern "C" obj* lean_expr_mk_sort(obj*);
obj* l_Lean_KVMap_setBool(obj*, obj*, uint8);
uint8 l_List_foldr___main___at_Lean_Elaborator_matchOpenSpec___spec__1(obj*, uint8, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__1;
obj* l_Lean_Elaborator_mkState___closed__3;
obj* l_DList_singleton___elambda__1___rarg(obj*, obj*);
namespace lean {
obj* nat_sub(obj*, obj*);
}
obj* l_List_map___main___at_Lean_Elaborator_toPexpr___main___spec__2(obj*);
obj* l_Lean_Elaborator_processCommand(obj*, obj*, obj*);
obj* l_Lean_Elaborator_toLevel___main___closed__1;
obj* l_List_mfilter___main___at_Lean_Elaborator_variables_elaborate___spec__1___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Format_pretty(obj*, obj*);
obj* l_Lean_Elaborator_mkNotationKind___rarg___closed__1;
obj* l_Lean_Elaborator_ElaboratorM_MonadExcept;
obj* l_Lean_Elaborator_attribute_elaborate___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__6;
obj* l_RBNode_find___main___at_Lean_Elaborator_processCommand___spec__3___boxed(obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__21;
obj* l_Lean_Elaborator_matchSpec(obj*, obj*);
obj* l_Lean_Elaborator_matchOpenSpec(obj*, obj*);
obj* l_Lean_Elaborator_declaration_elaborate___lambda__2___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_RBTree_toList___at_Lean_Elaborator_oldElabCommand___spec__1(obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_elaboratorInh(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_OrderedRBMap_empty___rarg(obj*);
obj* l_Lean_Elaborator_declModifiersToPexpr___closed__3;
obj* l_List_mfoldl___main___at_Lean_Elaborator_CommandParserConfig_registerNotationTokens___spec__1___closed__1;
obj* l_List_foldl___main___at_Lean_Elaborator_toPexpr___main___spec__16(obj*, obj*);
extern obj* l_Lean_Parser_command_namespace;
extern obj* l_Lean_Parser_Level_trailing_HasView;
obj* l_List_lengthAux___main___rarg(obj*, obj*);
extern obj* l_Lean_Parser_Level_leading_HasView_x27___lambda__1___closed__5;
obj* l_List_mfoldl___main___at_Lean_Elaborator_CommandParserConfig_registerNotationTokens___spec__1(obj*, obj*);
obj* l_Lean_Elaborator_identUnivParamsToPexpr(obj*);
obj* l_Lean_Elaborator_OrderedRBMap_ofList___rarg(obj*, obj*);
extern obj* l_Lean_Parser_Module_header;
obj* l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__2___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__22;
obj* l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_ElaboratorM_MonadState;
obj* l_Lean_Elaborator_elaborators;
obj* l_StateT_Monad___rarg(obj*);
extern "C" obj* lean_expr_mk_pi(obj*, uint8, obj*, obj*);
obj* l_Lean_Elaborator_resolveContext___main___closed__1;
obj* l_Lean_Elaborator_section_elaborate(obj*, obj*, obj*, obj*);
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__1___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_variables_elaborate___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_reserveNotation_elaborate___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_processCommand___lambda__1___closed__2;
obj* l_Lean_Elaborator_declaration_elaborate___closed__3;
obj* l_Lean_Elaborator_variables_elaborate(obj*, obj*, obj*, obj*);
obj* l_ReaderT_bind___at_Lean_Elaborator_declaration_elaborate___spec__1(obj*, obj*);
obj* l_Lean_Elaborator_oldElabCommand(obj*, obj*, obj*, obj*, obj*);
uint8 l_Lean_Elaborator_isOpenNamespace(obj*, obj*);
extern obj* l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
obj* l_Lean_Elaborator_toPexpr___main___closed__37;
extern "C" obj* level_mk_mvar(obj*);
obj* l_List_foldl___main___at_Lean_Elaborator_include_elaborate___spec__1(obj*, obj*);
obj* l_Option_toMonad___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__1___rarg(obj*);
extern "C" obj* lean_expr_local(obj*, obj*, obj*, uint8);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3___closed__1;
extern "C" obj* lean_expr_mk_app(obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__3;
obj* l_List_foldl___main___at_Lean_Parser_Term_mkApp___spec__1(obj*, obj*);
obj* l_List_reverse___rarg(obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__9;
extern obj* l_Lean_Parser_command_attribute;
obj* l_Lean_Parser_TokenMap_insert___rarg(obj*, obj*, obj*);
obj* l_RBNode_insert___rarg(obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__1(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main(obj*, obj*, obj*, obj*);
obj* l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1(obj*);
obj* l_List_foldr___main___at_Lean_Elaborator_isOpenNamespace___main___spec__2___boxed(obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__30;
extern "C" obj* lean_expr_mk_let(obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__13___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_modifyCurrentScope___boxed(obj*, obj*, obj*, obj*);
uint8 l_Lean_Parser_Syntax_isOfKind___main(obj*, obj*);
extern obj* l_Lean_Parser_command_variables;
obj* l_Lean_Elaborator_elabDefLike(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_KVMap_setNat(obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__4;
obj* l_Lean_Elaborator_declModifiersToPexpr___closed__2;
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__17(obj*, obj*, obj*, obj*);
obj* l_List_foldl___main___at_Lean_Elaborator_mangleIdent___spec__1(obj*, obj*);
obj* l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_inferModToPexpr___closed__3;
obj* l_Lean_Elaborator_elabDefLike___lambda__1(obj*, obj*);
obj* l_Lean_Name_toStringWithSep___main(obj*, obj*);
obj* l_List_mfilter___main___at_Lean_Elaborator_variables_elaborate___spec__1___lambda__1___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__28;
extern obj* l_Lean_Parser_Term_have_HasView;
obj* l_Lean_Expr_mkCapp(obj*, obj*);
obj* l_Lean_Elaborator_end_elaborate___closed__1;
obj* l_Lean_Elaborator_toPexpr___main___closed__19;
obj* l_Lean_Elaborator_declaration_elaborate___closed__1;
obj* l_Lean_Parser_Term_simpleBinder_View_toBinderInfo___main(obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__31;
extern obj* l_Lean_Parser_Term_structInst_HasView;
obj* l_Lean_Elaborator_universe_elaborate___closed__1;
obj* l_List_map___main___at_Lean_Elaborator_namesToPexpr___spec__1(obj*);
obj* l_Lean_Elaborator_mkNotationKind(obj*, obj*);
obj* l_Lean_Elaborator_command_elaborate(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__34;
obj* l_List_mmap___main___at_Lean_Elaborator_simpleBindersToPexpr___spec__1(obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__12___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_List_map___main___at_Lean_Elaborator_export_elaborate___spec__1(obj*, obj*);
obj* l_List_foldl___main___at_Lean_Elaborator_elaborators___spec__3(obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__45;
obj* l_Lean_Elaborator_toLevel___main___boxed(obj*, obj*, obj*, obj*);
extern obj* l_Lean_Options_empty;
obj* l_Lean_Elaborator_section_elaborate___closed__2;
obj* l_Lean_Elaborator_universe_elaborate___closed__2;
obj* l_Lean_Elaborator_toPexpr___main___closed__1;
extern obj* l_Lean_Parser_number_HasView;
obj* l_Lean_Elaborator_check_elaborate(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_OrderedRBMap_empty___rarg___boxed(obj*);
obj* l_monadStateTrans___rarg(obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__5(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_namesToPexpr(obj*);
obj* l_Lean_Name_quickLt___boxed(obj*, obj*);
obj* l_Lean_Elaborator_toLevel___main___closed__4;
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_notation_elaborate___closed__1;
obj* l_Lean_Elaborator_mkState___closed__4;
obj* l_RBTree_ofList___main___at_Lean_Elaborator_oldElabCommand___spec__3(obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__15___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Level_ofNat___main(obj*);
obj* l_Lean_Elaborator_export_elaborate___boxed(obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_command_section;
obj* l_Lean_Elaborator_toPexpr___main___closed__14;
obj* l_ExceptT_MonadExcept___rarg(obj*);
extern obj* l_Lean_Parser_command_attribute_HasView;
obj* l_Lean_Elaborator_toPexpr___main___closed__32;
extern obj* l_Lean_Parser_command_reserveNotation_HasView;
obj* l_List_spanAux___main___at_Lean_Elaborator_toPexpr___main___spec__5(obj*, obj*);
extern obj* l_Id_Monad;
extern obj* l_Lean_Parser_command_export_HasView;
obj* l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_resolveContext___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_inferModToPexpr___closed__1;
extern obj* l_Lean_Parser_command_declaration_HasView;
obj* l_Lean_Elaborator_notation_elaborateAux(obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6(obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_command_variables_HasView;
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__10(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_binderIdent_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_resolveContext___main___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__18;
obj* l_Lean_Elaborator_declModifiersToPexpr___closed__6;
obj* l_Lean_Elaborator_toPexpr___main___closed__10;
obj* l_ReaderT_read___rarg(obj*, obj*);
obj* l_Lean_Elaborator_include_elaborate___lambda__1(obj*, obj*);
obj* l_Lean_Elaborator_simpleBindersToPexpr___boxed(obj*, obj*, obj*, obj*);
obj* l_List_foldl___main___at_Lean_Elaborator_elabDefLike___spec__3(obj*, obj*);
obj* l_Lean_Parser_Syntax_asNode___main(obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__44;
obj* l_Lean_Elaborator_declaration_elaborate___lambda__3(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_levelAdd___main(obj*, obj*);
extern obj* l_Lean_Parser_command_end_HasView;
obj* l_Lean_Elaborator_attribute_elaborate___closed__2;
obj* l_Lean_Elaborator_elaboratorInh___closed__1;
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__1;
obj* l_List_foldl___main___at_Lean_Elaborator_OrderedRBMap_ofList___spec__1(obj*, obj*);
obj* l_Lean_Elaborator_attribute_elaborate(obj*, obj*, obj*, obj*);
obj* l_RBNode_insert___at_Lean_NameSet_insert___spec__1(obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__4;
obj* l_Lean_Elaborator_OrderedRBMap_insert(obj*, obj*);
obj* l_fix1___rarg___lambda__1___boxed(obj*, obj*);
extern obj* l_Lean_Parser_command_end;
extern obj* l_Lean_Parser_Term_sort_HasView_x27___lambda__1___closed__4;
obj* l_Lean_Elaborator_toPexpr___main___closed__27;
obj* l_ReaderT_lift___rarg___boxed(obj*, obj*);
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__3(obj*, obj*, obj*);
obj* l_Lean_Elaborator_preresolve___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_Module_header_elaborate(obj*, obj*, obj*, obj*);
extern "C" obj* lean_expr_mk_const(obj*, obj*);
obj* l_Lean_Elaborator_toLevel___boxed(obj*, obj*, obj*, obj*);
extern "C" obj* level_mk_param(obj*);
obj* l_List_enumFrom___main___rarg(obj*, obj*);
extern obj* l_Lean_Parser_command_export;
obj* l_Lean_Elaborator_end_elaborate___closed__4;
obj* l_Lean_Elaborator_mangleIdent(obj*);
obj* l_Lean_Elaborator_universe_elaborate___lambda__1(obj*, obj*);
uint8 l_Lean_Elaborator_isOpenNamespace___main(obj*, obj*);
obj* l_ReaderT_Monad___rarg(obj*);
obj* l_Lean_Parser_Term_Parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_List_foldl___main___at_Lean_Expr_mkApp___spec__1(obj*, obj*);
obj* l_Lean_Elaborator_initQuot_elaborate(obj*, obj*, obj*, obj*);
obj* l_RBNode_revFold___main___at_Lean_Elaborator_oldElabCommand___spec__2___boxed(obj*, obj*);
obj* l_Lean_Elaborator_resolveContext___main(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__12;
obj* l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___closed__2;
obj* l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__2___boxed(obj*, obj*);
extern obj* l_Lean_Parser_Term_show_HasView;
obj* l_List_join___main___rarg(obj*);
obj* l_Lean_Expander_mkNotationTransformer___boxed(obj*, obj*, obj*);
obj* l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__2___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_declModifiersToPexpr(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__29;
extern obj* l_Lean_Parser_Term_structInstItem_HasView;
obj* l_Lean_Elaborator_declaration_elaborate___lambda__3___closed__1;
extern obj* l_Lean_Parser_command_setOption_HasView;
obj* l_Lean_Elaborator_Expr_mkAnnotation___closed__1;
obj* l_Lean_Elaborator_ElaboratorM_Lean_Parser_MonadRec;
obj* l_Lean_Elaborator_declaration_elaborate___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr(obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_List_map___main___at_Lean_Elaborator_elabDefLike___spec__2(obj*);
namespace lean {
obj* string_append(obj*, obj*);
}
obj* l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__2;
obj* l_Lean_Elaborator_registerNotationMacro(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__20;
extern obj* l_Lean_Parser_command_initQuot;
obj* l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__5___boxed(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_KVMap_setName(obj*, obj*, obj*);
extern obj* l_Lean_Parser_command_open_HasView;
obj* l_Lean_Elaborator_inferModToPexpr___boxed(obj*);
obj* l_Lean_Elaborator_OrderedRBMap_find___rarg(obj*, obj*, obj*);
extern obj* l_Lean_Parser_command_check;
extern obj* l_Lean_Parser_Term_explicit_HasView;
obj* l_Lean_Parser_command_NotationSpec_precedenceTerm_View_toNat___main(obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__17;
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__15(obj*, obj*, obj*, obj*);
obj* l_List_mfor___main___at_Lean_Elaborator_noKind_elaborate___spec__1(obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_currLbp___rarg___lambda__3___closed__1;
namespace lean {
uint8 nat_dec_lt(obj*, obj*);
}
extern obj* l_Lean_Parser_command_include_HasView;
obj* l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1___closed__1;
obj* l_Lean_Elaborator_end_elaborate___closed__3;
obj* l_Lean_Elaborator_toPexpr___main___closed__33;
obj* l_Lean_Elaborator_notation_elaborate___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_reserveNotation_elaborate(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toLevel(obj*, obj*, obj*, obj*);
obj* l_RBNode_insert___at_Lean_Expander_builtinTransformers___spec__1(obj*, obj*, obj*);
obj* l_Lean_Elaborator_mkEqns___closed__1;
obj* l_Lean_Parser_Syntax_getPos(obj*);
extern obj* l_Lean_Expander_builtinTransformers;
obj* l_Lean_Elaborator_declModifiersToPexpr___closed__4;
extern obj* l_Char_HasRepr___closed__1;
extern obj* l_Lean_Parser_noKind;
obj* l_Lean_Elaborator_toPexpr___main___closed__39;
extern obj* l_Lean_Parser_Term_lambda_HasView;
obj* l_Lean_Elaborator_mkState(obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__36;
obj* l_List_append___rarg(obj*, obj*);
obj* l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_preresolve___main___boxed(obj*, obj*, obj*, obj*);
extern "C" obj* lean_name_mk_string(obj*, obj*);
obj* l_Lean_Elaborator_oldElabCommand___lambda__1(obj*, obj*);
obj* l_Lean_Elaborator_notation_elaborateAux___boxed(obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__1(obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__3;
obj* l_Lean_Elaborator_isOpenNamespace___main___boxed(obj*, obj*);
extern obj* l_Lean_Parser_Module_header_HasView;
obj* l_List_spanAux___main___at_Lean_Elaborator_toPexpr___main___spec__4(obj*, obj*);
extern obj* l_Lean_Parser_command_setOption;
obj* l_Lean_Elaborator_toPexpr___main___boxed(obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_command_notation;
obj* l_List_filterMap___main___at_Lean_Elaborator_resolveContext___main___spec__5(obj*, obj*);
namespace lean {
obj* nat_add(obj*, obj*);
}
obj* l_Lean_Elaborator_matchPrecedence___main___boxed(obj*, obj*);
obj* l_Lean_Elaborator_declaration_elaborate___closed__2;
obj* l_RBNode_insert___at_Lean_Elaborator_elaborators___spec__1(obj*, obj*, obj*);
extern obj* l_Lean_Parser_Module_eoi;
obj* l_Lean_Elaborator_attrsToPexpr(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_elaborateCommand___boxed(obj*, obj*, obj*);
obj* l_List_map___main___at_Lean_Elaborator_identUnivParamsToPexpr___spec__1(obj*);
namespace lean {
uint8 nat_dec_eq(obj*, obj*);
}
uint8 l_List_foldr___main___at_Lean_Elaborator_notation_elaborate___spec__1(uint8, obj*);
obj* l_Lean_Elaborator_inferModToPexpr(obj*);
obj* l_Lean_Elaborator_Expr_mkAnnotation(obj*, obj*);
obj* l_StateT_MonadExcept___rarg(obj*, obj*, obj*);
obj* l_Lean_Elaborator_section_elaborate___closed__1;
obj* l_Lean_Elaborator_currentScope___closed__1;
uint8 l_RBNode_isRed___main___rarg(obj*);
obj* l_Lean_Elaborator_OrderedRBMap_ofList(obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2(obj*);
obj* l_Lean_Elaborator_setOption_elaborate___lambda__1(obj*, obj*);
obj* l_Lean_Elaborator_noKind_elaborate___closed__1;
obj* l_Lean_Elaborator_declaration_elaborate___lambda__3___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_CommandParserConfig_registerNotationTokens(obj*, obj*);
obj* l_Lean_Elaborator_updateParserConfig___boxed(obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__11;
obj* l_Lean_Elaborator_toPexpr___main___closed__40;
obj* l_Lean_Elaborator_eoi_elaborate___closed__1;
obj* l_Lean_Elaborator_toLevel___main___closed__3;
obj* l_Lean_Elaborator_end_elaborate___closed__2;
extern "C" obj* level_mk_imax(obj*, obj*);
obj* l_Lean_Elaborator_section_elaborate___boxed(obj*, obj*, obj*, obj*);
uint8 l_List_foldr___main___at_Lean_Elaborator_isOpenNamespace___main___spec__2(obj*, uint8, obj*);
obj* l_Lean_Elaborator_mkState___boxed(obj*, obj*, obj*);
obj* l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_universe_elaborate___boxed(obj*, obj*, obj*, obj*);
obj* l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__3(obj*, obj*);
extern obj* l_Lean_Parser_Level_trailing_HasView_x27___lambda__1___closed__2;
obj* l_Lean_Elaborator_OrderedRBMap_find(obj*, obj*);
obj* l_Lean_Elaborator_preresolve(obj*, obj*, obj*, obj*);
extern obj* l_Lean_Expander_expandBracketedBinder___main___closed__4;
obj* l_Lean_Elaborator_toPexpr___main___closed__13;
obj* l_Lean_Elaborator_processCommand___lambda__1___closed__1;
obj* l_Lean_Elaborator_mkEqns___closed__2;
namespace lean {
uint8 string_dec_eq(obj*, obj*);
}
obj* l_Lean_Elaborator_processCommand___closed__1;
obj* l_Lean_Elaborator_check_elaborate___boxed(obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_command_open;
obj* l_Lean_Elaborator_namespace_elaborate(obj*, obj*, obj*, obj*);
obj* l_coe___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__4___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_command_notation_HasView;
extern obj* l_Lean_Parser_command_section_HasView;
obj* l_List_filterMap___main___at_Lean_Elaborator_notation_elaborateAux___spec__1(obj*, obj*);
obj* l_Lean_Elaborator_levelAdd___main___boxed(obj*, obj*);
extern obj* l_Lean_Parser_Term_app_HasView;
obj* l_coe___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__4(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
obj* l_List_foldl___main___at_Lean_Elaborator_OrderedRBMap_ofList___spec__1___rarg(obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__8___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__9___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_elabDefLike___spec__1(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_open_elaborate___lambda__1(obj*, obj*);
uint8 l_Lean_Elaborator_matchPrecedence(obj*, obj*);
obj* l_Lean_Elaborator_toLevel___main___closed__2;
obj* l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1(obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_Term_projection_HasView;
obj* l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__1___boxed(obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_simpleBindersToPexpr___spec__1___boxed(obj*, obj*, obj*, obj*);
extern "C" obj* lean_expr_mk_mvar(obj*, obj*);
extern obj* l_Lean_Parser_maxPrec;
extern "C" obj* lean_expr_mk_bvar(obj*);
extern "C" obj* lean_elaborator_elaborate_command(obj*, obj*, obj*);
obj* l_Lean_Elaborator_setOption_elaborate(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_open_elaborate___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__2___rarg___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_RBNode_find___main___rarg(obj*, obj*, obj*, obj*);
obj* l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__2(obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_Term_sortApp_HasView;
obj* l_Lean_Elaborator_mkNotationKind___boxed(obj*, obj*);
obj* l_Lean_Elaborator_OrderedRBMap_empty(obj*, obj*);
obj* l_Lean_Elaborator_mkEqns(obj*, obj*);
obj* l_Lean_Elaborator_namespace_elaborate___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_isOpenNamespace___boxed(obj*, obj*);
obj* l_String_trim(obj*);
extern obj* l_Lean_Parser_command_universe;
obj* l_List_filterMap___main___at_Lean_Elaborator_resolveContext___main___spec__2(obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__10___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_Option_toMonad___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__1___rarg___boxed(obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3___boxed(obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__11(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Name_replacePrefix___main(obj*, obj*, obj*);
obj* l_Lean_Elaborator_declModifiersToPexpr___closed__7;
extern "C" obj* level_mk_succ(obj*);
obj* l_Lean_Elaborator_levelGetAppArgs___main___closed__1;
obj* l_Lean_Elaborator_toPexpr___main___closed__43;
extern obj* l_Lean_Expander_bindingAnnotationUpdate;
obj* l_Lean_Elaborator_toPexpr___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_levelAdd___boxed(obj*, obj*);
extern obj* l_Lean_Parser_command_namespace_HasView;
obj* l_Lean_Elaborator_setOption_elaborate___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_levelGetAppArgs(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_elabDefLike___closed__1;
obj* l_Lean_Elaborator_levelGetAppArgs___main(obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_command_declaration;
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__13(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_levelGetAppArgs___main___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_namespace_elaborate___closed__1;
obj* l_Lean_Elaborator_declaration_elaborate___lambda__2(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__4___boxed(obj*, obj*, obj*);
obj* l_Lean_Elaborator_mkState___closed__1;
obj* l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_modifyCurrentScope___closed__1;
uint8 l_Lean_Name_quickLt(obj*, obj*);
obj* l_ReaderT_MonadExcept___rarg(obj*);
obj* l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__3(obj*);
obj* l_Lean_Parser_Syntax_format___main(obj*);
obj* l_Lean_Elaborator_getNamespace___boxed(obj*, obj*, obj*);
extern obj* l_Lean_Parser_command_universe_HasView;
extern "C" obj* lean_name_mk_numeral(obj*, obj*);
obj* l_Lean_Elaborator_OrderedRBMap_insert___rarg(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_simpleBindersToPexpr(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_declModifiersToPexpr___closed__5;
obj* l_Lean_Elaborator_levelGetAppArgs___boxed(obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_Term_anonymousConstructor_HasView;
obj* l_Lean_Elaborator_end_elaborate(obj*, obj*, obj*, obj*);
obj* l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__5(obj*);
obj* l_Lean_Elaborator_elaboratorConfigCoeFrontendConfig(obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_preresolve___main___spec__1(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_oldElabCommand___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__6(obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__24;
obj* l_Lean_Elaborator_declaration_elaborate___lambda__3___closed__2;
uint8 l_List_decidableMem___main___at_Lean_Elaborator_isOpenNamespace___main___spec__1(obj*, obj*);
obj* l_Lean_Elaborator_initQuot_elaborate___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_number_View_ofNat(obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2(obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_Term_borrowed_HasView;
obj* l_Lean_Elaborator_declaration_elaborate(obj*, obj*, obj*, obj*);
obj* l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__1___rarg___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__26;
obj* l_fixCore3(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__9(obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_Level_leading_HasView;
obj* l_Lean_Elaborator_eoi_elaborate___boxed(obj*, obj*, obj*, obj*);
extern obj* l_List_zip___rarg___closed__1;
obj* l_Lean_KVMap_setString(obj*, obj*, obj*);
obj* l_Lean_Elaborator_CommandParserConfig_registerNotationParser___closed__1;
obj* l_Lean_Parser_RecT_recurse___rarg(obj*, obj*);
obj* l_Lean_Elaborator_notation_elaborate___lambda__1(obj*, obj*);
obj* l_Lean_Elaborator_declaration_elaborate___closed__4;
obj* l_Lean_Elaborator_elabDefLike___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_ExceptT_Monad___rarg(obj*);
extern obj* l_Lean_Parser_number_HasView_x27___lambda__1___closed__6;
obj* l_Lean_Elaborator_preresolve___main(obj*, obj*, obj*, obj*);
obj* l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__2(obj*);
obj* l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__38;
obj* l_RBNode_revFold___main___at_Lean_Elaborator_oldElabCommand___spec__2(obj*, obj*);
extern obj* l_Lean_Parser_command_check_HasView;
obj* l_Lean_Elaborator_variables_elaborate___closed__2;
obj* l_Lean_Elaborator_processCommand___lambda__1(obj*, obj*, obj*, obj*);
obj* l_Lean_KVMap_insertCore___main(obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__16;
obj* l_ReaderT_bind___at_Lean_Elaborator_declaration_elaborate___spec__1___rarg(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__35;
obj* l_Lean_Elaborator_toPexpr___main___closed__7;
obj* l_Lean_Elaborator_Module_header_elaborate___closed__1;
extern obj* l_Lean_Name_toString___closed__1;
obj* l_Lean_Elaborator_declModifiersToPexpr___boxed(obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__8(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_updateParserConfig(obj*, obj*, obj*);
obj* l_Lean_Elaborator_ElaboratorM_MonadReader;
obj* l_Lean_Elaborator_toPexpr___main___closed__41;
obj* l_Lean_Elaborator_toPexpr___main___closed__25;
uint8 l_Lean_Environment_contains(obj*, obj*);
obj* l_Lean_Elaborator_attribute_elaborate___closed__1;
obj* l_RBNode_find___main___at_Lean_Elaborator_processCommand___spec__3(obj*, obj*);
obj* l_Lean_Elaborator_matchPrecedence___boxed(obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2___closed__1;
obj* l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1(obj*, obj*);
extern "C" obj* lean_expr_mk_lambda(obj*, uint8, obj*, obj*);
obj* l_Lean_Elaborator_end_elaborate___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Syntax_kind___main(obj*);
obj* l_Lean_Elaborator_elabDefLike___closed__2;
obj* l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__5;
obj* l_Lean_Elaborator_variables_elaborate___closed__1;
obj* l_Lean_Elaborator_modifyCurrentScope(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_elaboratorInh___boxed(obj*, obj*, obj*, obj*);
obj* l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(obj*, obj*, obj*);
obj* l_Lean_Elaborator_export_elaborate(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__5;
obj* l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__1___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__1(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_ElaboratorM_Monad;
obj* l_Lean_Elaborator_levelAdd(obj*, obj*);
obj* l_Lean_Elaborator_eoi_elaborate(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_noKind_elaborate(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_Module_header_elaborate___boxed(obj*, obj*, obj*, obj*);
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__6___boxed(obj*, obj*, obj*);
obj* l_Lean_FileMap_toPosition(obj*, obj*);
obj* l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__2(obj*, obj*);
extern obj* l_Lean_Parser_stringLit_HasView;
obj* l_Lean_Elaborator_toLevel___main(obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__11___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_currentScope(obj*, obj*, obj*);
extern obj* l_Lean_Parser_Term_inaccessible_HasView;
obj* l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__4___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_precToNat___main(obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__1___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_include_elaborate___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__1(obj*);
obj* l_Lean_Elaborator_declModifiersToPexpr___closed__1;
obj* l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__2___rarg(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_registerNotationMacro___boxed(obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_Term_match_HasView;
obj* l_Lean_Parser_Term_getLeading___boxed(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__2(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_mkNotationKind___rarg(obj*);
obj* l_Lean_Elaborator_elaboratorConfigCoeFrontendConfig___boxed(obj*);
obj* l_Lean_Expr_local___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Substring_ofString(obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_preresolve___main___spec__1___boxed(obj*, obj*, obj*, obj*);
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__4(obj*, obj*, obj*);
extern obj* l_Lean_Expander_noExpansion___closed__1;
extern obj* l_Lean_Parser_Term_sort_HasView;
obj* l_Lean_Elaborator_resolveContext(obj*, obj*, obj*, obj*);
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__3___boxed(obj*, obj*, obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__23;
obj* l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___closed__1;
obj* l_ReaderT_lift___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_declaration_elaborate___lambda__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__3___boxed(obj*, obj*);
extern obj* l_Lean_Parser_identUnivs_HasView;
obj* l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_notation_elaborate___closed__2;
extern obj* l_Lean_Parser_command_reserveNotation;
obj* l_Lean_Name_append___main(obj*, obj*);
obj* l_Lean_Elaborator_check_elaborate___closed__1;
obj* l_List_mfilter___main___at_Lean_Elaborator_variables_elaborate___spec__1(obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__17___boxed(obj*, obj*, obj*, obj*);
obj* l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7___boxed(obj*, obj*);
obj* l_List_foldr___main___at_Lean_Elaborator_notation_elaborate___spec__1___boxed(obj*, obj*);
obj* l_List_mfilter___main___at_Lean_Elaborator_variables_elaborate___spec__1___lambda__1(obj*, uint8, obj*, obj*);
obj* l_List_map___main___at_Lean_Elaborator_declaration_elaborate___spec__3(obj*);
uint8 l_Lean_Elaborator_matchPrecedence___main(obj*, obj*);
obj* l_Lean_Elaborator_attrsToPexpr___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_mkState___closed__2;
obj* l_Lean_Elaborator_initQuot_elaborate___closed__1;
obj* l_StateT_MonadState___rarg(obj*);
obj* l_List_decidableMem___main___at_Lean_Elaborator_isOpenNamespace___main___spec__1___boxed(obj*, obj*);
extern obj* l_List_mmap___main___at_Lean_Parser_Syntax_reprint___main___spec__1___closed__1;
obj* l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__14(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_universe_elaborate(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_CommandParserConfig_registerNotationParser(obj*, obj*, obj*);
extern "C" obj* lean_expr_mk_lit(obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_elabDefLike___spec__1___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_notation_elaborateAux___closed__1;
obj* l_Lean_Elaborator_getNamespace(obj*, obj*, obj*);
extern obj* l_Lean_Parser_Term_let_HasView;
obj* l_Lean_Parser_number_View_toNat___main(obj*);
extern "C" obj* level_mk_max(obj*, obj*);
obj* l_Lean_Parser_Term_binders_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__4(obj*, obj*, obj*, obj*);
obj* l_Lean_Elaborator_declaration_elaborate___closed__5;
extern obj* l_Lean_Parser_Term_pi_HasView;
obj* l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__1___rarg(obj*, obj*, obj*, obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_matchSpec___spec__1(obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__42;
obj* l___private_init_lean_parser_trie_2__insertAux___main___rarg(obj*, obj*, obj*, obj*);
obj* l_List_map___main___at_Lean_Expander_paren_transform___spec__1(obj*);
obj* l_Lean_Elaborator_toPexpr___main___closed__15;
obj* l_Lean_Elaborator_postprocessNotationSpec(obj*);
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__12(obj*, obj*, obj*, obj*, obj*);
extern obj* l_String_splitAux___main___closed__1;
obj* l_Lean_Elaborator_locally(obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_command_include;
obj* l_Lean_Expr_local___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
uint8 x_5; obj* x_6; 
x_5 = lean::unbox(x_4);
x_6 = lean_expr_local(x_1, x_2, x_3, x_5);
return x_6;
}
}
obj* l_Lean_Elaborator_elaborateCommand___boxed(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = lean_elaborator_elaborate_command(x_1, x_2, x_3);
return x_4;
}
}
obj* l_Lean_Elaborator_OrderedRBMap_empty___rarg(obj* x_1) {
_start:
{
obj* x_2; obj* x_3; obj* x_4; obj* x_5; 
x_2 = lean::box(0);
x_3 = lean::box(0);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_5, 0, x_2);
lean::cnstr_set(x_5, 1, x_3);
lean::cnstr_set(x_5, 2, x_4);
return x_5;
}
}
obj* l_Lean_Elaborator_OrderedRBMap_empty(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_OrderedRBMap_empty___rarg___boxed), 1, 0);
return x_3;
}
}
obj* l_Lean_Elaborator_OrderedRBMap_empty___rarg___boxed(obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_Lean_Elaborator_OrderedRBMap_empty___rarg(x_1);
lean::dec(x_1);
return x_2;
}
}
obj* l_Lean_Elaborator_OrderedRBMap_insert___rarg(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
lean::inc(x_4);
lean::inc(x_3);
x_5 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_5, 0, x_3);
lean::cnstr_set(x_5, 1, x_4);
x_6 = lean::cnstr_get(x_2, 0);
lean::inc(x_6);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::cnstr_get(x_2, 1);
lean::inc(x_8);
x_9 = lean::cnstr_get(x_2, 2);
lean::inc(x_9);
lean::dec(x_2);
lean::inc(x_9);
x_10 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_4);
x_11 = lean::mk_nat_obj(1u);
x_12 = lean::nat_add(x_9, x_11);
lean::dec(x_9);
x_13 = l_RBNode_insert___rarg(x_1, x_8, x_3, x_10);
x_14 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_14, 0, x_7);
lean::cnstr_set(x_14, 1, x_13);
lean::cnstr_set(x_14, 2, x_12);
return x_14;
}
}
obj* l_Lean_Elaborator_OrderedRBMap_insert(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_OrderedRBMap_insert___rarg), 4, 0);
return x_3;
}
}
obj* l_Lean_Elaborator_OrderedRBMap_find___rarg(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; obj* x_5; 
x_4 = lean::cnstr_get(x_2, 1);
lean::inc(x_4);
lean::dec(x_2);
x_5 = l_RBNode_find___main___rarg(x_1, lean::box(0), x_4, x_3);
return x_5;
}
}
obj* l_Lean_Elaborator_OrderedRBMap_find(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_OrderedRBMap_find___rarg), 3, 0);
return x_3;
}
}
obj* l_List_foldl___main___at_Lean_Elaborator_OrderedRBMap_ofList___spec__1___rarg(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
if (lean::obj_tag(x_3) == 0)
{
lean::dec(x_1);
return x_2;
}
else
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_4 = lean::cnstr_get(x_3, 0);
lean::inc(x_4);
x_5 = lean::cnstr_get(x_3, 1);
lean::inc(x_5);
lean::dec(x_3);
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
x_7 = lean::cnstr_get(x_4, 1);
lean::inc(x_7);
lean::dec(x_4);
lean::inc(x_1);
x_8 = l_Lean_Elaborator_OrderedRBMap_insert___rarg(x_1, x_2, x_6, x_7);
x_2 = x_8;
x_3 = x_5;
goto _start;
}
}
}
obj* l_List_foldl___main___at_Lean_Elaborator_OrderedRBMap_ofList___spec__1(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_List_foldl___main___at_Lean_Elaborator_OrderedRBMap_ofList___spec__1___rarg), 3, 0);
return x_3;
}
}
obj* l_Lean_Elaborator_OrderedRBMap_ofList___rarg(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; obj* x_4; 
x_3 = l_Lean_Elaborator_OrderedRBMap_empty___rarg(x_1);
x_4 = l_List_foldl___main___at_Lean_Elaborator_OrderedRBMap_ofList___spec__1___rarg(x_1, x_3, x_2);
return x_4;
}
}
obj* l_Lean_Elaborator_OrderedRBMap_ofList(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_OrderedRBMap_ofList___rarg), 2, 0);
return x_3;
}
}
obj* l_Lean_Elaborator_elaboratorConfigCoeFrontendConfig(obj* x_1) {
_start:
{
obj* x_2; 
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
return x_2;
}
}
obj* l_Lean_Elaborator_elaboratorConfigCoeFrontendConfig___boxed(obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_Lean_Elaborator_elaboratorConfigCoeFrontendConfig(x_1);
lean::dec(x_1);
return x_2;
}
}
obj* _init_l_Lean_Elaborator_ElaboratorM_Monad() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; 
x_1 = l_Id_Monad;
x_2 = l_ExceptT_Monad___rarg(x_1);
x_3 = l_StateT_Monad___rarg(x_2);
x_4 = l_ReaderT_Monad___rarg(x_3);
x_5 = l_ReaderT_Monad___rarg(x_4);
return x_5;
}
}
obj* _init_l_Lean_Elaborator_ElaboratorM_Lean_Parser_MonadRec() {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_RecT_recurse___rarg), 2, 0);
return x_1;
}
}
obj* _init_l_Lean_Elaborator_ElaboratorM_MonadReader() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; 
x_1 = l_Id_Monad;
x_2 = l_ExceptT_Monad___rarg(x_1);
x_3 = l_StateT_Monad___rarg(x_2);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_read___rarg), 2, 1);
lean::closure_set(x_4, 0, x_3);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___rarg___boxed), 2, 1);
lean::closure_set(x_5, 0, x_4);
return x_5;
}
}
obj* _init_l_Lean_Elaborator_ElaboratorM_MonadState() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = l_Id_Monad;
x_2 = l_ExceptT_Monad___rarg(x_1);
lean::inc(x_2);
x_3 = l_StateT_Monad___rarg(x_2);
lean::inc(x_3);
x_4 = l_ReaderT_Monad___rarg(x_3);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___boxed), 4, 3);
lean::closure_set(x_5, 0, lean::box(0));
lean::closure_set(x_5, 1, lean::box(0));
lean::closure_set(x_5, 2, x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___boxed), 4, 3);
lean::closure_set(x_6, 0, lean::box(0));
lean::closure_set(x_6, 1, lean::box(0));
lean::closure_set(x_6, 2, x_3);
x_7 = l_StateT_MonadState___rarg(x_2);
x_8 = l_monadStateTrans___rarg(x_6, x_7);
x_9 = l_monadStateTrans___rarg(x_5, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_ElaboratorM_MonadExcept() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_1 = l_Id_Monad;
x_2 = l_ExceptT_Monad___rarg(x_1);
x_3 = l_ExceptT_MonadExcept___rarg(x_1);
x_4 = l_StateT_MonadExcept___rarg(x_2, lean::box(0), x_3);
x_5 = l_ReaderT_MonadExcept___rarg(x_4);
x_6 = l_ReaderT_MonadExcept___rarg(x_5);
return x_6;
}
}
obj* _init_l_Lean_Elaborator_elaboratorInh___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; uint8 x_6; obj* x_7; obj* x_8; 
x_1 = lean::mk_nat_obj(0u);
x_2 = lean::mk_nat_obj(1u);
x_3 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_3, 0, x_1);
lean::cnstr_set(x_3, 1, x_2);
x_4 = lean::box(0);
x_5 = lean::mk_string("");
x_6 = 2;
lean::inc(x_5, 2);
x_7 = lean::alloc_cnstr(0, 5, 1);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_3);
lean::cnstr_set(x_7, 2, x_4);
lean::cnstr_set(x_7, 3, x_5);
lean::cnstr_set(x_7, 4, x_5);
lean::cnstr_set_scalar(x_7, sizeof(void*)*5, x_6);
x_8 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
}
obj* l_Lean_Elaborator_elaboratorInh(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_elaboratorInh___closed__1;
return x_5;
}
}
obj* l_Lean_Elaborator_elaboratorInh___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_elaboratorInh(x_1, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_command_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = lean::apply_3(x_2, x_1, x_3, x_4);
return x_5;
}
}
obj* l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
x_7 = lean::cnstr_get(x_6, 0);
x_8 = lean::cnstr_get(x_6, 2);
x_9 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_10; obj* x_11; uint8 x_12; obj* x_13; obj* x_14; obj* x_15; 
x_10 = lean::mk_nat_obj(0u);
x_11 = l_Lean_FileMap_toPosition(x_8, x_10);
x_12 = 2;
x_13 = l_String_splitAux___main___closed__1;
lean::inc(x_7);
x_14 = lean::alloc_cnstr(0, 5, 1);
lean::cnstr_set(x_14, 0, x_7);
lean::cnstr_set(x_14, 1, x_11);
lean::cnstr_set(x_14, 2, x_9);
lean::cnstr_set(x_14, 3, x_13);
lean::cnstr_set(x_14, 4, x_2);
lean::cnstr_set_scalar(x_14, sizeof(void*)*5, x_12);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_14);
return x_15;
}
else
{
obj* x_16; obj* x_17; 
x_16 = lean::cnstr_get(x_1, 0);
x_17 = l_Lean_Parser_Syntax_getPos(x_16);
if (lean::obj_tag(x_17) == 0)
{
obj* x_18; obj* x_19; uint8 x_20; obj* x_21; obj* x_22; obj* x_23; 
x_18 = lean::mk_nat_obj(0u);
x_19 = l_Lean_FileMap_toPosition(x_8, x_18);
x_20 = 2;
x_21 = l_String_splitAux___main___closed__1;
lean::inc(x_7);
x_22 = lean::alloc_cnstr(0, 5, 1);
lean::cnstr_set(x_22, 0, x_7);
lean::cnstr_set(x_22, 1, x_19);
lean::cnstr_set(x_22, 2, x_9);
lean::cnstr_set(x_22, 3, x_21);
lean::cnstr_set(x_22, 4, x_2);
lean::cnstr_set_scalar(x_22, sizeof(void*)*5, x_20);
x_23 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_23, 0, x_22);
return x_23;
}
else
{
obj* x_24; obj* x_25; uint8 x_26; obj* x_27; obj* x_28; obj* x_29; 
x_24 = lean::cnstr_get(x_17, 0);
lean::inc(x_24);
lean::dec(x_17);
x_25 = l_Lean_FileMap_toPosition(x_8, x_24);
x_26 = 2;
x_27 = l_String_splitAux___main___closed__1;
lean::inc(x_7);
x_28 = lean::alloc_cnstr(0, 5, 1);
lean::cnstr_set(x_28, 0, x_7);
lean::cnstr_set(x_28, 1, x_25);
lean::cnstr_set(x_28, 2, x_9);
lean::cnstr_set(x_28, 3, x_27);
lean::cnstr_set(x_28, 4, x_2);
lean::cnstr_set_scalar(x_28, sizeof(void*)*5, x_26);
x_29 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_29, 0, x_28);
return x_29;
}
}
}
}
obj* l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1(obj* x_1) {
_start:
{
obj* x_2; 
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg___boxed), 5, 0);
return x_2;
}
}
obj* _init_l_Lean_Elaborator_currentScope___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("currentScope: unreachable");
return x_1;
}
}
obj* l_Lean_Elaborator_currentScope(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = lean::cnstr_get(x_3, 4);
lean::inc(x_4);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = lean::box(0);
x_6 = l_Lean_Elaborator_currentScope___closed__1;
x_7 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_5, x_6, x_1, x_2, x_3);
lean::dec(x_3);
return x_7;
}
else
{
obj* x_8; obj* x_9; obj* x_10; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_9 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_3);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_9);
return x_10;
}
}
}
obj* l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_1);
return x_6;
}
}
obj* l_Lean_Elaborator_currentScope___boxed(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = l_Lean_Elaborator_currentScope(x_1, x_2, x_3);
lean::dec(x_2);
lean::dec(x_1);
return x_4;
}
}
obj* _init_l_Lean_Elaborator_modifyCurrentScope___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("modifyCurrentScope: unreachable");
return x_1;
}
}
obj* l_Lean_Elaborator_modifyCurrentScope(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = lean::cnstr_get(x_4, 4);
lean::inc(x_5);
if (lean::obj_tag(x_5) == 0)
{
obj* x_6; obj* x_7; obj* x_8; 
lean::dec(x_1);
x_6 = lean::box(0);
x_7 = l_Lean_Elaborator_modifyCurrentScope___closed__1;
x_8 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_6, x_7, x_2, x_3, x_4);
lean::dec(x_4);
return x_8;
}
else
{
uint8 x_9; 
x_9 = !lean::is_exclusive(x_4);
if (x_9 == 0)
{
obj* x_10; uint8 x_11; 
x_10 = lean::cnstr_get(x_4, 4);
lean::dec(x_10);
x_11 = !lean::is_exclusive(x_5);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_12 = lean::cnstr_get(x_5, 0);
x_13 = lean::apply_1(x_1, x_12);
lean::cnstr_set(x_5, 0, x_13);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_4);
x_16 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_16, 0, x_15);
return x_16;
}
else
{
obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_17 = lean::cnstr_get(x_5, 0);
x_18 = lean::cnstr_get(x_5, 1);
lean::inc(x_18);
lean::inc(x_17);
lean::dec(x_5);
x_19 = lean::apply_1(x_1, x_17);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_18);
lean::cnstr_set(x_4, 4, x_20);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_4);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_22);
return x_23;
}
}
else
{
obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
x_24 = lean::cnstr_get(x_4, 0);
x_25 = lean::cnstr_get(x_4, 1);
x_26 = lean::cnstr_get(x_4, 2);
x_27 = lean::cnstr_get(x_4, 3);
x_28 = lean::cnstr_get(x_4, 5);
x_29 = lean::cnstr_get(x_4, 6);
x_30 = lean::cnstr_get(x_4, 7);
x_31 = lean::cnstr_get(x_4, 8);
x_32 = lean::cnstr_get(x_4, 9);
x_33 = lean::cnstr_get(x_4, 10);
lean::inc(x_33);
lean::inc(x_32);
lean::inc(x_31);
lean::inc(x_30);
lean::inc(x_29);
lean::inc(x_28);
lean::inc(x_27);
lean::inc(x_26);
lean::inc(x_25);
lean::inc(x_24);
lean::dec(x_4);
x_34 = lean::cnstr_get(x_5, 0);
lean::inc(x_34);
x_35 = lean::cnstr_get(x_5, 1);
lean::inc(x_35);
if (lean::is_exclusive(x_5)) {
 lean::cnstr_release(x_5, 0);
 lean::cnstr_release(x_5, 1);
 x_36 = x_5;
} else {
 lean::dec_ref(x_5);
 x_36 = lean::box(0);
}
x_37 = lean::apply_1(x_1, x_34);
if (lean::is_scalar(x_36)) {
 x_38 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_38 = x_36;
}
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_35);
x_39 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_39, 0, x_24);
lean::cnstr_set(x_39, 1, x_25);
lean::cnstr_set(x_39, 2, x_26);
lean::cnstr_set(x_39, 3, x_27);
lean::cnstr_set(x_39, 4, x_38);
lean::cnstr_set(x_39, 5, x_28);
lean::cnstr_set(x_39, 6, x_29);
lean::cnstr_set(x_39, 7, x_30);
lean::cnstr_set(x_39, 8, x_31);
lean::cnstr_set(x_39, 9, x_32);
lean::cnstr_set(x_39, 10, x_33);
x_40 = lean::box(0);
x_41 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_39);
x_42 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_42, 0, x_41);
return x_42;
}
}
}
}
obj* l_Lean_Elaborator_modifyCurrentScope___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_modifyCurrentScope(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_List_foldl___main___at_Lean_Elaborator_mangleIdent___spec__1(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
return x_1;
}
else
{
obj* x_3; obj* x_4; obj* x_5; 
x_3 = lean::cnstr_get(x_2, 0);
lean::inc(x_3);
x_4 = lean::cnstr_get(x_2, 1);
lean::inc(x_4);
lean::dec(x_2);
x_5 = lean_name_mk_numeral(x_1, x_3);
x_1 = x_5;
x_2 = x_4;
goto _start;
}
}
}
obj* l_Lean_Elaborator_mangleIdent(obj* x_1) {
_start:
{
obj* x_2; obj* x_3; obj* x_4; 
x_2 = lean::cnstr_get(x_1, 2);
lean::inc(x_2);
x_3 = lean::cnstr_get(x_1, 4);
lean::inc(x_3);
lean::dec(x_1);
x_4 = l_List_foldl___main___at_Lean_Elaborator_mangleIdent___spec__1(x_2, x_3);
return x_4;
}
}
obj* _init_l_Lean_Elaborator_levelGetAppArgs___main___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("levelGetAppArgs: unexpected input: ");
return x_1;
}
}
obj* l_Lean_Elaborator_levelGetAppArgs___main(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Parser_Syntax_kind___main(x_1);
if (lean::obj_tag(x_5) == 0)
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
lean::inc(x_1);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_1);
x_7 = l_Lean_Parser_Syntax_format___main(x_1);
x_8 = l_Lean_Options_empty;
x_9 = l_Lean_Format_pretty(x_7, x_8);
x_10 = l_Lean_Elaborator_levelGetAppArgs___main___closed__1;
x_11 = lean::string_append(x_10, x_9);
lean::dec(x_9);
x_12 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_6, x_11, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_6);
return x_12;
}
else
{
uint8 x_13; 
x_13 = !lean::is_exclusive(x_5);
if (x_13 == 0)
{
obj* x_14; obj* x_15; uint8 x_16; 
x_14 = lean::cnstr_get(x_5, 0);
x_15 = l_Lean_Parser_Level_leading_HasView_x27___lambda__1___closed__5;
x_16 = lean_name_dec_eq(x_14, x_15);
if (x_16 == 0)
{
obj* x_17; uint8 x_18; 
x_17 = l_Lean_Parser_Level_trailing_HasView_x27___lambda__1___closed__2;
x_18 = lean_name_dec_eq(x_14, x_17);
lean::dec(x_14);
if (x_18 == 0)
{
obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
lean::inc(x_1);
lean::cnstr_set(x_5, 0, x_1);
x_19 = l_Lean_Parser_Syntax_format___main(x_1);
x_20 = l_Lean_Options_empty;
x_21 = l_Lean_Format_pretty(x_19, x_20);
x_22 = l_Lean_Elaborator_levelGetAppArgs___main___closed__1;
x_23 = lean::string_append(x_22, x_21);
lean::dec(x_21);
x_24 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_5, x_23, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_5);
return x_24;
}
else
{
obj* x_25; obj* x_26; obj* x_27; 
lean::free_heap_obj(x_5);
x_25 = l_Lean_Parser_Level_trailing_HasView;
x_26 = lean::cnstr_get(x_25, 0);
lean::inc(x_26);
lean::inc(x_1);
x_27 = lean::apply_1(x_26, x_1);
if (lean::obj_tag(x_27) == 0)
{
obj* x_28; obj* x_29; obj* x_30; 
lean::dec(x_1);
x_28 = lean::cnstr_get(x_27, 0);
lean::inc(x_28);
lean::dec(x_27);
x_29 = lean::cnstr_get(x_28, 0);
lean::inc(x_29);
x_30 = l_Lean_Elaborator_levelGetAppArgs___main(x_29, x_2, x_3, x_4);
if (lean::obj_tag(x_30) == 0)
{
uint8 x_31; 
lean::dec(x_28);
x_31 = !lean::is_exclusive(x_30);
if (x_31 == 0)
{
return x_30;
}
else
{
obj* x_32; obj* x_33; 
x_32 = lean::cnstr_get(x_30, 0);
lean::inc(x_32);
lean::dec(x_30);
x_33 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_33, 0, x_32);
return x_33;
}
}
else
{
uint8 x_34; 
x_34 = !lean::is_exclusive(x_30);
if (x_34 == 0)
{
obj* x_35; uint8 x_36; 
x_35 = lean::cnstr_get(x_30, 0);
x_36 = !lean::is_exclusive(x_35);
if (x_36 == 0)
{
obj* x_37; uint8 x_38; 
x_37 = lean::cnstr_get(x_35, 0);
x_38 = !lean::is_exclusive(x_37);
if (x_38 == 0)
{
obj* x_39; obj* x_40; obj* x_41; 
x_39 = lean::cnstr_get(x_37, 1);
x_40 = lean::cnstr_get(x_28, 1);
lean::inc(x_40);
lean::dec(x_28);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_39);
lean::cnstr_set(x_37, 1, x_41);
return x_30;
}
else
{
obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; 
x_42 = lean::cnstr_get(x_37, 0);
x_43 = lean::cnstr_get(x_37, 1);
lean::inc(x_43);
lean::inc(x_42);
lean::dec(x_37);
x_44 = lean::cnstr_get(x_28, 1);
lean::inc(x_44);
lean::dec(x_28);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_43);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_42);
lean::cnstr_set(x_46, 1, x_45);
lean::cnstr_set(x_35, 0, x_46);
return x_30;
}
}
else
{
obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; 
x_47 = lean::cnstr_get(x_35, 0);
x_48 = lean::cnstr_get(x_35, 1);
lean::inc(x_48);
lean::inc(x_47);
lean::dec(x_35);
x_49 = lean::cnstr_get(x_47, 0);
lean::inc(x_49);
x_50 = lean::cnstr_get(x_47, 1);
lean::inc(x_50);
if (lean::is_exclusive(x_47)) {
 lean::cnstr_release(x_47, 0);
 lean::cnstr_release(x_47, 1);
 x_51 = x_47;
} else {
 lean::dec_ref(x_47);
 x_51 = lean::box(0);
}
x_52 = lean::cnstr_get(x_28, 1);
lean::inc(x_52);
lean::dec(x_28);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_52);
lean::cnstr_set(x_53, 1, x_50);
if (lean::is_scalar(x_51)) {
 x_54 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_54 = x_51;
}
lean::cnstr_set(x_54, 0, x_49);
lean::cnstr_set(x_54, 1, x_53);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_48);
lean::cnstr_set(x_30, 0, x_55);
return x_30;
}
}
else
{
obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; 
x_56 = lean::cnstr_get(x_30, 0);
lean::inc(x_56);
lean::dec(x_30);
x_57 = lean::cnstr_get(x_56, 0);
lean::inc(x_57);
x_58 = lean::cnstr_get(x_56, 1);
lean::inc(x_58);
if (lean::is_exclusive(x_56)) {
 lean::cnstr_release(x_56, 0);
 lean::cnstr_release(x_56, 1);
 x_59 = x_56;
} else {
 lean::dec_ref(x_56);
 x_59 = lean::box(0);
}
x_60 = lean::cnstr_get(x_57, 0);
lean::inc(x_60);
x_61 = lean::cnstr_get(x_57, 1);
lean::inc(x_61);
if (lean::is_exclusive(x_57)) {
 lean::cnstr_release(x_57, 0);
 lean::cnstr_release(x_57, 1);
 x_62 = x_57;
} else {
 lean::dec_ref(x_57);
 x_62 = lean::box(0);
}
x_63 = lean::cnstr_get(x_28, 1);
lean::inc(x_63);
lean::dec(x_28);
x_64 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_64, 0, x_63);
lean::cnstr_set(x_64, 1, x_61);
if (lean::is_scalar(x_62)) {
 x_65 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_65 = x_62;
}
lean::cnstr_set(x_65, 0, x_60);
lean::cnstr_set(x_65, 1, x_64);
if (lean::is_scalar(x_59)) {
 x_66 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_66 = x_59;
}
lean::cnstr_set(x_66, 0, x_65);
lean::cnstr_set(x_66, 1, x_58);
x_67 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_67, 0, x_66);
return x_67;
}
}
}
else
{
obj* x_68; obj* x_69; obj* x_70; obj* x_71; 
lean::dec(x_27);
x_68 = lean::box(0);
x_69 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_69, 0, x_1);
lean::cnstr_set(x_69, 1, x_68);
x_70 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_70, 0, x_69);
lean::cnstr_set(x_70, 1, x_4);
x_71 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_71, 0, x_70);
return x_71;
}
}
}
else
{
obj* x_72; obj* x_73; obj* x_74; obj* x_75; 
lean::free_heap_obj(x_5);
lean::dec(x_14);
x_72 = lean::box(0);
x_73 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_73, 0, x_1);
lean::cnstr_set(x_73, 1, x_72);
x_74 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_4);
x_75 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_75, 0, x_74);
return x_75;
}
}
else
{
obj* x_76; obj* x_77; uint8 x_78; 
x_76 = lean::cnstr_get(x_5, 0);
lean::inc(x_76);
lean::dec(x_5);
x_77 = l_Lean_Parser_Level_leading_HasView_x27___lambda__1___closed__5;
x_78 = lean_name_dec_eq(x_76, x_77);
if (x_78 == 0)
{
obj* x_79; uint8 x_80; 
x_79 = l_Lean_Parser_Level_trailing_HasView_x27___lambda__1___closed__2;
x_80 = lean_name_dec_eq(x_76, x_79);
lean::dec(x_76);
if (x_80 == 0)
{
obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; 
lean::inc(x_1);
x_81 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_81, 0, x_1);
x_82 = l_Lean_Parser_Syntax_format___main(x_1);
x_83 = l_Lean_Options_empty;
x_84 = l_Lean_Format_pretty(x_82, x_83);
x_85 = l_Lean_Elaborator_levelGetAppArgs___main___closed__1;
x_86 = lean::string_append(x_85, x_84);
lean::dec(x_84);
x_87 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_81, x_86, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_81);
return x_87;
}
else
{
obj* x_88; obj* x_89; obj* x_90; 
x_88 = l_Lean_Parser_Level_trailing_HasView;
x_89 = lean::cnstr_get(x_88, 0);
lean::inc(x_89);
lean::inc(x_1);
x_90 = lean::apply_1(x_89, x_1);
if (lean::obj_tag(x_90) == 0)
{
obj* x_91; obj* x_92; obj* x_93; 
lean::dec(x_1);
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
lean::dec(x_90);
x_92 = lean::cnstr_get(x_91, 0);
lean::inc(x_92);
x_93 = l_Lean_Elaborator_levelGetAppArgs___main(x_92, x_2, x_3, x_4);
if (lean::obj_tag(x_93) == 0)
{
obj* x_94; obj* x_95; obj* x_96; 
lean::dec(x_91);
x_94 = lean::cnstr_get(x_93, 0);
lean::inc(x_94);
if (lean::is_exclusive(x_93)) {
 lean::cnstr_release(x_93, 0);
 x_95 = x_93;
} else {
 lean::dec_ref(x_93);
 x_95 = lean::box(0);
}
if (lean::is_scalar(x_95)) {
 x_96 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_96 = x_95;
}
lean::cnstr_set(x_96, 0, x_94);
return x_96;
}
else
{
obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; 
x_97 = lean::cnstr_get(x_93, 0);
lean::inc(x_97);
if (lean::is_exclusive(x_93)) {
 lean::cnstr_release(x_93, 0);
 x_98 = x_93;
} else {
 lean::dec_ref(x_93);
 x_98 = lean::box(0);
}
x_99 = lean::cnstr_get(x_97, 0);
lean::inc(x_99);
x_100 = lean::cnstr_get(x_97, 1);
lean::inc(x_100);
if (lean::is_exclusive(x_97)) {
 lean::cnstr_release(x_97, 0);
 lean::cnstr_release(x_97, 1);
 x_101 = x_97;
} else {
 lean::dec_ref(x_97);
 x_101 = lean::box(0);
}
x_102 = lean::cnstr_get(x_99, 0);
lean::inc(x_102);
x_103 = lean::cnstr_get(x_99, 1);
lean::inc(x_103);
if (lean::is_exclusive(x_99)) {
 lean::cnstr_release(x_99, 0);
 lean::cnstr_release(x_99, 1);
 x_104 = x_99;
} else {
 lean::dec_ref(x_99);
 x_104 = lean::box(0);
}
x_105 = lean::cnstr_get(x_91, 1);
lean::inc(x_105);
lean::dec(x_91);
x_106 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_106, 0, x_105);
lean::cnstr_set(x_106, 1, x_103);
if (lean::is_scalar(x_104)) {
 x_107 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_107 = x_104;
}
lean::cnstr_set(x_107, 0, x_102);
lean::cnstr_set(x_107, 1, x_106);
if (lean::is_scalar(x_101)) {
 x_108 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_108 = x_101;
}
lean::cnstr_set(x_108, 0, x_107);
lean::cnstr_set(x_108, 1, x_100);
if (lean::is_scalar(x_98)) {
 x_109 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_109 = x_98;
}
lean::cnstr_set(x_109, 0, x_108);
return x_109;
}
}
else
{
obj* x_110; obj* x_111; obj* x_112; obj* x_113; 
lean::dec(x_90);
x_110 = lean::box(0);
x_111 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_111, 0, x_1);
lean::cnstr_set(x_111, 1, x_110);
x_112 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_112, 0, x_111);
lean::cnstr_set(x_112, 1, x_4);
x_113 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_113, 0, x_112);
return x_113;
}
}
}
else
{
obj* x_114; obj* x_115; obj* x_116; obj* x_117; 
lean::dec(x_76);
x_114 = lean::box(0);
x_115 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_115, 0, x_1);
lean::cnstr_set(x_115, 1, x_114);
x_116 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_116, 0, x_115);
lean::cnstr_set(x_116, 1, x_4);
x_117 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_117, 0, x_116);
return x_117;
}
}
}
}
}
obj* l_Lean_Elaborator_levelGetAppArgs___main___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_levelGetAppArgs___main(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_levelGetAppArgs(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_levelGetAppArgs___main(x_1, x_2, x_3, x_4);
return x_5;
}
}
obj* l_Lean_Elaborator_levelGetAppArgs___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_levelGetAppArgs(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_levelAdd___main(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; uint8 x_4; 
x_3 = lean::mk_nat_obj(0u);
x_4 = lean::nat_dec_eq(x_2, x_3);
if (x_4 == 0)
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_5 = lean::mk_nat_obj(1u);
x_6 = lean::nat_sub(x_2, x_5);
x_7 = l_Lean_Elaborator_levelAdd___main(x_1, x_6);
lean::dec(x_6);
x_8 = level_mk_succ(x_7);
return x_8;
}
else
{
lean::inc(x_1);
return x_1;
}
}
}
obj* l_Lean_Elaborator_levelAdd___main___boxed(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = l_Lean_Elaborator_levelAdd___main(x_1, x_2);
lean::dec(x_2);
lean::dec(x_1);
return x_3;
}
}
obj* l_Lean_Elaborator_levelAdd(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = l_Lean_Elaborator_levelAdd___main(x_1, x_2);
return x_3;
}
}
obj* l_Lean_Elaborator_levelAdd___boxed(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = l_Lean_Elaborator_levelAdd(x_1, x_2);
lean::dec(x_2);
lean::dec(x_1);
return x_3;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
uint8 x_8; 
x_8 = !lean::is_exclusive(x_1);
if (x_8 == 0)
{
obj* x_9; obj* x_10; obj* x_11; 
x_9 = lean::cnstr_get(x_1, 0);
x_10 = lean::cnstr_get(x_1, 1);
x_11 = l_Lean_Elaborator_toLevel___main(x_9, x_2, x_3, x_4);
if (lean::obj_tag(x_11) == 0)
{
uint8 x_12; 
lean::free_heap_obj(x_1);
lean::dec(x_10);
x_12 = !lean::is_exclusive(x_11);
if (x_12 == 0)
{
return x_11;
}
else
{
obj* x_13; obj* x_14; 
x_13 = lean::cnstr_get(x_11, 0);
lean::inc(x_13);
lean::dec(x_11);
x_14 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
}
else
{
obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
lean::dec(x_11);
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
x_17 = lean::cnstr_get(x_15, 1);
lean::inc(x_17);
lean::dec(x_15);
x_18 = l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1(x_10, x_2, x_3, x_17);
if (lean::obj_tag(x_18) == 0)
{
uint8 x_19; 
lean::dec(x_16);
lean::free_heap_obj(x_1);
x_19 = !lean::is_exclusive(x_18);
if (x_19 == 0)
{
return x_18;
}
else
{
obj* x_20; obj* x_21; 
x_20 = lean::cnstr_get(x_18, 0);
lean::inc(x_20);
lean::dec(x_18);
x_21 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_21, 0, x_20);
return x_21;
}
}
else
{
uint8 x_22; 
x_22 = !lean::is_exclusive(x_18);
if (x_22 == 0)
{
obj* x_23; uint8 x_24; 
x_23 = lean::cnstr_get(x_18, 0);
x_24 = !lean::is_exclusive(x_23);
if (x_24 == 0)
{
obj* x_25; 
x_25 = lean::cnstr_get(x_23, 0);
lean::cnstr_set(x_1, 1, x_25);
lean::cnstr_set(x_1, 0, x_16);
lean::cnstr_set(x_23, 0, x_1);
return x_18;
}
else
{
obj* x_26; obj* x_27; obj* x_28; 
x_26 = lean::cnstr_get(x_23, 0);
x_27 = lean::cnstr_get(x_23, 1);
lean::inc(x_27);
lean::inc(x_26);
lean::dec(x_23);
lean::cnstr_set(x_1, 1, x_26);
lean::cnstr_set(x_1, 0, x_16);
x_28 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_28, 0, x_1);
lean::cnstr_set(x_28, 1, x_27);
lean::cnstr_set(x_18, 0, x_28);
return x_18;
}
}
else
{
obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_29 = lean::cnstr_get(x_18, 0);
lean::inc(x_29);
lean::dec(x_18);
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
x_31 = lean::cnstr_get(x_29, 1);
lean::inc(x_31);
if (lean::is_exclusive(x_29)) {
 lean::cnstr_release(x_29, 0);
 lean::cnstr_release(x_29, 1);
 x_32 = x_29;
} else {
 lean::dec_ref(x_29);
 x_32 = lean::box(0);
}
lean::cnstr_set(x_1, 1, x_30);
lean::cnstr_set(x_1, 0, x_16);
if (lean::is_scalar(x_32)) {
 x_33 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_33 = x_32;
}
lean::cnstr_set(x_33, 0, x_1);
lean::cnstr_set(x_33, 1, x_31);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_33);
return x_34;
}
}
}
}
else
{
obj* x_35; obj* x_36; obj* x_37; 
x_35 = lean::cnstr_get(x_1, 0);
x_36 = lean::cnstr_get(x_1, 1);
lean::inc(x_36);
lean::inc(x_35);
lean::dec(x_1);
x_37 = l_Lean_Elaborator_toLevel___main(x_35, x_2, x_3, x_4);
if (lean::obj_tag(x_37) == 0)
{
obj* x_38; obj* x_39; obj* x_40; 
lean::dec(x_36);
x_38 = lean::cnstr_get(x_37, 0);
lean::inc(x_38);
if (lean::is_exclusive(x_37)) {
 lean::cnstr_release(x_37, 0);
 x_39 = x_37;
} else {
 lean::dec_ref(x_37);
 x_39 = lean::box(0);
}
if (lean::is_scalar(x_39)) {
 x_40 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_40 = x_39;
}
lean::cnstr_set(x_40, 0, x_38);
return x_40;
}
else
{
obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
x_41 = lean::cnstr_get(x_37, 0);
lean::inc(x_41);
lean::dec(x_37);
x_42 = lean::cnstr_get(x_41, 0);
lean::inc(x_42);
x_43 = lean::cnstr_get(x_41, 1);
lean::inc(x_43);
lean::dec(x_41);
x_44 = l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1(x_36, x_2, x_3, x_43);
if (lean::obj_tag(x_44) == 0)
{
obj* x_45; obj* x_46; obj* x_47; 
lean::dec(x_42);
x_45 = lean::cnstr_get(x_44, 0);
lean::inc(x_45);
if (lean::is_exclusive(x_44)) {
 lean::cnstr_release(x_44, 0);
 x_46 = x_44;
} else {
 lean::dec_ref(x_44);
 x_46 = lean::box(0);
}
if (lean::is_scalar(x_46)) {
 x_47 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_47 = x_46;
}
lean::cnstr_set(x_47, 0, x_45);
return x_47;
}
else
{
obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; 
x_48 = lean::cnstr_get(x_44, 0);
lean::inc(x_48);
if (lean::is_exclusive(x_44)) {
 lean::cnstr_release(x_44, 0);
 x_49 = x_44;
} else {
 lean::dec_ref(x_44);
 x_49 = lean::box(0);
}
x_50 = lean::cnstr_get(x_48, 0);
lean::inc(x_50);
x_51 = lean::cnstr_get(x_48, 1);
lean::inc(x_51);
if (lean::is_exclusive(x_48)) {
 lean::cnstr_release(x_48, 0);
 lean::cnstr_release(x_48, 1);
 x_52 = x_48;
} else {
 lean::dec_ref(x_48);
 x_52 = lean::box(0);
}
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_42);
lean::cnstr_set(x_53, 1, x_50);
if (lean::is_scalar(x_52)) {
 x_54 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_54 = x_52;
}
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_51);
if (lean::is_scalar(x_49)) {
 x_55 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_55 = x_49;
}
lean::cnstr_set(x_55, 0, x_54);
return x_55;
}
}
}
}
}
}
obj* l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__2(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
lean::inc(x_1);
return x_1;
}
else
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_2, 0);
lean::inc(x_3);
x_4 = lean::cnstr_get(x_2, 1);
lean::inc(x_4);
lean::dec(x_2);
x_5 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__2(x_1, x_4);
x_6 = level_mk_max(x_3, x_5);
return x_6;
}
}
}
obj* l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__3(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
lean::inc(x_1);
return x_1;
}
else
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_2, 0);
lean::inc(x_3);
x_4 = lean::cnstr_get(x_2, 1);
lean::inc(x_4);
lean::dec(x_2);
x_5 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__3(x_1, x_4);
x_6 = level_mk_imax(x_3, x_5);
return x_6;
}
}
}
obj* _init_l_Lean_Elaborator_toLevel___main___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("toLevel: unexpected input: ");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_toLevel___main___closed__2() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("ill-formed universe Level");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_toLevel___main___closed__3() {
_start:
{
obj* x_1; obj* x_2; 
x_1 = lean::box(0);
x_2 = level_mk_mvar(x_1);
return x_2;
}
}
obj* _init_l_Lean_Elaborator_toLevel___main___closed__4() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("unknown universe variable '");
return x_1;
}
}
obj* l_Lean_Elaborator_toLevel___main(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
lean::inc(x_1);
x_5 = l_Lean_Elaborator_levelGetAppArgs___main(x_1, x_2, x_3, x_4);
if (lean::obj_tag(x_5) == 0)
{
uint8 x_6; 
lean::dec(x_1);
x_6 = !lean::is_exclusive(x_5);
if (x_6 == 0)
{
return x_5;
}
else
{
obj* x_7; obj* x_8; 
x_7 = lean::cnstr_get(x_5, 0);
lean::inc(x_7);
lean::dec(x_5);
x_8 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
}
else
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_9 = lean::cnstr_get(x_5, 0);
lean::inc(x_9);
lean::dec(x_5);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
x_11 = lean::cnstr_get(x_9, 1);
lean::inc(x_11);
lean::dec(x_9);
x_12 = lean::cnstr_get(x_10, 0);
lean::inc(x_12);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
lean::dec(x_10);
x_14 = l_Lean_Elaborator_currentScope(x_2, x_3, x_11);
if (lean::obj_tag(x_14) == 0)
{
uint8 x_15; 
lean::dec(x_13);
lean::dec(x_12);
lean::dec(x_1);
x_15 = !lean::is_exclusive(x_14);
if (x_15 == 0)
{
return x_14;
}
else
{
obj* x_16; obj* x_17; 
x_16 = lean::cnstr_get(x_14, 0);
lean::inc(x_16);
lean::dec(x_14);
x_17 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_17, 0, x_16);
return x_17;
}
}
else
{
uint8 x_18; 
x_18 = !lean::is_exclusive(x_14);
if (x_18 == 0)
{
obj* x_19; uint8 x_20; 
x_19 = lean::cnstr_get(x_14, 0);
x_20 = !lean::is_exclusive(x_19);
if (x_20 == 0)
{
obj* x_21; obj* x_22; obj* x_23; 
x_21 = lean::cnstr_get(x_19, 0);
x_22 = lean::cnstr_get(x_19, 1);
x_23 = l_Lean_Parser_Syntax_kind___main(x_12);
if (lean::obj_tag(x_23) == 0)
{
obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; 
lean::free_heap_obj(x_19);
lean::dec(x_21);
lean::free_heap_obj(x_14);
lean::dec(x_13);
lean::dec(x_12);
lean::inc(x_1);
x_24 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_24, 0, x_1);
x_25 = l_Lean_Parser_Syntax_format___main(x_1);
x_26 = l_Lean_Options_empty;
x_27 = l_Lean_Format_pretty(x_25, x_26);
x_28 = l_Lean_Elaborator_toLevel___main___closed__1;
x_29 = lean::string_append(x_28, x_27);
lean::dec(x_27);
x_30 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_24, x_29, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_24);
return x_30;
}
else
{
uint8 x_31; 
x_31 = !lean::is_exclusive(x_23);
if (x_31 == 0)
{
obj* x_32; obj* x_33; uint8 x_34; 
x_32 = lean::cnstr_get(x_23, 0);
x_33 = l_Lean_Parser_Level_leading_HasView_x27___lambda__1___closed__5;
x_34 = lean_name_dec_eq(x_32, x_33);
if (x_34 == 0)
{
obj* x_35; uint8 x_36; 
lean::free_heap_obj(x_19);
lean::dec(x_21);
lean::free_heap_obj(x_14);
x_35 = l_Lean_Parser_Level_trailing_HasView_x27___lambda__1___closed__2;
x_36 = lean_name_dec_eq(x_32, x_35);
lean::dec(x_32);
if (x_36 == 0)
{
obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
lean::dec(x_13);
lean::dec(x_12);
lean::inc(x_1);
lean::cnstr_set(x_23, 0, x_1);
x_37 = l_Lean_Parser_Syntax_format___main(x_1);
x_38 = l_Lean_Options_empty;
x_39 = l_Lean_Format_pretty(x_37, x_38);
x_40 = l_Lean_Elaborator_toLevel___main___closed__1;
x_41 = lean::string_append(x_40, x_39);
lean::dec(x_39);
x_42 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_23, x_41, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_23);
return x_42;
}
else
{
obj* x_43; obj* x_44; obj* x_45; 
x_43 = l_Lean_Parser_Level_trailing_HasView;
x_44 = lean::cnstr_get(x_43, 0);
lean::inc(x_44);
x_45 = lean::apply_1(x_44, x_12);
if (lean::obj_tag(x_45) == 0)
{
obj* x_46; obj* x_47; 
lean::dec(x_45);
lean::dec(x_13);
lean::cnstr_set(x_23, 0, x_1);
x_46 = l_Lean_Elaborator_toLevel___main___closed__2;
x_47 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_23, x_46, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_23);
return x_47;
}
else
{
if (lean::obj_tag(x_13) == 0)
{
obj* x_48; obj* x_49; obj* x_50; 
lean::free_heap_obj(x_23);
lean::dec(x_1);
x_48 = lean::cnstr_get(x_45, 0);
lean::inc(x_48);
lean::dec(x_45);
x_49 = lean::cnstr_get(x_48, 0);
lean::inc(x_49);
x_50 = l_Lean_Elaborator_toLevel___main(x_49, x_2, x_3, x_22);
if (lean::obj_tag(x_50) == 0)
{
uint8 x_51; 
lean::dec(x_48);
x_51 = !lean::is_exclusive(x_50);
if (x_51 == 0)
{
return x_50;
}
else
{
obj* x_52; obj* x_53; 
x_52 = lean::cnstr_get(x_50, 0);
lean::inc(x_52);
lean::dec(x_50);
x_53 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_53, 0, x_52);
return x_53;
}
}
else
{
uint8 x_54; 
x_54 = !lean::is_exclusive(x_50);
if (x_54 == 0)
{
obj* x_55; uint8 x_56; 
x_55 = lean::cnstr_get(x_50, 0);
x_56 = !lean::is_exclusive(x_55);
if (x_56 == 0)
{
obj* x_57; obj* x_58; obj* x_59; obj* x_60; 
x_57 = lean::cnstr_get(x_55, 0);
x_58 = lean::cnstr_get(x_48, 2);
lean::inc(x_58);
lean::dec(x_48);
x_59 = l_Lean_Parser_number_View_toNat___main(x_58);
x_60 = l_Lean_Elaborator_levelAdd___main(x_57, x_59);
lean::dec(x_59);
lean::dec(x_57);
lean::cnstr_set(x_55, 0, x_60);
return x_50;
}
else
{
obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; 
x_61 = lean::cnstr_get(x_55, 0);
x_62 = lean::cnstr_get(x_55, 1);
lean::inc(x_62);
lean::inc(x_61);
lean::dec(x_55);
x_63 = lean::cnstr_get(x_48, 2);
lean::inc(x_63);
lean::dec(x_48);
x_64 = l_Lean_Parser_number_View_toNat___main(x_63);
x_65 = l_Lean_Elaborator_levelAdd___main(x_61, x_64);
lean::dec(x_64);
lean::dec(x_61);
x_66 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_66, 0, x_65);
lean::cnstr_set(x_66, 1, x_62);
lean::cnstr_set(x_50, 0, x_66);
return x_50;
}
}
else
{
obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; 
x_67 = lean::cnstr_get(x_50, 0);
lean::inc(x_67);
lean::dec(x_50);
x_68 = lean::cnstr_get(x_67, 0);
lean::inc(x_68);
x_69 = lean::cnstr_get(x_67, 1);
lean::inc(x_69);
if (lean::is_exclusive(x_67)) {
 lean::cnstr_release(x_67, 0);
 lean::cnstr_release(x_67, 1);
 x_70 = x_67;
} else {
 lean::dec_ref(x_67);
 x_70 = lean::box(0);
}
x_71 = lean::cnstr_get(x_48, 2);
lean::inc(x_71);
lean::dec(x_48);
x_72 = l_Lean_Parser_number_View_toNat___main(x_71);
x_73 = l_Lean_Elaborator_levelAdd___main(x_68, x_72);
lean::dec(x_72);
lean::dec(x_68);
if (lean::is_scalar(x_70)) {
 x_74 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_74 = x_70;
}
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_69);
x_75 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_75, 0, x_74);
return x_75;
}
}
}
else
{
obj* x_76; obj* x_77; 
lean::dec(x_45);
lean::dec(x_13);
lean::cnstr_set(x_23, 0, x_1);
x_76 = l_Lean_Elaborator_toLevel___main___closed__2;
x_77 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_23, x_76, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_23);
return x_77;
}
}
}
}
else
{
obj* x_78; obj* x_79; obj* x_80; 
lean::dec(x_32);
x_78 = l_Lean_Parser_Level_leading_HasView;
x_79 = lean::cnstr_get(x_78, 0);
lean::inc(x_79);
x_80 = lean::apply_1(x_79, x_12);
switch (lean::obj_tag(x_80)) {
case 0:
{
lean::dec(x_80);
lean::free_heap_obj(x_19);
lean::dec(x_21);
lean::free_heap_obj(x_14);
if (lean::obj_tag(x_13) == 0)
{
obj* x_81; obj* x_82; 
lean::cnstr_set(x_23, 0, x_1);
x_81 = l_Lean_Elaborator_toLevel___main___closed__2;
x_82 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_23, x_81, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_23);
return x_82;
}
else
{
obj* x_83; obj* x_84; obj* x_85; 
lean::free_heap_obj(x_23);
lean::dec(x_1);
x_83 = lean::cnstr_get(x_13, 0);
lean::inc(x_83);
x_84 = lean::cnstr_get(x_13, 1);
lean::inc(x_84);
lean::dec(x_13);
x_85 = l_Lean_Elaborator_toLevel___main(x_83, x_2, x_3, x_22);
if (lean::obj_tag(x_85) == 0)
{
uint8 x_86; 
lean::dec(x_84);
x_86 = !lean::is_exclusive(x_85);
if (x_86 == 0)
{
return x_85;
}
else
{
obj* x_87; obj* x_88; 
x_87 = lean::cnstr_get(x_85, 0);
lean::inc(x_87);
lean::dec(x_85);
x_88 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_88, 0, x_87);
return x_88;
}
}
else
{
obj* x_89; obj* x_90; obj* x_91; obj* x_92; 
x_89 = lean::cnstr_get(x_85, 0);
lean::inc(x_89);
lean::dec(x_85);
x_90 = lean::cnstr_get(x_89, 0);
lean::inc(x_90);
x_91 = lean::cnstr_get(x_89, 1);
lean::inc(x_91);
lean::dec(x_89);
x_92 = l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1(x_84, x_2, x_3, x_91);
if (lean::obj_tag(x_92) == 0)
{
uint8 x_93; 
lean::dec(x_90);
x_93 = !lean::is_exclusive(x_92);
if (x_93 == 0)
{
return x_92;
}
else
{
obj* x_94; obj* x_95; 
x_94 = lean::cnstr_get(x_92, 0);
lean::inc(x_94);
lean::dec(x_92);
x_95 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_95, 0, x_94);
return x_95;
}
}
else
{
uint8 x_96; 
x_96 = !lean::is_exclusive(x_92);
if (x_96 == 0)
{
obj* x_97; uint8 x_98; 
x_97 = lean::cnstr_get(x_92, 0);
x_98 = !lean::is_exclusive(x_97);
if (x_98 == 0)
{
obj* x_99; obj* x_100; 
x_99 = lean::cnstr_get(x_97, 0);
x_100 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__2(x_90, x_99);
lean::dec(x_90);
lean::cnstr_set(x_97, 0, x_100);
return x_92;
}
else
{
obj* x_101; obj* x_102; obj* x_103; obj* x_104; 
x_101 = lean::cnstr_get(x_97, 0);
x_102 = lean::cnstr_get(x_97, 1);
lean::inc(x_102);
lean::inc(x_101);
lean::dec(x_97);
x_103 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__2(x_90, x_101);
lean::dec(x_90);
x_104 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_104, 0, x_103);
lean::cnstr_set(x_104, 1, x_102);
lean::cnstr_set(x_92, 0, x_104);
return x_92;
}
}
else
{
obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; 
x_105 = lean::cnstr_get(x_92, 0);
lean::inc(x_105);
lean::dec(x_92);
x_106 = lean::cnstr_get(x_105, 0);
lean::inc(x_106);
x_107 = lean::cnstr_get(x_105, 1);
lean::inc(x_107);
if (lean::is_exclusive(x_105)) {
 lean::cnstr_release(x_105, 0);
 lean::cnstr_release(x_105, 1);
 x_108 = x_105;
} else {
 lean::dec_ref(x_105);
 x_108 = lean::box(0);
}
x_109 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__2(x_90, x_106);
lean::dec(x_90);
if (lean::is_scalar(x_108)) {
 x_110 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_110 = x_108;
}
lean::cnstr_set(x_110, 0, x_109);
lean::cnstr_set(x_110, 1, x_107);
x_111 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_111, 0, x_110);
return x_111;
}
}
}
}
}
case 1:
{
lean::dec(x_80);
lean::free_heap_obj(x_19);
lean::dec(x_21);
lean::free_heap_obj(x_14);
if (lean::obj_tag(x_13) == 0)
{
obj* x_112; obj* x_113; 
lean::cnstr_set(x_23, 0, x_1);
x_112 = l_Lean_Elaborator_toLevel___main___closed__2;
x_113 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_23, x_112, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_23);
return x_113;
}
else
{
obj* x_114; obj* x_115; obj* x_116; 
lean::free_heap_obj(x_23);
lean::dec(x_1);
x_114 = lean::cnstr_get(x_13, 0);
lean::inc(x_114);
x_115 = lean::cnstr_get(x_13, 1);
lean::inc(x_115);
lean::dec(x_13);
x_116 = l_Lean_Elaborator_toLevel___main(x_114, x_2, x_3, x_22);
if (lean::obj_tag(x_116) == 0)
{
uint8 x_117; 
lean::dec(x_115);
x_117 = !lean::is_exclusive(x_116);
if (x_117 == 0)
{
return x_116;
}
else
{
obj* x_118; obj* x_119; 
x_118 = lean::cnstr_get(x_116, 0);
lean::inc(x_118);
lean::dec(x_116);
x_119 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_119, 0, x_118);
return x_119;
}
}
else
{
obj* x_120; obj* x_121; obj* x_122; obj* x_123; 
x_120 = lean::cnstr_get(x_116, 0);
lean::inc(x_120);
lean::dec(x_116);
x_121 = lean::cnstr_get(x_120, 0);
lean::inc(x_121);
x_122 = lean::cnstr_get(x_120, 1);
lean::inc(x_122);
lean::dec(x_120);
x_123 = l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1(x_115, x_2, x_3, x_122);
if (lean::obj_tag(x_123) == 0)
{
uint8 x_124; 
lean::dec(x_121);
x_124 = !lean::is_exclusive(x_123);
if (x_124 == 0)
{
return x_123;
}
else
{
obj* x_125; obj* x_126; 
x_125 = lean::cnstr_get(x_123, 0);
lean::inc(x_125);
lean::dec(x_123);
x_126 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_126, 0, x_125);
return x_126;
}
}
else
{
uint8 x_127; 
x_127 = !lean::is_exclusive(x_123);
if (x_127 == 0)
{
obj* x_128; uint8 x_129; 
x_128 = lean::cnstr_get(x_123, 0);
x_129 = !lean::is_exclusive(x_128);
if (x_129 == 0)
{
obj* x_130; obj* x_131; 
x_130 = lean::cnstr_get(x_128, 0);
x_131 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__3(x_121, x_130);
lean::dec(x_121);
lean::cnstr_set(x_128, 0, x_131);
return x_123;
}
else
{
obj* x_132; obj* x_133; obj* x_134; obj* x_135; 
x_132 = lean::cnstr_get(x_128, 0);
x_133 = lean::cnstr_get(x_128, 1);
lean::inc(x_133);
lean::inc(x_132);
lean::dec(x_128);
x_134 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__3(x_121, x_132);
lean::dec(x_121);
x_135 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_135, 0, x_134);
lean::cnstr_set(x_135, 1, x_133);
lean::cnstr_set(x_123, 0, x_135);
return x_123;
}
}
else
{
obj* x_136; obj* x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_141; obj* x_142; 
x_136 = lean::cnstr_get(x_123, 0);
lean::inc(x_136);
lean::dec(x_123);
x_137 = lean::cnstr_get(x_136, 0);
lean::inc(x_137);
x_138 = lean::cnstr_get(x_136, 1);
lean::inc(x_138);
if (lean::is_exclusive(x_136)) {
 lean::cnstr_release(x_136, 0);
 lean::cnstr_release(x_136, 1);
 x_139 = x_136;
} else {
 lean::dec_ref(x_136);
 x_139 = lean::box(0);
}
x_140 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__3(x_121, x_137);
lean::dec(x_121);
if (lean::is_scalar(x_139)) {
 x_141 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_141 = x_139;
}
lean::cnstr_set(x_141, 0, x_140);
lean::cnstr_set(x_141, 1, x_138);
x_142 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_142, 0, x_141);
return x_142;
}
}
}
}
}
case 2:
{
lean::dec(x_80);
lean::dec(x_21);
if (lean::obj_tag(x_13) == 0)
{
obj* x_143; 
lean::free_heap_obj(x_23);
lean::dec(x_1);
x_143 = l_Lean_Elaborator_toLevel___main___closed__3;
lean::cnstr_set(x_19, 0, x_143);
return x_14;
}
else
{
obj* x_144; obj* x_145; 
lean::free_heap_obj(x_19);
lean::free_heap_obj(x_14);
lean::dec(x_13);
lean::cnstr_set(x_23, 0, x_1);
x_144 = l_Lean_Elaborator_toLevel___main___closed__2;
x_145 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_23, x_144, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_23);
return x_145;
}
}
case 3:
{
obj* x_146; obj* x_147; 
lean::dec(x_80);
lean::free_heap_obj(x_19);
lean::dec(x_21);
lean::free_heap_obj(x_14);
lean::dec(x_13);
lean::cnstr_set(x_23, 0, x_1);
x_146 = l_Lean_Elaborator_toLevel___main___closed__2;
x_147 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_23, x_146, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_23);
return x_147;
}
case 4:
{
lean::dec(x_21);
if (lean::obj_tag(x_13) == 0)
{
obj* x_148; obj* x_149; obj* x_150; 
lean::free_heap_obj(x_23);
lean::dec(x_1);
x_148 = lean::cnstr_get(x_80, 0);
lean::inc(x_148);
lean::dec(x_80);
x_149 = l_Lean_Parser_number_View_toNat___main(x_148);
x_150 = l_Lean_Level_ofNat___main(x_149);
lean::dec(x_149);
lean::cnstr_set(x_19, 0, x_150);
return x_14;
}
else
{
obj* x_151; obj* x_152; 
lean::dec(x_80);
lean::free_heap_obj(x_19);
lean::free_heap_obj(x_14);
lean::dec(x_13);
lean::cnstr_set(x_23, 0, x_1);
x_151 = l_Lean_Elaborator_toLevel___main___closed__2;
x_152 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_23, x_151, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_23);
return x_152;
}
}
default: 
{
if (lean::obj_tag(x_13) == 0)
{
obj* x_153; obj* x_154; obj* x_155; obj* x_156; obj* x_157; 
x_153 = lean::cnstr_get(x_80, 0);
lean::inc(x_153);
lean::dec(x_80);
x_154 = l_Lean_Elaborator_mangleIdent(x_153);
x_155 = lean::cnstr_get(x_21, 3);
lean::inc(x_155);
lean::dec(x_21);
x_156 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
lean::inc(x_154);
x_157 = l_Lean_Elaborator_OrderedRBMap_find___rarg(x_156, x_155, x_154);
if (lean::obj_tag(x_157) == 0)
{
obj* x_158; obj* x_159; obj* x_160; obj* x_161; obj* x_162; obj* x_163; obj* x_164; 
lean::free_heap_obj(x_19);
lean::free_heap_obj(x_14);
lean::cnstr_set(x_23, 0, x_1);
x_158 = l_Lean_Name_toString___closed__1;
x_159 = l_Lean_Name_toStringWithSep___main(x_158, x_154);
x_160 = l_Lean_Elaborator_toLevel___main___closed__4;
x_161 = lean::string_append(x_160, x_159);
lean::dec(x_159);
x_162 = l_Char_HasRepr___closed__1;
x_163 = lean::string_append(x_161, x_162);
x_164 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_23, x_163, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_23);
return x_164;
}
else
{
obj* x_165; 
lean::dec(x_157);
lean::free_heap_obj(x_23);
lean::dec(x_1);
x_165 = level_mk_param(x_154);
lean::cnstr_set(x_19, 0, x_165);
return x_14;
}
}
else
{
obj* x_166; obj* x_167; 
lean::dec(x_80);
lean::free_heap_obj(x_19);
lean::dec(x_21);
lean::free_heap_obj(x_14);
lean::dec(x_13);
lean::cnstr_set(x_23, 0, x_1);
x_166 = l_Lean_Elaborator_toLevel___main___closed__2;
x_167 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_23, x_166, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_23);
return x_167;
}
}
}
}
}
else
{
obj* x_168; obj* x_169; uint8 x_170; 
x_168 = lean::cnstr_get(x_23, 0);
lean::inc(x_168);
lean::dec(x_23);
x_169 = l_Lean_Parser_Level_leading_HasView_x27___lambda__1___closed__5;
x_170 = lean_name_dec_eq(x_168, x_169);
if (x_170 == 0)
{
obj* x_171; uint8 x_172; 
lean::free_heap_obj(x_19);
lean::dec(x_21);
lean::free_heap_obj(x_14);
x_171 = l_Lean_Parser_Level_trailing_HasView_x27___lambda__1___closed__2;
x_172 = lean_name_dec_eq(x_168, x_171);
lean::dec(x_168);
if (x_172 == 0)
{
obj* x_173; obj* x_174; obj* x_175; obj* x_176; obj* x_177; obj* x_178; obj* x_179; 
lean::dec(x_13);
lean::dec(x_12);
lean::inc(x_1);
x_173 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_173, 0, x_1);
x_174 = l_Lean_Parser_Syntax_format___main(x_1);
x_175 = l_Lean_Options_empty;
x_176 = l_Lean_Format_pretty(x_174, x_175);
x_177 = l_Lean_Elaborator_toLevel___main___closed__1;
x_178 = lean::string_append(x_177, x_176);
lean::dec(x_176);
x_179 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_173, x_178, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_173);
return x_179;
}
else
{
obj* x_180; obj* x_181; obj* x_182; 
x_180 = l_Lean_Parser_Level_trailing_HasView;
x_181 = lean::cnstr_get(x_180, 0);
lean::inc(x_181);
x_182 = lean::apply_1(x_181, x_12);
if (lean::obj_tag(x_182) == 0)
{
obj* x_183; obj* x_184; obj* x_185; 
lean::dec(x_182);
lean::dec(x_13);
x_183 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_183, 0, x_1);
x_184 = l_Lean_Elaborator_toLevel___main___closed__2;
x_185 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_183, x_184, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_183);
return x_185;
}
else
{
if (lean::obj_tag(x_13) == 0)
{
obj* x_186; obj* x_187; obj* x_188; 
lean::dec(x_1);
x_186 = lean::cnstr_get(x_182, 0);
lean::inc(x_186);
lean::dec(x_182);
x_187 = lean::cnstr_get(x_186, 0);
lean::inc(x_187);
x_188 = l_Lean_Elaborator_toLevel___main(x_187, x_2, x_3, x_22);
if (lean::obj_tag(x_188) == 0)
{
obj* x_189; obj* x_190; obj* x_191; 
lean::dec(x_186);
x_189 = lean::cnstr_get(x_188, 0);
lean::inc(x_189);
if (lean::is_exclusive(x_188)) {
 lean::cnstr_release(x_188, 0);
 x_190 = x_188;
} else {
 lean::dec_ref(x_188);
 x_190 = lean::box(0);
}
if (lean::is_scalar(x_190)) {
 x_191 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_191 = x_190;
}
lean::cnstr_set(x_191, 0, x_189);
return x_191;
}
else
{
obj* x_192; obj* x_193; obj* x_194; obj* x_195; obj* x_196; obj* x_197; obj* x_198; obj* x_199; obj* x_200; obj* x_201; 
x_192 = lean::cnstr_get(x_188, 0);
lean::inc(x_192);
if (lean::is_exclusive(x_188)) {
 lean::cnstr_release(x_188, 0);
 x_193 = x_188;
} else {
 lean::dec_ref(x_188);
 x_193 = lean::box(0);
}
x_194 = lean::cnstr_get(x_192, 0);
lean::inc(x_194);
x_195 = lean::cnstr_get(x_192, 1);
lean::inc(x_195);
if (lean::is_exclusive(x_192)) {
 lean::cnstr_release(x_192, 0);
 lean::cnstr_release(x_192, 1);
 x_196 = x_192;
} else {
 lean::dec_ref(x_192);
 x_196 = lean::box(0);
}
x_197 = lean::cnstr_get(x_186, 2);
lean::inc(x_197);
lean::dec(x_186);
x_198 = l_Lean_Parser_number_View_toNat___main(x_197);
x_199 = l_Lean_Elaborator_levelAdd___main(x_194, x_198);
lean::dec(x_198);
lean::dec(x_194);
if (lean::is_scalar(x_196)) {
 x_200 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_200 = x_196;
}
lean::cnstr_set(x_200, 0, x_199);
lean::cnstr_set(x_200, 1, x_195);
if (lean::is_scalar(x_193)) {
 x_201 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_201 = x_193;
}
lean::cnstr_set(x_201, 0, x_200);
return x_201;
}
}
else
{
obj* x_202; obj* x_203; obj* x_204; 
lean::dec(x_182);
lean::dec(x_13);
x_202 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_202, 0, x_1);
x_203 = l_Lean_Elaborator_toLevel___main___closed__2;
x_204 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_202, x_203, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_202);
return x_204;
}
}
}
}
else
{
obj* x_205; obj* x_206; obj* x_207; 
lean::dec(x_168);
x_205 = l_Lean_Parser_Level_leading_HasView;
x_206 = lean::cnstr_get(x_205, 0);
lean::inc(x_206);
x_207 = lean::apply_1(x_206, x_12);
switch (lean::obj_tag(x_207)) {
case 0:
{
lean::dec(x_207);
lean::free_heap_obj(x_19);
lean::dec(x_21);
lean::free_heap_obj(x_14);
if (lean::obj_tag(x_13) == 0)
{
obj* x_208; obj* x_209; obj* x_210; 
x_208 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_208, 0, x_1);
x_209 = l_Lean_Elaborator_toLevel___main___closed__2;
x_210 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_208, x_209, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_208);
return x_210;
}
else
{
obj* x_211; obj* x_212; obj* x_213; 
lean::dec(x_1);
x_211 = lean::cnstr_get(x_13, 0);
lean::inc(x_211);
x_212 = lean::cnstr_get(x_13, 1);
lean::inc(x_212);
lean::dec(x_13);
x_213 = l_Lean_Elaborator_toLevel___main(x_211, x_2, x_3, x_22);
if (lean::obj_tag(x_213) == 0)
{
obj* x_214; obj* x_215; obj* x_216; 
lean::dec(x_212);
x_214 = lean::cnstr_get(x_213, 0);
lean::inc(x_214);
if (lean::is_exclusive(x_213)) {
 lean::cnstr_release(x_213, 0);
 x_215 = x_213;
} else {
 lean::dec_ref(x_213);
 x_215 = lean::box(0);
}
if (lean::is_scalar(x_215)) {
 x_216 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_216 = x_215;
}
lean::cnstr_set(x_216, 0, x_214);
return x_216;
}
else
{
obj* x_217; obj* x_218; obj* x_219; obj* x_220; 
x_217 = lean::cnstr_get(x_213, 0);
lean::inc(x_217);
lean::dec(x_213);
x_218 = lean::cnstr_get(x_217, 0);
lean::inc(x_218);
x_219 = lean::cnstr_get(x_217, 1);
lean::inc(x_219);
lean::dec(x_217);
x_220 = l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1(x_212, x_2, x_3, x_219);
if (lean::obj_tag(x_220) == 0)
{
obj* x_221; obj* x_222; obj* x_223; 
lean::dec(x_218);
x_221 = lean::cnstr_get(x_220, 0);
lean::inc(x_221);
if (lean::is_exclusive(x_220)) {
 lean::cnstr_release(x_220, 0);
 x_222 = x_220;
} else {
 lean::dec_ref(x_220);
 x_222 = lean::box(0);
}
if (lean::is_scalar(x_222)) {
 x_223 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_223 = x_222;
}
lean::cnstr_set(x_223, 0, x_221);
return x_223;
}
else
{
obj* x_224; obj* x_225; obj* x_226; obj* x_227; obj* x_228; obj* x_229; obj* x_230; obj* x_231; 
x_224 = lean::cnstr_get(x_220, 0);
lean::inc(x_224);
if (lean::is_exclusive(x_220)) {
 lean::cnstr_release(x_220, 0);
 x_225 = x_220;
} else {
 lean::dec_ref(x_220);
 x_225 = lean::box(0);
}
x_226 = lean::cnstr_get(x_224, 0);
lean::inc(x_226);
x_227 = lean::cnstr_get(x_224, 1);
lean::inc(x_227);
if (lean::is_exclusive(x_224)) {
 lean::cnstr_release(x_224, 0);
 lean::cnstr_release(x_224, 1);
 x_228 = x_224;
} else {
 lean::dec_ref(x_224);
 x_228 = lean::box(0);
}
x_229 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__2(x_218, x_226);
lean::dec(x_218);
if (lean::is_scalar(x_228)) {
 x_230 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_230 = x_228;
}
lean::cnstr_set(x_230, 0, x_229);
lean::cnstr_set(x_230, 1, x_227);
if (lean::is_scalar(x_225)) {
 x_231 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_231 = x_225;
}
lean::cnstr_set(x_231, 0, x_230);
return x_231;
}
}
}
}
case 1:
{
lean::dec(x_207);
lean::free_heap_obj(x_19);
lean::dec(x_21);
lean::free_heap_obj(x_14);
if (lean::obj_tag(x_13) == 0)
{
obj* x_232; obj* x_233; obj* x_234; 
x_232 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_232, 0, x_1);
x_233 = l_Lean_Elaborator_toLevel___main___closed__2;
x_234 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_232, x_233, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_232);
return x_234;
}
else
{
obj* x_235; obj* x_236; obj* x_237; 
lean::dec(x_1);
x_235 = lean::cnstr_get(x_13, 0);
lean::inc(x_235);
x_236 = lean::cnstr_get(x_13, 1);
lean::inc(x_236);
lean::dec(x_13);
x_237 = l_Lean_Elaborator_toLevel___main(x_235, x_2, x_3, x_22);
if (lean::obj_tag(x_237) == 0)
{
obj* x_238; obj* x_239; obj* x_240; 
lean::dec(x_236);
x_238 = lean::cnstr_get(x_237, 0);
lean::inc(x_238);
if (lean::is_exclusive(x_237)) {
 lean::cnstr_release(x_237, 0);
 x_239 = x_237;
} else {
 lean::dec_ref(x_237);
 x_239 = lean::box(0);
}
if (lean::is_scalar(x_239)) {
 x_240 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_240 = x_239;
}
lean::cnstr_set(x_240, 0, x_238);
return x_240;
}
else
{
obj* x_241; obj* x_242; obj* x_243; obj* x_244; 
x_241 = lean::cnstr_get(x_237, 0);
lean::inc(x_241);
lean::dec(x_237);
x_242 = lean::cnstr_get(x_241, 0);
lean::inc(x_242);
x_243 = lean::cnstr_get(x_241, 1);
lean::inc(x_243);
lean::dec(x_241);
x_244 = l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1(x_236, x_2, x_3, x_243);
if (lean::obj_tag(x_244) == 0)
{
obj* x_245; obj* x_246; obj* x_247; 
lean::dec(x_242);
x_245 = lean::cnstr_get(x_244, 0);
lean::inc(x_245);
if (lean::is_exclusive(x_244)) {
 lean::cnstr_release(x_244, 0);
 x_246 = x_244;
} else {
 lean::dec_ref(x_244);
 x_246 = lean::box(0);
}
if (lean::is_scalar(x_246)) {
 x_247 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_247 = x_246;
}
lean::cnstr_set(x_247, 0, x_245);
return x_247;
}
else
{
obj* x_248; obj* x_249; obj* x_250; obj* x_251; obj* x_252; obj* x_253; obj* x_254; obj* x_255; 
x_248 = lean::cnstr_get(x_244, 0);
lean::inc(x_248);
if (lean::is_exclusive(x_244)) {
 lean::cnstr_release(x_244, 0);
 x_249 = x_244;
} else {
 lean::dec_ref(x_244);
 x_249 = lean::box(0);
}
x_250 = lean::cnstr_get(x_248, 0);
lean::inc(x_250);
x_251 = lean::cnstr_get(x_248, 1);
lean::inc(x_251);
if (lean::is_exclusive(x_248)) {
 lean::cnstr_release(x_248, 0);
 lean::cnstr_release(x_248, 1);
 x_252 = x_248;
} else {
 lean::dec_ref(x_248);
 x_252 = lean::box(0);
}
x_253 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__3(x_242, x_250);
lean::dec(x_242);
if (lean::is_scalar(x_252)) {
 x_254 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_254 = x_252;
}
lean::cnstr_set(x_254, 0, x_253);
lean::cnstr_set(x_254, 1, x_251);
if (lean::is_scalar(x_249)) {
 x_255 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_255 = x_249;
}
lean::cnstr_set(x_255, 0, x_254);
return x_255;
}
}
}
}
case 2:
{
lean::dec(x_207);
lean::dec(x_21);
if (lean::obj_tag(x_13) == 0)
{
obj* x_256; 
lean::dec(x_1);
x_256 = l_Lean_Elaborator_toLevel___main___closed__3;
lean::cnstr_set(x_19, 0, x_256);
return x_14;
}
else
{
obj* x_257; obj* x_258; obj* x_259; 
lean::free_heap_obj(x_19);
lean::free_heap_obj(x_14);
lean::dec(x_13);
x_257 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_257, 0, x_1);
x_258 = l_Lean_Elaborator_toLevel___main___closed__2;
x_259 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_257, x_258, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_257);
return x_259;
}
}
case 3:
{
obj* x_260; obj* x_261; obj* x_262; 
lean::dec(x_207);
lean::free_heap_obj(x_19);
lean::dec(x_21);
lean::free_heap_obj(x_14);
lean::dec(x_13);
x_260 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_260, 0, x_1);
x_261 = l_Lean_Elaborator_toLevel___main___closed__2;
x_262 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_260, x_261, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_260);
return x_262;
}
case 4:
{
lean::dec(x_21);
if (lean::obj_tag(x_13) == 0)
{
obj* x_263; obj* x_264; obj* x_265; 
lean::dec(x_1);
x_263 = lean::cnstr_get(x_207, 0);
lean::inc(x_263);
lean::dec(x_207);
x_264 = l_Lean_Parser_number_View_toNat___main(x_263);
x_265 = l_Lean_Level_ofNat___main(x_264);
lean::dec(x_264);
lean::cnstr_set(x_19, 0, x_265);
return x_14;
}
else
{
obj* x_266; obj* x_267; obj* x_268; 
lean::dec(x_207);
lean::free_heap_obj(x_19);
lean::free_heap_obj(x_14);
lean::dec(x_13);
x_266 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_266, 0, x_1);
x_267 = l_Lean_Elaborator_toLevel___main___closed__2;
x_268 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_266, x_267, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_266);
return x_268;
}
}
default: 
{
if (lean::obj_tag(x_13) == 0)
{
obj* x_269; obj* x_270; obj* x_271; obj* x_272; obj* x_273; 
x_269 = lean::cnstr_get(x_207, 0);
lean::inc(x_269);
lean::dec(x_207);
x_270 = l_Lean_Elaborator_mangleIdent(x_269);
x_271 = lean::cnstr_get(x_21, 3);
lean::inc(x_271);
lean::dec(x_21);
x_272 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
lean::inc(x_270);
x_273 = l_Lean_Elaborator_OrderedRBMap_find___rarg(x_272, x_271, x_270);
if (lean::obj_tag(x_273) == 0)
{
obj* x_274; obj* x_275; obj* x_276; obj* x_277; obj* x_278; obj* x_279; obj* x_280; obj* x_281; 
lean::free_heap_obj(x_19);
lean::free_heap_obj(x_14);
x_274 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_274, 0, x_1);
x_275 = l_Lean_Name_toString___closed__1;
x_276 = l_Lean_Name_toStringWithSep___main(x_275, x_270);
x_277 = l_Lean_Elaborator_toLevel___main___closed__4;
x_278 = lean::string_append(x_277, x_276);
lean::dec(x_276);
x_279 = l_Char_HasRepr___closed__1;
x_280 = lean::string_append(x_278, x_279);
x_281 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_274, x_280, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_274);
return x_281;
}
else
{
obj* x_282; 
lean::dec(x_273);
lean::dec(x_1);
x_282 = level_mk_param(x_270);
lean::cnstr_set(x_19, 0, x_282);
return x_14;
}
}
else
{
obj* x_283; obj* x_284; obj* x_285; 
lean::dec(x_207);
lean::free_heap_obj(x_19);
lean::dec(x_21);
lean::free_heap_obj(x_14);
lean::dec(x_13);
x_283 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_283, 0, x_1);
x_284 = l_Lean_Elaborator_toLevel___main___closed__2;
x_285 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_283, x_284, x_2, x_3, x_22);
lean::dec(x_22);
lean::dec(x_283);
return x_285;
}
}
}
}
}
}
}
else
{
obj* x_286; obj* x_287; obj* x_288; 
x_286 = lean::cnstr_get(x_19, 0);
x_287 = lean::cnstr_get(x_19, 1);
lean::inc(x_287);
lean::inc(x_286);
lean::dec(x_19);
x_288 = l_Lean_Parser_Syntax_kind___main(x_12);
if (lean::obj_tag(x_288) == 0)
{
obj* x_289; obj* x_290; obj* x_291; obj* x_292; obj* x_293; obj* x_294; obj* x_295; 
lean::dec(x_286);
lean::free_heap_obj(x_14);
lean::dec(x_13);
lean::dec(x_12);
lean::inc(x_1);
x_289 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_289, 0, x_1);
x_290 = l_Lean_Parser_Syntax_format___main(x_1);
x_291 = l_Lean_Options_empty;
x_292 = l_Lean_Format_pretty(x_290, x_291);
x_293 = l_Lean_Elaborator_toLevel___main___closed__1;
x_294 = lean::string_append(x_293, x_292);
lean::dec(x_292);
x_295 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_289, x_294, x_2, x_3, x_287);
lean::dec(x_287);
lean::dec(x_289);
return x_295;
}
else
{
obj* x_296; obj* x_297; obj* x_298; uint8 x_299; 
x_296 = lean::cnstr_get(x_288, 0);
lean::inc(x_296);
if (lean::is_exclusive(x_288)) {
 lean::cnstr_release(x_288, 0);
 x_297 = x_288;
} else {
 lean::dec_ref(x_288);
 x_297 = lean::box(0);
}
x_298 = l_Lean_Parser_Level_leading_HasView_x27___lambda__1___closed__5;
x_299 = lean_name_dec_eq(x_296, x_298);
if (x_299 == 0)
{
obj* x_300; uint8 x_301; 
lean::dec(x_286);
lean::free_heap_obj(x_14);
x_300 = l_Lean_Parser_Level_trailing_HasView_x27___lambda__1___closed__2;
x_301 = lean_name_dec_eq(x_296, x_300);
lean::dec(x_296);
if (x_301 == 0)
{
obj* x_302; obj* x_303; obj* x_304; obj* x_305; obj* x_306; obj* x_307; obj* x_308; 
lean::dec(x_13);
lean::dec(x_12);
lean::inc(x_1);
if (lean::is_scalar(x_297)) {
 x_302 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_302 = x_297;
}
lean::cnstr_set(x_302, 0, x_1);
x_303 = l_Lean_Parser_Syntax_format___main(x_1);
x_304 = l_Lean_Options_empty;
x_305 = l_Lean_Format_pretty(x_303, x_304);
x_306 = l_Lean_Elaborator_toLevel___main___closed__1;
x_307 = lean::string_append(x_306, x_305);
lean::dec(x_305);
x_308 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_302, x_307, x_2, x_3, x_287);
lean::dec(x_287);
lean::dec(x_302);
return x_308;
}
else
{
obj* x_309; obj* x_310; obj* x_311; 
x_309 = l_Lean_Parser_Level_trailing_HasView;
x_310 = lean::cnstr_get(x_309, 0);
lean::inc(x_310);
x_311 = lean::apply_1(x_310, x_12);
if (lean::obj_tag(x_311) == 0)
{
obj* x_312; obj* x_313; obj* x_314; 
lean::dec(x_311);
lean::dec(x_13);
if (lean::is_scalar(x_297)) {
 x_312 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_312 = x_297;
}
lean::cnstr_set(x_312, 0, x_1);
x_313 = l_Lean_Elaborator_toLevel___main___closed__2;
x_314 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_312, x_313, x_2, x_3, x_287);
lean::dec(x_287);
lean::dec(x_312);
return x_314;
}
else
{
if (lean::obj_tag(x_13) == 0)
{
obj* x_315; obj* x_316; obj* x_317; 
lean::dec(x_297);
lean::dec(x_1);
x_315 = lean::cnstr_get(x_311, 0);
lean::inc(x_315);
lean::dec(x_311);
x_316 = lean::cnstr_get(x_315, 0);
lean::inc(x_316);
x_317 = l_Lean_Elaborator_toLevel___main(x_316, x_2, x_3, x_287);
if (lean::obj_tag(x_317) == 0)
{
obj* x_318; obj* x_319; obj* x_320; 
lean::dec(x_315);
x_318 = lean::cnstr_get(x_317, 0);
lean::inc(x_318);
if (lean::is_exclusive(x_317)) {
 lean::cnstr_release(x_317, 0);
 x_319 = x_317;
} else {
 lean::dec_ref(x_317);
 x_319 = lean::box(0);
}
if (lean::is_scalar(x_319)) {
 x_320 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_320 = x_319;
}
lean::cnstr_set(x_320, 0, x_318);
return x_320;
}
else
{
obj* x_321; obj* x_322; obj* x_323; obj* x_324; obj* x_325; obj* x_326; obj* x_327; obj* x_328; obj* x_329; obj* x_330; 
x_321 = lean::cnstr_get(x_317, 0);
lean::inc(x_321);
if (lean::is_exclusive(x_317)) {
 lean::cnstr_release(x_317, 0);
 x_322 = x_317;
} else {
 lean::dec_ref(x_317);
 x_322 = lean::box(0);
}
x_323 = lean::cnstr_get(x_321, 0);
lean::inc(x_323);
x_324 = lean::cnstr_get(x_321, 1);
lean::inc(x_324);
if (lean::is_exclusive(x_321)) {
 lean::cnstr_release(x_321, 0);
 lean::cnstr_release(x_321, 1);
 x_325 = x_321;
} else {
 lean::dec_ref(x_321);
 x_325 = lean::box(0);
}
x_326 = lean::cnstr_get(x_315, 2);
lean::inc(x_326);
lean::dec(x_315);
x_327 = l_Lean_Parser_number_View_toNat___main(x_326);
x_328 = l_Lean_Elaborator_levelAdd___main(x_323, x_327);
lean::dec(x_327);
lean::dec(x_323);
if (lean::is_scalar(x_325)) {
 x_329 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_329 = x_325;
}
lean::cnstr_set(x_329, 0, x_328);
lean::cnstr_set(x_329, 1, x_324);
if (lean::is_scalar(x_322)) {
 x_330 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_330 = x_322;
}
lean::cnstr_set(x_330, 0, x_329);
return x_330;
}
}
else
{
obj* x_331; obj* x_332; obj* x_333; 
lean::dec(x_311);
lean::dec(x_13);
if (lean::is_scalar(x_297)) {
 x_331 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_331 = x_297;
}
lean::cnstr_set(x_331, 0, x_1);
x_332 = l_Lean_Elaborator_toLevel___main___closed__2;
x_333 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_331, x_332, x_2, x_3, x_287);
lean::dec(x_287);
lean::dec(x_331);
return x_333;
}
}
}
}
else
{
obj* x_334; obj* x_335; obj* x_336; 
lean::dec(x_296);
x_334 = l_Lean_Parser_Level_leading_HasView;
x_335 = lean::cnstr_get(x_334, 0);
lean::inc(x_335);
x_336 = lean::apply_1(x_335, x_12);
switch (lean::obj_tag(x_336)) {
case 0:
{
lean::dec(x_336);
lean::dec(x_286);
lean::free_heap_obj(x_14);
if (lean::obj_tag(x_13) == 0)
{
obj* x_337; obj* x_338; obj* x_339; 
if (lean::is_scalar(x_297)) {
 x_337 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_337 = x_297;
}
lean::cnstr_set(x_337, 0, x_1);
x_338 = l_Lean_Elaborator_toLevel___main___closed__2;
x_339 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_337, x_338, x_2, x_3, x_287);
lean::dec(x_287);
lean::dec(x_337);
return x_339;
}
else
{
obj* x_340; obj* x_341; obj* x_342; 
lean::dec(x_297);
lean::dec(x_1);
x_340 = lean::cnstr_get(x_13, 0);
lean::inc(x_340);
x_341 = lean::cnstr_get(x_13, 1);
lean::inc(x_341);
lean::dec(x_13);
x_342 = l_Lean_Elaborator_toLevel___main(x_340, x_2, x_3, x_287);
if (lean::obj_tag(x_342) == 0)
{
obj* x_343; obj* x_344; obj* x_345; 
lean::dec(x_341);
x_343 = lean::cnstr_get(x_342, 0);
lean::inc(x_343);
if (lean::is_exclusive(x_342)) {
 lean::cnstr_release(x_342, 0);
 x_344 = x_342;
} else {
 lean::dec_ref(x_342);
 x_344 = lean::box(0);
}
if (lean::is_scalar(x_344)) {
 x_345 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_345 = x_344;
}
lean::cnstr_set(x_345, 0, x_343);
return x_345;
}
else
{
obj* x_346; obj* x_347; obj* x_348; obj* x_349; 
x_346 = lean::cnstr_get(x_342, 0);
lean::inc(x_346);
lean::dec(x_342);
x_347 = lean::cnstr_get(x_346, 0);
lean::inc(x_347);
x_348 = lean::cnstr_get(x_346, 1);
lean::inc(x_348);
lean::dec(x_346);
x_349 = l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1(x_341, x_2, x_3, x_348);
if (lean::obj_tag(x_349) == 0)
{
obj* x_350; obj* x_351; obj* x_352; 
lean::dec(x_347);
x_350 = lean::cnstr_get(x_349, 0);
lean::inc(x_350);
if (lean::is_exclusive(x_349)) {
 lean::cnstr_release(x_349, 0);
 x_351 = x_349;
} else {
 lean::dec_ref(x_349);
 x_351 = lean::box(0);
}
if (lean::is_scalar(x_351)) {
 x_352 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_352 = x_351;
}
lean::cnstr_set(x_352, 0, x_350);
return x_352;
}
else
{
obj* x_353; obj* x_354; obj* x_355; obj* x_356; obj* x_357; obj* x_358; obj* x_359; obj* x_360; 
x_353 = lean::cnstr_get(x_349, 0);
lean::inc(x_353);
if (lean::is_exclusive(x_349)) {
 lean::cnstr_release(x_349, 0);
 x_354 = x_349;
} else {
 lean::dec_ref(x_349);
 x_354 = lean::box(0);
}
x_355 = lean::cnstr_get(x_353, 0);
lean::inc(x_355);
x_356 = lean::cnstr_get(x_353, 1);
lean::inc(x_356);
if (lean::is_exclusive(x_353)) {
 lean::cnstr_release(x_353, 0);
 lean::cnstr_release(x_353, 1);
 x_357 = x_353;
} else {
 lean::dec_ref(x_353);
 x_357 = lean::box(0);
}
x_358 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__2(x_347, x_355);
lean::dec(x_347);
if (lean::is_scalar(x_357)) {
 x_359 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_359 = x_357;
}
lean::cnstr_set(x_359, 0, x_358);
lean::cnstr_set(x_359, 1, x_356);
if (lean::is_scalar(x_354)) {
 x_360 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_360 = x_354;
}
lean::cnstr_set(x_360, 0, x_359);
return x_360;
}
}
}
}
case 1:
{
lean::dec(x_336);
lean::dec(x_286);
lean::free_heap_obj(x_14);
if (lean::obj_tag(x_13) == 0)
{
obj* x_361; obj* x_362; obj* x_363; 
if (lean::is_scalar(x_297)) {
 x_361 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_361 = x_297;
}
lean::cnstr_set(x_361, 0, x_1);
x_362 = l_Lean_Elaborator_toLevel___main___closed__2;
x_363 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_361, x_362, x_2, x_3, x_287);
lean::dec(x_287);
lean::dec(x_361);
return x_363;
}
else
{
obj* x_364; obj* x_365; obj* x_366; 
lean::dec(x_297);
lean::dec(x_1);
x_364 = lean::cnstr_get(x_13, 0);
lean::inc(x_364);
x_365 = lean::cnstr_get(x_13, 1);
lean::inc(x_365);
lean::dec(x_13);
x_366 = l_Lean_Elaborator_toLevel___main(x_364, x_2, x_3, x_287);
if (lean::obj_tag(x_366) == 0)
{
obj* x_367; obj* x_368; obj* x_369; 
lean::dec(x_365);
x_367 = lean::cnstr_get(x_366, 0);
lean::inc(x_367);
if (lean::is_exclusive(x_366)) {
 lean::cnstr_release(x_366, 0);
 x_368 = x_366;
} else {
 lean::dec_ref(x_366);
 x_368 = lean::box(0);
}
if (lean::is_scalar(x_368)) {
 x_369 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_369 = x_368;
}
lean::cnstr_set(x_369, 0, x_367);
return x_369;
}
else
{
obj* x_370; obj* x_371; obj* x_372; obj* x_373; 
x_370 = lean::cnstr_get(x_366, 0);
lean::inc(x_370);
lean::dec(x_366);
x_371 = lean::cnstr_get(x_370, 0);
lean::inc(x_371);
x_372 = lean::cnstr_get(x_370, 1);
lean::inc(x_372);
lean::dec(x_370);
x_373 = l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1(x_365, x_2, x_3, x_372);
if (lean::obj_tag(x_373) == 0)
{
obj* x_374; obj* x_375; obj* x_376; 
lean::dec(x_371);
x_374 = lean::cnstr_get(x_373, 0);
lean::inc(x_374);
if (lean::is_exclusive(x_373)) {
 lean::cnstr_release(x_373, 0);
 x_375 = x_373;
} else {
 lean::dec_ref(x_373);
 x_375 = lean::box(0);
}
if (lean::is_scalar(x_375)) {
 x_376 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_376 = x_375;
}
lean::cnstr_set(x_376, 0, x_374);
return x_376;
}
else
{
obj* x_377; obj* x_378; obj* x_379; obj* x_380; obj* x_381; obj* x_382; obj* x_383; obj* x_384; 
x_377 = lean::cnstr_get(x_373, 0);
lean::inc(x_377);
if (lean::is_exclusive(x_373)) {
 lean::cnstr_release(x_373, 0);
 x_378 = x_373;
} else {
 lean::dec_ref(x_373);
 x_378 = lean::box(0);
}
x_379 = lean::cnstr_get(x_377, 0);
lean::inc(x_379);
x_380 = lean::cnstr_get(x_377, 1);
lean::inc(x_380);
if (lean::is_exclusive(x_377)) {
 lean::cnstr_release(x_377, 0);
 lean::cnstr_release(x_377, 1);
 x_381 = x_377;
} else {
 lean::dec_ref(x_377);
 x_381 = lean::box(0);
}
x_382 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__3(x_371, x_379);
lean::dec(x_371);
if (lean::is_scalar(x_381)) {
 x_383 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_383 = x_381;
}
lean::cnstr_set(x_383, 0, x_382);
lean::cnstr_set(x_383, 1, x_380);
if (lean::is_scalar(x_378)) {
 x_384 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_384 = x_378;
}
lean::cnstr_set(x_384, 0, x_383);
return x_384;
}
}
}
}
case 2:
{
lean::dec(x_336);
lean::dec(x_286);
if (lean::obj_tag(x_13) == 0)
{
obj* x_385; obj* x_386; 
lean::dec(x_297);
lean::dec(x_1);
x_385 = l_Lean_Elaborator_toLevel___main___closed__3;
x_386 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_386, 0, x_385);
lean::cnstr_set(x_386, 1, x_287);
lean::cnstr_set(x_14, 0, x_386);
return x_14;
}
else
{
obj* x_387; obj* x_388; obj* x_389; 
lean::free_heap_obj(x_14);
lean::dec(x_13);
if (lean::is_scalar(x_297)) {
 x_387 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_387 = x_297;
}
lean::cnstr_set(x_387, 0, x_1);
x_388 = l_Lean_Elaborator_toLevel___main___closed__2;
x_389 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_387, x_388, x_2, x_3, x_287);
lean::dec(x_287);
lean::dec(x_387);
return x_389;
}
}
case 3:
{
obj* x_390; obj* x_391; obj* x_392; 
lean::dec(x_336);
lean::dec(x_286);
lean::free_heap_obj(x_14);
lean::dec(x_13);
if (lean::is_scalar(x_297)) {
 x_390 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_390 = x_297;
}
lean::cnstr_set(x_390, 0, x_1);
x_391 = l_Lean_Elaborator_toLevel___main___closed__2;
x_392 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_390, x_391, x_2, x_3, x_287);
lean::dec(x_287);
lean::dec(x_390);
return x_392;
}
case 4:
{
lean::dec(x_286);
if (lean::obj_tag(x_13) == 0)
{
obj* x_393; obj* x_394; obj* x_395; obj* x_396; 
lean::dec(x_297);
lean::dec(x_1);
x_393 = lean::cnstr_get(x_336, 0);
lean::inc(x_393);
lean::dec(x_336);
x_394 = l_Lean_Parser_number_View_toNat___main(x_393);
x_395 = l_Lean_Level_ofNat___main(x_394);
lean::dec(x_394);
x_396 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_396, 0, x_395);
lean::cnstr_set(x_396, 1, x_287);
lean::cnstr_set(x_14, 0, x_396);
return x_14;
}
else
{
obj* x_397; obj* x_398; obj* x_399; 
lean::dec(x_336);
lean::free_heap_obj(x_14);
lean::dec(x_13);
if (lean::is_scalar(x_297)) {
 x_397 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_397 = x_297;
}
lean::cnstr_set(x_397, 0, x_1);
x_398 = l_Lean_Elaborator_toLevel___main___closed__2;
x_399 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_397, x_398, x_2, x_3, x_287);
lean::dec(x_287);
lean::dec(x_397);
return x_399;
}
}
default: 
{
if (lean::obj_tag(x_13) == 0)
{
obj* x_400; obj* x_401; obj* x_402; obj* x_403; obj* x_404; 
x_400 = lean::cnstr_get(x_336, 0);
lean::inc(x_400);
lean::dec(x_336);
x_401 = l_Lean_Elaborator_mangleIdent(x_400);
x_402 = lean::cnstr_get(x_286, 3);
lean::inc(x_402);
lean::dec(x_286);
x_403 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
lean::inc(x_401);
x_404 = l_Lean_Elaborator_OrderedRBMap_find___rarg(x_403, x_402, x_401);
if (lean::obj_tag(x_404) == 0)
{
obj* x_405; obj* x_406; obj* x_407; obj* x_408; obj* x_409; obj* x_410; obj* x_411; obj* x_412; 
lean::free_heap_obj(x_14);
if (lean::is_scalar(x_297)) {
 x_405 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_405 = x_297;
}
lean::cnstr_set(x_405, 0, x_1);
x_406 = l_Lean_Name_toString___closed__1;
x_407 = l_Lean_Name_toStringWithSep___main(x_406, x_401);
x_408 = l_Lean_Elaborator_toLevel___main___closed__4;
x_409 = lean::string_append(x_408, x_407);
lean::dec(x_407);
x_410 = l_Char_HasRepr___closed__1;
x_411 = lean::string_append(x_409, x_410);
x_412 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_405, x_411, x_2, x_3, x_287);
lean::dec(x_287);
lean::dec(x_405);
return x_412;
}
else
{
obj* x_413; obj* x_414; 
lean::dec(x_404);
lean::dec(x_297);
lean::dec(x_1);
x_413 = level_mk_param(x_401);
x_414 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_414, 0, x_413);
lean::cnstr_set(x_414, 1, x_287);
lean::cnstr_set(x_14, 0, x_414);
return x_14;
}
}
else
{
obj* x_415; obj* x_416; obj* x_417; 
lean::dec(x_336);
lean::dec(x_286);
lean::free_heap_obj(x_14);
lean::dec(x_13);
if (lean::is_scalar(x_297)) {
 x_415 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_415 = x_297;
}
lean::cnstr_set(x_415, 0, x_1);
x_416 = l_Lean_Elaborator_toLevel___main___closed__2;
x_417 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_415, x_416, x_2, x_3, x_287);
lean::dec(x_287);
lean::dec(x_415);
return x_417;
}
}
}
}
}
}
}
else
{
obj* x_418; obj* x_419; obj* x_420; obj* x_421; obj* x_422; 
x_418 = lean::cnstr_get(x_14, 0);
lean::inc(x_418);
lean::dec(x_14);
x_419 = lean::cnstr_get(x_418, 0);
lean::inc(x_419);
x_420 = lean::cnstr_get(x_418, 1);
lean::inc(x_420);
if (lean::is_exclusive(x_418)) {
 lean::cnstr_release(x_418, 0);
 lean::cnstr_release(x_418, 1);
 x_421 = x_418;
} else {
 lean::dec_ref(x_418);
 x_421 = lean::box(0);
}
x_422 = l_Lean_Parser_Syntax_kind___main(x_12);
if (lean::obj_tag(x_422) == 0)
{
obj* x_423; obj* x_424; obj* x_425; obj* x_426; obj* x_427; obj* x_428; obj* x_429; 
lean::dec(x_421);
lean::dec(x_419);
lean::dec(x_13);
lean::dec(x_12);
lean::inc(x_1);
x_423 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_423, 0, x_1);
x_424 = l_Lean_Parser_Syntax_format___main(x_1);
x_425 = l_Lean_Options_empty;
x_426 = l_Lean_Format_pretty(x_424, x_425);
x_427 = l_Lean_Elaborator_toLevel___main___closed__1;
x_428 = lean::string_append(x_427, x_426);
lean::dec(x_426);
x_429 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_423, x_428, x_2, x_3, x_420);
lean::dec(x_420);
lean::dec(x_423);
return x_429;
}
else
{
obj* x_430; obj* x_431; obj* x_432; uint8 x_433; 
x_430 = lean::cnstr_get(x_422, 0);
lean::inc(x_430);
if (lean::is_exclusive(x_422)) {
 lean::cnstr_release(x_422, 0);
 x_431 = x_422;
} else {
 lean::dec_ref(x_422);
 x_431 = lean::box(0);
}
x_432 = l_Lean_Parser_Level_leading_HasView_x27___lambda__1___closed__5;
x_433 = lean_name_dec_eq(x_430, x_432);
if (x_433 == 0)
{
obj* x_434; uint8 x_435; 
lean::dec(x_421);
lean::dec(x_419);
x_434 = l_Lean_Parser_Level_trailing_HasView_x27___lambda__1___closed__2;
x_435 = lean_name_dec_eq(x_430, x_434);
lean::dec(x_430);
if (x_435 == 0)
{
obj* x_436; obj* x_437; obj* x_438; obj* x_439; obj* x_440; obj* x_441; obj* x_442; 
lean::dec(x_13);
lean::dec(x_12);
lean::inc(x_1);
if (lean::is_scalar(x_431)) {
 x_436 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_436 = x_431;
}
lean::cnstr_set(x_436, 0, x_1);
x_437 = l_Lean_Parser_Syntax_format___main(x_1);
x_438 = l_Lean_Options_empty;
x_439 = l_Lean_Format_pretty(x_437, x_438);
x_440 = l_Lean_Elaborator_toLevel___main___closed__1;
x_441 = lean::string_append(x_440, x_439);
lean::dec(x_439);
x_442 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_436, x_441, x_2, x_3, x_420);
lean::dec(x_420);
lean::dec(x_436);
return x_442;
}
else
{
obj* x_443; obj* x_444; obj* x_445; 
x_443 = l_Lean_Parser_Level_trailing_HasView;
x_444 = lean::cnstr_get(x_443, 0);
lean::inc(x_444);
x_445 = lean::apply_1(x_444, x_12);
if (lean::obj_tag(x_445) == 0)
{
obj* x_446; obj* x_447; obj* x_448; 
lean::dec(x_445);
lean::dec(x_13);
if (lean::is_scalar(x_431)) {
 x_446 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_446 = x_431;
}
lean::cnstr_set(x_446, 0, x_1);
x_447 = l_Lean_Elaborator_toLevel___main___closed__2;
x_448 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_446, x_447, x_2, x_3, x_420);
lean::dec(x_420);
lean::dec(x_446);
return x_448;
}
else
{
if (lean::obj_tag(x_13) == 0)
{
obj* x_449; obj* x_450; obj* x_451; 
lean::dec(x_431);
lean::dec(x_1);
x_449 = lean::cnstr_get(x_445, 0);
lean::inc(x_449);
lean::dec(x_445);
x_450 = lean::cnstr_get(x_449, 0);
lean::inc(x_450);
x_451 = l_Lean_Elaborator_toLevel___main(x_450, x_2, x_3, x_420);
if (lean::obj_tag(x_451) == 0)
{
obj* x_452; obj* x_453; obj* x_454; 
lean::dec(x_449);
x_452 = lean::cnstr_get(x_451, 0);
lean::inc(x_452);
if (lean::is_exclusive(x_451)) {
 lean::cnstr_release(x_451, 0);
 x_453 = x_451;
} else {
 lean::dec_ref(x_451);
 x_453 = lean::box(0);
}
if (lean::is_scalar(x_453)) {
 x_454 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_454 = x_453;
}
lean::cnstr_set(x_454, 0, x_452);
return x_454;
}
else
{
obj* x_455; obj* x_456; obj* x_457; obj* x_458; obj* x_459; obj* x_460; obj* x_461; obj* x_462; obj* x_463; obj* x_464; 
x_455 = lean::cnstr_get(x_451, 0);
lean::inc(x_455);
if (lean::is_exclusive(x_451)) {
 lean::cnstr_release(x_451, 0);
 x_456 = x_451;
} else {
 lean::dec_ref(x_451);
 x_456 = lean::box(0);
}
x_457 = lean::cnstr_get(x_455, 0);
lean::inc(x_457);
x_458 = lean::cnstr_get(x_455, 1);
lean::inc(x_458);
if (lean::is_exclusive(x_455)) {
 lean::cnstr_release(x_455, 0);
 lean::cnstr_release(x_455, 1);
 x_459 = x_455;
} else {
 lean::dec_ref(x_455);
 x_459 = lean::box(0);
}
x_460 = lean::cnstr_get(x_449, 2);
lean::inc(x_460);
lean::dec(x_449);
x_461 = l_Lean_Parser_number_View_toNat___main(x_460);
x_462 = l_Lean_Elaborator_levelAdd___main(x_457, x_461);
lean::dec(x_461);
lean::dec(x_457);
if (lean::is_scalar(x_459)) {
 x_463 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_463 = x_459;
}
lean::cnstr_set(x_463, 0, x_462);
lean::cnstr_set(x_463, 1, x_458);
if (lean::is_scalar(x_456)) {
 x_464 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_464 = x_456;
}
lean::cnstr_set(x_464, 0, x_463);
return x_464;
}
}
else
{
obj* x_465; obj* x_466; obj* x_467; 
lean::dec(x_445);
lean::dec(x_13);
if (lean::is_scalar(x_431)) {
 x_465 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_465 = x_431;
}
lean::cnstr_set(x_465, 0, x_1);
x_466 = l_Lean_Elaborator_toLevel___main___closed__2;
x_467 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_465, x_466, x_2, x_3, x_420);
lean::dec(x_420);
lean::dec(x_465);
return x_467;
}
}
}
}
else
{
obj* x_468; obj* x_469; obj* x_470; 
lean::dec(x_430);
x_468 = l_Lean_Parser_Level_leading_HasView;
x_469 = lean::cnstr_get(x_468, 0);
lean::inc(x_469);
x_470 = lean::apply_1(x_469, x_12);
switch (lean::obj_tag(x_470)) {
case 0:
{
lean::dec(x_470);
lean::dec(x_421);
lean::dec(x_419);
if (lean::obj_tag(x_13) == 0)
{
obj* x_471; obj* x_472; obj* x_473; 
if (lean::is_scalar(x_431)) {
 x_471 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_471 = x_431;
}
lean::cnstr_set(x_471, 0, x_1);
x_472 = l_Lean_Elaborator_toLevel___main___closed__2;
x_473 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_471, x_472, x_2, x_3, x_420);
lean::dec(x_420);
lean::dec(x_471);
return x_473;
}
else
{
obj* x_474; obj* x_475; obj* x_476; 
lean::dec(x_431);
lean::dec(x_1);
x_474 = lean::cnstr_get(x_13, 0);
lean::inc(x_474);
x_475 = lean::cnstr_get(x_13, 1);
lean::inc(x_475);
lean::dec(x_13);
x_476 = l_Lean_Elaborator_toLevel___main(x_474, x_2, x_3, x_420);
if (lean::obj_tag(x_476) == 0)
{
obj* x_477; obj* x_478; obj* x_479; 
lean::dec(x_475);
x_477 = lean::cnstr_get(x_476, 0);
lean::inc(x_477);
if (lean::is_exclusive(x_476)) {
 lean::cnstr_release(x_476, 0);
 x_478 = x_476;
} else {
 lean::dec_ref(x_476);
 x_478 = lean::box(0);
}
if (lean::is_scalar(x_478)) {
 x_479 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_479 = x_478;
}
lean::cnstr_set(x_479, 0, x_477);
return x_479;
}
else
{
obj* x_480; obj* x_481; obj* x_482; obj* x_483; 
x_480 = lean::cnstr_get(x_476, 0);
lean::inc(x_480);
lean::dec(x_476);
x_481 = lean::cnstr_get(x_480, 0);
lean::inc(x_481);
x_482 = lean::cnstr_get(x_480, 1);
lean::inc(x_482);
lean::dec(x_480);
x_483 = l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1(x_475, x_2, x_3, x_482);
if (lean::obj_tag(x_483) == 0)
{
obj* x_484; obj* x_485; obj* x_486; 
lean::dec(x_481);
x_484 = lean::cnstr_get(x_483, 0);
lean::inc(x_484);
if (lean::is_exclusive(x_483)) {
 lean::cnstr_release(x_483, 0);
 x_485 = x_483;
} else {
 lean::dec_ref(x_483);
 x_485 = lean::box(0);
}
if (lean::is_scalar(x_485)) {
 x_486 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_486 = x_485;
}
lean::cnstr_set(x_486, 0, x_484);
return x_486;
}
else
{
obj* x_487; obj* x_488; obj* x_489; obj* x_490; obj* x_491; obj* x_492; obj* x_493; obj* x_494; 
x_487 = lean::cnstr_get(x_483, 0);
lean::inc(x_487);
if (lean::is_exclusive(x_483)) {
 lean::cnstr_release(x_483, 0);
 x_488 = x_483;
} else {
 lean::dec_ref(x_483);
 x_488 = lean::box(0);
}
x_489 = lean::cnstr_get(x_487, 0);
lean::inc(x_489);
x_490 = lean::cnstr_get(x_487, 1);
lean::inc(x_490);
if (lean::is_exclusive(x_487)) {
 lean::cnstr_release(x_487, 0);
 lean::cnstr_release(x_487, 1);
 x_491 = x_487;
} else {
 lean::dec_ref(x_487);
 x_491 = lean::box(0);
}
x_492 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__2(x_481, x_489);
lean::dec(x_481);
if (lean::is_scalar(x_491)) {
 x_493 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_493 = x_491;
}
lean::cnstr_set(x_493, 0, x_492);
lean::cnstr_set(x_493, 1, x_490);
if (lean::is_scalar(x_488)) {
 x_494 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_494 = x_488;
}
lean::cnstr_set(x_494, 0, x_493);
return x_494;
}
}
}
}
case 1:
{
lean::dec(x_470);
lean::dec(x_421);
lean::dec(x_419);
if (lean::obj_tag(x_13) == 0)
{
obj* x_495; obj* x_496; obj* x_497; 
if (lean::is_scalar(x_431)) {
 x_495 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_495 = x_431;
}
lean::cnstr_set(x_495, 0, x_1);
x_496 = l_Lean_Elaborator_toLevel___main___closed__2;
x_497 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_495, x_496, x_2, x_3, x_420);
lean::dec(x_420);
lean::dec(x_495);
return x_497;
}
else
{
obj* x_498; obj* x_499; obj* x_500; 
lean::dec(x_431);
lean::dec(x_1);
x_498 = lean::cnstr_get(x_13, 0);
lean::inc(x_498);
x_499 = lean::cnstr_get(x_13, 1);
lean::inc(x_499);
lean::dec(x_13);
x_500 = l_Lean_Elaborator_toLevel___main(x_498, x_2, x_3, x_420);
if (lean::obj_tag(x_500) == 0)
{
obj* x_501; obj* x_502; obj* x_503; 
lean::dec(x_499);
x_501 = lean::cnstr_get(x_500, 0);
lean::inc(x_501);
if (lean::is_exclusive(x_500)) {
 lean::cnstr_release(x_500, 0);
 x_502 = x_500;
} else {
 lean::dec_ref(x_500);
 x_502 = lean::box(0);
}
if (lean::is_scalar(x_502)) {
 x_503 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_503 = x_502;
}
lean::cnstr_set(x_503, 0, x_501);
return x_503;
}
else
{
obj* x_504; obj* x_505; obj* x_506; obj* x_507; 
x_504 = lean::cnstr_get(x_500, 0);
lean::inc(x_504);
lean::dec(x_500);
x_505 = lean::cnstr_get(x_504, 0);
lean::inc(x_505);
x_506 = lean::cnstr_get(x_504, 1);
lean::inc(x_506);
lean::dec(x_504);
x_507 = l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1(x_499, x_2, x_3, x_506);
if (lean::obj_tag(x_507) == 0)
{
obj* x_508; obj* x_509; obj* x_510; 
lean::dec(x_505);
x_508 = lean::cnstr_get(x_507, 0);
lean::inc(x_508);
if (lean::is_exclusive(x_507)) {
 lean::cnstr_release(x_507, 0);
 x_509 = x_507;
} else {
 lean::dec_ref(x_507);
 x_509 = lean::box(0);
}
if (lean::is_scalar(x_509)) {
 x_510 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_510 = x_509;
}
lean::cnstr_set(x_510, 0, x_508);
return x_510;
}
else
{
obj* x_511; obj* x_512; obj* x_513; obj* x_514; obj* x_515; obj* x_516; obj* x_517; obj* x_518; 
x_511 = lean::cnstr_get(x_507, 0);
lean::inc(x_511);
if (lean::is_exclusive(x_507)) {
 lean::cnstr_release(x_507, 0);
 x_512 = x_507;
} else {
 lean::dec_ref(x_507);
 x_512 = lean::box(0);
}
x_513 = lean::cnstr_get(x_511, 0);
lean::inc(x_513);
x_514 = lean::cnstr_get(x_511, 1);
lean::inc(x_514);
if (lean::is_exclusive(x_511)) {
 lean::cnstr_release(x_511, 0);
 lean::cnstr_release(x_511, 1);
 x_515 = x_511;
} else {
 lean::dec_ref(x_511);
 x_515 = lean::box(0);
}
x_516 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__3(x_505, x_513);
lean::dec(x_505);
if (lean::is_scalar(x_515)) {
 x_517 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_517 = x_515;
}
lean::cnstr_set(x_517, 0, x_516);
lean::cnstr_set(x_517, 1, x_514);
if (lean::is_scalar(x_512)) {
 x_518 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_518 = x_512;
}
lean::cnstr_set(x_518, 0, x_517);
return x_518;
}
}
}
}
case 2:
{
lean::dec(x_470);
lean::dec(x_419);
if (lean::obj_tag(x_13) == 0)
{
obj* x_519; obj* x_520; obj* x_521; 
lean::dec(x_431);
lean::dec(x_1);
x_519 = l_Lean_Elaborator_toLevel___main___closed__3;
if (lean::is_scalar(x_421)) {
 x_520 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_520 = x_421;
}
lean::cnstr_set(x_520, 0, x_519);
lean::cnstr_set(x_520, 1, x_420);
x_521 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_521, 0, x_520);
return x_521;
}
else
{
obj* x_522; obj* x_523; obj* x_524; 
lean::dec(x_421);
lean::dec(x_13);
if (lean::is_scalar(x_431)) {
 x_522 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_522 = x_431;
}
lean::cnstr_set(x_522, 0, x_1);
x_523 = l_Lean_Elaborator_toLevel___main___closed__2;
x_524 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_522, x_523, x_2, x_3, x_420);
lean::dec(x_420);
lean::dec(x_522);
return x_524;
}
}
case 3:
{
obj* x_525; obj* x_526; obj* x_527; 
lean::dec(x_470);
lean::dec(x_421);
lean::dec(x_419);
lean::dec(x_13);
if (lean::is_scalar(x_431)) {
 x_525 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_525 = x_431;
}
lean::cnstr_set(x_525, 0, x_1);
x_526 = l_Lean_Elaborator_toLevel___main___closed__2;
x_527 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_525, x_526, x_2, x_3, x_420);
lean::dec(x_420);
lean::dec(x_525);
return x_527;
}
case 4:
{
lean::dec(x_419);
if (lean::obj_tag(x_13) == 0)
{
obj* x_528; obj* x_529; obj* x_530; obj* x_531; obj* x_532; 
lean::dec(x_431);
lean::dec(x_1);
x_528 = lean::cnstr_get(x_470, 0);
lean::inc(x_528);
lean::dec(x_470);
x_529 = l_Lean_Parser_number_View_toNat___main(x_528);
x_530 = l_Lean_Level_ofNat___main(x_529);
lean::dec(x_529);
if (lean::is_scalar(x_421)) {
 x_531 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_531 = x_421;
}
lean::cnstr_set(x_531, 0, x_530);
lean::cnstr_set(x_531, 1, x_420);
x_532 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_532, 0, x_531);
return x_532;
}
else
{
obj* x_533; obj* x_534; obj* x_535; 
lean::dec(x_470);
lean::dec(x_421);
lean::dec(x_13);
if (lean::is_scalar(x_431)) {
 x_533 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_533 = x_431;
}
lean::cnstr_set(x_533, 0, x_1);
x_534 = l_Lean_Elaborator_toLevel___main___closed__2;
x_535 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_533, x_534, x_2, x_3, x_420);
lean::dec(x_420);
lean::dec(x_533);
return x_535;
}
}
default: 
{
if (lean::obj_tag(x_13) == 0)
{
obj* x_536; obj* x_537; obj* x_538; obj* x_539; obj* x_540; 
x_536 = lean::cnstr_get(x_470, 0);
lean::inc(x_536);
lean::dec(x_470);
x_537 = l_Lean_Elaborator_mangleIdent(x_536);
x_538 = lean::cnstr_get(x_419, 3);
lean::inc(x_538);
lean::dec(x_419);
x_539 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
lean::inc(x_537);
x_540 = l_Lean_Elaborator_OrderedRBMap_find___rarg(x_539, x_538, x_537);
if (lean::obj_tag(x_540) == 0)
{
obj* x_541; obj* x_542; obj* x_543; obj* x_544; obj* x_545; obj* x_546; obj* x_547; obj* x_548; 
lean::dec(x_421);
if (lean::is_scalar(x_431)) {
 x_541 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_541 = x_431;
}
lean::cnstr_set(x_541, 0, x_1);
x_542 = l_Lean_Name_toString___closed__1;
x_543 = l_Lean_Name_toStringWithSep___main(x_542, x_537);
x_544 = l_Lean_Elaborator_toLevel___main___closed__4;
x_545 = lean::string_append(x_544, x_543);
lean::dec(x_543);
x_546 = l_Char_HasRepr___closed__1;
x_547 = lean::string_append(x_545, x_546);
x_548 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_541, x_547, x_2, x_3, x_420);
lean::dec(x_420);
lean::dec(x_541);
return x_548;
}
else
{
obj* x_549; obj* x_550; obj* x_551; 
lean::dec(x_540);
lean::dec(x_431);
lean::dec(x_1);
x_549 = level_mk_param(x_537);
if (lean::is_scalar(x_421)) {
 x_550 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_550 = x_421;
}
lean::cnstr_set(x_550, 0, x_549);
lean::cnstr_set(x_550, 1, x_420);
x_551 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_551, 0, x_550);
return x_551;
}
}
else
{
obj* x_552; obj* x_553; obj* x_554; 
lean::dec(x_470);
lean::dec(x_421);
lean::dec(x_419);
lean::dec(x_13);
if (lean::is_scalar(x_431)) {
 x_552 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_552 = x_431;
}
lean::cnstr_set(x_552, 0, x_1);
x_553 = l_Lean_Elaborator_toLevel___main___closed__2;
x_554 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_552, x_553, x_2, x_3, x_420);
lean::dec(x_420);
lean::dec(x_552);
return x_554;
}
}
}
}
}
}
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_mmap___main___at_Lean_Elaborator_toLevel___main___spec__1(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__2___boxed(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__2(x_1, x_2);
lean::dec(x_1);
return x_3;
}
}
obj* l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__3___boxed(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = l_List_foldr___main___at_Lean_Elaborator_toLevel___main___spec__3(x_1, x_2);
lean::dec(x_1);
return x_3;
}
}
obj* l_Lean_Elaborator_toLevel___main___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_toLevel___main(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_toLevel(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_toLevel___main(x_1, x_2, x_3, x_4);
return x_5;
}
}
obj* l_Lean_Elaborator_toLevel___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_toLevel(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* _init_l_Lean_Elaborator_Expr_mkAnnotation___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("annotation");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* l_Lean_Elaborator_Expr_mkAnnotation(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_3 = lean::box(0);
x_4 = l_Lean_Elaborator_Expr_mkAnnotation___closed__1;
x_5 = l_Lean_KVMap_setName(x_3, x_4, x_1);
x_6 = lean_expr_mk_mdata(x_5, x_2);
return x_6;
}
}
obj* _init_l_Lean_Elaborator_dummy() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Prop");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::box(0);
x_5 = lean_expr_mk_const(x_3, x_4);
return x_5;
}
}
obj* _init_l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("@");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = lean::box(0);
return x_3;
}
else
{
uint8 x_4; 
x_4 = !lean::is_exclusive(x_2);
if (x_4 == 0)
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; uint8 x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_5 = lean::cnstr_get(x_2, 0);
x_6 = lean::cnstr_get(x_2, 1);
lean::inc(x_1);
x_7 = l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1(x_1, x_6);
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
x_9 = lean::cnstr_get(x_5, 0);
lean::inc(x_9);
lean::dec(x_5);
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
x_12 = 4;
lean::inc(x_9);
x_13 = lean_expr_local(x_9, x_9, x_1, x_12);
x_14 = l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1___closed__1;
x_15 = l_Lean_Elaborator_Expr_mkAnnotation(x_14, x_13);
x_16 = l_List_foldl___main___at_Lean_Expr_mkApp___spec__1(x_15, x_10);
x_17 = lean_expr_mk_app(x_16, x_11);
lean::cnstr_set(x_2, 1, x_7);
lean::cnstr_set(x_2, 0, x_17);
return x_2;
}
else
{
obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; uint8 x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_18 = lean::cnstr_get(x_2, 0);
x_19 = lean::cnstr_get(x_2, 1);
lean::inc(x_19);
lean::inc(x_18);
lean::dec(x_2);
lean::inc(x_1);
x_20 = l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1(x_1, x_19);
x_21 = lean::cnstr_get(x_18, 1);
lean::inc(x_21);
x_22 = lean::cnstr_get(x_18, 0);
lean::inc(x_22);
lean::dec(x_18);
x_23 = lean::cnstr_get(x_21, 0);
lean::inc(x_23);
x_24 = lean::cnstr_get(x_21, 1);
lean::inc(x_24);
lean::dec(x_21);
x_25 = 4;
lean::inc(x_22);
x_26 = lean_expr_local(x_22, x_22, x_1, x_25);
x_27 = l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1___closed__1;
x_28 = l_Lean_Elaborator_Expr_mkAnnotation(x_27, x_26);
x_29 = l_List_foldl___main___at_Lean_Expr_mkApp___spec__1(x_28, x_23);
x_30 = lean_expr_mk_app(x_29, x_24);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_20);
return x_31;
}
}
}
}
obj* _init_l_Lean_Elaborator_mkEqns___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("_");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_mkEqns___closed__2() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("preEquations");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* l_Lean_Elaborator_mkEqns(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_3 = l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1(x_1, x_2);
x_4 = l_Lean_Elaborator_mkEqns___closed__1;
x_5 = l_Lean_Expr_mkCapp(x_4, x_3);
x_6 = l_Lean_Elaborator_mkEqns___closed__2;
x_7 = l_Lean_Elaborator_Expr_mkAnnotation(x_6, x_5);
return x_7;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__1(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
uint8 x_8; 
x_8 = !lean::is_exclusive(x_1);
if (x_8 == 0)
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_9 = lean::cnstr_get(x_1, 0);
x_10 = lean::cnstr_get(x_1, 1);
x_11 = lean::cnstr_get(x_9, 0);
lean::inc(x_11);
lean::dec(x_9);
x_12 = l_Lean_Elaborator_toPexpr___main(x_11, x_2, x_3, x_4);
if (lean::obj_tag(x_12) == 0)
{
uint8 x_13; 
lean::free_heap_obj(x_1);
lean::dec(x_10);
x_13 = !lean::is_exclusive(x_12);
if (x_13 == 0)
{
return x_12;
}
else
{
obj* x_14; obj* x_15; 
x_14 = lean::cnstr_get(x_12, 0);
lean::inc(x_14);
lean::dec(x_12);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_14);
return x_15;
}
}
else
{
obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_16 = lean::cnstr_get(x_12, 0);
lean::inc(x_16);
lean::dec(x_12);
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_18 = lean::cnstr_get(x_16, 1);
lean::inc(x_18);
lean::dec(x_16);
x_19 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__1(x_10, x_2, x_3, x_18);
if (lean::obj_tag(x_19) == 0)
{
uint8 x_20; 
lean::dec(x_17);
lean::free_heap_obj(x_1);
x_20 = !lean::is_exclusive(x_19);
if (x_20 == 0)
{
return x_19;
}
else
{
obj* x_21; obj* x_22; 
x_21 = lean::cnstr_get(x_19, 0);
lean::inc(x_21);
lean::dec(x_19);
x_22 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_22, 0, x_21);
return x_22;
}
}
else
{
uint8 x_23; 
x_23 = !lean::is_exclusive(x_19);
if (x_23 == 0)
{
obj* x_24; uint8 x_25; 
x_24 = lean::cnstr_get(x_19, 0);
x_25 = !lean::is_exclusive(x_24);
if (x_25 == 0)
{
obj* x_26; 
x_26 = lean::cnstr_get(x_24, 0);
lean::cnstr_set(x_1, 1, x_26);
lean::cnstr_set(x_1, 0, x_17);
lean::cnstr_set(x_24, 0, x_1);
return x_19;
}
else
{
obj* x_27; obj* x_28; obj* x_29; 
x_27 = lean::cnstr_get(x_24, 0);
x_28 = lean::cnstr_get(x_24, 1);
lean::inc(x_28);
lean::inc(x_27);
lean::dec(x_24);
lean::cnstr_set(x_1, 1, x_27);
lean::cnstr_set(x_1, 0, x_17);
x_29 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_29, 0, x_1);
lean::cnstr_set(x_29, 1, x_28);
lean::cnstr_set(x_19, 0, x_29);
return x_19;
}
}
else
{
obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; 
x_30 = lean::cnstr_get(x_19, 0);
lean::inc(x_30);
lean::dec(x_19);
x_31 = lean::cnstr_get(x_30, 0);
lean::inc(x_31);
x_32 = lean::cnstr_get(x_30, 1);
lean::inc(x_32);
if (lean::is_exclusive(x_30)) {
 lean::cnstr_release(x_30, 0);
 lean::cnstr_release(x_30, 1);
 x_33 = x_30;
} else {
 lean::dec_ref(x_30);
 x_33 = lean::box(0);
}
lean::cnstr_set(x_1, 1, x_31);
lean::cnstr_set(x_1, 0, x_17);
if (lean::is_scalar(x_33)) {
 x_34 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_34 = x_33;
}
lean::cnstr_set(x_34, 0, x_1);
lean::cnstr_set(x_34, 1, x_32);
x_35 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_35, 0, x_34);
return x_35;
}
}
}
}
else
{
obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_36 = lean::cnstr_get(x_1, 0);
x_37 = lean::cnstr_get(x_1, 1);
lean::inc(x_37);
lean::inc(x_36);
lean::dec(x_1);
x_38 = lean::cnstr_get(x_36, 0);
lean::inc(x_38);
lean::dec(x_36);
x_39 = l_Lean_Elaborator_toPexpr___main(x_38, x_2, x_3, x_4);
if (lean::obj_tag(x_39) == 0)
{
obj* x_40; obj* x_41; obj* x_42; 
lean::dec(x_37);
x_40 = lean::cnstr_get(x_39, 0);
lean::inc(x_40);
if (lean::is_exclusive(x_39)) {
 lean::cnstr_release(x_39, 0);
 x_41 = x_39;
} else {
 lean::dec_ref(x_39);
 x_41 = lean::box(0);
}
if (lean::is_scalar(x_41)) {
 x_42 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_42 = x_41;
}
lean::cnstr_set(x_42, 0, x_40);
return x_42;
}
else
{
obj* x_43; obj* x_44; obj* x_45; obj* x_46; 
x_43 = lean::cnstr_get(x_39, 0);
lean::inc(x_43);
lean::dec(x_39);
x_44 = lean::cnstr_get(x_43, 0);
lean::inc(x_44);
x_45 = lean::cnstr_get(x_43, 1);
lean::inc(x_45);
lean::dec(x_43);
x_46 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__1(x_37, x_2, x_3, x_45);
if (lean::obj_tag(x_46) == 0)
{
obj* x_47; obj* x_48; obj* x_49; 
lean::dec(x_44);
x_47 = lean::cnstr_get(x_46, 0);
lean::inc(x_47);
if (lean::is_exclusive(x_46)) {
 lean::cnstr_release(x_46, 0);
 x_48 = x_46;
} else {
 lean::dec_ref(x_46);
 x_48 = lean::box(0);
}
if (lean::is_scalar(x_48)) {
 x_49 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_49 = x_48;
}
lean::cnstr_set(x_49, 0, x_47);
return x_49;
}
else
{
obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; 
x_50 = lean::cnstr_get(x_46, 0);
lean::inc(x_50);
if (lean::is_exclusive(x_46)) {
 lean::cnstr_release(x_46, 0);
 x_51 = x_46;
} else {
 lean::dec_ref(x_46);
 x_51 = lean::box(0);
}
x_52 = lean::cnstr_get(x_50, 0);
lean::inc(x_52);
x_53 = lean::cnstr_get(x_50, 1);
lean::inc(x_53);
if (lean::is_exclusive(x_50)) {
 lean::cnstr_release(x_50, 0);
 lean::cnstr_release(x_50, 1);
 x_54 = x_50;
} else {
 lean::dec_ref(x_50);
 x_54 = lean::box(0);
}
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_44);
lean::cnstr_set(x_55, 1, x_52);
if (lean::is_scalar(x_54)) {
 x_56 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_56 = x_54;
}
lean::cnstr_set(x_56, 0, x_55);
lean::cnstr_set(x_56, 1, x_53);
if (lean::is_scalar(x_51)) {
 x_57 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_57 = x_51;
}
lean::cnstr_set(x_57, 0, x_56);
return x_57;
}
}
}
}
}
}
obj* l_List_map___main___at_Lean_Elaborator_toPexpr___main___spec__2(obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
uint8 x_3; 
x_3 = !lean::is_exclusive(x_1);
if (x_3 == 0)
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_4 = lean::cnstr_get(x_1, 0);
x_5 = lean::cnstr_get(x_1, 1);
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_7 = l_List_map___main___at_Lean_Elaborator_toPexpr___main___spec__2(x_5);
lean::cnstr_set(x_1, 1, x_7);
lean::cnstr_set(x_1, 0, x_6);
return x_1;
}
else
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_8 = lean::cnstr_get(x_1, 0);
x_9 = lean::cnstr_get(x_1, 1);
lean::inc(x_9);
lean::inc(x_8);
lean::dec(x_1);
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_11 = l_List_map___main___at_Lean_Elaborator_toPexpr___main___spec__2(x_9);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
return x_12;
}
}
}
}
obj* _init_l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("_matchFn");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
uint8 x_8; 
x_8 = !lean::is_exclusive(x_1);
if (x_8 == 0)
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_9 = lean::cnstr_get(x_1, 0);
x_10 = lean::cnstr_get(x_1, 1);
x_11 = lean::cnstr_get(x_9, 0);
lean::inc(x_11);
x_12 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__1(x_11, x_2, x_3, x_4);
if (lean::obj_tag(x_12) == 0)
{
uint8 x_13; 
lean::free_heap_obj(x_1);
lean::dec(x_10);
lean::dec(x_9);
x_13 = !lean::is_exclusive(x_12);
if (x_13 == 0)
{
return x_12;
}
else
{
obj* x_14; obj* x_15; 
x_14 = lean::cnstr_get(x_12, 0);
lean::inc(x_14);
lean::dec(x_12);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_14);
return x_15;
}
}
else
{
obj* x_16; uint8 x_17; 
x_16 = lean::cnstr_get(x_12, 0);
lean::inc(x_16);
lean::dec(x_12);
x_17 = !lean::is_exclusive(x_16);
if (x_17 == 0)
{
obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
x_18 = lean::cnstr_get(x_16, 0);
x_19 = lean::cnstr_get(x_16, 1);
x_20 = lean::cnstr_get(x_9, 2);
lean::inc(x_20);
lean::dec(x_9);
x_21 = l_Lean_Elaborator_toPexpr___main(x_20, x_2, x_3, x_19);
if (lean::obj_tag(x_21) == 0)
{
uint8 x_22; 
lean::free_heap_obj(x_16);
lean::dec(x_18);
lean::free_heap_obj(x_1);
lean::dec(x_10);
x_22 = !lean::is_exclusive(x_21);
if (x_22 == 0)
{
return x_21;
}
else
{
obj* x_23; obj* x_24; 
x_23 = lean::cnstr_get(x_21, 0);
lean::inc(x_23);
lean::dec(x_21);
x_24 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_24, 0, x_23);
return x_24;
}
}
else
{
obj* x_25; uint8 x_26; 
x_25 = lean::cnstr_get(x_21, 0);
lean::inc(x_25);
lean::dec(x_21);
x_26 = !lean::is_exclusive(x_25);
if (x_26 == 0)
{
obj* x_27; obj* x_28; obj* x_29; obj* x_30; 
x_27 = lean::cnstr_get(x_25, 0);
x_28 = lean::cnstr_get(x_25, 1);
lean::cnstr_set(x_25, 1, x_27);
lean::cnstr_set(x_25, 0, x_18);
x_29 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3___closed__1;
lean::cnstr_set(x_16, 1, x_25);
lean::cnstr_set(x_16, 0, x_29);
x_30 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3(x_10, x_2, x_3, x_28);
if (lean::obj_tag(x_30) == 0)
{
uint8 x_31; 
lean::dec(x_16);
lean::free_heap_obj(x_1);
x_31 = !lean::is_exclusive(x_30);
if (x_31 == 0)
{
return x_30;
}
else
{
obj* x_32; obj* x_33; 
x_32 = lean::cnstr_get(x_30, 0);
lean::inc(x_32);
lean::dec(x_30);
x_33 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_33, 0, x_32);
return x_33;
}
}
else
{
uint8 x_34; 
x_34 = !lean::is_exclusive(x_30);
if (x_34 == 0)
{
obj* x_35; uint8 x_36; 
x_35 = lean::cnstr_get(x_30, 0);
x_36 = !lean::is_exclusive(x_35);
if (x_36 == 0)
{
obj* x_37; 
x_37 = lean::cnstr_get(x_35, 0);
lean::cnstr_set(x_1, 1, x_37);
lean::cnstr_set(x_1, 0, x_16);
lean::cnstr_set(x_35, 0, x_1);
return x_30;
}
else
{
obj* x_38; obj* x_39; obj* x_40; 
x_38 = lean::cnstr_get(x_35, 0);
x_39 = lean::cnstr_get(x_35, 1);
lean::inc(x_39);
lean::inc(x_38);
lean::dec(x_35);
lean::cnstr_set(x_1, 1, x_38);
lean::cnstr_set(x_1, 0, x_16);
x_40 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_40, 0, x_1);
lean::cnstr_set(x_40, 1, x_39);
lean::cnstr_set(x_30, 0, x_40);
return x_30;
}
}
else
{
obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; 
x_41 = lean::cnstr_get(x_30, 0);
lean::inc(x_41);
lean::dec(x_30);
x_42 = lean::cnstr_get(x_41, 0);
lean::inc(x_42);
x_43 = lean::cnstr_get(x_41, 1);
lean::inc(x_43);
if (lean::is_exclusive(x_41)) {
 lean::cnstr_release(x_41, 0);
 lean::cnstr_release(x_41, 1);
 x_44 = x_41;
} else {
 lean::dec_ref(x_41);
 x_44 = lean::box(0);
}
lean::cnstr_set(x_1, 1, x_42);
lean::cnstr_set(x_1, 0, x_16);
if (lean::is_scalar(x_44)) {
 x_45 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_45 = x_44;
}
lean::cnstr_set(x_45, 0, x_1);
lean::cnstr_set(x_45, 1, x_43);
x_46 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_46, 0, x_45);
return x_46;
}
}
}
else
{
obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; 
x_47 = lean::cnstr_get(x_25, 0);
x_48 = lean::cnstr_get(x_25, 1);
lean::inc(x_48);
lean::inc(x_47);
lean::dec(x_25);
x_49 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_49, 0, x_18);
lean::cnstr_set(x_49, 1, x_47);
x_50 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3___closed__1;
lean::cnstr_set(x_16, 1, x_49);
lean::cnstr_set(x_16, 0, x_50);
x_51 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3(x_10, x_2, x_3, x_48);
if (lean::obj_tag(x_51) == 0)
{
obj* x_52; obj* x_53; obj* x_54; 
lean::dec(x_16);
lean::free_heap_obj(x_1);
x_52 = lean::cnstr_get(x_51, 0);
lean::inc(x_52);
if (lean::is_exclusive(x_51)) {
 lean::cnstr_release(x_51, 0);
 x_53 = x_51;
} else {
 lean::dec_ref(x_51);
 x_53 = lean::box(0);
}
if (lean::is_scalar(x_53)) {
 x_54 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_54 = x_53;
}
lean::cnstr_set(x_54, 0, x_52);
return x_54;
}
else
{
obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; 
x_55 = lean::cnstr_get(x_51, 0);
lean::inc(x_55);
if (lean::is_exclusive(x_51)) {
 lean::cnstr_release(x_51, 0);
 x_56 = x_51;
} else {
 lean::dec_ref(x_51);
 x_56 = lean::box(0);
}
x_57 = lean::cnstr_get(x_55, 0);
lean::inc(x_57);
x_58 = lean::cnstr_get(x_55, 1);
lean::inc(x_58);
if (lean::is_exclusive(x_55)) {
 lean::cnstr_release(x_55, 0);
 lean::cnstr_release(x_55, 1);
 x_59 = x_55;
} else {
 lean::dec_ref(x_55);
 x_59 = lean::box(0);
}
lean::cnstr_set(x_1, 1, x_57);
lean::cnstr_set(x_1, 0, x_16);
if (lean::is_scalar(x_59)) {
 x_60 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_60 = x_59;
}
lean::cnstr_set(x_60, 0, x_1);
lean::cnstr_set(x_60, 1, x_58);
if (lean::is_scalar(x_56)) {
 x_61 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_61 = x_56;
}
lean::cnstr_set(x_61, 0, x_60);
return x_61;
}
}
}
}
else
{
obj* x_62; obj* x_63; obj* x_64; obj* x_65; 
x_62 = lean::cnstr_get(x_16, 0);
x_63 = lean::cnstr_get(x_16, 1);
lean::inc(x_63);
lean::inc(x_62);
lean::dec(x_16);
x_64 = lean::cnstr_get(x_9, 2);
lean::inc(x_64);
lean::dec(x_9);
x_65 = l_Lean_Elaborator_toPexpr___main(x_64, x_2, x_3, x_63);
if (lean::obj_tag(x_65) == 0)
{
obj* x_66; obj* x_67; obj* x_68; 
lean::dec(x_62);
lean::free_heap_obj(x_1);
lean::dec(x_10);
x_66 = lean::cnstr_get(x_65, 0);
lean::inc(x_66);
if (lean::is_exclusive(x_65)) {
 lean::cnstr_release(x_65, 0);
 x_67 = x_65;
} else {
 lean::dec_ref(x_65);
 x_67 = lean::box(0);
}
if (lean::is_scalar(x_67)) {
 x_68 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_68 = x_67;
}
lean::cnstr_set(x_68, 0, x_66);
return x_68;
}
else
{
obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; 
x_69 = lean::cnstr_get(x_65, 0);
lean::inc(x_69);
lean::dec(x_65);
x_70 = lean::cnstr_get(x_69, 0);
lean::inc(x_70);
x_71 = lean::cnstr_get(x_69, 1);
lean::inc(x_71);
if (lean::is_exclusive(x_69)) {
 lean::cnstr_release(x_69, 0);
 lean::cnstr_release(x_69, 1);
 x_72 = x_69;
} else {
 lean::dec_ref(x_69);
 x_72 = lean::box(0);
}
if (lean::is_scalar(x_72)) {
 x_73 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_73 = x_72;
}
lean::cnstr_set(x_73, 0, x_62);
lean::cnstr_set(x_73, 1, x_70);
x_74 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3___closed__1;
x_75 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_75, 0, x_74);
lean::cnstr_set(x_75, 1, x_73);
x_76 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3(x_10, x_2, x_3, x_71);
if (lean::obj_tag(x_76) == 0)
{
obj* x_77; obj* x_78; obj* x_79; 
lean::dec(x_75);
lean::free_heap_obj(x_1);
x_77 = lean::cnstr_get(x_76, 0);
lean::inc(x_77);
if (lean::is_exclusive(x_76)) {
 lean::cnstr_release(x_76, 0);
 x_78 = x_76;
} else {
 lean::dec_ref(x_76);
 x_78 = lean::box(0);
}
if (lean::is_scalar(x_78)) {
 x_79 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_79 = x_78;
}
lean::cnstr_set(x_79, 0, x_77);
return x_79;
}
else
{
obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; 
x_80 = lean::cnstr_get(x_76, 0);
lean::inc(x_80);
if (lean::is_exclusive(x_76)) {
 lean::cnstr_release(x_76, 0);
 x_81 = x_76;
} else {
 lean::dec_ref(x_76);
 x_81 = lean::box(0);
}
x_82 = lean::cnstr_get(x_80, 0);
lean::inc(x_82);
x_83 = lean::cnstr_get(x_80, 1);
lean::inc(x_83);
if (lean::is_exclusive(x_80)) {
 lean::cnstr_release(x_80, 0);
 lean::cnstr_release(x_80, 1);
 x_84 = x_80;
} else {
 lean::dec_ref(x_80);
 x_84 = lean::box(0);
}
lean::cnstr_set(x_1, 1, x_82);
lean::cnstr_set(x_1, 0, x_75);
if (lean::is_scalar(x_84)) {
 x_85 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_85 = x_84;
}
lean::cnstr_set(x_85, 0, x_1);
lean::cnstr_set(x_85, 1, x_83);
if (lean::is_scalar(x_81)) {
 x_86 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_86 = x_81;
}
lean::cnstr_set(x_86, 0, x_85);
return x_86;
}
}
}
}
}
else
{
obj* x_87; obj* x_88; obj* x_89; obj* x_90; 
x_87 = lean::cnstr_get(x_1, 0);
x_88 = lean::cnstr_get(x_1, 1);
lean::inc(x_88);
lean::inc(x_87);
lean::dec(x_1);
x_89 = lean::cnstr_get(x_87, 0);
lean::inc(x_89);
x_90 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__1(x_89, x_2, x_3, x_4);
if (lean::obj_tag(x_90) == 0)
{
obj* x_91; obj* x_92; obj* x_93; 
lean::dec(x_88);
lean::dec(x_87);
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
if (lean::is_exclusive(x_90)) {
 lean::cnstr_release(x_90, 0);
 x_92 = x_90;
} else {
 lean::dec_ref(x_90);
 x_92 = lean::box(0);
}
if (lean::is_scalar(x_92)) {
 x_93 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_93 = x_92;
}
lean::cnstr_set(x_93, 0, x_91);
return x_93;
}
else
{
obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; 
x_94 = lean::cnstr_get(x_90, 0);
lean::inc(x_94);
lean::dec(x_90);
x_95 = lean::cnstr_get(x_94, 0);
lean::inc(x_95);
x_96 = lean::cnstr_get(x_94, 1);
lean::inc(x_96);
if (lean::is_exclusive(x_94)) {
 lean::cnstr_release(x_94, 0);
 lean::cnstr_release(x_94, 1);
 x_97 = x_94;
} else {
 lean::dec_ref(x_94);
 x_97 = lean::box(0);
}
x_98 = lean::cnstr_get(x_87, 2);
lean::inc(x_98);
lean::dec(x_87);
x_99 = l_Lean_Elaborator_toPexpr___main(x_98, x_2, x_3, x_96);
if (lean::obj_tag(x_99) == 0)
{
obj* x_100; obj* x_101; obj* x_102; 
lean::dec(x_97);
lean::dec(x_95);
lean::dec(x_88);
x_100 = lean::cnstr_get(x_99, 0);
lean::inc(x_100);
if (lean::is_exclusive(x_99)) {
 lean::cnstr_release(x_99, 0);
 x_101 = x_99;
} else {
 lean::dec_ref(x_99);
 x_101 = lean::box(0);
}
if (lean::is_scalar(x_101)) {
 x_102 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_102 = x_101;
}
lean::cnstr_set(x_102, 0, x_100);
return x_102;
}
else
{
obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; 
x_103 = lean::cnstr_get(x_99, 0);
lean::inc(x_103);
lean::dec(x_99);
x_104 = lean::cnstr_get(x_103, 0);
lean::inc(x_104);
x_105 = lean::cnstr_get(x_103, 1);
lean::inc(x_105);
if (lean::is_exclusive(x_103)) {
 lean::cnstr_release(x_103, 0);
 lean::cnstr_release(x_103, 1);
 x_106 = x_103;
} else {
 lean::dec_ref(x_103);
 x_106 = lean::box(0);
}
if (lean::is_scalar(x_106)) {
 x_107 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_107 = x_106;
}
lean::cnstr_set(x_107, 0, x_95);
lean::cnstr_set(x_107, 1, x_104);
x_108 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3___closed__1;
if (lean::is_scalar(x_97)) {
 x_109 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_109 = x_97;
}
lean::cnstr_set(x_109, 0, x_108);
lean::cnstr_set(x_109, 1, x_107);
x_110 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3(x_88, x_2, x_3, x_105);
if (lean::obj_tag(x_110) == 0)
{
obj* x_111; obj* x_112; obj* x_113; 
lean::dec(x_109);
x_111 = lean::cnstr_get(x_110, 0);
lean::inc(x_111);
if (lean::is_exclusive(x_110)) {
 lean::cnstr_release(x_110, 0);
 x_112 = x_110;
} else {
 lean::dec_ref(x_110);
 x_112 = lean::box(0);
}
if (lean::is_scalar(x_112)) {
 x_113 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_113 = x_112;
}
lean::cnstr_set(x_113, 0, x_111);
return x_113;
}
else
{
obj* x_114; obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; 
x_114 = lean::cnstr_get(x_110, 0);
lean::inc(x_114);
if (lean::is_exclusive(x_110)) {
 lean::cnstr_release(x_110, 0);
 x_115 = x_110;
} else {
 lean::dec_ref(x_110);
 x_115 = lean::box(0);
}
x_116 = lean::cnstr_get(x_114, 0);
lean::inc(x_116);
x_117 = lean::cnstr_get(x_114, 1);
lean::inc(x_117);
if (lean::is_exclusive(x_114)) {
 lean::cnstr_release(x_114, 0);
 lean::cnstr_release(x_114, 1);
 x_118 = x_114;
} else {
 lean::dec_ref(x_114);
 x_118 = lean::box(0);
}
x_119 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_119, 0, x_109);
lean::cnstr_set(x_119, 1, x_116);
if (lean::is_scalar(x_118)) {
 x_120 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_120 = x_118;
}
lean::cnstr_set(x_120, 0, x_119);
lean::cnstr_set(x_120, 1, x_117);
if (lean::is_scalar(x_115)) {
 x_121 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_121 = x_115;
}
lean::cnstr_set(x_121, 0, x_120);
return x_121;
}
}
}
}
}
}
}
obj* l_List_spanAux___main___at_Lean_Elaborator_toPexpr___main___spec__4(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; obj* x_4; 
x_3 = l_List_reverse___rarg(x_2);
x_4 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_1);
return x_4;
}
else
{
obj* x_5; obj* x_6; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
if (lean::obj_tag(x_6) == 0)
{
uint8 x_7; 
lean::dec(x_6);
x_7 = !lean::is_exclusive(x_1);
if (x_7 == 0)
{
obj* x_8; obj* x_9; 
x_8 = lean::cnstr_get(x_1, 1);
x_9 = lean::cnstr_get(x_1, 0);
lean::dec(x_9);
lean::cnstr_set(x_1, 1, x_2);
{
obj* _tmp_0 = x_8;
obj* _tmp_1 = x_1;
x_1 = _tmp_0;
x_2 = _tmp_1;
}
goto _start;
}
else
{
obj* x_11; obj* x_12; 
x_11 = lean::cnstr_get(x_1, 1);
lean::inc(x_11);
lean::dec(x_1);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_5);
lean::cnstr_set(x_12, 1, x_2);
x_1 = x_11;
x_2 = x_12;
goto _start;
}
}
else
{
obj* x_14; obj* x_15; 
lean::dec(x_6);
lean::dec(x_5);
x_14 = l_List_reverse___rarg(x_2);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_1);
return x_15;
}
}
}
}
obj* l_List_spanAux___main___at_Lean_Elaborator_toPexpr___main___spec__5(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; obj* x_4; 
x_3 = l_List_reverse___rarg(x_2);
x_4 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_1);
return x_4;
}
else
{
obj* x_5; obj* x_6; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
if (lean::obj_tag(x_6) == 0)
{
obj* x_7; obj* x_8; 
lean::dec(x_6);
lean::dec(x_5);
x_7 = l_List_reverse___rarg(x_2);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_1);
return x_8;
}
else
{
obj* x_9; obj* x_10; 
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
lean::dec(x_6);
x_10 = lean::cnstr_get(x_9, 1);
lean::inc(x_10);
lean::dec(x_9);
if (lean::obj_tag(x_10) == 0)
{
obj* x_11; obj* x_12; 
lean::dec(x_5);
x_11 = l_List_reverse___rarg(x_2);
x_12 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_1);
return x_12;
}
else
{
uint8 x_13; 
lean::dec(x_10);
x_13 = !lean::is_exclusive(x_1);
if (x_13 == 0)
{
obj* x_14; obj* x_15; 
x_14 = lean::cnstr_get(x_1, 1);
x_15 = lean::cnstr_get(x_1, 0);
lean::dec(x_15);
lean::cnstr_set(x_1, 1, x_2);
{
obj* _tmp_0 = x_14;
obj* _tmp_1 = x_1;
x_1 = _tmp_0;
x_2 = _tmp_1;
}
goto _start;
}
else
{
obj* x_17; obj* x_18; 
x_17 = lean::cnstr_get(x_1, 1);
lean::inc(x_17);
lean::dec(x_1);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_5);
lean::cnstr_set(x_18, 1, x_2);
x_1 = x_17;
x_2 = x_18;
goto _start;
}
}
}
}
}
}
obj* _init_l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("field");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("toPexpr: unreachable");
return x_1;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_6; obj* x_7; obj* x_8; 
lean::dec(x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
else
{
obj* x_9; obj* x_10; 
x_9 = lean::cnstr_get(x_2, 0);
lean::inc(x_9);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
if (lean::obj_tag(x_10) == 0)
{
uint8 x_11; 
x_11 = !lean::is_exclusive(x_2);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_12 = lean::cnstr_get(x_2, 1);
x_13 = lean::cnstr_get(x_2, 0);
lean::dec(x_13);
x_14 = lean::cnstr_get(x_10, 0);
lean::inc(x_14);
lean::dec(x_10);
x_15 = lean::cnstr_get(x_14, 2);
lean::inc(x_15);
x_16 = l_Lean_Elaborator_toPexpr___main(x_15, x_3, x_4, x_5);
if (lean::obj_tag(x_16) == 0)
{
uint8 x_17; 
lean::dec(x_14);
lean::free_heap_obj(x_2);
lean::dec(x_12);
lean::dec(x_1);
x_17 = !lean::is_exclusive(x_16);
if (x_17 == 0)
{
return x_16;
}
else
{
obj* x_18; obj* x_19; 
x_18 = lean::cnstr_get(x_16, 0);
lean::inc(x_18);
lean::dec(x_16);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
else
{
obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_20 = lean::cnstr_get(x_16, 0);
lean::inc(x_20);
lean::dec(x_16);
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
x_22 = lean::cnstr_get(x_20, 1);
lean::inc(x_22);
lean::dec(x_20);
x_23 = lean::cnstr_get(x_14, 0);
lean::inc(x_23);
lean::dec(x_14);
x_24 = l_Lean_Elaborator_mangleIdent(x_23);
x_25 = lean::box(0);
x_26 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__1;
x_27 = l_Lean_KVMap_setName(x_25, x_26, x_24);
x_28 = lean_expr_mk_mdata(x_27, x_21);
x_29 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6(x_1, x_12, x_3, x_4, x_22);
if (lean::obj_tag(x_29) == 0)
{
uint8 x_30; 
lean::dec(x_28);
lean::free_heap_obj(x_2);
x_30 = !lean::is_exclusive(x_29);
if (x_30 == 0)
{
return x_29;
}
else
{
obj* x_31; obj* x_32; 
x_31 = lean::cnstr_get(x_29, 0);
lean::inc(x_31);
lean::dec(x_29);
x_32 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_32, 0, x_31);
return x_32;
}
}
else
{
uint8 x_33; 
x_33 = !lean::is_exclusive(x_29);
if (x_33 == 0)
{
obj* x_34; uint8 x_35; 
x_34 = lean::cnstr_get(x_29, 0);
x_35 = !lean::is_exclusive(x_34);
if (x_35 == 0)
{
obj* x_36; 
x_36 = lean::cnstr_get(x_34, 0);
lean::cnstr_set(x_2, 1, x_36);
lean::cnstr_set(x_2, 0, x_28);
lean::cnstr_set(x_34, 0, x_2);
return x_29;
}
else
{
obj* x_37; obj* x_38; obj* x_39; 
x_37 = lean::cnstr_get(x_34, 0);
x_38 = lean::cnstr_get(x_34, 1);
lean::inc(x_38);
lean::inc(x_37);
lean::dec(x_34);
lean::cnstr_set(x_2, 1, x_37);
lean::cnstr_set(x_2, 0, x_28);
x_39 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_39, 0, x_2);
lean::cnstr_set(x_39, 1, x_38);
lean::cnstr_set(x_29, 0, x_39);
return x_29;
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; 
x_40 = lean::cnstr_get(x_29, 0);
lean::inc(x_40);
lean::dec(x_29);
x_41 = lean::cnstr_get(x_40, 0);
lean::inc(x_41);
x_42 = lean::cnstr_get(x_40, 1);
lean::inc(x_42);
if (lean::is_exclusive(x_40)) {
 lean::cnstr_release(x_40, 0);
 lean::cnstr_release(x_40, 1);
 x_43 = x_40;
} else {
 lean::dec_ref(x_40);
 x_43 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_41);
lean::cnstr_set(x_2, 0, x_28);
if (lean::is_scalar(x_43)) {
 x_44 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_44 = x_43;
}
lean::cnstr_set(x_44, 0, x_2);
lean::cnstr_set(x_44, 1, x_42);
x_45 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_45, 0, x_44);
return x_45;
}
}
}
}
else
{
obj* x_46; obj* x_47; obj* x_48; obj* x_49; 
x_46 = lean::cnstr_get(x_2, 1);
lean::inc(x_46);
lean::dec(x_2);
x_47 = lean::cnstr_get(x_10, 0);
lean::inc(x_47);
lean::dec(x_10);
x_48 = lean::cnstr_get(x_47, 2);
lean::inc(x_48);
x_49 = l_Lean_Elaborator_toPexpr___main(x_48, x_3, x_4, x_5);
if (lean::obj_tag(x_49) == 0)
{
obj* x_50; obj* x_51; obj* x_52; 
lean::dec(x_47);
lean::dec(x_46);
lean::dec(x_1);
x_50 = lean::cnstr_get(x_49, 0);
lean::inc(x_50);
if (lean::is_exclusive(x_49)) {
 lean::cnstr_release(x_49, 0);
 x_51 = x_49;
} else {
 lean::dec_ref(x_49);
 x_51 = lean::box(0);
}
if (lean::is_scalar(x_51)) {
 x_52 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_52 = x_51;
}
lean::cnstr_set(x_52, 0, x_50);
return x_52;
}
else
{
obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; 
x_53 = lean::cnstr_get(x_49, 0);
lean::inc(x_53);
lean::dec(x_49);
x_54 = lean::cnstr_get(x_53, 0);
lean::inc(x_54);
x_55 = lean::cnstr_get(x_53, 1);
lean::inc(x_55);
lean::dec(x_53);
x_56 = lean::cnstr_get(x_47, 0);
lean::inc(x_56);
lean::dec(x_47);
x_57 = l_Lean_Elaborator_mangleIdent(x_56);
x_58 = lean::box(0);
x_59 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__1;
x_60 = l_Lean_KVMap_setName(x_58, x_59, x_57);
x_61 = lean_expr_mk_mdata(x_60, x_54);
x_62 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6(x_1, x_46, x_3, x_4, x_55);
if (lean::obj_tag(x_62) == 0)
{
obj* x_63; obj* x_64; obj* x_65; 
lean::dec(x_61);
x_63 = lean::cnstr_get(x_62, 0);
lean::inc(x_63);
if (lean::is_exclusive(x_62)) {
 lean::cnstr_release(x_62, 0);
 x_64 = x_62;
} else {
 lean::dec_ref(x_62);
 x_64 = lean::box(0);
}
if (lean::is_scalar(x_64)) {
 x_65 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_65 = x_64;
}
lean::cnstr_set(x_65, 0, x_63);
return x_65;
}
else
{
obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; 
x_66 = lean::cnstr_get(x_62, 0);
lean::inc(x_66);
if (lean::is_exclusive(x_62)) {
 lean::cnstr_release(x_62, 0);
 x_67 = x_62;
} else {
 lean::dec_ref(x_62);
 x_67 = lean::box(0);
}
x_68 = lean::cnstr_get(x_66, 0);
lean::inc(x_68);
x_69 = lean::cnstr_get(x_66, 1);
lean::inc(x_69);
if (lean::is_exclusive(x_66)) {
 lean::cnstr_release(x_66, 0);
 lean::cnstr_release(x_66, 1);
 x_70 = x_66;
} else {
 lean::dec_ref(x_66);
 x_70 = lean::box(0);
}
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_61);
lean::cnstr_set(x_71, 1, x_68);
if (lean::is_scalar(x_70)) {
 x_72 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_72 = x_70;
}
lean::cnstr_set(x_72, 0, x_71);
lean::cnstr_set(x_72, 1, x_69);
if (lean::is_scalar(x_67)) {
 x_73 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_73 = x_67;
}
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
}
}
}
else
{
uint8 x_74; 
lean::dec(x_10);
x_74 = !lean::is_exclusive(x_2);
if (x_74 == 0)
{
obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; 
x_75 = lean::cnstr_get(x_2, 1);
x_76 = lean::cnstr_get(x_2, 0);
lean::dec(x_76);
lean::inc(x_1);
x_77 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_77, 0, x_1);
x_78 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_79 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_77, x_78, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_77);
if (lean::obj_tag(x_79) == 0)
{
uint8 x_80; 
lean::free_heap_obj(x_2);
lean::dec(x_75);
lean::dec(x_1);
x_80 = !lean::is_exclusive(x_79);
if (x_80 == 0)
{
return x_79;
}
else
{
obj* x_81; obj* x_82; 
x_81 = lean::cnstr_get(x_79, 0);
lean::inc(x_81);
lean::dec(x_79);
x_82 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_82, 0, x_81);
return x_82;
}
}
else
{
obj* x_83; obj* x_84; obj* x_85; obj* x_86; 
x_83 = lean::cnstr_get(x_79, 0);
lean::inc(x_83);
lean::dec(x_79);
x_84 = lean::cnstr_get(x_83, 0);
lean::inc(x_84);
x_85 = lean::cnstr_get(x_83, 1);
lean::inc(x_85);
lean::dec(x_83);
x_86 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6(x_1, x_75, x_3, x_4, x_85);
if (lean::obj_tag(x_86) == 0)
{
uint8 x_87; 
lean::dec(x_84);
lean::free_heap_obj(x_2);
x_87 = !lean::is_exclusive(x_86);
if (x_87 == 0)
{
return x_86;
}
else
{
obj* x_88; obj* x_89; 
x_88 = lean::cnstr_get(x_86, 0);
lean::inc(x_88);
lean::dec(x_86);
x_89 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_89, 0, x_88);
return x_89;
}
}
else
{
uint8 x_90; 
x_90 = !lean::is_exclusive(x_86);
if (x_90 == 0)
{
obj* x_91; uint8 x_92; 
x_91 = lean::cnstr_get(x_86, 0);
x_92 = !lean::is_exclusive(x_91);
if (x_92 == 0)
{
obj* x_93; 
x_93 = lean::cnstr_get(x_91, 0);
lean::cnstr_set(x_2, 1, x_93);
lean::cnstr_set(x_2, 0, x_84);
lean::cnstr_set(x_91, 0, x_2);
return x_86;
}
else
{
obj* x_94; obj* x_95; obj* x_96; 
x_94 = lean::cnstr_get(x_91, 0);
x_95 = lean::cnstr_get(x_91, 1);
lean::inc(x_95);
lean::inc(x_94);
lean::dec(x_91);
lean::cnstr_set(x_2, 1, x_94);
lean::cnstr_set(x_2, 0, x_84);
x_96 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_96, 0, x_2);
lean::cnstr_set(x_96, 1, x_95);
lean::cnstr_set(x_86, 0, x_96);
return x_86;
}
}
else
{
obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; 
x_97 = lean::cnstr_get(x_86, 0);
lean::inc(x_97);
lean::dec(x_86);
x_98 = lean::cnstr_get(x_97, 0);
lean::inc(x_98);
x_99 = lean::cnstr_get(x_97, 1);
lean::inc(x_99);
if (lean::is_exclusive(x_97)) {
 lean::cnstr_release(x_97, 0);
 lean::cnstr_release(x_97, 1);
 x_100 = x_97;
} else {
 lean::dec_ref(x_97);
 x_100 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_98);
lean::cnstr_set(x_2, 0, x_84);
if (lean::is_scalar(x_100)) {
 x_101 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_101 = x_100;
}
lean::cnstr_set(x_101, 0, x_2);
lean::cnstr_set(x_101, 1, x_99);
x_102 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_102, 0, x_101);
return x_102;
}
}
}
}
else
{
obj* x_103; obj* x_104; obj* x_105; obj* x_106; 
x_103 = lean::cnstr_get(x_2, 1);
lean::inc(x_103);
lean::dec(x_2);
lean::inc(x_1);
x_104 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_104, 0, x_1);
x_105 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_106 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_104, x_105, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_104);
if (lean::obj_tag(x_106) == 0)
{
obj* x_107; obj* x_108; obj* x_109; 
lean::dec(x_103);
lean::dec(x_1);
x_107 = lean::cnstr_get(x_106, 0);
lean::inc(x_107);
if (lean::is_exclusive(x_106)) {
 lean::cnstr_release(x_106, 0);
 x_108 = x_106;
} else {
 lean::dec_ref(x_106);
 x_108 = lean::box(0);
}
if (lean::is_scalar(x_108)) {
 x_109 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_109 = x_108;
}
lean::cnstr_set(x_109, 0, x_107);
return x_109;
}
else
{
obj* x_110; obj* x_111; obj* x_112; obj* x_113; 
x_110 = lean::cnstr_get(x_106, 0);
lean::inc(x_110);
lean::dec(x_106);
x_111 = lean::cnstr_get(x_110, 0);
lean::inc(x_111);
x_112 = lean::cnstr_get(x_110, 1);
lean::inc(x_112);
lean::dec(x_110);
x_113 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6(x_1, x_103, x_3, x_4, x_112);
if (lean::obj_tag(x_113) == 0)
{
obj* x_114; obj* x_115; obj* x_116; 
lean::dec(x_111);
x_114 = lean::cnstr_get(x_113, 0);
lean::inc(x_114);
if (lean::is_exclusive(x_113)) {
 lean::cnstr_release(x_113, 0);
 x_115 = x_113;
} else {
 lean::dec_ref(x_113);
 x_115 = lean::box(0);
}
if (lean::is_scalar(x_115)) {
 x_116 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_116 = x_115;
}
lean::cnstr_set(x_116, 0, x_114);
return x_116;
}
else
{
obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; 
x_117 = lean::cnstr_get(x_113, 0);
lean::inc(x_117);
if (lean::is_exclusive(x_113)) {
 lean::cnstr_release(x_113, 0);
 x_118 = x_113;
} else {
 lean::dec_ref(x_113);
 x_118 = lean::box(0);
}
x_119 = lean::cnstr_get(x_117, 0);
lean::inc(x_119);
x_120 = lean::cnstr_get(x_117, 1);
lean::inc(x_120);
if (lean::is_exclusive(x_117)) {
 lean::cnstr_release(x_117, 0);
 lean::cnstr_release(x_117, 1);
 x_121 = x_117;
} else {
 lean::dec_ref(x_117);
 x_121 = lean::box(0);
}
x_122 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_122, 0, x_111);
lean::cnstr_set(x_122, 1, x_119);
if (lean::is_scalar(x_121)) {
 x_123 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_123 = x_121;
}
lean::cnstr_set(x_123, 0, x_122);
lean::cnstr_set(x_123, 1, x_120);
if (lean::is_scalar(x_118)) {
 x_124 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_124 = x_118;
}
lean::cnstr_set(x_124, 0, x_123);
return x_124;
}
}
}
}
}
}
}
obj* l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
lean::inc(x_1);
return x_1;
}
else
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_2, 0);
lean::inc(x_3);
x_4 = lean::cnstr_get(x_2, 1);
lean::inc(x_4);
lean::dec(x_2);
x_5 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_1, x_4);
x_6 = lean_expr_mk_app(x_3, x_5);
return x_6;
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__8(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_6; obj* x_7; obj* x_8; 
lean::dec(x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
else
{
obj* x_9; obj* x_10; 
x_9 = lean::cnstr_get(x_2, 0);
lean::inc(x_9);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
if (lean::obj_tag(x_10) == 0)
{
uint8 x_11; 
lean::dec(x_10);
x_11 = !lean::is_exclusive(x_2);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_12 = lean::cnstr_get(x_2, 1);
x_13 = lean::cnstr_get(x_2, 0);
lean::dec(x_13);
lean::inc(x_1);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_1);
x_15 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_16 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_14, x_15, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_14);
if (lean::obj_tag(x_16) == 0)
{
uint8 x_17; 
lean::free_heap_obj(x_2);
lean::dec(x_12);
lean::dec(x_1);
x_17 = !lean::is_exclusive(x_16);
if (x_17 == 0)
{
return x_16;
}
else
{
obj* x_18; obj* x_19; 
x_18 = lean::cnstr_get(x_16, 0);
lean::inc(x_18);
lean::dec(x_16);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
else
{
obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_20 = lean::cnstr_get(x_16, 0);
lean::inc(x_20);
lean::dec(x_16);
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
x_22 = lean::cnstr_get(x_20, 1);
lean::inc(x_22);
lean::dec(x_20);
x_23 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__8(x_1, x_12, x_3, x_4, x_22);
if (lean::obj_tag(x_23) == 0)
{
uint8 x_24; 
lean::dec(x_21);
lean::free_heap_obj(x_2);
x_24 = !lean::is_exclusive(x_23);
if (x_24 == 0)
{
return x_23;
}
else
{
obj* x_25; obj* x_26; 
x_25 = lean::cnstr_get(x_23, 0);
lean::inc(x_25);
lean::dec(x_23);
x_26 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_26, 0, x_25);
return x_26;
}
}
else
{
uint8 x_27; 
x_27 = !lean::is_exclusive(x_23);
if (x_27 == 0)
{
obj* x_28; uint8 x_29; 
x_28 = lean::cnstr_get(x_23, 0);
x_29 = !lean::is_exclusive(x_28);
if (x_29 == 0)
{
obj* x_30; 
x_30 = lean::cnstr_get(x_28, 0);
lean::cnstr_set(x_2, 1, x_30);
lean::cnstr_set(x_2, 0, x_21);
lean::cnstr_set(x_28, 0, x_2);
return x_23;
}
else
{
obj* x_31; obj* x_32; obj* x_33; 
x_31 = lean::cnstr_get(x_28, 0);
x_32 = lean::cnstr_get(x_28, 1);
lean::inc(x_32);
lean::inc(x_31);
lean::dec(x_28);
lean::cnstr_set(x_2, 1, x_31);
lean::cnstr_set(x_2, 0, x_21);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_2);
lean::cnstr_set(x_33, 1, x_32);
lean::cnstr_set(x_23, 0, x_33);
return x_23;
}
}
else
{
obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_34 = lean::cnstr_get(x_23, 0);
lean::inc(x_34);
lean::dec(x_23);
x_35 = lean::cnstr_get(x_34, 0);
lean::inc(x_35);
x_36 = lean::cnstr_get(x_34, 1);
lean::inc(x_36);
if (lean::is_exclusive(x_34)) {
 lean::cnstr_release(x_34, 0);
 lean::cnstr_release(x_34, 1);
 x_37 = x_34;
} else {
 lean::dec_ref(x_34);
 x_37 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_35);
lean::cnstr_set(x_2, 0, x_21);
if (lean::is_scalar(x_37)) {
 x_38 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_38 = x_37;
}
lean::cnstr_set(x_38, 0, x_2);
lean::cnstr_set(x_38, 1, x_36);
x_39 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_39, 0, x_38);
return x_39;
}
}
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; obj* x_43; 
x_40 = lean::cnstr_get(x_2, 1);
lean::inc(x_40);
lean::dec(x_2);
lean::inc(x_1);
x_41 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_41, 0, x_1);
x_42 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_43 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_41, x_42, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_41);
if (lean::obj_tag(x_43) == 0)
{
obj* x_44; obj* x_45; obj* x_46; 
lean::dec(x_40);
lean::dec(x_1);
x_44 = lean::cnstr_get(x_43, 0);
lean::inc(x_44);
if (lean::is_exclusive(x_43)) {
 lean::cnstr_release(x_43, 0);
 x_45 = x_43;
} else {
 lean::dec_ref(x_43);
 x_45 = lean::box(0);
}
if (lean::is_scalar(x_45)) {
 x_46 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_46 = x_45;
}
lean::cnstr_set(x_46, 0, x_44);
return x_46;
}
else
{
obj* x_47; obj* x_48; obj* x_49; obj* x_50; 
x_47 = lean::cnstr_get(x_43, 0);
lean::inc(x_47);
lean::dec(x_43);
x_48 = lean::cnstr_get(x_47, 0);
lean::inc(x_48);
x_49 = lean::cnstr_get(x_47, 1);
lean::inc(x_49);
lean::dec(x_47);
x_50 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__8(x_1, x_40, x_3, x_4, x_49);
if (lean::obj_tag(x_50) == 0)
{
obj* x_51; obj* x_52; obj* x_53; 
lean::dec(x_48);
x_51 = lean::cnstr_get(x_50, 0);
lean::inc(x_51);
if (lean::is_exclusive(x_50)) {
 lean::cnstr_release(x_50, 0);
 x_52 = x_50;
} else {
 lean::dec_ref(x_50);
 x_52 = lean::box(0);
}
if (lean::is_scalar(x_52)) {
 x_53 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_53 = x_52;
}
lean::cnstr_set(x_53, 0, x_51);
return x_53;
}
else
{
obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; 
x_54 = lean::cnstr_get(x_50, 0);
lean::inc(x_54);
if (lean::is_exclusive(x_50)) {
 lean::cnstr_release(x_50, 0);
 x_55 = x_50;
} else {
 lean::dec_ref(x_50);
 x_55 = lean::box(0);
}
x_56 = lean::cnstr_get(x_54, 0);
lean::inc(x_56);
x_57 = lean::cnstr_get(x_54, 1);
lean::inc(x_57);
if (lean::is_exclusive(x_54)) {
 lean::cnstr_release(x_54, 0);
 lean::cnstr_release(x_54, 1);
 x_58 = x_54;
} else {
 lean::dec_ref(x_54);
 x_58 = lean::box(0);
}
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_48);
lean::cnstr_set(x_59, 1, x_56);
if (lean::is_scalar(x_58)) {
 x_60 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_60 = x_58;
}
lean::cnstr_set(x_60, 0, x_59);
lean::cnstr_set(x_60, 1, x_57);
if (lean::is_scalar(x_55)) {
 x_61 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_61 = x_55;
}
lean::cnstr_set(x_61, 0, x_60);
return x_61;
}
}
}
}
else
{
obj* x_62; obj* x_63; 
x_62 = lean::cnstr_get(x_10, 0);
lean::inc(x_62);
lean::dec(x_10);
x_63 = lean::cnstr_get(x_62, 1);
lean::inc(x_63);
lean::dec(x_62);
if (lean::obj_tag(x_63) == 0)
{
uint8 x_64; 
x_64 = !lean::is_exclusive(x_2);
if (x_64 == 0)
{
obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; 
x_65 = lean::cnstr_get(x_2, 1);
x_66 = lean::cnstr_get(x_2, 0);
lean::dec(x_66);
lean::inc(x_1);
x_67 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_67, 0, x_1);
x_68 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_69 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_67, x_68, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_67);
if (lean::obj_tag(x_69) == 0)
{
uint8 x_70; 
lean::free_heap_obj(x_2);
lean::dec(x_65);
lean::dec(x_1);
x_70 = !lean::is_exclusive(x_69);
if (x_70 == 0)
{
return x_69;
}
else
{
obj* x_71; obj* x_72; 
x_71 = lean::cnstr_get(x_69, 0);
lean::inc(x_71);
lean::dec(x_69);
x_72 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_72, 0, x_71);
return x_72;
}
}
else
{
obj* x_73; obj* x_74; obj* x_75; obj* x_76; 
x_73 = lean::cnstr_get(x_69, 0);
lean::inc(x_73);
lean::dec(x_69);
x_74 = lean::cnstr_get(x_73, 0);
lean::inc(x_74);
x_75 = lean::cnstr_get(x_73, 1);
lean::inc(x_75);
lean::dec(x_73);
x_76 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__8(x_1, x_65, x_3, x_4, x_75);
if (lean::obj_tag(x_76) == 0)
{
uint8 x_77; 
lean::dec(x_74);
lean::free_heap_obj(x_2);
x_77 = !lean::is_exclusive(x_76);
if (x_77 == 0)
{
return x_76;
}
else
{
obj* x_78; obj* x_79; 
x_78 = lean::cnstr_get(x_76, 0);
lean::inc(x_78);
lean::dec(x_76);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
else
{
uint8 x_80; 
x_80 = !lean::is_exclusive(x_76);
if (x_80 == 0)
{
obj* x_81; uint8 x_82; 
x_81 = lean::cnstr_get(x_76, 0);
x_82 = !lean::is_exclusive(x_81);
if (x_82 == 0)
{
obj* x_83; 
x_83 = lean::cnstr_get(x_81, 0);
lean::cnstr_set(x_2, 1, x_83);
lean::cnstr_set(x_2, 0, x_74);
lean::cnstr_set(x_81, 0, x_2);
return x_76;
}
else
{
obj* x_84; obj* x_85; obj* x_86; 
x_84 = lean::cnstr_get(x_81, 0);
x_85 = lean::cnstr_get(x_81, 1);
lean::inc(x_85);
lean::inc(x_84);
lean::dec(x_81);
lean::cnstr_set(x_2, 1, x_84);
lean::cnstr_set(x_2, 0, x_74);
x_86 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_86, 0, x_2);
lean::cnstr_set(x_86, 1, x_85);
lean::cnstr_set(x_76, 0, x_86);
return x_76;
}
}
else
{
obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; 
x_87 = lean::cnstr_get(x_76, 0);
lean::inc(x_87);
lean::dec(x_76);
x_88 = lean::cnstr_get(x_87, 0);
lean::inc(x_88);
x_89 = lean::cnstr_get(x_87, 1);
lean::inc(x_89);
if (lean::is_exclusive(x_87)) {
 lean::cnstr_release(x_87, 0);
 lean::cnstr_release(x_87, 1);
 x_90 = x_87;
} else {
 lean::dec_ref(x_87);
 x_90 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_88);
lean::cnstr_set(x_2, 0, x_74);
if (lean::is_scalar(x_90)) {
 x_91 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_91 = x_90;
}
lean::cnstr_set(x_91, 0, x_2);
lean::cnstr_set(x_91, 1, x_89);
x_92 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_92, 0, x_91);
return x_92;
}
}
}
}
else
{
obj* x_93; obj* x_94; obj* x_95; obj* x_96; 
x_93 = lean::cnstr_get(x_2, 1);
lean::inc(x_93);
lean::dec(x_2);
lean::inc(x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_1);
x_95 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_96 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_94, x_95, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_94);
if (lean::obj_tag(x_96) == 0)
{
obj* x_97; obj* x_98; obj* x_99; 
lean::dec(x_93);
lean::dec(x_1);
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
if (lean::is_exclusive(x_96)) {
 lean::cnstr_release(x_96, 0);
 x_98 = x_96;
} else {
 lean::dec_ref(x_96);
 x_98 = lean::box(0);
}
if (lean::is_scalar(x_98)) {
 x_99 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_99 = x_98;
}
lean::cnstr_set(x_99, 0, x_97);
return x_99;
}
else
{
obj* x_100; obj* x_101; obj* x_102; obj* x_103; 
x_100 = lean::cnstr_get(x_96, 0);
lean::inc(x_100);
lean::dec(x_96);
x_101 = lean::cnstr_get(x_100, 0);
lean::inc(x_101);
x_102 = lean::cnstr_get(x_100, 1);
lean::inc(x_102);
lean::dec(x_100);
x_103 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__8(x_1, x_93, x_3, x_4, x_102);
if (lean::obj_tag(x_103) == 0)
{
obj* x_104; obj* x_105; obj* x_106; 
lean::dec(x_101);
x_104 = lean::cnstr_get(x_103, 0);
lean::inc(x_104);
if (lean::is_exclusive(x_103)) {
 lean::cnstr_release(x_103, 0);
 x_105 = x_103;
} else {
 lean::dec_ref(x_103);
 x_105 = lean::box(0);
}
if (lean::is_scalar(x_105)) {
 x_106 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_106 = x_105;
}
lean::cnstr_set(x_106, 0, x_104);
return x_106;
}
else
{
obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; 
x_107 = lean::cnstr_get(x_103, 0);
lean::inc(x_107);
if (lean::is_exclusive(x_103)) {
 lean::cnstr_release(x_103, 0);
 x_108 = x_103;
} else {
 lean::dec_ref(x_103);
 x_108 = lean::box(0);
}
x_109 = lean::cnstr_get(x_107, 0);
lean::inc(x_109);
x_110 = lean::cnstr_get(x_107, 1);
lean::inc(x_110);
if (lean::is_exclusive(x_107)) {
 lean::cnstr_release(x_107, 0);
 lean::cnstr_release(x_107, 1);
 x_111 = x_107;
} else {
 lean::dec_ref(x_107);
 x_111 = lean::box(0);
}
x_112 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_112, 0, x_101);
lean::cnstr_set(x_112, 1, x_109);
if (lean::is_scalar(x_111)) {
 x_113 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_113 = x_111;
}
lean::cnstr_set(x_113, 0, x_112);
lean::cnstr_set(x_113, 1, x_110);
if (lean::is_scalar(x_108)) {
 x_114 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_114 = x_108;
}
lean::cnstr_set(x_114, 0, x_113);
return x_114;
}
}
}
}
else
{
uint8 x_115; 
x_115 = !lean::is_exclusive(x_2);
if (x_115 == 0)
{
obj* x_116; obj* x_117; obj* x_118; obj* x_119; 
x_116 = lean::cnstr_get(x_2, 1);
x_117 = lean::cnstr_get(x_2, 0);
lean::dec(x_117);
x_118 = lean::cnstr_get(x_63, 0);
lean::inc(x_118);
lean::dec(x_63);
x_119 = l_Lean_Elaborator_toPexpr___main(x_118, x_3, x_4, x_5);
if (lean::obj_tag(x_119) == 0)
{
uint8 x_120; 
lean::free_heap_obj(x_2);
lean::dec(x_116);
lean::dec(x_1);
x_120 = !lean::is_exclusive(x_119);
if (x_120 == 0)
{
return x_119;
}
else
{
obj* x_121; obj* x_122; 
x_121 = lean::cnstr_get(x_119, 0);
lean::inc(x_121);
lean::dec(x_119);
x_122 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_122, 0, x_121);
return x_122;
}
}
else
{
obj* x_123; obj* x_124; obj* x_125; obj* x_126; 
x_123 = lean::cnstr_get(x_119, 0);
lean::inc(x_123);
lean::dec(x_119);
x_124 = lean::cnstr_get(x_123, 0);
lean::inc(x_124);
x_125 = lean::cnstr_get(x_123, 1);
lean::inc(x_125);
lean::dec(x_123);
x_126 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__8(x_1, x_116, x_3, x_4, x_125);
if (lean::obj_tag(x_126) == 0)
{
uint8 x_127; 
lean::dec(x_124);
lean::free_heap_obj(x_2);
x_127 = !lean::is_exclusive(x_126);
if (x_127 == 0)
{
return x_126;
}
else
{
obj* x_128; obj* x_129; 
x_128 = lean::cnstr_get(x_126, 0);
lean::inc(x_128);
lean::dec(x_126);
x_129 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_129, 0, x_128);
return x_129;
}
}
else
{
uint8 x_130; 
x_130 = !lean::is_exclusive(x_126);
if (x_130 == 0)
{
obj* x_131; uint8 x_132; 
x_131 = lean::cnstr_get(x_126, 0);
x_132 = !lean::is_exclusive(x_131);
if (x_132 == 0)
{
obj* x_133; 
x_133 = lean::cnstr_get(x_131, 0);
lean::cnstr_set(x_2, 1, x_133);
lean::cnstr_set(x_2, 0, x_124);
lean::cnstr_set(x_131, 0, x_2);
return x_126;
}
else
{
obj* x_134; obj* x_135; obj* x_136; 
x_134 = lean::cnstr_get(x_131, 0);
x_135 = lean::cnstr_get(x_131, 1);
lean::inc(x_135);
lean::inc(x_134);
lean::dec(x_131);
lean::cnstr_set(x_2, 1, x_134);
lean::cnstr_set(x_2, 0, x_124);
x_136 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_136, 0, x_2);
lean::cnstr_set(x_136, 1, x_135);
lean::cnstr_set(x_126, 0, x_136);
return x_126;
}
}
else
{
obj* x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_141; obj* x_142; 
x_137 = lean::cnstr_get(x_126, 0);
lean::inc(x_137);
lean::dec(x_126);
x_138 = lean::cnstr_get(x_137, 0);
lean::inc(x_138);
x_139 = lean::cnstr_get(x_137, 1);
lean::inc(x_139);
if (lean::is_exclusive(x_137)) {
 lean::cnstr_release(x_137, 0);
 lean::cnstr_release(x_137, 1);
 x_140 = x_137;
} else {
 lean::dec_ref(x_137);
 x_140 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_138);
lean::cnstr_set(x_2, 0, x_124);
if (lean::is_scalar(x_140)) {
 x_141 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_141 = x_140;
}
lean::cnstr_set(x_141, 0, x_2);
lean::cnstr_set(x_141, 1, x_139);
x_142 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_142, 0, x_141);
return x_142;
}
}
}
}
else
{
obj* x_143; obj* x_144; obj* x_145; 
x_143 = lean::cnstr_get(x_2, 1);
lean::inc(x_143);
lean::dec(x_2);
x_144 = lean::cnstr_get(x_63, 0);
lean::inc(x_144);
lean::dec(x_63);
x_145 = l_Lean_Elaborator_toPexpr___main(x_144, x_3, x_4, x_5);
if (lean::obj_tag(x_145) == 0)
{
obj* x_146; obj* x_147; obj* x_148; 
lean::dec(x_143);
lean::dec(x_1);
x_146 = lean::cnstr_get(x_145, 0);
lean::inc(x_146);
if (lean::is_exclusive(x_145)) {
 lean::cnstr_release(x_145, 0);
 x_147 = x_145;
} else {
 lean::dec_ref(x_145);
 x_147 = lean::box(0);
}
if (lean::is_scalar(x_147)) {
 x_148 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_148 = x_147;
}
lean::cnstr_set(x_148, 0, x_146);
return x_148;
}
else
{
obj* x_149; obj* x_150; obj* x_151; obj* x_152; 
x_149 = lean::cnstr_get(x_145, 0);
lean::inc(x_149);
lean::dec(x_145);
x_150 = lean::cnstr_get(x_149, 0);
lean::inc(x_150);
x_151 = lean::cnstr_get(x_149, 1);
lean::inc(x_151);
lean::dec(x_149);
x_152 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__8(x_1, x_143, x_3, x_4, x_151);
if (lean::obj_tag(x_152) == 0)
{
obj* x_153; obj* x_154; obj* x_155; 
lean::dec(x_150);
x_153 = lean::cnstr_get(x_152, 0);
lean::inc(x_153);
if (lean::is_exclusive(x_152)) {
 lean::cnstr_release(x_152, 0);
 x_154 = x_152;
} else {
 lean::dec_ref(x_152);
 x_154 = lean::box(0);
}
if (lean::is_scalar(x_154)) {
 x_155 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_155 = x_154;
}
lean::cnstr_set(x_155, 0, x_153);
return x_155;
}
else
{
obj* x_156; obj* x_157; obj* x_158; obj* x_159; obj* x_160; obj* x_161; obj* x_162; obj* x_163; 
x_156 = lean::cnstr_get(x_152, 0);
lean::inc(x_156);
if (lean::is_exclusive(x_152)) {
 lean::cnstr_release(x_152, 0);
 x_157 = x_152;
} else {
 lean::dec_ref(x_152);
 x_157 = lean::box(0);
}
x_158 = lean::cnstr_get(x_156, 0);
lean::inc(x_158);
x_159 = lean::cnstr_get(x_156, 1);
lean::inc(x_159);
if (lean::is_exclusive(x_156)) {
 lean::cnstr_release(x_156, 0);
 lean::cnstr_release(x_156, 1);
 x_160 = x_156;
} else {
 lean::dec_ref(x_156);
 x_160 = lean::box(0);
}
x_161 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_161, 0, x_150);
lean::cnstr_set(x_161, 1, x_158);
if (lean::is_scalar(x_160)) {
 x_162 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_162 = x_160;
}
lean::cnstr_set(x_162, 0, x_161);
lean::cnstr_set(x_162, 1, x_159);
if (lean::is_scalar(x_157)) {
 x_163 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_163 = x_157;
}
lean::cnstr_set(x_163, 0, x_162);
return x_163;
}
}
}
}
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__9(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_6; obj* x_7; obj* x_8; 
lean::dec(x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
else
{
obj* x_9; obj* x_10; 
x_9 = lean::cnstr_get(x_2, 0);
lean::inc(x_9);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
if (lean::obj_tag(x_10) == 0)
{
uint8 x_11; 
x_11 = !lean::is_exclusive(x_2);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_12 = lean::cnstr_get(x_2, 1);
x_13 = lean::cnstr_get(x_2, 0);
lean::dec(x_13);
x_14 = lean::cnstr_get(x_10, 0);
lean::inc(x_14);
lean::dec(x_10);
x_15 = lean::cnstr_get(x_14, 2);
lean::inc(x_15);
x_16 = l_Lean_Elaborator_toPexpr___main(x_15, x_3, x_4, x_5);
if (lean::obj_tag(x_16) == 0)
{
uint8 x_17; 
lean::dec(x_14);
lean::free_heap_obj(x_2);
lean::dec(x_12);
lean::dec(x_1);
x_17 = !lean::is_exclusive(x_16);
if (x_17 == 0)
{
return x_16;
}
else
{
obj* x_18; obj* x_19; 
x_18 = lean::cnstr_get(x_16, 0);
lean::inc(x_18);
lean::dec(x_16);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
else
{
obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_20 = lean::cnstr_get(x_16, 0);
lean::inc(x_20);
lean::dec(x_16);
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
x_22 = lean::cnstr_get(x_20, 1);
lean::inc(x_22);
lean::dec(x_20);
x_23 = lean::cnstr_get(x_14, 0);
lean::inc(x_23);
lean::dec(x_14);
x_24 = l_Lean_Elaborator_mangleIdent(x_23);
x_25 = lean::box(0);
x_26 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__1;
x_27 = l_Lean_KVMap_setName(x_25, x_26, x_24);
x_28 = lean_expr_mk_mdata(x_27, x_21);
x_29 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__9(x_1, x_12, x_3, x_4, x_22);
if (lean::obj_tag(x_29) == 0)
{
uint8 x_30; 
lean::dec(x_28);
lean::free_heap_obj(x_2);
x_30 = !lean::is_exclusive(x_29);
if (x_30 == 0)
{
return x_29;
}
else
{
obj* x_31; obj* x_32; 
x_31 = lean::cnstr_get(x_29, 0);
lean::inc(x_31);
lean::dec(x_29);
x_32 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_32, 0, x_31);
return x_32;
}
}
else
{
uint8 x_33; 
x_33 = !lean::is_exclusive(x_29);
if (x_33 == 0)
{
obj* x_34; uint8 x_35; 
x_34 = lean::cnstr_get(x_29, 0);
x_35 = !lean::is_exclusive(x_34);
if (x_35 == 0)
{
obj* x_36; 
x_36 = lean::cnstr_get(x_34, 0);
lean::cnstr_set(x_2, 1, x_36);
lean::cnstr_set(x_2, 0, x_28);
lean::cnstr_set(x_34, 0, x_2);
return x_29;
}
else
{
obj* x_37; obj* x_38; obj* x_39; 
x_37 = lean::cnstr_get(x_34, 0);
x_38 = lean::cnstr_get(x_34, 1);
lean::inc(x_38);
lean::inc(x_37);
lean::dec(x_34);
lean::cnstr_set(x_2, 1, x_37);
lean::cnstr_set(x_2, 0, x_28);
x_39 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_39, 0, x_2);
lean::cnstr_set(x_39, 1, x_38);
lean::cnstr_set(x_29, 0, x_39);
return x_29;
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; 
x_40 = lean::cnstr_get(x_29, 0);
lean::inc(x_40);
lean::dec(x_29);
x_41 = lean::cnstr_get(x_40, 0);
lean::inc(x_41);
x_42 = lean::cnstr_get(x_40, 1);
lean::inc(x_42);
if (lean::is_exclusive(x_40)) {
 lean::cnstr_release(x_40, 0);
 lean::cnstr_release(x_40, 1);
 x_43 = x_40;
} else {
 lean::dec_ref(x_40);
 x_43 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_41);
lean::cnstr_set(x_2, 0, x_28);
if (lean::is_scalar(x_43)) {
 x_44 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_44 = x_43;
}
lean::cnstr_set(x_44, 0, x_2);
lean::cnstr_set(x_44, 1, x_42);
x_45 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_45, 0, x_44);
return x_45;
}
}
}
}
else
{
obj* x_46; obj* x_47; obj* x_48; obj* x_49; 
x_46 = lean::cnstr_get(x_2, 1);
lean::inc(x_46);
lean::dec(x_2);
x_47 = lean::cnstr_get(x_10, 0);
lean::inc(x_47);
lean::dec(x_10);
x_48 = lean::cnstr_get(x_47, 2);
lean::inc(x_48);
x_49 = l_Lean_Elaborator_toPexpr___main(x_48, x_3, x_4, x_5);
if (lean::obj_tag(x_49) == 0)
{
obj* x_50; obj* x_51; obj* x_52; 
lean::dec(x_47);
lean::dec(x_46);
lean::dec(x_1);
x_50 = lean::cnstr_get(x_49, 0);
lean::inc(x_50);
if (lean::is_exclusive(x_49)) {
 lean::cnstr_release(x_49, 0);
 x_51 = x_49;
} else {
 lean::dec_ref(x_49);
 x_51 = lean::box(0);
}
if (lean::is_scalar(x_51)) {
 x_52 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_52 = x_51;
}
lean::cnstr_set(x_52, 0, x_50);
return x_52;
}
else
{
obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; 
x_53 = lean::cnstr_get(x_49, 0);
lean::inc(x_53);
lean::dec(x_49);
x_54 = lean::cnstr_get(x_53, 0);
lean::inc(x_54);
x_55 = lean::cnstr_get(x_53, 1);
lean::inc(x_55);
lean::dec(x_53);
x_56 = lean::cnstr_get(x_47, 0);
lean::inc(x_56);
lean::dec(x_47);
x_57 = l_Lean_Elaborator_mangleIdent(x_56);
x_58 = lean::box(0);
x_59 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__1;
x_60 = l_Lean_KVMap_setName(x_58, x_59, x_57);
x_61 = lean_expr_mk_mdata(x_60, x_54);
x_62 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__9(x_1, x_46, x_3, x_4, x_55);
if (lean::obj_tag(x_62) == 0)
{
obj* x_63; obj* x_64; obj* x_65; 
lean::dec(x_61);
x_63 = lean::cnstr_get(x_62, 0);
lean::inc(x_63);
if (lean::is_exclusive(x_62)) {
 lean::cnstr_release(x_62, 0);
 x_64 = x_62;
} else {
 lean::dec_ref(x_62);
 x_64 = lean::box(0);
}
if (lean::is_scalar(x_64)) {
 x_65 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_65 = x_64;
}
lean::cnstr_set(x_65, 0, x_63);
return x_65;
}
else
{
obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; 
x_66 = lean::cnstr_get(x_62, 0);
lean::inc(x_66);
if (lean::is_exclusive(x_62)) {
 lean::cnstr_release(x_62, 0);
 x_67 = x_62;
} else {
 lean::dec_ref(x_62);
 x_67 = lean::box(0);
}
x_68 = lean::cnstr_get(x_66, 0);
lean::inc(x_68);
x_69 = lean::cnstr_get(x_66, 1);
lean::inc(x_69);
if (lean::is_exclusive(x_66)) {
 lean::cnstr_release(x_66, 0);
 lean::cnstr_release(x_66, 1);
 x_70 = x_66;
} else {
 lean::dec_ref(x_66);
 x_70 = lean::box(0);
}
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_61);
lean::cnstr_set(x_71, 1, x_68);
if (lean::is_scalar(x_70)) {
 x_72 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_72 = x_70;
}
lean::cnstr_set(x_72, 0, x_71);
lean::cnstr_set(x_72, 1, x_69);
if (lean::is_scalar(x_67)) {
 x_73 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_73 = x_67;
}
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
}
}
}
else
{
uint8 x_74; 
lean::dec(x_10);
x_74 = !lean::is_exclusive(x_2);
if (x_74 == 0)
{
obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; 
x_75 = lean::cnstr_get(x_2, 1);
x_76 = lean::cnstr_get(x_2, 0);
lean::dec(x_76);
lean::inc(x_1);
x_77 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_77, 0, x_1);
x_78 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_79 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_77, x_78, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_77);
if (lean::obj_tag(x_79) == 0)
{
uint8 x_80; 
lean::free_heap_obj(x_2);
lean::dec(x_75);
lean::dec(x_1);
x_80 = !lean::is_exclusive(x_79);
if (x_80 == 0)
{
return x_79;
}
else
{
obj* x_81; obj* x_82; 
x_81 = lean::cnstr_get(x_79, 0);
lean::inc(x_81);
lean::dec(x_79);
x_82 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_82, 0, x_81);
return x_82;
}
}
else
{
obj* x_83; obj* x_84; obj* x_85; obj* x_86; 
x_83 = lean::cnstr_get(x_79, 0);
lean::inc(x_83);
lean::dec(x_79);
x_84 = lean::cnstr_get(x_83, 0);
lean::inc(x_84);
x_85 = lean::cnstr_get(x_83, 1);
lean::inc(x_85);
lean::dec(x_83);
x_86 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__9(x_1, x_75, x_3, x_4, x_85);
if (lean::obj_tag(x_86) == 0)
{
uint8 x_87; 
lean::dec(x_84);
lean::free_heap_obj(x_2);
x_87 = !lean::is_exclusive(x_86);
if (x_87 == 0)
{
return x_86;
}
else
{
obj* x_88; obj* x_89; 
x_88 = lean::cnstr_get(x_86, 0);
lean::inc(x_88);
lean::dec(x_86);
x_89 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_89, 0, x_88);
return x_89;
}
}
else
{
uint8 x_90; 
x_90 = !lean::is_exclusive(x_86);
if (x_90 == 0)
{
obj* x_91; uint8 x_92; 
x_91 = lean::cnstr_get(x_86, 0);
x_92 = !lean::is_exclusive(x_91);
if (x_92 == 0)
{
obj* x_93; 
x_93 = lean::cnstr_get(x_91, 0);
lean::cnstr_set(x_2, 1, x_93);
lean::cnstr_set(x_2, 0, x_84);
lean::cnstr_set(x_91, 0, x_2);
return x_86;
}
else
{
obj* x_94; obj* x_95; obj* x_96; 
x_94 = lean::cnstr_get(x_91, 0);
x_95 = lean::cnstr_get(x_91, 1);
lean::inc(x_95);
lean::inc(x_94);
lean::dec(x_91);
lean::cnstr_set(x_2, 1, x_94);
lean::cnstr_set(x_2, 0, x_84);
x_96 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_96, 0, x_2);
lean::cnstr_set(x_96, 1, x_95);
lean::cnstr_set(x_86, 0, x_96);
return x_86;
}
}
else
{
obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; 
x_97 = lean::cnstr_get(x_86, 0);
lean::inc(x_97);
lean::dec(x_86);
x_98 = lean::cnstr_get(x_97, 0);
lean::inc(x_98);
x_99 = lean::cnstr_get(x_97, 1);
lean::inc(x_99);
if (lean::is_exclusive(x_97)) {
 lean::cnstr_release(x_97, 0);
 lean::cnstr_release(x_97, 1);
 x_100 = x_97;
} else {
 lean::dec_ref(x_97);
 x_100 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_98);
lean::cnstr_set(x_2, 0, x_84);
if (lean::is_scalar(x_100)) {
 x_101 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_101 = x_100;
}
lean::cnstr_set(x_101, 0, x_2);
lean::cnstr_set(x_101, 1, x_99);
x_102 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_102, 0, x_101);
return x_102;
}
}
}
}
else
{
obj* x_103; obj* x_104; obj* x_105; obj* x_106; 
x_103 = lean::cnstr_get(x_2, 1);
lean::inc(x_103);
lean::dec(x_2);
lean::inc(x_1);
x_104 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_104, 0, x_1);
x_105 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_106 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_104, x_105, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_104);
if (lean::obj_tag(x_106) == 0)
{
obj* x_107; obj* x_108; obj* x_109; 
lean::dec(x_103);
lean::dec(x_1);
x_107 = lean::cnstr_get(x_106, 0);
lean::inc(x_107);
if (lean::is_exclusive(x_106)) {
 lean::cnstr_release(x_106, 0);
 x_108 = x_106;
} else {
 lean::dec_ref(x_106);
 x_108 = lean::box(0);
}
if (lean::is_scalar(x_108)) {
 x_109 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_109 = x_108;
}
lean::cnstr_set(x_109, 0, x_107);
return x_109;
}
else
{
obj* x_110; obj* x_111; obj* x_112; obj* x_113; 
x_110 = lean::cnstr_get(x_106, 0);
lean::inc(x_110);
lean::dec(x_106);
x_111 = lean::cnstr_get(x_110, 0);
lean::inc(x_111);
x_112 = lean::cnstr_get(x_110, 1);
lean::inc(x_112);
lean::dec(x_110);
x_113 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__9(x_1, x_103, x_3, x_4, x_112);
if (lean::obj_tag(x_113) == 0)
{
obj* x_114; obj* x_115; obj* x_116; 
lean::dec(x_111);
x_114 = lean::cnstr_get(x_113, 0);
lean::inc(x_114);
if (lean::is_exclusive(x_113)) {
 lean::cnstr_release(x_113, 0);
 x_115 = x_113;
} else {
 lean::dec_ref(x_113);
 x_115 = lean::box(0);
}
if (lean::is_scalar(x_115)) {
 x_116 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_116 = x_115;
}
lean::cnstr_set(x_116, 0, x_114);
return x_116;
}
else
{
obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; 
x_117 = lean::cnstr_get(x_113, 0);
lean::inc(x_117);
if (lean::is_exclusive(x_113)) {
 lean::cnstr_release(x_113, 0);
 x_118 = x_113;
} else {
 lean::dec_ref(x_113);
 x_118 = lean::box(0);
}
x_119 = lean::cnstr_get(x_117, 0);
lean::inc(x_119);
x_120 = lean::cnstr_get(x_117, 1);
lean::inc(x_120);
if (lean::is_exclusive(x_117)) {
 lean::cnstr_release(x_117, 0);
 lean::cnstr_release(x_117, 1);
 x_121 = x_117;
} else {
 lean::dec_ref(x_117);
 x_121 = lean::box(0);
}
x_122 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_122, 0, x_111);
lean::cnstr_set(x_122, 1, x_119);
if (lean::is_scalar(x_121)) {
 x_123 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_123 = x_121;
}
lean::cnstr_set(x_123, 0, x_122);
lean::cnstr_set(x_123, 1, x_120);
if (lean::is_scalar(x_118)) {
 x_124 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_124 = x_118;
}
lean::cnstr_set(x_124, 0, x_123);
return x_124;
}
}
}
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__10(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_6; obj* x_7; obj* x_8; 
lean::dec(x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
else
{
obj* x_9; obj* x_10; 
x_9 = lean::cnstr_get(x_2, 0);
lean::inc(x_9);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
if (lean::obj_tag(x_10) == 0)
{
uint8 x_11; 
lean::dec(x_10);
x_11 = !lean::is_exclusive(x_2);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_12 = lean::cnstr_get(x_2, 1);
x_13 = lean::cnstr_get(x_2, 0);
lean::dec(x_13);
lean::inc(x_1);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_1);
x_15 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_16 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_14, x_15, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_14);
if (lean::obj_tag(x_16) == 0)
{
uint8 x_17; 
lean::free_heap_obj(x_2);
lean::dec(x_12);
lean::dec(x_1);
x_17 = !lean::is_exclusive(x_16);
if (x_17 == 0)
{
return x_16;
}
else
{
obj* x_18; obj* x_19; 
x_18 = lean::cnstr_get(x_16, 0);
lean::inc(x_18);
lean::dec(x_16);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
else
{
obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_20 = lean::cnstr_get(x_16, 0);
lean::inc(x_20);
lean::dec(x_16);
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
x_22 = lean::cnstr_get(x_20, 1);
lean::inc(x_22);
lean::dec(x_20);
x_23 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__10(x_1, x_12, x_3, x_4, x_22);
if (lean::obj_tag(x_23) == 0)
{
uint8 x_24; 
lean::dec(x_21);
lean::free_heap_obj(x_2);
x_24 = !lean::is_exclusive(x_23);
if (x_24 == 0)
{
return x_23;
}
else
{
obj* x_25; obj* x_26; 
x_25 = lean::cnstr_get(x_23, 0);
lean::inc(x_25);
lean::dec(x_23);
x_26 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_26, 0, x_25);
return x_26;
}
}
else
{
uint8 x_27; 
x_27 = !lean::is_exclusive(x_23);
if (x_27 == 0)
{
obj* x_28; uint8 x_29; 
x_28 = lean::cnstr_get(x_23, 0);
x_29 = !lean::is_exclusive(x_28);
if (x_29 == 0)
{
obj* x_30; 
x_30 = lean::cnstr_get(x_28, 0);
lean::cnstr_set(x_2, 1, x_30);
lean::cnstr_set(x_2, 0, x_21);
lean::cnstr_set(x_28, 0, x_2);
return x_23;
}
else
{
obj* x_31; obj* x_32; obj* x_33; 
x_31 = lean::cnstr_get(x_28, 0);
x_32 = lean::cnstr_get(x_28, 1);
lean::inc(x_32);
lean::inc(x_31);
lean::dec(x_28);
lean::cnstr_set(x_2, 1, x_31);
lean::cnstr_set(x_2, 0, x_21);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_2);
lean::cnstr_set(x_33, 1, x_32);
lean::cnstr_set(x_23, 0, x_33);
return x_23;
}
}
else
{
obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_34 = lean::cnstr_get(x_23, 0);
lean::inc(x_34);
lean::dec(x_23);
x_35 = lean::cnstr_get(x_34, 0);
lean::inc(x_35);
x_36 = lean::cnstr_get(x_34, 1);
lean::inc(x_36);
if (lean::is_exclusive(x_34)) {
 lean::cnstr_release(x_34, 0);
 lean::cnstr_release(x_34, 1);
 x_37 = x_34;
} else {
 lean::dec_ref(x_34);
 x_37 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_35);
lean::cnstr_set(x_2, 0, x_21);
if (lean::is_scalar(x_37)) {
 x_38 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_38 = x_37;
}
lean::cnstr_set(x_38, 0, x_2);
lean::cnstr_set(x_38, 1, x_36);
x_39 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_39, 0, x_38);
return x_39;
}
}
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; obj* x_43; 
x_40 = lean::cnstr_get(x_2, 1);
lean::inc(x_40);
lean::dec(x_2);
lean::inc(x_1);
x_41 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_41, 0, x_1);
x_42 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_43 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_41, x_42, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_41);
if (lean::obj_tag(x_43) == 0)
{
obj* x_44; obj* x_45; obj* x_46; 
lean::dec(x_40);
lean::dec(x_1);
x_44 = lean::cnstr_get(x_43, 0);
lean::inc(x_44);
if (lean::is_exclusive(x_43)) {
 lean::cnstr_release(x_43, 0);
 x_45 = x_43;
} else {
 lean::dec_ref(x_43);
 x_45 = lean::box(0);
}
if (lean::is_scalar(x_45)) {
 x_46 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_46 = x_45;
}
lean::cnstr_set(x_46, 0, x_44);
return x_46;
}
else
{
obj* x_47; obj* x_48; obj* x_49; obj* x_50; 
x_47 = lean::cnstr_get(x_43, 0);
lean::inc(x_47);
lean::dec(x_43);
x_48 = lean::cnstr_get(x_47, 0);
lean::inc(x_48);
x_49 = lean::cnstr_get(x_47, 1);
lean::inc(x_49);
lean::dec(x_47);
x_50 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__10(x_1, x_40, x_3, x_4, x_49);
if (lean::obj_tag(x_50) == 0)
{
obj* x_51; obj* x_52; obj* x_53; 
lean::dec(x_48);
x_51 = lean::cnstr_get(x_50, 0);
lean::inc(x_51);
if (lean::is_exclusive(x_50)) {
 lean::cnstr_release(x_50, 0);
 x_52 = x_50;
} else {
 lean::dec_ref(x_50);
 x_52 = lean::box(0);
}
if (lean::is_scalar(x_52)) {
 x_53 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_53 = x_52;
}
lean::cnstr_set(x_53, 0, x_51);
return x_53;
}
else
{
obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; 
x_54 = lean::cnstr_get(x_50, 0);
lean::inc(x_54);
if (lean::is_exclusive(x_50)) {
 lean::cnstr_release(x_50, 0);
 x_55 = x_50;
} else {
 lean::dec_ref(x_50);
 x_55 = lean::box(0);
}
x_56 = lean::cnstr_get(x_54, 0);
lean::inc(x_56);
x_57 = lean::cnstr_get(x_54, 1);
lean::inc(x_57);
if (lean::is_exclusive(x_54)) {
 lean::cnstr_release(x_54, 0);
 lean::cnstr_release(x_54, 1);
 x_58 = x_54;
} else {
 lean::dec_ref(x_54);
 x_58 = lean::box(0);
}
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_48);
lean::cnstr_set(x_59, 1, x_56);
if (lean::is_scalar(x_58)) {
 x_60 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_60 = x_58;
}
lean::cnstr_set(x_60, 0, x_59);
lean::cnstr_set(x_60, 1, x_57);
if (lean::is_scalar(x_55)) {
 x_61 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_61 = x_55;
}
lean::cnstr_set(x_61, 0, x_60);
return x_61;
}
}
}
}
else
{
obj* x_62; obj* x_63; 
x_62 = lean::cnstr_get(x_10, 0);
lean::inc(x_62);
lean::dec(x_10);
x_63 = lean::cnstr_get(x_62, 1);
lean::inc(x_63);
lean::dec(x_62);
if (lean::obj_tag(x_63) == 0)
{
uint8 x_64; 
x_64 = !lean::is_exclusive(x_2);
if (x_64 == 0)
{
obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; 
x_65 = lean::cnstr_get(x_2, 1);
x_66 = lean::cnstr_get(x_2, 0);
lean::dec(x_66);
lean::inc(x_1);
x_67 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_67, 0, x_1);
x_68 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_69 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_67, x_68, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_67);
if (lean::obj_tag(x_69) == 0)
{
uint8 x_70; 
lean::free_heap_obj(x_2);
lean::dec(x_65);
lean::dec(x_1);
x_70 = !lean::is_exclusive(x_69);
if (x_70 == 0)
{
return x_69;
}
else
{
obj* x_71; obj* x_72; 
x_71 = lean::cnstr_get(x_69, 0);
lean::inc(x_71);
lean::dec(x_69);
x_72 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_72, 0, x_71);
return x_72;
}
}
else
{
obj* x_73; obj* x_74; obj* x_75; obj* x_76; 
x_73 = lean::cnstr_get(x_69, 0);
lean::inc(x_73);
lean::dec(x_69);
x_74 = lean::cnstr_get(x_73, 0);
lean::inc(x_74);
x_75 = lean::cnstr_get(x_73, 1);
lean::inc(x_75);
lean::dec(x_73);
x_76 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__10(x_1, x_65, x_3, x_4, x_75);
if (lean::obj_tag(x_76) == 0)
{
uint8 x_77; 
lean::dec(x_74);
lean::free_heap_obj(x_2);
x_77 = !lean::is_exclusive(x_76);
if (x_77 == 0)
{
return x_76;
}
else
{
obj* x_78; obj* x_79; 
x_78 = lean::cnstr_get(x_76, 0);
lean::inc(x_78);
lean::dec(x_76);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
else
{
uint8 x_80; 
x_80 = !lean::is_exclusive(x_76);
if (x_80 == 0)
{
obj* x_81; uint8 x_82; 
x_81 = lean::cnstr_get(x_76, 0);
x_82 = !lean::is_exclusive(x_81);
if (x_82 == 0)
{
obj* x_83; 
x_83 = lean::cnstr_get(x_81, 0);
lean::cnstr_set(x_2, 1, x_83);
lean::cnstr_set(x_2, 0, x_74);
lean::cnstr_set(x_81, 0, x_2);
return x_76;
}
else
{
obj* x_84; obj* x_85; obj* x_86; 
x_84 = lean::cnstr_get(x_81, 0);
x_85 = lean::cnstr_get(x_81, 1);
lean::inc(x_85);
lean::inc(x_84);
lean::dec(x_81);
lean::cnstr_set(x_2, 1, x_84);
lean::cnstr_set(x_2, 0, x_74);
x_86 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_86, 0, x_2);
lean::cnstr_set(x_86, 1, x_85);
lean::cnstr_set(x_76, 0, x_86);
return x_76;
}
}
else
{
obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; 
x_87 = lean::cnstr_get(x_76, 0);
lean::inc(x_87);
lean::dec(x_76);
x_88 = lean::cnstr_get(x_87, 0);
lean::inc(x_88);
x_89 = lean::cnstr_get(x_87, 1);
lean::inc(x_89);
if (lean::is_exclusive(x_87)) {
 lean::cnstr_release(x_87, 0);
 lean::cnstr_release(x_87, 1);
 x_90 = x_87;
} else {
 lean::dec_ref(x_87);
 x_90 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_88);
lean::cnstr_set(x_2, 0, x_74);
if (lean::is_scalar(x_90)) {
 x_91 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_91 = x_90;
}
lean::cnstr_set(x_91, 0, x_2);
lean::cnstr_set(x_91, 1, x_89);
x_92 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_92, 0, x_91);
return x_92;
}
}
}
}
else
{
obj* x_93; obj* x_94; obj* x_95; obj* x_96; 
x_93 = lean::cnstr_get(x_2, 1);
lean::inc(x_93);
lean::dec(x_2);
lean::inc(x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_1);
x_95 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_96 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_94, x_95, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_94);
if (lean::obj_tag(x_96) == 0)
{
obj* x_97; obj* x_98; obj* x_99; 
lean::dec(x_93);
lean::dec(x_1);
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
if (lean::is_exclusive(x_96)) {
 lean::cnstr_release(x_96, 0);
 x_98 = x_96;
} else {
 lean::dec_ref(x_96);
 x_98 = lean::box(0);
}
if (lean::is_scalar(x_98)) {
 x_99 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_99 = x_98;
}
lean::cnstr_set(x_99, 0, x_97);
return x_99;
}
else
{
obj* x_100; obj* x_101; obj* x_102; obj* x_103; 
x_100 = lean::cnstr_get(x_96, 0);
lean::inc(x_100);
lean::dec(x_96);
x_101 = lean::cnstr_get(x_100, 0);
lean::inc(x_101);
x_102 = lean::cnstr_get(x_100, 1);
lean::inc(x_102);
lean::dec(x_100);
x_103 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__10(x_1, x_93, x_3, x_4, x_102);
if (lean::obj_tag(x_103) == 0)
{
obj* x_104; obj* x_105; obj* x_106; 
lean::dec(x_101);
x_104 = lean::cnstr_get(x_103, 0);
lean::inc(x_104);
if (lean::is_exclusive(x_103)) {
 lean::cnstr_release(x_103, 0);
 x_105 = x_103;
} else {
 lean::dec_ref(x_103);
 x_105 = lean::box(0);
}
if (lean::is_scalar(x_105)) {
 x_106 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_106 = x_105;
}
lean::cnstr_set(x_106, 0, x_104);
return x_106;
}
else
{
obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; 
x_107 = lean::cnstr_get(x_103, 0);
lean::inc(x_107);
if (lean::is_exclusive(x_103)) {
 lean::cnstr_release(x_103, 0);
 x_108 = x_103;
} else {
 lean::dec_ref(x_103);
 x_108 = lean::box(0);
}
x_109 = lean::cnstr_get(x_107, 0);
lean::inc(x_109);
x_110 = lean::cnstr_get(x_107, 1);
lean::inc(x_110);
if (lean::is_exclusive(x_107)) {
 lean::cnstr_release(x_107, 0);
 lean::cnstr_release(x_107, 1);
 x_111 = x_107;
} else {
 lean::dec_ref(x_107);
 x_111 = lean::box(0);
}
x_112 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_112, 0, x_101);
lean::cnstr_set(x_112, 1, x_109);
if (lean::is_scalar(x_111)) {
 x_113 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_113 = x_111;
}
lean::cnstr_set(x_113, 0, x_112);
lean::cnstr_set(x_113, 1, x_110);
if (lean::is_scalar(x_108)) {
 x_114 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_114 = x_108;
}
lean::cnstr_set(x_114, 0, x_113);
return x_114;
}
}
}
}
else
{
uint8 x_115; 
x_115 = !lean::is_exclusive(x_2);
if (x_115 == 0)
{
obj* x_116; obj* x_117; obj* x_118; obj* x_119; 
x_116 = lean::cnstr_get(x_2, 1);
x_117 = lean::cnstr_get(x_2, 0);
lean::dec(x_117);
x_118 = lean::cnstr_get(x_63, 0);
lean::inc(x_118);
lean::dec(x_63);
x_119 = l_Lean_Elaborator_toPexpr___main(x_118, x_3, x_4, x_5);
if (lean::obj_tag(x_119) == 0)
{
uint8 x_120; 
lean::free_heap_obj(x_2);
lean::dec(x_116);
lean::dec(x_1);
x_120 = !lean::is_exclusive(x_119);
if (x_120 == 0)
{
return x_119;
}
else
{
obj* x_121; obj* x_122; 
x_121 = lean::cnstr_get(x_119, 0);
lean::inc(x_121);
lean::dec(x_119);
x_122 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_122, 0, x_121);
return x_122;
}
}
else
{
obj* x_123; obj* x_124; obj* x_125; obj* x_126; 
x_123 = lean::cnstr_get(x_119, 0);
lean::inc(x_123);
lean::dec(x_119);
x_124 = lean::cnstr_get(x_123, 0);
lean::inc(x_124);
x_125 = lean::cnstr_get(x_123, 1);
lean::inc(x_125);
lean::dec(x_123);
x_126 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__10(x_1, x_116, x_3, x_4, x_125);
if (lean::obj_tag(x_126) == 0)
{
uint8 x_127; 
lean::dec(x_124);
lean::free_heap_obj(x_2);
x_127 = !lean::is_exclusive(x_126);
if (x_127 == 0)
{
return x_126;
}
else
{
obj* x_128; obj* x_129; 
x_128 = lean::cnstr_get(x_126, 0);
lean::inc(x_128);
lean::dec(x_126);
x_129 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_129, 0, x_128);
return x_129;
}
}
else
{
uint8 x_130; 
x_130 = !lean::is_exclusive(x_126);
if (x_130 == 0)
{
obj* x_131; uint8 x_132; 
x_131 = lean::cnstr_get(x_126, 0);
x_132 = !lean::is_exclusive(x_131);
if (x_132 == 0)
{
obj* x_133; 
x_133 = lean::cnstr_get(x_131, 0);
lean::cnstr_set(x_2, 1, x_133);
lean::cnstr_set(x_2, 0, x_124);
lean::cnstr_set(x_131, 0, x_2);
return x_126;
}
else
{
obj* x_134; obj* x_135; obj* x_136; 
x_134 = lean::cnstr_get(x_131, 0);
x_135 = lean::cnstr_get(x_131, 1);
lean::inc(x_135);
lean::inc(x_134);
lean::dec(x_131);
lean::cnstr_set(x_2, 1, x_134);
lean::cnstr_set(x_2, 0, x_124);
x_136 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_136, 0, x_2);
lean::cnstr_set(x_136, 1, x_135);
lean::cnstr_set(x_126, 0, x_136);
return x_126;
}
}
else
{
obj* x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_141; obj* x_142; 
x_137 = lean::cnstr_get(x_126, 0);
lean::inc(x_137);
lean::dec(x_126);
x_138 = lean::cnstr_get(x_137, 0);
lean::inc(x_138);
x_139 = lean::cnstr_get(x_137, 1);
lean::inc(x_139);
if (lean::is_exclusive(x_137)) {
 lean::cnstr_release(x_137, 0);
 lean::cnstr_release(x_137, 1);
 x_140 = x_137;
} else {
 lean::dec_ref(x_137);
 x_140 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_138);
lean::cnstr_set(x_2, 0, x_124);
if (lean::is_scalar(x_140)) {
 x_141 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_141 = x_140;
}
lean::cnstr_set(x_141, 0, x_2);
lean::cnstr_set(x_141, 1, x_139);
x_142 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_142, 0, x_141);
return x_142;
}
}
}
}
else
{
obj* x_143; obj* x_144; obj* x_145; 
x_143 = lean::cnstr_get(x_2, 1);
lean::inc(x_143);
lean::dec(x_2);
x_144 = lean::cnstr_get(x_63, 0);
lean::inc(x_144);
lean::dec(x_63);
x_145 = l_Lean_Elaborator_toPexpr___main(x_144, x_3, x_4, x_5);
if (lean::obj_tag(x_145) == 0)
{
obj* x_146; obj* x_147; obj* x_148; 
lean::dec(x_143);
lean::dec(x_1);
x_146 = lean::cnstr_get(x_145, 0);
lean::inc(x_146);
if (lean::is_exclusive(x_145)) {
 lean::cnstr_release(x_145, 0);
 x_147 = x_145;
} else {
 lean::dec_ref(x_145);
 x_147 = lean::box(0);
}
if (lean::is_scalar(x_147)) {
 x_148 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_148 = x_147;
}
lean::cnstr_set(x_148, 0, x_146);
return x_148;
}
else
{
obj* x_149; obj* x_150; obj* x_151; obj* x_152; 
x_149 = lean::cnstr_get(x_145, 0);
lean::inc(x_149);
lean::dec(x_145);
x_150 = lean::cnstr_get(x_149, 0);
lean::inc(x_150);
x_151 = lean::cnstr_get(x_149, 1);
lean::inc(x_151);
lean::dec(x_149);
x_152 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__10(x_1, x_143, x_3, x_4, x_151);
if (lean::obj_tag(x_152) == 0)
{
obj* x_153; obj* x_154; obj* x_155; 
lean::dec(x_150);
x_153 = lean::cnstr_get(x_152, 0);
lean::inc(x_153);
if (lean::is_exclusive(x_152)) {
 lean::cnstr_release(x_152, 0);
 x_154 = x_152;
} else {
 lean::dec_ref(x_152);
 x_154 = lean::box(0);
}
if (lean::is_scalar(x_154)) {
 x_155 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_155 = x_154;
}
lean::cnstr_set(x_155, 0, x_153);
return x_155;
}
else
{
obj* x_156; obj* x_157; obj* x_158; obj* x_159; obj* x_160; obj* x_161; obj* x_162; obj* x_163; 
x_156 = lean::cnstr_get(x_152, 0);
lean::inc(x_156);
if (lean::is_exclusive(x_152)) {
 lean::cnstr_release(x_152, 0);
 x_157 = x_152;
} else {
 lean::dec_ref(x_152);
 x_157 = lean::box(0);
}
x_158 = lean::cnstr_get(x_156, 0);
lean::inc(x_158);
x_159 = lean::cnstr_get(x_156, 1);
lean::inc(x_159);
if (lean::is_exclusive(x_156)) {
 lean::cnstr_release(x_156, 0);
 lean::cnstr_release(x_156, 1);
 x_160 = x_156;
} else {
 lean::dec_ref(x_156);
 x_160 = lean::box(0);
}
x_161 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_161, 0, x_150);
lean::cnstr_set(x_161, 1, x_158);
if (lean::is_scalar(x_160)) {
 x_162 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_162 = x_160;
}
lean::cnstr_set(x_162, 0, x_161);
lean::cnstr_set(x_162, 1, x_159);
if (lean::is_scalar(x_157)) {
 x_163 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_163 = x_157;
}
lean::cnstr_set(x_163, 0, x_162);
return x_163;
}
}
}
}
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__11(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_6; obj* x_7; obj* x_8; 
lean::dec(x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
else
{
obj* x_9; obj* x_10; 
x_9 = lean::cnstr_get(x_2, 0);
lean::inc(x_9);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
if (lean::obj_tag(x_10) == 0)
{
uint8 x_11; 
x_11 = !lean::is_exclusive(x_2);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_12 = lean::cnstr_get(x_2, 1);
x_13 = lean::cnstr_get(x_2, 0);
lean::dec(x_13);
x_14 = lean::cnstr_get(x_10, 0);
lean::inc(x_14);
lean::dec(x_10);
x_15 = lean::cnstr_get(x_14, 2);
lean::inc(x_15);
x_16 = l_Lean_Elaborator_toPexpr___main(x_15, x_3, x_4, x_5);
if (lean::obj_tag(x_16) == 0)
{
uint8 x_17; 
lean::dec(x_14);
lean::free_heap_obj(x_2);
lean::dec(x_12);
lean::dec(x_1);
x_17 = !lean::is_exclusive(x_16);
if (x_17 == 0)
{
return x_16;
}
else
{
obj* x_18; obj* x_19; 
x_18 = lean::cnstr_get(x_16, 0);
lean::inc(x_18);
lean::dec(x_16);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
else
{
obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_20 = lean::cnstr_get(x_16, 0);
lean::inc(x_20);
lean::dec(x_16);
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
x_22 = lean::cnstr_get(x_20, 1);
lean::inc(x_22);
lean::dec(x_20);
x_23 = lean::cnstr_get(x_14, 0);
lean::inc(x_23);
lean::dec(x_14);
x_24 = l_Lean_Elaborator_mangleIdent(x_23);
x_25 = lean::box(0);
x_26 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__1;
x_27 = l_Lean_KVMap_setName(x_25, x_26, x_24);
x_28 = lean_expr_mk_mdata(x_27, x_21);
x_29 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__11(x_1, x_12, x_3, x_4, x_22);
if (lean::obj_tag(x_29) == 0)
{
uint8 x_30; 
lean::dec(x_28);
lean::free_heap_obj(x_2);
x_30 = !lean::is_exclusive(x_29);
if (x_30 == 0)
{
return x_29;
}
else
{
obj* x_31; obj* x_32; 
x_31 = lean::cnstr_get(x_29, 0);
lean::inc(x_31);
lean::dec(x_29);
x_32 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_32, 0, x_31);
return x_32;
}
}
else
{
uint8 x_33; 
x_33 = !lean::is_exclusive(x_29);
if (x_33 == 0)
{
obj* x_34; uint8 x_35; 
x_34 = lean::cnstr_get(x_29, 0);
x_35 = !lean::is_exclusive(x_34);
if (x_35 == 0)
{
obj* x_36; 
x_36 = lean::cnstr_get(x_34, 0);
lean::cnstr_set(x_2, 1, x_36);
lean::cnstr_set(x_2, 0, x_28);
lean::cnstr_set(x_34, 0, x_2);
return x_29;
}
else
{
obj* x_37; obj* x_38; obj* x_39; 
x_37 = lean::cnstr_get(x_34, 0);
x_38 = lean::cnstr_get(x_34, 1);
lean::inc(x_38);
lean::inc(x_37);
lean::dec(x_34);
lean::cnstr_set(x_2, 1, x_37);
lean::cnstr_set(x_2, 0, x_28);
x_39 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_39, 0, x_2);
lean::cnstr_set(x_39, 1, x_38);
lean::cnstr_set(x_29, 0, x_39);
return x_29;
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; 
x_40 = lean::cnstr_get(x_29, 0);
lean::inc(x_40);
lean::dec(x_29);
x_41 = lean::cnstr_get(x_40, 0);
lean::inc(x_41);
x_42 = lean::cnstr_get(x_40, 1);
lean::inc(x_42);
if (lean::is_exclusive(x_40)) {
 lean::cnstr_release(x_40, 0);
 lean::cnstr_release(x_40, 1);
 x_43 = x_40;
} else {
 lean::dec_ref(x_40);
 x_43 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_41);
lean::cnstr_set(x_2, 0, x_28);
if (lean::is_scalar(x_43)) {
 x_44 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_44 = x_43;
}
lean::cnstr_set(x_44, 0, x_2);
lean::cnstr_set(x_44, 1, x_42);
x_45 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_45, 0, x_44);
return x_45;
}
}
}
}
else
{
obj* x_46; obj* x_47; obj* x_48; obj* x_49; 
x_46 = lean::cnstr_get(x_2, 1);
lean::inc(x_46);
lean::dec(x_2);
x_47 = lean::cnstr_get(x_10, 0);
lean::inc(x_47);
lean::dec(x_10);
x_48 = lean::cnstr_get(x_47, 2);
lean::inc(x_48);
x_49 = l_Lean_Elaborator_toPexpr___main(x_48, x_3, x_4, x_5);
if (lean::obj_tag(x_49) == 0)
{
obj* x_50; obj* x_51; obj* x_52; 
lean::dec(x_47);
lean::dec(x_46);
lean::dec(x_1);
x_50 = lean::cnstr_get(x_49, 0);
lean::inc(x_50);
if (lean::is_exclusive(x_49)) {
 lean::cnstr_release(x_49, 0);
 x_51 = x_49;
} else {
 lean::dec_ref(x_49);
 x_51 = lean::box(0);
}
if (lean::is_scalar(x_51)) {
 x_52 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_52 = x_51;
}
lean::cnstr_set(x_52, 0, x_50);
return x_52;
}
else
{
obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; 
x_53 = lean::cnstr_get(x_49, 0);
lean::inc(x_53);
lean::dec(x_49);
x_54 = lean::cnstr_get(x_53, 0);
lean::inc(x_54);
x_55 = lean::cnstr_get(x_53, 1);
lean::inc(x_55);
lean::dec(x_53);
x_56 = lean::cnstr_get(x_47, 0);
lean::inc(x_56);
lean::dec(x_47);
x_57 = l_Lean_Elaborator_mangleIdent(x_56);
x_58 = lean::box(0);
x_59 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__1;
x_60 = l_Lean_KVMap_setName(x_58, x_59, x_57);
x_61 = lean_expr_mk_mdata(x_60, x_54);
x_62 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__11(x_1, x_46, x_3, x_4, x_55);
if (lean::obj_tag(x_62) == 0)
{
obj* x_63; obj* x_64; obj* x_65; 
lean::dec(x_61);
x_63 = lean::cnstr_get(x_62, 0);
lean::inc(x_63);
if (lean::is_exclusive(x_62)) {
 lean::cnstr_release(x_62, 0);
 x_64 = x_62;
} else {
 lean::dec_ref(x_62);
 x_64 = lean::box(0);
}
if (lean::is_scalar(x_64)) {
 x_65 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_65 = x_64;
}
lean::cnstr_set(x_65, 0, x_63);
return x_65;
}
else
{
obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; 
x_66 = lean::cnstr_get(x_62, 0);
lean::inc(x_66);
if (lean::is_exclusive(x_62)) {
 lean::cnstr_release(x_62, 0);
 x_67 = x_62;
} else {
 lean::dec_ref(x_62);
 x_67 = lean::box(0);
}
x_68 = lean::cnstr_get(x_66, 0);
lean::inc(x_68);
x_69 = lean::cnstr_get(x_66, 1);
lean::inc(x_69);
if (lean::is_exclusive(x_66)) {
 lean::cnstr_release(x_66, 0);
 lean::cnstr_release(x_66, 1);
 x_70 = x_66;
} else {
 lean::dec_ref(x_66);
 x_70 = lean::box(0);
}
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_61);
lean::cnstr_set(x_71, 1, x_68);
if (lean::is_scalar(x_70)) {
 x_72 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_72 = x_70;
}
lean::cnstr_set(x_72, 0, x_71);
lean::cnstr_set(x_72, 1, x_69);
if (lean::is_scalar(x_67)) {
 x_73 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_73 = x_67;
}
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
}
}
}
else
{
uint8 x_74; 
lean::dec(x_10);
x_74 = !lean::is_exclusive(x_2);
if (x_74 == 0)
{
obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; 
x_75 = lean::cnstr_get(x_2, 1);
x_76 = lean::cnstr_get(x_2, 0);
lean::dec(x_76);
lean::inc(x_1);
x_77 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_77, 0, x_1);
x_78 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_79 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_77, x_78, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_77);
if (lean::obj_tag(x_79) == 0)
{
uint8 x_80; 
lean::free_heap_obj(x_2);
lean::dec(x_75);
lean::dec(x_1);
x_80 = !lean::is_exclusive(x_79);
if (x_80 == 0)
{
return x_79;
}
else
{
obj* x_81; obj* x_82; 
x_81 = lean::cnstr_get(x_79, 0);
lean::inc(x_81);
lean::dec(x_79);
x_82 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_82, 0, x_81);
return x_82;
}
}
else
{
obj* x_83; obj* x_84; obj* x_85; obj* x_86; 
x_83 = lean::cnstr_get(x_79, 0);
lean::inc(x_83);
lean::dec(x_79);
x_84 = lean::cnstr_get(x_83, 0);
lean::inc(x_84);
x_85 = lean::cnstr_get(x_83, 1);
lean::inc(x_85);
lean::dec(x_83);
x_86 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__11(x_1, x_75, x_3, x_4, x_85);
if (lean::obj_tag(x_86) == 0)
{
uint8 x_87; 
lean::dec(x_84);
lean::free_heap_obj(x_2);
x_87 = !lean::is_exclusive(x_86);
if (x_87 == 0)
{
return x_86;
}
else
{
obj* x_88; obj* x_89; 
x_88 = lean::cnstr_get(x_86, 0);
lean::inc(x_88);
lean::dec(x_86);
x_89 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_89, 0, x_88);
return x_89;
}
}
else
{
uint8 x_90; 
x_90 = !lean::is_exclusive(x_86);
if (x_90 == 0)
{
obj* x_91; uint8 x_92; 
x_91 = lean::cnstr_get(x_86, 0);
x_92 = !lean::is_exclusive(x_91);
if (x_92 == 0)
{
obj* x_93; 
x_93 = lean::cnstr_get(x_91, 0);
lean::cnstr_set(x_2, 1, x_93);
lean::cnstr_set(x_2, 0, x_84);
lean::cnstr_set(x_91, 0, x_2);
return x_86;
}
else
{
obj* x_94; obj* x_95; obj* x_96; 
x_94 = lean::cnstr_get(x_91, 0);
x_95 = lean::cnstr_get(x_91, 1);
lean::inc(x_95);
lean::inc(x_94);
lean::dec(x_91);
lean::cnstr_set(x_2, 1, x_94);
lean::cnstr_set(x_2, 0, x_84);
x_96 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_96, 0, x_2);
lean::cnstr_set(x_96, 1, x_95);
lean::cnstr_set(x_86, 0, x_96);
return x_86;
}
}
else
{
obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; 
x_97 = lean::cnstr_get(x_86, 0);
lean::inc(x_97);
lean::dec(x_86);
x_98 = lean::cnstr_get(x_97, 0);
lean::inc(x_98);
x_99 = lean::cnstr_get(x_97, 1);
lean::inc(x_99);
if (lean::is_exclusive(x_97)) {
 lean::cnstr_release(x_97, 0);
 lean::cnstr_release(x_97, 1);
 x_100 = x_97;
} else {
 lean::dec_ref(x_97);
 x_100 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_98);
lean::cnstr_set(x_2, 0, x_84);
if (lean::is_scalar(x_100)) {
 x_101 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_101 = x_100;
}
lean::cnstr_set(x_101, 0, x_2);
lean::cnstr_set(x_101, 1, x_99);
x_102 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_102, 0, x_101);
return x_102;
}
}
}
}
else
{
obj* x_103; obj* x_104; obj* x_105; obj* x_106; 
x_103 = lean::cnstr_get(x_2, 1);
lean::inc(x_103);
lean::dec(x_2);
lean::inc(x_1);
x_104 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_104, 0, x_1);
x_105 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_106 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_104, x_105, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_104);
if (lean::obj_tag(x_106) == 0)
{
obj* x_107; obj* x_108; obj* x_109; 
lean::dec(x_103);
lean::dec(x_1);
x_107 = lean::cnstr_get(x_106, 0);
lean::inc(x_107);
if (lean::is_exclusive(x_106)) {
 lean::cnstr_release(x_106, 0);
 x_108 = x_106;
} else {
 lean::dec_ref(x_106);
 x_108 = lean::box(0);
}
if (lean::is_scalar(x_108)) {
 x_109 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_109 = x_108;
}
lean::cnstr_set(x_109, 0, x_107);
return x_109;
}
else
{
obj* x_110; obj* x_111; obj* x_112; obj* x_113; 
x_110 = lean::cnstr_get(x_106, 0);
lean::inc(x_110);
lean::dec(x_106);
x_111 = lean::cnstr_get(x_110, 0);
lean::inc(x_111);
x_112 = lean::cnstr_get(x_110, 1);
lean::inc(x_112);
lean::dec(x_110);
x_113 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__11(x_1, x_103, x_3, x_4, x_112);
if (lean::obj_tag(x_113) == 0)
{
obj* x_114; obj* x_115; obj* x_116; 
lean::dec(x_111);
x_114 = lean::cnstr_get(x_113, 0);
lean::inc(x_114);
if (lean::is_exclusive(x_113)) {
 lean::cnstr_release(x_113, 0);
 x_115 = x_113;
} else {
 lean::dec_ref(x_113);
 x_115 = lean::box(0);
}
if (lean::is_scalar(x_115)) {
 x_116 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_116 = x_115;
}
lean::cnstr_set(x_116, 0, x_114);
return x_116;
}
else
{
obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; 
x_117 = lean::cnstr_get(x_113, 0);
lean::inc(x_117);
if (lean::is_exclusive(x_113)) {
 lean::cnstr_release(x_113, 0);
 x_118 = x_113;
} else {
 lean::dec_ref(x_113);
 x_118 = lean::box(0);
}
x_119 = lean::cnstr_get(x_117, 0);
lean::inc(x_119);
x_120 = lean::cnstr_get(x_117, 1);
lean::inc(x_120);
if (lean::is_exclusive(x_117)) {
 lean::cnstr_release(x_117, 0);
 lean::cnstr_release(x_117, 1);
 x_121 = x_117;
} else {
 lean::dec_ref(x_117);
 x_121 = lean::box(0);
}
x_122 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_122, 0, x_111);
lean::cnstr_set(x_122, 1, x_119);
if (lean::is_scalar(x_121)) {
 x_123 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_123 = x_121;
}
lean::cnstr_set(x_123, 0, x_122);
lean::cnstr_set(x_123, 1, x_120);
if (lean::is_scalar(x_118)) {
 x_124 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_124 = x_118;
}
lean::cnstr_set(x_124, 0, x_123);
return x_124;
}
}
}
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__12(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_6; obj* x_7; obj* x_8; 
lean::dec(x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
else
{
obj* x_9; obj* x_10; 
x_9 = lean::cnstr_get(x_2, 0);
lean::inc(x_9);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
if (lean::obj_tag(x_10) == 0)
{
uint8 x_11; 
lean::dec(x_10);
x_11 = !lean::is_exclusive(x_2);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_12 = lean::cnstr_get(x_2, 1);
x_13 = lean::cnstr_get(x_2, 0);
lean::dec(x_13);
lean::inc(x_1);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_1);
x_15 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_16 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_14, x_15, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_14);
if (lean::obj_tag(x_16) == 0)
{
uint8 x_17; 
lean::free_heap_obj(x_2);
lean::dec(x_12);
lean::dec(x_1);
x_17 = !lean::is_exclusive(x_16);
if (x_17 == 0)
{
return x_16;
}
else
{
obj* x_18; obj* x_19; 
x_18 = lean::cnstr_get(x_16, 0);
lean::inc(x_18);
lean::dec(x_16);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
else
{
obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_20 = lean::cnstr_get(x_16, 0);
lean::inc(x_20);
lean::dec(x_16);
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
x_22 = lean::cnstr_get(x_20, 1);
lean::inc(x_22);
lean::dec(x_20);
x_23 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__12(x_1, x_12, x_3, x_4, x_22);
if (lean::obj_tag(x_23) == 0)
{
uint8 x_24; 
lean::dec(x_21);
lean::free_heap_obj(x_2);
x_24 = !lean::is_exclusive(x_23);
if (x_24 == 0)
{
return x_23;
}
else
{
obj* x_25; obj* x_26; 
x_25 = lean::cnstr_get(x_23, 0);
lean::inc(x_25);
lean::dec(x_23);
x_26 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_26, 0, x_25);
return x_26;
}
}
else
{
uint8 x_27; 
x_27 = !lean::is_exclusive(x_23);
if (x_27 == 0)
{
obj* x_28; uint8 x_29; 
x_28 = lean::cnstr_get(x_23, 0);
x_29 = !lean::is_exclusive(x_28);
if (x_29 == 0)
{
obj* x_30; 
x_30 = lean::cnstr_get(x_28, 0);
lean::cnstr_set(x_2, 1, x_30);
lean::cnstr_set(x_2, 0, x_21);
lean::cnstr_set(x_28, 0, x_2);
return x_23;
}
else
{
obj* x_31; obj* x_32; obj* x_33; 
x_31 = lean::cnstr_get(x_28, 0);
x_32 = lean::cnstr_get(x_28, 1);
lean::inc(x_32);
lean::inc(x_31);
lean::dec(x_28);
lean::cnstr_set(x_2, 1, x_31);
lean::cnstr_set(x_2, 0, x_21);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_2);
lean::cnstr_set(x_33, 1, x_32);
lean::cnstr_set(x_23, 0, x_33);
return x_23;
}
}
else
{
obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_34 = lean::cnstr_get(x_23, 0);
lean::inc(x_34);
lean::dec(x_23);
x_35 = lean::cnstr_get(x_34, 0);
lean::inc(x_35);
x_36 = lean::cnstr_get(x_34, 1);
lean::inc(x_36);
if (lean::is_exclusive(x_34)) {
 lean::cnstr_release(x_34, 0);
 lean::cnstr_release(x_34, 1);
 x_37 = x_34;
} else {
 lean::dec_ref(x_34);
 x_37 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_35);
lean::cnstr_set(x_2, 0, x_21);
if (lean::is_scalar(x_37)) {
 x_38 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_38 = x_37;
}
lean::cnstr_set(x_38, 0, x_2);
lean::cnstr_set(x_38, 1, x_36);
x_39 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_39, 0, x_38);
return x_39;
}
}
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; obj* x_43; 
x_40 = lean::cnstr_get(x_2, 1);
lean::inc(x_40);
lean::dec(x_2);
lean::inc(x_1);
x_41 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_41, 0, x_1);
x_42 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_43 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_41, x_42, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_41);
if (lean::obj_tag(x_43) == 0)
{
obj* x_44; obj* x_45; obj* x_46; 
lean::dec(x_40);
lean::dec(x_1);
x_44 = lean::cnstr_get(x_43, 0);
lean::inc(x_44);
if (lean::is_exclusive(x_43)) {
 lean::cnstr_release(x_43, 0);
 x_45 = x_43;
} else {
 lean::dec_ref(x_43);
 x_45 = lean::box(0);
}
if (lean::is_scalar(x_45)) {
 x_46 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_46 = x_45;
}
lean::cnstr_set(x_46, 0, x_44);
return x_46;
}
else
{
obj* x_47; obj* x_48; obj* x_49; obj* x_50; 
x_47 = lean::cnstr_get(x_43, 0);
lean::inc(x_47);
lean::dec(x_43);
x_48 = lean::cnstr_get(x_47, 0);
lean::inc(x_48);
x_49 = lean::cnstr_get(x_47, 1);
lean::inc(x_49);
lean::dec(x_47);
x_50 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__12(x_1, x_40, x_3, x_4, x_49);
if (lean::obj_tag(x_50) == 0)
{
obj* x_51; obj* x_52; obj* x_53; 
lean::dec(x_48);
x_51 = lean::cnstr_get(x_50, 0);
lean::inc(x_51);
if (lean::is_exclusive(x_50)) {
 lean::cnstr_release(x_50, 0);
 x_52 = x_50;
} else {
 lean::dec_ref(x_50);
 x_52 = lean::box(0);
}
if (lean::is_scalar(x_52)) {
 x_53 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_53 = x_52;
}
lean::cnstr_set(x_53, 0, x_51);
return x_53;
}
else
{
obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; 
x_54 = lean::cnstr_get(x_50, 0);
lean::inc(x_54);
if (lean::is_exclusive(x_50)) {
 lean::cnstr_release(x_50, 0);
 x_55 = x_50;
} else {
 lean::dec_ref(x_50);
 x_55 = lean::box(0);
}
x_56 = lean::cnstr_get(x_54, 0);
lean::inc(x_56);
x_57 = lean::cnstr_get(x_54, 1);
lean::inc(x_57);
if (lean::is_exclusive(x_54)) {
 lean::cnstr_release(x_54, 0);
 lean::cnstr_release(x_54, 1);
 x_58 = x_54;
} else {
 lean::dec_ref(x_54);
 x_58 = lean::box(0);
}
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_48);
lean::cnstr_set(x_59, 1, x_56);
if (lean::is_scalar(x_58)) {
 x_60 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_60 = x_58;
}
lean::cnstr_set(x_60, 0, x_59);
lean::cnstr_set(x_60, 1, x_57);
if (lean::is_scalar(x_55)) {
 x_61 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_61 = x_55;
}
lean::cnstr_set(x_61, 0, x_60);
return x_61;
}
}
}
}
else
{
obj* x_62; obj* x_63; 
x_62 = lean::cnstr_get(x_10, 0);
lean::inc(x_62);
lean::dec(x_10);
x_63 = lean::cnstr_get(x_62, 1);
lean::inc(x_63);
lean::dec(x_62);
if (lean::obj_tag(x_63) == 0)
{
uint8 x_64; 
x_64 = !lean::is_exclusive(x_2);
if (x_64 == 0)
{
obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; 
x_65 = lean::cnstr_get(x_2, 1);
x_66 = lean::cnstr_get(x_2, 0);
lean::dec(x_66);
lean::inc(x_1);
x_67 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_67, 0, x_1);
x_68 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_69 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_67, x_68, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_67);
if (lean::obj_tag(x_69) == 0)
{
uint8 x_70; 
lean::free_heap_obj(x_2);
lean::dec(x_65);
lean::dec(x_1);
x_70 = !lean::is_exclusive(x_69);
if (x_70 == 0)
{
return x_69;
}
else
{
obj* x_71; obj* x_72; 
x_71 = lean::cnstr_get(x_69, 0);
lean::inc(x_71);
lean::dec(x_69);
x_72 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_72, 0, x_71);
return x_72;
}
}
else
{
obj* x_73; obj* x_74; obj* x_75; obj* x_76; 
x_73 = lean::cnstr_get(x_69, 0);
lean::inc(x_73);
lean::dec(x_69);
x_74 = lean::cnstr_get(x_73, 0);
lean::inc(x_74);
x_75 = lean::cnstr_get(x_73, 1);
lean::inc(x_75);
lean::dec(x_73);
x_76 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__12(x_1, x_65, x_3, x_4, x_75);
if (lean::obj_tag(x_76) == 0)
{
uint8 x_77; 
lean::dec(x_74);
lean::free_heap_obj(x_2);
x_77 = !lean::is_exclusive(x_76);
if (x_77 == 0)
{
return x_76;
}
else
{
obj* x_78; obj* x_79; 
x_78 = lean::cnstr_get(x_76, 0);
lean::inc(x_78);
lean::dec(x_76);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
else
{
uint8 x_80; 
x_80 = !lean::is_exclusive(x_76);
if (x_80 == 0)
{
obj* x_81; uint8 x_82; 
x_81 = lean::cnstr_get(x_76, 0);
x_82 = !lean::is_exclusive(x_81);
if (x_82 == 0)
{
obj* x_83; 
x_83 = lean::cnstr_get(x_81, 0);
lean::cnstr_set(x_2, 1, x_83);
lean::cnstr_set(x_2, 0, x_74);
lean::cnstr_set(x_81, 0, x_2);
return x_76;
}
else
{
obj* x_84; obj* x_85; obj* x_86; 
x_84 = lean::cnstr_get(x_81, 0);
x_85 = lean::cnstr_get(x_81, 1);
lean::inc(x_85);
lean::inc(x_84);
lean::dec(x_81);
lean::cnstr_set(x_2, 1, x_84);
lean::cnstr_set(x_2, 0, x_74);
x_86 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_86, 0, x_2);
lean::cnstr_set(x_86, 1, x_85);
lean::cnstr_set(x_76, 0, x_86);
return x_76;
}
}
else
{
obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; 
x_87 = lean::cnstr_get(x_76, 0);
lean::inc(x_87);
lean::dec(x_76);
x_88 = lean::cnstr_get(x_87, 0);
lean::inc(x_88);
x_89 = lean::cnstr_get(x_87, 1);
lean::inc(x_89);
if (lean::is_exclusive(x_87)) {
 lean::cnstr_release(x_87, 0);
 lean::cnstr_release(x_87, 1);
 x_90 = x_87;
} else {
 lean::dec_ref(x_87);
 x_90 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_88);
lean::cnstr_set(x_2, 0, x_74);
if (lean::is_scalar(x_90)) {
 x_91 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_91 = x_90;
}
lean::cnstr_set(x_91, 0, x_2);
lean::cnstr_set(x_91, 1, x_89);
x_92 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_92, 0, x_91);
return x_92;
}
}
}
}
else
{
obj* x_93; obj* x_94; obj* x_95; obj* x_96; 
x_93 = lean::cnstr_get(x_2, 1);
lean::inc(x_93);
lean::dec(x_2);
lean::inc(x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_1);
x_95 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_96 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_94, x_95, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_94);
if (lean::obj_tag(x_96) == 0)
{
obj* x_97; obj* x_98; obj* x_99; 
lean::dec(x_93);
lean::dec(x_1);
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
if (lean::is_exclusive(x_96)) {
 lean::cnstr_release(x_96, 0);
 x_98 = x_96;
} else {
 lean::dec_ref(x_96);
 x_98 = lean::box(0);
}
if (lean::is_scalar(x_98)) {
 x_99 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_99 = x_98;
}
lean::cnstr_set(x_99, 0, x_97);
return x_99;
}
else
{
obj* x_100; obj* x_101; obj* x_102; obj* x_103; 
x_100 = lean::cnstr_get(x_96, 0);
lean::inc(x_100);
lean::dec(x_96);
x_101 = lean::cnstr_get(x_100, 0);
lean::inc(x_101);
x_102 = lean::cnstr_get(x_100, 1);
lean::inc(x_102);
lean::dec(x_100);
x_103 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__12(x_1, x_93, x_3, x_4, x_102);
if (lean::obj_tag(x_103) == 0)
{
obj* x_104; obj* x_105; obj* x_106; 
lean::dec(x_101);
x_104 = lean::cnstr_get(x_103, 0);
lean::inc(x_104);
if (lean::is_exclusive(x_103)) {
 lean::cnstr_release(x_103, 0);
 x_105 = x_103;
} else {
 lean::dec_ref(x_103);
 x_105 = lean::box(0);
}
if (lean::is_scalar(x_105)) {
 x_106 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_106 = x_105;
}
lean::cnstr_set(x_106, 0, x_104);
return x_106;
}
else
{
obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; 
x_107 = lean::cnstr_get(x_103, 0);
lean::inc(x_107);
if (lean::is_exclusive(x_103)) {
 lean::cnstr_release(x_103, 0);
 x_108 = x_103;
} else {
 lean::dec_ref(x_103);
 x_108 = lean::box(0);
}
x_109 = lean::cnstr_get(x_107, 0);
lean::inc(x_109);
x_110 = lean::cnstr_get(x_107, 1);
lean::inc(x_110);
if (lean::is_exclusive(x_107)) {
 lean::cnstr_release(x_107, 0);
 lean::cnstr_release(x_107, 1);
 x_111 = x_107;
} else {
 lean::dec_ref(x_107);
 x_111 = lean::box(0);
}
x_112 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_112, 0, x_101);
lean::cnstr_set(x_112, 1, x_109);
if (lean::is_scalar(x_111)) {
 x_113 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_113 = x_111;
}
lean::cnstr_set(x_113, 0, x_112);
lean::cnstr_set(x_113, 1, x_110);
if (lean::is_scalar(x_108)) {
 x_114 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_114 = x_108;
}
lean::cnstr_set(x_114, 0, x_113);
return x_114;
}
}
}
}
else
{
uint8 x_115; 
x_115 = !lean::is_exclusive(x_2);
if (x_115 == 0)
{
obj* x_116; obj* x_117; obj* x_118; obj* x_119; 
x_116 = lean::cnstr_get(x_2, 1);
x_117 = lean::cnstr_get(x_2, 0);
lean::dec(x_117);
x_118 = lean::cnstr_get(x_63, 0);
lean::inc(x_118);
lean::dec(x_63);
x_119 = l_Lean_Elaborator_toPexpr___main(x_118, x_3, x_4, x_5);
if (lean::obj_tag(x_119) == 0)
{
uint8 x_120; 
lean::free_heap_obj(x_2);
lean::dec(x_116);
lean::dec(x_1);
x_120 = !lean::is_exclusive(x_119);
if (x_120 == 0)
{
return x_119;
}
else
{
obj* x_121; obj* x_122; 
x_121 = lean::cnstr_get(x_119, 0);
lean::inc(x_121);
lean::dec(x_119);
x_122 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_122, 0, x_121);
return x_122;
}
}
else
{
obj* x_123; obj* x_124; obj* x_125; obj* x_126; 
x_123 = lean::cnstr_get(x_119, 0);
lean::inc(x_123);
lean::dec(x_119);
x_124 = lean::cnstr_get(x_123, 0);
lean::inc(x_124);
x_125 = lean::cnstr_get(x_123, 1);
lean::inc(x_125);
lean::dec(x_123);
x_126 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__12(x_1, x_116, x_3, x_4, x_125);
if (lean::obj_tag(x_126) == 0)
{
uint8 x_127; 
lean::dec(x_124);
lean::free_heap_obj(x_2);
x_127 = !lean::is_exclusive(x_126);
if (x_127 == 0)
{
return x_126;
}
else
{
obj* x_128; obj* x_129; 
x_128 = lean::cnstr_get(x_126, 0);
lean::inc(x_128);
lean::dec(x_126);
x_129 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_129, 0, x_128);
return x_129;
}
}
else
{
uint8 x_130; 
x_130 = !lean::is_exclusive(x_126);
if (x_130 == 0)
{
obj* x_131; uint8 x_132; 
x_131 = lean::cnstr_get(x_126, 0);
x_132 = !lean::is_exclusive(x_131);
if (x_132 == 0)
{
obj* x_133; 
x_133 = lean::cnstr_get(x_131, 0);
lean::cnstr_set(x_2, 1, x_133);
lean::cnstr_set(x_2, 0, x_124);
lean::cnstr_set(x_131, 0, x_2);
return x_126;
}
else
{
obj* x_134; obj* x_135; obj* x_136; 
x_134 = lean::cnstr_get(x_131, 0);
x_135 = lean::cnstr_get(x_131, 1);
lean::inc(x_135);
lean::inc(x_134);
lean::dec(x_131);
lean::cnstr_set(x_2, 1, x_134);
lean::cnstr_set(x_2, 0, x_124);
x_136 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_136, 0, x_2);
lean::cnstr_set(x_136, 1, x_135);
lean::cnstr_set(x_126, 0, x_136);
return x_126;
}
}
else
{
obj* x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_141; obj* x_142; 
x_137 = lean::cnstr_get(x_126, 0);
lean::inc(x_137);
lean::dec(x_126);
x_138 = lean::cnstr_get(x_137, 0);
lean::inc(x_138);
x_139 = lean::cnstr_get(x_137, 1);
lean::inc(x_139);
if (lean::is_exclusive(x_137)) {
 lean::cnstr_release(x_137, 0);
 lean::cnstr_release(x_137, 1);
 x_140 = x_137;
} else {
 lean::dec_ref(x_137);
 x_140 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_138);
lean::cnstr_set(x_2, 0, x_124);
if (lean::is_scalar(x_140)) {
 x_141 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_141 = x_140;
}
lean::cnstr_set(x_141, 0, x_2);
lean::cnstr_set(x_141, 1, x_139);
x_142 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_142, 0, x_141);
return x_142;
}
}
}
}
else
{
obj* x_143; obj* x_144; obj* x_145; 
x_143 = lean::cnstr_get(x_2, 1);
lean::inc(x_143);
lean::dec(x_2);
x_144 = lean::cnstr_get(x_63, 0);
lean::inc(x_144);
lean::dec(x_63);
x_145 = l_Lean_Elaborator_toPexpr___main(x_144, x_3, x_4, x_5);
if (lean::obj_tag(x_145) == 0)
{
obj* x_146; obj* x_147; obj* x_148; 
lean::dec(x_143);
lean::dec(x_1);
x_146 = lean::cnstr_get(x_145, 0);
lean::inc(x_146);
if (lean::is_exclusive(x_145)) {
 lean::cnstr_release(x_145, 0);
 x_147 = x_145;
} else {
 lean::dec_ref(x_145);
 x_147 = lean::box(0);
}
if (lean::is_scalar(x_147)) {
 x_148 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_148 = x_147;
}
lean::cnstr_set(x_148, 0, x_146);
return x_148;
}
else
{
obj* x_149; obj* x_150; obj* x_151; obj* x_152; 
x_149 = lean::cnstr_get(x_145, 0);
lean::inc(x_149);
lean::dec(x_145);
x_150 = lean::cnstr_get(x_149, 0);
lean::inc(x_150);
x_151 = lean::cnstr_get(x_149, 1);
lean::inc(x_151);
lean::dec(x_149);
x_152 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__12(x_1, x_143, x_3, x_4, x_151);
if (lean::obj_tag(x_152) == 0)
{
obj* x_153; obj* x_154; obj* x_155; 
lean::dec(x_150);
x_153 = lean::cnstr_get(x_152, 0);
lean::inc(x_153);
if (lean::is_exclusive(x_152)) {
 lean::cnstr_release(x_152, 0);
 x_154 = x_152;
} else {
 lean::dec_ref(x_152);
 x_154 = lean::box(0);
}
if (lean::is_scalar(x_154)) {
 x_155 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_155 = x_154;
}
lean::cnstr_set(x_155, 0, x_153);
return x_155;
}
else
{
obj* x_156; obj* x_157; obj* x_158; obj* x_159; obj* x_160; obj* x_161; obj* x_162; obj* x_163; 
x_156 = lean::cnstr_get(x_152, 0);
lean::inc(x_156);
if (lean::is_exclusive(x_152)) {
 lean::cnstr_release(x_152, 0);
 x_157 = x_152;
} else {
 lean::dec_ref(x_152);
 x_157 = lean::box(0);
}
x_158 = lean::cnstr_get(x_156, 0);
lean::inc(x_158);
x_159 = lean::cnstr_get(x_156, 1);
lean::inc(x_159);
if (lean::is_exclusive(x_156)) {
 lean::cnstr_release(x_156, 0);
 lean::cnstr_release(x_156, 1);
 x_160 = x_156;
} else {
 lean::dec_ref(x_156);
 x_160 = lean::box(0);
}
x_161 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_161, 0, x_150);
lean::cnstr_set(x_161, 1, x_158);
if (lean::is_scalar(x_160)) {
 x_162 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_162 = x_160;
}
lean::cnstr_set(x_162, 0, x_161);
lean::cnstr_set(x_162, 1, x_159);
if (lean::is_scalar(x_157)) {
 x_163 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_163 = x_157;
}
lean::cnstr_set(x_163, 0, x_162);
return x_163;
}
}
}
}
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__13(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_6; obj* x_7; obj* x_8; 
lean::dec(x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
else
{
obj* x_9; obj* x_10; 
x_9 = lean::cnstr_get(x_2, 0);
lean::inc(x_9);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
if (lean::obj_tag(x_10) == 0)
{
uint8 x_11; 
x_11 = !lean::is_exclusive(x_2);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_12 = lean::cnstr_get(x_2, 1);
x_13 = lean::cnstr_get(x_2, 0);
lean::dec(x_13);
x_14 = lean::cnstr_get(x_10, 0);
lean::inc(x_14);
lean::dec(x_10);
x_15 = lean::cnstr_get(x_14, 2);
lean::inc(x_15);
x_16 = l_Lean_Elaborator_toPexpr___main(x_15, x_3, x_4, x_5);
if (lean::obj_tag(x_16) == 0)
{
uint8 x_17; 
lean::dec(x_14);
lean::free_heap_obj(x_2);
lean::dec(x_12);
lean::dec(x_1);
x_17 = !lean::is_exclusive(x_16);
if (x_17 == 0)
{
return x_16;
}
else
{
obj* x_18; obj* x_19; 
x_18 = lean::cnstr_get(x_16, 0);
lean::inc(x_18);
lean::dec(x_16);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
else
{
obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_20 = lean::cnstr_get(x_16, 0);
lean::inc(x_20);
lean::dec(x_16);
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
x_22 = lean::cnstr_get(x_20, 1);
lean::inc(x_22);
lean::dec(x_20);
x_23 = lean::cnstr_get(x_14, 0);
lean::inc(x_23);
lean::dec(x_14);
x_24 = l_Lean_Elaborator_mangleIdent(x_23);
x_25 = lean::box(0);
x_26 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__1;
x_27 = l_Lean_KVMap_setName(x_25, x_26, x_24);
x_28 = lean_expr_mk_mdata(x_27, x_21);
x_29 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__13(x_1, x_12, x_3, x_4, x_22);
if (lean::obj_tag(x_29) == 0)
{
uint8 x_30; 
lean::dec(x_28);
lean::free_heap_obj(x_2);
x_30 = !lean::is_exclusive(x_29);
if (x_30 == 0)
{
return x_29;
}
else
{
obj* x_31; obj* x_32; 
x_31 = lean::cnstr_get(x_29, 0);
lean::inc(x_31);
lean::dec(x_29);
x_32 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_32, 0, x_31);
return x_32;
}
}
else
{
uint8 x_33; 
x_33 = !lean::is_exclusive(x_29);
if (x_33 == 0)
{
obj* x_34; uint8 x_35; 
x_34 = lean::cnstr_get(x_29, 0);
x_35 = !lean::is_exclusive(x_34);
if (x_35 == 0)
{
obj* x_36; 
x_36 = lean::cnstr_get(x_34, 0);
lean::cnstr_set(x_2, 1, x_36);
lean::cnstr_set(x_2, 0, x_28);
lean::cnstr_set(x_34, 0, x_2);
return x_29;
}
else
{
obj* x_37; obj* x_38; obj* x_39; 
x_37 = lean::cnstr_get(x_34, 0);
x_38 = lean::cnstr_get(x_34, 1);
lean::inc(x_38);
lean::inc(x_37);
lean::dec(x_34);
lean::cnstr_set(x_2, 1, x_37);
lean::cnstr_set(x_2, 0, x_28);
x_39 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_39, 0, x_2);
lean::cnstr_set(x_39, 1, x_38);
lean::cnstr_set(x_29, 0, x_39);
return x_29;
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; 
x_40 = lean::cnstr_get(x_29, 0);
lean::inc(x_40);
lean::dec(x_29);
x_41 = lean::cnstr_get(x_40, 0);
lean::inc(x_41);
x_42 = lean::cnstr_get(x_40, 1);
lean::inc(x_42);
if (lean::is_exclusive(x_40)) {
 lean::cnstr_release(x_40, 0);
 lean::cnstr_release(x_40, 1);
 x_43 = x_40;
} else {
 lean::dec_ref(x_40);
 x_43 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_41);
lean::cnstr_set(x_2, 0, x_28);
if (lean::is_scalar(x_43)) {
 x_44 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_44 = x_43;
}
lean::cnstr_set(x_44, 0, x_2);
lean::cnstr_set(x_44, 1, x_42);
x_45 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_45, 0, x_44);
return x_45;
}
}
}
}
else
{
obj* x_46; obj* x_47; obj* x_48; obj* x_49; 
x_46 = lean::cnstr_get(x_2, 1);
lean::inc(x_46);
lean::dec(x_2);
x_47 = lean::cnstr_get(x_10, 0);
lean::inc(x_47);
lean::dec(x_10);
x_48 = lean::cnstr_get(x_47, 2);
lean::inc(x_48);
x_49 = l_Lean_Elaborator_toPexpr___main(x_48, x_3, x_4, x_5);
if (lean::obj_tag(x_49) == 0)
{
obj* x_50; obj* x_51; obj* x_52; 
lean::dec(x_47);
lean::dec(x_46);
lean::dec(x_1);
x_50 = lean::cnstr_get(x_49, 0);
lean::inc(x_50);
if (lean::is_exclusive(x_49)) {
 lean::cnstr_release(x_49, 0);
 x_51 = x_49;
} else {
 lean::dec_ref(x_49);
 x_51 = lean::box(0);
}
if (lean::is_scalar(x_51)) {
 x_52 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_52 = x_51;
}
lean::cnstr_set(x_52, 0, x_50);
return x_52;
}
else
{
obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; 
x_53 = lean::cnstr_get(x_49, 0);
lean::inc(x_53);
lean::dec(x_49);
x_54 = lean::cnstr_get(x_53, 0);
lean::inc(x_54);
x_55 = lean::cnstr_get(x_53, 1);
lean::inc(x_55);
lean::dec(x_53);
x_56 = lean::cnstr_get(x_47, 0);
lean::inc(x_56);
lean::dec(x_47);
x_57 = l_Lean_Elaborator_mangleIdent(x_56);
x_58 = lean::box(0);
x_59 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__1;
x_60 = l_Lean_KVMap_setName(x_58, x_59, x_57);
x_61 = lean_expr_mk_mdata(x_60, x_54);
x_62 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__13(x_1, x_46, x_3, x_4, x_55);
if (lean::obj_tag(x_62) == 0)
{
obj* x_63; obj* x_64; obj* x_65; 
lean::dec(x_61);
x_63 = lean::cnstr_get(x_62, 0);
lean::inc(x_63);
if (lean::is_exclusive(x_62)) {
 lean::cnstr_release(x_62, 0);
 x_64 = x_62;
} else {
 lean::dec_ref(x_62);
 x_64 = lean::box(0);
}
if (lean::is_scalar(x_64)) {
 x_65 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_65 = x_64;
}
lean::cnstr_set(x_65, 0, x_63);
return x_65;
}
else
{
obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; 
x_66 = lean::cnstr_get(x_62, 0);
lean::inc(x_66);
if (lean::is_exclusive(x_62)) {
 lean::cnstr_release(x_62, 0);
 x_67 = x_62;
} else {
 lean::dec_ref(x_62);
 x_67 = lean::box(0);
}
x_68 = lean::cnstr_get(x_66, 0);
lean::inc(x_68);
x_69 = lean::cnstr_get(x_66, 1);
lean::inc(x_69);
if (lean::is_exclusive(x_66)) {
 lean::cnstr_release(x_66, 0);
 lean::cnstr_release(x_66, 1);
 x_70 = x_66;
} else {
 lean::dec_ref(x_66);
 x_70 = lean::box(0);
}
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_61);
lean::cnstr_set(x_71, 1, x_68);
if (lean::is_scalar(x_70)) {
 x_72 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_72 = x_70;
}
lean::cnstr_set(x_72, 0, x_71);
lean::cnstr_set(x_72, 1, x_69);
if (lean::is_scalar(x_67)) {
 x_73 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_73 = x_67;
}
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
}
}
}
else
{
uint8 x_74; 
lean::dec(x_10);
x_74 = !lean::is_exclusive(x_2);
if (x_74 == 0)
{
obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; 
x_75 = lean::cnstr_get(x_2, 1);
x_76 = lean::cnstr_get(x_2, 0);
lean::dec(x_76);
lean::inc(x_1);
x_77 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_77, 0, x_1);
x_78 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_79 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_77, x_78, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_77);
if (lean::obj_tag(x_79) == 0)
{
uint8 x_80; 
lean::free_heap_obj(x_2);
lean::dec(x_75);
lean::dec(x_1);
x_80 = !lean::is_exclusive(x_79);
if (x_80 == 0)
{
return x_79;
}
else
{
obj* x_81; obj* x_82; 
x_81 = lean::cnstr_get(x_79, 0);
lean::inc(x_81);
lean::dec(x_79);
x_82 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_82, 0, x_81);
return x_82;
}
}
else
{
obj* x_83; obj* x_84; obj* x_85; obj* x_86; 
x_83 = lean::cnstr_get(x_79, 0);
lean::inc(x_83);
lean::dec(x_79);
x_84 = lean::cnstr_get(x_83, 0);
lean::inc(x_84);
x_85 = lean::cnstr_get(x_83, 1);
lean::inc(x_85);
lean::dec(x_83);
x_86 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__13(x_1, x_75, x_3, x_4, x_85);
if (lean::obj_tag(x_86) == 0)
{
uint8 x_87; 
lean::dec(x_84);
lean::free_heap_obj(x_2);
x_87 = !lean::is_exclusive(x_86);
if (x_87 == 0)
{
return x_86;
}
else
{
obj* x_88; obj* x_89; 
x_88 = lean::cnstr_get(x_86, 0);
lean::inc(x_88);
lean::dec(x_86);
x_89 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_89, 0, x_88);
return x_89;
}
}
else
{
uint8 x_90; 
x_90 = !lean::is_exclusive(x_86);
if (x_90 == 0)
{
obj* x_91; uint8 x_92; 
x_91 = lean::cnstr_get(x_86, 0);
x_92 = !lean::is_exclusive(x_91);
if (x_92 == 0)
{
obj* x_93; 
x_93 = lean::cnstr_get(x_91, 0);
lean::cnstr_set(x_2, 1, x_93);
lean::cnstr_set(x_2, 0, x_84);
lean::cnstr_set(x_91, 0, x_2);
return x_86;
}
else
{
obj* x_94; obj* x_95; obj* x_96; 
x_94 = lean::cnstr_get(x_91, 0);
x_95 = lean::cnstr_get(x_91, 1);
lean::inc(x_95);
lean::inc(x_94);
lean::dec(x_91);
lean::cnstr_set(x_2, 1, x_94);
lean::cnstr_set(x_2, 0, x_84);
x_96 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_96, 0, x_2);
lean::cnstr_set(x_96, 1, x_95);
lean::cnstr_set(x_86, 0, x_96);
return x_86;
}
}
else
{
obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; 
x_97 = lean::cnstr_get(x_86, 0);
lean::inc(x_97);
lean::dec(x_86);
x_98 = lean::cnstr_get(x_97, 0);
lean::inc(x_98);
x_99 = lean::cnstr_get(x_97, 1);
lean::inc(x_99);
if (lean::is_exclusive(x_97)) {
 lean::cnstr_release(x_97, 0);
 lean::cnstr_release(x_97, 1);
 x_100 = x_97;
} else {
 lean::dec_ref(x_97);
 x_100 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_98);
lean::cnstr_set(x_2, 0, x_84);
if (lean::is_scalar(x_100)) {
 x_101 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_101 = x_100;
}
lean::cnstr_set(x_101, 0, x_2);
lean::cnstr_set(x_101, 1, x_99);
x_102 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_102, 0, x_101);
return x_102;
}
}
}
}
else
{
obj* x_103; obj* x_104; obj* x_105; obj* x_106; 
x_103 = lean::cnstr_get(x_2, 1);
lean::inc(x_103);
lean::dec(x_2);
lean::inc(x_1);
x_104 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_104, 0, x_1);
x_105 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_106 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_104, x_105, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_104);
if (lean::obj_tag(x_106) == 0)
{
obj* x_107; obj* x_108; obj* x_109; 
lean::dec(x_103);
lean::dec(x_1);
x_107 = lean::cnstr_get(x_106, 0);
lean::inc(x_107);
if (lean::is_exclusive(x_106)) {
 lean::cnstr_release(x_106, 0);
 x_108 = x_106;
} else {
 lean::dec_ref(x_106);
 x_108 = lean::box(0);
}
if (lean::is_scalar(x_108)) {
 x_109 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_109 = x_108;
}
lean::cnstr_set(x_109, 0, x_107);
return x_109;
}
else
{
obj* x_110; obj* x_111; obj* x_112; obj* x_113; 
x_110 = lean::cnstr_get(x_106, 0);
lean::inc(x_110);
lean::dec(x_106);
x_111 = lean::cnstr_get(x_110, 0);
lean::inc(x_111);
x_112 = lean::cnstr_get(x_110, 1);
lean::inc(x_112);
lean::dec(x_110);
x_113 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__13(x_1, x_103, x_3, x_4, x_112);
if (lean::obj_tag(x_113) == 0)
{
obj* x_114; obj* x_115; obj* x_116; 
lean::dec(x_111);
x_114 = lean::cnstr_get(x_113, 0);
lean::inc(x_114);
if (lean::is_exclusive(x_113)) {
 lean::cnstr_release(x_113, 0);
 x_115 = x_113;
} else {
 lean::dec_ref(x_113);
 x_115 = lean::box(0);
}
if (lean::is_scalar(x_115)) {
 x_116 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_116 = x_115;
}
lean::cnstr_set(x_116, 0, x_114);
return x_116;
}
else
{
obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; 
x_117 = lean::cnstr_get(x_113, 0);
lean::inc(x_117);
if (lean::is_exclusive(x_113)) {
 lean::cnstr_release(x_113, 0);
 x_118 = x_113;
} else {
 lean::dec_ref(x_113);
 x_118 = lean::box(0);
}
x_119 = lean::cnstr_get(x_117, 0);
lean::inc(x_119);
x_120 = lean::cnstr_get(x_117, 1);
lean::inc(x_120);
if (lean::is_exclusive(x_117)) {
 lean::cnstr_release(x_117, 0);
 lean::cnstr_release(x_117, 1);
 x_121 = x_117;
} else {
 lean::dec_ref(x_117);
 x_121 = lean::box(0);
}
x_122 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_122, 0, x_111);
lean::cnstr_set(x_122, 1, x_119);
if (lean::is_scalar(x_121)) {
 x_123 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_123 = x_121;
}
lean::cnstr_set(x_123, 0, x_122);
lean::cnstr_set(x_123, 1, x_120);
if (lean::is_scalar(x_118)) {
 x_124 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_124 = x_118;
}
lean::cnstr_set(x_124, 0, x_123);
return x_124;
}
}
}
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__14(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_6; obj* x_7; obj* x_8; 
lean::dec(x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
else
{
obj* x_9; obj* x_10; 
x_9 = lean::cnstr_get(x_2, 0);
lean::inc(x_9);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
if (lean::obj_tag(x_10) == 0)
{
uint8 x_11; 
lean::dec(x_10);
x_11 = !lean::is_exclusive(x_2);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_12 = lean::cnstr_get(x_2, 1);
x_13 = lean::cnstr_get(x_2, 0);
lean::dec(x_13);
lean::inc(x_1);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_1);
x_15 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_16 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_14, x_15, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_14);
if (lean::obj_tag(x_16) == 0)
{
uint8 x_17; 
lean::free_heap_obj(x_2);
lean::dec(x_12);
lean::dec(x_1);
x_17 = !lean::is_exclusive(x_16);
if (x_17 == 0)
{
return x_16;
}
else
{
obj* x_18; obj* x_19; 
x_18 = lean::cnstr_get(x_16, 0);
lean::inc(x_18);
lean::dec(x_16);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
else
{
obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_20 = lean::cnstr_get(x_16, 0);
lean::inc(x_20);
lean::dec(x_16);
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
x_22 = lean::cnstr_get(x_20, 1);
lean::inc(x_22);
lean::dec(x_20);
x_23 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__14(x_1, x_12, x_3, x_4, x_22);
if (lean::obj_tag(x_23) == 0)
{
uint8 x_24; 
lean::dec(x_21);
lean::free_heap_obj(x_2);
x_24 = !lean::is_exclusive(x_23);
if (x_24 == 0)
{
return x_23;
}
else
{
obj* x_25; obj* x_26; 
x_25 = lean::cnstr_get(x_23, 0);
lean::inc(x_25);
lean::dec(x_23);
x_26 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_26, 0, x_25);
return x_26;
}
}
else
{
uint8 x_27; 
x_27 = !lean::is_exclusive(x_23);
if (x_27 == 0)
{
obj* x_28; uint8 x_29; 
x_28 = lean::cnstr_get(x_23, 0);
x_29 = !lean::is_exclusive(x_28);
if (x_29 == 0)
{
obj* x_30; 
x_30 = lean::cnstr_get(x_28, 0);
lean::cnstr_set(x_2, 1, x_30);
lean::cnstr_set(x_2, 0, x_21);
lean::cnstr_set(x_28, 0, x_2);
return x_23;
}
else
{
obj* x_31; obj* x_32; obj* x_33; 
x_31 = lean::cnstr_get(x_28, 0);
x_32 = lean::cnstr_get(x_28, 1);
lean::inc(x_32);
lean::inc(x_31);
lean::dec(x_28);
lean::cnstr_set(x_2, 1, x_31);
lean::cnstr_set(x_2, 0, x_21);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_2);
lean::cnstr_set(x_33, 1, x_32);
lean::cnstr_set(x_23, 0, x_33);
return x_23;
}
}
else
{
obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_34 = lean::cnstr_get(x_23, 0);
lean::inc(x_34);
lean::dec(x_23);
x_35 = lean::cnstr_get(x_34, 0);
lean::inc(x_35);
x_36 = lean::cnstr_get(x_34, 1);
lean::inc(x_36);
if (lean::is_exclusive(x_34)) {
 lean::cnstr_release(x_34, 0);
 lean::cnstr_release(x_34, 1);
 x_37 = x_34;
} else {
 lean::dec_ref(x_34);
 x_37 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_35);
lean::cnstr_set(x_2, 0, x_21);
if (lean::is_scalar(x_37)) {
 x_38 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_38 = x_37;
}
lean::cnstr_set(x_38, 0, x_2);
lean::cnstr_set(x_38, 1, x_36);
x_39 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_39, 0, x_38);
return x_39;
}
}
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; obj* x_43; 
x_40 = lean::cnstr_get(x_2, 1);
lean::inc(x_40);
lean::dec(x_2);
lean::inc(x_1);
x_41 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_41, 0, x_1);
x_42 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_43 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_41, x_42, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_41);
if (lean::obj_tag(x_43) == 0)
{
obj* x_44; obj* x_45; obj* x_46; 
lean::dec(x_40);
lean::dec(x_1);
x_44 = lean::cnstr_get(x_43, 0);
lean::inc(x_44);
if (lean::is_exclusive(x_43)) {
 lean::cnstr_release(x_43, 0);
 x_45 = x_43;
} else {
 lean::dec_ref(x_43);
 x_45 = lean::box(0);
}
if (lean::is_scalar(x_45)) {
 x_46 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_46 = x_45;
}
lean::cnstr_set(x_46, 0, x_44);
return x_46;
}
else
{
obj* x_47; obj* x_48; obj* x_49; obj* x_50; 
x_47 = lean::cnstr_get(x_43, 0);
lean::inc(x_47);
lean::dec(x_43);
x_48 = lean::cnstr_get(x_47, 0);
lean::inc(x_48);
x_49 = lean::cnstr_get(x_47, 1);
lean::inc(x_49);
lean::dec(x_47);
x_50 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__14(x_1, x_40, x_3, x_4, x_49);
if (lean::obj_tag(x_50) == 0)
{
obj* x_51; obj* x_52; obj* x_53; 
lean::dec(x_48);
x_51 = lean::cnstr_get(x_50, 0);
lean::inc(x_51);
if (lean::is_exclusive(x_50)) {
 lean::cnstr_release(x_50, 0);
 x_52 = x_50;
} else {
 lean::dec_ref(x_50);
 x_52 = lean::box(0);
}
if (lean::is_scalar(x_52)) {
 x_53 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_53 = x_52;
}
lean::cnstr_set(x_53, 0, x_51);
return x_53;
}
else
{
obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; 
x_54 = lean::cnstr_get(x_50, 0);
lean::inc(x_54);
if (lean::is_exclusive(x_50)) {
 lean::cnstr_release(x_50, 0);
 x_55 = x_50;
} else {
 lean::dec_ref(x_50);
 x_55 = lean::box(0);
}
x_56 = lean::cnstr_get(x_54, 0);
lean::inc(x_56);
x_57 = lean::cnstr_get(x_54, 1);
lean::inc(x_57);
if (lean::is_exclusive(x_54)) {
 lean::cnstr_release(x_54, 0);
 lean::cnstr_release(x_54, 1);
 x_58 = x_54;
} else {
 lean::dec_ref(x_54);
 x_58 = lean::box(0);
}
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_48);
lean::cnstr_set(x_59, 1, x_56);
if (lean::is_scalar(x_58)) {
 x_60 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_60 = x_58;
}
lean::cnstr_set(x_60, 0, x_59);
lean::cnstr_set(x_60, 1, x_57);
if (lean::is_scalar(x_55)) {
 x_61 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_61 = x_55;
}
lean::cnstr_set(x_61, 0, x_60);
return x_61;
}
}
}
}
else
{
obj* x_62; obj* x_63; 
x_62 = lean::cnstr_get(x_10, 0);
lean::inc(x_62);
lean::dec(x_10);
x_63 = lean::cnstr_get(x_62, 1);
lean::inc(x_63);
lean::dec(x_62);
if (lean::obj_tag(x_63) == 0)
{
uint8 x_64; 
x_64 = !lean::is_exclusive(x_2);
if (x_64 == 0)
{
obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; 
x_65 = lean::cnstr_get(x_2, 1);
x_66 = lean::cnstr_get(x_2, 0);
lean::dec(x_66);
lean::inc(x_1);
x_67 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_67, 0, x_1);
x_68 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_69 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_67, x_68, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_67);
if (lean::obj_tag(x_69) == 0)
{
uint8 x_70; 
lean::free_heap_obj(x_2);
lean::dec(x_65);
lean::dec(x_1);
x_70 = !lean::is_exclusive(x_69);
if (x_70 == 0)
{
return x_69;
}
else
{
obj* x_71; obj* x_72; 
x_71 = lean::cnstr_get(x_69, 0);
lean::inc(x_71);
lean::dec(x_69);
x_72 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_72, 0, x_71);
return x_72;
}
}
else
{
obj* x_73; obj* x_74; obj* x_75; obj* x_76; 
x_73 = lean::cnstr_get(x_69, 0);
lean::inc(x_73);
lean::dec(x_69);
x_74 = lean::cnstr_get(x_73, 0);
lean::inc(x_74);
x_75 = lean::cnstr_get(x_73, 1);
lean::inc(x_75);
lean::dec(x_73);
x_76 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__14(x_1, x_65, x_3, x_4, x_75);
if (lean::obj_tag(x_76) == 0)
{
uint8 x_77; 
lean::dec(x_74);
lean::free_heap_obj(x_2);
x_77 = !lean::is_exclusive(x_76);
if (x_77 == 0)
{
return x_76;
}
else
{
obj* x_78; obj* x_79; 
x_78 = lean::cnstr_get(x_76, 0);
lean::inc(x_78);
lean::dec(x_76);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
else
{
uint8 x_80; 
x_80 = !lean::is_exclusive(x_76);
if (x_80 == 0)
{
obj* x_81; uint8 x_82; 
x_81 = lean::cnstr_get(x_76, 0);
x_82 = !lean::is_exclusive(x_81);
if (x_82 == 0)
{
obj* x_83; 
x_83 = lean::cnstr_get(x_81, 0);
lean::cnstr_set(x_2, 1, x_83);
lean::cnstr_set(x_2, 0, x_74);
lean::cnstr_set(x_81, 0, x_2);
return x_76;
}
else
{
obj* x_84; obj* x_85; obj* x_86; 
x_84 = lean::cnstr_get(x_81, 0);
x_85 = lean::cnstr_get(x_81, 1);
lean::inc(x_85);
lean::inc(x_84);
lean::dec(x_81);
lean::cnstr_set(x_2, 1, x_84);
lean::cnstr_set(x_2, 0, x_74);
x_86 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_86, 0, x_2);
lean::cnstr_set(x_86, 1, x_85);
lean::cnstr_set(x_76, 0, x_86);
return x_76;
}
}
else
{
obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; 
x_87 = lean::cnstr_get(x_76, 0);
lean::inc(x_87);
lean::dec(x_76);
x_88 = lean::cnstr_get(x_87, 0);
lean::inc(x_88);
x_89 = lean::cnstr_get(x_87, 1);
lean::inc(x_89);
if (lean::is_exclusive(x_87)) {
 lean::cnstr_release(x_87, 0);
 lean::cnstr_release(x_87, 1);
 x_90 = x_87;
} else {
 lean::dec_ref(x_87);
 x_90 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_88);
lean::cnstr_set(x_2, 0, x_74);
if (lean::is_scalar(x_90)) {
 x_91 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_91 = x_90;
}
lean::cnstr_set(x_91, 0, x_2);
lean::cnstr_set(x_91, 1, x_89);
x_92 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_92, 0, x_91);
return x_92;
}
}
}
}
else
{
obj* x_93; obj* x_94; obj* x_95; obj* x_96; 
x_93 = lean::cnstr_get(x_2, 1);
lean::inc(x_93);
lean::dec(x_2);
lean::inc(x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_1);
x_95 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_96 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_94, x_95, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_94);
if (lean::obj_tag(x_96) == 0)
{
obj* x_97; obj* x_98; obj* x_99; 
lean::dec(x_93);
lean::dec(x_1);
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
if (lean::is_exclusive(x_96)) {
 lean::cnstr_release(x_96, 0);
 x_98 = x_96;
} else {
 lean::dec_ref(x_96);
 x_98 = lean::box(0);
}
if (lean::is_scalar(x_98)) {
 x_99 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_99 = x_98;
}
lean::cnstr_set(x_99, 0, x_97);
return x_99;
}
else
{
obj* x_100; obj* x_101; obj* x_102; obj* x_103; 
x_100 = lean::cnstr_get(x_96, 0);
lean::inc(x_100);
lean::dec(x_96);
x_101 = lean::cnstr_get(x_100, 0);
lean::inc(x_101);
x_102 = lean::cnstr_get(x_100, 1);
lean::inc(x_102);
lean::dec(x_100);
x_103 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__14(x_1, x_93, x_3, x_4, x_102);
if (lean::obj_tag(x_103) == 0)
{
obj* x_104; obj* x_105; obj* x_106; 
lean::dec(x_101);
x_104 = lean::cnstr_get(x_103, 0);
lean::inc(x_104);
if (lean::is_exclusive(x_103)) {
 lean::cnstr_release(x_103, 0);
 x_105 = x_103;
} else {
 lean::dec_ref(x_103);
 x_105 = lean::box(0);
}
if (lean::is_scalar(x_105)) {
 x_106 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_106 = x_105;
}
lean::cnstr_set(x_106, 0, x_104);
return x_106;
}
else
{
obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; 
x_107 = lean::cnstr_get(x_103, 0);
lean::inc(x_107);
if (lean::is_exclusive(x_103)) {
 lean::cnstr_release(x_103, 0);
 x_108 = x_103;
} else {
 lean::dec_ref(x_103);
 x_108 = lean::box(0);
}
x_109 = lean::cnstr_get(x_107, 0);
lean::inc(x_109);
x_110 = lean::cnstr_get(x_107, 1);
lean::inc(x_110);
if (lean::is_exclusive(x_107)) {
 lean::cnstr_release(x_107, 0);
 lean::cnstr_release(x_107, 1);
 x_111 = x_107;
} else {
 lean::dec_ref(x_107);
 x_111 = lean::box(0);
}
x_112 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_112, 0, x_101);
lean::cnstr_set(x_112, 1, x_109);
if (lean::is_scalar(x_111)) {
 x_113 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_113 = x_111;
}
lean::cnstr_set(x_113, 0, x_112);
lean::cnstr_set(x_113, 1, x_110);
if (lean::is_scalar(x_108)) {
 x_114 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_114 = x_108;
}
lean::cnstr_set(x_114, 0, x_113);
return x_114;
}
}
}
}
else
{
uint8 x_115; 
x_115 = !lean::is_exclusive(x_2);
if (x_115 == 0)
{
obj* x_116; obj* x_117; obj* x_118; obj* x_119; 
x_116 = lean::cnstr_get(x_2, 1);
x_117 = lean::cnstr_get(x_2, 0);
lean::dec(x_117);
x_118 = lean::cnstr_get(x_63, 0);
lean::inc(x_118);
lean::dec(x_63);
x_119 = l_Lean_Elaborator_toPexpr___main(x_118, x_3, x_4, x_5);
if (lean::obj_tag(x_119) == 0)
{
uint8 x_120; 
lean::free_heap_obj(x_2);
lean::dec(x_116);
lean::dec(x_1);
x_120 = !lean::is_exclusive(x_119);
if (x_120 == 0)
{
return x_119;
}
else
{
obj* x_121; obj* x_122; 
x_121 = lean::cnstr_get(x_119, 0);
lean::inc(x_121);
lean::dec(x_119);
x_122 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_122, 0, x_121);
return x_122;
}
}
else
{
obj* x_123; obj* x_124; obj* x_125; obj* x_126; 
x_123 = lean::cnstr_get(x_119, 0);
lean::inc(x_123);
lean::dec(x_119);
x_124 = lean::cnstr_get(x_123, 0);
lean::inc(x_124);
x_125 = lean::cnstr_get(x_123, 1);
lean::inc(x_125);
lean::dec(x_123);
x_126 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__14(x_1, x_116, x_3, x_4, x_125);
if (lean::obj_tag(x_126) == 0)
{
uint8 x_127; 
lean::dec(x_124);
lean::free_heap_obj(x_2);
x_127 = !lean::is_exclusive(x_126);
if (x_127 == 0)
{
return x_126;
}
else
{
obj* x_128; obj* x_129; 
x_128 = lean::cnstr_get(x_126, 0);
lean::inc(x_128);
lean::dec(x_126);
x_129 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_129, 0, x_128);
return x_129;
}
}
else
{
uint8 x_130; 
x_130 = !lean::is_exclusive(x_126);
if (x_130 == 0)
{
obj* x_131; uint8 x_132; 
x_131 = lean::cnstr_get(x_126, 0);
x_132 = !lean::is_exclusive(x_131);
if (x_132 == 0)
{
obj* x_133; 
x_133 = lean::cnstr_get(x_131, 0);
lean::cnstr_set(x_2, 1, x_133);
lean::cnstr_set(x_2, 0, x_124);
lean::cnstr_set(x_131, 0, x_2);
return x_126;
}
else
{
obj* x_134; obj* x_135; obj* x_136; 
x_134 = lean::cnstr_get(x_131, 0);
x_135 = lean::cnstr_get(x_131, 1);
lean::inc(x_135);
lean::inc(x_134);
lean::dec(x_131);
lean::cnstr_set(x_2, 1, x_134);
lean::cnstr_set(x_2, 0, x_124);
x_136 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_136, 0, x_2);
lean::cnstr_set(x_136, 1, x_135);
lean::cnstr_set(x_126, 0, x_136);
return x_126;
}
}
else
{
obj* x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_141; obj* x_142; 
x_137 = lean::cnstr_get(x_126, 0);
lean::inc(x_137);
lean::dec(x_126);
x_138 = lean::cnstr_get(x_137, 0);
lean::inc(x_138);
x_139 = lean::cnstr_get(x_137, 1);
lean::inc(x_139);
if (lean::is_exclusive(x_137)) {
 lean::cnstr_release(x_137, 0);
 lean::cnstr_release(x_137, 1);
 x_140 = x_137;
} else {
 lean::dec_ref(x_137);
 x_140 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_138);
lean::cnstr_set(x_2, 0, x_124);
if (lean::is_scalar(x_140)) {
 x_141 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_141 = x_140;
}
lean::cnstr_set(x_141, 0, x_2);
lean::cnstr_set(x_141, 1, x_139);
x_142 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_142, 0, x_141);
return x_142;
}
}
}
}
else
{
obj* x_143; obj* x_144; obj* x_145; 
x_143 = lean::cnstr_get(x_2, 1);
lean::inc(x_143);
lean::dec(x_2);
x_144 = lean::cnstr_get(x_63, 0);
lean::inc(x_144);
lean::dec(x_63);
x_145 = l_Lean_Elaborator_toPexpr___main(x_144, x_3, x_4, x_5);
if (lean::obj_tag(x_145) == 0)
{
obj* x_146; obj* x_147; obj* x_148; 
lean::dec(x_143);
lean::dec(x_1);
x_146 = lean::cnstr_get(x_145, 0);
lean::inc(x_146);
if (lean::is_exclusive(x_145)) {
 lean::cnstr_release(x_145, 0);
 x_147 = x_145;
} else {
 lean::dec_ref(x_145);
 x_147 = lean::box(0);
}
if (lean::is_scalar(x_147)) {
 x_148 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_148 = x_147;
}
lean::cnstr_set(x_148, 0, x_146);
return x_148;
}
else
{
obj* x_149; obj* x_150; obj* x_151; obj* x_152; 
x_149 = lean::cnstr_get(x_145, 0);
lean::inc(x_149);
lean::dec(x_145);
x_150 = lean::cnstr_get(x_149, 0);
lean::inc(x_150);
x_151 = lean::cnstr_get(x_149, 1);
lean::inc(x_151);
lean::dec(x_149);
x_152 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__14(x_1, x_143, x_3, x_4, x_151);
if (lean::obj_tag(x_152) == 0)
{
obj* x_153; obj* x_154; obj* x_155; 
lean::dec(x_150);
x_153 = lean::cnstr_get(x_152, 0);
lean::inc(x_153);
if (lean::is_exclusive(x_152)) {
 lean::cnstr_release(x_152, 0);
 x_154 = x_152;
} else {
 lean::dec_ref(x_152);
 x_154 = lean::box(0);
}
if (lean::is_scalar(x_154)) {
 x_155 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_155 = x_154;
}
lean::cnstr_set(x_155, 0, x_153);
return x_155;
}
else
{
obj* x_156; obj* x_157; obj* x_158; obj* x_159; obj* x_160; obj* x_161; obj* x_162; obj* x_163; 
x_156 = lean::cnstr_get(x_152, 0);
lean::inc(x_156);
if (lean::is_exclusive(x_152)) {
 lean::cnstr_release(x_152, 0);
 x_157 = x_152;
} else {
 lean::dec_ref(x_152);
 x_157 = lean::box(0);
}
x_158 = lean::cnstr_get(x_156, 0);
lean::inc(x_158);
x_159 = lean::cnstr_get(x_156, 1);
lean::inc(x_159);
if (lean::is_exclusive(x_156)) {
 lean::cnstr_release(x_156, 0);
 lean::cnstr_release(x_156, 1);
 x_160 = x_156;
} else {
 lean::dec_ref(x_156);
 x_160 = lean::box(0);
}
x_161 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_161, 0, x_150);
lean::cnstr_set(x_161, 1, x_158);
if (lean::is_scalar(x_160)) {
 x_162 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_162 = x_160;
}
lean::cnstr_set(x_162, 0, x_161);
lean::cnstr_set(x_162, 1, x_159);
if (lean::is_scalar(x_157)) {
 x_163 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_163 = x_157;
}
lean::cnstr_set(x_163, 0, x_162);
return x_163;
}
}
}
}
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__15(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
uint8 x_8; 
x_8 = !lean::is_exclusive(x_1);
if (x_8 == 0)
{
obj* x_9; obj* x_10; obj* x_11; 
x_9 = lean::cnstr_get(x_1, 0);
x_10 = lean::cnstr_get(x_1, 1);
x_11 = l_Lean_Elaborator_toPexpr___main(x_9, x_2, x_3, x_4);
if (lean::obj_tag(x_11) == 0)
{
uint8 x_12; 
lean::free_heap_obj(x_1);
lean::dec(x_10);
x_12 = !lean::is_exclusive(x_11);
if (x_12 == 0)
{
return x_11;
}
else
{
obj* x_13; obj* x_14; 
x_13 = lean::cnstr_get(x_11, 0);
lean::inc(x_13);
lean::dec(x_11);
x_14 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
}
else
{
obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
lean::dec(x_11);
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
x_17 = lean::cnstr_get(x_15, 1);
lean::inc(x_17);
lean::dec(x_15);
x_18 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__15(x_10, x_2, x_3, x_17);
if (lean::obj_tag(x_18) == 0)
{
uint8 x_19; 
lean::dec(x_16);
lean::free_heap_obj(x_1);
x_19 = !lean::is_exclusive(x_18);
if (x_19 == 0)
{
return x_18;
}
else
{
obj* x_20; obj* x_21; 
x_20 = lean::cnstr_get(x_18, 0);
lean::inc(x_20);
lean::dec(x_18);
x_21 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_21, 0, x_20);
return x_21;
}
}
else
{
uint8 x_22; 
x_22 = !lean::is_exclusive(x_18);
if (x_22 == 0)
{
obj* x_23; uint8 x_24; 
x_23 = lean::cnstr_get(x_18, 0);
x_24 = !lean::is_exclusive(x_23);
if (x_24 == 0)
{
obj* x_25; 
x_25 = lean::cnstr_get(x_23, 0);
lean::cnstr_set(x_1, 1, x_25);
lean::cnstr_set(x_1, 0, x_16);
lean::cnstr_set(x_23, 0, x_1);
return x_18;
}
else
{
obj* x_26; obj* x_27; obj* x_28; 
x_26 = lean::cnstr_get(x_23, 0);
x_27 = lean::cnstr_get(x_23, 1);
lean::inc(x_27);
lean::inc(x_26);
lean::dec(x_23);
lean::cnstr_set(x_1, 1, x_26);
lean::cnstr_set(x_1, 0, x_16);
x_28 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_28, 0, x_1);
lean::cnstr_set(x_28, 1, x_27);
lean::cnstr_set(x_18, 0, x_28);
return x_18;
}
}
else
{
obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_29 = lean::cnstr_get(x_18, 0);
lean::inc(x_29);
lean::dec(x_18);
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
x_31 = lean::cnstr_get(x_29, 1);
lean::inc(x_31);
if (lean::is_exclusive(x_29)) {
 lean::cnstr_release(x_29, 0);
 lean::cnstr_release(x_29, 1);
 x_32 = x_29;
} else {
 lean::dec_ref(x_29);
 x_32 = lean::box(0);
}
lean::cnstr_set(x_1, 1, x_30);
lean::cnstr_set(x_1, 0, x_16);
if (lean::is_scalar(x_32)) {
 x_33 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_33 = x_32;
}
lean::cnstr_set(x_33, 0, x_1);
lean::cnstr_set(x_33, 1, x_31);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_33);
return x_34;
}
}
}
}
else
{
obj* x_35; obj* x_36; obj* x_37; 
x_35 = lean::cnstr_get(x_1, 0);
x_36 = lean::cnstr_get(x_1, 1);
lean::inc(x_36);
lean::inc(x_35);
lean::dec(x_1);
x_37 = l_Lean_Elaborator_toPexpr___main(x_35, x_2, x_3, x_4);
if (lean::obj_tag(x_37) == 0)
{
obj* x_38; obj* x_39; obj* x_40; 
lean::dec(x_36);
x_38 = lean::cnstr_get(x_37, 0);
lean::inc(x_38);
if (lean::is_exclusive(x_37)) {
 lean::cnstr_release(x_37, 0);
 x_39 = x_37;
} else {
 lean::dec_ref(x_37);
 x_39 = lean::box(0);
}
if (lean::is_scalar(x_39)) {
 x_40 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_40 = x_39;
}
lean::cnstr_set(x_40, 0, x_38);
return x_40;
}
else
{
obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
x_41 = lean::cnstr_get(x_37, 0);
lean::inc(x_41);
lean::dec(x_37);
x_42 = lean::cnstr_get(x_41, 0);
lean::inc(x_42);
x_43 = lean::cnstr_get(x_41, 1);
lean::inc(x_43);
lean::dec(x_41);
x_44 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__15(x_36, x_2, x_3, x_43);
if (lean::obj_tag(x_44) == 0)
{
obj* x_45; obj* x_46; obj* x_47; 
lean::dec(x_42);
x_45 = lean::cnstr_get(x_44, 0);
lean::inc(x_45);
if (lean::is_exclusive(x_44)) {
 lean::cnstr_release(x_44, 0);
 x_46 = x_44;
} else {
 lean::dec_ref(x_44);
 x_46 = lean::box(0);
}
if (lean::is_scalar(x_46)) {
 x_47 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_47 = x_46;
}
lean::cnstr_set(x_47, 0, x_45);
return x_47;
}
else
{
obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; 
x_48 = lean::cnstr_get(x_44, 0);
lean::inc(x_48);
if (lean::is_exclusive(x_44)) {
 lean::cnstr_release(x_44, 0);
 x_49 = x_44;
} else {
 lean::dec_ref(x_44);
 x_49 = lean::box(0);
}
x_50 = lean::cnstr_get(x_48, 0);
lean::inc(x_50);
x_51 = lean::cnstr_get(x_48, 1);
lean::inc(x_51);
if (lean::is_exclusive(x_48)) {
 lean::cnstr_release(x_48, 0);
 lean::cnstr_release(x_48, 1);
 x_52 = x_48;
} else {
 lean::dec_ref(x_48);
 x_52 = lean::box(0);
}
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_42);
lean::cnstr_set(x_53, 1, x_50);
if (lean::is_scalar(x_52)) {
 x_54 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_54 = x_52;
}
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_51);
if (lean::is_scalar(x_49)) {
 x_55 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_55 = x_49;
}
lean::cnstr_set(x_55, 0, x_54);
return x_55;
}
}
}
}
}
}
obj* l_List_foldl___main___at_Lean_Elaborator_toPexpr___main___spec__16(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
return x_1;
}
else
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_3 = lean::cnstr_get(x_2, 0);
lean::inc(x_3);
x_4 = lean::cnstr_get(x_2, 1);
lean::inc(x_4);
lean::dec(x_2);
x_5 = lean::cnstr_get(x_3, 0);
lean::inc(x_5);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
x_7 = lean::box(0);
x_8 = lean_name_mk_numeral(x_7, x_5);
x_9 = l_Lean_KVMap_setName(x_1, x_8, x_6);
x_1 = x_9;
x_2 = x_4;
goto _start;
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__17(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
uint8 x_8; 
x_8 = !lean::is_exclusive(x_1);
if (x_8 == 0)
{
obj* x_9; obj* x_10; obj* x_11; 
x_9 = lean::cnstr_get(x_1, 0);
x_10 = lean::cnstr_get(x_1, 1);
x_11 = l_Lean_Elaborator_toLevel___main(x_9, x_2, x_3, x_4);
if (lean::obj_tag(x_11) == 0)
{
uint8 x_12; 
lean::free_heap_obj(x_1);
lean::dec(x_10);
x_12 = !lean::is_exclusive(x_11);
if (x_12 == 0)
{
return x_11;
}
else
{
obj* x_13; obj* x_14; 
x_13 = lean::cnstr_get(x_11, 0);
lean::inc(x_13);
lean::dec(x_11);
x_14 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
}
else
{
obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
lean::dec(x_11);
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
x_17 = lean::cnstr_get(x_15, 1);
lean::inc(x_17);
lean::dec(x_15);
x_18 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__17(x_10, x_2, x_3, x_17);
if (lean::obj_tag(x_18) == 0)
{
uint8 x_19; 
lean::dec(x_16);
lean::free_heap_obj(x_1);
x_19 = !lean::is_exclusive(x_18);
if (x_19 == 0)
{
return x_18;
}
else
{
obj* x_20; obj* x_21; 
x_20 = lean::cnstr_get(x_18, 0);
lean::inc(x_20);
lean::dec(x_18);
x_21 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_21, 0, x_20);
return x_21;
}
}
else
{
uint8 x_22; 
x_22 = !lean::is_exclusive(x_18);
if (x_22 == 0)
{
obj* x_23; uint8 x_24; 
x_23 = lean::cnstr_get(x_18, 0);
x_24 = !lean::is_exclusive(x_23);
if (x_24 == 0)
{
obj* x_25; 
x_25 = lean::cnstr_get(x_23, 0);
lean::cnstr_set(x_1, 1, x_25);
lean::cnstr_set(x_1, 0, x_16);
lean::cnstr_set(x_23, 0, x_1);
return x_18;
}
else
{
obj* x_26; obj* x_27; obj* x_28; 
x_26 = lean::cnstr_get(x_23, 0);
x_27 = lean::cnstr_get(x_23, 1);
lean::inc(x_27);
lean::inc(x_26);
lean::dec(x_23);
lean::cnstr_set(x_1, 1, x_26);
lean::cnstr_set(x_1, 0, x_16);
x_28 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_28, 0, x_1);
lean::cnstr_set(x_28, 1, x_27);
lean::cnstr_set(x_18, 0, x_28);
return x_18;
}
}
else
{
obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_29 = lean::cnstr_get(x_18, 0);
lean::inc(x_29);
lean::dec(x_18);
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
x_31 = lean::cnstr_get(x_29, 1);
lean::inc(x_31);
if (lean::is_exclusive(x_29)) {
 lean::cnstr_release(x_29, 0);
 lean::cnstr_release(x_29, 1);
 x_32 = x_29;
} else {
 lean::dec_ref(x_29);
 x_32 = lean::box(0);
}
lean::cnstr_set(x_1, 1, x_30);
lean::cnstr_set(x_1, 0, x_16);
if (lean::is_scalar(x_32)) {
 x_33 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_33 = x_32;
}
lean::cnstr_set(x_33, 0, x_1);
lean::cnstr_set(x_33, 1, x_31);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_33);
return x_34;
}
}
}
}
else
{
obj* x_35; obj* x_36; obj* x_37; 
x_35 = lean::cnstr_get(x_1, 0);
x_36 = lean::cnstr_get(x_1, 1);
lean::inc(x_36);
lean::inc(x_35);
lean::dec(x_1);
x_37 = l_Lean_Elaborator_toLevel___main(x_35, x_2, x_3, x_4);
if (lean::obj_tag(x_37) == 0)
{
obj* x_38; obj* x_39; obj* x_40; 
lean::dec(x_36);
x_38 = lean::cnstr_get(x_37, 0);
lean::inc(x_38);
if (lean::is_exclusive(x_37)) {
 lean::cnstr_release(x_37, 0);
 x_39 = x_37;
} else {
 lean::dec_ref(x_37);
 x_39 = lean::box(0);
}
if (lean::is_scalar(x_39)) {
 x_40 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_40 = x_39;
}
lean::cnstr_set(x_40, 0, x_38);
return x_40;
}
else
{
obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
x_41 = lean::cnstr_get(x_37, 0);
lean::inc(x_41);
lean::dec(x_37);
x_42 = lean::cnstr_get(x_41, 0);
lean::inc(x_42);
x_43 = lean::cnstr_get(x_41, 1);
lean::inc(x_43);
lean::dec(x_41);
x_44 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__17(x_36, x_2, x_3, x_43);
if (lean::obj_tag(x_44) == 0)
{
obj* x_45; obj* x_46; obj* x_47; 
lean::dec(x_42);
x_45 = lean::cnstr_get(x_44, 0);
lean::inc(x_45);
if (lean::is_exclusive(x_44)) {
 lean::cnstr_release(x_44, 0);
 x_46 = x_44;
} else {
 lean::dec_ref(x_44);
 x_46 = lean::box(0);
}
if (lean::is_scalar(x_46)) {
 x_47 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_47 = x_46;
}
lean::cnstr_set(x_47, 0, x_45);
return x_47;
}
else
{
obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; 
x_48 = lean::cnstr_get(x_44, 0);
lean::inc(x_48);
if (lean::is_exclusive(x_44)) {
 lean::cnstr_release(x_44, 0);
 x_49 = x_44;
} else {
 lean::dec_ref(x_44);
 x_49 = lean::box(0);
}
x_50 = lean::cnstr_get(x_48, 0);
lean::inc(x_50);
x_51 = lean::cnstr_get(x_48, 1);
lean::inc(x_51);
if (lean::is_exclusive(x_48)) {
 lean::cnstr_release(x_48, 0);
 lean::cnstr_release(x_48, 1);
 x_52 = x_48;
} else {
 lean::dec_ref(x_48);
 x_52 = lean::box(0);
}
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_42);
lean::cnstr_set(x_53, 1, x_50);
if (lean::is_scalar(x_52)) {
 x_54 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_54 = x_52;
}
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_51);
if (lean::is_scalar(x_49)) {
 x_55 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_55 = x_49;
}
lean::cnstr_set(x_55, 0, x_54);
return x_55;
}
}
}
}
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("toPexpr: unexpected: ");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__2() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("app");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__3() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("column");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__4() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("row");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__5() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("identUnivs");
x_7 = lean_name_mk_string(x_5, x_6);
return x_7;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__6() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("lambda");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__7() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("pi");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__8() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("sortApp");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__9() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("anonymousConstructor");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__10() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("hole");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__11() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("have");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__12() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("show");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__13() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("let");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__14() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("projection");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__15() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("explicit");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__16() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("inaccessible");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__17() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("borrowed");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__18() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("choice");
x_7 = lean_name_mk_string(x_5, x_6);
return x_7;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__19() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("structInst");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__20() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("Lean");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("Parser");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = lean::mk_string("Term");
x_7 = lean_name_mk_string(x_5, x_6);
x_8 = lean::mk_string("match");
x_9 = lean_name_mk_string(x_7, x_8);
return x_9;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__21() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("toPexpr: unexpected Node: ");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__22() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("match");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__23() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("structure instance");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__24() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("catchall");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__25() {
_start:
{
obj* x_1; obj* x_2; 
x_1 = lean::box(0);
x_2 = lean_expr_mk_sort(x_1);
return x_2;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__26() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("struct");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__27() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("unexpected item in structure instance notation");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__28() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("ill-formed choice");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__29() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("choice");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__30() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::mk_string("NOTAString");
x_2 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2, 0, x_1);
x_3 = lean_expr_mk_lit(x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__31() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("borrowed");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__32() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("innaccessible");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__33() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("@@");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__34() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("fieldNotation");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__35() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("ill-formed let");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__36() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("this");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__37() {
_start:
{
obj* x_1; obj* x_2; 
x_1 = lean::mk_nat_obj(0u);
x_2 = lean_expr_mk_bvar(x_1);
return x_2;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__38() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("show");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__39() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("have");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__40() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = l_Lean_Elaborator_dummy;
x_3 = lean_expr_mk_mvar(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__41() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("anonymousConstructor");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__42() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = level_mk_succ(x_1);
x_3 = lean_expr_mk_sort(x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__43() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("ill-formed pi");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__44() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("ill-formed lambda");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__45() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_1 = lean::box(0);
x_2 = lean::box(0);
x_3 = lean::mk_string("annotation");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("preresolved");
x_6 = lean_name_mk_string(x_2, x_5);
x_7 = l_Lean_KVMap_setName(x_1, x_4, x_6);
return x_7;
}
}
obj* _init_l_Lean_Elaborator_toPexpr___main___closed__46() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_1 = lean::box(0);
x_2 = lean::mk_string("annotation");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("preresolved");
x_5 = lean_name_mk_string(x_1, x_4);
x_6 = lean::box(0);
x_7 = l_Lean_KVMap_setName(x_6, x_3, x_5);
return x_7;
}
}
obj* l_Lean_Elaborator_toPexpr___main(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
if (lean::obj_tag(x_1) == 2)
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_86; obj* x_131; uint8 x_132; 
x_14 = lean::cnstr_get(x_1, 0);
lean::inc(x_14);
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
x_16 = lean::cnstr_get(x_14, 1);
lean::inc(x_16);
lean::dec(x_14);
x_131 = l_Lean_Elaborator_toPexpr___main___closed__5;
x_132 = lean_name_dec_eq(x_15, x_131);
if (x_132 == 0)
{
obj* x_133; uint8 x_134; 
x_133 = l_Lean_Elaborator_toPexpr___main___closed__2;
x_134 = lean_name_dec_eq(x_15, x_133);
if (x_134 == 0)
{
obj* x_135; uint8 x_136; 
x_135 = l_Lean_Elaborator_toPexpr___main___closed__6;
x_136 = lean_name_dec_eq(x_15, x_135);
if (x_136 == 0)
{
obj* x_137; uint8 x_138; 
x_137 = l_Lean_Elaborator_toPexpr___main___closed__7;
x_138 = lean_name_dec_eq(x_15, x_137);
if (x_138 == 0)
{
obj* x_139; uint8 x_140; 
x_139 = l_Lean_Parser_Term_sort_HasView_x27___lambda__1___closed__4;
x_140 = lean_name_dec_eq(x_15, x_139);
if (x_140 == 0)
{
obj* x_141; uint8 x_142; 
x_141 = l_Lean_Elaborator_toPexpr___main___closed__8;
x_142 = lean_name_dec_eq(x_15, x_141);
if (x_142 == 0)
{
obj* x_143; uint8 x_144; 
x_143 = l_Lean_Elaborator_toPexpr___main___closed__9;
x_144 = lean_name_dec_eq(x_15, x_143);
if (x_144 == 0)
{
obj* x_145; uint8 x_146; 
x_145 = l_Lean_Elaborator_toPexpr___main___closed__10;
x_146 = lean_name_dec_eq(x_15, x_145);
if (x_146 == 0)
{
obj* x_147; uint8 x_148; 
x_147 = l_Lean_Elaborator_toPexpr___main___closed__11;
x_148 = lean_name_dec_eq(x_15, x_147);
if (x_148 == 0)
{
obj* x_149; uint8 x_150; 
x_149 = l_Lean_Elaborator_toPexpr___main___closed__12;
x_150 = lean_name_dec_eq(x_15, x_149);
if (x_150 == 0)
{
obj* x_151; uint8 x_152; 
x_151 = l_Lean_Elaborator_toPexpr___main___closed__13;
x_152 = lean_name_dec_eq(x_15, x_151);
if (x_152 == 0)
{
obj* x_153; uint8 x_154; 
x_153 = l_Lean_Elaborator_toPexpr___main___closed__14;
x_154 = lean_name_dec_eq(x_15, x_153);
if (x_154 == 0)
{
obj* x_155; uint8 x_156; 
x_155 = l_Lean_Elaborator_toPexpr___main___closed__15;
x_156 = lean_name_dec_eq(x_15, x_155);
if (x_156 == 0)
{
obj* x_157; uint8 x_158; 
x_157 = l_Lean_Elaborator_toPexpr___main___closed__16;
x_158 = lean_name_dec_eq(x_15, x_157);
if (x_158 == 0)
{
obj* x_159; uint8 x_160; 
x_159 = l_Lean_Elaborator_toPexpr___main___closed__17;
x_160 = lean_name_dec_eq(x_15, x_159);
if (x_160 == 0)
{
obj* x_161; uint8 x_162; 
x_161 = l_Lean_Parser_number_HasView_x27___lambda__1___closed__6;
x_162 = lean_name_dec_eq(x_15, x_161);
if (x_162 == 0)
{
obj* x_163; uint8 x_164; 
x_163 = l_Lean_Parser_currLbp___rarg___lambda__3___closed__1;
x_164 = lean_name_dec_eq(x_15, x_163);
if (x_164 == 0)
{
obj* x_165; uint8 x_166; 
x_165 = l_Lean_Elaborator_toPexpr___main___closed__18;
x_166 = lean_name_dec_eq(x_15, x_165);
if (x_166 == 0)
{
obj* x_167; uint8 x_168; 
lean::dec(x_16);
x_167 = l_Lean_Elaborator_toPexpr___main___closed__19;
x_168 = lean_name_dec_eq(x_15, x_167);
if (x_168 == 0)
{
obj* x_169; uint8 x_170; 
x_169 = l_Lean_Elaborator_toPexpr___main___closed__20;
x_170 = lean_name_dec_eq(x_15, x_169);
if (x_170 == 0)
{
obj* x_171; obj* x_172; obj* x_173; obj* x_174; obj* x_175; obj* x_176; 
lean::inc(x_1);
x_171 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_171, 0, x_1);
x_172 = l_Lean_Name_toString___closed__1;
x_173 = l_Lean_Name_toStringWithSep___main(x_172, x_15);
x_174 = l_Lean_Elaborator_toPexpr___main___closed__21;
x_175 = lean::string_append(x_174, x_173);
lean::dec(x_173);
x_176 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_171, x_175, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_171);
if (lean::obj_tag(x_176) == 0)
{
uint8 x_177; 
lean::dec(x_1);
x_177 = !lean::is_exclusive(x_176);
if (x_177 == 0)
{
return x_176;
}
else
{
obj* x_178; obj* x_179; 
x_178 = lean::cnstr_get(x_176, 0);
lean::inc(x_178);
lean::dec(x_176);
x_179 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_179, 0, x_178);
return x_179;
}
}
else
{
uint8 x_180; 
x_180 = !lean::is_exclusive(x_176);
if (x_180 == 0)
{
obj* x_181; uint8 x_182; 
x_181 = lean::cnstr_get(x_176, 0);
x_182 = !lean::is_exclusive(x_181);
if (x_182 == 0)
{
obj* x_183; obj* x_184; 
x_183 = lean::cnstr_get(x_181, 0);
x_184 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_184) == 0)
{
return x_176;
}
else
{
obj* x_185; obj* x_186; obj* x_187; obj* x_188; obj* x_189; obj* x_190; obj* x_191; obj* x_192; obj* x_193; obj* x_194; obj* x_195; obj* x_196; 
x_185 = lean::cnstr_get(x_184, 0);
lean::inc(x_185);
lean::dec(x_184);
x_186 = lean::cnstr_get(x_3, 0);
x_187 = lean::cnstr_get(x_186, 2);
x_188 = l_Lean_FileMap_toPosition(x_187, x_185);
x_189 = lean::cnstr_get(x_188, 1);
lean::inc(x_189);
x_190 = lean::box(0);
x_191 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_192 = l_Lean_KVMap_setNat(x_190, x_191, x_189);
x_193 = lean::cnstr_get(x_188, 0);
lean::inc(x_193);
lean::dec(x_188);
x_194 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_195 = l_Lean_KVMap_setNat(x_192, x_194, x_193);
x_196 = lean_expr_mk_mdata(x_195, x_183);
lean::cnstr_set(x_181, 0, x_196);
return x_176;
}
}
else
{
obj* x_197; obj* x_198; obj* x_199; 
x_197 = lean::cnstr_get(x_181, 0);
x_198 = lean::cnstr_get(x_181, 1);
lean::inc(x_198);
lean::inc(x_197);
lean::dec(x_181);
x_199 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_199) == 0)
{
obj* x_200; 
x_200 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_200, 0, x_197);
lean::cnstr_set(x_200, 1, x_198);
lean::cnstr_set(x_176, 0, x_200);
return x_176;
}
else
{
obj* x_201; obj* x_202; obj* x_203; obj* x_204; obj* x_205; obj* x_206; obj* x_207; obj* x_208; obj* x_209; obj* x_210; obj* x_211; obj* x_212; obj* x_213; 
x_201 = lean::cnstr_get(x_199, 0);
lean::inc(x_201);
lean::dec(x_199);
x_202 = lean::cnstr_get(x_3, 0);
x_203 = lean::cnstr_get(x_202, 2);
x_204 = l_Lean_FileMap_toPosition(x_203, x_201);
x_205 = lean::cnstr_get(x_204, 1);
lean::inc(x_205);
x_206 = lean::box(0);
x_207 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_208 = l_Lean_KVMap_setNat(x_206, x_207, x_205);
x_209 = lean::cnstr_get(x_204, 0);
lean::inc(x_209);
lean::dec(x_204);
x_210 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_211 = l_Lean_KVMap_setNat(x_208, x_210, x_209);
x_212 = lean_expr_mk_mdata(x_211, x_197);
x_213 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_213, 0, x_212);
lean::cnstr_set(x_213, 1, x_198);
lean::cnstr_set(x_176, 0, x_213);
return x_176;
}
}
}
else
{
obj* x_214; obj* x_215; obj* x_216; obj* x_217; obj* x_218; 
x_214 = lean::cnstr_get(x_176, 0);
lean::inc(x_214);
lean::dec(x_176);
x_215 = lean::cnstr_get(x_214, 0);
lean::inc(x_215);
x_216 = lean::cnstr_get(x_214, 1);
lean::inc(x_216);
if (lean::is_exclusive(x_214)) {
 lean::cnstr_release(x_214, 0);
 lean::cnstr_release(x_214, 1);
 x_217 = x_214;
} else {
 lean::dec_ref(x_214);
 x_217 = lean::box(0);
}
x_218 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_218) == 0)
{
obj* x_219; obj* x_220; 
if (lean::is_scalar(x_217)) {
 x_219 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_219 = x_217;
}
lean::cnstr_set(x_219, 0, x_215);
lean::cnstr_set(x_219, 1, x_216);
x_220 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_220, 0, x_219);
return x_220;
}
else
{
obj* x_221; obj* x_222; obj* x_223; obj* x_224; obj* x_225; obj* x_226; obj* x_227; obj* x_228; obj* x_229; obj* x_230; obj* x_231; obj* x_232; obj* x_233; obj* x_234; 
x_221 = lean::cnstr_get(x_218, 0);
lean::inc(x_221);
lean::dec(x_218);
x_222 = lean::cnstr_get(x_3, 0);
x_223 = lean::cnstr_get(x_222, 2);
x_224 = l_Lean_FileMap_toPosition(x_223, x_221);
x_225 = lean::cnstr_get(x_224, 1);
lean::inc(x_225);
x_226 = lean::box(0);
x_227 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_228 = l_Lean_KVMap_setNat(x_226, x_227, x_225);
x_229 = lean::cnstr_get(x_224, 0);
lean::inc(x_229);
lean::dec(x_224);
x_230 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_231 = l_Lean_KVMap_setNat(x_228, x_230, x_229);
x_232 = lean_expr_mk_mdata(x_231, x_215);
if (lean::is_scalar(x_217)) {
 x_233 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_233 = x_217;
}
lean::cnstr_set(x_233, 0, x_232);
lean::cnstr_set(x_233, 1, x_216);
x_234 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_234, 0, x_233);
return x_234;
}
}
}
}
else
{
obj* x_235; obj* x_236; obj* x_237; obj* x_238; obj* x_239; obj* x_240; 
x_235 = l_Lean_Parser_Term_match_HasView;
x_236 = lean::cnstr_get(x_235, 0);
lean::inc(x_236);
lean::inc(x_1);
x_237 = lean::apply_1(x_236, x_1);
x_238 = lean::cnstr_get(x_237, 5);
lean::inc(x_238);
x_239 = l_List_map___main___at_Lean_Elaborator_toPexpr___main___spec__2(x_238);
x_240 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3(x_239, x_2, x_3, x_4);
if (lean::obj_tag(x_240) == 0)
{
uint8 x_241; 
lean::dec(x_237);
x_241 = !lean::is_exclusive(x_240);
if (x_241 == 0)
{
x_17 = x_240;
goto block_85;
}
else
{
obj* x_242; obj* x_243; 
x_242 = lean::cnstr_get(x_240, 0);
lean::inc(x_242);
lean::dec(x_240);
x_243 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_243, 0, x_242);
x_17 = x_243;
goto block_85;
}
}
else
{
obj* x_244; obj* x_245; obj* x_246; obj* x_247; obj* x_248; obj* x_249; 
x_244 = lean::cnstr_get(x_240, 0);
lean::inc(x_244);
lean::dec(x_240);
x_245 = lean::cnstr_get(x_244, 0);
lean::inc(x_245);
x_246 = lean::cnstr_get(x_244, 1);
lean::inc(x_246);
lean::dec(x_244);
x_247 = lean::cnstr_get(x_237, 2);
lean::inc(x_247);
x_248 = l_Lean_Expander_getOptType___main(x_247);
lean::dec(x_247);
x_249 = l_Lean_Elaborator_toPexpr___main(x_248, x_2, x_3, x_246);
if (lean::obj_tag(x_249) == 0)
{
uint8 x_250; 
lean::dec(x_245);
lean::dec(x_237);
x_250 = !lean::is_exclusive(x_249);
if (x_250 == 0)
{
x_17 = x_249;
goto block_85;
}
else
{
obj* x_251; obj* x_252; 
x_251 = lean::cnstr_get(x_249, 0);
lean::inc(x_251);
lean::dec(x_249);
x_252 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_252, 0, x_251);
x_17 = x_252;
goto block_85;
}
}
else
{
obj* x_253; obj* x_254; obj* x_255; obj* x_256; 
x_253 = lean::cnstr_get(x_249, 0);
lean::inc(x_253);
lean::dec(x_249);
x_254 = lean::cnstr_get(x_253, 0);
lean::inc(x_254);
x_255 = lean::cnstr_get(x_253, 1);
lean::inc(x_255);
lean::dec(x_253);
x_256 = l_Lean_Elaborator_mkEqns(x_254, x_245);
if (lean::obj_tag(x_256) == 10)
{
obj* x_257; obj* x_258; obj* x_259; uint8 x_260; obj* x_261; obj* x_262; obj* x_263; obj* x_264; 
x_257 = lean::cnstr_get(x_256, 0);
lean::inc(x_257);
x_258 = lean::cnstr_get(x_256, 1);
lean::inc(x_258);
lean::dec(x_256);
x_259 = l_Lean_Elaborator_toPexpr___main___closed__22;
x_260 = 1;
x_261 = l_Lean_KVMap_setBool(x_257, x_259, x_260);
x_262 = lean_expr_mk_mdata(x_261, x_258);
x_263 = lean::cnstr_get(x_237, 1);
lean::inc(x_263);
lean::dec(x_237);
x_264 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__1(x_263, x_2, x_3, x_255);
if (lean::obj_tag(x_264) == 0)
{
uint8 x_265; 
lean::dec(x_262);
x_265 = !lean::is_exclusive(x_264);
if (x_265 == 0)
{
x_17 = x_264;
goto block_85;
}
else
{
obj* x_266; obj* x_267; 
x_266 = lean::cnstr_get(x_264, 0);
lean::inc(x_266);
lean::dec(x_264);
x_267 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_267, 0, x_266);
x_17 = x_267;
goto block_85;
}
}
else
{
uint8 x_268; 
x_268 = !lean::is_exclusive(x_264);
if (x_268 == 0)
{
obj* x_269; uint8 x_270; 
x_269 = lean::cnstr_get(x_264, 0);
x_270 = !lean::is_exclusive(x_269);
if (x_270 == 0)
{
obj* x_271; obj* x_272; 
x_271 = lean::cnstr_get(x_269, 0);
x_272 = l_List_foldl___main___at_Lean_Expr_mkApp___spec__1(x_262, x_271);
lean::cnstr_set(x_269, 0, x_272);
x_17 = x_264;
goto block_85;
}
else
{
obj* x_273; obj* x_274; obj* x_275; obj* x_276; 
x_273 = lean::cnstr_get(x_269, 0);
x_274 = lean::cnstr_get(x_269, 1);
lean::inc(x_274);
lean::inc(x_273);
lean::dec(x_269);
x_275 = l_List_foldl___main___at_Lean_Expr_mkApp___spec__1(x_262, x_273);
x_276 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_276, 0, x_275);
lean::cnstr_set(x_276, 1, x_274);
lean::cnstr_set(x_264, 0, x_276);
x_17 = x_264;
goto block_85;
}
}
else
{
obj* x_277; obj* x_278; obj* x_279; obj* x_280; obj* x_281; obj* x_282; obj* x_283; 
x_277 = lean::cnstr_get(x_264, 0);
lean::inc(x_277);
lean::dec(x_264);
x_278 = lean::cnstr_get(x_277, 0);
lean::inc(x_278);
x_279 = lean::cnstr_get(x_277, 1);
lean::inc(x_279);
if (lean::is_exclusive(x_277)) {
 lean::cnstr_release(x_277, 0);
 lean::cnstr_release(x_277, 1);
 x_280 = x_277;
} else {
 lean::dec_ref(x_277);
 x_280 = lean::box(0);
}
x_281 = l_List_foldl___main___at_Lean_Expr_mkApp___spec__1(x_262, x_278);
if (lean::is_scalar(x_280)) {
 x_282 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_282 = x_280;
}
lean::cnstr_set(x_282, 0, x_281);
lean::cnstr_set(x_282, 1, x_279);
x_283 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_283, 0, x_282);
x_17 = x_283;
goto block_85;
}
}
}
else
{
obj* x_284; obj* x_285; obj* x_286; 
lean::dec(x_256);
lean::dec(x_237);
lean::inc(x_1);
x_284 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_284, 0, x_1);
x_285 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2;
x_286 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_284, x_285, x_2, x_3, x_255);
lean::dec(x_255);
lean::dec(x_284);
x_17 = x_286;
goto block_85;
}
}
}
}
}
else
{
obj* x_287; obj* x_288; obj* x_289; obj* x_290; obj* x_291; obj* x_292; obj* x_293; obj* x_294; obj* x_295; obj* x_296; 
x_287 = l_Lean_Parser_Term_structInst_HasView;
x_288 = lean::cnstr_get(x_287, 0);
lean::inc(x_288);
lean::inc(x_1);
x_289 = lean::apply_1(x_288, x_1);
x_290 = lean::cnstr_get(x_289, 3);
lean::inc(x_290);
x_291 = lean::box(0);
x_292 = l_List_spanAux___main___at_Lean_Elaborator_toPexpr___main___spec__4(x_290, x_291);
x_293 = lean::cnstr_get(x_292, 0);
lean::inc(x_293);
x_294 = lean::cnstr_get(x_292, 1);
lean::inc(x_294);
lean::dec(x_292);
x_295 = l_List_spanAux___main___at_Lean_Elaborator_toPexpr___main___spec__5(x_294, x_291);
x_296 = lean::cnstr_get(x_295, 1);
lean::inc(x_296);
if (lean::obj_tag(x_296) == 0)
{
obj* x_297; obj* x_298; 
x_297 = lean::cnstr_get(x_295, 0);
lean::inc(x_297);
lean::dec(x_295);
lean::inc(x_1);
x_298 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6(x_1, x_293, x_2, x_3, x_4);
if (lean::obj_tag(x_298) == 0)
{
uint8 x_299; 
lean::dec(x_297);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_299 = !lean::is_exclusive(x_298);
if (x_299 == 0)
{
return x_298;
}
else
{
obj* x_300; obj* x_301; 
x_300 = lean::cnstr_get(x_298, 0);
lean::inc(x_300);
lean::dec(x_298);
x_301 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_301, 0, x_300);
return x_301;
}
}
else
{
obj* x_302; obj* x_303; obj* x_304; obj* x_305; obj* x_355; 
x_302 = lean::cnstr_get(x_298, 0);
lean::inc(x_302);
lean::dec(x_298);
x_303 = lean::cnstr_get(x_302, 0);
lean::inc(x_303);
x_304 = lean::cnstr_get(x_302, 1);
lean::inc(x_304);
lean::dec(x_302);
lean::inc(x_1);
x_355 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__8(x_1, x_297, x_2, x_3, x_304);
if (lean::obj_tag(x_355) == 0)
{
uint8 x_356; 
lean::dec(x_303);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_356 = !lean::is_exclusive(x_355);
if (x_356 == 0)
{
return x_355;
}
else
{
obj* x_357; obj* x_358; 
x_357 = lean::cnstr_get(x_355, 0);
lean::inc(x_357);
lean::dec(x_355);
x_358 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_358, 0, x_357);
return x_358;
}
}
else
{
obj* x_359; obj* x_360; 
x_359 = lean::cnstr_get(x_355, 0);
lean::inc(x_359);
lean::dec(x_355);
x_360 = lean::cnstr_get(x_289, 2);
lean::inc(x_360);
if (lean::obj_tag(x_360) == 0)
{
uint8 x_361; 
x_361 = !lean::is_exclusive(x_359);
if (x_361 == 0)
{
x_305 = x_359;
goto block_354;
}
else
{
obj* x_362; obj* x_363; obj* x_364; 
x_362 = lean::cnstr_get(x_359, 0);
x_363 = lean::cnstr_get(x_359, 1);
lean::inc(x_363);
lean::inc(x_362);
lean::dec(x_359);
x_364 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_364, 0, x_362);
lean::cnstr_set(x_364, 1, x_363);
x_305 = x_364;
goto block_354;
}
}
else
{
obj* x_365; obj* x_366; obj* x_367; obj* x_368; obj* x_369; 
x_365 = lean::cnstr_get(x_359, 0);
lean::inc(x_365);
x_366 = lean::cnstr_get(x_359, 1);
lean::inc(x_366);
lean::dec(x_359);
x_367 = lean::cnstr_get(x_360, 0);
lean::inc(x_367);
lean::dec(x_360);
x_368 = lean::cnstr_get(x_367, 0);
lean::inc(x_368);
lean::dec(x_367);
x_369 = l_Lean_Elaborator_toPexpr___main(x_368, x_2, x_3, x_366);
if (lean::obj_tag(x_369) == 0)
{
uint8 x_370; 
lean::dec(x_365);
lean::dec(x_303);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_370 = !lean::is_exclusive(x_369);
if (x_370 == 0)
{
return x_369;
}
else
{
obj* x_371; obj* x_372; 
x_371 = lean::cnstr_get(x_369, 0);
lean::inc(x_371);
lean::dec(x_369);
x_372 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_372, 0, x_371);
return x_372;
}
}
else
{
obj* x_373; uint8 x_374; 
x_373 = lean::cnstr_get(x_369, 0);
lean::inc(x_373);
lean::dec(x_369);
x_374 = !lean::is_exclusive(x_373);
if (x_374 == 0)
{
obj* x_375; obj* x_376; obj* x_377; 
x_375 = lean::cnstr_get(x_373, 0);
x_376 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_376, 0, x_375);
lean::cnstr_set(x_376, 1, x_291);
x_377 = l_List_append___rarg(x_365, x_376);
lean::cnstr_set(x_373, 0, x_377);
x_305 = x_373;
goto block_354;
}
else
{
obj* x_378; obj* x_379; obj* x_380; obj* x_381; obj* x_382; 
x_378 = lean::cnstr_get(x_373, 0);
x_379 = lean::cnstr_get(x_373, 1);
lean::inc(x_379);
lean::inc(x_378);
lean::dec(x_373);
x_380 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_380, 0, x_378);
lean::cnstr_set(x_380, 1, x_291);
x_381 = l_List_append___rarg(x_365, x_380);
x_382 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_382, 0, x_381);
lean::cnstr_set(x_382, 1, x_379);
x_305 = x_382;
goto block_354;
}
}
}
}
block_354:
{
uint8 x_306; 
x_306 = !lean::is_exclusive(x_305);
if (x_306 == 0)
{
obj* x_307; obj* x_308; obj* x_309; obj* x_310; obj* x_311; obj* x_312; uint8 x_313; obj* x_314; obj* x_315; obj* x_316; obj* x_317; obj* x_318; 
x_307 = lean::cnstr_get(x_305, 0);
x_308 = lean::mk_nat_obj(0u);
x_309 = l_List_lengthAux___main___rarg(x_303, x_308);
x_310 = l_Lean_Elaborator_toPexpr___main___closed__23;
x_311 = l_Lean_KVMap_setNat(x_291, x_310, x_309);
x_312 = l_Lean_Elaborator_toPexpr___main___closed__24;
x_313 = 0;
x_314 = l_Lean_KVMap_setBool(x_311, x_312, x_313);
x_315 = lean::cnstr_get(x_289, 1);
lean::inc(x_315);
lean::dec(x_289);
x_316 = l_List_append___rarg(x_303, x_307);
x_317 = l_Lean_Elaborator_toPexpr___main___closed__25;
x_318 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_317, x_316);
if (lean::obj_tag(x_315) == 0)
{
obj* x_319; obj* x_320; obj* x_321; obj* x_322; 
x_319 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_320 = lean::box(0);
x_321 = l_Lean_KVMap_setName(x_314, x_319, x_320);
x_322 = lean_expr_mk_mdata(x_321, x_318);
lean::cnstr_set(x_305, 0, x_322);
x_86 = x_305;
goto block_130;
}
else
{
obj* x_323; obj* x_324; obj* x_325; obj* x_326; obj* x_327; obj* x_328; 
x_323 = lean::cnstr_get(x_315, 0);
lean::inc(x_323);
lean::dec(x_315);
x_324 = lean::cnstr_get(x_323, 0);
lean::inc(x_324);
lean::dec(x_323);
x_325 = l_Lean_Elaborator_mangleIdent(x_324);
x_326 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_327 = l_Lean_KVMap_setName(x_314, x_326, x_325);
x_328 = lean_expr_mk_mdata(x_327, x_318);
lean::cnstr_set(x_305, 0, x_328);
x_86 = x_305;
goto block_130;
}
}
else
{
obj* x_329; obj* x_330; obj* x_331; obj* x_332; obj* x_333; obj* x_334; obj* x_335; uint8 x_336; obj* x_337; obj* x_338; obj* x_339; obj* x_340; obj* x_341; 
x_329 = lean::cnstr_get(x_305, 0);
x_330 = lean::cnstr_get(x_305, 1);
lean::inc(x_330);
lean::inc(x_329);
lean::dec(x_305);
x_331 = lean::mk_nat_obj(0u);
x_332 = l_List_lengthAux___main___rarg(x_303, x_331);
x_333 = l_Lean_Elaborator_toPexpr___main___closed__23;
x_334 = l_Lean_KVMap_setNat(x_291, x_333, x_332);
x_335 = l_Lean_Elaborator_toPexpr___main___closed__24;
x_336 = 0;
x_337 = l_Lean_KVMap_setBool(x_334, x_335, x_336);
x_338 = lean::cnstr_get(x_289, 1);
lean::inc(x_338);
lean::dec(x_289);
x_339 = l_List_append___rarg(x_303, x_329);
x_340 = l_Lean_Elaborator_toPexpr___main___closed__25;
x_341 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_340, x_339);
if (lean::obj_tag(x_338) == 0)
{
obj* x_342; obj* x_343; obj* x_344; obj* x_345; obj* x_346; 
x_342 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_343 = lean::box(0);
x_344 = l_Lean_KVMap_setName(x_337, x_342, x_343);
x_345 = lean_expr_mk_mdata(x_344, x_341);
x_346 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_346, 0, x_345);
lean::cnstr_set(x_346, 1, x_330);
x_86 = x_346;
goto block_130;
}
else
{
obj* x_347; obj* x_348; obj* x_349; obj* x_350; obj* x_351; obj* x_352; obj* x_353; 
x_347 = lean::cnstr_get(x_338, 0);
lean::inc(x_347);
lean::dec(x_338);
x_348 = lean::cnstr_get(x_347, 0);
lean::inc(x_348);
lean::dec(x_347);
x_349 = l_Lean_Elaborator_mangleIdent(x_348);
x_350 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_351 = l_Lean_KVMap_setName(x_337, x_350, x_349);
x_352 = lean_expr_mk_mdata(x_351, x_341);
x_353 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_353, 0, x_352);
lean::cnstr_set(x_353, 1, x_330);
x_86 = x_353;
goto block_130;
}
}
}
}
}
else
{
obj* x_383; obj* x_384; 
x_383 = lean::cnstr_get(x_296, 0);
lean::inc(x_383);
x_384 = lean::cnstr_get(x_383, 0);
lean::inc(x_384);
lean::dec(x_383);
if (lean::obj_tag(x_384) == 0)
{
uint8 x_385; 
x_385 = !lean::is_exclusive(x_296);
if (x_385 == 0)
{
obj* x_386; obj* x_387; obj* x_388; obj* x_389; obj* x_390; obj* x_391; obj* x_392; obj* x_393; obj* x_394; 
x_386 = lean::cnstr_get(x_296, 1);
lean::dec(x_386);
x_387 = lean::cnstr_get(x_296, 0);
lean::dec(x_387);
x_388 = lean::cnstr_get(x_295, 0);
lean::inc(x_388);
lean::dec(x_295);
x_389 = l_Lean_Parser_Term_structInstItem_HasView;
x_390 = lean::cnstr_get(x_389, 1);
lean::inc(x_390);
x_391 = lean::apply_1(x_390, x_384);
x_392 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_392, 0, x_391);
x_393 = l_Lean_Elaborator_toPexpr___main___closed__27;
x_394 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_392, x_393, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_392);
if (lean::obj_tag(x_394) == 0)
{
uint8 x_395; 
lean::dec(x_388);
lean::free_heap_obj(x_296);
lean::dec(x_293);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_395 = !lean::is_exclusive(x_394);
if (x_395 == 0)
{
return x_394;
}
else
{
obj* x_396; obj* x_397; 
x_396 = lean::cnstr_get(x_394, 0);
lean::inc(x_396);
lean::dec(x_394);
x_397 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_397, 0, x_396);
return x_397;
}
}
else
{
obj* x_398; obj* x_399; obj* x_400; obj* x_401; 
x_398 = lean::cnstr_get(x_394, 0);
lean::inc(x_398);
lean::dec(x_394);
x_399 = lean::cnstr_get(x_398, 0);
lean::inc(x_399);
x_400 = lean::cnstr_get(x_398, 1);
lean::inc(x_400);
lean::dec(x_398);
lean::inc(x_1);
x_401 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__9(x_1, x_293, x_2, x_3, x_400);
if (lean::obj_tag(x_401) == 0)
{
uint8 x_402; 
lean::dec(x_399);
lean::dec(x_388);
lean::free_heap_obj(x_296);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_402 = !lean::is_exclusive(x_401);
if (x_402 == 0)
{
return x_401;
}
else
{
obj* x_403; obj* x_404; 
x_403 = lean::cnstr_get(x_401, 0);
lean::inc(x_403);
lean::dec(x_401);
x_404 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_404, 0, x_403);
return x_404;
}
}
else
{
obj* x_405; obj* x_406; obj* x_407; obj* x_408; obj* x_458; 
x_405 = lean::cnstr_get(x_401, 0);
lean::inc(x_405);
lean::dec(x_401);
x_406 = lean::cnstr_get(x_405, 0);
lean::inc(x_406);
x_407 = lean::cnstr_get(x_405, 1);
lean::inc(x_407);
lean::dec(x_405);
lean::inc(x_1);
x_458 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__10(x_1, x_388, x_2, x_3, x_407);
if (lean::obj_tag(x_458) == 0)
{
uint8 x_459; 
lean::dec(x_406);
lean::dec(x_399);
lean::free_heap_obj(x_296);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_459 = !lean::is_exclusive(x_458);
if (x_459 == 0)
{
return x_458;
}
else
{
obj* x_460; obj* x_461; 
x_460 = lean::cnstr_get(x_458, 0);
lean::inc(x_460);
lean::dec(x_458);
x_461 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_461, 0, x_460);
return x_461;
}
}
else
{
obj* x_462; obj* x_463; 
x_462 = lean::cnstr_get(x_458, 0);
lean::inc(x_462);
lean::dec(x_458);
x_463 = lean::cnstr_get(x_289, 2);
lean::inc(x_463);
if (lean::obj_tag(x_463) == 0)
{
uint8 x_464; 
lean::free_heap_obj(x_296);
x_464 = !lean::is_exclusive(x_462);
if (x_464 == 0)
{
x_408 = x_462;
goto block_457;
}
else
{
obj* x_465; obj* x_466; obj* x_467; 
x_465 = lean::cnstr_get(x_462, 0);
x_466 = lean::cnstr_get(x_462, 1);
lean::inc(x_466);
lean::inc(x_465);
lean::dec(x_462);
x_467 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_467, 0, x_465);
lean::cnstr_set(x_467, 1, x_466);
x_408 = x_467;
goto block_457;
}
}
else
{
obj* x_468; obj* x_469; obj* x_470; obj* x_471; obj* x_472; 
x_468 = lean::cnstr_get(x_462, 0);
lean::inc(x_468);
x_469 = lean::cnstr_get(x_462, 1);
lean::inc(x_469);
lean::dec(x_462);
x_470 = lean::cnstr_get(x_463, 0);
lean::inc(x_470);
lean::dec(x_463);
x_471 = lean::cnstr_get(x_470, 0);
lean::inc(x_471);
lean::dec(x_470);
x_472 = l_Lean_Elaborator_toPexpr___main(x_471, x_2, x_3, x_469);
if (lean::obj_tag(x_472) == 0)
{
uint8 x_473; 
lean::dec(x_468);
lean::dec(x_406);
lean::dec(x_399);
lean::free_heap_obj(x_296);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_473 = !lean::is_exclusive(x_472);
if (x_473 == 0)
{
return x_472;
}
else
{
obj* x_474; obj* x_475; 
x_474 = lean::cnstr_get(x_472, 0);
lean::inc(x_474);
lean::dec(x_472);
x_475 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_475, 0, x_474);
return x_475;
}
}
else
{
obj* x_476; uint8 x_477; 
x_476 = lean::cnstr_get(x_472, 0);
lean::inc(x_476);
lean::dec(x_472);
x_477 = !lean::is_exclusive(x_476);
if (x_477 == 0)
{
obj* x_478; obj* x_479; 
x_478 = lean::cnstr_get(x_476, 0);
lean::cnstr_set(x_296, 1, x_291);
lean::cnstr_set(x_296, 0, x_478);
x_479 = l_List_append___rarg(x_468, x_296);
lean::cnstr_set(x_476, 0, x_479);
x_408 = x_476;
goto block_457;
}
else
{
obj* x_480; obj* x_481; obj* x_482; obj* x_483; 
x_480 = lean::cnstr_get(x_476, 0);
x_481 = lean::cnstr_get(x_476, 1);
lean::inc(x_481);
lean::inc(x_480);
lean::dec(x_476);
lean::cnstr_set(x_296, 1, x_291);
lean::cnstr_set(x_296, 0, x_480);
x_482 = l_List_append___rarg(x_468, x_296);
x_483 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_483, 0, x_482);
lean::cnstr_set(x_483, 1, x_481);
x_408 = x_483;
goto block_457;
}
}
}
}
block_457:
{
uint8 x_409; 
x_409 = !lean::is_exclusive(x_408);
if (x_409 == 0)
{
obj* x_410; obj* x_411; obj* x_412; obj* x_413; obj* x_414; obj* x_415; uint8 x_416; obj* x_417; obj* x_418; obj* x_419; obj* x_420; obj* x_421; 
x_410 = lean::cnstr_get(x_408, 0);
x_411 = lean::mk_nat_obj(0u);
x_412 = l_List_lengthAux___main___rarg(x_406, x_411);
x_413 = l_Lean_Elaborator_toPexpr___main___closed__23;
x_414 = l_Lean_KVMap_setNat(x_291, x_413, x_412);
x_415 = l_Lean_Elaborator_toPexpr___main___closed__24;
x_416 = lean::unbox(x_399);
lean::dec(x_399);
x_417 = l_Lean_KVMap_setBool(x_414, x_415, x_416);
x_418 = lean::cnstr_get(x_289, 1);
lean::inc(x_418);
lean::dec(x_289);
x_419 = l_List_append___rarg(x_406, x_410);
x_420 = l_Lean_Elaborator_toPexpr___main___closed__25;
x_421 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_420, x_419);
if (lean::obj_tag(x_418) == 0)
{
obj* x_422; obj* x_423; obj* x_424; obj* x_425; 
x_422 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_423 = lean::box(0);
x_424 = l_Lean_KVMap_setName(x_417, x_422, x_423);
x_425 = lean_expr_mk_mdata(x_424, x_421);
lean::cnstr_set(x_408, 0, x_425);
x_86 = x_408;
goto block_130;
}
else
{
obj* x_426; obj* x_427; obj* x_428; obj* x_429; obj* x_430; obj* x_431; 
x_426 = lean::cnstr_get(x_418, 0);
lean::inc(x_426);
lean::dec(x_418);
x_427 = lean::cnstr_get(x_426, 0);
lean::inc(x_427);
lean::dec(x_426);
x_428 = l_Lean_Elaborator_mangleIdent(x_427);
x_429 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_430 = l_Lean_KVMap_setName(x_417, x_429, x_428);
x_431 = lean_expr_mk_mdata(x_430, x_421);
lean::cnstr_set(x_408, 0, x_431);
x_86 = x_408;
goto block_130;
}
}
else
{
obj* x_432; obj* x_433; obj* x_434; obj* x_435; obj* x_436; obj* x_437; obj* x_438; uint8 x_439; obj* x_440; obj* x_441; obj* x_442; obj* x_443; obj* x_444; 
x_432 = lean::cnstr_get(x_408, 0);
x_433 = lean::cnstr_get(x_408, 1);
lean::inc(x_433);
lean::inc(x_432);
lean::dec(x_408);
x_434 = lean::mk_nat_obj(0u);
x_435 = l_List_lengthAux___main___rarg(x_406, x_434);
x_436 = l_Lean_Elaborator_toPexpr___main___closed__23;
x_437 = l_Lean_KVMap_setNat(x_291, x_436, x_435);
x_438 = l_Lean_Elaborator_toPexpr___main___closed__24;
x_439 = lean::unbox(x_399);
lean::dec(x_399);
x_440 = l_Lean_KVMap_setBool(x_437, x_438, x_439);
x_441 = lean::cnstr_get(x_289, 1);
lean::inc(x_441);
lean::dec(x_289);
x_442 = l_List_append___rarg(x_406, x_432);
x_443 = l_Lean_Elaborator_toPexpr___main___closed__25;
x_444 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_443, x_442);
if (lean::obj_tag(x_441) == 0)
{
obj* x_445; obj* x_446; obj* x_447; obj* x_448; obj* x_449; 
x_445 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_446 = lean::box(0);
x_447 = l_Lean_KVMap_setName(x_440, x_445, x_446);
x_448 = lean_expr_mk_mdata(x_447, x_444);
x_449 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_449, 0, x_448);
lean::cnstr_set(x_449, 1, x_433);
x_86 = x_449;
goto block_130;
}
else
{
obj* x_450; obj* x_451; obj* x_452; obj* x_453; obj* x_454; obj* x_455; obj* x_456; 
x_450 = lean::cnstr_get(x_441, 0);
lean::inc(x_450);
lean::dec(x_441);
x_451 = lean::cnstr_get(x_450, 0);
lean::inc(x_451);
lean::dec(x_450);
x_452 = l_Lean_Elaborator_mangleIdent(x_451);
x_453 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_454 = l_Lean_KVMap_setName(x_440, x_453, x_452);
x_455 = lean_expr_mk_mdata(x_454, x_444);
x_456 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_456, 0, x_455);
lean::cnstr_set(x_456, 1, x_433);
x_86 = x_456;
goto block_130;
}
}
}
}
}
}
else
{
obj* x_484; obj* x_485; obj* x_486; obj* x_487; obj* x_488; obj* x_489; obj* x_490; 
lean::dec(x_296);
x_484 = lean::cnstr_get(x_295, 0);
lean::inc(x_484);
lean::dec(x_295);
x_485 = l_Lean_Parser_Term_structInstItem_HasView;
x_486 = lean::cnstr_get(x_485, 1);
lean::inc(x_486);
x_487 = lean::apply_1(x_486, x_384);
x_488 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_488, 0, x_487);
x_489 = l_Lean_Elaborator_toPexpr___main___closed__27;
x_490 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_488, x_489, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_488);
if (lean::obj_tag(x_490) == 0)
{
obj* x_491; obj* x_492; obj* x_493; 
lean::dec(x_484);
lean::dec(x_293);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_491 = lean::cnstr_get(x_490, 0);
lean::inc(x_491);
if (lean::is_exclusive(x_490)) {
 lean::cnstr_release(x_490, 0);
 x_492 = x_490;
} else {
 lean::dec_ref(x_490);
 x_492 = lean::box(0);
}
if (lean::is_scalar(x_492)) {
 x_493 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_493 = x_492;
}
lean::cnstr_set(x_493, 0, x_491);
return x_493;
}
else
{
obj* x_494; obj* x_495; obj* x_496; obj* x_497; 
x_494 = lean::cnstr_get(x_490, 0);
lean::inc(x_494);
lean::dec(x_490);
x_495 = lean::cnstr_get(x_494, 0);
lean::inc(x_495);
x_496 = lean::cnstr_get(x_494, 1);
lean::inc(x_496);
lean::dec(x_494);
lean::inc(x_1);
x_497 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__9(x_1, x_293, x_2, x_3, x_496);
if (lean::obj_tag(x_497) == 0)
{
obj* x_498; obj* x_499; obj* x_500; 
lean::dec(x_495);
lean::dec(x_484);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_498 = lean::cnstr_get(x_497, 0);
lean::inc(x_498);
if (lean::is_exclusive(x_497)) {
 lean::cnstr_release(x_497, 0);
 x_499 = x_497;
} else {
 lean::dec_ref(x_497);
 x_499 = lean::box(0);
}
if (lean::is_scalar(x_499)) {
 x_500 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_500 = x_499;
}
lean::cnstr_set(x_500, 0, x_498);
return x_500;
}
else
{
obj* x_501; obj* x_502; obj* x_503; obj* x_504; obj* x_532; 
x_501 = lean::cnstr_get(x_497, 0);
lean::inc(x_501);
lean::dec(x_497);
x_502 = lean::cnstr_get(x_501, 0);
lean::inc(x_502);
x_503 = lean::cnstr_get(x_501, 1);
lean::inc(x_503);
lean::dec(x_501);
lean::inc(x_1);
x_532 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__10(x_1, x_484, x_2, x_3, x_503);
if (lean::obj_tag(x_532) == 0)
{
obj* x_533; obj* x_534; obj* x_535; 
lean::dec(x_502);
lean::dec(x_495);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_533 = lean::cnstr_get(x_532, 0);
lean::inc(x_533);
if (lean::is_exclusive(x_532)) {
 lean::cnstr_release(x_532, 0);
 x_534 = x_532;
} else {
 lean::dec_ref(x_532);
 x_534 = lean::box(0);
}
if (lean::is_scalar(x_534)) {
 x_535 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_535 = x_534;
}
lean::cnstr_set(x_535, 0, x_533);
return x_535;
}
else
{
obj* x_536; obj* x_537; 
x_536 = lean::cnstr_get(x_532, 0);
lean::inc(x_536);
lean::dec(x_532);
x_537 = lean::cnstr_get(x_289, 2);
lean::inc(x_537);
if (lean::obj_tag(x_537) == 0)
{
obj* x_538; obj* x_539; obj* x_540; obj* x_541; 
x_538 = lean::cnstr_get(x_536, 0);
lean::inc(x_538);
x_539 = lean::cnstr_get(x_536, 1);
lean::inc(x_539);
if (lean::is_exclusive(x_536)) {
 lean::cnstr_release(x_536, 0);
 lean::cnstr_release(x_536, 1);
 x_540 = x_536;
} else {
 lean::dec_ref(x_536);
 x_540 = lean::box(0);
}
if (lean::is_scalar(x_540)) {
 x_541 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_541 = x_540;
}
lean::cnstr_set(x_541, 0, x_538);
lean::cnstr_set(x_541, 1, x_539);
x_504 = x_541;
goto block_531;
}
else
{
obj* x_542; obj* x_543; obj* x_544; obj* x_545; obj* x_546; 
x_542 = lean::cnstr_get(x_536, 0);
lean::inc(x_542);
x_543 = lean::cnstr_get(x_536, 1);
lean::inc(x_543);
lean::dec(x_536);
x_544 = lean::cnstr_get(x_537, 0);
lean::inc(x_544);
lean::dec(x_537);
x_545 = lean::cnstr_get(x_544, 0);
lean::inc(x_545);
lean::dec(x_544);
x_546 = l_Lean_Elaborator_toPexpr___main(x_545, x_2, x_3, x_543);
if (lean::obj_tag(x_546) == 0)
{
obj* x_547; obj* x_548; obj* x_549; 
lean::dec(x_542);
lean::dec(x_502);
lean::dec(x_495);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_547 = lean::cnstr_get(x_546, 0);
lean::inc(x_547);
if (lean::is_exclusive(x_546)) {
 lean::cnstr_release(x_546, 0);
 x_548 = x_546;
} else {
 lean::dec_ref(x_546);
 x_548 = lean::box(0);
}
if (lean::is_scalar(x_548)) {
 x_549 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_549 = x_548;
}
lean::cnstr_set(x_549, 0, x_547);
return x_549;
}
else
{
obj* x_550; obj* x_551; obj* x_552; obj* x_553; obj* x_554; obj* x_555; obj* x_556; 
x_550 = lean::cnstr_get(x_546, 0);
lean::inc(x_550);
lean::dec(x_546);
x_551 = lean::cnstr_get(x_550, 0);
lean::inc(x_551);
x_552 = lean::cnstr_get(x_550, 1);
lean::inc(x_552);
if (lean::is_exclusive(x_550)) {
 lean::cnstr_release(x_550, 0);
 lean::cnstr_release(x_550, 1);
 x_553 = x_550;
} else {
 lean::dec_ref(x_550);
 x_553 = lean::box(0);
}
x_554 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_554, 0, x_551);
lean::cnstr_set(x_554, 1, x_291);
x_555 = l_List_append___rarg(x_542, x_554);
if (lean::is_scalar(x_553)) {
 x_556 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_556 = x_553;
}
lean::cnstr_set(x_556, 0, x_555);
lean::cnstr_set(x_556, 1, x_552);
x_504 = x_556;
goto block_531;
}
}
}
block_531:
{
obj* x_505; obj* x_506; obj* x_507; obj* x_508; obj* x_509; obj* x_510; obj* x_511; obj* x_512; uint8 x_513; obj* x_514; obj* x_515; obj* x_516; obj* x_517; obj* x_518; 
x_505 = lean::cnstr_get(x_504, 0);
lean::inc(x_505);
x_506 = lean::cnstr_get(x_504, 1);
lean::inc(x_506);
if (lean::is_exclusive(x_504)) {
 lean::cnstr_release(x_504, 0);
 lean::cnstr_release(x_504, 1);
 x_507 = x_504;
} else {
 lean::dec_ref(x_504);
 x_507 = lean::box(0);
}
x_508 = lean::mk_nat_obj(0u);
x_509 = l_List_lengthAux___main___rarg(x_502, x_508);
x_510 = l_Lean_Elaborator_toPexpr___main___closed__23;
x_511 = l_Lean_KVMap_setNat(x_291, x_510, x_509);
x_512 = l_Lean_Elaborator_toPexpr___main___closed__24;
x_513 = lean::unbox(x_495);
lean::dec(x_495);
x_514 = l_Lean_KVMap_setBool(x_511, x_512, x_513);
x_515 = lean::cnstr_get(x_289, 1);
lean::inc(x_515);
lean::dec(x_289);
x_516 = l_List_append___rarg(x_502, x_505);
x_517 = l_Lean_Elaborator_toPexpr___main___closed__25;
x_518 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_517, x_516);
if (lean::obj_tag(x_515) == 0)
{
obj* x_519; obj* x_520; obj* x_521; obj* x_522; obj* x_523; 
x_519 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_520 = lean::box(0);
x_521 = l_Lean_KVMap_setName(x_514, x_519, x_520);
x_522 = lean_expr_mk_mdata(x_521, x_518);
if (lean::is_scalar(x_507)) {
 x_523 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_523 = x_507;
}
lean::cnstr_set(x_523, 0, x_522);
lean::cnstr_set(x_523, 1, x_506);
x_86 = x_523;
goto block_130;
}
else
{
obj* x_524; obj* x_525; obj* x_526; obj* x_527; obj* x_528; obj* x_529; obj* x_530; 
x_524 = lean::cnstr_get(x_515, 0);
lean::inc(x_524);
lean::dec(x_515);
x_525 = lean::cnstr_get(x_524, 0);
lean::inc(x_525);
lean::dec(x_524);
x_526 = l_Lean_Elaborator_mangleIdent(x_525);
x_527 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_528 = l_Lean_KVMap_setName(x_514, x_527, x_526);
x_529 = lean_expr_mk_mdata(x_528, x_518);
if (lean::is_scalar(x_507)) {
 x_530 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_530 = x_507;
}
lean::cnstr_set(x_530, 0, x_529);
lean::cnstr_set(x_530, 1, x_506);
x_86 = x_530;
goto block_130;
}
}
}
}
}
}
else
{
uint8 x_557; 
x_557 = !lean::is_exclusive(x_296);
if (x_557 == 0)
{
obj* x_558; obj* x_559; 
x_558 = lean::cnstr_get(x_296, 1);
x_559 = lean::cnstr_get(x_296, 0);
lean::dec(x_559);
if (lean::obj_tag(x_558) == 0)
{
obj* x_560; obj* x_561; 
lean::dec(x_384);
x_560 = lean::cnstr_get(x_295, 0);
lean::inc(x_560);
lean::dec(x_295);
lean::inc(x_1);
x_561 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__11(x_1, x_293, x_2, x_3, x_4);
if (lean::obj_tag(x_561) == 0)
{
uint8 x_562; 
lean::dec(x_560);
lean::free_heap_obj(x_296);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_562 = !lean::is_exclusive(x_561);
if (x_562 == 0)
{
return x_561;
}
else
{
obj* x_563; obj* x_564; 
x_563 = lean::cnstr_get(x_561, 0);
lean::inc(x_563);
lean::dec(x_561);
x_564 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_564, 0, x_563);
return x_564;
}
}
else
{
obj* x_565; obj* x_566; obj* x_567; obj* x_568; obj* x_618; 
x_565 = lean::cnstr_get(x_561, 0);
lean::inc(x_565);
lean::dec(x_561);
x_566 = lean::cnstr_get(x_565, 0);
lean::inc(x_566);
x_567 = lean::cnstr_get(x_565, 1);
lean::inc(x_567);
lean::dec(x_565);
lean::inc(x_1);
x_618 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__12(x_1, x_560, x_2, x_3, x_567);
if (lean::obj_tag(x_618) == 0)
{
uint8 x_619; 
lean::dec(x_566);
lean::free_heap_obj(x_296);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_619 = !lean::is_exclusive(x_618);
if (x_619 == 0)
{
return x_618;
}
else
{
obj* x_620; obj* x_621; 
x_620 = lean::cnstr_get(x_618, 0);
lean::inc(x_620);
lean::dec(x_618);
x_621 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_621, 0, x_620);
return x_621;
}
}
else
{
obj* x_622; obj* x_623; 
x_622 = lean::cnstr_get(x_618, 0);
lean::inc(x_622);
lean::dec(x_618);
x_623 = lean::cnstr_get(x_289, 2);
lean::inc(x_623);
if (lean::obj_tag(x_623) == 0)
{
uint8 x_624; 
lean::free_heap_obj(x_296);
x_624 = !lean::is_exclusive(x_622);
if (x_624 == 0)
{
x_568 = x_622;
goto block_617;
}
else
{
obj* x_625; obj* x_626; obj* x_627; 
x_625 = lean::cnstr_get(x_622, 0);
x_626 = lean::cnstr_get(x_622, 1);
lean::inc(x_626);
lean::inc(x_625);
lean::dec(x_622);
x_627 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_627, 0, x_625);
lean::cnstr_set(x_627, 1, x_626);
x_568 = x_627;
goto block_617;
}
}
else
{
obj* x_628; obj* x_629; obj* x_630; obj* x_631; obj* x_632; 
x_628 = lean::cnstr_get(x_622, 0);
lean::inc(x_628);
x_629 = lean::cnstr_get(x_622, 1);
lean::inc(x_629);
lean::dec(x_622);
x_630 = lean::cnstr_get(x_623, 0);
lean::inc(x_630);
lean::dec(x_623);
x_631 = lean::cnstr_get(x_630, 0);
lean::inc(x_631);
lean::dec(x_630);
x_632 = l_Lean_Elaborator_toPexpr___main(x_631, x_2, x_3, x_629);
if (lean::obj_tag(x_632) == 0)
{
uint8 x_633; 
lean::dec(x_628);
lean::dec(x_566);
lean::free_heap_obj(x_296);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_633 = !lean::is_exclusive(x_632);
if (x_633 == 0)
{
return x_632;
}
else
{
obj* x_634; obj* x_635; 
x_634 = lean::cnstr_get(x_632, 0);
lean::inc(x_634);
lean::dec(x_632);
x_635 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_635, 0, x_634);
return x_635;
}
}
else
{
obj* x_636; uint8 x_637; 
x_636 = lean::cnstr_get(x_632, 0);
lean::inc(x_636);
lean::dec(x_632);
x_637 = !lean::is_exclusive(x_636);
if (x_637 == 0)
{
obj* x_638; obj* x_639; 
x_638 = lean::cnstr_get(x_636, 0);
lean::cnstr_set(x_296, 1, x_291);
lean::cnstr_set(x_296, 0, x_638);
x_639 = l_List_append___rarg(x_628, x_296);
lean::cnstr_set(x_636, 0, x_639);
x_568 = x_636;
goto block_617;
}
else
{
obj* x_640; obj* x_641; obj* x_642; obj* x_643; 
x_640 = lean::cnstr_get(x_636, 0);
x_641 = lean::cnstr_get(x_636, 1);
lean::inc(x_641);
lean::inc(x_640);
lean::dec(x_636);
lean::cnstr_set(x_296, 1, x_291);
lean::cnstr_set(x_296, 0, x_640);
x_642 = l_List_append___rarg(x_628, x_296);
x_643 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_643, 0, x_642);
lean::cnstr_set(x_643, 1, x_641);
x_568 = x_643;
goto block_617;
}
}
}
}
block_617:
{
uint8 x_569; 
x_569 = !lean::is_exclusive(x_568);
if (x_569 == 0)
{
obj* x_570; obj* x_571; obj* x_572; obj* x_573; obj* x_574; obj* x_575; uint8 x_576; obj* x_577; obj* x_578; obj* x_579; obj* x_580; obj* x_581; 
x_570 = lean::cnstr_get(x_568, 0);
x_571 = lean::mk_nat_obj(0u);
x_572 = l_List_lengthAux___main___rarg(x_566, x_571);
x_573 = l_Lean_Elaborator_toPexpr___main___closed__23;
x_574 = l_Lean_KVMap_setNat(x_291, x_573, x_572);
x_575 = l_Lean_Elaborator_toPexpr___main___closed__24;
x_576 = 1;
x_577 = l_Lean_KVMap_setBool(x_574, x_575, x_576);
x_578 = lean::cnstr_get(x_289, 1);
lean::inc(x_578);
lean::dec(x_289);
x_579 = l_List_append___rarg(x_566, x_570);
x_580 = l_Lean_Elaborator_toPexpr___main___closed__25;
x_581 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_580, x_579);
if (lean::obj_tag(x_578) == 0)
{
obj* x_582; obj* x_583; obj* x_584; obj* x_585; 
x_582 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_583 = lean::box(0);
x_584 = l_Lean_KVMap_setName(x_577, x_582, x_583);
x_585 = lean_expr_mk_mdata(x_584, x_581);
lean::cnstr_set(x_568, 0, x_585);
x_86 = x_568;
goto block_130;
}
else
{
obj* x_586; obj* x_587; obj* x_588; obj* x_589; obj* x_590; obj* x_591; 
x_586 = lean::cnstr_get(x_578, 0);
lean::inc(x_586);
lean::dec(x_578);
x_587 = lean::cnstr_get(x_586, 0);
lean::inc(x_587);
lean::dec(x_586);
x_588 = l_Lean_Elaborator_mangleIdent(x_587);
x_589 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_590 = l_Lean_KVMap_setName(x_577, x_589, x_588);
x_591 = lean_expr_mk_mdata(x_590, x_581);
lean::cnstr_set(x_568, 0, x_591);
x_86 = x_568;
goto block_130;
}
}
else
{
obj* x_592; obj* x_593; obj* x_594; obj* x_595; obj* x_596; obj* x_597; obj* x_598; uint8 x_599; obj* x_600; obj* x_601; obj* x_602; obj* x_603; obj* x_604; 
x_592 = lean::cnstr_get(x_568, 0);
x_593 = lean::cnstr_get(x_568, 1);
lean::inc(x_593);
lean::inc(x_592);
lean::dec(x_568);
x_594 = lean::mk_nat_obj(0u);
x_595 = l_List_lengthAux___main___rarg(x_566, x_594);
x_596 = l_Lean_Elaborator_toPexpr___main___closed__23;
x_597 = l_Lean_KVMap_setNat(x_291, x_596, x_595);
x_598 = l_Lean_Elaborator_toPexpr___main___closed__24;
x_599 = 1;
x_600 = l_Lean_KVMap_setBool(x_597, x_598, x_599);
x_601 = lean::cnstr_get(x_289, 1);
lean::inc(x_601);
lean::dec(x_289);
x_602 = l_List_append___rarg(x_566, x_592);
x_603 = l_Lean_Elaborator_toPexpr___main___closed__25;
x_604 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_603, x_602);
if (lean::obj_tag(x_601) == 0)
{
obj* x_605; obj* x_606; obj* x_607; obj* x_608; obj* x_609; 
x_605 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_606 = lean::box(0);
x_607 = l_Lean_KVMap_setName(x_600, x_605, x_606);
x_608 = lean_expr_mk_mdata(x_607, x_604);
x_609 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_609, 0, x_608);
lean::cnstr_set(x_609, 1, x_593);
x_86 = x_609;
goto block_130;
}
else
{
obj* x_610; obj* x_611; obj* x_612; obj* x_613; obj* x_614; obj* x_615; obj* x_616; 
x_610 = lean::cnstr_get(x_601, 0);
lean::inc(x_610);
lean::dec(x_601);
x_611 = lean::cnstr_get(x_610, 0);
lean::inc(x_611);
lean::dec(x_610);
x_612 = l_Lean_Elaborator_mangleIdent(x_611);
x_613 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_614 = l_Lean_KVMap_setName(x_600, x_613, x_612);
x_615 = lean_expr_mk_mdata(x_614, x_604);
x_616 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_616, 0, x_615);
lean::cnstr_set(x_616, 1, x_593);
x_86 = x_616;
goto block_130;
}
}
}
}
}
else
{
uint8 x_644; 
lean::free_heap_obj(x_296);
x_644 = !lean::is_exclusive(x_558);
if (x_644 == 0)
{
obj* x_645; obj* x_646; obj* x_647; obj* x_648; obj* x_649; obj* x_650; obj* x_651; obj* x_652; obj* x_653; 
x_645 = lean::cnstr_get(x_558, 1);
lean::dec(x_645);
x_646 = lean::cnstr_get(x_558, 0);
lean::dec(x_646);
x_647 = lean::cnstr_get(x_295, 0);
lean::inc(x_647);
lean::dec(x_295);
x_648 = l_Lean_Parser_Term_structInstItem_HasView;
x_649 = lean::cnstr_get(x_648, 1);
lean::inc(x_649);
x_650 = lean::apply_1(x_649, x_384);
x_651 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_651, 0, x_650);
x_652 = l_Lean_Elaborator_toPexpr___main___closed__27;
x_653 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_651, x_652, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_651);
if (lean::obj_tag(x_653) == 0)
{
uint8 x_654; 
lean::dec(x_647);
lean::free_heap_obj(x_558);
lean::dec(x_293);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_654 = !lean::is_exclusive(x_653);
if (x_654 == 0)
{
return x_653;
}
else
{
obj* x_655; obj* x_656; 
x_655 = lean::cnstr_get(x_653, 0);
lean::inc(x_655);
lean::dec(x_653);
x_656 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_656, 0, x_655);
return x_656;
}
}
else
{
obj* x_657; obj* x_658; obj* x_659; obj* x_660; 
x_657 = lean::cnstr_get(x_653, 0);
lean::inc(x_657);
lean::dec(x_653);
x_658 = lean::cnstr_get(x_657, 0);
lean::inc(x_658);
x_659 = lean::cnstr_get(x_657, 1);
lean::inc(x_659);
lean::dec(x_657);
lean::inc(x_1);
x_660 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__13(x_1, x_293, x_2, x_3, x_659);
if (lean::obj_tag(x_660) == 0)
{
uint8 x_661; 
lean::dec(x_658);
lean::dec(x_647);
lean::free_heap_obj(x_558);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_661 = !lean::is_exclusive(x_660);
if (x_661 == 0)
{
return x_660;
}
else
{
obj* x_662; obj* x_663; 
x_662 = lean::cnstr_get(x_660, 0);
lean::inc(x_662);
lean::dec(x_660);
x_663 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_663, 0, x_662);
return x_663;
}
}
else
{
obj* x_664; obj* x_665; obj* x_666; obj* x_667; obj* x_717; 
x_664 = lean::cnstr_get(x_660, 0);
lean::inc(x_664);
lean::dec(x_660);
x_665 = lean::cnstr_get(x_664, 0);
lean::inc(x_665);
x_666 = lean::cnstr_get(x_664, 1);
lean::inc(x_666);
lean::dec(x_664);
lean::inc(x_1);
x_717 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__14(x_1, x_647, x_2, x_3, x_666);
if (lean::obj_tag(x_717) == 0)
{
uint8 x_718; 
lean::dec(x_665);
lean::dec(x_658);
lean::free_heap_obj(x_558);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_718 = !lean::is_exclusive(x_717);
if (x_718 == 0)
{
return x_717;
}
else
{
obj* x_719; obj* x_720; 
x_719 = lean::cnstr_get(x_717, 0);
lean::inc(x_719);
lean::dec(x_717);
x_720 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_720, 0, x_719);
return x_720;
}
}
else
{
obj* x_721; obj* x_722; 
x_721 = lean::cnstr_get(x_717, 0);
lean::inc(x_721);
lean::dec(x_717);
x_722 = lean::cnstr_get(x_289, 2);
lean::inc(x_722);
if (lean::obj_tag(x_722) == 0)
{
uint8 x_723; 
lean::free_heap_obj(x_558);
x_723 = !lean::is_exclusive(x_721);
if (x_723 == 0)
{
x_667 = x_721;
goto block_716;
}
else
{
obj* x_724; obj* x_725; obj* x_726; 
x_724 = lean::cnstr_get(x_721, 0);
x_725 = lean::cnstr_get(x_721, 1);
lean::inc(x_725);
lean::inc(x_724);
lean::dec(x_721);
x_726 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_726, 0, x_724);
lean::cnstr_set(x_726, 1, x_725);
x_667 = x_726;
goto block_716;
}
}
else
{
obj* x_727; obj* x_728; obj* x_729; obj* x_730; obj* x_731; 
x_727 = lean::cnstr_get(x_721, 0);
lean::inc(x_727);
x_728 = lean::cnstr_get(x_721, 1);
lean::inc(x_728);
lean::dec(x_721);
x_729 = lean::cnstr_get(x_722, 0);
lean::inc(x_729);
lean::dec(x_722);
x_730 = lean::cnstr_get(x_729, 0);
lean::inc(x_730);
lean::dec(x_729);
x_731 = l_Lean_Elaborator_toPexpr___main(x_730, x_2, x_3, x_728);
if (lean::obj_tag(x_731) == 0)
{
uint8 x_732; 
lean::dec(x_727);
lean::dec(x_665);
lean::dec(x_658);
lean::free_heap_obj(x_558);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_732 = !lean::is_exclusive(x_731);
if (x_732 == 0)
{
return x_731;
}
else
{
obj* x_733; obj* x_734; 
x_733 = lean::cnstr_get(x_731, 0);
lean::inc(x_733);
lean::dec(x_731);
x_734 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_734, 0, x_733);
return x_734;
}
}
else
{
obj* x_735; uint8 x_736; 
x_735 = lean::cnstr_get(x_731, 0);
lean::inc(x_735);
lean::dec(x_731);
x_736 = !lean::is_exclusive(x_735);
if (x_736 == 0)
{
obj* x_737; obj* x_738; 
x_737 = lean::cnstr_get(x_735, 0);
lean::cnstr_set(x_558, 1, x_291);
lean::cnstr_set(x_558, 0, x_737);
x_738 = l_List_append___rarg(x_727, x_558);
lean::cnstr_set(x_735, 0, x_738);
x_667 = x_735;
goto block_716;
}
else
{
obj* x_739; obj* x_740; obj* x_741; obj* x_742; 
x_739 = lean::cnstr_get(x_735, 0);
x_740 = lean::cnstr_get(x_735, 1);
lean::inc(x_740);
lean::inc(x_739);
lean::dec(x_735);
lean::cnstr_set(x_558, 1, x_291);
lean::cnstr_set(x_558, 0, x_739);
x_741 = l_List_append___rarg(x_727, x_558);
x_742 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_742, 0, x_741);
lean::cnstr_set(x_742, 1, x_740);
x_667 = x_742;
goto block_716;
}
}
}
}
block_716:
{
uint8 x_668; 
x_668 = !lean::is_exclusive(x_667);
if (x_668 == 0)
{
obj* x_669; obj* x_670; obj* x_671; obj* x_672; obj* x_673; obj* x_674; uint8 x_675; obj* x_676; obj* x_677; obj* x_678; obj* x_679; obj* x_680; 
x_669 = lean::cnstr_get(x_667, 0);
x_670 = lean::mk_nat_obj(0u);
x_671 = l_List_lengthAux___main___rarg(x_665, x_670);
x_672 = l_Lean_Elaborator_toPexpr___main___closed__23;
x_673 = l_Lean_KVMap_setNat(x_291, x_672, x_671);
x_674 = l_Lean_Elaborator_toPexpr___main___closed__24;
x_675 = lean::unbox(x_658);
lean::dec(x_658);
x_676 = l_Lean_KVMap_setBool(x_673, x_674, x_675);
x_677 = lean::cnstr_get(x_289, 1);
lean::inc(x_677);
lean::dec(x_289);
x_678 = l_List_append___rarg(x_665, x_669);
x_679 = l_Lean_Elaborator_toPexpr___main___closed__25;
x_680 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_679, x_678);
if (lean::obj_tag(x_677) == 0)
{
obj* x_681; obj* x_682; obj* x_683; obj* x_684; 
x_681 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_682 = lean::box(0);
x_683 = l_Lean_KVMap_setName(x_676, x_681, x_682);
x_684 = lean_expr_mk_mdata(x_683, x_680);
lean::cnstr_set(x_667, 0, x_684);
x_86 = x_667;
goto block_130;
}
else
{
obj* x_685; obj* x_686; obj* x_687; obj* x_688; obj* x_689; obj* x_690; 
x_685 = lean::cnstr_get(x_677, 0);
lean::inc(x_685);
lean::dec(x_677);
x_686 = lean::cnstr_get(x_685, 0);
lean::inc(x_686);
lean::dec(x_685);
x_687 = l_Lean_Elaborator_mangleIdent(x_686);
x_688 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_689 = l_Lean_KVMap_setName(x_676, x_688, x_687);
x_690 = lean_expr_mk_mdata(x_689, x_680);
lean::cnstr_set(x_667, 0, x_690);
x_86 = x_667;
goto block_130;
}
}
else
{
obj* x_691; obj* x_692; obj* x_693; obj* x_694; obj* x_695; obj* x_696; obj* x_697; uint8 x_698; obj* x_699; obj* x_700; obj* x_701; obj* x_702; obj* x_703; 
x_691 = lean::cnstr_get(x_667, 0);
x_692 = lean::cnstr_get(x_667, 1);
lean::inc(x_692);
lean::inc(x_691);
lean::dec(x_667);
x_693 = lean::mk_nat_obj(0u);
x_694 = l_List_lengthAux___main___rarg(x_665, x_693);
x_695 = l_Lean_Elaborator_toPexpr___main___closed__23;
x_696 = l_Lean_KVMap_setNat(x_291, x_695, x_694);
x_697 = l_Lean_Elaborator_toPexpr___main___closed__24;
x_698 = lean::unbox(x_658);
lean::dec(x_658);
x_699 = l_Lean_KVMap_setBool(x_696, x_697, x_698);
x_700 = lean::cnstr_get(x_289, 1);
lean::inc(x_700);
lean::dec(x_289);
x_701 = l_List_append___rarg(x_665, x_691);
x_702 = l_Lean_Elaborator_toPexpr___main___closed__25;
x_703 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_702, x_701);
if (lean::obj_tag(x_700) == 0)
{
obj* x_704; obj* x_705; obj* x_706; obj* x_707; obj* x_708; 
x_704 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_705 = lean::box(0);
x_706 = l_Lean_KVMap_setName(x_699, x_704, x_705);
x_707 = lean_expr_mk_mdata(x_706, x_703);
x_708 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_708, 0, x_707);
lean::cnstr_set(x_708, 1, x_692);
x_86 = x_708;
goto block_130;
}
else
{
obj* x_709; obj* x_710; obj* x_711; obj* x_712; obj* x_713; obj* x_714; obj* x_715; 
x_709 = lean::cnstr_get(x_700, 0);
lean::inc(x_709);
lean::dec(x_700);
x_710 = lean::cnstr_get(x_709, 0);
lean::inc(x_710);
lean::dec(x_709);
x_711 = l_Lean_Elaborator_mangleIdent(x_710);
x_712 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_713 = l_Lean_KVMap_setName(x_699, x_712, x_711);
x_714 = lean_expr_mk_mdata(x_713, x_703);
x_715 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_715, 0, x_714);
lean::cnstr_set(x_715, 1, x_692);
x_86 = x_715;
goto block_130;
}
}
}
}
}
}
else
{
obj* x_743; obj* x_744; obj* x_745; obj* x_746; obj* x_747; obj* x_748; obj* x_749; 
lean::dec(x_558);
x_743 = lean::cnstr_get(x_295, 0);
lean::inc(x_743);
lean::dec(x_295);
x_744 = l_Lean_Parser_Term_structInstItem_HasView;
x_745 = lean::cnstr_get(x_744, 1);
lean::inc(x_745);
x_746 = lean::apply_1(x_745, x_384);
x_747 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_747, 0, x_746);
x_748 = l_Lean_Elaborator_toPexpr___main___closed__27;
x_749 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_747, x_748, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_747);
if (lean::obj_tag(x_749) == 0)
{
obj* x_750; obj* x_751; obj* x_752; 
lean::dec(x_743);
lean::dec(x_293);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_750 = lean::cnstr_get(x_749, 0);
lean::inc(x_750);
if (lean::is_exclusive(x_749)) {
 lean::cnstr_release(x_749, 0);
 x_751 = x_749;
} else {
 lean::dec_ref(x_749);
 x_751 = lean::box(0);
}
if (lean::is_scalar(x_751)) {
 x_752 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_752 = x_751;
}
lean::cnstr_set(x_752, 0, x_750);
return x_752;
}
else
{
obj* x_753; obj* x_754; obj* x_755; obj* x_756; 
x_753 = lean::cnstr_get(x_749, 0);
lean::inc(x_753);
lean::dec(x_749);
x_754 = lean::cnstr_get(x_753, 0);
lean::inc(x_754);
x_755 = lean::cnstr_get(x_753, 1);
lean::inc(x_755);
lean::dec(x_753);
lean::inc(x_1);
x_756 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__13(x_1, x_293, x_2, x_3, x_755);
if (lean::obj_tag(x_756) == 0)
{
obj* x_757; obj* x_758; obj* x_759; 
lean::dec(x_754);
lean::dec(x_743);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_757 = lean::cnstr_get(x_756, 0);
lean::inc(x_757);
if (lean::is_exclusive(x_756)) {
 lean::cnstr_release(x_756, 0);
 x_758 = x_756;
} else {
 lean::dec_ref(x_756);
 x_758 = lean::box(0);
}
if (lean::is_scalar(x_758)) {
 x_759 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_759 = x_758;
}
lean::cnstr_set(x_759, 0, x_757);
return x_759;
}
else
{
obj* x_760; obj* x_761; obj* x_762; obj* x_763; obj* x_791; 
x_760 = lean::cnstr_get(x_756, 0);
lean::inc(x_760);
lean::dec(x_756);
x_761 = lean::cnstr_get(x_760, 0);
lean::inc(x_761);
x_762 = lean::cnstr_get(x_760, 1);
lean::inc(x_762);
lean::dec(x_760);
lean::inc(x_1);
x_791 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__14(x_1, x_743, x_2, x_3, x_762);
if (lean::obj_tag(x_791) == 0)
{
obj* x_792; obj* x_793; obj* x_794; 
lean::dec(x_761);
lean::dec(x_754);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_792 = lean::cnstr_get(x_791, 0);
lean::inc(x_792);
if (lean::is_exclusive(x_791)) {
 lean::cnstr_release(x_791, 0);
 x_793 = x_791;
} else {
 lean::dec_ref(x_791);
 x_793 = lean::box(0);
}
if (lean::is_scalar(x_793)) {
 x_794 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_794 = x_793;
}
lean::cnstr_set(x_794, 0, x_792);
return x_794;
}
else
{
obj* x_795; obj* x_796; 
x_795 = lean::cnstr_get(x_791, 0);
lean::inc(x_795);
lean::dec(x_791);
x_796 = lean::cnstr_get(x_289, 2);
lean::inc(x_796);
if (lean::obj_tag(x_796) == 0)
{
obj* x_797; obj* x_798; obj* x_799; obj* x_800; 
x_797 = lean::cnstr_get(x_795, 0);
lean::inc(x_797);
x_798 = lean::cnstr_get(x_795, 1);
lean::inc(x_798);
if (lean::is_exclusive(x_795)) {
 lean::cnstr_release(x_795, 0);
 lean::cnstr_release(x_795, 1);
 x_799 = x_795;
} else {
 lean::dec_ref(x_795);
 x_799 = lean::box(0);
}
if (lean::is_scalar(x_799)) {
 x_800 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_800 = x_799;
}
lean::cnstr_set(x_800, 0, x_797);
lean::cnstr_set(x_800, 1, x_798);
x_763 = x_800;
goto block_790;
}
else
{
obj* x_801; obj* x_802; obj* x_803; obj* x_804; obj* x_805; 
x_801 = lean::cnstr_get(x_795, 0);
lean::inc(x_801);
x_802 = lean::cnstr_get(x_795, 1);
lean::inc(x_802);
lean::dec(x_795);
x_803 = lean::cnstr_get(x_796, 0);
lean::inc(x_803);
lean::dec(x_796);
x_804 = lean::cnstr_get(x_803, 0);
lean::inc(x_804);
lean::dec(x_803);
x_805 = l_Lean_Elaborator_toPexpr___main(x_804, x_2, x_3, x_802);
if (lean::obj_tag(x_805) == 0)
{
obj* x_806; obj* x_807; obj* x_808; 
lean::dec(x_801);
lean::dec(x_761);
lean::dec(x_754);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_806 = lean::cnstr_get(x_805, 0);
lean::inc(x_806);
if (lean::is_exclusive(x_805)) {
 lean::cnstr_release(x_805, 0);
 x_807 = x_805;
} else {
 lean::dec_ref(x_805);
 x_807 = lean::box(0);
}
if (lean::is_scalar(x_807)) {
 x_808 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_808 = x_807;
}
lean::cnstr_set(x_808, 0, x_806);
return x_808;
}
else
{
obj* x_809; obj* x_810; obj* x_811; obj* x_812; obj* x_813; obj* x_814; obj* x_815; 
x_809 = lean::cnstr_get(x_805, 0);
lean::inc(x_809);
lean::dec(x_805);
x_810 = lean::cnstr_get(x_809, 0);
lean::inc(x_810);
x_811 = lean::cnstr_get(x_809, 1);
lean::inc(x_811);
if (lean::is_exclusive(x_809)) {
 lean::cnstr_release(x_809, 0);
 lean::cnstr_release(x_809, 1);
 x_812 = x_809;
} else {
 lean::dec_ref(x_809);
 x_812 = lean::box(0);
}
x_813 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_813, 0, x_810);
lean::cnstr_set(x_813, 1, x_291);
x_814 = l_List_append___rarg(x_801, x_813);
if (lean::is_scalar(x_812)) {
 x_815 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_815 = x_812;
}
lean::cnstr_set(x_815, 0, x_814);
lean::cnstr_set(x_815, 1, x_811);
x_763 = x_815;
goto block_790;
}
}
}
block_790:
{
obj* x_764; obj* x_765; obj* x_766; obj* x_767; obj* x_768; obj* x_769; obj* x_770; obj* x_771; uint8 x_772; obj* x_773; obj* x_774; obj* x_775; obj* x_776; obj* x_777; 
x_764 = lean::cnstr_get(x_763, 0);
lean::inc(x_764);
x_765 = lean::cnstr_get(x_763, 1);
lean::inc(x_765);
if (lean::is_exclusive(x_763)) {
 lean::cnstr_release(x_763, 0);
 lean::cnstr_release(x_763, 1);
 x_766 = x_763;
} else {
 lean::dec_ref(x_763);
 x_766 = lean::box(0);
}
x_767 = lean::mk_nat_obj(0u);
x_768 = l_List_lengthAux___main___rarg(x_761, x_767);
x_769 = l_Lean_Elaborator_toPexpr___main___closed__23;
x_770 = l_Lean_KVMap_setNat(x_291, x_769, x_768);
x_771 = l_Lean_Elaborator_toPexpr___main___closed__24;
x_772 = lean::unbox(x_754);
lean::dec(x_754);
x_773 = l_Lean_KVMap_setBool(x_770, x_771, x_772);
x_774 = lean::cnstr_get(x_289, 1);
lean::inc(x_774);
lean::dec(x_289);
x_775 = l_List_append___rarg(x_761, x_764);
x_776 = l_Lean_Elaborator_toPexpr___main___closed__25;
x_777 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_776, x_775);
if (lean::obj_tag(x_774) == 0)
{
obj* x_778; obj* x_779; obj* x_780; obj* x_781; obj* x_782; 
x_778 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_779 = lean::box(0);
x_780 = l_Lean_KVMap_setName(x_773, x_778, x_779);
x_781 = lean_expr_mk_mdata(x_780, x_777);
if (lean::is_scalar(x_766)) {
 x_782 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_782 = x_766;
}
lean::cnstr_set(x_782, 0, x_781);
lean::cnstr_set(x_782, 1, x_765);
x_86 = x_782;
goto block_130;
}
else
{
obj* x_783; obj* x_784; obj* x_785; obj* x_786; obj* x_787; obj* x_788; obj* x_789; 
x_783 = lean::cnstr_get(x_774, 0);
lean::inc(x_783);
lean::dec(x_774);
x_784 = lean::cnstr_get(x_783, 0);
lean::inc(x_784);
lean::dec(x_783);
x_785 = l_Lean_Elaborator_mangleIdent(x_784);
x_786 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_787 = l_Lean_KVMap_setName(x_773, x_786, x_785);
x_788 = lean_expr_mk_mdata(x_787, x_777);
if (lean::is_scalar(x_766)) {
 x_789 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_789 = x_766;
}
lean::cnstr_set(x_789, 0, x_788);
lean::cnstr_set(x_789, 1, x_765);
x_86 = x_789;
goto block_130;
}
}
}
}
}
}
}
else
{
obj* x_816; 
x_816 = lean::cnstr_get(x_296, 1);
lean::inc(x_816);
lean::dec(x_296);
if (lean::obj_tag(x_816) == 0)
{
obj* x_817; obj* x_818; 
lean::dec(x_384);
x_817 = lean::cnstr_get(x_295, 0);
lean::inc(x_817);
lean::dec(x_295);
lean::inc(x_1);
x_818 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__11(x_1, x_293, x_2, x_3, x_4);
if (lean::obj_tag(x_818) == 0)
{
obj* x_819; obj* x_820; obj* x_821; 
lean::dec(x_817);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_819 = lean::cnstr_get(x_818, 0);
lean::inc(x_819);
if (lean::is_exclusive(x_818)) {
 lean::cnstr_release(x_818, 0);
 x_820 = x_818;
} else {
 lean::dec_ref(x_818);
 x_820 = lean::box(0);
}
if (lean::is_scalar(x_820)) {
 x_821 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_821 = x_820;
}
lean::cnstr_set(x_821, 0, x_819);
return x_821;
}
else
{
obj* x_822; obj* x_823; obj* x_824; obj* x_825; obj* x_853; 
x_822 = lean::cnstr_get(x_818, 0);
lean::inc(x_822);
lean::dec(x_818);
x_823 = lean::cnstr_get(x_822, 0);
lean::inc(x_823);
x_824 = lean::cnstr_get(x_822, 1);
lean::inc(x_824);
lean::dec(x_822);
lean::inc(x_1);
x_853 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__12(x_1, x_817, x_2, x_3, x_824);
if (lean::obj_tag(x_853) == 0)
{
obj* x_854; obj* x_855; obj* x_856; 
lean::dec(x_823);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_854 = lean::cnstr_get(x_853, 0);
lean::inc(x_854);
if (lean::is_exclusive(x_853)) {
 lean::cnstr_release(x_853, 0);
 x_855 = x_853;
} else {
 lean::dec_ref(x_853);
 x_855 = lean::box(0);
}
if (lean::is_scalar(x_855)) {
 x_856 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_856 = x_855;
}
lean::cnstr_set(x_856, 0, x_854);
return x_856;
}
else
{
obj* x_857; obj* x_858; 
x_857 = lean::cnstr_get(x_853, 0);
lean::inc(x_857);
lean::dec(x_853);
x_858 = lean::cnstr_get(x_289, 2);
lean::inc(x_858);
if (lean::obj_tag(x_858) == 0)
{
obj* x_859; obj* x_860; obj* x_861; obj* x_862; 
x_859 = lean::cnstr_get(x_857, 0);
lean::inc(x_859);
x_860 = lean::cnstr_get(x_857, 1);
lean::inc(x_860);
if (lean::is_exclusive(x_857)) {
 lean::cnstr_release(x_857, 0);
 lean::cnstr_release(x_857, 1);
 x_861 = x_857;
} else {
 lean::dec_ref(x_857);
 x_861 = lean::box(0);
}
if (lean::is_scalar(x_861)) {
 x_862 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_862 = x_861;
}
lean::cnstr_set(x_862, 0, x_859);
lean::cnstr_set(x_862, 1, x_860);
x_825 = x_862;
goto block_852;
}
else
{
obj* x_863; obj* x_864; obj* x_865; obj* x_866; obj* x_867; 
x_863 = lean::cnstr_get(x_857, 0);
lean::inc(x_863);
x_864 = lean::cnstr_get(x_857, 1);
lean::inc(x_864);
lean::dec(x_857);
x_865 = lean::cnstr_get(x_858, 0);
lean::inc(x_865);
lean::dec(x_858);
x_866 = lean::cnstr_get(x_865, 0);
lean::inc(x_866);
lean::dec(x_865);
x_867 = l_Lean_Elaborator_toPexpr___main(x_866, x_2, x_3, x_864);
if (lean::obj_tag(x_867) == 0)
{
obj* x_868; obj* x_869; obj* x_870; 
lean::dec(x_863);
lean::dec(x_823);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_868 = lean::cnstr_get(x_867, 0);
lean::inc(x_868);
if (lean::is_exclusive(x_867)) {
 lean::cnstr_release(x_867, 0);
 x_869 = x_867;
} else {
 lean::dec_ref(x_867);
 x_869 = lean::box(0);
}
if (lean::is_scalar(x_869)) {
 x_870 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_870 = x_869;
}
lean::cnstr_set(x_870, 0, x_868);
return x_870;
}
else
{
obj* x_871; obj* x_872; obj* x_873; obj* x_874; obj* x_875; obj* x_876; obj* x_877; 
x_871 = lean::cnstr_get(x_867, 0);
lean::inc(x_871);
lean::dec(x_867);
x_872 = lean::cnstr_get(x_871, 0);
lean::inc(x_872);
x_873 = lean::cnstr_get(x_871, 1);
lean::inc(x_873);
if (lean::is_exclusive(x_871)) {
 lean::cnstr_release(x_871, 0);
 lean::cnstr_release(x_871, 1);
 x_874 = x_871;
} else {
 lean::dec_ref(x_871);
 x_874 = lean::box(0);
}
x_875 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_875, 0, x_872);
lean::cnstr_set(x_875, 1, x_291);
x_876 = l_List_append___rarg(x_863, x_875);
if (lean::is_scalar(x_874)) {
 x_877 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_877 = x_874;
}
lean::cnstr_set(x_877, 0, x_876);
lean::cnstr_set(x_877, 1, x_873);
x_825 = x_877;
goto block_852;
}
}
}
block_852:
{
obj* x_826; obj* x_827; obj* x_828; obj* x_829; obj* x_830; obj* x_831; obj* x_832; obj* x_833; uint8 x_834; obj* x_835; obj* x_836; obj* x_837; obj* x_838; obj* x_839; 
x_826 = lean::cnstr_get(x_825, 0);
lean::inc(x_826);
x_827 = lean::cnstr_get(x_825, 1);
lean::inc(x_827);
if (lean::is_exclusive(x_825)) {
 lean::cnstr_release(x_825, 0);
 lean::cnstr_release(x_825, 1);
 x_828 = x_825;
} else {
 lean::dec_ref(x_825);
 x_828 = lean::box(0);
}
x_829 = lean::mk_nat_obj(0u);
x_830 = l_List_lengthAux___main___rarg(x_823, x_829);
x_831 = l_Lean_Elaborator_toPexpr___main___closed__23;
x_832 = l_Lean_KVMap_setNat(x_291, x_831, x_830);
x_833 = l_Lean_Elaborator_toPexpr___main___closed__24;
x_834 = 1;
x_835 = l_Lean_KVMap_setBool(x_832, x_833, x_834);
x_836 = lean::cnstr_get(x_289, 1);
lean::inc(x_836);
lean::dec(x_289);
x_837 = l_List_append___rarg(x_823, x_826);
x_838 = l_Lean_Elaborator_toPexpr___main___closed__25;
x_839 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_838, x_837);
if (lean::obj_tag(x_836) == 0)
{
obj* x_840; obj* x_841; obj* x_842; obj* x_843; obj* x_844; 
x_840 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_841 = lean::box(0);
x_842 = l_Lean_KVMap_setName(x_835, x_840, x_841);
x_843 = lean_expr_mk_mdata(x_842, x_839);
if (lean::is_scalar(x_828)) {
 x_844 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_844 = x_828;
}
lean::cnstr_set(x_844, 0, x_843);
lean::cnstr_set(x_844, 1, x_827);
x_86 = x_844;
goto block_130;
}
else
{
obj* x_845; obj* x_846; obj* x_847; obj* x_848; obj* x_849; obj* x_850; obj* x_851; 
x_845 = lean::cnstr_get(x_836, 0);
lean::inc(x_845);
lean::dec(x_836);
x_846 = lean::cnstr_get(x_845, 0);
lean::inc(x_846);
lean::dec(x_845);
x_847 = l_Lean_Elaborator_mangleIdent(x_846);
x_848 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_849 = l_Lean_KVMap_setName(x_835, x_848, x_847);
x_850 = lean_expr_mk_mdata(x_849, x_839);
if (lean::is_scalar(x_828)) {
 x_851 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_851 = x_828;
}
lean::cnstr_set(x_851, 0, x_850);
lean::cnstr_set(x_851, 1, x_827);
x_86 = x_851;
goto block_130;
}
}
}
}
else
{
obj* x_878; obj* x_879; obj* x_880; obj* x_881; obj* x_882; obj* x_883; obj* x_884; obj* x_885; 
if (lean::is_exclusive(x_816)) {
 lean::cnstr_release(x_816, 0);
 lean::cnstr_release(x_816, 1);
 x_878 = x_816;
} else {
 lean::dec_ref(x_816);
 x_878 = lean::box(0);
}
x_879 = lean::cnstr_get(x_295, 0);
lean::inc(x_879);
lean::dec(x_295);
x_880 = l_Lean_Parser_Term_structInstItem_HasView;
x_881 = lean::cnstr_get(x_880, 1);
lean::inc(x_881);
x_882 = lean::apply_1(x_881, x_384);
x_883 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_883, 0, x_882);
x_884 = l_Lean_Elaborator_toPexpr___main___closed__27;
x_885 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_883, x_884, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_883);
if (lean::obj_tag(x_885) == 0)
{
obj* x_886; obj* x_887; obj* x_888; 
lean::dec(x_879);
lean::dec(x_878);
lean::dec(x_293);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_886 = lean::cnstr_get(x_885, 0);
lean::inc(x_886);
if (lean::is_exclusive(x_885)) {
 lean::cnstr_release(x_885, 0);
 x_887 = x_885;
} else {
 lean::dec_ref(x_885);
 x_887 = lean::box(0);
}
if (lean::is_scalar(x_887)) {
 x_888 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_888 = x_887;
}
lean::cnstr_set(x_888, 0, x_886);
return x_888;
}
else
{
obj* x_889; obj* x_890; obj* x_891; obj* x_892; 
x_889 = lean::cnstr_get(x_885, 0);
lean::inc(x_889);
lean::dec(x_885);
x_890 = lean::cnstr_get(x_889, 0);
lean::inc(x_890);
x_891 = lean::cnstr_get(x_889, 1);
lean::inc(x_891);
lean::dec(x_889);
lean::inc(x_1);
x_892 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__13(x_1, x_293, x_2, x_3, x_891);
if (lean::obj_tag(x_892) == 0)
{
obj* x_893; obj* x_894; obj* x_895; 
lean::dec(x_890);
lean::dec(x_879);
lean::dec(x_878);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_893 = lean::cnstr_get(x_892, 0);
lean::inc(x_893);
if (lean::is_exclusive(x_892)) {
 lean::cnstr_release(x_892, 0);
 x_894 = x_892;
} else {
 lean::dec_ref(x_892);
 x_894 = lean::box(0);
}
if (lean::is_scalar(x_894)) {
 x_895 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_895 = x_894;
}
lean::cnstr_set(x_895, 0, x_893);
return x_895;
}
else
{
obj* x_896; obj* x_897; obj* x_898; obj* x_899; obj* x_927; 
x_896 = lean::cnstr_get(x_892, 0);
lean::inc(x_896);
lean::dec(x_892);
x_897 = lean::cnstr_get(x_896, 0);
lean::inc(x_897);
x_898 = lean::cnstr_get(x_896, 1);
lean::inc(x_898);
lean::dec(x_896);
lean::inc(x_1);
x_927 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__14(x_1, x_879, x_2, x_3, x_898);
if (lean::obj_tag(x_927) == 0)
{
obj* x_928; obj* x_929; obj* x_930; 
lean::dec(x_897);
lean::dec(x_890);
lean::dec(x_878);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_928 = lean::cnstr_get(x_927, 0);
lean::inc(x_928);
if (lean::is_exclusive(x_927)) {
 lean::cnstr_release(x_927, 0);
 x_929 = x_927;
} else {
 lean::dec_ref(x_927);
 x_929 = lean::box(0);
}
if (lean::is_scalar(x_929)) {
 x_930 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_930 = x_929;
}
lean::cnstr_set(x_930, 0, x_928);
return x_930;
}
else
{
obj* x_931; obj* x_932; 
x_931 = lean::cnstr_get(x_927, 0);
lean::inc(x_931);
lean::dec(x_927);
x_932 = lean::cnstr_get(x_289, 2);
lean::inc(x_932);
if (lean::obj_tag(x_932) == 0)
{
obj* x_933; obj* x_934; obj* x_935; obj* x_936; 
lean::dec(x_878);
x_933 = lean::cnstr_get(x_931, 0);
lean::inc(x_933);
x_934 = lean::cnstr_get(x_931, 1);
lean::inc(x_934);
if (lean::is_exclusive(x_931)) {
 lean::cnstr_release(x_931, 0);
 lean::cnstr_release(x_931, 1);
 x_935 = x_931;
} else {
 lean::dec_ref(x_931);
 x_935 = lean::box(0);
}
if (lean::is_scalar(x_935)) {
 x_936 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_936 = x_935;
}
lean::cnstr_set(x_936, 0, x_933);
lean::cnstr_set(x_936, 1, x_934);
x_899 = x_936;
goto block_926;
}
else
{
obj* x_937; obj* x_938; obj* x_939; obj* x_940; obj* x_941; 
x_937 = lean::cnstr_get(x_931, 0);
lean::inc(x_937);
x_938 = lean::cnstr_get(x_931, 1);
lean::inc(x_938);
lean::dec(x_931);
x_939 = lean::cnstr_get(x_932, 0);
lean::inc(x_939);
lean::dec(x_932);
x_940 = lean::cnstr_get(x_939, 0);
lean::inc(x_940);
lean::dec(x_939);
x_941 = l_Lean_Elaborator_toPexpr___main(x_940, x_2, x_3, x_938);
if (lean::obj_tag(x_941) == 0)
{
obj* x_942; obj* x_943; obj* x_944; 
lean::dec(x_937);
lean::dec(x_897);
lean::dec(x_890);
lean::dec(x_878);
lean::dec(x_289);
lean::dec(x_15);
lean::dec(x_1);
x_942 = lean::cnstr_get(x_941, 0);
lean::inc(x_942);
if (lean::is_exclusive(x_941)) {
 lean::cnstr_release(x_941, 0);
 x_943 = x_941;
} else {
 lean::dec_ref(x_941);
 x_943 = lean::box(0);
}
if (lean::is_scalar(x_943)) {
 x_944 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_944 = x_943;
}
lean::cnstr_set(x_944, 0, x_942);
return x_944;
}
else
{
obj* x_945; obj* x_946; obj* x_947; obj* x_948; obj* x_949; obj* x_950; obj* x_951; 
x_945 = lean::cnstr_get(x_941, 0);
lean::inc(x_945);
lean::dec(x_941);
x_946 = lean::cnstr_get(x_945, 0);
lean::inc(x_946);
x_947 = lean::cnstr_get(x_945, 1);
lean::inc(x_947);
if (lean::is_exclusive(x_945)) {
 lean::cnstr_release(x_945, 0);
 lean::cnstr_release(x_945, 1);
 x_948 = x_945;
} else {
 lean::dec_ref(x_945);
 x_948 = lean::box(0);
}
if (lean::is_scalar(x_878)) {
 x_949 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_949 = x_878;
}
lean::cnstr_set(x_949, 0, x_946);
lean::cnstr_set(x_949, 1, x_291);
x_950 = l_List_append___rarg(x_937, x_949);
if (lean::is_scalar(x_948)) {
 x_951 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_951 = x_948;
}
lean::cnstr_set(x_951, 0, x_950);
lean::cnstr_set(x_951, 1, x_947);
x_899 = x_951;
goto block_926;
}
}
}
block_926:
{
obj* x_900; obj* x_901; obj* x_902; obj* x_903; obj* x_904; obj* x_905; obj* x_906; obj* x_907; uint8 x_908; obj* x_909; obj* x_910; obj* x_911; obj* x_912; obj* x_913; 
x_900 = lean::cnstr_get(x_899, 0);
lean::inc(x_900);
x_901 = lean::cnstr_get(x_899, 1);
lean::inc(x_901);
if (lean::is_exclusive(x_899)) {
 lean::cnstr_release(x_899, 0);
 lean::cnstr_release(x_899, 1);
 x_902 = x_899;
} else {
 lean::dec_ref(x_899);
 x_902 = lean::box(0);
}
x_903 = lean::mk_nat_obj(0u);
x_904 = l_List_lengthAux___main___rarg(x_897, x_903);
x_905 = l_Lean_Elaborator_toPexpr___main___closed__23;
x_906 = l_Lean_KVMap_setNat(x_291, x_905, x_904);
x_907 = l_Lean_Elaborator_toPexpr___main___closed__24;
x_908 = lean::unbox(x_890);
lean::dec(x_890);
x_909 = l_Lean_KVMap_setBool(x_906, x_907, x_908);
x_910 = lean::cnstr_get(x_289, 1);
lean::inc(x_910);
lean::dec(x_289);
x_911 = l_List_append___rarg(x_897, x_900);
x_912 = l_Lean_Elaborator_toPexpr___main___closed__25;
x_913 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_912, x_911);
if (lean::obj_tag(x_910) == 0)
{
obj* x_914; obj* x_915; obj* x_916; obj* x_917; obj* x_918; 
x_914 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_915 = lean::box(0);
x_916 = l_Lean_KVMap_setName(x_909, x_914, x_915);
x_917 = lean_expr_mk_mdata(x_916, x_913);
if (lean::is_scalar(x_902)) {
 x_918 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_918 = x_902;
}
lean::cnstr_set(x_918, 0, x_917);
lean::cnstr_set(x_918, 1, x_901);
x_86 = x_918;
goto block_130;
}
else
{
obj* x_919; obj* x_920; obj* x_921; obj* x_922; obj* x_923; obj* x_924; obj* x_925; 
x_919 = lean::cnstr_get(x_910, 0);
lean::inc(x_919);
lean::dec(x_910);
x_920 = lean::cnstr_get(x_919, 0);
lean::inc(x_920);
lean::dec(x_919);
x_921 = l_Lean_Elaborator_mangleIdent(x_920);
x_922 = l_Lean_Elaborator_toPexpr___main___closed__26;
x_923 = l_Lean_KVMap_setName(x_909, x_922, x_921);
x_924 = lean_expr_mk_mdata(x_923, x_913);
if (lean::is_scalar(x_902)) {
 x_925 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_925 = x_902;
}
lean::cnstr_set(x_925, 0, x_924);
lean::cnstr_set(x_925, 1, x_901);
x_86 = x_925;
goto block_130;
}
}
}
}
}
}
}
}
}
}
else
{
obj* x_952; 
lean::inc(x_16);
x_952 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__15(x_16, x_2, x_3, x_4);
if (lean::obj_tag(x_952) == 0)
{
uint8 x_953; 
lean::dec(x_16);
lean::dec(x_15);
lean::dec(x_1);
x_953 = !lean::is_exclusive(x_952);
if (x_953 == 0)
{
return x_952;
}
else
{
obj* x_954; obj* x_955; 
x_954 = lean::cnstr_get(x_952, 0);
lean::inc(x_954);
lean::dec(x_952);
x_955 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_955, 0, x_954);
return x_955;
}
}
else
{
obj* x_956; uint8 x_957; 
x_956 = lean::cnstr_get(x_952, 0);
lean::inc(x_956);
lean::dec(x_952);
x_957 = !lean::is_exclusive(x_956);
if (x_957 == 0)
{
obj* x_958; obj* x_959; obj* x_960; 
x_958 = lean::cnstr_get(x_956, 0);
x_959 = lean::cnstr_get(x_956, 1);
x_960 = l_List_reverse___rarg(x_958);
if (lean::obj_tag(x_960) == 0)
{
obj* x_961; obj* x_962; obj* x_963; 
lean::free_heap_obj(x_956);
lean::dec(x_16);
lean::inc(x_1);
x_961 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_961, 0, x_1);
x_962 = l_Lean_Elaborator_toPexpr___main___closed__28;
x_963 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_961, x_962, x_2, x_3, x_959);
lean::dec(x_959);
lean::dec(x_961);
if (lean::obj_tag(x_963) == 0)
{
uint8 x_964; 
lean::dec(x_15);
lean::dec(x_1);
x_964 = !lean::is_exclusive(x_963);
if (x_964 == 0)
{
return x_963;
}
else
{
obj* x_965; obj* x_966; 
x_965 = lean::cnstr_get(x_963, 0);
lean::inc(x_965);
lean::dec(x_963);
x_966 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_966, 0, x_965);
return x_966;
}
}
else
{
obj* x_967; 
x_967 = lean::cnstr_get(x_963, 0);
lean::inc(x_967);
lean::dec(x_963);
x_86 = x_967;
goto block_130;
}
}
else
{
obj* x_968; obj* x_969; obj* x_970; obj* x_971; obj* x_972; obj* x_973; obj* x_974; obj* x_975; obj* x_976; obj* x_977; 
x_968 = lean::cnstr_get(x_960, 0);
lean::inc(x_968);
x_969 = lean::cnstr_get(x_960, 1);
lean::inc(x_969);
lean::dec(x_960);
x_970 = lean::mk_nat_obj(0u);
x_971 = l_List_lengthAux___main___rarg(x_16, x_970);
lean::dec(x_16);
x_972 = lean::box(0);
x_973 = l_Lean_Elaborator_toPexpr___main___closed__29;
x_974 = l_Lean_KVMap_setNat(x_972, x_973, x_971);
x_975 = l_List_reverse___rarg(x_969);
x_976 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_968, x_975);
lean::dec(x_968);
x_977 = lean_expr_mk_mdata(x_974, x_976);
lean::cnstr_set(x_956, 0, x_977);
x_86 = x_956;
goto block_130;
}
}
else
{
obj* x_978; obj* x_979; obj* x_980; 
x_978 = lean::cnstr_get(x_956, 0);
x_979 = lean::cnstr_get(x_956, 1);
lean::inc(x_979);
lean::inc(x_978);
lean::dec(x_956);
x_980 = l_List_reverse___rarg(x_978);
if (lean::obj_tag(x_980) == 0)
{
obj* x_981; obj* x_982; obj* x_983; 
lean::dec(x_16);
lean::inc(x_1);
x_981 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_981, 0, x_1);
x_982 = l_Lean_Elaborator_toPexpr___main___closed__28;
x_983 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_981, x_982, x_2, x_3, x_979);
lean::dec(x_979);
lean::dec(x_981);
if (lean::obj_tag(x_983) == 0)
{
obj* x_984; obj* x_985; obj* x_986; 
lean::dec(x_15);
lean::dec(x_1);
x_984 = lean::cnstr_get(x_983, 0);
lean::inc(x_984);
if (lean::is_exclusive(x_983)) {
 lean::cnstr_release(x_983, 0);
 x_985 = x_983;
} else {
 lean::dec_ref(x_983);
 x_985 = lean::box(0);
}
if (lean::is_scalar(x_985)) {
 x_986 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_986 = x_985;
}
lean::cnstr_set(x_986, 0, x_984);
return x_986;
}
else
{
obj* x_987; 
x_987 = lean::cnstr_get(x_983, 0);
lean::inc(x_987);
lean::dec(x_983);
x_86 = x_987;
goto block_130;
}
}
else
{
obj* x_988; obj* x_989; obj* x_990; obj* x_991; obj* x_992; obj* x_993; obj* x_994; obj* x_995; obj* x_996; obj* x_997; obj* x_998; 
x_988 = lean::cnstr_get(x_980, 0);
lean::inc(x_988);
x_989 = lean::cnstr_get(x_980, 1);
lean::inc(x_989);
lean::dec(x_980);
x_990 = lean::mk_nat_obj(0u);
x_991 = l_List_lengthAux___main___rarg(x_16, x_990);
lean::dec(x_16);
x_992 = lean::box(0);
x_993 = l_Lean_Elaborator_toPexpr___main___closed__29;
x_994 = l_Lean_KVMap_setNat(x_992, x_993, x_991);
x_995 = l_List_reverse___rarg(x_989);
x_996 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_988, x_995);
lean::dec(x_988);
x_997 = lean_expr_mk_mdata(x_994, x_996);
x_998 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_998, 0, x_997);
lean::cnstr_set(x_998, 1, x_979);
x_86 = x_998;
goto block_130;
}
}
}
}
}
else
{
obj* x_999; obj* x_1000; obj* x_1001; obj* x_1002; 
lean::dec(x_16);
lean::dec(x_15);
x_999 = l_Lean_Parser_stringLit_HasView;
x_1000 = lean::cnstr_get(x_999, 0);
lean::inc(x_1000);
lean::inc(x_1);
x_1001 = lean::apply_1(x_1000, x_1);
x_1002 = l_Lean_Parser_stringLit_View_value(x_1001);
if (lean::obj_tag(x_1002) == 0)
{
obj* x_1003; 
x_1003 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1003) == 0)
{
obj* x_1004; obj* x_1005; obj* x_1006; 
x_1004 = l_Lean_Elaborator_toPexpr___main___closed__30;
x_1005 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1005, 0, x_1004);
lean::cnstr_set(x_1005, 1, x_4);
x_1006 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1006, 0, x_1005);
return x_1006;
}
else
{
obj* x_1007; obj* x_1008; obj* x_1009; obj* x_1010; obj* x_1011; obj* x_1012; obj* x_1013; obj* x_1014; obj* x_1015; obj* x_1016; obj* x_1017; obj* x_1018; obj* x_1019; obj* x_1020; obj* x_1021; 
x_1007 = lean::cnstr_get(x_1003, 0);
lean::inc(x_1007);
lean::dec(x_1003);
x_1008 = lean::cnstr_get(x_3, 0);
x_1009 = lean::cnstr_get(x_1008, 2);
x_1010 = l_Lean_FileMap_toPosition(x_1009, x_1007);
x_1011 = lean::cnstr_get(x_1010, 1);
lean::inc(x_1011);
x_1012 = lean::box(0);
x_1013 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1014 = l_Lean_KVMap_setNat(x_1012, x_1013, x_1011);
x_1015 = lean::cnstr_get(x_1010, 0);
lean::inc(x_1015);
lean::dec(x_1010);
x_1016 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1017 = l_Lean_KVMap_setNat(x_1014, x_1016, x_1015);
x_1018 = l_Lean_Elaborator_toPexpr___main___closed__30;
x_1019 = lean_expr_mk_mdata(x_1017, x_1018);
x_1020 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1020, 0, x_1019);
lean::cnstr_set(x_1020, 1, x_4);
x_1021 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1021, 0, x_1020);
return x_1021;
}
}
else
{
obj* x_1022; obj* x_1023; obj* x_1024; obj* x_1025; 
x_1022 = lean::cnstr_get(x_1002, 0);
lean::inc(x_1022);
lean::dec(x_1002);
x_1023 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1023, 0, x_1022);
x_1024 = lean_expr_mk_lit(x_1023);
x_1025 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1025) == 0)
{
obj* x_1026; obj* x_1027; 
x_1026 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1026, 0, x_1024);
lean::cnstr_set(x_1026, 1, x_4);
x_1027 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1027, 0, x_1026);
return x_1027;
}
else
{
obj* x_1028; obj* x_1029; obj* x_1030; obj* x_1031; obj* x_1032; obj* x_1033; obj* x_1034; obj* x_1035; obj* x_1036; obj* x_1037; obj* x_1038; obj* x_1039; obj* x_1040; obj* x_1041; 
x_1028 = lean::cnstr_get(x_1025, 0);
lean::inc(x_1028);
lean::dec(x_1025);
x_1029 = lean::cnstr_get(x_3, 0);
x_1030 = lean::cnstr_get(x_1029, 2);
x_1031 = l_Lean_FileMap_toPosition(x_1030, x_1028);
x_1032 = lean::cnstr_get(x_1031, 1);
lean::inc(x_1032);
x_1033 = lean::box(0);
x_1034 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1035 = l_Lean_KVMap_setNat(x_1033, x_1034, x_1032);
x_1036 = lean::cnstr_get(x_1031, 0);
lean::inc(x_1036);
lean::dec(x_1031);
x_1037 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1038 = l_Lean_KVMap_setNat(x_1035, x_1037, x_1036);
x_1039 = lean_expr_mk_mdata(x_1038, x_1024);
x_1040 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1040, 0, x_1039);
lean::cnstr_set(x_1040, 1, x_4);
x_1041 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1041, 0, x_1040);
return x_1041;
}
}
}
}
else
{
obj* x_1042; obj* x_1043; obj* x_1044; obj* x_1045; obj* x_1046; obj* x_1047; obj* x_1048; 
lean::dec(x_16);
lean::dec(x_15);
x_1042 = l_Lean_Parser_number_HasView;
x_1043 = lean::cnstr_get(x_1042, 0);
lean::inc(x_1043);
lean::inc(x_1);
x_1044 = lean::apply_1(x_1043, x_1);
x_1045 = l_Lean_Parser_number_View_toNat___main(x_1044);
x_1046 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1046, 0, x_1045);
x_1047 = lean_expr_mk_lit(x_1046);
x_1048 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1048) == 0)
{
obj* x_1049; obj* x_1050; 
x_1049 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1049, 0, x_1047);
lean::cnstr_set(x_1049, 1, x_4);
x_1050 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1050, 0, x_1049);
return x_1050;
}
else
{
obj* x_1051; obj* x_1052; obj* x_1053; obj* x_1054; obj* x_1055; obj* x_1056; obj* x_1057; obj* x_1058; obj* x_1059; obj* x_1060; obj* x_1061; obj* x_1062; obj* x_1063; obj* x_1064; 
x_1051 = lean::cnstr_get(x_1048, 0);
lean::inc(x_1051);
lean::dec(x_1048);
x_1052 = lean::cnstr_get(x_3, 0);
x_1053 = lean::cnstr_get(x_1052, 2);
x_1054 = l_Lean_FileMap_toPosition(x_1053, x_1051);
x_1055 = lean::cnstr_get(x_1054, 1);
lean::inc(x_1055);
x_1056 = lean::box(0);
x_1057 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1058 = l_Lean_KVMap_setNat(x_1056, x_1057, x_1055);
x_1059 = lean::cnstr_get(x_1054, 0);
lean::inc(x_1059);
lean::dec(x_1054);
x_1060 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1061 = l_Lean_KVMap_setNat(x_1058, x_1060, x_1059);
x_1062 = lean_expr_mk_mdata(x_1061, x_1047);
x_1063 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1063, 0, x_1062);
lean::cnstr_set(x_1063, 1, x_4);
x_1064 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1064, 0, x_1063);
return x_1064;
}
}
}
else
{
obj* x_1065; obj* x_1066; obj* x_1067; obj* x_1068; obj* x_1069; 
lean::dec(x_16);
lean::dec(x_15);
x_1065 = l_Lean_Parser_Term_borrowed_HasView;
x_1066 = lean::cnstr_get(x_1065, 0);
lean::inc(x_1066);
lean::inc(x_1);
x_1067 = lean::apply_1(x_1066, x_1);
x_1068 = lean::cnstr_get(x_1067, 1);
lean::inc(x_1068);
lean::dec(x_1067);
x_1069 = l_Lean_Elaborator_toPexpr___main(x_1068, x_2, x_3, x_4);
if (lean::obj_tag(x_1069) == 0)
{
uint8 x_1070; 
lean::dec(x_1);
x_1070 = !lean::is_exclusive(x_1069);
if (x_1070 == 0)
{
return x_1069;
}
else
{
obj* x_1071; obj* x_1072; 
x_1071 = lean::cnstr_get(x_1069, 0);
lean::inc(x_1071);
lean::dec(x_1069);
x_1072 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1072, 0, x_1071);
return x_1072;
}
}
else
{
uint8 x_1073; 
x_1073 = !lean::is_exclusive(x_1069);
if (x_1073 == 0)
{
obj* x_1074; uint8 x_1075; 
x_1074 = lean::cnstr_get(x_1069, 0);
x_1075 = !lean::is_exclusive(x_1074);
if (x_1075 == 0)
{
obj* x_1076; obj* x_1077; obj* x_1078; obj* x_1079; 
x_1076 = lean::cnstr_get(x_1074, 0);
x_1077 = l_Lean_Elaborator_toPexpr___main___closed__31;
x_1078 = l_Lean_Elaborator_Expr_mkAnnotation(x_1077, x_1076);
x_1079 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1079) == 0)
{
lean::cnstr_set(x_1074, 0, x_1078);
return x_1069;
}
else
{
obj* x_1080; obj* x_1081; obj* x_1082; obj* x_1083; obj* x_1084; obj* x_1085; obj* x_1086; obj* x_1087; obj* x_1088; obj* x_1089; obj* x_1090; obj* x_1091; 
x_1080 = lean::cnstr_get(x_1079, 0);
lean::inc(x_1080);
lean::dec(x_1079);
x_1081 = lean::cnstr_get(x_3, 0);
x_1082 = lean::cnstr_get(x_1081, 2);
x_1083 = l_Lean_FileMap_toPosition(x_1082, x_1080);
x_1084 = lean::cnstr_get(x_1083, 1);
lean::inc(x_1084);
x_1085 = lean::box(0);
x_1086 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1087 = l_Lean_KVMap_setNat(x_1085, x_1086, x_1084);
x_1088 = lean::cnstr_get(x_1083, 0);
lean::inc(x_1088);
lean::dec(x_1083);
x_1089 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1090 = l_Lean_KVMap_setNat(x_1087, x_1089, x_1088);
x_1091 = lean_expr_mk_mdata(x_1090, x_1078);
lean::cnstr_set(x_1074, 0, x_1091);
return x_1069;
}
}
else
{
obj* x_1092; obj* x_1093; obj* x_1094; obj* x_1095; obj* x_1096; 
x_1092 = lean::cnstr_get(x_1074, 0);
x_1093 = lean::cnstr_get(x_1074, 1);
lean::inc(x_1093);
lean::inc(x_1092);
lean::dec(x_1074);
x_1094 = l_Lean_Elaborator_toPexpr___main___closed__31;
x_1095 = l_Lean_Elaborator_Expr_mkAnnotation(x_1094, x_1092);
x_1096 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1096) == 0)
{
obj* x_1097; 
x_1097 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1097, 0, x_1095);
lean::cnstr_set(x_1097, 1, x_1093);
lean::cnstr_set(x_1069, 0, x_1097);
return x_1069;
}
else
{
obj* x_1098; obj* x_1099; obj* x_1100; obj* x_1101; obj* x_1102; obj* x_1103; obj* x_1104; obj* x_1105; obj* x_1106; obj* x_1107; obj* x_1108; obj* x_1109; obj* x_1110; 
x_1098 = lean::cnstr_get(x_1096, 0);
lean::inc(x_1098);
lean::dec(x_1096);
x_1099 = lean::cnstr_get(x_3, 0);
x_1100 = lean::cnstr_get(x_1099, 2);
x_1101 = l_Lean_FileMap_toPosition(x_1100, x_1098);
x_1102 = lean::cnstr_get(x_1101, 1);
lean::inc(x_1102);
x_1103 = lean::box(0);
x_1104 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1105 = l_Lean_KVMap_setNat(x_1103, x_1104, x_1102);
x_1106 = lean::cnstr_get(x_1101, 0);
lean::inc(x_1106);
lean::dec(x_1101);
x_1107 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1108 = l_Lean_KVMap_setNat(x_1105, x_1107, x_1106);
x_1109 = lean_expr_mk_mdata(x_1108, x_1095);
x_1110 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1110, 0, x_1109);
lean::cnstr_set(x_1110, 1, x_1093);
lean::cnstr_set(x_1069, 0, x_1110);
return x_1069;
}
}
}
else
{
obj* x_1111; obj* x_1112; obj* x_1113; obj* x_1114; obj* x_1115; obj* x_1116; obj* x_1117; 
x_1111 = lean::cnstr_get(x_1069, 0);
lean::inc(x_1111);
lean::dec(x_1069);
x_1112 = lean::cnstr_get(x_1111, 0);
lean::inc(x_1112);
x_1113 = lean::cnstr_get(x_1111, 1);
lean::inc(x_1113);
if (lean::is_exclusive(x_1111)) {
 lean::cnstr_release(x_1111, 0);
 lean::cnstr_release(x_1111, 1);
 x_1114 = x_1111;
} else {
 lean::dec_ref(x_1111);
 x_1114 = lean::box(0);
}
x_1115 = l_Lean_Elaborator_toPexpr___main___closed__31;
x_1116 = l_Lean_Elaborator_Expr_mkAnnotation(x_1115, x_1112);
x_1117 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1117) == 0)
{
obj* x_1118; obj* x_1119; 
if (lean::is_scalar(x_1114)) {
 x_1118 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1118 = x_1114;
}
lean::cnstr_set(x_1118, 0, x_1116);
lean::cnstr_set(x_1118, 1, x_1113);
x_1119 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1119, 0, x_1118);
return x_1119;
}
else
{
obj* x_1120; obj* x_1121; obj* x_1122; obj* x_1123; obj* x_1124; obj* x_1125; obj* x_1126; obj* x_1127; obj* x_1128; obj* x_1129; obj* x_1130; obj* x_1131; obj* x_1132; obj* x_1133; 
x_1120 = lean::cnstr_get(x_1117, 0);
lean::inc(x_1120);
lean::dec(x_1117);
x_1121 = lean::cnstr_get(x_3, 0);
x_1122 = lean::cnstr_get(x_1121, 2);
x_1123 = l_Lean_FileMap_toPosition(x_1122, x_1120);
x_1124 = lean::cnstr_get(x_1123, 1);
lean::inc(x_1124);
x_1125 = lean::box(0);
x_1126 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1127 = l_Lean_KVMap_setNat(x_1125, x_1126, x_1124);
x_1128 = lean::cnstr_get(x_1123, 0);
lean::inc(x_1128);
lean::dec(x_1123);
x_1129 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1130 = l_Lean_KVMap_setNat(x_1127, x_1129, x_1128);
x_1131 = lean_expr_mk_mdata(x_1130, x_1116);
if (lean::is_scalar(x_1114)) {
 x_1132 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1132 = x_1114;
}
lean::cnstr_set(x_1132, 0, x_1131);
lean::cnstr_set(x_1132, 1, x_1113);
x_1133 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1133, 0, x_1132);
return x_1133;
}
}
}
}
}
else
{
obj* x_1134; obj* x_1135; obj* x_1136; obj* x_1137; obj* x_1138; 
lean::dec(x_16);
lean::dec(x_15);
x_1134 = l_Lean_Parser_Term_inaccessible_HasView;
x_1135 = lean::cnstr_get(x_1134, 0);
lean::inc(x_1135);
lean::inc(x_1);
x_1136 = lean::apply_1(x_1135, x_1);
x_1137 = lean::cnstr_get(x_1136, 1);
lean::inc(x_1137);
lean::dec(x_1136);
x_1138 = l_Lean_Elaborator_toPexpr___main(x_1137, x_2, x_3, x_4);
if (lean::obj_tag(x_1138) == 0)
{
uint8 x_1139; 
lean::dec(x_1);
x_1139 = !lean::is_exclusive(x_1138);
if (x_1139 == 0)
{
return x_1138;
}
else
{
obj* x_1140; obj* x_1141; 
x_1140 = lean::cnstr_get(x_1138, 0);
lean::inc(x_1140);
lean::dec(x_1138);
x_1141 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1141, 0, x_1140);
return x_1141;
}
}
else
{
uint8 x_1142; 
x_1142 = !lean::is_exclusive(x_1138);
if (x_1142 == 0)
{
obj* x_1143; uint8 x_1144; 
x_1143 = lean::cnstr_get(x_1138, 0);
x_1144 = !lean::is_exclusive(x_1143);
if (x_1144 == 0)
{
obj* x_1145; obj* x_1146; obj* x_1147; obj* x_1148; 
x_1145 = lean::cnstr_get(x_1143, 0);
x_1146 = l_Lean_Elaborator_toPexpr___main___closed__32;
x_1147 = l_Lean_Elaborator_Expr_mkAnnotation(x_1146, x_1145);
x_1148 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1148) == 0)
{
lean::cnstr_set(x_1143, 0, x_1147);
return x_1138;
}
else
{
obj* x_1149; obj* x_1150; obj* x_1151; obj* x_1152; obj* x_1153; obj* x_1154; obj* x_1155; obj* x_1156; obj* x_1157; obj* x_1158; obj* x_1159; obj* x_1160; 
x_1149 = lean::cnstr_get(x_1148, 0);
lean::inc(x_1149);
lean::dec(x_1148);
x_1150 = lean::cnstr_get(x_3, 0);
x_1151 = lean::cnstr_get(x_1150, 2);
x_1152 = l_Lean_FileMap_toPosition(x_1151, x_1149);
x_1153 = lean::cnstr_get(x_1152, 1);
lean::inc(x_1153);
x_1154 = lean::box(0);
x_1155 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1156 = l_Lean_KVMap_setNat(x_1154, x_1155, x_1153);
x_1157 = lean::cnstr_get(x_1152, 0);
lean::inc(x_1157);
lean::dec(x_1152);
x_1158 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1159 = l_Lean_KVMap_setNat(x_1156, x_1158, x_1157);
x_1160 = lean_expr_mk_mdata(x_1159, x_1147);
lean::cnstr_set(x_1143, 0, x_1160);
return x_1138;
}
}
else
{
obj* x_1161; obj* x_1162; obj* x_1163; obj* x_1164; obj* x_1165; 
x_1161 = lean::cnstr_get(x_1143, 0);
x_1162 = lean::cnstr_get(x_1143, 1);
lean::inc(x_1162);
lean::inc(x_1161);
lean::dec(x_1143);
x_1163 = l_Lean_Elaborator_toPexpr___main___closed__32;
x_1164 = l_Lean_Elaborator_Expr_mkAnnotation(x_1163, x_1161);
x_1165 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1165) == 0)
{
obj* x_1166; 
x_1166 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1166, 0, x_1164);
lean::cnstr_set(x_1166, 1, x_1162);
lean::cnstr_set(x_1138, 0, x_1166);
return x_1138;
}
else
{
obj* x_1167; obj* x_1168; obj* x_1169; obj* x_1170; obj* x_1171; obj* x_1172; obj* x_1173; obj* x_1174; obj* x_1175; obj* x_1176; obj* x_1177; obj* x_1178; obj* x_1179; 
x_1167 = lean::cnstr_get(x_1165, 0);
lean::inc(x_1167);
lean::dec(x_1165);
x_1168 = lean::cnstr_get(x_3, 0);
x_1169 = lean::cnstr_get(x_1168, 2);
x_1170 = l_Lean_FileMap_toPosition(x_1169, x_1167);
x_1171 = lean::cnstr_get(x_1170, 1);
lean::inc(x_1171);
x_1172 = lean::box(0);
x_1173 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1174 = l_Lean_KVMap_setNat(x_1172, x_1173, x_1171);
x_1175 = lean::cnstr_get(x_1170, 0);
lean::inc(x_1175);
lean::dec(x_1170);
x_1176 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1177 = l_Lean_KVMap_setNat(x_1174, x_1176, x_1175);
x_1178 = lean_expr_mk_mdata(x_1177, x_1164);
x_1179 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1179, 0, x_1178);
lean::cnstr_set(x_1179, 1, x_1162);
lean::cnstr_set(x_1138, 0, x_1179);
return x_1138;
}
}
}
else
{
obj* x_1180; obj* x_1181; obj* x_1182; obj* x_1183; obj* x_1184; obj* x_1185; obj* x_1186; 
x_1180 = lean::cnstr_get(x_1138, 0);
lean::inc(x_1180);
lean::dec(x_1138);
x_1181 = lean::cnstr_get(x_1180, 0);
lean::inc(x_1181);
x_1182 = lean::cnstr_get(x_1180, 1);
lean::inc(x_1182);
if (lean::is_exclusive(x_1180)) {
 lean::cnstr_release(x_1180, 0);
 lean::cnstr_release(x_1180, 1);
 x_1183 = x_1180;
} else {
 lean::dec_ref(x_1180);
 x_1183 = lean::box(0);
}
x_1184 = l_Lean_Elaborator_toPexpr___main___closed__32;
x_1185 = l_Lean_Elaborator_Expr_mkAnnotation(x_1184, x_1181);
x_1186 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1186) == 0)
{
obj* x_1187; obj* x_1188; 
if (lean::is_scalar(x_1183)) {
 x_1187 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1187 = x_1183;
}
lean::cnstr_set(x_1187, 0, x_1185);
lean::cnstr_set(x_1187, 1, x_1182);
x_1188 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1188, 0, x_1187);
return x_1188;
}
else
{
obj* x_1189; obj* x_1190; obj* x_1191; obj* x_1192; obj* x_1193; obj* x_1194; obj* x_1195; obj* x_1196; obj* x_1197; obj* x_1198; obj* x_1199; obj* x_1200; obj* x_1201; obj* x_1202; 
x_1189 = lean::cnstr_get(x_1186, 0);
lean::inc(x_1189);
lean::dec(x_1186);
x_1190 = lean::cnstr_get(x_3, 0);
x_1191 = lean::cnstr_get(x_1190, 2);
x_1192 = l_Lean_FileMap_toPosition(x_1191, x_1189);
x_1193 = lean::cnstr_get(x_1192, 1);
lean::inc(x_1193);
x_1194 = lean::box(0);
x_1195 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1196 = l_Lean_KVMap_setNat(x_1194, x_1195, x_1193);
x_1197 = lean::cnstr_get(x_1192, 0);
lean::inc(x_1197);
lean::dec(x_1192);
x_1198 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1199 = l_Lean_KVMap_setNat(x_1196, x_1198, x_1197);
x_1200 = lean_expr_mk_mdata(x_1199, x_1185);
if (lean::is_scalar(x_1183)) {
 x_1201 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1201 = x_1183;
}
lean::cnstr_set(x_1201, 0, x_1200);
lean::cnstr_set(x_1201, 1, x_1182);
x_1202 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1202, 0, x_1201);
return x_1202;
}
}
}
}
}
else
{
obj* x_1203; obj* x_1204; obj* x_1205; obj* x_1206; obj* x_1207; obj* x_1208; obj* x_1209; obj* x_1210; 
lean::dec(x_16);
lean::dec(x_15);
x_1203 = l_Lean_Parser_Term_explicit_HasView;
x_1204 = lean::cnstr_get(x_1203, 0);
lean::inc(x_1204);
lean::inc(x_1);
x_1205 = lean::apply_1(x_1204, x_1);
x_1206 = lean::cnstr_get(x_1205, 0);
lean::inc(x_1206);
x_1207 = l_Lean_Parser_identUnivs_HasView;
x_1208 = lean::cnstr_get(x_1207, 1);
lean::inc(x_1208);
x_1209 = lean::cnstr_get(x_1205, 1);
lean::inc(x_1209);
lean::dec(x_1205);
x_1210 = lean::apply_1(x_1208, x_1209);
if (lean::obj_tag(x_1206) == 0)
{
obj* x_1211; 
lean::dec(x_1206);
x_1211 = l_Lean_Elaborator_toPexpr___main(x_1210, x_2, x_3, x_4);
if (lean::obj_tag(x_1211) == 0)
{
uint8 x_1212; 
lean::dec(x_1);
x_1212 = !lean::is_exclusive(x_1211);
if (x_1212 == 0)
{
return x_1211;
}
else
{
obj* x_1213; obj* x_1214; 
x_1213 = lean::cnstr_get(x_1211, 0);
lean::inc(x_1213);
lean::dec(x_1211);
x_1214 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1214, 0, x_1213);
return x_1214;
}
}
else
{
uint8 x_1215; 
x_1215 = !lean::is_exclusive(x_1211);
if (x_1215 == 0)
{
obj* x_1216; uint8 x_1217; 
x_1216 = lean::cnstr_get(x_1211, 0);
x_1217 = !lean::is_exclusive(x_1216);
if (x_1217 == 0)
{
obj* x_1218; obj* x_1219; obj* x_1220; obj* x_1221; 
x_1218 = lean::cnstr_get(x_1216, 0);
x_1219 = l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1___closed__1;
x_1220 = l_Lean_Elaborator_Expr_mkAnnotation(x_1219, x_1218);
x_1221 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1221) == 0)
{
lean::cnstr_set(x_1216, 0, x_1220);
return x_1211;
}
else
{
obj* x_1222; obj* x_1223; obj* x_1224; obj* x_1225; obj* x_1226; obj* x_1227; obj* x_1228; obj* x_1229; obj* x_1230; obj* x_1231; obj* x_1232; obj* x_1233; 
x_1222 = lean::cnstr_get(x_1221, 0);
lean::inc(x_1222);
lean::dec(x_1221);
x_1223 = lean::cnstr_get(x_3, 0);
x_1224 = lean::cnstr_get(x_1223, 2);
x_1225 = l_Lean_FileMap_toPosition(x_1224, x_1222);
x_1226 = lean::cnstr_get(x_1225, 1);
lean::inc(x_1226);
x_1227 = lean::box(0);
x_1228 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1229 = l_Lean_KVMap_setNat(x_1227, x_1228, x_1226);
x_1230 = lean::cnstr_get(x_1225, 0);
lean::inc(x_1230);
lean::dec(x_1225);
x_1231 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1232 = l_Lean_KVMap_setNat(x_1229, x_1231, x_1230);
x_1233 = lean_expr_mk_mdata(x_1232, x_1220);
lean::cnstr_set(x_1216, 0, x_1233);
return x_1211;
}
}
else
{
obj* x_1234; obj* x_1235; obj* x_1236; obj* x_1237; obj* x_1238; 
x_1234 = lean::cnstr_get(x_1216, 0);
x_1235 = lean::cnstr_get(x_1216, 1);
lean::inc(x_1235);
lean::inc(x_1234);
lean::dec(x_1216);
x_1236 = l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1___closed__1;
x_1237 = l_Lean_Elaborator_Expr_mkAnnotation(x_1236, x_1234);
x_1238 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1238) == 0)
{
obj* x_1239; 
x_1239 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1239, 0, x_1237);
lean::cnstr_set(x_1239, 1, x_1235);
lean::cnstr_set(x_1211, 0, x_1239);
return x_1211;
}
else
{
obj* x_1240; obj* x_1241; obj* x_1242; obj* x_1243; obj* x_1244; obj* x_1245; obj* x_1246; obj* x_1247; obj* x_1248; obj* x_1249; obj* x_1250; obj* x_1251; obj* x_1252; 
x_1240 = lean::cnstr_get(x_1238, 0);
lean::inc(x_1240);
lean::dec(x_1238);
x_1241 = lean::cnstr_get(x_3, 0);
x_1242 = lean::cnstr_get(x_1241, 2);
x_1243 = l_Lean_FileMap_toPosition(x_1242, x_1240);
x_1244 = lean::cnstr_get(x_1243, 1);
lean::inc(x_1244);
x_1245 = lean::box(0);
x_1246 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1247 = l_Lean_KVMap_setNat(x_1245, x_1246, x_1244);
x_1248 = lean::cnstr_get(x_1243, 0);
lean::inc(x_1248);
lean::dec(x_1243);
x_1249 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1250 = l_Lean_KVMap_setNat(x_1247, x_1249, x_1248);
x_1251 = lean_expr_mk_mdata(x_1250, x_1237);
x_1252 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1252, 0, x_1251);
lean::cnstr_set(x_1252, 1, x_1235);
lean::cnstr_set(x_1211, 0, x_1252);
return x_1211;
}
}
}
else
{
obj* x_1253; obj* x_1254; obj* x_1255; obj* x_1256; obj* x_1257; obj* x_1258; obj* x_1259; 
x_1253 = lean::cnstr_get(x_1211, 0);
lean::inc(x_1253);
lean::dec(x_1211);
x_1254 = lean::cnstr_get(x_1253, 0);
lean::inc(x_1254);
x_1255 = lean::cnstr_get(x_1253, 1);
lean::inc(x_1255);
if (lean::is_exclusive(x_1253)) {
 lean::cnstr_release(x_1253, 0);
 lean::cnstr_release(x_1253, 1);
 x_1256 = x_1253;
} else {
 lean::dec_ref(x_1253);
 x_1256 = lean::box(0);
}
x_1257 = l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1___closed__1;
x_1258 = l_Lean_Elaborator_Expr_mkAnnotation(x_1257, x_1254);
x_1259 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1259) == 0)
{
obj* x_1260; obj* x_1261; 
if (lean::is_scalar(x_1256)) {
 x_1260 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1260 = x_1256;
}
lean::cnstr_set(x_1260, 0, x_1258);
lean::cnstr_set(x_1260, 1, x_1255);
x_1261 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1261, 0, x_1260);
return x_1261;
}
else
{
obj* x_1262; obj* x_1263; obj* x_1264; obj* x_1265; obj* x_1266; obj* x_1267; obj* x_1268; obj* x_1269; obj* x_1270; obj* x_1271; obj* x_1272; obj* x_1273; obj* x_1274; obj* x_1275; 
x_1262 = lean::cnstr_get(x_1259, 0);
lean::inc(x_1262);
lean::dec(x_1259);
x_1263 = lean::cnstr_get(x_3, 0);
x_1264 = lean::cnstr_get(x_1263, 2);
x_1265 = l_Lean_FileMap_toPosition(x_1264, x_1262);
x_1266 = lean::cnstr_get(x_1265, 1);
lean::inc(x_1266);
x_1267 = lean::box(0);
x_1268 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1269 = l_Lean_KVMap_setNat(x_1267, x_1268, x_1266);
x_1270 = lean::cnstr_get(x_1265, 0);
lean::inc(x_1270);
lean::dec(x_1265);
x_1271 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1272 = l_Lean_KVMap_setNat(x_1269, x_1271, x_1270);
x_1273 = lean_expr_mk_mdata(x_1272, x_1258);
if (lean::is_scalar(x_1256)) {
 x_1274 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1274 = x_1256;
}
lean::cnstr_set(x_1274, 0, x_1273);
lean::cnstr_set(x_1274, 1, x_1255);
x_1275 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1275, 0, x_1274);
return x_1275;
}
}
}
}
else
{
obj* x_1276; 
lean::dec(x_1206);
x_1276 = l_Lean_Elaborator_toPexpr___main(x_1210, x_2, x_3, x_4);
if (lean::obj_tag(x_1276) == 0)
{
uint8 x_1277; 
lean::dec(x_1);
x_1277 = !lean::is_exclusive(x_1276);
if (x_1277 == 0)
{
return x_1276;
}
else
{
obj* x_1278; obj* x_1279; 
x_1278 = lean::cnstr_get(x_1276, 0);
lean::inc(x_1278);
lean::dec(x_1276);
x_1279 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1279, 0, x_1278);
return x_1279;
}
}
else
{
uint8 x_1280; 
x_1280 = !lean::is_exclusive(x_1276);
if (x_1280 == 0)
{
obj* x_1281; uint8 x_1282; 
x_1281 = lean::cnstr_get(x_1276, 0);
x_1282 = !lean::is_exclusive(x_1281);
if (x_1282 == 0)
{
obj* x_1283; obj* x_1284; obj* x_1285; obj* x_1286; 
x_1283 = lean::cnstr_get(x_1281, 0);
x_1284 = l_Lean_Elaborator_toPexpr___main___closed__33;
x_1285 = l_Lean_Elaborator_Expr_mkAnnotation(x_1284, x_1283);
x_1286 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1286) == 0)
{
lean::cnstr_set(x_1281, 0, x_1285);
return x_1276;
}
else
{
obj* x_1287; obj* x_1288; obj* x_1289; obj* x_1290; obj* x_1291; obj* x_1292; obj* x_1293; obj* x_1294; obj* x_1295; obj* x_1296; obj* x_1297; obj* x_1298; 
x_1287 = lean::cnstr_get(x_1286, 0);
lean::inc(x_1287);
lean::dec(x_1286);
x_1288 = lean::cnstr_get(x_3, 0);
x_1289 = lean::cnstr_get(x_1288, 2);
x_1290 = l_Lean_FileMap_toPosition(x_1289, x_1287);
x_1291 = lean::cnstr_get(x_1290, 1);
lean::inc(x_1291);
x_1292 = lean::box(0);
x_1293 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1294 = l_Lean_KVMap_setNat(x_1292, x_1293, x_1291);
x_1295 = lean::cnstr_get(x_1290, 0);
lean::inc(x_1295);
lean::dec(x_1290);
x_1296 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1297 = l_Lean_KVMap_setNat(x_1294, x_1296, x_1295);
x_1298 = lean_expr_mk_mdata(x_1297, x_1285);
lean::cnstr_set(x_1281, 0, x_1298);
return x_1276;
}
}
else
{
obj* x_1299; obj* x_1300; obj* x_1301; obj* x_1302; obj* x_1303; 
x_1299 = lean::cnstr_get(x_1281, 0);
x_1300 = lean::cnstr_get(x_1281, 1);
lean::inc(x_1300);
lean::inc(x_1299);
lean::dec(x_1281);
x_1301 = l_Lean_Elaborator_toPexpr___main___closed__33;
x_1302 = l_Lean_Elaborator_Expr_mkAnnotation(x_1301, x_1299);
x_1303 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1303) == 0)
{
obj* x_1304; 
x_1304 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1304, 0, x_1302);
lean::cnstr_set(x_1304, 1, x_1300);
lean::cnstr_set(x_1276, 0, x_1304);
return x_1276;
}
else
{
obj* x_1305; obj* x_1306; obj* x_1307; obj* x_1308; obj* x_1309; obj* x_1310; obj* x_1311; obj* x_1312; obj* x_1313; obj* x_1314; obj* x_1315; obj* x_1316; obj* x_1317; 
x_1305 = lean::cnstr_get(x_1303, 0);
lean::inc(x_1305);
lean::dec(x_1303);
x_1306 = lean::cnstr_get(x_3, 0);
x_1307 = lean::cnstr_get(x_1306, 2);
x_1308 = l_Lean_FileMap_toPosition(x_1307, x_1305);
x_1309 = lean::cnstr_get(x_1308, 1);
lean::inc(x_1309);
x_1310 = lean::box(0);
x_1311 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1312 = l_Lean_KVMap_setNat(x_1310, x_1311, x_1309);
x_1313 = lean::cnstr_get(x_1308, 0);
lean::inc(x_1313);
lean::dec(x_1308);
x_1314 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1315 = l_Lean_KVMap_setNat(x_1312, x_1314, x_1313);
x_1316 = lean_expr_mk_mdata(x_1315, x_1302);
x_1317 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1317, 0, x_1316);
lean::cnstr_set(x_1317, 1, x_1300);
lean::cnstr_set(x_1276, 0, x_1317);
return x_1276;
}
}
}
else
{
obj* x_1318; obj* x_1319; obj* x_1320; obj* x_1321; obj* x_1322; obj* x_1323; obj* x_1324; 
x_1318 = lean::cnstr_get(x_1276, 0);
lean::inc(x_1318);
lean::dec(x_1276);
x_1319 = lean::cnstr_get(x_1318, 0);
lean::inc(x_1319);
x_1320 = lean::cnstr_get(x_1318, 1);
lean::inc(x_1320);
if (lean::is_exclusive(x_1318)) {
 lean::cnstr_release(x_1318, 0);
 lean::cnstr_release(x_1318, 1);
 x_1321 = x_1318;
} else {
 lean::dec_ref(x_1318);
 x_1321 = lean::box(0);
}
x_1322 = l_Lean_Elaborator_toPexpr___main___closed__33;
x_1323 = l_Lean_Elaborator_Expr_mkAnnotation(x_1322, x_1319);
x_1324 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1324) == 0)
{
obj* x_1325; obj* x_1326; 
if (lean::is_scalar(x_1321)) {
 x_1325 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1325 = x_1321;
}
lean::cnstr_set(x_1325, 0, x_1323);
lean::cnstr_set(x_1325, 1, x_1320);
x_1326 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1326, 0, x_1325);
return x_1326;
}
else
{
obj* x_1327; obj* x_1328; obj* x_1329; obj* x_1330; obj* x_1331; obj* x_1332; obj* x_1333; obj* x_1334; obj* x_1335; obj* x_1336; obj* x_1337; obj* x_1338; obj* x_1339; obj* x_1340; 
x_1327 = lean::cnstr_get(x_1324, 0);
lean::inc(x_1327);
lean::dec(x_1324);
x_1328 = lean::cnstr_get(x_3, 0);
x_1329 = lean::cnstr_get(x_1328, 2);
x_1330 = l_Lean_FileMap_toPosition(x_1329, x_1327);
x_1331 = lean::cnstr_get(x_1330, 1);
lean::inc(x_1331);
x_1332 = lean::box(0);
x_1333 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1334 = l_Lean_KVMap_setNat(x_1332, x_1333, x_1331);
x_1335 = lean::cnstr_get(x_1330, 0);
lean::inc(x_1335);
lean::dec(x_1330);
x_1336 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1337 = l_Lean_KVMap_setNat(x_1334, x_1336, x_1335);
x_1338 = lean_expr_mk_mdata(x_1337, x_1323);
if (lean::is_scalar(x_1321)) {
 x_1339 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1339 = x_1321;
}
lean::cnstr_set(x_1339, 0, x_1338);
lean::cnstr_set(x_1339, 1, x_1320);
x_1340 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1340, 0, x_1339);
return x_1340;
}
}
}
}
}
}
else
{
obj* x_1341; obj* x_1342; obj* x_1343; obj* x_1344; 
lean::dec(x_16);
lean::dec(x_15);
x_1341 = l_Lean_Parser_Term_projection_HasView;
x_1342 = lean::cnstr_get(x_1341, 0);
lean::inc(x_1342);
lean::inc(x_1);
x_1343 = lean::apply_1(x_1342, x_1);
x_1344 = lean::cnstr_get(x_1343, 2);
lean::inc(x_1344);
if (lean::obj_tag(x_1344) == 0)
{
obj* x_1345; obj* x_1346; obj* x_1347; obj* x_1348; obj* x_1349; 
x_1345 = lean::cnstr_get(x_1343, 0);
lean::inc(x_1345);
lean::dec(x_1343);
x_1346 = lean::cnstr_get(x_1344, 0);
lean::inc(x_1346);
lean::dec(x_1344);
x_1347 = lean::cnstr_get(x_1346, 2);
lean::inc(x_1347);
lean::dec(x_1346);
x_1348 = lean::alloc_cnstr(2, 1, 0);
lean::cnstr_set(x_1348, 0, x_1347);
x_1349 = l_Lean_Elaborator_toPexpr___main(x_1345, x_2, x_3, x_4);
if (lean::obj_tag(x_1349) == 0)
{
uint8 x_1350; 
lean::dec(x_1348);
lean::dec(x_1);
x_1350 = !lean::is_exclusive(x_1349);
if (x_1350 == 0)
{
return x_1349;
}
else
{
obj* x_1351; obj* x_1352; 
x_1351 = lean::cnstr_get(x_1349, 0);
lean::inc(x_1351);
lean::dec(x_1349);
x_1352 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1352, 0, x_1351);
return x_1352;
}
}
else
{
uint8 x_1353; 
x_1353 = !lean::is_exclusive(x_1349);
if (x_1353 == 0)
{
obj* x_1354; uint8 x_1355; 
x_1354 = lean::cnstr_get(x_1349, 0);
x_1355 = !lean::is_exclusive(x_1354);
if (x_1355 == 0)
{
obj* x_1356; obj* x_1357; obj* x_1358; obj* x_1359; obj* x_1360; obj* x_1361; 
x_1356 = lean::cnstr_get(x_1354, 0);
x_1357 = lean::box(0);
x_1358 = l_Lean_Elaborator_toPexpr___main___closed__34;
x_1359 = l_Lean_KVMap_insertCore___main(x_1357, x_1358, x_1348);
x_1360 = lean_expr_mk_mdata(x_1359, x_1356);
x_1361 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1361) == 0)
{
lean::cnstr_set(x_1354, 0, x_1360);
return x_1349;
}
else
{
obj* x_1362; obj* x_1363; obj* x_1364; obj* x_1365; obj* x_1366; obj* x_1367; obj* x_1368; obj* x_1369; obj* x_1370; obj* x_1371; obj* x_1372; 
x_1362 = lean::cnstr_get(x_1361, 0);
lean::inc(x_1362);
lean::dec(x_1361);
x_1363 = lean::cnstr_get(x_3, 0);
x_1364 = lean::cnstr_get(x_1363, 2);
x_1365 = l_Lean_FileMap_toPosition(x_1364, x_1362);
x_1366 = lean::cnstr_get(x_1365, 1);
lean::inc(x_1366);
x_1367 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1368 = l_Lean_KVMap_setNat(x_1357, x_1367, x_1366);
x_1369 = lean::cnstr_get(x_1365, 0);
lean::inc(x_1369);
lean::dec(x_1365);
x_1370 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1371 = l_Lean_KVMap_setNat(x_1368, x_1370, x_1369);
x_1372 = lean_expr_mk_mdata(x_1371, x_1360);
lean::cnstr_set(x_1354, 0, x_1372);
return x_1349;
}
}
else
{
obj* x_1373; obj* x_1374; obj* x_1375; obj* x_1376; obj* x_1377; obj* x_1378; obj* x_1379; 
x_1373 = lean::cnstr_get(x_1354, 0);
x_1374 = lean::cnstr_get(x_1354, 1);
lean::inc(x_1374);
lean::inc(x_1373);
lean::dec(x_1354);
x_1375 = lean::box(0);
x_1376 = l_Lean_Elaborator_toPexpr___main___closed__34;
x_1377 = l_Lean_KVMap_insertCore___main(x_1375, x_1376, x_1348);
x_1378 = lean_expr_mk_mdata(x_1377, x_1373);
x_1379 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1379) == 0)
{
obj* x_1380; 
x_1380 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1380, 0, x_1378);
lean::cnstr_set(x_1380, 1, x_1374);
lean::cnstr_set(x_1349, 0, x_1380);
return x_1349;
}
else
{
obj* x_1381; obj* x_1382; obj* x_1383; obj* x_1384; obj* x_1385; obj* x_1386; obj* x_1387; obj* x_1388; obj* x_1389; obj* x_1390; obj* x_1391; obj* x_1392; 
x_1381 = lean::cnstr_get(x_1379, 0);
lean::inc(x_1381);
lean::dec(x_1379);
x_1382 = lean::cnstr_get(x_3, 0);
x_1383 = lean::cnstr_get(x_1382, 2);
x_1384 = l_Lean_FileMap_toPosition(x_1383, x_1381);
x_1385 = lean::cnstr_get(x_1384, 1);
lean::inc(x_1385);
x_1386 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1387 = l_Lean_KVMap_setNat(x_1375, x_1386, x_1385);
x_1388 = lean::cnstr_get(x_1384, 0);
lean::inc(x_1388);
lean::dec(x_1384);
x_1389 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1390 = l_Lean_KVMap_setNat(x_1387, x_1389, x_1388);
x_1391 = lean_expr_mk_mdata(x_1390, x_1378);
x_1392 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1392, 0, x_1391);
lean::cnstr_set(x_1392, 1, x_1374);
lean::cnstr_set(x_1349, 0, x_1392);
return x_1349;
}
}
}
else
{
obj* x_1393; obj* x_1394; obj* x_1395; obj* x_1396; obj* x_1397; obj* x_1398; obj* x_1399; obj* x_1400; obj* x_1401; 
x_1393 = lean::cnstr_get(x_1349, 0);
lean::inc(x_1393);
lean::dec(x_1349);
x_1394 = lean::cnstr_get(x_1393, 0);
lean::inc(x_1394);
x_1395 = lean::cnstr_get(x_1393, 1);
lean::inc(x_1395);
if (lean::is_exclusive(x_1393)) {
 lean::cnstr_release(x_1393, 0);
 lean::cnstr_release(x_1393, 1);
 x_1396 = x_1393;
} else {
 lean::dec_ref(x_1393);
 x_1396 = lean::box(0);
}
x_1397 = lean::box(0);
x_1398 = l_Lean_Elaborator_toPexpr___main___closed__34;
x_1399 = l_Lean_KVMap_insertCore___main(x_1397, x_1398, x_1348);
x_1400 = lean_expr_mk_mdata(x_1399, x_1394);
x_1401 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1401) == 0)
{
obj* x_1402; obj* x_1403; 
if (lean::is_scalar(x_1396)) {
 x_1402 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1402 = x_1396;
}
lean::cnstr_set(x_1402, 0, x_1400);
lean::cnstr_set(x_1402, 1, x_1395);
x_1403 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1403, 0, x_1402);
return x_1403;
}
else
{
obj* x_1404; obj* x_1405; obj* x_1406; obj* x_1407; obj* x_1408; obj* x_1409; obj* x_1410; obj* x_1411; obj* x_1412; obj* x_1413; obj* x_1414; obj* x_1415; obj* x_1416; 
x_1404 = lean::cnstr_get(x_1401, 0);
lean::inc(x_1404);
lean::dec(x_1401);
x_1405 = lean::cnstr_get(x_3, 0);
x_1406 = lean::cnstr_get(x_1405, 2);
x_1407 = l_Lean_FileMap_toPosition(x_1406, x_1404);
x_1408 = lean::cnstr_get(x_1407, 1);
lean::inc(x_1408);
x_1409 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1410 = l_Lean_KVMap_setNat(x_1397, x_1409, x_1408);
x_1411 = lean::cnstr_get(x_1407, 0);
lean::inc(x_1411);
lean::dec(x_1407);
x_1412 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1413 = l_Lean_KVMap_setNat(x_1410, x_1412, x_1411);
x_1414 = lean_expr_mk_mdata(x_1413, x_1400);
if (lean::is_scalar(x_1396)) {
 x_1415 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1415 = x_1396;
}
lean::cnstr_set(x_1415, 0, x_1414);
lean::cnstr_set(x_1415, 1, x_1395);
x_1416 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1416, 0, x_1415);
return x_1416;
}
}
}
}
else
{
obj* x_1417; obj* x_1418; obj* x_1419; obj* x_1420; obj* x_1421; 
x_1417 = lean::cnstr_get(x_1343, 0);
lean::inc(x_1417);
lean::dec(x_1343);
x_1418 = lean::cnstr_get(x_1344, 0);
lean::inc(x_1418);
lean::dec(x_1344);
x_1419 = l_Lean_Parser_number_View_toNat___main(x_1418);
x_1420 = lean::alloc_cnstr(3, 1, 0);
lean::cnstr_set(x_1420, 0, x_1419);
x_1421 = l_Lean_Elaborator_toPexpr___main(x_1417, x_2, x_3, x_4);
if (lean::obj_tag(x_1421) == 0)
{
uint8 x_1422; 
lean::dec(x_1420);
lean::dec(x_1);
x_1422 = !lean::is_exclusive(x_1421);
if (x_1422 == 0)
{
return x_1421;
}
else
{
obj* x_1423; obj* x_1424; 
x_1423 = lean::cnstr_get(x_1421, 0);
lean::inc(x_1423);
lean::dec(x_1421);
x_1424 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1424, 0, x_1423);
return x_1424;
}
}
else
{
uint8 x_1425; 
x_1425 = !lean::is_exclusive(x_1421);
if (x_1425 == 0)
{
obj* x_1426; uint8 x_1427; 
x_1426 = lean::cnstr_get(x_1421, 0);
x_1427 = !lean::is_exclusive(x_1426);
if (x_1427 == 0)
{
obj* x_1428; obj* x_1429; obj* x_1430; obj* x_1431; obj* x_1432; obj* x_1433; 
x_1428 = lean::cnstr_get(x_1426, 0);
x_1429 = lean::box(0);
x_1430 = l_Lean_Elaborator_toPexpr___main___closed__34;
x_1431 = l_Lean_KVMap_insertCore___main(x_1429, x_1430, x_1420);
x_1432 = lean_expr_mk_mdata(x_1431, x_1428);
x_1433 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1433) == 0)
{
lean::cnstr_set(x_1426, 0, x_1432);
return x_1421;
}
else
{
obj* x_1434; obj* x_1435; obj* x_1436; obj* x_1437; obj* x_1438; obj* x_1439; obj* x_1440; obj* x_1441; obj* x_1442; obj* x_1443; obj* x_1444; 
x_1434 = lean::cnstr_get(x_1433, 0);
lean::inc(x_1434);
lean::dec(x_1433);
x_1435 = lean::cnstr_get(x_3, 0);
x_1436 = lean::cnstr_get(x_1435, 2);
x_1437 = l_Lean_FileMap_toPosition(x_1436, x_1434);
x_1438 = lean::cnstr_get(x_1437, 1);
lean::inc(x_1438);
x_1439 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1440 = l_Lean_KVMap_setNat(x_1429, x_1439, x_1438);
x_1441 = lean::cnstr_get(x_1437, 0);
lean::inc(x_1441);
lean::dec(x_1437);
x_1442 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1443 = l_Lean_KVMap_setNat(x_1440, x_1442, x_1441);
x_1444 = lean_expr_mk_mdata(x_1443, x_1432);
lean::cnstr_set(x_1426, 0, x_1444);
return x_1421;
}
}
else
{
obj* x_1445; obj* x_1446; obj* x_1447; obj* x_1448; obj* x_1449; obj* x_1450; obj* x_1451; 
x_1445 = lean::cnstr_get(x_1426, 0);
x_1446 = lean::cnstr_get(x_1426, 1);
lean::inc(x_1446);
lean::inc(x_1445);
lean::dec(x_1426);
x_1447 = lean::box(0);
x_1448 = l_Lean_Elaborator_toPexpr___main___closed__34;
x_1449 = l_Lean_KVMap_insertCore___main(x_1447, x_1448, x_1420);
x_1450 = lean_expr_mk_mdata(x_1449, x_1445);
x_1451 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1451) == 0)
{
obj* x_1452; 
x_1452 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1452, 0, x_1450);
lean::cnstr_set(x_1452, 1, x_1446);
lean::cnstr_set(x_1421, 0, x_1452);
return x_1421;
}
else
{
obj* x_1453; obj* x_1454; obj* x_1455; obj* x_1456; obj* x_1457; obj* x_1458; obj* x_1459; obj* x_1460; obj* x_1461; obj* x_1462; obj* x_1463; obj* x_1464; 
x_1453 = lean::cnstr_get(x_1451, 0);
lean::inc(x_1453);
lean::dec(x_1451);
x_1454 = lean::cnstr_get(x_3, 0);
x_1455 = lean::cnstr_get(x_1454, 2);
x_1456 = l_Lean_FileMap_toPosition(x_1455, x_1453);
x_1457 = lean::cnstr_get(x_1456, 1);
lean::inc(x_1457);
x_1458 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1459 = l_Lean_KVMap_setNat(x_1447, x_1458, x_1457);
x_1460 = lean::cnstr_get(x_1456, 0);
lean::inc(x_1460);
lean::dec(x_1456);
x_1461 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1462 = l_Lean_KVMap_setNat(x_1459, x_1461, x_1460);
x_1463 = lean_expr_mk_mdata(x_1462, x_1450);
x_1464 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1464, 0, x_1463);
lean::cnstr_set(x_1464, 1, x_1446);
lean::cnstr_set(x_1421, 0, x_1464);
return x_1421;
}
}
}
else
{
obj* x_1465; obj* x_1466; obj* x_1467; obj* x_1468; obj* x_1469; obj* x_1470; obj* x_1471; obj* x_1472; obj* x_1473; 
x_1465 = lean::cnstr_get(x_1421, 0);
lean::inc(x_1465);
lean::dec(x_1421);
x_1466 = lean::cnstr_get(x_1465, 0);
lean::inc(x_1466);
x_1467 = lean::cnstr_get(x_1465, 1);
lean::inc(x_1467);
if (lean::is_exclusive(x_1465)) {
 lean::cnstr_release(x_1465, 0);
 lean::cnstr_release(x_1465, 1);
 x_1468 = x_1465;
} else {
 lean::dec_ref(x_1465);
 x_1468 = lean::box(0);
}
x_1469 = lean::box(0);
x_1470 = l_Lean_Elaborator_toPexpr___main___closed__34;
x_1471 = l_Lean_KVMap_insertCore___main(x_1469, x_1470, x_1420);
x_1472 = lean_expr_mk_mdata(x_1471, x_1466);
x_1473 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1473) == 0)
{
obj* x_1474; obj* x_1475; 
if (lean::is_scalar(x_1468)) {
 x_1474 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1474 = x_1468;
}
lean::cnstr_set(x_1474, 0, x_1472);
lean::cnstr_set(x_1474, 1, x_1467);
x_1475 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1475, 0, x_1474);
return x_1475;
}
else
{
obj* x_1476; obj* x_1477; obj* x_1478; obj* x_1479; obj* x_1480; obj* x_1481; obj* x_1482; obj* x_1483; obj* x_1484; obj* x_1485; obj* x_1486; obj* x_1487; obj* x_1488; 
x_1476 = lean::cnstr_get(x_1473, 0);
lean::inc(x_1476);
lean::dec(x_1473);
x_1477 = lean::cnstr_get(x_3, 0);
x_1478 = lean::cnstr_get(x_1477, 2);
x_1479 = l_Lean_FileMap_toPosition(x_1478, x_1476);
x_1480 = lean::cnstr_get(x_1479, 1);
lean::inc(x_1480);
x_1481 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1482 = l_Lean_KVMap_setNat(x_1469, x_1481, x_1480);
x_1483 = lean::cnstr_get(x_1479, 0);
lean::inc(x_1483);
lean::dec(x_1479);
x_1484 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1485 = l_Lean_KVMap_setNat(x_1482, x_1484, x_1483);
x_1486 = lean_expr_mk_mdata(x_1485, x_1472);
if (lean::is_scalar(x_1468)) {
 x_1487 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1487 = x_1468;
}
lean::cnstr_set(x_1487, 0, x_1486);
lean::cnstr_set(x_1487, 1, x_1467);
x_1488 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1488, 0, x_1487);
return x_1488;
}
}
}
}
}
}
else
{
obj* x_1489; obj* x_1490; obj* x_1491; obj* x_1492; 
lean::dec(x_16);
x_1489 = l_Lean_Parser_Term_let_HasView;
x_1490 = lean::cnstr_get(x_1489, 0);
lean::inc(x_1490);
lean::inc(x_1);
x_1491 = lean::apply_1(x_1490, x_1);
x_1492 = lean::cnstr_get(x_1491, 1);
lean::inc(x_1492);
if (lean::obj_tag(x_1492) == 0)
{
obj* x_1493; obj* x_1494; 
x_1493 = lean::cnstr_get(x_1492, 0);
lean::inc(x_1493);
lean::dec(x_1492);
x_1494 = lean::cnstr_get(x_1493, 1);
lean::inc(x_1494);
if (lean::obj_tag(x_1494) == 0)
{
obj* x_1495; 
x_1495 = lean::cnstr_get(x_1493, 2);
lean::inc(x_1495);
if (lean::obj_tag(x_1495) == 0)
{
obj* x_1496; obj* x_1497; obj* x_1498; 
lean::dec(x_1493);
lean::dec(x_1491);
lean::inc(x_1);
x_1496 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1496, 0, x_1);
x_1497 = l_Lean_Elaborator_toPexpr___main___closed__35;
x_1498 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_1496, x_1497, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_1496);
if (lean::obj_tag(x_1498) == 0)
{
uint8 x_1499; 
lean::dec(x_15);
lean::dec(x_1);
x_1499 = !lean::is_exclusive(x_1498);
if (x_1499 == 0)
{
return x_1498;
}
else
{
obj* x_1500; obj* x_1501; 
x_1500 = lean::cnstr_get(x_1498, 0);
lean::inc(x_1500);
lean::dec(x_1498);
x_1501 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1501, 0, x_1500);
return x_1501;
}
}
else
{
obj* x_1502; 
x_1502 = lean::cnstr_get(x_1498, 0);
lean::inc(x_1502);
lean::dec(x_1498);
x_86 = x_1502;
goto block_130;
}
}
else
{
obj* x_1503; obj* x_1504; obj* x_1505; obj* x_1506; obj* x_1507; obj* x_1508; 
x_1503 = lean::cnstr_get(x_1493, 0);
lean::inc(x_1503);
lean::dec(x_1493);
x_1504 = lean::cnstr_get(x_1495, 0);
lean::inc(x_1504);
lean::dec(x_1495);
x_1505 = lean::cnstr_get(x_1504, 1);
lean::inc(x_1505);
lean::dec(x_1504);
x_1506 = lean::cnstr_get(x_1491, 3);
lean::inc(x_1506);
x_1507 = lean::cnstr_get(x_1491, 5);
lean::inc(x_1507);
lean::dec(x_1491);
x_1508 = l_Lean_Elaborator_toPexpr___main(x_1505, x_2, x_3, x_4);
if (lean::obj_tag(x_1508) == 0)
{
uint8 x_1509; 
lean::dec(x_1507);
lean::dec(x_1506);
lean::dec(x_1503);
lean::dec(x_15);
lean::dec(x_1);
x_1509 = !lean::is_exclusive(x_1508);
if (x_1509 == 0)
{
return x_1508;
}
else
{
obj* x_1510; obj* x_1511; 
x_1510 = lean::cnstr_get(x_1508, 0);
lean::inc(x_1510);
lean::dec(x_1508);
x_1511 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1511, 0, x_1510);
return x_1511;
}
}
else
{
obj* x_1512; obj* x_1513; obj* x_1514; obj* x_1515; 
x_1512 = lean::cnstr_get(x_1508, 0);
lean::inc(x_1512);
lean::dec(x_1508);
x_1513 = lean::cnstr_get(x_1512, 0);
lean::inc(x_1513);
x_1514 = lean::cnstr_get(x_1512, 1);
lean::inc(x_1514);
lean::dec(x_1512);
x_1515 = l_Lean_Elaborator_toPexpr___main(x_1506, x_2, x_3, x_1514);
if (lean::obj_tag(x_1515) == 0)
{
uint8 x_1516; 
lean::dec(x_1513);
lean::dec(x_1507);
lean::dec(x_1503);
lean::dec(x_15);
lean::dec(x_1);
x_1516 = !lean::is_exclusive(x_1515);
if (x_1516 == 0)
{
return x_1515;
}
else
{
obj* x_1517; obj* x_1518; 
x_1517 = lean::cnstr_get(x_1515, 0);
lean::inc(x_1517);
lean::dec(x_1515);
x_1518 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1518, 0, x_1517);
return x_1518;
}
}
else
{
obj* x_1519; obj* x_1520; obj* x_1521; obj* x_1522; 
x_1519 = lean::cnstr_get(x_1515, 0);
lean::inc(x_1519);
lean::dec(x_1515);
x_1520 = lean::cnstr_get(x_1519, 0);
lean::inc(x_1520);
x_1521 = lean::cnstr_get(x_1519, 1);
lean::inc(x_1521);
lean::dec(x_1519);
x_1522 = l_Lean_Elaborator_toPexpr___main(x_1507, x_2, x_3, x_1521);
if (lean::obj_tag(x_1522) == 0)
{
uint8 x_1523; 
lean::dec(x_1520);
lean::dec(x_1513);
lean::dec(x_1503);
lean::dec(x_15);
lean::dec(x_1);
x_1523 = !lean::is_exclusive(x_1522);
if (x_1523 == 0)
{
return x_1522;
}
else
{
obj* x_1524; obj* x_1525; 
x_1524 = lean::cnstr_get(x_1522, 0);
lean::inc(x_1524);
lean::dec(x_1522);
x_1525 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1525, 0, x_1524);
return x_1525;
}
}
else
{
obj* x_1526; uint8 x_1527; 
x_1526 = lean::cnstr_get(x_1522, 0);
lean::inc(x_1526);
lean::dec(x_1522);
x_1527 = !lean::is_exclusive(x_1526);
if (x_1527 == 0)
{
obj* x_1528; obj* x_1529; obj* x_1530; 
x_1528 = lean::cnstr_get(x_1526, 0);
x_1529 = l_Lean_Elaborator_mangleIdent(x_1503);
x_1530 = lean_expr_mk_let(x_1529, x_1513, x_1520, x_1528);
lean::cnstr_set(x_1526, 0, x_1530);
x_86 = x_1526;
goto block_130;
}
else
{
obj* x_1531; obj* x_1532; obj* x_1533; obj* x_1534; obj* x_1535; 
x_1531 = lean::cnstr_get(x_1526, 0);
x_1532 = lean::cnstr_get(x_1526, 1);
lean::inc(x_1532);
lean::inc(x_1531);
lean::dec(x_1526);
x_1533 = l_Lean_Elaborator_mangleIdent(x_1503);
x_1534 = lean_expr_mk_let(x_1533, x_1513, x_1520, x_1531);
x_1535 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1535, 0, x_1534);
lean::cnstr_set(x_1535, 1, x_1532);
x_86 = x_1535;
goto block_130;
}
}
}
}
}
}
else
{
obj* x_1536; obj* x_1537; obj* x_1538; 
lean::dec(x_1494);
lean::dec(x_1493);
lean::dec(x_1491);
lean::inc(x_1);
x_1536 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1536, 0, x_1);
x_1537 = l_Lean_Elaborator_toPexpr___main___closed__35;
x_1538 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_1536, x_1537, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_1536);
if (lean::obj_tag(x_1538) == 0)
{
uint8 x_1539; 
lean::dec(x_15);
lean::dec(x_1);
x_1539 = !lean::is_exclusive(x_1538);
if (x_1539 == 0)
{
return x_1538;
}
else
{
obj* x_1540; obj* x_1541; 
x_1540 = lean::cnstr_get(x_1538, 0);
lean::inc(x_1540);
lean::dec(x_1538);
x_1541 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1541, 0, x_1540);
return x_1541;
}
}
else
{
obj* x_1542; 
x_1542 = lean::cnstr_get(x_1538, 0);
lean::inc(x_1542);
lean::dec(x_1538);
x_86 = x_1542;
goto block_130;
}
}
}
else
{
obj* x_1543; obj* x_1544; obj* x_1545; 
lean::dec(x_1492);
lean::dec(x_1491);
lean::inc(x_1);
x_1543 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1543, 0, x_1);
x_1544 = l_Lean_Elaborator_toPexpr___main___closed__35;
x_1545 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_1543, x_1544, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_1543);
if (lean::obj_tag(x_1545) == 0)
{
uint8 x_1546; 
lean::dec(x_15);
lean::dec(x_1);
x_1546 = !lean::is_exclusive(x_1545);
if (x_1546 == 0)
{
return x_1545;
}
else
{
obj* x_1547; obj* x_1548; 
x_1547 = lean::cnstr_get(x_1545, 0);
lean::inc(x_1547);
lean::dec(x_1545);
x_1548 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1548, 0, x_1547);
return x_1548;
}
}
else
{
obj* x_1549; 
x_1549 = lean::cnstr_get(x_1545, 0);
lean::inc(x_1549);
lean::dec(x_1545);
x_86 = x_1549;
goto block_130;
}
}
}
}
else
{
obj* x_1550; obj* x_1551; obj* x_1552; obj* x_1553; obj* x_1554; 
lean::dec(x_16);
lean::dec(x_15);
x_1550 = l_Lean_Parser_Term_show_HasView;
x_1551 = lean::cnstr_get(x_1550, 0);
lean::inc(x_1551);
lean::inc(x_1);
x_1552 = lean::apply_1(x_1551, x_1);
x_1553 = lean::cnstr_get(x_1552, 1);
lean::inc(x_1553);
x_1554 = l_Lean_Elaborator_toPexpr___main(x_1553, x_2, x_3, x_4);
if (lean::obj_tag(x_1554) == 0)
{
uint8 x_1555; 
lean::dec(x_1552);
lean::dec(x_1);
x_1555 = !lean::is_exclusive(x_1554);
if (x_1555 == 0)
{
return x_1554;
}
else
{
obj* x_1556; obj* x_1557; 
x_1556 = lean::cnstr_get(x_1554, 0);
lean::inc(x_1556);
lean::dec(x_1554);
x_1557 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1557, 0, x_1556);
return x_1557;
}
}
else
{
obj* x_1558; obj* x_1559; obj* x_1560; obj* x_1561; obj* x_1562; obj* x_1563; 
x_1558 = lean::cnstr_get(x_1554, 0);
lean::inc(x_1558);
lean::dec(x_1554);
x_1559 = lean::cnstr_get(x_1558, 0);
lean::inc(x_1559);
x_1560 = lean::cnstr_get(x_1558, 1);
lean::inc(x_1560);
lean::dec(x_1558);
x_1561 = lean::cnstr_get(x_1552, 3);
lean::inc(x_1561);
lean::dec(x_1552);
x_1562 = lean::cnstr_get(x_1561, 1);
lean::inc(x_1562);
lean::dec(x_1561);
x_1563 = l_Lean_Elaborator_toPexpr___main(x_1562, x_2, x_3, x_1560);
if (lean::obj_tag(x_1563) == 0)
{
uint8 x_1564; 
lean::dec(x_1559);
lean::dec(x_1);
x_1564 = !lean::is_exclusive(x_1563);
if (x_1564 == 0)
{
return x_1563;
}
else
{
obj* x_1565; obj* x_1566; 
x_1565 = lean::cnstr_get(x_1563, 0);
lean::inc(x_1565);
lean::dec(x_1563);
x_1566 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1566, 0, x_1565);
return x_1566;
}
}
else
{
uint8 x_1567; 
x_1567 = !lean::is_exclusive(x_1563);
if (x_1567 == 0)
{
obj* x_1568; uint8 x_1569; 
x_1568 = lean::cnstr_get(x_1563, 0);
x_1569 = !lean::is_exclusive(x_1568);
if (x_1569 == 0)
{
obj* x_1570; obj* x_1571; uint8 x_1572; obj* x_1573; obj* x_1574; obj* x_1575; obj* x_1576; obj* x_1577; obj* x_1578; 
x_1570 = lean::cnstr_get(x_1568, 0);
x_1571 = l_Lean_Elaborator_toPexpr___main___closed__36;
x_1572 = 0;
x_1573 = l_Lean_Elaborator_toPexpr___main___closed__37;
x_1574 = lean_expr_mk_lambda(x_1571, x_1572, x_1559, x_1573);
x_1575 = lean_expr_mk_app(x_1574, x_1570);
x_1576 = l_Lean_Elaborator_toPexpr___main___closed__38;
x_1577 = l_Lean_Elaborator_Expr_mkAnnotation(x_1576, x_1575);
x_1578 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1578) == 0)
{
lean::cnstr_set(x_1568, 0, x_1577);
return x_1563;
}
else
{
obj* x_1579; obj* x_1580; obj* x_1581; obj* x_1582; obj* x_1583; obj* x_1584; obj* x_1585; obj* x_1586; obj* x_1587; obj* x_1588; obj* x_1589; obj* x_1590; 
x_1579 = lean::cnstr_get(x_1578, 0);
lean::inc(x_1579);
lean::dec(x_1578);
x_1580 = lean::cnstr_get(x_3, 0);
x_1581 = lean::cnstr_get(x_1580, 2);
x_1582 = l_Lean_FileMap_toPosition(x_1581, x_1579);
x_1583 = lean::cnstr_get(x_1582, 1);
lean::inc(x_1583);
x_1584 = lean::box(0);
x_1585 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1586 = l_Lean_KVMap_setNat(x_1584, x_1585, x_1583);
x_1587 = lean::cnstr_get(x_1582, 0);
lean::inc(x_1587);
lean::dec(x_1582);
x_1588 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1589 = l_Lean_KVMap_setNat(x_1586, x_1588, x_1587);
x_1590 = lean_expr_mk_mdata(x_1589, x_1577);
lean::cnstr_set(x_1568, 0, x_1590);
return x_1563;
}
}
else
{
obj* x_1591; obj* x_1592; obj* x_1593; uint8 x_1594; obj* x_1595; obj* x_1596; obj* x_1597; obj* x_1598; obj* x_1599; obj* x_1600; 
x_1591 = lean::cnstr_get(x_1568, 0);
x_1592 = lean::cnstr_get(x_1568, 1);
lean::inc(x_1592);
lean::inc(x_1591);
lean::dec(x_1568);
x_1593 = l_Lean_Elaborator_toPexpr___main___closed__36;
x_1594 = 0;
x_1595 = l_Lean_Elaborator_toPexpr___main___closed__37;
x_1596 = lean_expr_mk_lambda(x_1593, x_1594, x_1559, x_1595);
x_1597 = lean_expr_mk_app(x_1596, x_1591);
x_1598 = l_Lean_Elaborator_toPexpr___main___closed__38;
x_1599 = l_Lean_Elaborator_Expr_mkAnnotation(x_1598, x_1597);
x_1600 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1600) == 0)
{
obj* x_1601; 
x_1601 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1601, 0, x_1599);
lean::cnstr_set(x_1601, 1, x_1592);
lean::cnstr_set(x_1563, 0, x_1601);
return x_1563;
}
else
{
obj* x_1602; obj* x_1603; obj* x_1604; obj* x_1605; obj* x_1606; obj* x_1607; obj* x_1608; obj* x_1609; obj* x_1610; obj* x_1611; obj* x_1612; obj* x_1613; obj* x_1614; 
x_1602 = lean::cnstr_get(x_1600, 0);
lean::inc(x_1602);
lean::dec(x_1600);
x_1603 = lean::cnstr_get(x_3, 0);
x_1604 = lean::cnstr_get(x_1603, 2);
x_1605 = l_Lean_FileMap_toPosition(x_1604, x_1602);
x_1606 = lean::cnstr_get(x_1605, 1);
lean::inc(x_1606);
x_1607 = lean::box(0);
x_1608 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1609 = l_Lean_KVMap_setNat(x_1607, x_1608, x_1606);
x_1610 = lean::cnstr_get(x_1605, 0);
lean::inc(x_1610);
lean::dec(x_1605);
x_1611 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1612 = l_Lean_KVMap_setNat(x_1609, x_1611, x_1610);
x_1613 = lean_expr_mk_mdata(x_1612, x_1599);
x_1614 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1614, 0, x_1613);
lean::cnstr_set(x_1614, 1, x_1592);
lean::cnstr_set(x_1563, 0, x_1614);
return x_1563;
}
}
}
else
{
obj* x_1615; obj* x_1616; obj* x_1617; obj* x_1618; obj* x_1619; uint8 x_1620; obj* x_1621; obj* x_1622; obj* x_1623; obj* x_1624; obj* x_1625; obj* x_1626; 
x_1615 = lean::cnstr_get(x_1563, 0);
lean::inc(x_1615);
lean::dec(x_1563);
x_1616 = lean::cnstr_get(x_1615, 0);
lean::inc(x_1616);
x_1617 = lean::cnstr_get(x_1615, 1);
lean::inc(x_1617);
if (lean::is_exclusive(x_1615)) {
 lean::cnstr_release(x_1615, 0);
 lean::cnstr_release(x_1615, 1);
 x_1618 = x_1615;
} else {
 lean::dec_ref(x_1615);
 x_1618 = lean::box(0);
}
x_1619 = l_Lean_Elaborator_toPexpr___main___closed__36;
x_1620 = 0;
x_1621 = l_Lean_Elaborator_toPexpr___main___closed__37;
x_1622 = lean_expr_mk_lambda(x_1619, x_1620, x_1559, x_1621);
x_1623 = lean_expr_mk_app(x_1622, x_1616);
x_1624 = l_Lean_Elaborator_toPexpr___main___closed__38;
x_1625 = l_Lean_Elaborator_Expr_mkAnnotation(x_1624, x_1623);
x_1626 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1626) == 0)
{
obj* x_1627; obj* x_1628; 
if (lean::is_scalar(x_1618)) {
 x_1627 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1627 = x_1618;
}
lean::cnstr_set(x_1627, 0, x_1625);
lean::cnstr_set(x_1627, 1, x_1617);
x_1628 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1628, 0, x_1627);
return x_1628;
}
else
{
obj* x_1629; obj* x_1630; obj* x_1631; obj* x_1632; obj* x_1633; obj* x_1634; obj* x_1635; obj* x_1636; obj* x_1637; obj* x_1638; obj* x_1639; obj* x_1640; obj* x_1641; obj* x_1642; 
x_1629 = lean::cnstr_get(x_1626, 0);
lean::inc(x_1629);
lean::dec(x_1626);
x_1630 = lean::cnstr_get(x_3, 0);
x_1631 = lean::cnstr_get(x_1630, 2);
x_1632 = l_Lean_FileMap_toPosition(x_1631, x_1629);
x_1633 = lean::cnstr_get(x_1632, 1);
lean::inc(x_1633);
x_1634 = lean::box(0);
x_1635 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1636 = l_Lean_KVMap_setNat(x_1634, x_1635, x_1633);
x_1637 = lean::cnstr_get(x_1632, 0);
lean::inc(x_1637);
lean::dec(x_1632);
x_1638 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1639 = l_Lean_KVMap_setNat(x_1636, x_1638, x_1637);
x_1640 = lean_expr_mk_mdata(x_1639, x_1625);
if (lean::is_scalar(x_1618)) {
 x_1641 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1641 = x_1618;
}
lean::cnstr_set(x_1641, 0, x_1640);
lean::cnstr_set(x_1641, 1, x_1617);
x_1642 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1642, 0, x_1641);
return x_1642;
}
}
}
}
}
}
else
{
obj* x_1643; obj* x_1644; obj* x_1645; obj* x_1646; 
lean::dec(x_16);
x_1643 = l_Lean_Parser_Term_have_HasView;
x_1644 = lean::cnstr_get(x_1643, 0);
lean::inc(x_1644);
lean::inc(x_1);
x_1645 = lean::apply_1(x_1644, x_1);
x_1646 = lean::cnstr_get(x_1645, 1);
lean::inc(x_1646);
if (lean::obj_tag(x_1646) == 0)
{
obj* x_1647; obj* x_1648; obj* x_1649; 
x_1647 = lean::cnstr_get(x_1645, 2);
lean::inc(x_1647);
x_1648 = lean::cnstr_get(x_1645, 5);
lean::inc(x_1648);
x_1649 = l_Lean_Elaborator_toPexpr___main(x_1647, x_2, x_3, x_4);
if (lean::obj_tag(x_1649) == 0)
{
uint8 x_1650; 
lean::dec(x_1648);
lean::dec(x_1645);
lean::dec(x_15);
lean::dec(x_1);
x_1650 = !lean::is_exclusive(x_1649);
if (x_1650 == 0)
{
return x_1649;
}
else
{
obj* x_1651; obj* x_1652; 
x_1651 = lean::cnstr_get(x_1649, 0);
lean::inc(x_1651);
lean::dec(x_1649);
x_1652 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1652, 0, x_1651);
return x_1652;
}
}
else
{
obj* x_1653; obj* x_1654; obj* x_1655; obj* x_1656; 
x_1653 = lean::cnstr_get(x_1649, 0);
lean::inc(x_1653);
lean::dec(x_1649);
x_1654 = lean::cnstr_get(x_1653, 0);
lean::inc(x_1654);
x_1655 = lean::cnstr_get(x_1653, 1);
lean::inc(x_1655);
lean::dec(x_1653);
x_1656 = l_Lean_Elaborator_toPexpr___main(x_1648, x_2, x_3, x_1655);
if (lean::obj_tag(x_1656) == 0)
{
uint8 x_1657; 
lean::dec(x_1654);
lean::dec(x_1645);
lean::dec(x_15);
lean::dec(x_1);
x_1657 = !lean::is_exclusive(x_1656);
if (x_1657 == 0)
{
return x_1656;
}
else
{
obj* x_1658; obj* x_1659; 
x_1658 = lean::cnstr_get(x_1656, 0);
lean::inc(x_1658);
lean::dec(x_1656);
x_1659 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1659, 0, x_1658);
return x_1659;
}
}
else
{
obj* x_1660; obj* x_1661; obj* x_1662; obj* x_1663; uint8 x_1664; obj* x_1665; obj* x_1666; 
x_1660 = lean::cnstr_get(x_1656, 0);
lean::inc(x_1660);
lean::dec(x_1656);
x_1661 = lean::cnstr_get(x_1660, 0);
lean::inc(x_1661);
x_1662 = lean::cnstr_get(x_1660, 1);
lean::inc(x_1662);
lean::dec(x_1660);
x_1663 = l_Lean_Elaborator_toPexpr___main___closed__36;
x_1664 = 0;
x_1665 = lean_expr_mk_lambda(x_1663, x_1664, x_1654, x_1661);
x_1666 = lean::cnstr_get(x_1645, 3);
lean::inc(x_1666);
lean::dec(x_1645);
if (lean::obj_tag(x_1666) == 0)
{
obj* x_1667; obj* x_1668; obj* x_1669; 
x_1667 = lean::cnstr_get(x_1666, 0);
lean::inc(x_1667);
lean::dec(x_1666);
x_1668 = lean::cnstr_get(x_1667, 1);
lean::inc(x_1668);
lean::dec(x_1667);
x_1669 = l_Lean_Elaborator_toPexpr___main(x_1668, x_2, x_3, x_1662);
if (lean::obj_tag(x_1669) == 0)
{
uint8 x_1670; 
lean::dec(x_1665);
lean::dec(x_15);
lean::dec(x_1);
x_1670 = !lean::is_exclusive(x_1669);
if (x_1670 == 0)
{
return x_1669;
}
else
{
obj* x_1671; obj* x_1672; 
x_1671 = lean::cnstr_get(x_1669, 0);
lean::inc(x_1671);
lean::dec(x_1669);
x_1672 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1672, 0, x_1671);
return x_1672;
}
}
else
{
obj* x_1673; uint8 x_1674; 
x_1673 = lean::cnstr_get(x_1669, 0);
lean::inc(x_1673);
lean::dec(x_1669);
x_1674 = !lean::is_exclusive(x_1673);
if (x_1674 == 0)
{
obj* x_1675; obj* x_1676; obj* x_1677; obj* x_1678; 
x_1675 = lean::cnstr_get(x_1673, 0);
x_1676 = l_Lean_Elaborator_toPexpr___main___closed__39;
x_1677 = l_Lean_Elaborator_Expr_mkAnnotation(x_1676, x_1665);
x_1678 = lean_expr_mk_app(x_1677, x_1675);
lean::cnstr_set(x_1673, 0, x_1678);
x_86 = x_1673;
goto block_130;
}
else
{
obj* x_1679; obj* x_1680; obj* x_1681; obj* x_1682; obj* x_1683; obj* x_1684; 
x_1679 = lean::cnstr_get(x_1673, 0);
x_1680 = lean::cnstr_get(x_1673, 1);
lean::inc(x_1680);
lean::inc(x_1679);
lean::dec(x_1673);
x_1681 = l_Lean_Elaborator_toPexpr___main___closed__39;
x_1682 = l_Lean_Elaborator_Expr_mkAnnotation(x_1681, x_1665);
x_1683 = lean_expr_mk_app(x_1682, x_1679);
x_1684 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1684, 0, x_1683);
lean::cnstr_set(x_1684, 1, x_1680);
x_86 = x_1684;
goto block_130;
}
}
}
else
{
obj* x_1685; obj* x_1686; obj* x_1687; obj* x_1688; 
x_1685 = lean::cnstr_get(x_1666, 0);
lean::inc(x_1685);
lean::dec(x_1666);
x_1686 = lean::cnstr_get(x_1685, 1);
lean::inc(x_1686);
lean::dec(x_1685);
x_1687 = lean::cnstr_get(x_1686, 1);
lean::inc(x_1687);
lean::dec(x_1686);
x_1688 = l_Lean_Elaborator_toPexpr___main(x_1687, x_2, x_3, x_1662);
if (lean::obj_tag(x_1688) == 0)
{
uint8 x_1689; 
lean::dec(x_1665);
lean::dec(x_15);
lean::dec(x_1);
x_1689 = !lean::is_exclusive(x_1688);
if (x_1689 == 0)
{
return x_1688;
}
else
{
obj* x_1690; obj* x_1691; 
x_1690 = lean::cnstr_get(x_1688, 0);
lean::inc(x_1690);
lean::dec(x_1688);
x_1691 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1691, 0, x_1690);
return x_1691;
}
}
else
{
obj* x_1692; uint8 x_1693; 
x_1692 = lean::cnstr_get(x_1688, 0);
lean::inc(x_1692);
lean::dec(x_1688);
x_1693 = !lean::is_exclusive(x_1692);
if (x_1693 == 0)
{
obj* x_1694; obj* x_1695; obj* x_1696; obj* x_1697; 
x_1694 = lean::cnstr_get(x_1692, 0);
x_1695 = l_Lean_Elaborator_toPexpr___main___closed__39;
x_1696 = l_Lean_Elaborator_Expr_mkAnnotation(x_1695, x_1665);
x_1697 = lean_expr_mk_app(x_1696, x_1694);
lean::cnstr_set(x_1692, 0, x_1697);
x_86 = x_1692;
goto block_130;
}
else
{
obj* x_1698; obj* x_1699; obj* x_1700; obj* x_1701; obj* x_1702; obj* x_1703; 
x_1698 = lean::cnstr_get(x_1692, 0);
x_1699 = lean::cnstr_get(x_1692, 1);
lean::inc(x_1699);
lean::inc(x_1698);
lean::dec(x_1692);
x_1700 = l_Lean_Elaborator_toPexpr___main___closed__39;
x_1701 = l_Lean_Elaborator_Expr_mkAnnotation(x_1700, x_1665);
x_1702 = lean_expr_mk_app(x_1701, x_1698);
x_1703 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1703, 0, x_1702);
lean::cnstr_set(x_1703, 1, x_1699);
x_86 = x_1703;
goto block_130;
}
}
}
}
}
}
else
{
obj* x_1704; obj* x_1705; obj* x_1706; obj* x_1707; obj* x_1708; obj* x_1709; 
x_1704 = lean::cnstr_get(x_1645, 2);
lean::inc(x_1704);
x_1705 = lean::cnstr_get(x_1645, 5);
lean::inc(x_1705);
x_1706 = lean::cnstr_get(x_1646, 0);
lean::inc(x_1706);
lean::dec(x_1646);
x_1707 = lean::cnstr_get(x_1706, 0);
lean::inc(x_1707);
lean::dec(x_1706);
x_1708 = l_Lean_Elaborator_mangleIdent(x_1707);
x_1709 = l_Lean_Elaborator_toPexpr___main(x_1704, x_2, x_3, x_4);
if (lean::obj_tag(x_1709) == 0)
{
uint8 x_1710; 
lean::dec(x_1708);
lean::dec(x_1705);
lean::dec(x_1645);
lean::dec(x_15);
lean::dec(x_1);
x_1710 = !lean::is_exclusive(x_1709);
if (x_1710 == 0)
{
return x_1709;
}
else
{
obj* x_1711; obj* x_1712; 
x_1711 = lean::cnstr_get(x_1709, 0);
lean::inc(x_1711);
lean::dec(x_1709);
x_1712 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1712, 0, x_1711);
return x_1712;
}
}
else
{
obj* x_1713; obj* x_1714; obj* x_1715; obj* x_1716; 
x_1713 = lean::cnstr_get(x_1709, 0);
lean::inc(x_1713);
lean::dec(x_1709);
x_1714 = lean::cnstr_get(x_1713, 0);
lean::inc(x_1714);
x_1715 = lean::cnstr_get(x_1713, 1);
lean::inc(x_1715);
lean::dec(x_1713);
x_1716 = l_Lean_Elaborator_toPexpr___main(x_1705, x_2, x_3, x_1715);
if (lean::obj_tag(x_1716) == 0)
{
uint8 x_1717; 
lean::dec(x_1714);
lean::dec(x_1708);
lean::dec(x_1645);
lean::dec(x_15);
lean::dec(x_1);
x_1717 = !lean::is_exclusive(x_1716);
if (x_1717 == 0)
{
return x_1716;
}
else
{
obj* x_1718; obj* x_1719; 
x_1718 = lean::cnstr_get(x_1716, 0);
lean::inc(x_1718);
lean::dec(x_1716);
x_1719 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1719, 0, x_1718);
return x_1719;
}
}
else
{
obj* x_1720; obj* x_1721; obj* x_1722; uint8 x_1723; obj* x_1724; obj* x_1725; 
x_1720 = lean::cnstr_get(x_1716, 0);
lean::inc(x_1720);
lean::dec(x_1716);
x_1721 = lean::cnstr_get(x_1720, 0);
lean::inc(x_1721);
x_1722 = lean::cnstr_get(x_1720, 1);
lean::inc(x_1722);
lean::dec(x_1720);
x_1723 = 0;
x_1724 = lean_expr_mk_lambda(x_1708, x_1723, x_1714, x_1721);
x_1725 = lean::cnstr_get(x_1645, 3);
lean::inc(x_1725);
lean::dec(x_1645);
if (lean::obj_tag(x_1725) == 0)
{
obj* x_1726; obj* x_1727; obj* x_1728; 
x_1726 = lean::cnstr_get(x_1725, 0);
lean::inc(x_1726);
lean::dec(x_1725);
x_1727 = lean::cnstr_get(x_1726, 1);
lean::inc(x_1727);
lean::dec(x_1726);
x_1728 = l_Lean_Elaborator_toPexpr___main(x_1727, x_2, x_3, x_1722);
if (lean::obj_tag(x_1728) == 0)
{
uint8 x_1729; 
lean::dec(x_1724);
lean::dec(x_15);
lean::dec(x_1);
x_1729 = !lean::is_exclusive(x_1728);
if (x_1729 == 0)
{
return x_1728;
}
else
{
obj* x_1730; obj* x_1731; 
x_1730 = lean::cnstr_get(x_1728, 0);
lean::inc(x_1730);
lean::dec(x_1728);
x_1731 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1731, 0, x_1730);
return x_1731;
}
}
else
{
obj* x_1732; uint8 x_1733; 
x_1732 = lean::cnstr_get(x_1728, 0);
lean::inc(x_1732);
lean::dec(x_1728);
x_1733 = !lean::is_exclusive(x_1732);
if (x_1733 == 0)
{
obj* x_1734; obj* x_1735; obj* x_1736; obj* x_1737; 
x_1734 = lean::cnstr_get(x_1732, 0);
x_1735 = l_Lean_Elaborator_toPexpr___main___closed__39;
x_1736 = l_Lean_Elaborator_Expr_mkAnnotation(x_1735, x_1724);
x_1737 = lean_expr_mk_app(x_1736, x_1734);
lean::cnstr_set(x_1732, 0, x_1737);
x_86 = x_1732;
goto block_130;
}
else
{
obj* x_1738; obj* x_1739; obj* x_1740; obj* x_1741; obj* x_1742; obj* x_1743; 
x_1738 = lean::cnstr_get(x_1732, 0);
x_1739 = lean::cnstr_get(x_1732, 1);
lean::inc(x_1739);
lean::inc(x_1738);
lean::dec(x_1732);
x_1740 = l_Lean_Elaborator_toPexpr___main___closed__39;
x_1741 = l_Lean_Elaborator_Expr_mkAnnotation(x_1740, x_1724);
x_1742 = lean_expr_mk_app(x_1741, x_1738);
x_1743 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1743, 0, x_1742);
lean::cnstr_set(x_1743, 1, x_1739);
x_86 = x_1743;
goto block_130;
}
}
}
else
{
obj* x_1744; obj* x_1745; obj* x_1746; obj* x_1747; 
x_1744 = lean::cnstr_get(x_1725, 0);
lean::inc(x_1744);
lean::dec(x_1725);
x_1745 = lean::cnstr_get(x_1744, 1);
lean::inc(x_1745);
lean::dec(x_1744);
x_1746 = lean::cnstr_get(x_1745, 1);
lean::inc(x_1746);
lean::dec(x_1745);
x_1747 = l_Lean_Elaborator_toPexpr___main(x_1746, x_2, x_3, x_1722);
if (lean::obj_tag(x_1747) == 0)
{
uint8 x_1748; 
lean::dec(x_1724);
lean::dec(x_15);
lean::dec(x_1);
x_1748 = !lean::is_exclusive(x_1747);
if (x_1748 == 0)
{
return x_1747;
}
else
{
obj* x_1749; obj* x_1750; 
x_1749 = lean::cnstr_get(x_1747, 0);
lean::inc(x_1749);
lean::dec(x_1747);
x_1750 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1750, 0, x_1749);
return x_1750;
}
}
else
{
obj* x_1751; uint8 x_1752; 
x_1751 = lean::cnstr_get(x_1747, 0);
lean::inc(x_1751);
lean::dec(x_1747);
x_1752 = !lean::is_exclusive(x_1751);
if (x_1752 == 0)
{
obj* x_1753; obj* x_1754; obj* x_1755; obj* x_1756; 
x_1753 = lean::cnstr_get(x_1751, 0);
x_1754 = l_Lean_Elaborator_toPexpr___main___closed__39;
x_1755 = l_Lean_Elaborator_Expr_mkAnnotation(x_1754, x_1724);
x_1756 = lean_expr_mk_app(x_1755, x_1753);
lean::cnstr_set(x_1751, 0, x_1756);
x_86 = x_1751;
goto block_130;
}
else
{
obj* x_1757; obj* x_1758; obj* x_1759; obj* x_1760; obj* x_1761; obj* x_1762; 
x_1757 = lean::cnstr_get(x_1751, 0);
x_1758 = lean::cnstr_get(x_1751, 1);
lean::inc(x_1758);
lean::inc(x_1757);
lean::dec(x_1751);
x_1759 = l_Lean_Elaborator_toPexpr___main___closed__39;
x_1760 = l_Lean_Elaborator_Expr_mkAnnotation(x_1759, x_1724);
x_1761 = lean_expr_mk_app(x_1760, x_1757);
x_1762 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1762, 0, x_1761);
lean::cnstr_set(x_1762, 1, x_1758);
x_86 = x_1762;
goto block_130;
}
}
}
}
}
}
}
}
else
{
obj* x_1763; 
lean::dec(x_16);
lean::dec(x_15);
x_1763 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1763) == 0)
{
obj* x_1764; obj* x_1765; obj* x_1766; 
x_1764 = l_Lean_Elaborator_toPexpr___main___closed__40;
x_1765 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1765, 0, x_1764);
lean::cnstr_set(x_1765, 1, x_4);
x_1766 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1766, 0, x_1765);
return x_1766;
}
else
{
obj* x_1767; obj* x_1768; obj* x_1769; obj* x_1770; obj* x_1771; obj* x_1772; obj* x_1773; obj* x_1774; obj* x_1775; obj* x_1776; obj* x_1777; obj* x_1778; obj* x_1779; obj* x_1780; obj* x_1781; 
x_1767 = lean::cnstr_get(x_1763, 0);
lean::inc(x_1767);
lean::dec(x_1763);
x_1768 = lean::cnstr_get(x_3, 0);
x_1769 = lean::cnstr_get(x_1768, 2);
x_1770 = l_Lean_FileMap_toPosition(x_1769, x_1767);
x_1771 = lean::cnstr_get(x_1770, 1);
lean::inc(x_1771);
x_1772 = lean::box(0);
x_1773 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1774 = l_Lean_KVMap_setNat(x_1772, x_1773, x_1771);
x_1775 = lean::cnstr_get(x_1770, 0);
lean::inc(x_1775);
lean::dec(x_1770);
x_1776 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1777 = l_Lean_KVMap_setNat(x_1774, x_1776, x_1775);
x_1778 = l_Lean_Elaborator_toPexpr___main___closed__40;
x_1779 = lean_expr_mk_mdata(x_1777, x_1778);
x_1780 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1780, 0, x_1779);
lean::cnstr_set(x_1780, 1, x_4);
x_1781 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1781, 0, x_1780);
return x_1781;
}
}
}
else
{
obj* x_1782; obj* x_1783; obj* x_1784; obj* x_1785; obj* x_1786; obj* x_1787; obj* x_1788; obj* x_1789; 
lean::dec(x_16);
lean::dec(x_15);
x_1782 = l_Lean_Parser_Term_anonymousConstructor_HasView;
x_1783 = lean::cnstr_get(x_1782, 0);
lean::inc(x_1783);
lean::inc(x_1);
x_1784 = lean::apply_1(x_1783, x_1);
x_1785 = lean::cnstr_get(x_1784, 1);
lean::inc(x_1785);
lean::dec(x_1784);
x_1786 = l_List_map___main___at_Lean_Expander_paren_transform___spec__1(x_1785);
x_1787 = l_Lean_Expander_getOptType___main___closed__1;
x_1788 = l_List_foldl___main___at_Lean_Parser_Term_mkApp___spec__1(x_1787, x_1786);
x_1789 = l_Lean_Elaborator_toPexpr___main(x_1788, x_2, x_3, x_4);
if (lean::obj_tag(x_1789) == 0)
{
uint8 x_1790; 
lean::dec(x_1);
x_1790 = !lean::is_exclusive(x_1789);
if (x_1790 == 0)
{
return x_1789;
}
else
{
obj* x_1791; obj* x_1792; 
x_1791 = lean::cnstr_get(x_1789, 0);
lean::inc(x_1791);
lean::dec(x_1789);
x_1792 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1792, 0, x_1791);
return x_1792;
}
}
else
{
uint8 x_1793; 
x_1793 = !lean::is_exclusive(x_1789);
if (x_1793 == 0)
{
obj* x_1794; uint8 x_1795; 
x_1794 = lean::cnstr_get(x_1789, 0);
x_1795 = !lean::is_exclusive(x_1794);
if (x_1795 == 0)
{
obj* x_1796; obj* x_1797; obj* x_1798; obj* x_1799; 
x_1796 = lean::cnstr_get(x_1794, 0);
x_1797 = l_Lean_Elaborator_toPexpr___main___closed__41;
x_1798 = l_Lean_Elaborator_Expr_mkAnnotation(x_1797, x_1796);
x_1799 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1799) == 0)
{
lean::cnstr_set(x_1794, 0, x_1798);
return x_1789;
}
else
{
obj* x_1800; obj* x_1801; obj* x_1802; obj* x_1803; obj* x_1804; obj* x_1805; obj* x_1806; obj* x_1807; obj* x_1808; obj* x_1809; obj* x_1810; obj* x_1811; 
x_1800 = lean::cnstr_get(x_1799, 0);
lean::inc(x_1800);
lean::dec(x_1799);
x_1801 = lean::cnstr_get(x_3, 0);
x_1802 = lean::cnstr_get(x_1801, 2);
x_1803 = l_Lean_FileMap_toPosition(x_1802, x_1800);
x_1804 = lean::cnstr_get(x_1803, 1);
lean::inc(x_1804);
x_1805 = lean::box(0);
x_1806 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1807 = l_Lean_KVMap_setNat(x_1805, x_1806, x_1804);
x_1808 = lean::cnstr_get(x_1803, 0);
lean::inc(x_1808);
lean::dec(x_1803);
x_1809 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1810 = l_Lean_KVMap_setNat(x_1807, x_1809, x_1808);
x_1811 = lean_expr_mk_mdata(x_1810, x_1798);
lean::cnstr_set(x_1794, 0, x_1811);
return x_1789;
}
}
else
{
obj* x_1812; obj* x_1813; obj* x_1814; obj* x_1815; obj* x_1816; 
x_1812 = lean::cnstr_get(x_1794, 0);
x_1813 = lean::cnstr_get(x_1794, 1);
lean::inc(x_1813);
lean::inc(x_1812);
lean::dec(x_1794);
x_1814 = l_Lean_Elaborator_toPexpr___main___closed__41;
x_1815 = l_Lean_Elaborator_Expr_mkAnnotation(x_1814, x_1812);
x_1816 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1816) == 0)
{
obj* x_1817; 
x_1817 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1817, 0, x_1815);
lean::cnstr_set(x_1817, 1, x_1813);
lean::cnstr_set(x_1789, 0, x_1817);
return x_1789;
}
else
{
obj* x_1818; obj* x_1819; obj* x_1820; obj* x_1821; obj* x_1822; obj* x_1823; obj* x_1824; obj* x_1825; obj* x_1826; obj* x_1827; obj* x_1828; obj* x_1829; obj* x_1830; 
x_1818 = lean::cnstr_get(x_1816, 0);
lean::inc(x_1818);
lean::dec(x_1816);
x_1819 = lean::cnstr_get(x_3, 0);
x_1820 = lean::cnstr_get(x_1819, 2);
x_1821 = l_Lean_FileMap_toPosition(x_1820, x_1818);
x_1822 = lean::cnstr_get(x_1821, 1);
lean::inc(x_1822);
x_1823 = lean::box(0);
x_1824 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1825 = l_Lean_KVMap_setNat(x_1823, x_1824, x_1822);
x_1826 = lean::cnstr_get(x_1821, 0);
lean::inc(x_1826);
lean::dec(x_1821);
x_1827 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1828 = l_Lean_KVMap_setNat(x_1825, x_1827, x_1826);
x_1829 = lean_expr_mk_mdata(x_1828, x_1815);
x_1830 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1830, 0, x_1829);
lean::cnstr_set(x_1830, 1, x_1813);
lean::cnstr_set(x_1789, 0, x_1830);
return x_1789;
}
}
}
else
{
obj* x_1831; obj* x_1832; obj* x_1833; obj* x_1834; obj* x_1835; obj* x_1836; obj* x_1837; 
x_1831 = lean::cnstr_get(x_1789, 0);
lean::inc(x_1831);
lean::dec(x_1789);
x_1832 = lean::cnstr_get(x_1831, 0);
lean::inc(x_1832);
x_1833 = lean::cnstr_get(x_1831, 1);
lean::inc(x_1833);
if (lean::is_exclusive(x_1831)) {
 lean::cnstr_release(x_1831, 0);
 lean::cnstr_release(x_1831, 1);
 x_1834 = x_1831;
} else {
 lean::dec_ref(x_1831);
 x_1834 = lean::box(0);
}
x_1835 = l_Lean_Elaborator_toPexpr___main___closed__41;
x_1836 = l_Lean_Elaborator_Expr_mkAnnotation(x_1835, x_1832);
x_1837 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1837) == 0)
{
obj* x_1838; obj* x_1839; 
if (lean::is_scalar(x_1834)) {
 x_1838 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1838 = x_1834;
}
lean::cnstr_set(x_1838, 0, x_1836);
lean::cnstr_set(x_1838, 1, x_1833);
x_1839 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1839, 0, x_1838);
return x_1839;
}
else
{
obj* x_1840; obj* x_1841; obj* x_1842; obj* x_1843; obj* x_1844; obj* x_1845; obj* x_1846; obj* x_1847; obj* x_1848; obj* x_1849; obj* x_1850; obj* x_1851; obj* x_1852; obj* x_1853; 
x_1840 = lean::cnstr_get(x_1837, 0);
lean::inc(x_1840);
lean::dec(x_1837);
x_1841 = lean::cnstr_get(x_3, 0);
x_1842 = lean::cnstr_get(x_1841, 2);
x_1843 = l_Lean_FileMap_toPosition(x_1842, x_1840);
x_1844 = lean::cnstr_get(x_1843, 1);
lean::inc(x_1844);
x_1845 = lean::box(0);
x_1846 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1847 = l_Lean_KVMap_setNat(x_1845, x_1846, x_1844);
x_1848 = lean::cnstr_get(x_1843, 0);
lean::inc(x_1848);
lean::dec(x_1843);
x_1849 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1850 = l_Lean_KVMap_setNat(x_1847, x_1849, x_1848);
x_1851 = lean_expr_mk_mdata(x_1850, x_1836);
if (lean::is_scalar(x_1834)) {
 x_1852 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1852 = x_1834;
}
lean::cnstr_set(x_1852, 0, x_1851);
lean::cnstr_set(x_1852, 1, x_1833);
x_1853 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1853, 0, x_1852);
return x_1853;
}
}
}
}
}
else
{
obj* x_1854; obj* x_1855; obj* x_1856; obj* x_1857; obj* x_1858; obj* x_1859; obj* x_1860; 
lean::dec(x_16);
lean::dec(x_15);
x_1854 = l_Lean_Parser_Term_sortApp_HasView;
x_1855 = lean::cnstr_get(x_1854, 0);
lean::inc(x_1855);
lean::inc(x_1);
x_1856 = lean::apply_1(x_1855, x_1);
x_1857 = l_Lean_Parser_Term_sort_HasView;
x_1858 = lean::cnstr_get(x_1857, 0);
lean::inc(x_1858);
x_1859 = lean::cnstr_get(x_1856, 0);
lean::inc(x_1859);
x_1860 = lean::apply_1(x_1858, x_1859);
if (lean::obj_tag(x_1860) == 0)
{
obj* x_1861; obj* x_1862; 
lean::dec(x_1860);
x_1861 = lean::cnstr_get(x_1856, 1);
lean::inc(x_1861);
lean::dec(x_1856);
x_1862 = l_Lean_Elaborator_toLevel___main(x_1861, x_2, x_3, x_4);
if (lean::obj_tag(x_1862) == 0)
{
uint8 x_1863; 
lean::dec(x_1);
x_1863 = !lean::is_exclusive(x_1862);
if (x_1863 == 0)
{
return x_1862;
}
else
{
obj* x_1864; obj* x_1865; 
x_1864 = lean::cnstr_get(x_1862, 0);
lean::inc(x_1864);
lean::dec(x_1862);
x_1865 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1865, 0, x_1864);
return x_1865;
}
}
else
{
uint8 x_1866; 
x_1866 = !lean::is_exclusive(x_1862);
if (x_1866 == 0)
{
obj* x_1867; uint8 x_1868; 
x_1867 = lean::cnstr_get(x_1862, 0);
x_1868 = !lean::is_exclusive(x_1867);
if (x_1868 == 0)
{
obj* x_1869; obj* x_1870; obj* x_1871; 
x_1869 = lean::cnstr_get(x_1867, 0);
x_1870 = lean_expr_mk_sort(x_1869);
x_1871 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1871) == 0)
{
lean::cnstr_set(x_1867, 0, x_1870);
return x_1862;
}
else
{
obj* x_1872; obj* x_1873; obj* x_1874; obj* x_1875; obj* x_1876; obj* x_1877; obj* x_1878; obj* x_1879; obj* x_1880; obj* x_1881; obj* x_1882; obj* x_1883; 
x_1872 = lean::cnstr_get(x_1871, 0);
lean::inc(x_1872);
lean::dec(x_1871);
x_1873 = lean::cnstr_get(x_3, 0);
x_1874 = lean::cnstr_get(x_1873, 2);
x_1875 = l_Lean_FileMap_toPosition(x_1874, x_1872);
x_1876 = lean::cnstr_get(x_1875, 1);
lean::inc(x_1876);
x_1877 = lean::box(0);
x_1878 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1879 = l_Lean_KVMap_setNat(x_1877, x_1878, x_1876);
x_1880 = lean::cnstr_get(x_1875, 0);
lean::inc(x_1880);
lean::dec(x_1875);
x_1881 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1882 = l_Lean_KVMap_setNat(x_1879, x_1881, x_1880);
x_1883 = lean_expr_mk_mdata(x_1882, x_1870);
lean::cnstr_set(x_1867, 0, x_1883);
return x_1862;
}
}
else
{
obj* x_1884; obj* x_1885; obj* x_1886; obj* x_1887; 
x_1884 = lean::cnstr_get(x_1867, 0);
x_1885 = lean::cnstr_get(x_1867, 1);
lean::inc(x_1885);
lean::inc(x_1884);
lean::dec(x_1867);
x_1886 = lean_expr_mk_sort(x_1884);
x_1887 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1887) == 0)
{
obj* x_1888; 
x_1888 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1888, 0, x_1886);
lean::cnstr_set(x_1888, 1, x_1885);
lean::cnstr_set(x_1862, 0, x_1888);
return x_1862;
}
else
{
obj* x_1889; obj* x_1890; obj* x_1891; obj* x_1892; obj* x_1893; obj* x_1894; obj* x_1895; obj* x_1896; obj* x_1897; obj* x_1898; obj* x_1899; obj* x_1900; obj* x_1901; 
x_1889 = lean::cnstr_get(x_1887, 0);
lean::inc(x_1889);
lean::dec(x_1887);
x_1890 = lean::cnstr_get(x_3, 0);
x_1891 = lean::cnstr_get(x_1890, 2);
x_1892 = l_Lean_FileMap_toPosition(x_1891, x_1889);
x_1893 = lean::cnstr_get(x_1892, 1);
lean::inc(x_1893);
x_1894 = lean::box(0);
x_1895 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1896 = l_Lean_KVMap_setNat(x_1894, x_1895, x_1893);
x_1897 = lean::cnstr_get(x_1892, 0);
lean::inc(x_1897);
lean::dec(x_1892);
x_1898 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1899 = l_Lean_KVMap_setNat(x_1896, x_1898, x_1897);
x_1900 = lean_expr_mk_mdata(x_1899, x_1886);
x_1901 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1901, 0, x_1900);
lean::cnstr_set(x_1901, 1, x_1885);
lean::cnstr_set(x_1862, 0, x_1901);
return x_1862;
}
}
}
else
{
obj* x_1902; obj* x_1903; obj* x_1904; obj* x_1905; obj* x_1906; obj* x_1907; 
x_1902 = lean::cnstr_get(x_1862, 0);
lean::inc(x_1902);
lean::dec(x_1862);
x_1903 = lean::cnstr_get(x_1902, 0);
lean::inc(x_1903);
x_1904 = lean::cnstr_get(x_1902, 1);
lean::inc(x_1904);
if (lean::is_exclusive(x_1902)) {
 lean::cnstr_release(x_1902, 0);
 lean::cnstr_release(x_1902, 1);
 x_1905 = x_1902;
} else {
 lean::dec_ref(x_1902);
 x_1905 = lean::box(0);
}
x_1906 = lean_expr_mk_sort(x_1903);
x_1907 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1907) == 0)
{
obj* x_1908; obj* x_1909; 
if (lean::is_scalar(x_1905)) {
 x_1908 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1908 = x_1905;
}
lean::cnstr_set(x_1908, 0, x_1906);
lean::cnstr_set(x_1908, 1, x_1904);
x_1909 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1909, 0, x_1908);
return x_1909;
}
else
{
obj* x_1910; obj* x_1911; obj* x_1912; obj* x_1913; obj* x_1914; obj* x_1915; obj* x_1916; obj* x_1917; obj* x_1918; obj* x_1919; obj* x_1920; obj* x_1921; obj* x_1922; obj* x_1923; 
x_1910 = lean::cnstr_get(x_1907, 0);
lean::inc(x_1910);
lean::dec(x_1907);
x_1911 = lean::cnstr_get(x_3, 0);
x_1912 = lean::cnstr_get(x_1911, 2);
x_1913 = l_Lean_FileMap_toPosition(x_1912, x_1910);
x_1914 = lean::cnstr_get(x_1913, 1);
lean::inc(x_1914);
x_1915 = lean::box(0);
x_1916 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1917 = l_Lean_KVMap_setNat(x_1915, x_1916, x_1914);
x_1918 = lean::cnstr_get(x_1913, 0);
lean::inc(x_1918);
lean::dec(x_1913);
x_1919 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1920 = l_Lean_KVMap_setNat(x_1917, x_1919, x_1918);
x_1921 = lean_expr_mk_mdata(x_1920, x_1906);
if (lean::is_scalar(x_1905)) {
 x_1922 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1922 = x_1905;
}
lean::cnstr_set(x_1922, 0, x_1921);
lean::cnstr_set(x_1922, 1, x_1904);
x_1923 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1923, 0, x_1922);
return x_1923;
}
}
}
}
else
{
obj* x_1924; obj* x_1925; 
lean::dec(x_1860);
x_1924 = lean::cnstr_get(x_1856, 1);
lean::inc(x_1924);
lean::dec(x_1856);
x_1925 = l_Lean_Elaborator_toLevel___main(x_1924, x_2, x_3, x_4);
if (lean::obj_tag(x_1925) == 0)
{
uint8 x_1926; 
lean::dec(x_1);
x_1926 = !lean::is_exclusive(x_1925);
if (x_1926 == 0)
{
return x_1925;
}
else
{
obj* x_1927; obj* x_1928; 
x_1927 = lean::cnstr_get(x_1925, 0);
lean::inc(x_1927);
lean::dec(x_1925);
x_1928 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1928, 0, x_1927);
return x_1928;
}
}
else
{
uint8 x_1929; 
x_1929 = !lean::is_exclusive(x_1925);
if (x_1929 == 0)
{
obj* x_1930; uint8 x_1931; 
x_1930 = lean::cnstr_get(x_1925, 0);
x_1931 = !lean::is_exclusive(x_1930);
if (x_1931 == 0)
{
obj* x_1932; obj* x_1933; obj* x_1934; obj* x_1935; 
x_1932 = lean::cnstr_get(x_1930, 0);
x_1933 = level_mk_succ(x_1932);
x_1934 = lean_expr_mk_sort(x_1933);
x_1935 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1935) == 0)
{
lean::cnstr_set(x_1930, 0, x_1934);
return x_1925;
}
else
{
obj* x_1936; obj* x_1937; obj* x_1938; obj* x_1939; obj* x_1940; obj* x_1941; obj* x_1942; obj* x_1943; obj* x_1944; obj* x_1945; obj* x_1946; obj* x_1947; 
x_1936 = lean::cnstr_get(x_1935, 0);
lean::inc(x_1936);
lean::dec(x_1935);
x_1937 = lean::cnstr_get(x_3, 0);
x_1938 = lean::cnstr_get(x_1937, 2);
x_1939 = l_Lean_FileMap_toPosition(x_1938, x_1936);
x_1940 = lean::cnstr_get(x_1939, 1);
lean::inc(x_1940);
x_1941 = lean::box(0);
x_1942 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1943 = l_Lean_KVMap_setNat(x_1941, x_1942, x_1940);
x_1944 = lean::cnstr_get(x_1939, 0);
lean::inc(x_1944);
lean::dec(x_1939);
x_1945 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1946 = l_Lean_KVMap_setNat(x_1943, x_1945, x_1944);
x_1947 = lean_expr_mk_mdata(x_1946, x_1934);
lean::cnstr_set(x_1930, 0, x_1947);
return x_1925;
}
}
else
{
obj* x_1948; obj* x_1949; obj* x_1950; obj* x_1951; obj* x_1952; 
x_1948 = lean::cnstr_get(x_1930, 0);
x_1949 = lean::cnstr_get(x_1930, 1);
lean::inc(x_1949);
lean::inc(x_1948);
lean::dec(x_1930);
x_1950 = level_mk_succ(x_1948);
x_1951 = lean_expr_mk_sort(x_1950);
x_1952 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1952) == 0)
{
obj* x_1953; 
x_1953 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1953, 0, x_1951);
lean::cnstr_set(x_1953, 1, x_1949);
lean::cnstr_set(x_1925, 0, x_1953);
return x_1925;
}
else
{
obj* x_1954; obj* x_1955; obj* x_1956; obj* x_1957; obj* x_1958; obj* x_1959; obj* x_1960; obj* x_1961; obj* x_1962; obj* x_1963; obj* x_1964; obj* x_1965; obj* x_1966; 
x_1954 = lean::cnstr_get(x_1952, 0);
lean::inc(x_1954);
lean::dec(x_1952);
x_1955 = lean::cnstr_get(x_3, 0);
x_1956 = lean::cnstr_get(x_1955, 2);
x_1957 = l_Lean_FileMap_toPosition(x_1956, x_1954);
x_1958 = lean::cnstr_get(x_1957, 1);
lean::inc(x_1958);
x_1959 = lean::box(0);
x_1960 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1961 = l_Lean_KVMap_setNat(x_1959, x_1960, x_1958);
x_1962 = lean::cnstr_get(x_1957, 0);
lean::inc(x_1962);
lean::dec(x_1957);
x_1963 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1964 = l_Lean_KVMap_setNat(x_1961, x_1963, x_1962);
x_1965 = lean_expr_mk_mdata(x_1964, x_1951);
x_1966 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1966, 0, x_1965);
lean::cnstr_set(x_1966, 1, x_1949);
lean::cnstr_set(x_1925, 0, x_1966);
return x_1925;
}
}
}
else
{
obj* x_1967; obj* x_1968; obj* x_1969; obj* x_1970; obj* x_1971; obj* x_1972; obj* x_1973; 
x_1967 = lean::cnstr_get(x_1925, 0);
lean::inc(x_1967);
lean::dec(x_1925);
x_1968 = lean::cnstr_get(x_1967, 0);
lean::inc(x_1968);
x_1969 = lean::cnstr_get(x_1967, 1);
lean::inc(x_1969);
if (lean::is_exclusive(x_1967)) {
 lean::cnstr_release(x_1967, 0);
 lean::cnstr_release(x_1967, 1);
 x_1970 = x_1967;
} else {
 lean::dec_ref(x_1967);
 x_1970 = lean::box(0);
}
x_1971 = level_mk_succ(x_1968);
x_1972 = lean_expr_mk_sort(x_1971);
x_1973 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1973) == 0)
{
obj* x_1974; obj* x_1975; 
if (lean::is_scalar(x_1970)) {
 x_1974 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1974 = x_1970;
}
lean::cnstr_set(x_1974, 0, x_1972);
lean::cnstr_set(x_1974, 1, x_1969);
x_1975 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1975, 0, x_1974);
return x_1975;
}
else
{
obj* x_1976; obj* x_1977; obj* x_1978; obj* x_1979; obj* x_1980; obj* x_1981; obj* x_1982; obj* x_1983; obj* x_1984; obj* x_1985; obj* x_1986; obj* x_1987; obj* x_1988; obj* x_1989; 
x_1976 = lean::cnstr_get(x_1973, 0);
lean::inc(x_1976);
lean::dec(x_1973);
x_1977 = lean::cnstr_get(x_3, 0);
x_1978 = lean::cnstr_get(x_1977, 2);
x_1979 = l_Lean_FileMap_toPosition(x_1978, x_1976);
x_1980 = lean::cnstr_get(x_1979, 1);
lean::inc(x_1980);
x_1981 = lean::box(0);
x_1982 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_1983 = l_Lean_KVMap_setNat(x_1981, x_1982, x_1980);
x_1984 = lean::cnstr_get(x_1979, 0);
lean::inc(x_1984);
lean::dec(x_1979);
x_1985 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_1986 = l_Lean_KVMap_setNat(x_1983, x_1985, x_1984);
x_1987 = lean_expr_mk_mdata(x_1986, x_1972);
if (lean::is_scalar(x_1970)) {
 x_1988 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_1988 = x_1970;
}
lean::cnstr_set(x_1988, 0, x_1987);
lean::cnstr_set(x_1988, 1, x_1969);
x_1989 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1989, 0, x_1988);
return x_1989;
}
}
}
}
}
}
else
{
obj* x_1990; obj* x_1991; obj* x_1992; 
lean::dec(x_16);
lean::dec(x_15);
x_1990 = l_Lean_Parser_Term_sort_HasView;
x_1991 = lean::cnstr_get(x_1990, 0);
lean::inc(x_1991);
lean::inc(x_1);
x_1992 = lean::apply_1(x_1991, x_1);
if (lean::obj_tag(x_1992) == 0)
{
obj* x_1993; 
lean::dec(x_1992);
x_1993 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_1993) == 0)
{
obj* x_1994; obj* x_1995; obj* x_1996; 
x_1994 = l_Lean_Elaborator_toPexpr___main___closed__25;
x_1995 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1995, 0, x_1994);
lean::cnstr_set(x_1995, 1, x_4);
x_1996 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1996, 0, x_1995);
return x_1996;
}
else
{
obj* x_1997; obj* x_1998; obj* x_1999; obj* x_2000; obj* x_2001; obj* x_2002; obj* x_2003; obj* x_2004; obj* x_2005; obj* x_2006; obj* x_2007; obj* x_2008; obj* x_2009; obj* x_2010; obj* x_2011; 
x_1997 = lean::cnstr_get(x_1993, 0);
lean::inc(x_1997);
lean::dec(x_1993);
x_1998 = lean::cnstr_get(x_3, 0);
x_1999 = lean::cnstr_get(x_1998, 2);
x_2000 = l_Lean_FileMap_toPosition(x_1999, x_1997);
x_2001 = lean::cnstr_get(x_2000, 1);
lean::inc(x_2001);
x_2002 = lean::box(0);
x_2003 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_2004 = l_Lean_KVMap_setNat(x_2002, x_2003, x_2001);
x_2005 = lean::cnstr_get(x_2000, 0);
lean::inc(x_2005);
lean::dec(x_2000);
x_2006 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_2007 = l_Lean_KVMap_setNat(x_2004, x_2006, x_2005);
x_2008 = l_Lean_Elaborator_toPexpr___main___closed__25;
x_2009 = lean_expr_mk_mdata(x_2007, x_2008);
x_2010 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2010, 0, x_2009);
lean::cnstr_set(x_2010, 1, x_4);
x_2011 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2011, 0, x_2010);
return x_2011;
}
}
else
{
obj* x_2012; 
lean::dec(x_1992);
x_2012 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_2012) == 0)
{
obj* x_2013; obj* x_2014; obj* x_2015; 
x_2013 = l_Lean_Elaborator_toPexpr___main___closed__42;
x_2014 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2014, 0, x_2013);
lean::cnstr_set(x_2014, 1, x_4);
x_2015 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2015, 0, x_2014);
return x_2015;
}
else
{
obj* x_2016; obj* x_2017; obj* x_2018; obj* x_2019; obj* x_2020; obj* x_2021; obj* x_2022; obj* x_2023; obj* x_2024; obj* x_2025; obj* x_2026; obj* x_2027; obj* x_2028; obj* x_2029; obj* x_2030; 
x_2016 = lean::cnstr_get(x_2012, 0);
lean::inc(x_2016);
lean::dec(x_2012);
x_2017 = lean::cnstr_get(x_3, 0);
x_2018 = lean::cnstr_get(x_2017, 2);
x_2019 = l_Lean_FileMap_toPosition(x_2018, x_2016);
x_2020 = lean::cnstr_get(x_2019, 1);
lean::inc(x_2020);
x_2021 = lean::box(0);
x_2022 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_2023 = l_Lean_KVMap_setNat(x_2021, x_2022, x_2020);
x_2024 = lean::cnstr_get(x_2019, 0);
lean::inc(x_2024);
lean::dec(x_2019);
x_2025 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_2026 = l_Lean_KVMap_setNat(x_2023, x_2025, x_2024);
x_2027 = l_Lean_Elaborator_toPexpr___main___closed__42;
x_2028 = lean_expr_mk_mdata(x_2026, x_2027);
x_2029 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2029, 0, x_2028);
lean::cnstr_set(x_2029, 1, x_4);
x_2030 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2030, 0, x_2029);
return x_2030;
}
}
}
}
else
{
obj* x_2031; obj* x_2032; obj* x_2033; obj* x_2034; 
lean::dec(x_16);
x_2031 = l_Lean_Parser_Term_pi_HasView;
x_2032 = lean::cnstr_get(x_2031, 0);
lean::inc(x_2032);
lean::inc(x_1);
x_2033 = lean::apply_1(x_2032, x_1);
x_2034 = lean::cnstr_get(x_2033, 1);
lean::inc(x_2034);
if (lean::obj_tag(x_2034) == 0)
{
obj* x_2035; obj* x_2036; obj* x_2037; 
lean::dec(x_2034);
lean::dec(x_2033);
lean::inc(x_1);
x_2035 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2035, 0, x_1);
x_2036 = l_Lean_Elaborator_toPexpr___main___closed__43;
x_2037 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_2035, x_2036, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_2035);
if (lean::obj_tag(x_2037) == 0)
{
uint8 x_2038; 
lean::dec(x_15);
lean::dec(x_1);
x_2038 = !lean::is_exclusive(x_2037);
if (x_2038 == 0)
{
return x_2037;
}
else
{
obj* x_2039; obj* x_2040; 
x_2039 = lean::cnstr_get(x_2037, 0);
lean::inc(x_2039);
lean::dec(x_2037);
x_2040 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2040, 0, x_2039);
return x_2040;
}
}
else
{
obj* x_2041; 
x_2041 = lean::cnstr_get(x_2037, 0);
lean::inc(x_2041);
lean::dec(x_2037);
x_86 = x_2041;
goto block_130;
}
}
else
{
obj* x_2042; obj* x_2043; obj* x_2044; obj* x_2045; obj* x_2046; obj* x_2047; obj* x_2048; obj* x_2049; 
x_2042 = lean::cnstr_get(x_2034, 0);
lean::inc(x_2042);
lean::dec(x_2034);
x_2043 = l_Lean_Parser_Term_simpleBinder_View_toBinderInfo___main(x_2042);
lean::dec(x_2042);
x_2044 = lean::cnstr_get(x_2043, 1);
lean::inc(x_2044);
x_2045 = lean::cnstr_get(x_2043, 0);
lean::inc(x_2045);
lean::dec(x_2043);
x_2046 = lean::cnstr_get(x_2044, 0);
lean::inc(x_2046);
x_2047 = lean::cnstr_get(x_2044, 1);
lean::inc(x_2047);
lean::dec(x_2044);
x_2048 = lean::cnstr_get(x_2033, 3);
lean::inc(x_2048);
lean::dec(x_2033);
x_2049 = l_Lean_Elaborator_toPexpr___main(x_2047, x_2, x_3, x_4);
if (lean::obj_tag(x_2049) == 0)
{
uint8 x_2050; 
lean::dec(x_2048);
lean::dec(x_2046);
lean::dec(x_2045);
lean::dec(x_15);
lean::dec(x_1);
x_2050 = !lean::is_exclusive(x_2049);
if (x_2050 == 0)
{
return x_2049;
}
else
{
obj* x_2051; obj* x_2052; 
x_2051 = lean::cnstr_get(x_2049, 0);
lean::inc(x_2051);
lean::dec(x_2049);
x_2052 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2052, 0, x_2051);
return x_2052;
}
}
else
{
obj* x_2053; obj* x_2054; obj* x_2055; obj* x_2056; 
x_2053 = lean::cnstr_get(x_2049, 0);
lean::inc(x_2053);
lean::dec(x_2049);
x_2054 = lean::cnstr_get(x_2053, 0);
lean::inc(x_2054);
x_2055 = lean::cnstr_get(x_2053, 1);
lean::inc(x_2055);
lean::dec(x_2053);
x_2056 = l_Lean_Elaborator_toPexpr___main(x_2048, x_2, x_3, x_2055);
if (lean::obj_tag(x_2056) == 0)
{
uint8 x_2057; 
lean::dec(x_2054);
lean::dec(x_2046);
lean::dec(x_2045);
lean::dec(x_15);
lean::dec(x_1);
x_2057 = !lean::is_exclusive(x_2056);
if (x_2057 == 0)
{
return x_2056;
}
else
{
obj* x_2058; obj* x_2059; 
x_2058 = lean::cnstr_get(x_2056, 0);
lean::inc(x_2058);
lean::dec(x_2056);
x_2059 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2059, 0, x_2058);
return x_2059;
}
}
else
{
obj* x_2060; uint8 x_2061; 
x_2060 = lean::cnstr_get(x_2056, 0);
lean::inc(x_2060);
lean::dec(x_2056);
x_2061 = !lean::is_exclusive(x_2060);
if (x_2061 == 0)
{
obj* x_2062; obj* x_2063; uint8 x_2064; obj* x_2065; 
x_2062 = lean::cnstr_get(x_2060, 0);
x_2063 = l_Lean_Elaborator_mangleIdent(x_2046);
x_2064 = lean::unbox(x_2045);
lean::dec(x_2045);
x_2065 = lean_expr_mk_pi(x_2063, x_2064, x_2054, x_2062);
lean::cnstr_set(x_2060, 0, x_2065);
x_86 = x_2060;
goto block_130;
}
else
{
obj* x_2066; obj* x_2067; obj* x_2068; uint8 x_2069; obj* x_2070; obj* x_2071; 
x_2066 = lean::cnstr_get(x_2060, 0);
x_2067 = lean::cnstr_get(x_2060, 1);
lean::inc(x_2067);
lean::inc(x_2066);
lean::dec(x_2060);
x_2068 = l_Lean_Elaborator_mangleIdent(x_2046);
x_2069 = lean::unbox(x_2045);
lean::dec(x_2045);
x_2070 = lean_expr_mk_pi(x_2068, x_2069, x_2054, x_2066);
x_2071 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2071, 0, x_2070);
lean::cnstr_set(x_2071, 1, x_2067);
x_86 = x_2071;
goto block_130;
}
}
}
}
}
}
else
{
obj* x_2072; obj* x_2073; obj* x_2074; obj* x_2075; 
lean::dec(x_16);
x_2072 = l_Lean_Parser_Term_lambda_HasView;
x_2073 = lean::cnstr_get(x_2072, 0);
lean::inc(x_2073);
lean::inc(x_1);
x_2074 = lean::apply_1(x_2073, x_1);
x_2075 = lean::cnstr_get(x_2074, 1);
lean::inc(x_2075);
if (lean::obj_tag(x_2075) == 0)
{
obj* x_2076; obj* x_2077; obj* x_2078; 
lean::dec(x_2075);
lean::dec(x_2074);
lean::inc(x_1);
x_2076 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2076, 0, x_1);
x_2077 = l_Lean_Elaborator_toPexpr___main___closed__44;
x_2078 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_2076, x_2077, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_2076);
if (lean::obj_tag(x_2078) == 0)
{
uint8 x_2079; 
lean::dec(x_15);
lean::dec(x_1);
x_2079 = !lean::is_exclusive(x_2078);
if (x_2079 == 0)
{
return x_2078;
}
else
{
obj* x_2080; obj* x_2081; 
x_2080 = lean::cnstr_get(x_2078, 0);
lean::inc(x_2080);
lean::dec(x_2078);
x_2081 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2081, 0, x_2080);
return x_2081;
}
}
else
{
obj* x_2082; 
x_2082 = lean::cnstr_get(x_2078, 0);
lean::inc(x_2082);
lean::dec(x_2078);
x_86 = x_2082;
goto block_130;
}
}
else
{
obj* x_2083; obj* x_2084; obj* x_2085; obj* x_2086; obj* x_2087; obj* x_2088; obj* x_2089; obj* x_2090; 
x_2083 = lean::cnstr_get(x_2075, 0);
lean::inc(x_2083);
lean::dec(x_2075);
x_2084 = l_Lean_Parser_Term_simpleBinder_View_toBinderInfo___main(x_2083);
lean::dec(x_2083);
x_2085 = lean::cnstr_get(x_2084, 1);
lean::inc(x_2085);
x_2086 = lean::cnstr_get(x_2084, 0);
lean::inc(x_2086);
lean::dec(x_2084);
x_2087 = lean::cnstr_get(x_2085, 0);
lean::inc(x_2087);
x_2088 = lean::cnstr_get(x_2085, 1);
lean::inc(x_2088);
lean::dec(x_2085);
x_2089 = lean::cnstr_get(x_2074, 3);
lean::inc(x_2089);
lean::dec(x_2074);
x_2090 = l_Lean_Elaborator_toPexpr___main(x_2088, x_2, x_3, x_4);
if (lean::obj_tag(x_2090) == 0)
{
uint8 x_2091; 
lean::dec(x_2089);
lean::dec(x_2087);
lean::dec(x_2086);
lean::dec(x_15);
lean::dec(x_1);
x_2091 = !lean::is_exclusive(x_2090);
if (x_2091 == 0)
{
return x_2090;
}
else
{
obj* x_2092; obj* x_2093; 
x_2092 = lean::cnstr_get(x_2090, 0);
lean::inc(x_2092);
lean::dec(x_2090);
x_2093 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2093, 0, x_2092);
return x_2093;
}
}
else
{
obj* x_2094; obj* x_2095; obj* x_2096; obj* x_2097; 
x_2094 = lean::cnstr_get(x_2090, 0);
lean::inc(x_2094);
lean::dec(x_2090);
x_2095 = lean::cnstr_get(x_2094, 0);
lean::inc(x_2095);
x_2096 = lean::cnstr_get(x_2094, 1);
lean::inc(x_2096);
lean::dec(x_2094);
x_2097 = l_Lean_Elaborator_toPexpr___main(x_2089, x_2, x_3, x_2096);
if (lean::obj_tag(x_2097) == 0)
{
uint8 x_2098; 
lean::dec(x_2095);
lean::dec(x_2087);
lean::dec(x_2086);
lean::dec(x_15);
lean::dec(x_1);
x_2098 = !lean::is_exclusive(x_2097);
if (x_2098 == 0)
{
return x_2097;
}
else
{
obj* x_2099; obj* x_2100; 
x_2099 = lean::cnstr_get(x_2097, 0);
lean::inc(x_2099);
lean::dec(x_2097);
x_2100 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2100, 0, x_2099);
return x_2100;
}
}
else
{
obj* x_2101; uint8 x_2102; 
x_2101 = lean::cnstr_get(x_2097, 0);
lean::inc(x_2101);
lean::dec(x_2097);
x_2102 = !lean::is_exclusive(x_2101);
if (x_2102 == 0)
{
obj* x_2103; obj* x_2104; uint8 x_2105; obj* x_2106; 
x_2103 = lean::cnstr_get(x_2101, 0);
x_2104 = l_Lean_Elaborator_mangleIdent(x_2087);
x_2105 = lean::unbox(x_2086);
lean::dec(x_2086);
x_2106 = lean_expr_mk_lambda(x_2104, x_2105, x_2095, x_2103);
lean::cnstr_set(x_2101, 0, x_2106);
x_86 = x_2101;
goto block_130;
}
else
{
obj* x_2107; obj* x_2108; obj* x_2109; uint8 x_2110; obj* x_2111; obj* x_2112; 
x_2107 = lean::cnstr_get(x_2101, 0);
x_2108 = lean::cnstr_get(x_2101, 1);
lean::inc(x_2108);
lean::inc(x_2107);
lean::dec(x_2101);
x_2109 = l_Lean_Elaborator_mangleIdent(x_2087);
x_2110 = lean::unbox(x_2086);
lean::dec(x_2086);
x_2111 = lean_expr_mk_lambda(x_2109, x_2110, x_2095, x_2107);
x_2112 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2112, 0, x_2111);
lean::cnstr_set(x_2112, 1, x_2108);
x_86 = x_2112;
goto block_130;
}
}
}
}
}
}
else
{
obj* x_2113; obj* x_2114; obj* x_2115; obj* x_2116; obj* x_2117; obj* x_2118; 
lean::dec(x_16);
lean::dec(x_15);
x_2113 = l_Lean_Parser_Term_app_HasView;
x_2114 = lean::cnstr_get(x_2113, 0);
lean::inc(x_2114);
x_2115 = lean::apply_1(x_2114, x_1);
x_2116 = lean::cnstr_get(x_2115, 0);
lean::inc(x_2116);
x_2117 = lean::cnstr_get(x_2115, 1);
lean::inc(x_2117);
lean::dec(x_2115);
x_2118 = l_Lean_Elaborator_toPexpr___main(x_2116, x_2, x_3, x_4);
if (lean::obj_tag(x_2118) == 0)
{
uint8 x_2119; 
lean::dec(x_2117);
x_2119 = !lean::is_exclusive(x_2118);
if (x_2119 == 0)
{
return x_2118;
}
else
{
obj* x_2120; obj* x_2121; 
x_2120 = lean::cnstr_get(x_2118, 0);
lean::inc(x_2120);
lean::dec(x_2118);
x_2121 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2121, 0, x_2120);
return x_2121;
}
}
else
{
obj* x_2122; obj* x_2123; obj* x_2124; obj* x_2125; 
x_2122 = lean::cnstr_get(x_2118, 0);
lean::inc(x_2122);
lean::dec(x_2118);
x_2123 = lean::cnstr_get(x_2122, 0);
lean::inc(x_2123);
x_2124 = lean::cnstr_get(x_2122, 1);
lean::inc(x_2124);
lean::dec(x_2122);
x_2125 = l_Lean_Elaborator_toPexpr___main(x_2117, x_2, x_3, x_2124);
if (lean::obj_tag(x_2125) == 0)
{
uint8 x_2126; 
lean::dec(x_2123);
x_2126 = !lean::is_exclusive(x_2125);
if (x_2126 == 0)
{
return x_2125;
}
else
{
obj* x_2127; obj* x_2128; 
x_2127 = lean::cnstr_get(x_2125, 0);
lean::inc(x_2127);
lean::dec(x_2125);
x_2128 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2128, 0, x_2127);
return x_2128;
}
}
else
{
uint8 x_2129; 
x_2129 = !lean::is_exclusive(x_2125);
if (x_2129 == 0)
{
obj* x_2130; uint8 x_2131; 
x_2130 = lean::cnstr_get(x_2125, 0);
x_2131 = !lean::is_exclusive(x_2130);
if (x_2131 == 0)
{
obj* x_2132; obj* x_2133; 
x_2132 = lean::cnstr_get(x_2130, 0);
x_2133 = lean_expr_mk_app(x_2123, x_2132);
lean::cnstr_set(x_2130, 0, x_2133);
return x_2125;
}
else
{
obj* x_2134; obj* x_2135; obj* x_2136; obj* x_2137; 
x_2134 = lean::cnstr_get(x_2130, 0);
x_2135 = lean::cnstr_get(x_2130, 1);
lean::inc(x_2135);
lean::inc(x_2134);
lean::dec(x_2130);
x_2136 = lean_expr_mk_app(x_2123, x_2134);
x_2137 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2137, 0, x_2136);
lean::cnstr_set(x_2137, 1, x_2135);
lean::cnstr_set(x_2125, 0, x_2137);
return x_2125;
}
}
else
{
obj* x_2138; obj* x_2139; obj* x_2140; obj* x_2141; obj* x_2142; obj* x_2143; obj* x_2144; 
x_2138 = lean::cnstr_get(x_2125, 0);
lean::inc(x_2138);
lean::dec(x_2125);
x_2139 = lean::cnstr_get(x_2138, 0);
lean::inc(x_2139);
x_2140 = lean::cnstr_get(x_2138, 1);
lean::inc(x_2140);
if (lean::is_exclusive(x_2138)) {
 lean::cnstr_release(x_2138, 0);
 lean::cnstr_release(x_2138, 1);
 x_2141 = x_2138;
} else {
 lean::dec_ref(x_2138);
 x_2141 = lean::box(0);
}
x_2142 = lean_expr_mk_app(x_2123, x_2139);
if (lean::is_scalar(x_2141)) {
 x_2143 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_2143 = x_2141;
}
lean::cnstr_set(x_2143, 0, x_2142);
lean::cnstr_set(x_2143, 1, x_2140);
x_2144 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2144, 0, x_2143);
return x_2144;
}
}
}
}
}
else
{
obj* x_2145; obj* x_2146; obj* x_2147; obj* x_2148; 
lean::dec(x_16);
x_2145 = l_Lean_Parser_identUnivs_HasView;
x_2146 = lean::cnstr_get(x_2145, 0);
lean::inc(x_2146);
lean::inc(x_1);
x_2147 = lean::apply_1(x_2146, x_1);
x_2148 = lean::cnstr_get(x_2147, 1);
lean::inc(x_2148);
if (lean::obj_tag(x_2148) == 0)
{
obj* x_2149; obj* x_2150; obj* x_2151; obj* x_2152; obj* x_2153; obj* x_2154; obj* x_2155; obj* x_2156; obj* x_2157; obj* x_2158; obj* x_2159; uint8 x_2160; 
x_2149 = lean::cnstr_get(x_2147, 0);
lean::inc(x_2149);
lean::dec(x_2147);
lean::inc(x_2149);
x_2150 = l_Lean_Elaborator_mangleIdent(x_2149);
x_2151 = lean::box(0);
x_2152 = lean_expr_mk_const(x_2150, x_2151);
x_2153 = lean::cnstr_get(x_2149, 3);
lean::inc(x_2153);
lean::dec(x_2149);
x_2154 = lean::mk_nat_obj(0u);
x_2155 = l_List_enumFrom___main___rarg(x_2154, x_2153);
x_2156 = l_Lean_Elaborator_toPexpr___main___closed__45;
x_2157 = l_List_foldl___main___at_Lean_Elaborator_toPexpr___main___spec__16(x_2156, x_2155);
x_2158 = lean_expr_mk_mdata(x_2157, x_2152);
x_2159 = l_Lean_Elaborator_toPexpr___main___closed__2;
x_2160 = lean_name_dec_eq(x_15, x_2159);
lean::dec(x_15);
if (x_2160 == 0)
{
obj* x_2161; 
x_2161 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_2161) == 0)
{
obj* x_2162; obj* x_2163; 
x_2162 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2162, 0, x_2158);
lean::cnstr_set(x_2162, 1, x_4);
x_2163 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2163, 0, x_2162);
return x_2163;
}
else
{
obj* x_2164; obj* x_2165; obj* x_2166; obj* x_2167; obj* x_2168; obj* x_2169; obj* x_2170; obj* x_2171; obj* x_2172; obj* x_2173; obj* x_2174; obj* x_2175; obj* x_2176; 
x_2164 = lean::cnstr_get(x_2161, 0);
lean::inc(x_2164);
lean::dec(x_2161);
x_2165 = lean::cnstr_get(x_3, 0);
x_2166 = lean::cnstr_get(x_2165, 2);
x_2167 = l_Lean_FileMap_toPosition(x_2166, x_2164);
x_2168 = lean::cnstr_get(x_2167, 1);
lean::inc(x_2168);
x_2169 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_2170 = l_Lean_KVMap_setNat(x_2151, x_2169, x_2168);
x_2171 = lean::cnstr_get(x_2167, 0);
lean::inc(x_2171);
lean::dec(x_2167);
x_2172 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_2173 = l_Lean_KVMap_setNat(x_2170, x_2172, x_2171);
x_2174 = lean_expr_mk_mdata(x_2173, x_2158);
x_2175 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2175, 0, x_2174);
lean::cnstr_set(x_2175, 1, x_4);
x_2176 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2176, 0, x_2175);
return x_2176;
}
}
else
{
obj* x_2177; obj* x_2178; 
lean::dec(x_1);
x_2177 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2177, 0, x_2158);
lean::cnstr_set(x_2177, 1, x_4);
x_2178 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2178, 0, x_2177);
return x_2178;
}
}
else
{
obj* x_2179; obj* x_2180; obj* x_2181; obj* x_2182; 
x_2179 = lean::cnstr_get(x_2147, 0);
lean::inc(x_2179);
lean::dec(x_2147);
x_2180 = lean::cnstr_get(x_2148, 0);
lean::inc(x_2180);
lean::dec(x_2148);
x_2181 = lean::cnstr_get(x_2180, 1);
lean::inc(x_2181);
lean::dec(x_2180);
x_2182 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__17(x_2181, x_2, x_3, x_4);
if (lean::obj_tag(x_2182) == 0)
{
uint8 x_2183; 
lean::dec(x_2179);
lean::dec(x_15);
lean::dec(x_1);
x_2183 = !lean::is_exclusive(x_2182);
if (x_2183 == 0)
{
return x_2182;
}
else
{
obj* x_2184; obj* x_2185; 
x_2184 = lean::cnstr_get(x_2182, 0);
lean::inc(x_2184);
lean::dec(x_2182);
x_2185 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2185, 0, x_2184);
return x_2185;
}
}
else
{
uint8 x_2186; 
x_2186 = !lean::is_exclusive(x_2182);
if (x_2186 == 0)
{
obj* x_2187; uint8 x_2188; 
x_2187 = lean::cnstr_get(x_2182, 0);
x_2188 = !lean::is_exclusive(x_2187);
if (x_2188 == 0)
{
obj* x_2189; obj* x_2190; obj* x_2191; obj* x_2192; obj* x_2193; obj* x_2194; obj* x_2195; obj* x_2196; obj* x_2197; obj* x_2198; obj* x_2199; uint8 x_2200; 
x_2189 = lean::cnstr_get(x_2187, 0);
lean::inc(x_2179);
x_2190 = l_Lean_Elaborator_mangleIdent(x_2179);
x_2191 = lean_expr_mk_const(x_2190, x_2189);
x_2192 = lean::box(0);
x_2193 = lean::cnstr_get(x_2179, 3);
lean::inc(x_2193);
lean::dec(x_2179);
x_2194 = lean::mk_nat_obj(0u);
x_2195 = l_List_enumFrom___main___rarg(x_2194, x_2193);
x_2196 = l_Lean_Elaborator_toPexpr___main___closed__46;
x_2197 = l_List_foldl___main___at_Lean_Elaborator_toPexpr___main___spec__16(x_2196, x_2195);
x_2198 = lean_expr_mk_mdata(x_2197, x_2191);
x_2199 = l_Lean_Elaborator_toPexpr___main___closed__2;
x_2200 = lean_name_dec_eq(x_15, x_2199);
lean::dec(x_15);
if (x_2200 == 0)
{
obj* x_2201; 
x_2201 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_2201) == 0)
{
lean::cnstr_set(x_2187, 0, x_2198);
return x_2182;
}
else
{
obj* x_2202; obj* x_2203; obj* x_2204; obj* x_2205; obj* x_2206; obj* x_2207; obj* x_2208; obj* x_2209; obj* x_2210; obj* x_2211; obj* x_2212; 
x_2202 = lean::cnstr_get(x_2201, 0);
lean::inc(x_2202);
lean::dec(x_2201);
x_2203 = lean::cnstr_get(x_3, 0);
x_2204 = lean::cnstr_get(x_2203, 2);
x_2205 = l_Lean_FileMap_toPosition(x_2204, x_2202);
x_2206 = lean::cnstr_get(x_2205, 1);
lean::inc(x_2206);
x_2207 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_2208 = l_Lean_KVMap_setNat(x_2192, x_2207, x_2206);
x_2209 = lean::cnstr_get(x_2205, 0);
lean::inc(x_2209);
lean::dec(x_2205);
x_2210 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_2211 = l_Lean_KVMap_setNat(x_2208, x_2210, x_2209);
x_2212 = lean_expr_mk_mdata(x_2211, x_2198);
lean::cnstr_set(x_2187, 0, x_2212);
return x_2182;
}
}
else
{
lean::dec(x_1);
lean::cnstr_set(x_2187, 0, x_2198);
return x_2182;
}
}
else
{
obj* x_2213; obj* x_2214; obj* x_2215; obj* x_2216; obj* x_2217; obj* x_2218; obj* x_2219; obj* x_2220; obj* x_2221; obj* x_2222; obj* x_2223; obj* x_2224; uint8 x_2225; 
x_2213 = lean::cnstr_get(x_2187, 0);
x_2214 = lean::cnstr_get(x_2187, 1);
lean::inc(x_2214);
lean::inc(x_2213);
lean::dec(x_2187);
lean::inc(x_2179);
x_2215 = l_Lean_Elaborator_mangleIdent(x_2179);
x_2216 = lean_expr_mk_const(x_2215, x_2213);
x_2217 = lean::box(0);
x_2218 = lean::cnstr_get(x_2179, 3);
lean::inc(x_2218);
lean::dec(x_2179);
x_2219 = lean::mk_nat_obj(0u);
x_2220 = l_List_enumFrom___main___rarg(x_2219, x_2218);
x_2221 = l_Lean_Elaborator_toPexpr___main___closed__46;
x_2222 = l_List_foldl___main___at_Lean_Elaborator_toPexpr___main___spec__16(x_2221, x_2220);
x_2223 = lean_expr_mk_mdata(x_2222, x_2216);
x_2224 = l_Lean_Elaborator_toPexpr___main___closed__2;
x_2225 = lean_name_dec_eq(x_15, x_2224);
lean::dec(x_15);
if (x_2225 == 0)
{
obj* x_2226; 
x_2226 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_2226) == 0)
{
obj* x_2227; 
x_2227 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2227, 0, x_2223);
lean::cnstr_set(x_2227, 1, x_2214);
lean::cnstr_set(x_2182, 0, x_2227);
return x_2182;
}
else
{
obj* x_2228; obj* x_2229; obj* x_2230; obj* x_2231; obj* x_2232; obj* x_2233; obj* x_2234; obj* x_2235; obj* x_2236; obj* x_2237; obj* x_2238; obj* x_2239; 
x_2228 = lean::cnstr_get(x_2226, 0);
lean::inc(x_2228);
lean::dec(x_2226);
x_2229 = lean::cnstr_get(x_3, 0);
x_2230 = lean::cnstr_get(x_2229, 2);
x_2231 = l_Lean_FileMap_toPosition(x_2230, x_2228);
x_2232 = lean::cnstr_get(x_2231, 1);
lean::inc(x_2232);
x_2233 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_2234 = l_Lean_KVMap_setNat(x_2217, x_2233, x_2232);
x_2235 = lean::cnstr_get(x_2231, 0);
lean::inc(x_2235);
lean::dec(x_2231);
x_2236 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_2237 = l_Lean_KVMap_setNat(x_2234, x_2236, x_2235);
x_2238 = lean_expr_mk_mdata(x_2237, x_2223);
x_2239 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2239, 0, x_2238);
lean::cnstr_set(x_2239, 1, x_2214);
lean::cnstr_set(x_2182, 0, x_2239);
return x_2182;
}
}
else
{
obj* x_2240; 
lean::dec(x_1);
x_2240 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2240, 0, x_2223);
lean::cnstr_set(x_2240, 1, x_2214);
lean::cnstr_set(x_2182, 0, x_2240);
return x_2182;
}
}
}
else
{
obj* x_2241; obj* x_2242; obj* x_2243; obj* x_2244; obj* x_2245; obj* x_2246; obj* x_2247; obj* x_2248; obj* x_2249; obj* x_2250; obj* x_2251; obj* x_2252; obj* x_2253; obj* x_2254; uint8 x_2255; 
x_2241 = lean::cnstr_get(x_2182, 0);
lean::inc(x_2241);
lean::dec(x_2182);
x_2242 = lean::cnstr_get(x_2241, 0);
lean::inc(x_2242);
x_2243 = lean::cnstr_get(x_2241, 1);
lean::inc(x_2243);
if (lean::is_exclusive(x_2241)) {
 lean::cnstr_release(x_2241, 0);
 lean::cnstr_release(x_2241, 1);
 x_2244 = x_2241;
} else {
 lean::dec_ref(x_2241);
 x_2244 = lean::box(0);
}
lean::inc(x_2179);
x_2245 = l_Lean_Elaborator_mangleIdent(x_2179);
x_2246 = lean_expr_mk_const(x_2245, x_2242);
x_2247 = lean::box(0);
x_2248 = lean::cnstr_get(x_2179, 3);
lean::inc(x_2248);
lean::dec(x_2179);
x_2249 = lean::mk_nat_obj(0u);
x_2250 = l_List_enumFrom___main___rarg(x_2249, x_2248);
x_2251 = l_Lean_Elaborator_toPexpr___main___closed__46;
x_2252 = l_List_foldl___main___at_Lean_Elaborator_toPexpr___main___spec__16(x_2251, x_2250);
x_2253 = lean_expr_mk_mdata(x_2252, x_2246);
x_2254 = l_Lean_Elaborator_toPexpr___main___closed__2;
x_2255 = lean_name_dec_eq(x_15, x_2254);
lean::dec(x_15);
if (x_2255 == 0)
{
obj* x_2256; 
x_2256 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_2256) == 0)
{
obj* x_2257; obj* x_2258; 
if (lean::is_scalar(x_2244)) {
 x_2257 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_2257 = x_2244;
}
lean::cnstr_set(x_2257, 0, x_2253);
lean::cnstr_set(x_2257, 1, x_2243);
x_2258 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2258, 0, x_2257);
return x_2258;
}
else
{
obj* x_2259; obj* x_2260; obj* x_2261; obj* x_2262; obj* x_2263; obj* x_2264; obj* x_2265; obj* x_2266; obj* x_2267; obj* x_2268; obj* x_2269; obj* x_2270; obj* x_2271; 
x_2259 = lean::cnstr_get(x_2256, 0);
lean::inc(x_2259);
lean::dec(x_2256);
x_2260 = lean::cnstr_get(x_3, 0);
x_2261 = lean::cnstr_get(x_2260, 2);
x_2262 = l_Lean_FileMap_toPosition(x_2261, x_2259);
x_2263 = lean::cnstr_get(x_2262, 1);
lean::inc(x_2263);
x_2264 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_2265 = l_Lean_KVMap_setNat(x_2247, x_2264, x_2263);
x_2266 = lean::cnstr_get(x_2262, 0);
lean::inc(x_2266);
lean::dec(x_2262);
x_2267 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_2268 = l_Lean_KVMap_setNat(x_2265, x_2267, x_2266);
x_2269 = lean_expr_mk_mdata(x_2268, x_2253);
if (lean::is_scalar(x_2244)) {
 x_2270 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_2270 = x_2244;
}
lean::cnstr_set(x_2270, 0, x_2269);
lean::cnstr_set(x_2270, 1, x_2243);
x_2271 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2271, 0, x_2270);
return x_2271;
}
}
else
{
obj* x_2272; obj* x_2273; 
lean::dec(x_1);
if (lean::is_scalar(x_2244)) {
 x_2272 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_2272 = x_2244;
}
lean::cnstr_set(x_2272, 0, x_2253);
lean::cnstr_set(x_2272, 1, x_2243);
x_2273 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2273, 0, x_2272);
return x_2273;
}
}
}
}
}
block_85:
{
if (lean::obj_tag(x_17) == 0)
{
uint8 x_18; 
lean::dec(x_15);
lean::dec(x_1);
x_18 = !lean::is_exclusive(x_17);
if (x_18 == 0)
{
return x_17;
}
else
{
obj* x_19; obj* x_20; 
x_19 = lean::cnstr_get(x_17, 0);
lean::inc(x_19);
lean::dec(x_17);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
else
{
uint8 x_21; 
x_21 = !lean::is_exclusive(x_17);
if (x_21 == 0)
{
obj* x_22; uint8 x_23; 
x_22 = lean::cnstr_get(x_17, 0);
x_23 = !lean::is_exclusive(x_22);
if (x_23 == 0)
{
obj* x_24; obj* x_25; uint8 x_26; 
x_24 = lean::cnstr_get(x_22, 0);
x_25 = l_Lean_Elaborator_toPexpr___main___closed__2;
x_26 = lean_name_dec_eq(x_15, x_25);
lean::dec(x_15);
if (x_26 == 0)
{
obj* x_27; 
x_27 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_27) == 0)
{
return x_17;
}
else
{
obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_28 = lean::cnstr_get(x_27, 0);
lean::inc(x_28);
lean::dec(x_27);
x_29 = lean::cnstr_get(x_3, 0);
x_30 = lean::cnstr_get(x_29, 2);
x_31 = l_Lean_FileMap_toPosition(x_30, x_28);
x_32 = lean::cnstr_get(x_31, 1);
lean::inc(x_32);
x_33 = lean::box(0);
x_34 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_35 = l_Lean_KVMap_setNat(x_33, x_34, x_32);
x_36 = lean::cnstr_get(x_31, 0);
lean::inc(x_36);
lean::dec(x_31);
x_37 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_38 = l_Lean_KVMap_setNat(x_35, x_37, x_36);
x_39 = lean_expr_mk_mdata(x_38, x_24);
lean::cnstr_set(x_22, 0, x_39);
return x_17;
}
}
else
{
lean::dec(x_1);
return x_17;
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; uint8 x_43; 
x_40 = lean::cnstr_get(x_22, 0);
x_41 = lean::cnstr_get(x_22, 1);
lean::inc(x_41);
lean::inc(x_40);
lean::dec(x_22);
x_42 = l_Lean_Elaborator_toPexpr___main___closed__2;
x_43 = lean_name_dec_eq(x_15, x_42);
lean::dec(x_15);
if (x_43 == 0)
{
obj* x_44; 
x_44 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_44) == 0)
{
obj* x_45; 
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_40);
lean::cnstr_set(x_45, 1, x_41);
lean::cnstr_set(x_17, 0, x_45);
return x_17;
}
else
{
obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; 
x_46 = lean::cnstr_get(x_44, 0);
lean::inc(x_46);
lean::dec(x_44);
x_47 = lean::cnstr_get(x_3, 0);
x_48 = lean::cnstr_get(x_47, 2);
x_49 = l_Lean_FileMap_toPosition(x_48, x_46);
x_50 = lean::cnstr_get(x_49, 1);
lean::inc(x_50);
x_51 = lean::box(0);
x_52 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_53 = l_Lean_KVMap_setNat(x_51, x_52, x_50);
x_54 = lean::cnstr_get(x_49, 0);
lean::inc(x_54);
lean::dec(x_49);
x_55 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_56 = l_Lean_KVMap_setNat(x_53, x_55, x_54);
x_57 = lean_expr_mk_mdata(x_56, x_40);
x_58 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_58, 0, x_57);
lean::cnstr_set(x_58, 1, x_41);
lean::cnstr_set(x_17, 0, x_58);
return x_17;
}
}
else
{
obj* x_59; 
lean::dec(x_1);
x_59 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_59, 0, x_40);
lean::cnstr_set(x_59, 1, x_41);
lean::cnstr_set(x_17, 0, x_59);
return x_17;
}
}
}
else
{
obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; uint8 x_65; 
x_60 = lean::cnstr_get(x_17, 0);
lean::inc(x_60);
lean::dec(x_17);
x_61 = lean::cnstr_get(x_60, 0);
lean::inc(x_61);
x_62 = lean::cnstr_get(x_60, 1);
lean::inc(x_62);
if (lean::is_exclusive(x_60)) {
 lean::cnstr_release(x_60, 0);
 lean::cnstr_release(x_60, 1);
 x_63 = x_60;
} else {
 lean::dec_ref(x_60);
 x_63 = lean::box(0);
}
x_64 = l_Lean_Elaborator_toPexpr___main___closed__2;
x_65 = lean_name_dec_eq(x_15, x_64);
lean::dec(x_15);
if (x_65 == 0)
{
obj* x_66; 
x_66 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_66) == 0)
{
obj* x_67; obj* x_68; 
if (lean::is_scalar(x_63)) {
 x_67 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_67 = x_63;
}
lean::cnstr_set(x_67, 0, x_61);
lean::cnstr_set(x_67, 1, x_62);
x_68 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_68, 0, x_67);
return x_68;
}
else
{
obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; 
x_69 = lean::cnstr_get(x_66, 0);
lean::inc(x_69);
lean::dec(x_66);
x_70 = lean::cnstr_get(x_3, 0);
x_71 = lean::cnstr_get(x_70, 2);
x_72 = l_Lean_FileMap_toPosition(x_71, x_69);
x_73 = lean::cnstr_get(x_72, 1);
lean::inc(x_73);
x_74 = lean::box(0);
x_75 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_76 = l_Lean_KVMap_setNat(x_74, x_75, x_73);
x_77 = lean::cnstr_get(x_72, 0);
lean::inc(x_77);
lean::dec(x_72);
x_78 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_79 = l_Lean_KVMap_setNat(x_76, x_78, x_77);
x_80 = lean_expr_mk_mdata(x_79, x_61);
if (lean::is_scalar(x_63)) {
 x_81 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_81 = x_63;
}
lean::cnstr_set(x_81, 0, x_80);
lean::cnstr_set(x_81, 1, x_62);
x_82 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_82, 0, x_81);
return x_82;
}
}
else
{
obj* x_83; obj* x_84; 
lean::dec(x_1);
if (lean::is_scalar(x_63)) {
 x_83 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_83 = x_63;
}
lean::cnstr_set(x_83, 0, x_61);
lean::cnstr_set(x_83, 1, x_62);
x_84 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_84, 0, x_83);
return x_84;
}
}
}
}
block_130:
{
uint8 x_87; 
x_87 = !lean::is_exclusive(x_86);
if (x_87 == 0)
{
obj* x_88; obj* x_89; uint8 x_90; 
x_88 = lean::cnstr_get(x_86, 0);
x_89 = l_Lean_Elaborator_toPexpr___main___closed__2;
x_90 = lean_name_dec_eq(x_15, x_89);
lean::dec(x_15);
if (x_90 == 0)
{
obj* x_91; 
x_91 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_91) == 0)
{
obj* x_92; 
x_92 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_92, 0, x_86);
return x_92;
}
else
{
obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_105; 
x_93 = lean::cnstr_get(x_91, 0);
lean::inc(x_93);
lean::dec(x_91);
x_94 = lean::cnstr_get(x_3, 0);
x_95 = lean::cnstr_get(x_94, 2);
x_96 = l_Lean_FileMap_toPosition(x_95, x_93);
x_97 = lean::cnstr_get(x_96, 1);
lean::inc(x_97);
x_98 = lean::box(0);
x_99 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_100 = l_Lean_KVMap_setNat(x_98, x_99, x_97);
x_101 = lean::cnstr_get(x_96, 0);
lean::inc(x_101);
lean::dec(x_96);
x_102 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_103 = l_Lean_KVMap_setNat(x_100, x_102, x_101);
x_104 = lean_expr_mk_mdata(x_103, x_88);
lean::cnstr_set(x_86, 0, x_104);
x_105 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_105, 0, x_86);
return x_105;
}
}
else
{
obj* x_106; 
lean::dec(x_1);
x_106 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_106, 0, x_86);
return x_106;
}
}
else
{
obj* x_107; obj* x_108; obj* x_109; uint8 x_110; 
x_107 = lean::cnstr_get(x_86, 0);
x_108 = lean::cnstr_get(x_86, 1);
lean::inc(x_108);
lean::inc(x_107);
lean::dec(x_86);
x_109 = l_Lean_Elaborator_toPexpr___main___closed__2;
x_110 = lean_name_dec_eq(x_15, x_109);
lean::dec(x_15);
if (x_110 == 0)
{
obj* x_111; 
x_111 = l_Lean_Parser_Syntax_getPos(x_1);
lean::dec(x_1);
if (lean::obj_tag(x_111) == 0)
{
obj* x_112; obj* x_113; 
x_112 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_112, 0, x_107);
lean::cnstr_set(x_112, 1, x_108);
x_113 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_113, 0, x_112);
return x_113;
}
else
{
obj* x_114; obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; 
x_114 = lean::cnstr_get(x_111, 0);
lean::inc(x_114);
lean::dec(x_111);
x_115 = lean::cnstr_get(x_3, 0);
x_116 = lean::cnstr_get(x_115, 2);
x_117 = l_Lean_FileMap_toPosition(x_116, x_114);
x_118 = lean::cnstr_get(x_117, 1);
lean::inc(x_118);
x_119 = lean::box(0);
x_120 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_121 = l_Lean_KVMap_setNat(x_119, x_120, x_118);
x_122 = lean::cnstr_get(x_117, 0);
lean::inc(x_122);
lean::dec(x_117);
x_123 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_124 = l_Lean_KVMap_setNat(x_121, x_123, x_122);
x_125 = lean_expr_mk_mdata(x_124, x_107);
x_126 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_126, 0, x_125);
lean::cnstr_set(x_126, 1, x_108);
x_127 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_127, 0, x_126);
return x_127;
}
}
else
{
obj* x_128; obj* x_129; 
lean::dec(x_1);
x_128 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_128, 0, x_107);
lean::cnstr_set(x_128, 1, x_108);
x_129 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_129, 0, x_128);
return x_129;
}
}
}
}
else
{
obj* x_2274; 
x_2274 = lean::box(0);
x_5 = x_2274;
goto block_13;
}
block_13:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
lean::dec(x_5);
lean::inc(x_1);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_1);
x_7 = l_Lean_Parser_Syntax_format___main(x_1);
x_8 = l_Lean_Options_empty;
x_9 = l_Lean_Format_pretty(x_7, x_8);
x_10 = l_Lean_Elaborator_toPexpr___main___closed__1;
x_11 = lean::string_append(x_10, x_9);
lean::dec(x_9);
x_12 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_6, x_11, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_6);
return x_12;
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__1___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__1(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_4);
lean::dec(x_3);
return x_6;
}
}
obj* l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7___boxed(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = l_List_foldr___main___at_Lean_Elaborator_toPexpr___main___spec__7(x_1, x_2);
lean::dec(x_1);
return x_3;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__8___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__8(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_4);
lean::dec(x_3);
return x_6;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__9___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__9(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_4);
lean::dec(x_3);
return x_6;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__10___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__10(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_4);
lean::dec(x_3);
return x_6;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__11___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__11(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_4);
lean::dec(x_3);
return x_6;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__12___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__12(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_4);
lean::dec(x_3);
return x_6;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__13___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__13(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_4);
lean::dec(x_3);
return x_6;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__14___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__14(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_4);
lean::dec(x_3);
return x_6;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__15___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__15(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__17___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__17(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_toPexpr___main___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_toPexpr___main(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_toPexpr(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_toPexpr___main(x_1, x_2, x_3, x_4);
return x_5;
}
}
obj* l_Lean_Elaborator_toPexpr___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_toPexpr(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_getNamespace(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = l_Lean_Elaborator_currentScope(x_1, x_2, x_3);
if (lean::obj_tag(x_4) == 0)
{
uint8 x_5; 
x_5 = !lean::is_exclusive(x_4);
if (x_5 == 0)
{
return x_4;
}
else
{
obj* x_6; obj* x_7; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_7 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
}
else
{
uint8 x_8; 
x_8 = !lean::is_exclusive(x_4);
if (x_8 == 0)
{
obj* x_9; obj* x_10; obj* x_11; 
x_9 = lean::cnstr_get(x_4, 0);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
x_11 = lean::cnstr_get(x_10, 6);
lean::inc(x_11);
lean::dec(x_10);
if (lean::obj_tag(x_11) == 0)
{
uint8 x_12; 
x_12 = !lean::is_exclusive(x_9);
if (x_12 == 0)
{
obj* x_13; obj* x_14; 
x_13 = lean::cnstr_get(x_9, 0);
lean::dec(x_13);
x_14 = lean::box(0);
lean::cnstr_set(x_9, 0, x_14);
return x_4;
}
else
{
obj* x_15; obj* x_16; obj* x_17; 
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_16 = lean::box(0);
x_17 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_15);
lean::cnstr_set(x_4, 0, x_17);
return x_4;
}
}
else
{
uint8 x_18; 
x_18 = !lean::is_exclusive(x_9);
if (x_18 == 0)
{
obj* x_19; obj* x_20; 
x_19 = lean::cnstr_get(x_9, 0);
lean::dec(x_19);
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
lean::dec(x_11);
lean::cnstr_set(x_9, 0, x_20);
return x_4;
}
else
{
obj* x_21; obj* x_22; obj* x_23; 
x_21 = lean::cnstr_get(x_9, 1);
lean::inc(x_21);
lean::dec(x_9);
x_22 = lean::cnstr_get(x_11, 0);
lean::inc(x_22);
lean::dec(x_11);
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_21);
lean::cnstr_set(x_4, 0, x_23);
return x_4;
}
}
}
else
{
obj* x_24; obj* x_25; obj* x_26; 
x_24 = lean::cnstr_get(x_4, 0);
lean::inc(x_24);
lean::dec(x_4);
x_25 = lean::cnstr_get(x_24, 0);
lean::inc(x_25);
x_26 = lean::cnstr_get(x_25, 6);
lean::inc(x_26);
lean::dec(x_25);
if (lean::obj_tag(x_26) == 0)
{
obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_27 = lean::cnstr_get(x_24, 1);
lean::inc(x_27);
if (lean::is_exclusive(x_24)) {
 lean::cnstr_release(x_24, 0);
 lean::cnstr_release(x_24, 1);
 x_28 = x_24;
} else {
 lean::dec_ref(x_24);
 x_28 = lean::box(0);
}
x_29 = lean::box(0);
if (lean::is_scalar(x_28)) {
 x_30 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_30 = x_28;
}
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_27);
x_31 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_31, 0, x_30);
return x_31;
}
else
{
obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; 
x_32 = lean::cnstr_get(x_24, 1);
lean::inc(x_32);
if (lean::is_exclusive(x_24)) {
 lean::cnstr_release(x_24, 0);
 lean::cnstr_release(x_24, 1);
 x_33 = x_24;
} else {
 lean::dec_ref(x_24);
 x_33 = lean::box(0);
}
x_34 = lean::cnstr_get(x_26, 0);
lean::inc(x_34);
lean::dec(x_26);
if (lean::is_scalar(x_33)) {
 x_35 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_35 = x_33;
}
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_32);
x_36 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_36, 0, x_35);
return x_36;
}
}
}
}
}
obj* l_Lean_Elaborator_getNamespace___boxed(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = l_Lean_Elaborator_getNamespace(x_1, x_2, x_3);
lean::dec(x_2);
lean::dec(x_1);
return x_4;
}
}
obj* l_RBNode_revFold___main___at_Lean_Elaborator_oldElabCommand___spec__2(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
return x_1;
}
else
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_3 = lean::cnstr_get(x_2, 0);
x_4 = lean::cnstr_get(x_2, 1);
x_5 = lean::cnstr_get(x_2, 3);
x_6 = l_RBNode_revFold___main___at_Lean_Elaborator_oldElabCommand___spec__2(x_1, x_5);
lean::inc(x_4);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_4);
lean::cnstr_set(x_7, 1, x_6);
x_1 = x_7;
x_2 = x_3;
goto _start;
}
}
}
obj* l_RBTree_toList___at_Lean_Elaborator_oldElabCommand___spec__1(obj* x_1) {
_start:
{
obj* x_2; obj* x_3; 
x_2 = lean::box(0);
x_3 = l_RBNode_revFold___main___at_Lean_Elaborator_oldElabCommand___spec__2(x_2, x_1);
return x_3;
}
}
obj* l_RBTree_ofList___main___at_Lean_Elaborator_oldElabCommand___spec__3(obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
x_4 = lean::cnstr_get(x_1, 1);
lean::inc(x_4);
lean::dec(x_1);
x_5 = l_RBTree_ofList___main___at_Lean_Elaborator_oldElabCommand___spec__3(x_4);
x_6 = lean::box(0);
x_7 = l_RBNode_insert___at_Lean_NameSet_insert___spec__1(x_5, x_3, x_6);
return x_7;
}
}
}
obj* l_Lean_Elaborator_oldElabCommand___lambda__1(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; 
x_3 = !lean::is_exclusive(x_2);
if (x_3 == 0)
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_4 = lean::cnstr_get(x_2, 8);
lean::dec(x_4);
x_5 = lean::cnstr_get(x_2, 5);
lean::dec(x_5);
x_6 = lean::cnstr_get(x_2, 4);
lean::dec(x_6);
x_7 = lean::cnstr_get(x_2, 3);
lean::dec(x_7);
x_8 = lean::cnstr_get(x_1, 2);
lean::inc(x_8);
x_9 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
x_10 = l_Lean_Elaborator_OrderedRBMap_ofList___rarg(x_9, x_8);
x_11 = lean::cnstr_get(x_1, 3);
lean::inc(x_11);
x_12 = l_Lean_Elaborator_OrderedRBMap_ofList___rarg(x_9, x_11);
x_13 = lean::cnstr_get(x_1, 4);
lean::inc(x_13);
x_14 = l_RBTree_ofList___main___at_Lean_Elaborator_oldElabCommand___spec__3(x_13);
x_15 = lean::cnstr_get(x_1, 5);
lean::inc(x_15);
lean::dec(x_1);
lean::cnstr_set(x_2, 8, x_15);
lean::cnstr_set(x_2, 5, x_14);
lean::cnstr_set(x_2, 4, x_12);
lean::cnstr_set(x_2, 3, x_10);
return x_2;
}
else
{
obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_2, 0);
x_17 = lean::cnstr_get(x_2, 1);
x_18 = lean::cnstr_get(x_2, 2);
x_19 = lean::cnstr_get(x_2, 6);
x_20 = lean::cnstr_get(x_2, 7);
lean::inc(x_20);
lean::inc(x_19);
lean::inc(x_18);
lean::inc(x_17);
lean::inc(x_16);
lean::dec(x_2);
x_21 = lean::cnstr_get(x_1, 2);
lean::inc(x_21);
x_22 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
x_23 = l_Lean_Elaborator_OrderedRBMap_ofList___rarg(x_22, x_21);
x_24 = lean::cnstr_get(x_1, 3);
lean::inc(x_24);
x_25 = l_Lean_Elaborator_OrderedRBMap_ofList___rarg(x_22, x_24);
x_26 = lean::cnstr_get(x_1, 4);
lean::inc(x_26);
x_27 = l_RBTree_ofList___main___at_Lean_Elaborator_oldElabCommand___spec__3(x_26);
x_28 = lean::cnstr_get(x_1, 5);
lean::inc(x_28);
lean::dec(x_1);
x_29 = lean::alloc_cnstr(0, 9, 0);
lean::cnstr_set(x_29, 0, x_16);
lean::cnstr_set(x_29, 1, x_17);
lean::cnstr_set(x_29, 2, x_18);
lean::cnstr_set(x_29, 3, x_23);
lean::cnstr_set(x_29, 4, x_25);
lean::cnstr_set(x_29, 5, x_27);
lean::cnstr_set(x_29, 6, x_19);
lean::cnstr_set(x_29, 7, x_20);
lean::cnstr_set(x_29, 8, x_28);
return x_29;
}
}
}
obj* l_Lean_Elaborator_oldElabCommand(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_219; 
x_6 = lean::cnstr_get(x_4, 0);
x_7 = lean::cnstr_get(x_6, 2);
x_8 = l_Lean_Parser_Syntax_getPos(x_1);
lean::inc(x_5);
x_9 = l_Lean_Elaborator_currentScope(x_3, x_4, x_5);
if (lean::obj_tag(x_8) == 0)
{
obj* x_231; 
x_231 = lean::mk_nat_obj(0u);
x_219 = x_231;
goto block_230;
}
else
{
obj* x_232; 
x_232 = lean::cnstr_get(x_8, 0);
lean::inc(x_232);
lean::dec(x_8);
x_219 = x_232;
goto block_230;
}
block_218:
{
if (lean::obj_tag(x_9) == 0)
{
uint8 x_11; 
lean::dec(x_10);
lean::dec(x_5);
x_11 = !lean::is_exclusive(x_9);
if (x_11 == 0)
{
return x_9;
}
else
{
obj* x_12; obj* x_13; 
x_12 = lean::cnstr_get(x_9, 0);
lean::inc(x_12);
lean::dec(x_9);
x_13 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
}
else
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_14 = lean::cnstr_get(x_9, 0);
lean::inc(x_14);
lean::dec(x_9);
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
x_16 = lean::cnstr_get(x_14, 1);
lean::inc(x_16);
lean::dec(x_14);
x_17 = l_Lean_Elaborator_getNamespace(x_3, x_4, x_16);
if (lean::obj_tag(x_17) == 0)
{
uint8 x_18; 
lean::dec(x_15);
lean::dec(x_10);
lean::dec(x_5);
x_18 = !lean::is_exclusive(x_17);
if (x_18 == 0)
{
return x_17;
}
else
{
obj* x_19; obj* x_20; 
x_19 = lean::cnstr_get(x_17, 0);
lean::inc(x_19);
lean::dec(x_17);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
else
{
uint8 x_21; 
x_21 = !lean::is_exclusive(x_17);
if (x_21 == 0)
{
obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; 
x_22 = lean::cnstr_get(x_17, 0);
x_23 = lean::cnstr_get(x_22, 0);
lean::inc(x_23);
x_24 = lean::cnstr_get(x_22, 1);
lean::inc(x_24);
lean::dec(x_22);
x_25 = lean::cnstr_get(x_6, 0);
x_26 = lean::cnstr_get(x_5, 8);
lean::inc(x_26);
x_27 = lean::cnstr_get(x_5, 9);
lean::inc(x_27);
x_28 = lean::cnstr_get(x_15, 3);
lean::inc(x_28);
x_29 = lean::cnstr_get(x_28, 0);
lean::inc(x_29);
lean::dec(x_28);
x_30 = l_List_reverse___rarg(x_29);
x_31 = lean::cnstr_get(x_15, 4);
lean::inc(x_31);
x_32 = lean::cnstr_get(x_31, 0);
lean::inc(x_32);
lean::dec(x_31);
x_33 = l_List_reverse___rarg(x_32);
x_34 = lean::cnstr_get(x_15, 5);
lean::inc(x_34);
x_35 = l_RBTree_toList___at_Lean_Elaborator_oldElabCommand___spec__1(x_34);
lean::dec(x_34);
x_36 = lean::cnstr_get(x_15, 8);
lean::inc(x_36);
lean::dec(x_15);
x_37 = lean::cnstr_get(x_5, 10);
lean::inc(x_37);
lean::dec(x_5);
x_38 = lean::alloc_cnstr(0, 8, 0);
lean::cnstr_set(x_38, 0, x_26);
lean::cnstr_set(x_38, 1, x_27);
lean::cnstr_set(x_38, 2, x_30);
lean::cnstr_set(x_38, 3, x_33);
lean::cnstr_set(x_38, 4, x_35);
lean::cnstr_set(x_38, 5, x_36);
lean::cnstr_set(x_38, 6, x_37);
lean::cnstr_set(x_38, 7, x_23);
x_39 = lean_elaborator_elaborate_command(x_25, x_10, x_38);
lean::dec(x_38);
x_40 = lean::cnstr_get(x_39, 0);
lean::inc(x_40);
if (lean::obj_tag(x_40) == 0)
{
uint8 x_41; 
x_41 = !lean::is_exclusive(x_39);
if (x_41 == 0)
{
obj* x_42; obj* x_43; uint8 x_44; 
x_42 = lean::cnstr_get(x_39, 1);
x_43 = lean::cnstr_get(x_39, 0);
lean::dec(x_43);
x_44 = !lean::is_exclusive(x_24);
if (x_44 == 0)
{
obj* x_45; obj* x_46; obj* x_47; 
x_45 = lean::cnstr_get(x_24, 5);
x_46 = l_List_append___rarg(x_42, x_45);
lean::cnstr_set(x_24, 5, x_46);
x_47 = lean::box(0);
lean::cnstr_set(x_39, 1, x_24);
lean::cnstr_set(x_39, 0, x_47);
lean::cnstr_set(x_17, 0, x_39);
return x_17;
}
else
{
obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; 
x_48 = lean::cnstr_get(x_24, 0);
x_49 = lean::cnstr_get(x_24, 1);
x_50 = lean::cnstr_get(x_24, 2);
x_51 = lean::cnstr_get(x_24, 3);
x_52 = lean::cnstr_get(x_24, 4);
x_53 = lean::cnstr_get(x_24, 5);
x_54 = lean::cnstr_get(x_24, 6);
x_55 = lean::cnstr_get(x_24, 7);
x_56 = lean::cnstr_get(x_24, 8);
x_57 = lean::cnstr_get(x_24, 9);
x_58 = lean::cnstr_get(x_24, 10);
lean::inc(x_58);
lean::inc(x_57);
lean::inc(x_56);
lean::inc(x_55);
lean::inc(x_54);
lean::inc(x_53);
lean::inc(x_52);
lean::inc(x_51);
lean::inc(x_50);
lean::inc(x_49);
lean::inc(x_48);
lean::dec(x_24);
x_59 = l_List_append___rarg(x_42, x_53);
x_60 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_60, 0, x_48);
lean::cnstr_set(x_60, 1, x_49);
lean::cnstr_set(x_60, 2, x_50);
lean::cnstr_set(x_60, 3, x_51);
lean::cnstr_set(x_60, 4, x_52);
lean::cnstr_set(x_60, 5, x_59);
lean::cnstr_set(x_60, 6, x_54);
lean::cnstr_set(x_60, 7, x_55);
lean::cnstr_set(x_60, 8, x_56);
lean::cnstr_set(x_60, 9, x_57);
lean::cnstr_set(x_60, 10, x_58);
x_61 = lean::box(0);
lean::cnstr_set(x_39, 1, x_60);
lean::cnstr_set(x_39, 0, x_61);
lean::cnstr_set(x_17, 0, x_39);
return x_17;
}
}
else
{
obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; 
x_62 = lean::cnstr_get(x_39, 1);
lean::inc(x_62);
lean::dec(x_39);
x_63 = lean::cnstr_get(x_24, 0);
lean::inc(x_63);
x_64 = lean::cnstr_get(x_24, 1);
lean::inc(x_64);
x_65 = lean::cnstr_get(x_24, 2);
lean::inc(x_65);
x_66 = lean::cnstr_get(x_24, 3);
lean::inc(x_66);
x_67 = lean::cnstr_get(x_24, 4);
lean::inc(x_67);
x_68 = lean::cnstr_get(x_24, 5);
lean::inc(x_68);
x_69 = lean::cnstr_get(x_24, 6);
lean::inc(x_69);
x_70 = lean::cnstr_get(x_24, 7);
lean::inc(x_70);
x_71 = lean::cnstr_get(x_24, 8);
lean::inc(x_71);
x_72 = lean::cnstr_get(x_24, 9);
lean::inc(x_72);
x_73 = lean::cnstr_get(x_24, 10);
lean::inc(x_73);
if (lean::is_exclusive(x_24)) {
 lean::cnstr_release(x_24, 0);
 lean::cnstr_release(x_24, 1);
 lean::cnstr_release(x_24, 2);
 lean::cnstr_release(x_24, 3);
 lean::cnstr_release(x_24, 4);
 lean::cnstr_release(x_24, 5);
 lean::cnstr_release(x_24, 6);
 lean::cnstr_release(x_24, 7);
 lean::cnstr_release(x_24, 8);
 lean::cnstr_release(x_24, 9);
 lean::cnstr_release(x_24, 10);
 x_74 = x_24;
} else {
 lean::dec_ref(x_24);
 x_74 = lean::box(0);
}
x_75 = l_List_append___rarg(x_62, x_68);
if (lean::is_scalar(x_74)) {
 x_76 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_76 = x_74;
}
lean::cnstr_set(x_76, 0, x_63);
lean::cnstr_set(x_76, 1, x_64);
lean::cnstr_set(x_76, 2, x_65);
lean::cnstr_set(x_76, 3, x_66);
lean::cnstr_set(x_76, 4, x_67);
lean::cnstr_set(x_76, 5, x_75);
lean::cnstr_set(x_76, 6, x_69);
lean::cnstr_set(x_76, 7, x_70);
lean::cnstr_set(x_76, 8, x_71);
lean::cnstr_set(x_76, 9, x_72);
lean::cnstr_set(x_76, 10, x_73);
x_77 = lean::box(0);
x_78 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_78, 0, x_77);
lean::cnstr_set(x_78, 1, x_76);
lean::cnstr_set(x_17, 0, x_78);
return x_17;
}
}
else
{
obj* x_79; obj* x_80; obj* x_81; obj* x_82; 
lean::free_heap_obj(x_17);
x_79 = lean::cnstr_get(x_39, 1);
lean::inc(x_79);
lean::dec(x_39);
x_80 = lean::cnstr_get(x_40, 0);
lean::inc(x_80);
lean::dec(x_40);
lean::inc(x_80);
x_81 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_oldElabCommand___lambda__1), 2, 1);
lean::closure_set(x_81, 0, x_80);
x_82 = l_Lean_Elaborator_modifyCurrentScope(x_81, x_3, x_4, x_24);
if (lean::obj_tag(x_82) == 0)
{
uint8 x_83; 
lean::dec(x_80);
lean::dec(x_79);
x_83 = !lean::is_exclusive(x_82);
if (x_83 == 0)
{
return x_82;
}
else
{
obj* x_84; obj* x_85; 
x_84 = lean::cnstr_get(x_82, 0);
lean::inc(x_84);
lean::dec(x_82);
x_85 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_85, 0, x_84);
return x_85;
}
}
else
{
uint8 x_86; 
x_86 = !lean::is_exclusive(x_82);
if (x_86 == 0)
{
obj* x_87; uint8 x_88; 
x_87 = lean::cnstr_get(x_82, 0);
x_88 = !lean::is_exclusive(x_87);
if (x_88 == 0)
{
obj* x_89; obj* x_90; uint8 x_91; 
x_89 = lean::cnstr_get(x_87, 1);
x_90 = lean::cnstr_get(x_87, 0);
lean::dec(x_90);
x_91 = !lean::is_exclusive(x_89);
if (x_91 == 0)
{
obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; 
x_92 = lean::cnstr_get(x_89, 5);
x_93 = lean::cnstr_get(x_89, 10);
lean::dec(x_93);
x_94 = lean::cnstr_get(x_89, 9);
lean::dec(x_94);
x_95 = lean::cnstr_get(x_89, 8);
lean::dec(x_95);
x_96 = lean::cnstr_get(x_80, 0);
lean::inc(x_96);
x_97 = lean::cnstr_get(x_80, 1);
lean::inc(x_97);
x_98 = lean::cnstr_get(x_80, 6);
lean::inc(x_98);
lean::dec(x_80);
x_99 = l_List_append___rarg(x_79, x_92);
lean::cnstr_set(x_89, 10, x_98);
lean::cnstr_set(x_89, 9, x_97);
lean::cnstr_set(x_89, 8, x_96);
lean::cnstr_set(x_89, 5, x_99);
x_100 = lean::box(0);
lean::cnstr_set(x_87, 0, x_100);
return x_82;
}
else
{
obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; 
x_101 = lean::cnstr_get(x_89, 0);
x_102 = lean::cnstr_get(x_89, 1);
x_103 = lean::cnstr_get(x_89, 2);
x_104 = lean::cnstr_get(x_89, 3);
x_105 = lean::cnstr_get(x_89, 4);
x_106 = lean::cnstr_get(x_89, 5);
x_107 = lean::cnstr_get(x_89, 6);
x_108 = lean::cnstr_get(x_89, 7);
lean::inc(x_108);
lean::inc(x_107);
lean::inc(x_106);
lean::inc(x_105);
lean::inc(x_104);
lean::inc(x_103);
lean::inc(x_102);
lean::inc(x_101);
lean::dec(x_89);
x_109 = lean::cnstr_get(x_80, 0);
lean::inc(x_109);
x_110 = lean::cnstr_get(x_80, 1);
lean::inc(x_110);
x_111 = lean::cnstr_get(x_80, 6);
lean::inc(x_111);
lean::dec(x_80);
x_112 = l_List_append___rarg(x_79, x_106);
x_113 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_113, 0, x_101);
lean::cnstr_set(x_113, 1, x_102);
lean::cnstr_set(x_113, 2, x_103);
lean::cnstr_set(x_113, 3, x_104);
lean::cnstr_set(x_113, 4, x_105);
lean::cnstr_set(x_113, 5, x_112);
lean::cnstr_set(x_113, 6, x_107);
lean::cnstr_set(x_113, 7, x_108);
lean::cnstr_set(x_113, 8, x_109);
lean::cnstr_set(x_113, 9, x_110);
lean::cnstr_set(x_113, 10, x_111);
x_114 = lean::box(0);
lean::cnstr_set(x_87, 1, x_113);
lean::cnstr_set(x_87, 0, x_114);
return x_82;
}
}
else
{
obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; obj* x_129; obj* x_130; obj* x_131; 
x_115 = lean::cnstr_get(x_87, 1);
lean::inc(x_115);
lean::dec(x_87);
x_116 = lean::cnstr_get(x_115, 0);
lean::inc(x_116);
x_117 = lean::cnstr_get(x_115, 1);
lean::inc(x_117);
x_118 = lean::cnstr_get(x_115, 2);
lean::inc(x_118);
x_119 = lean::cnstr_get(x_115, 3);
lean::inc(x_119);
x_120 = lean::cnstr_get(x_115, 4);
lean::inc(x_120);
x_121 = lean::cnstr_get(x_115, 5);
lean::inc(x_121);
x_122 = lean::cnstr_get(x_115, 6);
lean::inc(x_122);
x_123 = lean::cnstr_get(x_115, 7);
lean::inc(x_123);
if (lean::is_exclusive(x_115)) {
 lean::cnstr_release(x_115, 0);
 lean::cnstr_release(x_115, 1);
 lean::cnstr_release(x_115, 2);
 lean::cnstr_release(x_115, 3);
 lean::cnstr_release(x_115, 4);
 lean::cnstr_release(x_115, 5);
 lean::cnstr_release(x_115, 6);
 lean::cnstr_release(x_115, 7);
 lean::cnstr_release(x_115, 8);
 lean::cnstr_release(x_115, 9);
 lean::cnstr_release(x_115, 10);
 x_124 = x_115;
} else {
 lean::dec_ref(x_115);
 x_124 = lean::box(0);
}
x_125 = lean::cnstr_get(x_80, 0);
lean::inc(x_125);
x_126 = lean::cnstr_get(x_80, 1);
lean::inc(x_126);
x_127 = lean::cnstr_get(x_80, 6);
lean::inc(x_127);
lean::dec(x_80);
x_128 = l_List_append___rarg(x_79, x_121);
if (lean::is_scalar(x_124)) {
 x_129 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_129 = x_124;
}
lean::cnstr_set(x_129, 0, x_116);
lean::cnstr_set(x_129, 1, x_117);
lean::cnstr_set(x_129, 2, x_118);
lean::cnstr_set(x_129, 3, x_119);
lean::cnstr_set(x_129, 4, x_120);
lean::cnstr_set(x_129, 5, x_128);
lean::cnstr_set(x_129, 6, x_122);
lean::cnstr_set(x_129, 7, x_123);
lean::cnstr_set(x_129, 8, x_125);
lean::cnstr_set(x_129, 9, x_126);
lean::cnstr_set(x_129, 10, x_127);
x_130 = lean::box(0);
x_131 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_131, 0, x_130);
lean::cnstr_set(x_131, 1, x_129);
lean::cnstr_set(x_82, 0, x_131);
return x_82;
}
}
else
{
obj* x_132; obj* x_133; obj* x_134; obj* x_135; obj* x_136; obj* x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_141; obj* x_142; obj* x_143; obj* x_144; obj* x_145; obj* x_146; obj* x_147; obj* x_148; obj* x_149; obj* x_150; obj* x_151; 
x_132 = lean::cnstr_get(x_82, 0);
lean::inc(x_132);
lean::dec(x_82);
x_133 = lean::cnstr_get(x_132, 1);
lean::inc(x_133);
if (lean::is_exclusive(x_132)) {
 lean::cnstr_release(x_132, 0);
 lean::cnstr_release(x_132, 1);
 x_134 = x_132;
} else {
 lean::dec_ref(x_132);
 x_134 = lean::box(0);
}
x_135 = lean::cnstr_get(x_133, 0);
lean::inc(x_135);
x_136 = lean::cnstr_get(x_133, 1);
lean::inc(x_136);
x_137 = lean::cnstr_get(x_133, 2);
lean::inc(x_137);
x_138 = lean::cnstr_get(x_133, 3);
lean::inc(x_138);
x_139 = lean::cnstr_get(x_133, 4);
lean::inc(x_139);
x_140 = lean::cnstr_get(x_133, 5);
lean::inc(x_140);
x_141 = lean::cnstr_get(x_133, 6);
lean::inc(x_141);
x_142 = lean::cnstr_get(x_133, 7);
lean::inc(x_142);
if (lean::is_exclusive(x_133)) {
 lean::cnstr_release(x_133, 0);
 lean::cnstr_release(x_133, 1);
 lean::cnstr_release(x_133, 2);
 lean::cnstr_release(x_133, 3);
 lean::cnstr_release(x_133, 4);
 lean::cnstr_release(x_133, 5);
 lean::cnstr_release(x_133, 6);
 lean::cnstr_release(x_133, 7);
 lean::cnstr_release(x_133, 8);
 lean::cnstr_release(x_133, 9);
 lean::cnstr_release(x_133, 10);
 x_143 = x_133;
} else {
 lean::dec_ref(x_133);
 x_143 = lean::box(0);
}
x_144 = lean::cnstr_get(x_80, 0);
lean::inc(x_144);
x_145 = lean::cnstr_get(x_80, 1);
lean::inc(x_145);
x_146 = lean::cnstr_get(x_80, 6);
lean::inc(x_146);
lean::dec(x_80);
x_147 = l_List_append___rarg(x_79, x_140);
if (lean::is_scalar(x_143)) {
 x_148 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_148 = x_143;
}
lean::cnstr_set(x_148, 0, x_135);
lean::cnstr_set(x_148, 1, x_136);
lean::cnstr_set(x_148, 2, x_137);
lean::cnstr_set(x_148, 3, x_138);
lean::cnstr_set(x_148, 4, x_139);
lean::cnstr_set(x_148, 5, x_147);
lean::cnstr_set(x_148, 6, x_141);
lean::cnstr_set(x_148, 7, x_142);
lean::cnstr_set(x_148, 8, x_144);
lean::cnstr_set(x_148, 9, x_145);
lean::cnstr_set(x_148, 10, x_146);
x_149 = lean::box(0);
if (lean::is_scalar(x_134)) {
 x_150 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_150 = x_134;
}
lean::cnstr_set(x_150, 0, x_149);
lean::cnstr_set(x_150, 1, x_148);
x_151 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_151, 0, x_150);
return x_151;
}
}
}
}
else
{
obj* x_152; obj* x_153; obj* x_154; obj* x_155; obj* x_156; obj* x_157; obj* x_158; obj* x_159; obj* x_160; obj* x_161; obj* x_162; obj* x_163; obj* x_164; obj* x_165; obj* x_166; obj* x_167; obj* x_168; obj* x_169; obj* x_170; 
x_152 = lean::cnstr_get(x_17, 0);
lean::inc(x_152);
lean::dec(x_17);
x_153 = lean::cnstr_get(x_152, 0);
lean::inc(x_153);
x_154 = lean::cnstr_get(x_152, 1);
lean::inc(x_154);
lean::dec(x_152);
x_155 = lean::cnstr_get(x_6, 0);
x_156 = lean::cnstr_get(x_5, 8);
lean::inc(x_156);
x_157 = lean::cnstr_get(x_5, 9);
lean::inc(x_157);
x_158 = lean::cnstr_get(x_15, 3);
lean::inc(x_158);
x_159 = lean::cnstr_get(x_158, 0);
lean::inc(x_159);
lean::dec(x_158);
x_160 = l_List_reverse___rarg(x_159);
x_161 = lean::cnstr_get(x_15, 4);
lean::inc(x_161);
x_162 = lean::cnstr_get(x_161, 0);
lean::inc(x_162);
lean::dec(x_161);
x_163 = l_List_reverse___rarg(x_162);
x_164 = lean::cnstr_get(x_15, 5);
lean::inc(x_164);
x_165 = l_RBTree_toList___at_Lean_Elaborator_oldElabCommand___spec__1(x_164);
lean::dec(x_164);
x_166 = lean::cnstr_get(x_15, 8);
lean::inc(x_166);
lean::dec(x_15);
x_167 = lean::cnstr_get(x_5, 10);
lean::inc(x_167);
lean::dec(x_5);
x_168 = lean::alloc_cnstr(0, 8, 0);
lean::cnstr_set(x_168, 0, x_156);
lean::cnstr_set(x_168, 1, x_157);
lean::cnstr_set(x_168, 2, x_160);
lean::cnstr_set(x_168, 3, x_163);
lean::cnstr_set(x_168, 4, x_165);
lean::cnstr_set(x_168, 5, x_166);
lean::cnstr_set(x_168, 6, x_167);
lean::cnstr_set(x_168, 7, x_153);
x_169 = lean_elaborator_elaborate_command(x_155, x_10, x_168);
lean::dec(x_168);
x_170 = lean::cnstr_get(x_169, 0);
lean::inc(x_170);
if (lean::obj_tag(x_170) == 0)
{
obj* x_171; obj* x_172; obj* x_173; obj* x_174; obj* x_175; obj* x_176; obj* x_177; obj* x_178; obj* x_179; obj* x_180; obj* x_181; obj* x_182; obj* x_183; obj* x_184; obj* x_185; obj* x_186; obj* x_187; obj* x_188; obj* x_189; 
x_171 = lean::cnstr_get(x_169, 1);
lean::inc(x_171);
if (lean::is_exclusive(x_169)) {
 lean::cnstr_release(x_169, 0);
 lean::cnstr_release(x_169, 1);
 x_172 = x_169;
} else {
 lean::dec_ref(x_169);
 x_172 = lean::box(0);
}
x_173 = lean::cnstr_get(x_154, 0);
lean::inc(x_173);
x_174 = lean::cnstr_get(x_154, 1);
lean::inc(x_174);
x_175 = lean::cnstr_get(x_154, 2);
lean::inc(x_175);
x_176 = lean::cnstr_get(x_154, 3);
lean::inc(x_176);
x_177 = lean::cnstr_get(x_154, 4);
lean::inc(x_177);
x_178 = lean::cnstr_get(x_154, 5);
lean::inc(x_178);
x_179 = lean::cnstr_get(x_154, 6);
lean::inc(x_179);
x_180 = lean::cnstr_get(x_154, 7);
lean::inc(x_180);
x_181 = lean::cnstr_get(x_154, 8);
lean::inc(x_181);
x_182 = lean::cnstr_get(x_154, 9);
lean::inc(x_182);
x_183 = lean::cnstr_get(x_154, 10);
lean::inc(x_183);
if (lean::is_exclusive(x_154)) {
 lean::cnstr_release(x_154, 0);
 lean::cnstr_release(x_154, 1);
 lean::cnstr_release(x_154, 2);
 lean::cnstr_release(x_154, 3);
 lean::cnstr_release(x_154, 4);
 lean::cnstr_release(x_154, 5);
 lean::cnstr_release(x_154, 6);
 lean::cnstr_release(x_154, 7);
 lean::cnstr_release(x_154, 8);
 lean::cnstr_release(x_154, 9);
 lean::cnstr_release(x_154, 10);
 x_184 = x_154;
} else {
 lean::dec_ref(x_154);
 x_184 = lean::box(0);
}
x_185 = l_List_append___rarg(x_171, x_178);
if (lean::is_scalar(x_184)) {
 x_186 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_186 = x_184;
}
lean::cnstr_set(x_186, 0, x_173);
lean::cnstr_set(x_186, 1, x_174);
lean::cnstr_set(x_186, 2, x_175);
lean::cnstr_set(x_186, 3, x_176);
lean::cnstr_set(x_186, 4, x_177);
lean::cnstr_set(x_186, 5, x_185);
lean::cnstr_set(x_186, 6, x_179);
lean::cnstr_set(x_186, 7, x_180);
lean::cnstr_set(x_186, 8, x_181);
lean::cnstr_set(x_186, 9, x_182);
lean::cnstr_set(x_186, 10, x_183);
x_187 = lean::box(0);
if (lean::is_scalar(x_172)) {
 x_188 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_188 = x_172;
}
lean::cnstr_set(x_188, 0, x_187);
lean::cnstr_set(x_188, 1, x_186);
x_189 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_189, 0, x_188);
return x_189;
}
else
{
obj* x_190; obj* x_191; obj* x_192; obj* x_193; 
x_190 = lean::cnstr_get(x_169, 1);
lean::inc(x_190);
lean::dec(x_169);
x_191 = lean::cnstr_get(x_170, 0);
lean::inc(x_191);
lean::dec(x_170);
lean::inc(x_191);
x_192 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_oldElabCommand___lambda__1), 2, 1);
lean::closure_set(x_192, 0, x_191);
x_193 = l_Lean_Elaborator_modifyCurrentScope(x_192, x_3, x_4, x_154);
if (lean::obj_tag(x_193) == 0)
{
obj* x_194; obj* x_195; obj* x_196; 
lean::dec(x_191);
lean::dec(x_190);
x_194 = lean::cnstr_get(x_193, 0);
lean::inc(x_194);
if (lean::is_exclusive(x_193)) {
 lean::cnstr_release(x_193, 0);
 x_195 = x_193;
} else {
 lean::dec_ref(x_193);
 x_195 = lean::box(0);
}
if (lean::is_scalar(x_195)) {
 x_196 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_196 = x_195;
}
lean::cnstr_set(x_196, 0, x_194);
return x_196;
}
else
{
obj* x_197; obj* x_198; obj* x_199; obj* x_200; obj* x_201; obj* x_202; obj* x_203; obj* x_204; obj* x_205; obj* x_206; obj* x_207; obj* x_208; obj* x_209; obj* x_210; obj* x_211; obj* x_212; obj* x_213; obj* x_214; obj* x_215; obj* x_216; obj* x_217; 
x_197 = lean::cnstr_get(x_193, 0);
lean::inc(x_197);
if (lean::is_exclusive(x_193)) {
 lean::cnstr_release(x_193, 0);
 x_198 = x_193;
} else {
 lean::dec_ref(x_193);
 x_198 = lean::box(0);
}
x_199 = lean::cnstr_get(x_197, 1);
lean::inc(x_199);
if (lean::is_exclusive(x_197)) {
 lean::cnstr_release(x_197, 0);
 lean::cnstr_release(x_197, 1);
 x_200 = x_197;
} else {
 lean::dec_ref(x_197);
 x_200 = lean::box(0);
}
x_201 = lean::cnstr_get(x_199, 0);
lean::inc(x_201);
x_202 = lean::cnstr_get(x_199, 1);
lean::inc(x_202);
x_203 = lean::cnstr_get(x_199, 2);
lean::inc(x_203);
x_204 = lean::cnstr_get(x_199, 3);
lean::inc(x_204);
x_205 = lean::cnstr_get(x_199, 4);
lean::inc(x_205);
x_206 = lean::cnstr_get(x_199, 5);
lean::inc(x_206);
x_207 = lean::cnstr_get(x_199, 6);
lean::inc(x_207);
x_208 = lean::cnstr_get(x_199, 7);
lean::inc(x_208);
if (lean::is_exclusive(x_199)) {
 lean::cnstr_release(x_199, 0);
 lean::cnstr_release(x_199, 1);
 lean::cnstr_release(x_199, 2);
 lean::cnstr_release(x_199, 3);
 lean::cnstr_release(x_199, 4);
 lean::cnstr_release(x_199, 5);
 lean::cnstr_release(x_199, 6);
 lean::cnstr_release(x_199, 7);
 lean::cnstr_release(x_199, 8);
 lean::cnstr_release(x_199, 9);
 lean::cnstr_release(x_199, 10);
 x_209 = x_199;
} else {
 lean::dec_ref(x_199);
 x_209 = lean::box(0);
}
x_210 = lean::cnstr_get(x_191, 0);
lean::inc(x_210);
x_211 = lean::cnstr_get(x_191, 1);
lean::inc(x_211);
x_212 = lean::cnstr_get(x_191, 6);
lean::inc(x_212);
lean::dec(x_191);
x_213 = l_List_append___rarg(x_190, x_206);
if (lean::is_scalar(x_209)) {
 x_214 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_214 = x_209;
}
lean::cnstr_set(x_214, 0, x_201);
lean::cnstr_set(x_214, 1, x_202);
lean::cnstr_set(x_214, 2, x_203);
lean::cnstr_set(x_214, 3, x_204);
lean::cnstr_set(x_214, 4, x_205);
lean::cnstr_set(x_214, 5, x_213);
lean::cnstr_set(x_214, 6, x_207);
lean::cnstr_set(x_214, 7, x_208);
lean::cnstr_set(x_214, 8, x_210);
lean::cnstr_set(x_214, 9, x_211);
lean::cnstr_set(x_214, 10, x_212);
x_215 = lean::box(0);
if (lean::is_scalar(x_200)) {
 x_216 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_216 = x_200;
}
lean::cnstr_set(x_216, 0, x_215);
lean::cnstr_set(x_216, 1, x_214);
if (lean::is_scalar(x_198)) {
 x_217 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_217 = x_198;
}
lean::cnstr_set(x_217, 0, x_216);
return x_217;
}
}
}
}
}
}
block_230:
{
if (lean::obj_tag(x_2) == 10)
{
obj* x_220; obj* x_221; obj* x_222; obj* x_223; obj* x_224; obj* x_225; obj* x_226; obj* x_227; obj* x_228; obj* x_229; 
x_220 = lean::cnstr_get(x_2, 0);
lean::inc(x_220);
x_221 = lean::cnstr_get(x_2, 1);
lean::inc(x_221);
lean::dec(x_2);
x_222 = l_Lean_FileMap_toPosition(x_7, x_219);
x_223 = lean::cnstr_get(x_222, 1);
lean::inc(x_223);
x_224 = l_Lean_Elaborator_toPexpr___main___closed__3;
x_225 = l_Lean_KVMap_setNat(x_220, x_224, x_223);
x_226 = lean::cnstr_get(x_222, 0);
lean::inc(x_226);
lean::dec(x_222);
x_227 = l_Lean_Elaborator_toPexpr___main___closed__4;
x_228 = l_Lean_KVMap_setNat(x_225, x_227, x_226);
x_229 = lean_expr_mk_mdata(x_228, x_221);
x_10 = x_229;
goto block_218;
}
else
{
lean::dec(x_219);
x_10 = x_2;
goto block_218;
}
}
}
}
obj* l_RBNode_revFold___main___at_Lean_Elaborator_oldElabCommand___spec__2___boxed(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = l_RBNode_revFold___main___at_Lean_Elaborator_oldElabCommand___spec__2(x_1, x_2);
lean::dec(x_2);
return x_3;
}
}
obj* l_RBTree_toList___at_Lean_Elaborator_oldElabCommand___spec__1___boxed(obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_RBTree_toList___at_Lean_Elaborator_oldElabCommand___spec__1(x_1);
lean::dec(x_1);
return x_2;
}
}
obj* l_Lean_Elaborator_oldElabCommand___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_Lean_Elaborator_oldElabCommand(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_1);
return x_6;
}
}
obj* l_List_map___main___at_Lean_Elaborator_namesToPexpr___spec__1(obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
uint8 x_3; 
x_3 = !lean::is_exclusive(x_1);
if (x_3 == 0)
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_4 = lean::cnstr_get(x_1, 0);
x_5 = lean::cnstr_get(x_1, 1);
x_6 = lean::box(0);
x_7 = lean_expr_mk_const(x_4, x_6);
x_8 = l_List_map___main___at_Lean_Elaborator_namesToPexpr___spec__1(x_5);
lean::cnstr_set(x_1, 1, x_8);
lean::cnstr_set(x_1, 0, x_7);
return x_1;
}
else
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_9 = lean::cnstr_get(x_1, 0);
x_10 = lean::cnstr_get(x_1, 1);
lean::inc(x_10);
lean::inc(x_9);
lean::dec(x_1);
x_11 = lean::box(0);
x_12 = lean_expr_mk_const(x_9, x_11);
x_13 = l_List_map___main___at_Lean_Elaborator_namesToPexpr___spec__1(x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
return x_14;
}
}
}
}
obj* l_Lean_Elaborator_namesToPexpr(obj* x_1) {
_start:
{
obj* x_2; obj* x_3; obj* x_4; 
x_2 = l_List_map___main___at_Lean_Elaborator_namesToPexpr___spec__1(x_1);
x_3 = l_Lean_Elaborator_mkEqns___closed__1;
x_4 = l_Lean_Expr_mkCapp(x_3, x_2);
return x_4;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__1(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
uint8 x_8; 
x_8 = !lean::is_exclusive(x_1);
if (x_8 == 0)
{
obj* x_9; obj* x_10; obj* x_11; 
x_9 = lean::cnstr_get(x_1, 0);
x_10 = lean::cnstr_get(x_1, 1);
x_11 = l_Lean_Elaborator_toPexpr___main(x_9, x_2, x_3, x_4);
if (lean::obj_tag(x_11) == 0)
{
uint8 x_12; 
lean::free_heap_obj(x_1);
lean::dec(x_10);
x_12 = !lean::is_exclusive(x_11);
if (x_12 == 0)
{
return x_11;
}
else
{
obj* x_13; obj* x_14; 
x_13 = lean::cnstr_get(x_11, 0);
lean::inc(x_13);
lean::dec(x_11);
x_14 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
}
else
{
obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
lean::dec(x_11);
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
x_17 = lean::cnstr_get(x_15, 1);
lean::inc(x_17);
lean::dec(x_15);
x_18 = l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__1(x_10, x_2, x_3, x_17);
if (lean::obj_tag(x_18) == 0)
{
uint8 x_19; 
lean::dec(x_16);
lean::free_heap_obj(x_1);
x_19 = !lean::is_exclusive(x_18);
if (x_19 == 0)
{
return x_18;
}
else
{
obj* x_20; obj* x_21; 
x_20 = lean::cnstr_get(x_18, 0);
lean::inc(x_20);
lean::dec(x_18);
x_21 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_21, 0, x_20);
return x_21;
}
}
else
{
uint8 x_22; 
x_22 = !lean::is_exclusive(x_18);
if (x_22 == 0)
{
obj* x_23; uint8 x_24; 
x_23 = lean::cnstr_get(x_18, 0);
x_24 = !lean::is_exclusive(x_23);
if (x_24 == 0)
{
obj* x_25; 
x_25 = lean::cnstr_get(x_23, 0);
lean::cnstr_set(x_1, 1, x_25);
lean::cnstr_set(x_1, 0, x_16);
lean::cnstr_set(x_23, 0, x_1);
return x_18;
}
else
{
obj* x_26; obj* x_27; obj* x_28; 
x_26 = lean::cnstr_get(x_23, 0);
x_27 = lean::cnstr_get(x_23, 1);
lean::inc(x_27);
lean::inc(x_26);
lean::dec(x_23);
lean::cnstr_set(x_1, 1, x_26);
lean::cnstr_set(x_1, 0, x_16);
x_28 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_28, 0, x_1);
lean::cnstr_set(x_28, 1, x_27);
lean::cnstr_set(x_18, 0, x_28);
return x_18;
}
}
else
{
obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_29 = lean::cnstr_get(x_18, 0);
lean::inc(x_29);
lean::dec(x_18);
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
x_31 = lean::cnstr_get(x_29, 1);
lean::inc(x_31);
if (lean::is_exclusive(x_29)) {
 lean::cnstr_release(x_29, 0);
 lean::cnstr_release(x_29, 1);
 x_32 = x_29;
} else {
 lean::dec_ref(x_29);
 x_32 = lean::box(0);
}
lean::cnstr_set(x_1, 1, x_30);
lean::cnstr_set(x_1, 0, x_16);
if (lean::is_scalar(x_32)) {
 x_33 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_33 = x_32;
}
lean::cnstr_set(x_33, 0, x_1);
lean::cnstr_set(x_33, 1, x_31);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_33);
return x_34;
}
}
}
}
else
{
obj* x_35; obj* x_36; obj* x_37; 
x_35 = lean::cnstr_get(x_1, 0);
x_36 = lean::cnstr_get(x_1, 1);
lean::inc(x_36);
lean::inc(x_35);
lean::dec(x_1);
x_37 = l_Lean_Elaborator_toPexpr___main(x_35, x_2, x_3, x_4);
if (lean::obj_tag(x_37) == 0)
{
obj* x_38; obj* x_39; obj* x_40; 
lean::dec(x_36);
x_38 = lean::cnstr_get(x_37, 0);
lean::inc(x_38);
if (lean::is_exclusive(x_37)) {
 lean::cnstr_release(x_37, 0);
 x_39 = x_37;
} else {
 lean::dec_ref(x_37);
 x_39 = lean::box(0);
}
if (lean::is_scalar(x_39)) {
 x_40 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_40 = x_39;
}
lean::cnstr_set(x_40, 0, x_38);
return x_40;
}
else
{
obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
x_41 = lean::cnstr_get(x_37, 0);
lean::inc(x_41);
lean::dec(x_37);
x_42 = lean::cnstr_get(x_41, 0);
lean::inc(x_42);
x_43 = lean::cnstr_get(x_41, 1);
lean::inc(x_43);
lean::dec(x_41);
x_44 = l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__1(x_36, x_2, x_3, x_43);
if (lean::obj_tag(x_44) == 0)
{
obj* x_45; obj* x_46; obj* x_47; 
lean::dec(x_42);
x_45 = lean::cnstr_get(x_44, 0);
lean::inc(x_45);
if (lean::is_exclusive(x_44)) {
 lean::cnstr_release(x_44, 0);
 x_46 = x_44;
} else {
 lean::dec_ref(x_44);
 x_46 = lean::box(0);
}
if (lean::is_scalar(x_46)) {
 x_47 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_47 = x_46;
}
lean::cnstr_set(x_47, 0, x_45);
return x_47;
}
else
{
obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; 
x_48 = lean::cnstr_get(x_44, 0);
lean::inc(x_48);
if (lean::is_exclusive(x_44)) {
 lean::cnstr_release(x_44, 0);
 x_49 = x_44;
} else {
 lean::dec_ref(x_44);
 x_49 = lean::box(0);
}
x_50 = lean::cnstr_get(x_48, 0);
lean::inc(x_50);
x_51 = lean::cnstr_get(x_48, 1);
lean::inc(x_51);
if (lean::is_exclusive(x_48)) {
 lean::cnstr_release(x_48, 0);
 lean::cnstr_release(x_48, 1);
 x_52 = x_48;
} else {
 lean::dec_ref(x_48);
 x_52 = lean::box(0);
}
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_42);
lean::cnstr_set(x_53, 1, x_50);
if (lean::is_scalar(x_52)) {
 x_54 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_54 = x_52;
}
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_51);
if (lean::is_scalar(x_49)) {
 x_55 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_55 = x_49;
}
lean::cnstr_set(x_55, 0, x_54);
return x_55;
}
}
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__2(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
uint8 x_8; 
x_8 = !lean::is_exclusive(x_1);
if (x_8 == 0)
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_9 = lean::cnstr_get(x_1, 0);
x_10 = lean::cnstr_get(x_1, 1);
x_11 = lean::cnstr_get(x_9, 0);
lean::inc(x_11);
lean::dec(x_9);
x_12 = lean::cnstr_get(x_11, 0);
lean::inc(x_12);
x_13 = lean::cnstr_get(x_12, 2);
lean::inc(x_13);
lean::dec(x_12);
x_14 = lean::cnstr_get(x_11, 1);
lean::inc(x_14);
lean::dec(x_11);
x_15 = l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__1(x_14, x_2, x_3, x_4);
if (lean::obj_tag(x_15) == 0)
{
uint8 x_16; 
lean::dec(x_13);
lean::free_heap_obj(x_1);
lean::dec(x_10);
x_16 = !lean::is_exclusive(x_15);
if (x_16 == 0)
{
return x_15;
}
else
{
obj* x_17; obj* x_18; 
x_17 = lean::cnstr_get(x_15, 0);
lean::inc(x_17);
lean::dec(x_15);
x_18 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_18, 0, x_17);
return x_18;
}
}
else
{
obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_19 = lean::cnstr_get(x_15, 0);
lean::inc(x_19);
lean::dec(x_15);
x_20 = lean::cnstr_get(x_19, 0);
lean::inc(x_20);
x_21 = lean::cnstr_get(x_19, 1);
lean::inc(x_21);
lean::dec(x_19);
x_22 = l_Lean_Expr_mkCapp(x_13, x_20);
x_23 = l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__2(x_10, x_2, x_3, x_21);
if (lean::obj_tag(x_23) == 0)
{
uint8 x_24; 
lean::dec(x_22);
lean::free_heap_obj(x_1);
x_24 = !lean::is_exclusive(x_23);
if (x_24 == 0)
{
return x_23;
}
else
{
obj* x_25; obj* x_26; 
x_25 = lean::cnstr_get(x_23, 0);
lean::inc(x_25);
lean::dec(x_23);
x_26 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_26, 0, x_25);
return x_26;
}
}
else
{
uint8 x_27; 
x_27 = !lean::is_exclusive(x_23);
if (x_27 == 0)
{
obj* x_28; uint8 x_29; 
x_28 = lean::cnstr_get(x_23, 0);
x_29 = !lean::is_exclusive(x_28);
if (x_29 == 0)
{
obj* x_30; 
x_30 = lean::cnstr_get(x_28, 0);
lean::cnstr_set(x_1, 1, x_30);
lean::cnstr_set(x_1, 0, x_22);
lean::cnstr_set(x_28, 0, x_1);
return x_23;
}
else
{
obj* x_31; obj* x_32; obj* x_33; 
x_31 = lean::cnstr_get(x_28, 0);
x_32 = lean::cnstr_get(x_28, 1);
lean::inc(x_32);
lean::inc(x_31);
lean::dec(x_28);
lean::cnstr_set(x_1, 1, x_31);
lean::cnstr_set(x_1, 0, x_22);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_1);
lean::cnstr_set(x_33, 1, x_32);
lean::cnstr_set(x_23, 0, x_33);
return x_23;
}
}
else
{
obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_34 = lean::cnstr_get(x_23, 0);
lean::inc(x_34);
lean::dec(x_23);
x_35 = lean::cnstr_get(x_34, 0);
lean::inc(x_35);
x_36 = lean::cnstr_get(x_34, 1);
lean::inc(x_36);
if (lean::is_exclusive(x_34)) {
 lean::cnstr_release(x_34, 0);
 lean::cnstr_release(x_34, 1);
 x_37 = x_34;
} else {
 lean::dec_ref(x_34);
 x_37 = lean::box(0);
}
lean::cnstr_set(x_1, 1, x_35);
lean::cnstr_set(x_1, 0, x_22);
if (lean::is_scalar(x_37)) {
 x_38 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_38 = x_37;
}
lean::cnstr_set(x_38, 0, x_1);
lean::cnstr_set(x_38, 1, x_36);
x_39 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_39, 0, x_38);
return x_39;
}
}
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; 
x_40 = lean::cnstr_get(x_1, 0);
x_41 = lean::cnstr_get(x_1, 1);
lean::inc(x_41);
lean::inc(x_40);
lean::dec(x_1);
x_42 = lean::cnstr_get(x_40, 0);
lean::inc(x_42);
lean::dec(x_40);
x_43 = lean::cnstr_get(x_42, 0);
lean::inc(x_43);
x_44 = lean::cnstr_get(x_43, 2);
lean::inc(x_44);
lean::dec(x_43);
x_45 = lean::cnstr_get(x_42, 1);
lean::inc(x_45);
lean::dec(x_42);
x_46 = l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__1(x_45, x_2, x_3, x_4);
if (lean::obj_tag(x_46) == 0)
{
obj* x_47; obj* x_48; obj* x_49; 
lean::dec(x_44);
lean::dec(x_41);
x_47 = lean::cnstr_get(x_46, 0);
lean::inc(x_47);
if (lean::is_exclusive(x_46)) {
 lean::cnstr_release(x_46, 0);
 x_48 = x_46;
} else {
 lean::dec_ref(x_46);
 x_48 = lean::box(0);
}
if (lean::is_scalar(x_48)) {
 x_49 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_49 = x_48;
}
lean::cnstr_set(x_49, 0, x_47);
return x_49;
}
else
{
obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; 
x_50 = lean::cnstr_get(x_46, 0);
lean::inc(x_50);
lean::dec(x_46);
x_51 = lean::cnstr_get(x_50, 0);
lean::inc(x_51);
x_52 = lean::cnstr_get(x_50, 1);
lean::inc(x_52);
lean::dec(x_50);
x_53 = l_Lean_Expr_mkCapp(x_44, x_51);
x_54 = l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__2(x_41, x_2, x_3, x_52);
if (lean::obj_tag(x_54) == 0)
{
obj* x_55; obj* x_56; obj* x_57; 
lean::dec(x_53);
x_55 = lean::cnstr_get(x_54, 0);
lean::inc(x_55);
if (lean::is_exclusive(x_54)) {
 lean::cnstr_release(x_54, 0);
 x_56 = x_54;
} else {
 lean::dec_ref(x_54);
 x_56 = lean::box(0);
}
if (lean::is_scalar(x_56)) {
 x_57 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_57 = x_56;
}
lean::cnstr_set(x_57, 0, x_55);
return x_57;
}
else
{
obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; 
x_58 = lean::cnstr_get(x_54, 0);
lean::inc(x_58);
if (lean::is_exclusive(x_54)) {
 lean::cnstr_release(x_54, 0);
 x_59 = x_54;
} else {
 lean::dec_ref(x_54);
 x_59 = lean::box(0);
}
x_60 = lean::cnstr_get(x_58, 0);
lean::inc(x_60);
x_61 = lean::cnstr_get(x_58, 1);
lean::inc(x_61);
if (lean::is_exclusive(x_58)) {
 lean::cnstr_release(x_58, 0);
 lean::cnstr_release(x_58, 1);
 x_62 = x_58;
} else {
 lean::dec_ref(x_58);
 x_62 = lean::box(0);
}
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_53);
lean::cnstr_set(x_63, 1, x_60);
if (lean::is_scalar(x_62)) {
 x_64 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_64 = x_62;
}
lean::cnstr_set(x_64, 0, x_63);
lean::cnstr_set(x_64, 1, x_61);
if (lean::is_scalar(x_59)) {
 x_65 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_65 = x_59;
}
lean::cnstr_set(x_65, 0, x_64);
return x_65;
}
}
}
}
}
}
obj* l_Lean_Elaborator_attrsToPexpr(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__2(x_1, x_2, x_3, x_4);
if (lean::obj_tag(x_5) == 0)
{
uint8 x_6; 
x_6 = !lean::is_exclusive(x_5);
if (x_6 == 0)
{
return x_5;
}
else
{
obj* x_7; obj* x_8; 
x_7 = lean::cnstr_get(x_5, 0);
lean::inc(x_7);
lean::dec(x_5);
x_8 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
}
else
{
uint8 x_9; 
x_9 = !lean::is_exclusive(x_5);
if (x_9 == 0)
{
obj* x_10; uint8 x_11; 
x_10 = lean::cnstr_get(x_5, 0);
x_11 = !lean::is_exclusive(x_10);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; 
x_12 = lean::cnstr_get(x_10, 0);
x_13 = l_Lean_Elaborator_mkEqns___closed__1;
x_14 = l_Lean_Expr_mkCapp(x_13, x_12);
lean::cnstr_set(x_10, 0, x_14);
return x_5;
}
else
{
obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_15 = lean::cnstr_get(x_10, 0);
x_16 = lean::cnstr_get(x_10, 1);
lean::inc(x_16);
lean::inc(x_15);
lean::dec(x_10);
x_17 = l_Lean_Elaborator_mkEqns___closed__1;
x_18 = l_Lean_Expr_mkCapp(x_17, x_15);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_16);
lean::cnstr_set(x_5, 0, x_19);
return x_5;
}
}
else
{
obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_20 = lean::cnstr_get(x_5, 0);
lean::inc(x_20);
lean::dec(x_5);
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
x_22 = lean::cnstr_get(x_20, 1);
lean::inc(x_22);
if (lean::is_exclusive(x_20)) {
 lean::cnstr_release(x_20, 0);
 lean::cnstr_release(x_20, 1);
 x_23 = x_20;
} else {
 lean::dec_ref(x_20);
 x_23 = lean::box(0);
}
x_24 = l_Lean_Elaborator_mkEqns___closed__1;
x_25 = l_Lean_Expr_mkCapp(x_24, x_21);
if (lean::is_scalar(x_23)) {
 x_26 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_26 = x_23;
}
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_22);
x_27 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_27, 0, x_26);
return x_27;
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__1___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__1(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__2___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__2(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_attrsToPexpr___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_attrsToPexpr(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* _init_l_Lean_Elaborator_declModifiersToPexpr___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("noncomputable");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_declModifiersToPexpr___closed__2() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("unsafe");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_declModifiersToPexpr___closed__3() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; uint8 x_5; obj* x_6; 
x_1 = lean::box(0);
x_2 = lean::box(0);
x_3 = lean::mk_string("private");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = 1;
x_6 = l_Lean_KVMap_setBool(x_1, x_4, x_5);
return x_6;
}
}
obj* _init_l_Lean_Elaborator_declModifiersToPexpr___closed__4() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; uint8 x_5; obj* x_6; 
x_1 = lean::box(0);
x_2 = lean::box(0);
x_3 = lean::mk_string("protected");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = 1;
x_6 = l_Lean_KVMap_setBool(x_1, x_4, x_5);
return x_6;
}
}
obj* _init_l_Lean_Elaborator_declModifiersToPexpr___closed__5() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("docString");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_declModifiersToPexpr___closed__6() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("private");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_declModifiersToPexpr___closed__7() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("protected");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* l_Lean_Elaborator_declModifiersToPexpr(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_5 = lean::box(0);
x_6 = lean::cnstr_get(x_1, 0);
lean::inc(x_6);
x_7 = lean::cnstr_get(x_1, 2);
lean::inc(x_7);
x_8 = lean::cnstr_get(x_1, 3);
lean::inc(x_8);
x_9 = lean::cnstr_get(x_1, 4);
lean::inc(x_9);
x_10 = lean::cnstr_get(x_1, 1);
lean::inc(x_10);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
if (lean::obj_tag(x_7) == 0)
{
x_11 = x_5;
goto block_108;
}
else
{
obj* x_109; 
x_109 = lean::cnstr_get(x_7, 0);
lean::inc(x_109);
lean::dec(x_7);
if (lean::obj_tag(x_109) == 0)
{
obj* x_110; 
lean::dec(x_109);
x_110 = l_Lean_Elaborator_declModifiersToPexpr___closed__3;
x_11 = x_110;
goto block_108;
}
else
{
obj* x_111; 
lean::dec(x_109);
x_111 = l_Lean_Elaborator_declModifiersToPexpr___closed__4;
x_11 = x_111;
goto block_108;
}
}
}
else
{
obj* x_112; obj* x_113; 
x_112 = lean::cnstr_get(x_6, 0);
lean::inc(x_112);
lean::dec(x_6);
x_113 = lean::cnstr_get(x_112, 1);
lean::inc(x_113);
lean::dec(x_112);
if (lean::obj_tag(x_113) == 0)
{
if (lean::obj_tag(x_7) == 0)
{
x_11 = x_5;
goto block_108;
}
else
{
obj* x_114; 
x_114 = lean::cnstr_get(x_7, 0);
lean::inc(x_114);
lean::dec(x_7);
if (lean::obj_tag(x_114) == 0)
{
obj* x_115; 
lean::dec(x_114);
x_115 = l_Lean_Elaborator_declModifiersToPexpr___closed__3;
x_11 = x_115;
goto block_108;
}
else
{
obj* x_116; 
lean::dec(x_114);
x_116 = l_Lean_Elaborator_declModifiersToPexpr___closed__4;
x_11 = x_116;
goto block_108;
}
}
}
else
{
obj* x_117; obj* x_118; obj* x_119; obj* x_120; 
x_117 = lean::cnstr_get(x_113, 0);
lean::inc(x_117);
lean::dec(x_113);
x_118 = lean::cnstr_get(x_117, 1);
lean::inc(x_118);
lean::dec(x_117);
x_119 = l_Lean_Elaborator_declModifiersToPexpr___closed__5;
x_120 = l_Lean_KVMap_setString(x_5, x_119, x_118);
if (lean::obj_tag(x_7) == 0)
{
x_11 = x_120;
goto block_108;
}
else
{
obj* x_121; 
x_121 = lean::cnstr_get(x_7, 0);
lean::inc(x_121);
lean::dec(x_7);
if (lean::obj_tag(x_121) == 0)
{
obj* x_122; uint8 x_123; obj* x_124; 
lean::dec(x_121);
x_122 = l_Lean_Elaborator_declModifiersToPexpr___closed__6;
x_123 = 1;
x_124 = l_Lean_KVMap_setBool(x_120, x_122, x_123);
x_11 = x_124;
goto block_108;
}
else
{
obj* x_125; uint8 x_126; obj* x_127; 
lean::dec(x_121);
x_125 = l_Lean_Elaborator_declModifiersToPexpr___closed__7;
x_126 = 1;
x_127 = l_Lean_KVMap_setBool(x_120, x_125, x_126);
x_11 = x_127;
goto block_108;
}
}
}
}
block_108:
{
uint8 x_12; 
if (lean::obj_tag(x_8) == 0)
{
uint8 x_106; 
x_106 = 0;
x_12 = x_106;
goto block_105;
}
else
{
uint8 x_107; 
lean::dec(x_8);
x_107 = 1;
x_12 = x_107;
goto block_105;
}
block_105:
{
obj* x_13; obj* x_14; 
x_13 = l_Lean_Elaborator_declModifiersToPexpr___closed__1;
x_14 = l_Lean_KVMap_setBool(x_11, x_13, x_12);
if (lean::obj_tag(x_9) == 0)
{
obj* x_15; uint8 x_16; obj* x_17; 
x_15 = l_Lean_Elaborator_declModifiersToPexpr___closed__2;
x_16 = 0;
x_17 = l_Lean_KVMap_setBool(x_14, x_15, x_16);
if (lean::obj_tag(x_10) == 0)
{
obj* x_18; 
x_18 = l_Lean_Elaborator_attrsToPexpr(x_5, x_2, x_3, x_4);
if (lean::obj_tag(x_18) == 0)
{
uint8 x_19; 
lean::dec(x_17);
x_19 = !lean::is_exclusive(x_18);
if (x_19 == 0)
{
return x_18;
}
else
{
obj* x_20; obj* x_21; 
x_20 = lean::cnstr_get(x_18, 0);
lean::inc(x_20);
lean::dec(x_18);
x_21 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_21, 0, x_20);
return x_21;
}
}
else
{
uint8 x_22; 
x_22 = !lean::is_exclusive(x_18);
if (x_22 == 0)
{
obj* x_23; uint8 x_24; 
x_23 = lean::cnstr_get(x_18, 0);
x_24 = !lean::is_exclusive(x_23);
if (x_24 == 0)
{
obj* x_25; obj* x_26; 
x_25 = lean::cnstr_get(x_23, 0);
x_26 = lean_expr_mk_mdata(x_17, x_25);
lean::cnstr_set(x_23, 0, x_26);
return x_18;
}
else
{
obj* x_27; obj* x_28; obj* x_29; obj* x_30; 
x_27 = lean::cnstr_get(x_23, 0);
x_28 = lean::cnstr_get(x_23, 1);
lean::inc(x_28);
lean::inc(x_27);
lean::dec(x_23);
x_29 = lean_expr_mk_mdata(x_17, x_27);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_28);
lean::cnstr_set(x_18, 0, x_30);
return x_18;
}
}
else
{
obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; 
x_31 = lean::cnstr_get(x_18, 0);
lean::inc(x_31);
lean::dec(x_18);
x_32 = lean::cnstr_get(x_31, 0);
lean::inc(x_32);
x_33 = lean::cnstr_get(x_31, 1);
lean::inc(x_33);
if (lean::is_exclusive(x_31)) {
 lean::cnstr_release(x_31, 0);
 lean::cnstr_release(x_31, 1);
 x_34 = x_31;
} else {
 lean::dec_ref(x_31);
 x_34 = lean::box(0);
}
x_35 = lean_expr_mk_mdata(x_17, x_32);
if (lean::is_scalar(x_34)) {
 x_36 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_36 = x_34;
}
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_33);
x_37 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_37, 0, x_36);
return x_37;
}
}
}
else
{
obj* x_38; obj* x_39; obj* x_40; 
x_38 = lean::cnstr_get(x_10, 0);
lean::inc(x_38);
lean::dec(x_10);
x_39 = lean::cnstr_get(x_38, 1);
lean::inc(x_39);
lean::dec(x_38);
x_40 = l_Lean_Elaborator_attrsToPexpr(x_39, x_2, x_3, x_4);
if (lean::obj_tag(x_40) == 0)
{
uint8 x_41; 
lean::dec(x_17);
x_41 = !lean::is_exclusive(x_40);
if (x_41 == 0)
{
return x_40;
}
else
{
obj* x_42; obj* x_43; 
x_42 = lean::cnstr_get(x_40, 0);
lean::inc(x_42);
lean::dec(x_40);
x_43 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_43, 0, x_42);
return x_43;
}
}
else
{
uint8 x_44; 
x_44 = !lean::is_exclusive(x_40);
if (x_44 == 0)
{
obj* x_45; uint8 x_46; 
x_45 = lean::cnstr_get(x_40, 0);
x_46 = !lean::is_exclusive(x_45);
if (x_46 == 0)
{
obj* x_47; obj* x_48; 
x_47 = lean::cnstr_get(x_45, 0);
x_48 = lean_expr_mk_mdata(x_17, x_47);
lean::cnstr_set(x_45, 0, x_48);
return x_40;
}
else
{
obj* x_49; obj* x_50; obj* x_51; obj* x_52; 
x_49 = lean::cnstr_get(x_45, 0);
x_50 = lean::cnstr_get(x_45, 1);
lean::inc(x_50);
lean::inc(x_49);
lean::dec(x_45);
x_51 = lean_expr_mk_mdata(x_17, x_49);
x_52 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_50);
lean::cnstr_set(x_40, 0, x_52);
return x_40;
}
}
else
{
obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
lean::dec(x_40);
x_54 = lean::cnstr_get(x_53, 0);
lean::inc(x_54);
x_55 = lean::cnstr_get(x_53, 1);
lean::inc(x_55);
if (lean::is_exclusive(x_53)) {
 lean::cnstr_release(x_53, 0);
 lean::cnstr_release(x_53, 1);
 x_56 = x_53;
} else {
 lean::dec_ref(x_53);
 x_56 = lean::box(0);
}
x_57 = lean_expr_mk_mdata(x_17, x_54);
if (lean::is_scalar(x_56)) {
 x_58 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_58 = x_56;
}
lean::cnstr_set(x_58, 0, x_57);
lean::cnstr_set(x_58, 1, x_55);
x_59 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_59, 0, x_58);
return x_59;
}
}
}
}
else
{
obj* x_60; uint8 x_61; obj* x_62; 
lean::dec(x_9);
x_60 = l_Lean_Elaborator_declModifiersToPexpr___closed__2;
x_61 = 1;
x_62 = l_Lean_KVMap_setBool(x_14, x_60, x_61);
if (lean::obj_tag(x_10) == 0)
{
obj* x_63; 
x_63 = l_Lean_Elaborator_attrsToPexpr(x_5, x_2, x_3, x_4);
if (lean::obj_tag(x_63) == 0)
{
uint8 x_64; 
lean::dec(x_62);
x_64 = !lean::is_exclusive(x_63);
if (x_64 == 0)
{
return x_63;
}
else
{
obj* x_65; obj* x_66; 
x_65 = lean::cnstr_get(x_63, 0);
lean::inc(x_65);
lean::dec(x_63);
x_66 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_66, 0, x_65);
return x_66;
}
}
else
{
uint8 x_67; 
x_67 = !lean::is_exclusive(x_63);
if (x_67 == 0)
{
obj* x_68; uint8 x_69; 
x_68 = lean::cnstr_get(x_63, 0);
x_69 = !lean::is_exclusive(x_68);
if (x_69 == 0)
{
obj* x_70; obj* x_71; 
x_70 = lean::cnstr_get(x_68, 0);
x_71 = lean_expr_mk_mdata(x_62, x_70);
lean::cnstr_set(x_68, 0, x_71);
return x_63;
}
else
{
obj* x_72; obj* x_73; obj* x_74; obj* x_75; 
x_72 = lean::cnstr_get(x_68, 0);
x_73 = lean::cnstr_get(x_68, 1);
lean::inc(x_73);
lean::inc(x_72);
lean::dec(x_68);
x_74 = lean_expr_mk_mdata(x_62, x_72);
x_75 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_75, 0, x_74);
lean::cnstr_set(x_75, 1, x_73);
lean::cnstr_set(x_63, 0, x_75);
return x_63;
}
}
else
{
obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; 
x_76 = lean::cnstr_get(x_63, 0);
lean::inc(x_76);
lean::dec(x_63);
x_77 = lean::cnstr_get(x_76, 0);
lean::inc(x_77);
x_78 = lean::cnstr_get(x_76, 1);
lean::inc(x_78);
if (lean::is_exclusive(x_76)) {
 lean::cnstr_release(x_76, 0);
 lean::cnstr_release(x_76, 1);
 x_79 = x_76;
} else {
 lean::dec_ref(x_76);
 x_79 = lean::box(0);
}
x_80 = lean_expr_mk_mdata(x_62, x_77);
if (lean::is_scalar(x_79)) {
 x_81 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_81 = x_79;
}
lean::cnstr_set(x_81, 0, x_80);
lean::cnstr_set(x_81, 1, x_78);
x_82 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_82, 0, x_81);
return x_82;
}
}
}
else
{
obj* x_83; obj* x_84; obj* x_85; 
x_83 = lean::cnstr_get(x_10, 0);
lean::inc(x_83);
lean::dec(x_10);
x_84 = lean::cnstr_get(x_83, 1);
lean::inc(x_84);
lean::dec(x_83);
x_85 = l_Lean_Elaborator_attrsToPexpr(x_84, x_2, x_3, x_4);
if (lean::obj_tag(x_85) == 0)
{
uint8 x_86; 
lean::dec(x_62);
x_86 = !lean::is_exclusive(x_85);
if (x_86 == 0)
{
return x_85;
}
else
{
obj* x_87; obj* x_88; 
x_87 = lean::cnstr_get(x_85, 0);
lean::inc(x_87);
lean::dec(x_85);
x_88 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_88, 0, x_87);
return x_88;
}
}
else
{
uint8 x_89; 
x_89 = !lean::is_exclusive(x_85);
if (x_89 == 0)
{
obj* x_90; uint8 x_91; 
x_90 = lean::cnstr_get(x_85, 0);
x_91 = !lean::is_exclusive(x_90);
if (x_91 == 0)
{
obj* x_92; obj* x_93; 
x_92 = lean::cnstr_get(x_90, 0);
x_93 = lean_expr_mk_mdata(x_62, x_92);
lean::cnstr_set(x_90, 0, x_93);
return x_85;
}
else
{
obj* x_94; obj* x_95; obj* x_96; obj* x_97; 
x_94 = lean::cnstr_get(x_90, 0);
x_95 = lean::cnstr_get(x_90, 1);
lean::inc(x_95);
lean::inc(x_94);
lean::dec(x_90);
x_96 = lean_expr_mk_mdata(x_62, x_94);
x_97 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_97, 0, x_96);
lean::cnstr_set(x_97, 1, x_95);
lean::cnstr_set(x_85, 0, x_97);
return x_85;
}
}
else
{
obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; obj* x_104; 
x_98 = lean::cnstr_get(x_85, 0);
lean::inc(x_98);
lean::dec(x_85);
x_99 = lean::cnstr_get(x_98, 0);
lean::inc(x_99);
x_100 = lean::cnstr_get(x_98, 1);
lean::inc(x_100);
if (lean::is_exclusive(x_98)) {
 lean::cnstr_release(x_98, 0);
 lean::cnstr_release(x_98, 1);
 x_101 = x_98;
} else {
 lean::dec_ref(x_98);
 x_101 = lean::box(0);
}
x_102 = lean_expr_mk_mdata(x_62, x_99);
if (lean::is_scalar(x_101)) {
 x_103 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_103 = x_101;
}
lean::cnstr_set(x_103, 0, x_102);
lean::cnstr_set(x_103, 1, x_100);
x_104 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_104, 0, x_103);
return x_104;
}
}
}
}
}
}
}
}
obj* l_Lean_Elaborator_declModifiersToPexpr___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_declModifiersToPexpr(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_List_map___main___at_Lean_Elaborator_identUnivParamsToPexpr___spec__1(obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
uint8 x_3; 
x_3 = !lean::is_exclusive(x_1);
if (x_3 == 0)
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_4 = lean::cnstr_get(x_1, 0);
x_5 = lean::cnstr_get(x_1, 1);
x_6 = l_Lean_Elaborator_mangleIdent(x_4);
x_7 = level_mk_param(x_6);
x_8 = l_List_map___main___at_Lean_Elaborator_identUnivParamsToPexpr___spec__1(x_5);
lean::cnstr_set(x_1, 1, x_8);
lean::cnstr_set(x_1, 0, x_7);
return x_1;
}
else
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_9 = lean::cnstr_get(x_1, 0);
x_10 = lean::cnstr_get(x_1, 1);
lean::inc(x_10);
lean::inc(x_9);
lean::dec(x_1);
x_11 = l_Lean_Elaborator_mangleIdent(x_9);
x_12 = level_mk_param(x_11);
x_13 = l_List_map___main___at_Lean_Elaborator_identUnivParamsToPexpr___spec__1(x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
return x_14;
}
}
}
}
obj* l_Lean_Elaborator_identUnivParamsToPexpr(obj* x_1) {
_start:
{
obj* x_2; obj* x_3; obj* x_4; 
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
x_3 = l_Lean_Elaborator_mangleIdent(x_2);
x_4 = lean::cnstr_get(x_1, 1);
lean::inc(x_4);
lean::dec(x_1);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; obj* x_6; 
x_5 = lean::box(0);
x_6 = lean_expr_mk_const(x_3, x_5);
return x_6;
}
else
{
obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_7 = lean::cnstr_get(x_4, 0);
lean::inc(x_7);
lean::dec(x_4);
x_8 = lean::cnstr_get(x_7, 1);
lean::inc(x_8);
lean::dec(x_7);
x_9 = l_List_map___main___at_Lean_Elaborator_identUnivParamsToPexpr___spec__1(x_8);
x_10 = lean_expr_mk_const(x_3, x_9);
return x_10;
}
}
}
obj* l_Lean_Elaborator_locally(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_currentScope(x_2, x_3, x_4);
if (lean::obj_tag(x_5) == 0)
{
uint8 x_6; 
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_1);
x_6 = !lean::is_exclusive(x_5);
if (x_6 == 0)
{
return x_5;
}
else
{
obj* x_7; obj* x_8; 
x_7 = lean::cnstr_get(x_5, 0);
lean::inc(x_7);
lean::dec(x_5);
x_8 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
}
else
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_9 = lean::cnstr_get(x_5, 0);
lean::inc(x_9);
lean::dec(x_5);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
x_11 = lean::cnstr_get(x_9, 1);
lean::inc(x_11);
lean::dec(x_9);
lean::inc(x_3);
lean::inc(x_2);
x_12 = lean::apply_3(x_1, x_2, x_3, x_11);
if (lean::obj_tag(x_12) == 0)
{
uint8 x_13; 
lean::dec(x_10);
lean::dec(x_3);
lean::dec(x_2);
x_13 = !lean::is_exclusive(x_12);
if (x_13 == 0)
{
return x_12;
}
else
{
obj* x_14; obj* x_15; 
x_14 = lean::cnstr_get(x_12, 0);
lean::inc(x_14);
lean::dec(x_12);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_14);
return x_15;
}
}
else
{
obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_16 = lean::cnstr_get(x_12, 0);
lean::inc(x_16);
lean::dec(x_12);
x_17 = lean::cnstr_get(x_16, 1);
lean::inc(x_17);
lean::dec(x_16);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_fix1___rarg___lambda__1___boxed), 2, 1);
lean::closure_set(x_18, 0, x_10);
x_19 = l_Lean_Elaborator_modifyCurrentScope(x_18, x_2, x_3, x_17);
lean::dec(x_3);
lean::dec(x_2);
return x_19;
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_simpleBindersToPexpr___spec__1(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
uint8 x_8; 
x_8 = !lean::is_exclusive(x_1);
if (x_8 == 0)
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_9 = lean::cnstr_get(x_1, 0);
x_10 = lean::cnstr_get(x_1, 1);
x_11 = l_Lean_Parser_Term_simpleBinder_View_toBinderInfo___main(x_9);
lean::dec(x_9);
x_12 = lean::cnstr_get(x_11, 1);
lean::inc(x_12);
x_13 = lean::cnstr_get(x_11, 0);
lean::inc(x_13);
lean::dec(x_11);
x_14 = lean::cnstr_get(x_12, 0);
lean::inc(x_14);
x_15 = lean::cnstr_get(x_12, 1);
lean::inc(x_15);
lean::dec(x_12);
x_16 = l_Lean_Elaborator_mangleIdent(x_14);
x_17 = l_Lean_Elaborator_toPexpr___main(x_15, x_2, x_3, x_4);
if (lean::obj_tag(x_17) == 0)
{
uint8 x_18; 
lean::dec(x_16);
lean::dec(x_13);
lean::free_heap_obj(x_1);
lean::dec(x_10);
x_18 = !lean::is_exclusive(x_17);
if (x_18 == 0)
{
return x_17;
}
else
{
obj* x_19; obj* x_20; 
x_19 = lean::cnstr_get(x_17, 0);
lean::inc(x_19);
lean::dec(x_17);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
else
{
obj* x_21; obj* x_22; obj* x_23; uint8 x_24; obj* x_25; obj* x_26; 
x_21 = lean::cnstr_get(x_17, 0);
lean::inc(x_21);
lean::dec(x_17);
x_22 = lean::cnstr_get(x_21, 0);
lean::inc(x_22);
x_23 = lean::cnstr_get(x_21, 1);
lean::inc(x_23);
lean::dec(x_21);
x_24 = lean::unbox(x_13);
lean::dec(x_13);
lean::inc(x_16);
x_25 = lean_expr_local(x_16, x_16, x_22, x_24);
x_26 = l_List_mmap___main___at_Lean_Elaborator_simpleBindersToPexpr___spec__1(x_10, x_2, x_3, x_23);
if (lean::obj_tag(x_26) == 0)
{
uint8 x_27; 
lean::dec(x_25);
lean::free_heap_obj(x_1);
x_27 = !lean::is_exclusive(x_26);
if (x_27 == 0)
{
return x_26;
}
else
{
obj* x_28; obj* x_29; 
x_28 = lean::cnstr_get(x_26, 0);
lean::inc(x_28);
lean::dec(x_26);
x_29 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_29, 0, x_28);
return x_29;
}
}
else
{
uint8 x_30; 
x_30 = !lean::is_exclusive(x_26);
if (x_30 == 0)
{
obj* x_31; uint8 x_32; 
x_31 = lean::cnstr_get(x_26, 0);
x_32 = !lean::is_exclusive(x_31);
if (x_32 == 0)
{
obj* x_33; 
x_33 = lean::cnstr_get(x_31, 0);
lean::cnstr_set(x_1, 1, x_33);
lean::cnstr_set(x_1, 0, x_25);
lean::cnstr_set(x_31, 0, x_1);
return x_26;
}
else
{
obj* x_34; obj* x_35; obj* x_36; 
x_34 = lean::cnstr_get(x_31, 0);
x_35 = lean::cnstr_get(x_31, 1);
lean::inc(x_35);
lean::inc(x_34);
lean::dec(x_31);
lean::cnstr_set(x_1, 1, x_34);
lean::cnstr_set(x_1, 0, x_25);
x_36 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_36, 0, x_1);
lean::cnstr_set(x_36, 1, x_35);
lean::cnstr_set(x_26, 0, x_36);
return x_26;
}
}
else
{
obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
x_37 = lean::cnstr_get(x_26, 0);
lean::inc(x_37);
lean::dec(x_26);
x_38 = lean::cnstr_get(x_37, 0);
lean::inc(x_38);
x_39 = lean::cnstr_get(x_37, 1);
lean::inc(x_39);
if (lean::is_exclusive(x_37)) {
 lean::cnstr_release(x_37, 0);
 lean::cnstr_release(x_37, 1);
 x_40 = x_37;
} else {
 lean::dec_ref(x_37);
 x_40 = lean::box(0);
}
lean::cnstr_set(x_1, 1, x_38);
lean::cnstr_set(x_1, 0, x_25);
if (lean::is_scalar(x_40)) {
 x_41 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_41 = x_40;
}
lean::cnstr_set(x_41, 0, x_1);
lean::cnstr_set(x_41, 1, x_39);
x_42 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_42, 0, x_41);
return x_42;
}
}
}
}
else
{
obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; 
x_43 = lean::cnstr_get(x_1, 0);
x_44 = lean::cnstr_get(x_1, 1);
lean::inc(x_44);
lean::inc(x_43);
lean::dec(x_1);
x_45 = l_Lean_Parser_Term_simpleBinder_View_toBinderInfo___main(x_43);
lean::dec(x_43);
x_46 = lean::cnstr_get(x_45, 1);
lean::inc(x_46);
x_47 = lean::cnstr_get(x_45, 0);
lean::inc(x_47);
lean::dec(x_45);
x_48 = lean::cnstr_get(x_46, 0);
lean::inc(x_48);
x_49 = lean::cnstr_get(x_46, 1);
lean::inc(x_49);
lean::dec(x_46);
x_50 = l_Lean_Elaborator_mangleIdent(x_48);
x_51 = l_Lean_Elaborator_toPexpr___main(x_49, x_2, x_3, x_4);
if (lean::obj_tag(x_51) == 0)
{
obj* x_52; obj* x_53; obj* x_54; 
lean::dec(x_50);
lean::dec(x_47);
lean::dec(x_44);
x_52 = lean::cnstr_get(x_51, 0);
lean::inc(x_52);
if (lean::is_exclusive(x_51)) {
 lean::cnstr_release(x_51, 0);
 x_53 = x_51;
} else {
 lean::dec_ref(x_51);
 x_53 = lean::box(0);
}
if (lean::is_scalar(x_53)) {
 x_54 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_54 = x_53;
}
lean::cnstr_set(x_54, 0, x_52);
return x_54;
}
else
{
obj* x_55; obj* x_56; obj* x_57; uint8 x_58; obj* x_59; obj* x_60; 
x_55 = lean::cnstr_get(x_51, 0);
lean::inc(x_55);
lean::dec(x_51);
x_56 = lean::cnstr_get(x_55, 0);
lean::inc(x_56);
x_57 = lean::cnstr_get(x_55, 1);
lean::inc(x_57);
lean::dec(x_55);
x_58 = lean::unbox(x_47);
lean::dec(x_47);
lean::inc(x_50);
x_59 = lean_expr_local(x_50, x_50, x_56, x_58);
x_60 = l_List_mmap___main___at_Lean_Elaborator_simpleBindersToPexpr___spec__1(x_44, x_2, x_3, x_57);
if (lean::obj_tag(x_60) == 0)
{
obj* x_61; obj* x_62; obj* x_63; 
lean::dec(x_59);
x_61 = lean::cnstr_get(x_60, 0);
lean::inc(x_61);
if (lean::is_exclusive(x_60)) {
 lean::cnstr_release(x_60, 0);
 x_62 = x_60;
} else {
 lean::dec_ref(x_60);
 x_62 = lean::box(0);
}
if (lean::is_scalar(x_62)) {
 x_63 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_63 = x_62;
}
lean::cnstr_set(x_63, 0, x_61);
return x_63;
}
else
{
obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; 
x_64 = lean::cnstr_get(x_60, 0);
lean::inc(x_64);
if (lean::is_exclusive(x_60)) {
 lean::cnstr_release(x_60, 0);
 x_65 = x_60;
} else {
 lean::dec_ref(x_60);
 x_65 = lean::box(0);
}
x_66 = lean::cnstr_get(x_64, 0);
lean::inc(x_66);
x_67 = lean::cnstr_get(x_64, 1);
lean::inc(x_67);
if (lean::is_exclusive(x_64)) {
 lean::cnstr_release(x_64, 0);
 lean::cnstr_release(x_64, 1);
 x_68 = x_64;
} else {
 lean::dec_ref(x_64);
 x_68 = lean::box(0);
}
x_69 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_69, 0, x_59);
lean::cnstr_set(x_69, 1, x_66);
if (lean::is_scalar(x_68)) {
 x_70 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_70 = x_68;
}
lean::cnstr_set(x_70, 0, x_69);
lean::cnstr_set(x_70, 1, x_67);
if (lean::is_scalar(x_65)) {
 x_71 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_71 = x_65;
}
lean::cnstr_set(x_71, 0, x_70);
return x_71;
}
}
}
}
}
}
obj* l_Lean_Elaborator_simpleBindersToPexpr(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_mmap___main___at_Lean_Elaborator_simpleBindersToPexpr___spec__1(x_1, x_2, x_3, x_4);
if (lean::obj_tag(x_5) == 0)
{
uint8 x_6; 
x_6 = !lean::is_exclusive(x_5);
if (x_6 == 0)
{
return x_5;
}
else
{
obj* x_7; obj* x_8; 
x_7 = lean::cnstr_get(x_5, 0);
lean::inc(x_7);
lean::dec(x_5);
x_8 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
}
else
{
uint8 x_9; 
x_9 = !lean::is_exclusive(x_5);
if (x_9 == 0)
{
obj* x_10; uint8 x_11; 
x_10 = lean::cnstr_get(x_5, 0);
x_11 = !lean::is_exclusive(x_10);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; 
x_12 = lean::cnstr_get(x_10, 0);
x_13 = l_Lean_Elaborator_mkEqns___closed__1;
x_14 = l_Lean_Expr_mkCapp(x_13, x_12);
lean::cnstr_set(x_10, 0, x_14);
return x_5;
}
else
{
obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_15 = lean::cnstr_get(x_10, 0);
x_16 = lean::cnstr_get(x_10, 1);
lean::inc(x_16);
lean::inc(x_15);
lean::dec(x_10);
x_17 = l_Lean_Elaborator_mkEqns___closed__1;
x_18 = l_Lean_Expr_mkCapp(x_17, x_15);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_16);
lean::cnstr_set(x_5, 0, x_19);
return x_5;
}
}
else
{
obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_20 = lean::cnstr_get(x_5, 0);
lean::inc(x_20);
lean::dec(x_5);
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
x_22 = lean::cnstr_get(x_20, 1);
lean::inc(x_22);
if (lean::is_exclusive(x_20)) {
 lean::cnstr_release(x_20, 0);
 lean::cnstr_release(x_20, 1);
 x_23 = x_20;
} else {
 lean::dec_ref(x_20);
 x_23 = lean::box(0);
}
x_24 = l_Lean_Elaborator_mkEqns___closed__1;
x_25 = l_Lean_Expr_mkCapp(x_24, x_21);
if (lean::is_scalar(x_23)) {
 x_26 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_26 = x_23;
}
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_22);
x_27 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_27, 0, x_26);
return x_27;
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_simpleBindersToPexpr___spec__1___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_mmap___main___at_Lean_Elaborator_simpleBindersToPexpr___spec__1(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_simpleBindersToPexpr___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_simpleBindersToPexpr(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_elabDefLike___spec__1(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_6; obj* x_7; obj* x_8; 
lean::dec(x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
else
{
uint8 x_9; 
x_9 = !lean::is_exclusive(x_2);
if (x_9 == 0)
{
obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_10 = lean::cnstr_get(x_2, 0);
x_11 = lean::cnstr_get(x_2, 1);
x_12 = lean::cnstr_get(x_10, 1);
lean::inc(x_12);
x_13 = l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__1(x_12, x_3, x_4, x_5);
if (lean::obj_tag(x_13) == 0)
{
uint8 x_14; 
lean::free_heap_obj(x_2);
lean::dec(x_11);
lean::dec(x_10);
lean::dec(x_1);
x_14 = !lean::is_exclusive(x_13);
if (x_14 == 0)
{
return x_13;
}
else
{
obj* x_15; obj* x_16; 
x_15 = lean::cnstr_get(x_13, 0);
lean::inc(x_15);
lean::dec(x_13);
x_16 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_16, 0, x_15);
return x_16;
}
}
else
{
obj* x_17; uint8 x_18; 
x_17 = lean::cnstr_get(x_13, 0);
lean::inc(x_17);
lean::dec(x_13);
x_18 = !lean::is_exclusive(x_17);
if (x_18 == 0)
{
obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_19 = lean::cnstr_get(x_17, 0);
x_20 = lean::cnstr_get(x_17, 1);
x_21 = lean::cnstr_get(x_10, 3);
lean::inc(x_21);
lean::dec(x_10);
x_22 = l_Lean_Elaborator_toPexpr___main(x_21, x_3, x_4, x_20);
if (lean::obj_tag(x_22) == 0)
{
uint8 x_23; 
lean::free_heap_obj(x_17);
lean::dec(x_19);
lean::free_heap_obj(x_2);
lean::dec(x_11);
lean::dec(x_1);
x_23 = !lean::is_exclusive(x_22);
if (x_23 == 0)
{
return x_22;
}
else
{
obj* x_24; obj* x_25; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_25 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_25, 0, x_24);
return x_25;
}
}
else
{
obj* x_26; uint8 x_27; 
x_26 = lean::cnstr_get(x_22, 0);
lean::inc(x_26);
lean::dec(x_22);
x_27 = !lean::is_exclusive(x_26);
if (x_27 == 0)
{
obj* x_28; obj* x_29; obj* x_30; 
x_28 = lean::cnstr_get(x_26, 0);
x_29 = lean::cnstr_get(x_26, 1);
lean::cnstr_set(x_26, 1, x_28);
lean::cnstr_set(x_26, 0, x_19);
lean::inc(x_1);
lean::cnstr_set(x_17, 1, x_26);
lean::cnstr_set(x_17, 0, x_1);
x_30 = l_List_mmap___main___at_Lean_Elaborator_elabDefLike___spec__1(x_1, x_11, x_3, x_4, x_29);
if (lean::obj_tag(x_30) == 0)
{
uint8 x_31; 
lean::dec(x_17);
lean::free_heap_obj(x_2);
x_31 = !lean::is_exclusive(x_30);
if (x_31 == 0)
{
return x_30;
}
else
{
obj* x_32; obj* x_33; 
x_32 = lean::cnstr_get(x_30, 0);
lean::inc(x_32);
lean::dec(x_30);
x_33 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_33, 0, x_32);
return x_33;
}
}
else
{
uint8 x_34; 
x_34 = !lean::is_exclusive(x_30);
if (x_34 == 0)
{
obj* x_35; uint8 x_36; 
x_35 = lean::cnstr_get(x_30, 0);
x_36 = !lean::is_exclusive(x_35);
if (x_36 == 0)
{
obj* x_37; 
x_37 = lean::cnstr_get(x_35, 0);
lean::cnstr_set(x_2, 1, x_37);
lean::cnstr_set(x_2, 0, x_17);
lean::cnstr_set(x_35, 0, x_2);
return x_30;
}
else
{
obj* x_38; obj* x_39; obj* x_40; 
x_38 = lean::cnstr_get(x_35, 0);
x_39 = lean::cnstr_get(x_35, 1);
lean::inc(x_39);
lean::inc(x_38);
lean::dec(x_35);
lean::cnstr_set(x_2, 1, x_38);
lean::cnstr_set(x_2, 0, x_17);
x_40 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_40, 0, x_2);
lean::cnstr_set(x_40, 1, x_39);
lean::cnstr_set(x_30, 0, x_40);
return x_30;
}
}
else
{
obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; 
x_41 = lean::cnstr_get(x_30, 0);
lean::inc(x_41);
lean::dec(x_30);
x_42 = lean::cnstr_get(x_41, 0);
lean::inc(x_42);
x_43 = lean::cnstr_get(x_41, 1);
lean::inc(x_43);
if (lean::is_exclusive(x_41)) {
 lean::cnstr_release(x_41, 0);
 lean::cnstr_release(x_41, 1);
 x_44 = x_41;
} else {
 lean::dec_ref(x_41);
 x_44 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_42);
lean::cnstr_set(x_2, 0, x_17);
if (lean::is_scalar(x_44)) {
 x_45 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_45 = x_44;
}
lean::cnstr_set(x_45, 0, x_2);
lean::cnstr_set(x_45, 1, x_43);
x_46 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_46, 0, x_45);
return x_46;
}
}
}
else
{
obj* x_47; obj* x_48; obj* x_49; obj* x_50; 
x_47 = lean::cnstr_get(x_26, 0);
x_48 = lean::cnstr_get(x_26, 1);
lean::inc(x_48);
lean::inc(x_47);
lean::dec(x_26);
x_49 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_49, 0, x_19);
lean::cnstr_set(x_49, 1, x_47);
lean::inc(x_1);
lean::cnstr_set(x_17, 1, x_49);
lean::cnstr_set(x_17, 0, x_1);
x_50 = l_List_mmap___main___at_Lean_Elaborator_elabDefLike___spec__1(x_1, x_11, x_3, x_4, x_48);
if (lean::obj_tag(x_50) == 0)
{
obj* x_51; obj* x_52; obj* x_53; 
lean::dec(x_17);
lean::free_heap_obj(x_2);
x_51 = lean::cnstr_get(x_50, 0);
lean::inc(x_51);
if (lean::is_exclusive(x_50)) {
 lean::cnstr_release(x_50, 0);
 x_52 = x_50;
} else {
 lean::dec_ref(x_50);
 x_52 = lean::box(0);
}
if (lean::is_scalar(x_52)) {
 x_53 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_53 = x_52;
}
lean::cnstr_set(x_53, 0, x_51);
return x_53;
}
else
{
obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; 
x_54 = lean::cnstr_get(x_50, 0);
lean::inc(x_54);
if (lean::is_exclusive(x_50)) {
 lean::cnstr_release(x_50, 0);
 x_55 = x_50;
} else {
 lean::dec_ref(x_50);
 x_55 = lean::box(0);
}
x_56 = lean::cnstr_get(x_54, 0);
lean::inc(x_56);
x_57 = lean::cnstr_get(x_54, 1);
lean::inc(x_57);
if (lean::is_exclusive(x_54)) {
 lean::cnstr_release(x_54, 0);
 lean::cnstr_release(x_54, 1);
 x_58 = x_54;
} else {
 lean::dec_ref(x_54);
 x_58 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_56);
lean::cnstr_set(x_2, 0, x_17);
if (lean::is_scalar(x_58)) {
 x_59 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_59 = x_58;
}
lean::cnstr_set(x_59, 0, x_2);
lean::cnstr_set(x_59, 1, x_57);
if (lean::is_scalar(x_55)) {
 x_60 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_60 = x_55;
}
lean::cnstr_set(x_60, 0, x_59);
return x_60;
}
}
}
}
else
{
obj* x_61; obj* x_62; obj* x_63; obj* x_64; 
x_61 = lean::cnstr_get(x_17, 0);
x_62 = lean::cnstr_get(x_17, 1);
lean::inc(x_62);
lean::inc(x_61);
lean::dec(x_17);
x_63 = lean::cnstr_get(x_10, 3);
lean::inc(x_63);
lean::dec(x_10);
x_64 = l_Lean_Elaborator_toPexpr___main(x_63, x_3, x_4, x_62);
if (lean::obj_tag(x_64) == 0)
{
obj* x_65; obj* x_66; obj* x_67; 
lean::dec(x_61);
lean::free_heap_obj(x_2);
lean::dec(x_11);
lean::dec(x_1);
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
if (lean::is_exclusive(x_64)) {
 lean::cnstr_release(x_64, 0);
 x_66 = x_64;
} else {
 lean::dec_ref(x_64);
 x_66 = lean::box(0);
}
if (lean::is_scalar(x_66)) {
 x_67 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_67 = x_66;
}
lean::cnstr_set(x_67, 0, x_65);
return x_67;
}
else
{
obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; 
x_68 = lean::cnstr_get(x_64, 0);
lean::inc(x_68);
lean::dec(x_64);
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
x_70 = lean::cnstr_get(x_68, 1);
lean::inc(x_70);
if (lean::is_exclusive(x_68)) {
 lean::cnstr_release(x_68, 0);
 lean::cnstr_release(x_68, 1);
 x_71 = x_68;
} else {
 lean::dec_ref(x_68);
 x_71 = lean::box(0);
}
if (lean::is_scalar(x_71)) {
 x_72 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_72 = x_71;
}
lean::cnstr_set(x_72, 0, x_61);
lean::cnstr_set(x_72, 1, x_69);
lean::inc(x_1);
x_73 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_73, 0, x_1);
lean::cnstr_set(x_73, 1, x_72);
x_74 = l_List_mmap___main___at_Lean_Elaborator_elabDefLike___spec__1(x_1, x_11, x_3, x_4, x_70);
if (lean::obj_tag(x_74) == 0)
{
obj* x_75; obj* x_76; obj* x_77; 
lean::dec(x_73);
lean::free_heap_obj(x_2);
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
if (lean::is_exclusive(x_74)) {
 lean::cnstr_release(x_74, 0);
 x_76 = x_74;
} else {
 lean::dec_ref(x_74);
 x_76 = lean::box(0);
}
if (lean::is_scalar(x_76)) {
 x_77 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_77 = x_76;
}
lean::cnstr_set(x_77, 0, x_75);
return x_77;
}
else
{
obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; 
x_78 = lean::cnstr_get(x_74, 0);
lean::inc(x_78);
if (lean::is_exclusive(x_74)) {
 lean::cnstr_release(x_74, 0);
 x_79 = x_74;
} else {
 lean::dec_ref(x_74);
 x_79 = lean::box(0);
}
x_80 = lean::cnstr_get(x_78, 0);
lean::inc(x_80);
x_81 = lean::cnstr_get(x_78, 1);
lean::inc(x_81);
if (lean::is_exclusive(x_78)) {
 lean::cnstr_release(x_78, 0);
 lean::cnstr_release(x_78, 1);
 x_82 = x_78;
} else {
 lean::dec_ref(x_78);
 x_82 = lean::box(0);
}
lean::cnstr_set(x_2, 1, x_80);
lean::cnstr_set(x_2, 0, x_73);
if (lean::is_scalar(x_82)) {
 x_83 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_83 = x_82;
}
lean::cnstr_set(x_83, 0, x_2);
lean::cnstr_set(x_83, 1, x_81);
if (lean::is_scalar(x_79)) {
 x_84 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_84 = x_79;
}
lean::cnstr_set(x_84, 0, x_83);
return x_84;
}
}
}
}
}
else
{
obj* x_85; obj* x_86; obj* x_87; obj* x_88; 
x_85 = lean::cnstr_get(x_2, 0);
x_86 = lean::cnstr_get(x_2, 1);
lean::inc(x_86);
lean::inc(x_85);
lean::dec(x_2);
x_87 = lean::cnstr_get(x_85, 1);
lean::inc(x_87);
x_88 = l_List_mmap___main___at_Lean_Elaborator_attrsToPexpr___spec__1(x_87, x_3, x_4, x_5);
if (lean::obj_tag(x_88) == 0)
{
obj* x_89; obj* x_90; obj* x_91; 
lean::dec(x_86);
lean::dec(x_85);
lean::dec(x_1);
x_89 = lean::cnstr_get(x_88, 0);
lean::inc(x_89);
if (lean::is_exclusive(x_88)) {
 lean::cnstr_release(x_88, 0);
 x_90 = x_88;
} else {
 lean::dec_ref(x_88);
 x_90 = lean::box(0);
}
if (lean::is_scalar(x_90)) {
 x_91 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_91 = x_90;
}
lean::cnstr_set(x_91, 0, x_89);
return x_91;
}
else
{
obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; 
x_92 = lean::cnstr_get(x_88, 0);
lean::inc(x_92);
lean::dec(x_88);
x_93 = lean::cnstr_get(x_92, 0);
lean::inc(x_93);
x_94 = lean::cnstr_get(x_92, 1);
lean::inc(x_94);
if (lean::is_exclusive(x_92)) {
 lean::cnstr_release(x_92, 0);
 lean::cnstr_release(x_92, 1);
 x_95 = x_92;
} else {
 lean::dec_ref(x_92);
 x_95 = lean::box(0);
}
x_96 = lean::cnstr_get(x_85, 3);
lean::inc(x_96);
lean::dec(x_85);
x_97 = l_Lean_Elaborator_toPexpr___main(x_96, x_3, x_4, x_94);
if (lean::obj_tag(x_97) == 0)
{
obj* x_98; obj* x_99; obj* x_100; 
lean::dec(x_95);
lean::dec(x_93);
lean::dec(x_86);
lean::dec(x_1);
x_98 = lean::cnstr_get(x_97, 0);
lean::inc(x_98);
if (lean::is_exclusive(x_97)) {
 lean::cnstr_release(x_97, 0);
 x_99 = x_97;
} else {
 lean::dec_ref(x_97);
 x_99 = lean::box(0);
}
if (lean::is_scalar(x_99)) {
 x_100 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_100 = x_99;
}
lean::cnstr_set(x_100, 0, x_98);
return x_100;
}
else
{
obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; 
x_101 = lean::cnstr_get(x_97, 0);
lean::inc(x_101);
lean::dec(x_97);
x_102 = lean::cnstr_get(x_101, 0);
lean::inc(x_102);
x_103 = lean::cnstr_get(x_101, 1);
lean::inc(x_103);
if (lean::is_exclusive(x_101)) {
 lean::cnstr_release(x_101, 0);
 lean::cnstr_release(x_101, 1);
 x_104 = x_101;
} else {
 lean::dec_ref(x_101);
 x_104 = lean::box(0);
}
if (lean::is_scalar(x_104)) {
 x_105 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_105 = x_104;
}
lean::cnstr_set(x_105, 0, x_93);
lean::cnstr_set(x_105, 1, x_102);
lean::inc(x_1);
if (lean::is_scalar(x_95)) {
 x_106 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_106 = x_95;
}
lean::cnstr_set(x_106, 0, x_1);
lean::cnstr_set(x_106, 1, x_105);
x_107 = l_List_mmap___main___at_Lean_Elaborator_elabDefLike___spec__1(x_1, x_86, x_3, x_4, x_103);
if (lean::obj_tag(x_107) == 0)
{
obj* x_108; obj* x_109; obj* x_110; 
lean::dec(x_106);
x_108 = lean::cnstr_get(x_107, 0);
lean::inc(x_108);
if (lean::is_exclusive(x_107)) {
 lean::cnstr_release(x_107, 0);
 x_109 = x_107;
} else {
 lean::dec_ref(x_107);
 x_109 = lean::box(0);
}
if (lean::is_scalar(x_109)) {
 x_110 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_110 = x_109;
}
lean::cnstr_set(x_110, 0, x_108);
return x_110;
}
else
{
obj* x_111; obj* x_112; obj* x_113; obj* x_114; obj* x_115; obj* x_116; obj* x_117; obj* x_118; 
x_111 = lean::cnstr_get(x_107, 0);
lean::inc(x_111);
if (lean::is_exclusive(x_107)) {
 lean::cnstr_release(x_107, 0);
 x_112 = x_107;
} else {
 lean::dec_ref(x_107);
 x_112 = lean::box(0);
}
x_113 = lean::cnstr_get(x_111, 0);
lean::inc(x_113);
x_114 = lean::cnstr_get(x_111, 1);
lean::inc(x_114);
if (lean::is_exclusive(x_111)) {
 lean::cnstr_release(x_111, 0);
 lean::cnstr_release(x_111, 1);
 x_115 = x_111;
} else {
 lean::dec_ref(x_111);
 x_115 = lean::box(0);
}
x_116 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_116, 0, x_106);
lean::cnstr_set(x_116, 1, x_113);
if (lean::is_scalar(x_115)) {
 x_117 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_117 = x_115;
}
lean::cnstr_set(x_117, 0, x_116);
lean::cnstr_set(x_117, 1, x_114);
if (lean::is_scalar(x_112)) {
 x_118 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_118 = x_112;
}
lean::cnstr_set(x_118, 0, x_117);
return x_118;
}
}
}
}
}
}
}
obj* l_List_map___main___at_Lean_Elaborator_elabDefLike___spec__2(obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
uint8 x_3; 
x_3 = !lean::is_exclusive(x_1);
if (x_3 == 0)
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_4 = lean::cnstr_get(x_1, 0);
x_5 = lean::cnstr_get(x_1, 1);
x_6 = l_Lean_Elaborator_mangleIdent(x_4);
x_7 = l_List_map___main___at_Lean_Elaborator_elabDefLike___spec__2(x_5);
lean::cnstr_set(x_1, 1, x_7);
lean::cnstr_set(x_1, 0, x_6);
return x_1;
}
else
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_8 = lean::cnstr_get(x_1, 0);
x_9 = lean::cnstr_get(x_1, 1);
lean::inc(x_9);
lean::inc(x_8);
lean::dec(x_1);
x_10 = l_Lean_Elaborator_mangleIdent(x_8);
x_11 = l_List_map___main___at_Lean_Elaborator_elabDefLike___spec__2(x_9);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
return x_12;
}
}
}
}
obj* l_List_foldl___main___at_Lean_Elaborator_elabDefLike___spec__3(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
return x_1;
}
else
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_3 = lean::cnstr_get(x_2, 0);
lean::inc(x_3);
x_4 = lean::cnstr_get(x_2, 1);
lean::inc(x_4);
lean::dec(x_2);
lean::inc(x_3);
x_5 = level_mk_param(x_3);
x_6 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
x_7 = l_Lean_Elaborator_OrderedRBMap_insert___rarg(x_6, x_1, x_3, x_5);
x_1 = x_7;
x_2 = x_4;
goto _start;
}
}
}
obj* l_Lean_Elaborator_elabDefLike___lambda__1(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; 
x_3 = !lean::is_exclusive(x_2);
if (x_3 == 0)
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_4 = lean::cnstr_get(x_2, 3);
x_5 = lean::cnstr_get(x_1, 1);
lean::inc(x_5);
lean::dec(x_1);
x_6 = l_List_map___main___at_Lean_Elaborator_elabDefLike___spec__2(x_5);
x_7 = l_List_foldl___main___at_Lean_Elaborator_elabDefLike___spec__3(x_4, x_6);
lean::cnstr_set(x_2, 3, x_7);
return x_2;
}
else
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
x_8 = lean::cnstr_get(x_2, 0);
x_9 = lean::cnstr_get(x_2, 1);
x_10 = lean::cnstr_get(x_2, 2);
x_11 = lean::cnstr_get(x_2, 3);
x_12 = lean::cnstr_get(x_2, 4);
x_13 = lean::cnstr_get(x_2, 5);
x_14 = lean::cnstr_get(x_2, 6);
x_15 = lean::cnstr_get(x_2, 7);
x_16 = lean::cnstr_get(x_2, 8);
lean::inc(x_16);
lean::inc(x_15);
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
lean::inc(x_8);
lean::dec(x_2);
x_17 = lean::cnstr_get(x_1, 1);
lean::inc(x_17);
lean::dec(x_1);
x_18 = l_List_map___main___at_Lean_Elaborator_elabDefLike___spec__2(x_17);
x_19 = l_List_foldl___main___at_Lean_Elaborator_elabDefLike___spec__3(x_11, x_18);
x_20 = lean::alloc_cnstr(0, 9, 0);
lean::cnstr_set(x_20, 0, x_8);
lean::cnstr_set(x_20, 1, x_9);
lean::cnstr_set(x_20, 2, x_10);
lean::cnstr_set(x_20, 3, x_19);
lean::cnstr_set(x_20, 4, x_12);
lean::cnstr_set(x_20, 5, x_13);
lean::cnstr_set(x_20, 6, x_14);
lean::cnstr_set(x_20, 7, x_15);
lean::cnstr_set(x_20, 8, x_16);
return x_20;
}
}
}
obj* _init_l_Lean_Elaborator_elabDefLike___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("elabDefLike: unexpected input");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_elabDefLike___closed__2() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_1 = lean::box(0);
x_2 = lean::mk_string("command");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("defs");
x_5 = lean_name_mk_string(x_1, x_4);
x_6 = lean::box(0);
x_7 = l_Lean_KVMap_setName(x_6, x_3, x_5);
return x_7;
}
}
obj* l_Lean_Elaborator_elabDefLike(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; 
x_8 = lean::cnstr_get(x_3, 3);
lean::inc(x_8);
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
if (lean::obj_tag(x_9) == 0)
{
obj* x_10; obj* x_11; obj* x_12; 
lean::dec(x_9);
lean::dec(x_8);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_1);
x_11 = l_Lean_Elaborator_elabDefLike___closed__1;
x_12 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_10, x_11, x_5, x_6, x_7);
lean::dec(x_7);
lean::dec(x_10);
return x_12;
}
else
{
obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_13 = lean::cnstr_get(x_3, 1);
lean::inc(x_13);
x_14 = lean::cnstr_get(x_3, 2);
lean::inc(x_14);
x_15 = lean::cnstr_get(x_3, 4);
lean::inc(x_15);
lean::dec(x_3);
x_16 = lean::cnstr_get(x_8, 1);
lean::inc(x_16);
lean::dec(x_8);
x_17 = lean::cnstr_get(x_9, 0);
lean::inc(x_17);
lean::dec(x_9);
x_18 = lean::box(0);
x_19 = l_Lean_Elaborator_declModifiersToPexpr(x_2, x_5, x_6, x_7);
if (lean::obj_tag(x_19) == 0)
{
uint8 x_20; 
lean::dec(x_17);
lean::dec(x_16);
lean::dec(x_15);
lean::dec(x_14);
lean::dec(x_13);
lean::dec(x_4);
lean::dec(x_1);
x_20 = !lean::is_exclusive(x_19);
if (x_20 == 0)
{
return x_19;
}
else
{
obj* x_21; obj* x_22; 
x_21 = lean::cnstr_get(x_19, 0);
lean::inc(x_21);
lean::dec(x_19);
x_22 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_22, 0, x_21);
return x_22;
}
}
else
{
obj* x_23; uint8 x_24; 
x_23 = lean::cnstr_get(x_19, 0);
lean::inc(x_23);
lean::dec(x_19);
x_24 = !lean::is_exclusive(x_23);
if (x_24 == 0)
{
obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_25 = lean::cnstr_get(x_23, 0);
x_26 = lean::cnstr_get(x_23, 1);
x_27 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_27, 0, x_4);
x_28 = lean_expr_mk_lit(x_27);
if (lean::obj_tag(x_13) == 0)
{
obj* x_144; 
x_144 = lean::box(0);
lean::cnstr_set(x_23, 0, x_144);
x_29 = x_23;
goto block_143;
}
else
{
obj* x_145; obj* x_146; obj* x_147; 
lean::free_heap_obj(x_23);
x_145 = lean::cnstr_get(x_13, 0);
lean::inc(x_145);
x_146 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_elabDefLike___lambda__1), 2, 1);
lean::closure_set(x_146, 0, x_145);
x_147 = l_Lean_Elaborator_modifyCurrentScope(x_146, x_5, x_6, x_26);
if (lean::obj_tag(x_147) == 0)
{
uint8 x_148; 
lean::dec(x_28);
lean::dec(x_25);
lean::dec(x_17);
lean::dec(x_16);
lean::dec(x_15);
lean::dec(x_14);
lean::dec(x_13);
lean::dec(x_1);
x_148 = !lean::is_exclusive(x_147);
if (x_148 == 0)
{
return x_147;
}
else
{
obj* x_149; obj* x_150; 
x_149 = lean::cnstr_get(x_147, 0);
lean::inc(x_149);
lean::dec(x_147);
x_150 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_150, 0, x_149);
return x_150;
}
}
else
{
obj* x_151; 
x_151 = lean::cnstr_get(x_147, 0);
lean::inc(x_151);
lean::dec(x_147);
x_29 = x_151;
goto block_143;
}
}
block_143:
{
obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; 
x_30 = lean::cnstr_get(x_29, 1);
lean::inc(x_30);
lean::dec(x_29);
x_31 = lean::cnstr_get(x_14, 0);
lean::inc(x_31);
lean::dec(x_14);
x_32 = l_Lean_Elaborator_mangleIdent(x_31);
x_33 = l_Lean_Expander_getOptType___main(x_16);
lean::dec(x_16);
x_34 = l_Lean_Elaborator_toPexpr___main(x_33, x_5, x_6, x_30);
if (lean::obj_tag(x_13) == 0)
{
x_35 = x_18;
goto block_139;
}
else
{
obj* x_140; obj* x_141; obj* x_142; 
x_140 = lean::cnstr_get(x_13, 0);
lean::inc(x_140);
lean::dec(x_13);
x_141 = lean::cnstr_get(x_140, 1);
lean::inc(x_141);
lean::dec(x_140);
x_142 = l_List_map___main___at_Lean_Elaborator_elabDefLike___spec__2(x_141);
x_35 = x_142;
goto block_139;
}
block_139:
{
if (lean::obj_tag(x_34) == 0)
{
uint8 x_36; 
lean::dec(x_35);
lean::dec(x_32);
lean::dec(x_28);
lean::dec(x_25);
lean::dec(x_17);
lean::dec(x_15);
lean::dec(x_1);
x_36 = !lean::is_exclusive(x_34);
if (x_36 == 0)
{
return x_34;
}
else
{
obj* x_37; obj* x_38; 
x_37 = lean::cnstr_get(x_34, 0);
lean::inc(x_37);
lean::dec(x_34);
x_38 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_38, 0, x_37);
return x_38;
}
}
else
{
obj* x_39; obj* x_40; uint8 x_41; 
x_39 = lean::cnstr_get(x_34, 0);
lean::inc(x_39);
lean::dec(x_34);
x_40 = l_Lean_Elaborator_namesToPexpr(x_35);
x_41 = !lean::is_exclusive(x_39);
if (x_41 == 0)
{
obj* x_42; obj* x_43; uint8 x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; 
x_42 = lean::cnstr_get(x_39, 0);
x_43 = lean::cnstr_get(x_39, 1);
x_44 = 4;
lean::inc(x_42);
lean::inc(x_32, 2);
x_45 = lean_expr_local(x_32, x_32, x_42, x_44);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_18);
x_47 = l_Lean_Elaborator_mkEqns___closed__1;
x_48 = l_Lean_Expr_mkCapp(x_47, x_46);
switch (lean::obj_tag(x_15)) {
case 0:
{
obj* x_70; obj* x_71; obj* x_72; 
lean::free_heap_obj(x_39);
lean::dec(x_42);
lean::dec(x_32);
x_70 = lean::cnstr_get(x_15, 0);
lean::inc(x_70);
lean::dec(x_15);
x_71 = lean::cnstr_get(x_70, 1);
lean::inc(x_71);
lean::dec(x_70);
x_72 = l_Lean_Elaborator_toPexpr___main(x_71, x_5, x_6, x_43);
if (lean::obj_tag(x_72) == 0)
{
uint8 x_73; 
lean::dec(x_48);
lean::dec(x_40);
lean::dec(x_28);
lean::dec(x_25);
lean::dec(x_17);
lean::dec(x_1);
x_73 = !lean::is_exclusive(x_72);
if (x_73 == 0)
{
return x_72;
}
else
{
obj* x_74; obj* x_75; 
x_74 = lean::cnstr_get(x_72, 0);
lean::inc(x_74);
lean::dec(x_72);
x_75 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_75, 0, x_74);
return x_75;
}
}
else
{
obj* x_76; 
x_76 = lean::cnstr_get(x_72, 0);
lean::inc(x_76);
lean::dec(x_72);
x_49 = x_76;
goto block_69;
}
}
case 1:
{
obj* x_77; 
lean::dec(x_32);
lean::dec(x_15);
x_77 = l_Lean_Elaborator_mkEqns(x_42, x_18);
lean::cnstr_set(x_39, 0, x_77);
x_49 = x_39;
goto block_69;
}
default: 
{
obj* x_78; obj* x_79; 
lean::free_heap_obj(x_39);
x_78 = lean::cnstr_get(x_15, 0);
lean::inc(x_78);
lean::dec(x_15);
x_79 = l_List_mmap___main___at_Lean_Elaborator_elabDefLike___spec__1(x_32, x_78, x_5, x_6, x_43);
if (lean::obj_tag(x_79) == 0)
{
uint8 x_80; 
lean::dec(x_48);
lean::dec(x_42);
lean::dec(x_40);
lean::dec(x_28);
lean::dec(x_25);
lean::dec(x_17);
lean::dec(x_1);
x_80 = !lean::is_exclusive(x_79);
if (x_80 == 0)
{
return x_79;
}
else
{
obj* x_81; obj* x_82; 
x_81 = lean::cnstr_get(x_79, 0);
lean::inc(x_81);
lean::dec(x_79);
x_82 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_82, 0, x_81);
return x_82;
}
}
else
{
obj* x_83; uint8 x_84; 
x_83 = lean::cnstr_get(x_79, 0);
lean::inc(x_83);
lean::dec(x_79);
x_84 = !lean::is_exclusive(x_83);
if (x_84 == 0)
{
obj* x_85; obj* x_86; 
x_85 = lean::cnstr_get(x_83, 0);
x_86 = l_Lean_Elaborator_mkEqns(x_42, x_85);
lean::cnstr_set(x_83, 0, x_86);
x_49 = x_83;
goto block_69;
}
else
{
obj* x_87; obj* x_88; obj* x_89; obj* x_90; 
x_87 = lean::cnstr_get(x_83, 0);
x_88 = lean::cnstr_get(x_83, 1);
lean::inc(x_88);
lean::inc(x_87);
lean::dec(x_83);
x_89 = l_Lean_Elaborator_mkEqns(x_42, x_87);
x_90 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_90, 0, x_89);
lean::cnstr_set(x_90, 1, x_88);
x_49 = x_90;
goto block_69;
}
}
}
}
block_69:
{
obj* x_50; obj* x_51; obj* x_52; 
x_50 = lean::cnstr_get(x_49, 0);
lean::inc(x_50);
x_51 = lean::cnstr_get(x_49, 1);
lean::inc(x_51);
lean::dec(x_49);
x_52 = l_Lean_Elaborator_simpleBindersToPexpr(x_17, x_5, x_6, x_51);
if (lean::obj_tag(x_52) == 0)
{
uint8 x_53; 
lean::dec(x_50);
lean::dec(x_48);
lean::dec(x_40);
lean::dec(x_28);
lean::dec(x_25);
lean::dec(x_1);
x_53 = !lean::is_exclusive(x_52);
if (x_53 == 0)
{
return x_52;
}
else
{
obj* x_54; obj* x_55; 
x_54 = lean::cnstr_get(x_52, 0);
lean::inc(x_54);
lean::dec(x_52);
x_55 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_55, 0, x_54);
return x_55;
}
}
else
{
obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; 
x_56 = lean::cnstr_get(x_52, 0);
lean::inc(x_56);
lean::dec(x_52);
x_57 = lean::cnstr_get(x_56, 0);
lean::inc(x_57);
x_58 = lean::cnstr_get(x_56, 1);
lean::inc(x_58);
lean::dec(x_56);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_50);
lean::cnstr_set(x_59, 1, x_18);
x_60 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_60, 0, x_57);
lean::cnstr_set(x_60, 1, x_59);
x_61 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_61, 0, x_48);
lean::cnstr_set(x_61, 1, x_60);
x_62 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_62, 0, x_40);
lean::cnstr_set(x_62, 1, x_61);
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_28);
lean::cnstr_set(x_63, 1, x_62);
x_64 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_64, 0, x_25);
lean::cnstr_set(x_64, 1, x_63);
x_65 = l_Lean_Expr_mkCapp(x_47, x_64);
x_66 = l_Lean_Elaborator_elabDefLike___closed__2;
x_67 = lean_expr_mk_mdata(x_66, x_65);
x_68 = l_Lean_Elaborator_oldElabCommand(x_1, x_67, x_5, x_6, x_58);
lean::dec(x_1);
return x_68;
}
}
}
else
{
obj* x_91; obj* x_92; uint8 x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; 
x_91 = lean::cnstr_get(x_39, 0);
x_92 = lean::cnstr_get(x_39, 1);
lean::inc(x_92);
lean::inc(x_91);
lean::dec(x_39);
x_93 = 4;
lean::inc(x_91);
lean::inc(x_32, 2);
x_94 = lean_expr_local(x_32, x_32, x_91, x_93);
x_95 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_95, 0, x_94);
lean::cnstr_set(x_95, 1, x_18);
x_96 = l_Lean_Elaborator_mkEqns___closed__1;
x_97 = l_Lean_Expr_mkCapp(x_96, x_95);
switch (lean::obj_tag(x_15)) {
case 0:
{
obj* x_119; obj* x_120; obj* x_121; 
lean::dec(x_91);
lean::dec(x_32);
x_119 = lean::cnstr_get(x_15, 0);
lean::inc(x_119);
lean::dec(x_15);
x_120 = lean::cnstr_get(x_119, 1);
lean::inc(x_120);
lean::dec(x_119);
x_121 = l_Lean_Elaborator_toPexpr___main(x_120, x_5, x_6, x_92);
if (lean::obj_tag(x_121) == 0)
{
obj* x_122; obj* x_123; obj* x_124; 
lean::dec(x_97);
lean::dec(x_40);
lean::dec(x_28);
lean::dec(x_25);
lean::dec(x_17);
lean::dec(x_1);
x_122 = lean::cnstr_get(x_121, 0);
lean::inc(x_122);
if (lean::is_exclusive(x_121)) {
 lean::cnstr_release(x_121, 0);
 x_123 = x_121;
} else {
 lean::dec_ref(x_121);
 x_123 = lean::box(0);
}
if (lean::is_scalar(x_123)) {
 x_124 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_124 = x_123;
}
lean::cnstr_set(x_124, 0, x_122);
return x_124;
}
else
{
obj* x_125; 
x_125 = lean::cnstr_get(x_121, 0);
lean::inc(x_125);
lean::dec(x_121);
x_98 = x_125;
goto block_118;
}
}
case 1:
{
obj* x_126; obj* x_127; 
lean::dec(x_32);
lean::dec(x_15);
x_126 = l_Lean_Elaborator_mkEqns(x_91, x_18);
x_127 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_127, 0, x_126);
lean::cnstr_set(x_127, 1, x_92);
x_98 = x_127;
goto block_118;
}
default: 
{
obj* x_128; obj* x_129; 
x_128 = lean::cnstr_get(x_15, 0);
lean::inc(x_128);
lean::dec(x_15);
x_129 = l_List_mmap___main___at_Lean_Elaborator_elabDefLike___spec__1(x_32, x_128, x_5, x_6, x_92);
if (lean::obj_tag(x_129) == 0)
{
obj* x_130; obj* x_131; obj* x_132; 
lean::dec(x_97);
lean::dec(x_91);
lean::dec(x_40);
lean::dec(x_28);
lean::dec(x_25);
lean::dec(x_17);
lean::dec(x_1);
x_130 = lean::cnstr_get(x_129, 0);
lean::inc(x_130);
if (lean::is_exclusive(x_129)) {
 lean::cnstr_release(x_129, 0);
 x_131 = x_129;
} else {
 lean::dec_ref(x_129);
 x_131 = lean::box(0);
}
if (lean::is_scalar(x_131)) {
 x_132 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_132 = x_131;
}
lean::cnstr_set(x_132, 0, x_130);
return x_132;
}
else
{
obj* x_133; obj* x_134; obj* x_135; obj* x_136; obj* x_137; obj* x_138; 
x_133 = lean::cnstr_get(x_129, 0);
lean::inc(x_133);
lean::dec(x_129);
x_134 = lean::cnstr_get(x_133, 0);
lean::inc(x_134);
x_135 = lean::cnstr_get(x_133, 1);
lean::inc(x_135);
if (lean::is_exclusive(x_133)) {
 lean::cnstr_release(x_133, 0);
 lean::cnstr_release(x_133, 1);
 x_136 = x_133;
} else {
 lean::dec_ref(x_133);
 x_136 = lean::box(0);
}
x_137 = l_Lean_Elaborator_mkEqns(x_91, x_134);
if (lean::is_scalar(x_136)) {
 x_138 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_138 = x_136;
}
lean::cnstr_set(x_138, 0, x_137);
lean::cnstr_set(x_138, 1, x_135);
x_98 = x_138;
goto block_118;
}
}
}
block_118:
{
obj* x_99; obj* x_100; obj* x_101; 
x_99 = lean::cnstr_get(x_98, 0);
lean::inc(x_99);
x_100 = lean::cnstr_get(x_98, 1);
lean::inc(x_100);
lean::dec(x_98);
x_101 = l_Lean_Elaborator_simpleBindersToPexpr(x_17, x_5, x_6, x_100);
if (lean::obj_tag(x_101) == 0)
{
obj* x_102; obj* x_103; obj* x_104; 
lean::dec(x_99);
lean::dec(x_97);
lean::dec(x_40);
lean::dec(x_28);
lean::dec(x_25);
lean::dec(x_1);
x_102 = lean::cnstr_get(x_101, 0);
lean::inc(x_102);
if (lean::is_exclusive(x_101)) {
 lean::cnstr_release(x_101, 0);
 x_103 = x_101;
} else {
 lean::dec_ref(x_101);
 x_103 = lean::box(0);
}
if (lean::is_scalar(x_103)) {
 x_104 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_104 = x_103;
}
lean::cnstr_set(x_104, 0, x_102);
return x_104;
}
else
{
obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; obj* x_115; obj* x_116; obj* x_117; 
x_105 = lean::cnstr_get(x_101, 0);
lean::inc(x_105);
lean::dec(x_101);
x_106 = lean::cnstr_get(x_105, 0);
lean::inc(x_106);
x_107 = lean::cnstr_get(x_105, 1);
lean::inc(x_107);
lean::dec(x_105);
x_108 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_108, 0, x_99);
lean::cnstr_set(x_108, 1, x_18);
x_109 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_109, 0, x_106);
lean::cnstr_set(x_109, 1, x_108);
x_110 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_110, 0, x_97);
lean::cnstr_set(x_110, 1, x_109);
x_111 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_111, 0, x_40);
lean::cnstr_set(x_111, 1, x_110);
x_112 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_112, 0, x_28);
lean::cnstr_set(x_112, 1, x_111);
x_113 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_113, 0, x_25);
lean::cnstr_set(x_113, 1, x_112);
x_114 = l_Lean_Expr_mkCapp(x_96, x_113);
x_115 = l_Lean_Elaborator_elabDefLike___closed__2;
x_116 = lean_expr_mk_mdata(x_115, x_114);
x_117 = l_Lean_Elaborator_oldElabCommand(x_1, x_116, x_5, x_6, x_107);
lean::dec(x_1);
return x_117;
}
}
}
}
}
}
}
else
{
obj* x_152; obj* x_153; obj* x_154; obj* x_155; obj* x_156; 
x_152 = lean::cnstr_get(x_23, 0);
x_153 = lean::cnstr_get(x_23, 1);
lean::inc(x_153);
lean::inc(x_152);
lean::dec(x_23);
x_154 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_154, 0, x_4);
x_155 = lean_expr_mk_lit(x_154);
if (lean::obj_tag(x_13) == 0)
{
obj* x_222; obj* x_223; 
x_222 = lean::box(0);
x_223 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_223, 0, x_222);
lean::cnstr_set(x_223, 1, x_153);
x_156 = x_223;
goto block_221;
}
else
{
obj* x_224; obj* x_225; obj* x_226; 
x_224 = lean::cnstr_get(x_13, 0);
lean::inc(x_224);
x_225 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_elabDefLike___lambda__1), 2, 1);
lean::closure_set(x_225, 0, x_224);
x_226 = l_Lean_Elaborator_modifyCurrentScope(x_225, x_5, x_6, x_153);
if (lean::obj_tag(x_226) == 0)
{
obj* x_227; obj* x_228; obj* x_229; 
lean::dec(x_155);
lean::dec(x_152);
lean::dec(x_17);
lean::dec(x_16);
lean::dec(x_15);
lean::dec(x_14);
lean::dec(x_13);
lean::dec(x_1);
x_227 = lean::cnstr_get(x_226, 0);
lean::inc(x_227);
if (lean::is_exclusive(x_226)) {
 lean::cnstr_release(x_226, 0);
 x_228 = x_226;
} else {
 lean::dec_ref(x_226);
 x_228 = lean::box(0);
}
if (lean::is_scalar(x_228)) {
 x_229 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_229 = x_228;
}
lean::cnstr_set(x_229, 0, x_227);
return x_229;
}
else
{
obj* x_230; 
x_230 = lean::cnstr_get(x_226, 0);
lean::inc(x_230);
lean::dec(x_226);
x_156 = x_230;
goto block_221;
}
}
block_221:
{
obj* x_157; obj* x_158; obj* x_159; obj* x_160; obj* x_161; obj* x_162; 
x_157 = lean::cnstr_get(x_156, 1);
lean::inc(x_157);
lean::dec(x_156);
x_158 = lean::cnstr_get(x_14, 0);
lean::inc(x_158);
lean::dec(x_14);
x_159 = l_Lean_Elaborator_mangleIdent(x_158);
x_160 = l_Lean_Expander_getOptType___main(x_16);
lean::dec(x_16);
x_161 = l_Lean_Elaborator_toPexpr___main(x_160, x_5, x_6, x_157);
if (lean::obj_tag(x_13) == 0)
{
x_162 = x_18;
goto block_217;
}
else
{
obj* x_218; obj* x_219; obj* x_220; 
x_218 = lean::cnstr_get(x_13, 0);
lean::inc(x_218);
lean::dec(x_13);
x_219 = lean::cnstr_get(x_218, 1);
lean::inc(x_219);
lean::dec(x_218);
x_220 = l_List_map___main___at_Lean_Elaborator_elabDefLike___spec__2(x_219);
x_162 = x_220;
goto block_217;
}
block_217:
{
if (lean::obj_tag(x_161) == 0)
{
obj* x_163; obj* x_164; obj* x_165; 
lean::dec(x_162);
lean::dec(x_159);
lean::dec(x_155);
lean::dec(x_152);
lean::dec(x_17);
lean::dec(x_15);
lean::dec(x_1);
x_163 = lean::cnstr_get(x_161, 0);
lean::inc(x_163);
if (lean::is_exclusive(x_161)) {
 lean::cnstr_release(x_161, 0);
 x_164 = x_161;
} else {
 lean::dec_ref(x_161);
 x_164 = lean::box(0);
}
if (lean::is_scalar(x_164)) {
 x_165 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_165 = x_164;
}
lean::cnstr_set(x_165, 0, x_163);
return x_165;
}
else
{
obj* x_166; obj* x_167; obj* x_168; obj* x_169; obj* x_170; uint8 x_171; obj* x_172; obj* x_173; obj* x_174; obj* x_175; obj* x_176; 
x_166 = lean::cnstr_get(x_161, 0);
lean::inc(x_166);
lean::dec(x_161);
x_167 = l_Lean_Elaborator_namesToPexpr(x_162);
x_168 = lean::cnstr_get(x_166, 0);
lean::inc(x_168);
x_169 = lean::cnstr_get(x_166, 1);
lean::inc(x_169);
if (lean::is_exclusive(x_166)) {
 lean::cnstr_release(x_166, 0);
 lean::cnstr_release(x_166, 1);
 x_170 = x_166;
} else {
 lean::dec_ref(x_166);
 x_170 = lean::box(0);
}
x_171 = 4;
lean::inc(x_168);
lean::inc(x_159, 2);
x_172 = lean_expr_local(x_159, x_159, x_168, x_171);
x_173 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_173, 0, x_172);
lean::cnstr_set(x_173, 1, x_18);
x_174 = l_Lean_Elaborator_mkEqns___closed__1;
x_175 = l_Lean_Expr_mkCapp(x_174, x_173);
switch (lean::obj_tag(x_15)) {
case 0:
{
obj* x_197; obj* x_198; obj* x_199; 
lean::dec(x_170);
lean::dec(x_168);
lean::dec(x_159);
x_197 = lean::cnstr_get(x_15, 0);
lean::inc(x_197);
lean::dec(x_15);
x_198 = lean::cnstr_get(x_197, 1);
lean::inc(x_198);
lean::dec(x_197);
x_199 = l_Lean_Elaborator_toPexpr___main(x_198, x_5, x_6, x_169);
if (lean::obj_tag(x_199) == 0)
{
obj* x_200; obj* x_201; obj* x_202; 
lean::dec(x_175);
lean::dec(x_167);
lean::dec(x_155);
lean::dec(x_152);
lean::dec(x_17);
lean::dec(x_1);
x_200 = lean::cnstr_get(x_199, 0);
lean::inc(x_200);
if (lean::is_exclusive(x_199)) {
 lean::cnstr_release(x_199, 0);
 x_201 = x_199;
} else {
 lean::dec_ref(x_199);
 x_201 = lean::box(0);
}
if (lean::is_scalar(x_201)) {
 x_202 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_202 = x_201;
}
lean::cnstr_set(x_202, 0, x_200);
return x_202;
}
else
{
obj* x_203; 
x_203 = lean::cnstr_get(x_199, 0);
lean::inc(x_203);
lean::dec(x_199);
x_176 = x_203;
goto block_196;
}
}
case 1:
{
obj* x_204; obj* x_205; 
lean::dec(x_159);
lean::dec(x_15);
x_204 = l_Lean_Elaborator_mkEqns(x_168, x_18);
if (lean::is_scalar(x_170)) {
 x_205 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_205 = x_170;
}
lean::cnstr_set(x_205, 0, x_204);
lean::cnstr_set(x_205, 1, x_169);
x_176 = x_205;
goto block_196;
}
default: 
{
obj* x_206; obj* x_207; 
lean::dec(x_170);
x_206 = lean::cnstr_get(x_15, 0);
lean::inc(x_206);
lean::dec(x_15);
x_207 = l_List_mmap___main___at_Lean_Elaborator_elabDefLike___spec__1(x_159, x_206, x_5, x_6, x_169);
if (lean::obj_tag(x_207) == 0)
{
obj* x_208; obj* x_209; obj* x_210; 
lean::dec(x_175);
lean::dec(x_168);
lean::dec(x_167);
lean::dec(x_155);
lean::dec(x_152);
lean::dec(x_17);
lean::dec(x_1);
x_208 = lean::cnstr_get(x_207, 0);
lean::inc(x_208);
if (lean::is_exclusive(x_207)) {
 lean::cnstr_release(x_207, 0);
 x_209 = x_207;
} else {
 lean::dec_ref(x_207);
 x_209 = lean::box(0);
}
if (lean::is_scalar(x_209)) {
 x_210 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_210 = x_209;
}
lean::cnstr_set(x_210, 0, x_208);
return x_210;
}
else
{
obj* x_211; obj* x_212; obj* x_213; obj* x_214; obj* x_215; obj* x_216; 
x_211 = lean::cnstr_get(x_207, 0);
lean::inc(x_211);
lean::dec(x_207);
x_212 = lean::cnstr_get(x_211, 0);
lean::inc(x_212);
x_213 = lean::cnstr_get(x_211, 1);
lean::inc(x_213);
if (lean::is_exclusive(x_211)) {
 lean::cnstr_release(x_211, 0);
 lean::cnstr_release(x_211, 1);
 x_214 = x_211;
} else {
 lean::dec_ref(x_211);
 x_214 = lean::box(0);
}
x_215 = l_Lean_Elaborator_mkEqns(x_168, x_212);
if (lean::is_scalar(x_214)) {
 x_216 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_216 = x_214;
}
lean::cnstr_set(x_216, 0, x_215);
lean::cnstr_set(x_216, 1, x_213);
x_176 = x_216;
goto block_196;
}
}
}
block_196:
{
obj* x_177; obj* x_178; obj* x_179; 
x_177 = lean::cnstr_get(x_176, 0);
lean::inc(x_177);
x_178 = lean::cnstr_get(x_176, 1);
lean::inc(x_178);
lean::dec(x_176);
x_179 = l_Lean_Elaborator_simpleBindersToPexpr(x_17, x_5, x_6, x_178);
if (lean::obj_tag(x_179) == 0)
{
obj* x_180; obj* x_181; obj* x_182; 
lean::dec(x_177);
lean::dec(x_175);
lean::dec(x_167);
lean::dec(x_155);
lean::dec(x_152);
lean::dec(x_1);
x_180 = lean::cnstr_get(x_179, 0);
lean::inc(x_180);
if (lean::is_exclusive(x_179)) {
 lean::cnstr_release(x_179, 0);
 x_181 = x_179;
} else {
 lean::dec_ref(x_179);
 x_181 = lean::box(0);
}
if (lean::is_scalar(x_181)) {
 x_182 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_182 = x_181;
}
lean::cnstr_set(x_182, 0, x_180);
return x_182;
}
else
{
obj* x_183; obj* x_184; obj* x_185; obj* x_186; obj* x_187; obj* x_188; obj* x_189; obj* x_190; obj* x_191; obj* x_192; obj* x_193; obj* x_194; obj* x_195; 
x_183 = lean::cnstr_get(x_179, 0);
lean::inc(x_183);
lean::dec(x_179);
x_184 = lean::cnstr_get(x_183, 0);
lean::inc(x_184);
x_185 = lean::cnstr_get(x_183, 1);
lean::inc(x_185);
lean::dec(x_183);
x_186 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_186, 0, x_177);
lean::cnstr_set(x_186, 1, x_18);
x_187 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_187, 0, x_184);
lean::cnstr_set(x_187, 1, x_186);
x_188 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_188, 0, x_175);
lean::cnstr_set(x_188, 1, x_187);
x_189 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_189, 0, x_167);
lean::cnstr_set(x_189, 1, x_188);
x_190 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_190, 0, x_155);
lean::cnstr_set(x_190, 1, x_189);
x_191 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_191, 0, x_152);
lean::cnstr_set(x_191, 1, x_190);
x_192 = l_Lean_Expr_mkCapp(x_174, x_191);
x_193 = l_Lean_Elaborator_elabDefLike___closed__2;
x_194 = lean_expr_mk_mdata(x_193, x_192);
x_195 = l_Lean_Elaborator_oldElabCommand(x_1, x_194, x_5, x_6, x_185);
lean::dec(x_1);
return x_195;
}
}
}
}
}
}
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_elabDefLike___spec__1___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_List_mmap___main___at_Lean_Elaborator_elabDefLike___spec__1(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_4);
lean::dec(x_3);
return x_6;
}
}
obj* l_Lean_Elaborator_elabDefLike___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; 
x_8 = l_Lean_Elaborator_elabDefLike(x_1, x_2, x_3, x_4, x_5, x_6, x_7);
lean::dec(x_6);
lean::dec(x_5);
return x_8;
}
}
obj* _init_l_Lean_Elaborator_inferModToPexpr___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::mk_nat_obj(0u);
x_2 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2, 0, x_1);
x_3 = lean_expr_mk_lit(x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_inferModToPexpr___closed__2() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::mk_nat_obj(1u);
x_2 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2, 0, x_1);
x_3 = lean_expr_mk_lit(x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_inferModToPexpr___closed__3() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::mk_nat_obj(2u);
x_2 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2, 0, x_1);
x_3 = lean_expr_mk_lit(x_2);
return x_3;
}
}
obj* l_Lean_Elaborator_inferModToPexpr(obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Elaborator_inferModToPexpr___closed__1;
return x_2;
}
else
{
obj* x_3; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::obj_tag(x_3) == 0)
{
obj* x_4; 
x_4 = l_Lean_Elaborator_inferModToPexpr___closed__2;
return x_4;
}
else
{
obj* x_5; 
x_5 = l_Lean_Elaborator_inferModToPexpr___closed__3;
return x_5;
}
}
}
}
obj* l_Lean_Elaborator_inferModToPexpr___boxed(obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_Lean_Elaborator_inferModToPexpr(x_1);
lean::dec(x_1);
return x_2;
}
}
obj* l_ReaderT_bind___at_Lean_Elaborator_declaration_elaborate___spec__1___rarg(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
lean::inc(x_4);
lean::inc(x_3);
x_6 = lean::apply_3(x_1, x_3, x_4, x_5);
if (lean::obj_tag(x_6) == 0)
{
uint8 x_7; 
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
x_7 = !lean::is_exclusive(x_6);
if (x_7 == 0)
{
return x_6;
}
else
{
obj* x_8; obj* x_9; 
x_8 = lean::cnstr_get(x_6, 0);
lean::inc(x_8);
lean::dec(x_6);
x_9 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_9, 0, x_8);
return x_9;
}
}
else
{
obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_10 = lean::cnstr_get(x_6, 0);
lean::inc(x_10);
lean::dec(x_6);
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_12 = lean::cnstr_get(x_10, 1);
lean::inc(x_12);
lean::dec(x_10);
x_13 = lean::apply_4(x_2, x_11, x_3, x_4, x_12);
return x_13;
}
}
}
obj* l_ReaderT_bind___at_Lean_Elaborator_declaration_elaborate___spec__1(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_bind___at_Lean_Elaborator_declaration_elaborate___spec__1___rarg), 5, 0);
return x_3;
}
}
obj* _init_l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("declaration.elaborate: unexpected input");
return x_1;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_6; obj* x_7; obj* x_8; 
lean::dec(x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
else
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_43; obj* x_44; 
x_9 = lean::cnstr_get(x_2, 0);
lean::inc(x_9);
x_10 = lean::cnstr_get(x_2, 1);
lean::inc(x_10);
if (lean::is_exclusive(x_2)) {
 lean::cnstr_release(x_2, 0);
 lean::cnstr_release(x_2, 1);
 x_11 = x_2;
} else {
 lean::dec_ref(x_2);
 x_11 = lean::box(0);
}
x_43 = lean::cnstr_get(x_9, 3);
lean::inc(x_43);
x_44 = lean::cnstr_get(x_43, 0);
lean::inc(x_44);
if (lean::obj_tag(x_44) == 0)
{
obj* x_45; 
lean::dec(x_44);
lean::dec(x_43);
lean::dec(x_9);
x_45 = lean::box(0);
x_12 = x_45;
goto block_42;
}
else
{
obj* x_46; 
x_46 = lean::cnstr_get(x_44, 0);
lean::inc(x_46);
lean::dec(x_44);
if (lean::obj_tag(x_46) == 0)
{
obj* x_47; 
x_47 = lean::cnstr_get(x_43, 1);
lean::inc(x_47);
lean::dec(x_43);
if (lean::obj_tag(x_47) == 0)
{
obj* x_48; 
lean::dec(x_9);
x_48 = lean::box(0);
x_12 = x_48;
goto block_42;
}
else
{
obj* x_49; obj* x_50; obj* x_51; 
lean::dec(x_11);
x_49 = lean::cnstr_get(x_47, 0);
lean::inc(x_49);
lean::dec(x_47);
x_50 = lean::cnstr_get(x_49, 1);
lean::inc(x_50);
lean::dec(x_49);
x_51 = l_Lean_Elaborator_toPexpr___main(x_50, x_3, x_4, x_5);
if (lean::obj_tag(x_51) == 0)
{
uint8 x_52; 
lean::dec(x_10);
lean::dec(x_9);
lean::dec(x_1);
x_52 = !lean::is_exclusive(x_51);
if (x_52 == 0)
{
return x_51;
}
else
{
obj* x_53; obj* x_54; 
x_53 = lean::cnstr_get(x_51, 0);
lean::inc(x_53);
lean::dec(x_51);
x_54 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_54, 0, x_53);
return x_54;
}
}
else
{
obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; uint8 x_60; obj* x_61; obj* x_62; 
x_55 = lean::cnstr_get(x_51, 0);
lean::inc(x_55);
lean::dec(x_51);
x_56 = lean::cnstr_get(x_55, 0);
lean::inc(x_56);
x_57 = lean::cnstr_get(x_55, 1);
lean::inc(x_57);
lean::dec(x_55);
x_58 = lean::cnstr_get(x_9, 1);
lean::inc(x_58);
lean::dec(x_9);
x_59 = l_Lean_Elaborator_mangleIdent(x_58);
x_60 = 0;
lean::inc(x_59);
x_61 = lean_expr_local(x_59, x_59, x_56, x_60);
x_62 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2(x_1, x_10, x_3, x_4, x_57);
if (lean::obj_tag(x_62) == 0)
{
uint8 x_63; 
lean::dec(x_61);
x_63 = !lean::is_exclusive(x_62);
if (x_63 == 0)
{
return x_62;
}
else
{
obj* x_64; obj* x_65; 
x_64 = lean::cnstr_get(x_62, 0);
lean::inc(x_64);
lean::dec(x_62);
x_65 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_65, 0, x_64);
return x_65;
}
}
else
{
uint8 x_66; 
x_66 = !lean::is_exclusive(x_62);
if (x_66 == 0)
{
obj* x_67; uint8 x_68; 
x_67 = lean::cnstr_get(x_62, 0);
x_68 = !lean::is_exclusive(x_67);
if (x_68 == 0)
{
obj* x_69; obj* x_70; 
x_69 = lean::cnstr_get(x_67, 0);
x_70 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_70, 0, x_61);
lean::cnstr_set(x_70, 1, x_69);
lean::cnstr_set(x_67, 0, x_70);
return x_62;
}
else
{
obj* x_71; obj* x_72; obj* x_73; obj* x_74; 
x_71 = lean::cnstr_get(x_67, 0);
x_72 = lean::cnstr_get(x_67, 1);
lean::inc(x_72);
lean::inc(x_71);
lean::dec(x_67);
x_73 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_73, 0, x_61);
lean::cnstr_set(x_73, 1, x_71);
x_74 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_72);
lean::cnstr_set(x_62, 0, x_74);
return x_62;
}
}
else
{
obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; 
x_75 = lean::cnstr_get(x_62, 0);
lean::inc(x_75);
lean::dec(x_62);
x_76 = lean::cnstr_get(x_75, 0);
lean::inc(x_76);
x_77 = lean::cnstr_get(x_75, 1);
lean::inc(x_77);
if (lean::is_exclusive(x_75)) {
 lean::cnstr_release(x_75, 0);
 lean::cnstr_release(x_75, 1);
 x_78 = x_75;
} else {
 lean::dec_ref(x_75);
 x_78 = lean::box(0);
}
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_61);
lean::cnstr_set(x_79, 1, x_76);
if (lean::is_scalar(x_78)) {
 x_80 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_80 = x_78;
}
lean::cnstr_set(x_80, 0, x_79);
lean::cnstr_set(x_80, 1, x_77);
x_81 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_81, 0, x_80);
return x_81;
}
}
}
}
}
else
{
obj* x_82; 
lean::dec(x_46);
lean::dec(x_43);
lean::dec(x_9);
x_82 = lean::box(0);
x_12 = x_82;
goto block_42;
}
}
block_42:
{
obj* x_13; obj* x_14; obj* x_15; 
lean::dec(x_12);
lean::inc(x_1);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_1);
x_14 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2___closed__1;
x_15 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_13, x_14, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_13);
if (lean::obj_tag(x_15) == 0)
{
uint8 x_16; 
lean::dec(x_11);
lean::dec(x_10);
lean::dec(x_1);
x_16 = !lean::is_exclusive(x_15);
if (x_16 == 0)
{
return x_15;
}
else
{
obj* x_17; obj* x_18; 
x_17 = lean::cnstr_get(x_15, 0);
lean::inc(x_17);
lean::dec(x_15);
x_18 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_18, 0, x_17);
return x_18;
}
}
else
{
obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_19 = lean::cnstr_get(x_15, 0);
lean::inc(x_19);
lean::dec(x_15);
x_20 = lean::cnstr_get(x_19, 0);
lean::inc(x_20);
x_21 = lean::cnstr_get(x_19, 1);
lean::inc(x_21);
lean::dec(x_19);
x_22 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2(x_1, x_10, x_3, x_4, x_21);
if (lean::obj_tag(x_22) == 0)
{
uint8 x_23; 
lean::dec(x_20);
lean::dec(x_11);
x_23 = !lean::is_exclusive(x_22);
if (x_23 == 0)
{
return x_22;
}
else
{
obj* x_24; obj* x_25; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_25 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_25, 0, x_24);
return x_25;
}
}
else
{
uint8 x_26; 
x_26 = !lean::is_exclusive(x_22);
if (x_26 == 0)
{
obj* x_27; uint8 x_28; 
x_27 = lean::cnstr_get(x_22, 0);
x_28 = !lean::is_exclusive(x_27);
if (x_28 == 0)
{
obj* x_29; obj* x_30; 
x_29 = lean::cnstr_get(x_27, 0);
if (lean::is_scalar(x_11)) {
 x_30 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_30 = x_11;
}
lean::cnstr_set(x_30, 0, x_20);
lean::cnstr_set(x_30, 1, x_29);
lean::cnstr_set(x_27, 0, x_30);
return x_22;
}
else
{
obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_31 = lean::cnstr_get(x_27, 0);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::inc(x_31);
lean::dec(x_27);
if (lean::is_scalar(x_11)) {
 x_33 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_33 = x_11;
}
lean::cnstr_set(x_33, 0, x_20);
lean::cnstr_set(x_33, 1, x_31);
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_32);
lean::cnstr_set(x_22, 0, x_34);
return x_22;
}
}
else
{
obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; 
x_35 = lean::cnstr_get(x_22, 0);
lean::inc(x_35);
lean::dec(x_22);
x_36 = lean::cnstr_get(x_35, 0);
lean::inc(x_36);
x_37 = lean::cnstr_get(x_35, 1);
lean::inc(x_37);
if (lean::is_exclusive(x_35)) {
 lean::cnstr_release(x_35, 0);
 lean::cnstr_release(x_35, 1);
 x_38 = x_35;
} else {
 lean::dec_ref(x_35);
 x_38 = lean::box(0);
}
if (lean::is_scalar(x_11)) {
 x_39 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_39 = x_11;
}
lean::cnstr_set(x_39, 0, x_20);
lean::cnstr_set(x_39, 1, x_36);
if (lean::is_scalar(x_38)) {
 x_40 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_40 = x_38;
}
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_37);
x_41 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_41, 0, x_40);
return x_41;
}
}
}
}
}
}
}
obj* l_List_map___main___at_Lean_Elaborator_declaration_elaborate___spec__3(obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
uint8 x_3; 
x_3 = !lean::is_exclusive(x_1);
if (x_3 == 0)
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_4 = lean::cnstr_get(x_1, 0);
x_5 = lean::cnstr_get(x_1, 1);
x_6 = lean::cnstr_get(x_4, 2);
lean::inc(x_6);
lean::dec(x_4);
x_7 = l_Lean_Elaborator_inferModToPexpr(x_6);
lean::dec(x_6);
x_8 = l_List_map___main___at_Lean_Elaborator_declaration_elaborate___spec__3(x_5);
lean::cnstr_set(x_1, 1, x_8);
lean::cnstr_set(x_1, 0, x_7);
return x_1;
}
else
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_9 = lean::cnstr_get(x_1, 0);
x_10 = lean::cnstr_get(x_1, 1);
lean::inc(x_10);
lean::inc(x_9);
lean::dec(x_1);
x_11 = lean::cnstr_get(x_9, 2);
lean::inc(x_11);
lean::dec(x_9);
x_12 = l_Lean_Elaborator_inferModToPexpr(x_11);
lean::dec(x_11);
x_13 = l_List_map___main___at_Lean_Elaborator_declaration_elaborate___spec__3(x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
return x_14;
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__4(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
uint8 x_8; 
x_8 = !lean::is_exclusive(x_1);
if (x_8 == 0)
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_9 = lean::cnstr_get(x_1, 0);
x_10 = lean::cnstr_get(x_1, 1);
x_11 = lean::cnstr_get(x_9, 0);
lean::inc(x_11);
lean::dec(x_9);
x_12 = l_Lean_Elaborator_toPexpr___main(x_11, x_2, x_3, x_4);
if (lean::obj_tag(x_12) == 0)
{
uint8 x_13; 
lean::free_heap_obj(x_1);
lean::dec(x_10);
x_13 = !lean::is_exclusive(x_12);
if (x_13 == 0)
{
return x_12;
}
else
{
obj* x_14; obj* x_15; 
x_14 = lean::cnstr_get(x_12, 0);
lean::inc(x_14);
lean::dec(x_12);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_14);
return x_15;
}
}
else
{
obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_16 = lean::cnstr_get(x_12, 0);
lean::inc(x_16);
lean::dec(x_12);
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_18 = lean::cnstr_get(x_16, 1);
lean::inc(x_18);
lean::dec(x_16);
x_19 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__4(x_10, x_2, x_3, x_18);
if (lean::obj_tag(x_19) == 0)
{
uint8 x_20; 
lean::dec(x_17);
lean::free_heap_obj(x_1);
x_20 = !lean::is_exclusive(x_19);
if (x_20 == 0)
{
return x_19;
}
else
{
obj* x_21; obj* x_22; 
x_21 = lean::cnstr_get(x_19, 0);
lean::inc(x_21);
lean::dec(x_19);
x_22 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_22, 0, x_21);
return x_22;
}
}
else
{
uint8 x_23; 
x_23 = !lean::is_exclusive(x_19);
if (x_23 == 0)
{
obj* x_24; uint8 x_25; 
x_24 = lean::cnstr_get(x_19, 0);
x_25 = !lean::is_exclusive(x_24);
if (x_25 == 0)
{
obj* x_26; 
x_26 = lean::cnstr_get(x_24, 0);
lean::cnstr_set(x_1, 1, x_26);
lean::cnstr_set(x_1, 0, x_17);
lean::cnstr_set(x_24, 0, x_1);
return x_19;
}
else
{
obj* x_27; obj* x_28; obj* x_29; 
x_27 = lean::cnstr_get(x_24, 0);
x_28 = lean::cnstr_get(x_24, 1);
lean::inc(x_28);
lean::inc(x_27);
lean::dec(x_24);
lean::cnstr_set(x_1, 1, x_27);
lean::cnstr_set(x_1, 0, x_17);
x_29 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_29, 0, x_1);
lean::cnstr_set(x_29, 1, x_28);
lean::cnstr_set(x_19, 0, x_29);
return x_19;
}
}
else
{
obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; 
x_30 = lean::cnstr_get(x_19, 0);
lean::inc(x_30);
lean::dec(x_19);
x_31 = lean::cnstr_get(x_30, 0);
lean::inc(x_31);
x_32 = lean::cnstr_get(x_30, 1);
lean::inc(x_32);
if (lean::is_exclusive(x_30)) {
 lean::cnstr_release(x_30, 0);
 lean::cnstr_release(x_30, 1);
 x_33 = x_30;
} else {
 lean::dec_ref(x_30);
 x_33 = lean::box(0);
}
lean::cnstr_set(x_1, 1, x_31);
lean::cnstr_set(x_1, 0, x_17);
if (lean::is_scalar(x_33)) {
 x_34 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_34 = x_33;
}
lean::cnstr_set(x_34, 0, x_1);
lean::cnstr_set(x_34, 1, x_32);
x_35 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_35, 0, x_34);
return x_35;
}
}
}
}
else
{
obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_36 = lean::cnstr_get(x_1, 0);
x_37 = lean::cnstr_get(x_1, 1);
lean::inc(x_37);
lean::inc(x_36);
lean::dec(x_1);
x_38 = lean::cnstr_get(x_36, 0);
lean::inc(x_38);
lean::dec(x_36);
x_39 = l_Lean_Elaborator_toPexpr___main(x_38, x_2, x_3, x_4);
if (lean::obj_tag(x_39) == 0)
{
obj* x_40; obj* x_41; obj* x_42; 
lean::dec(x_37);
x_40 = lean::cnstr_get(x_39, 0);
lean::inc(x_40);
if (lean::is_exclusive(x_39)) {
 lean::cnstr_release(x_39, 0);
 x_41 = x_39;
} else {
 lean::dec_ref(x_39);
 x_41 = lean::box(0);
}
if (lean::is_scalar(x_41)) {
 x_42 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_42 = x_41;
}
lean::cnstr_set(x_42, 0, x_40);
return x_42;
}
else
{
obj* x_43; obj* x_44; obj* x_45; obj* x_46; 
x_43 = lean::cnstr_get(x_39, 0);
lean::inc(x_43);
lean::dec(x_39);
x_44 = lean::cnstr_get(x_43, 0);
lean::inc(x_44);
x_45 = lean::cnstr_get(x_43, 1);
lean::inc(x_45);
lean::dec(x_43);
x_46 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__4(x_37, x_2, x_3, x_45);
if (lean::obj_tag(x_46) == 0)
{
obj* x_47; obj* x_48; obj* x_49; 
lean::dec(x_44);
x_47 = lean::cnstr_get(x_46, 0);
lean::inc(x_47);
if (lean::is_exclusive(x_46)) {
 lean::cnstr_release(x_46, 0);
 x_48 = x_46;
} else {
 lean::dec_ref(x_46);
 x_48 = lean::box(0);
}
if (lean::is_scalar(x_48)) {
 x_49 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_49 = x_48;
}
lean::cnstr_set(x_49, 0, x_47);
return x_49;
}
else
{
obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; 
x_50 = lean::cnstr_get(x_46, 0);
lean::inc(x_50);
if (lean::is_exclusive(x_46)) {
 lean::cnstr_release(x_46, 0);
 x_51 = x_46;
} else {
 lean::dec_ref(x_46);
 x_51 = lean::box(0);
}
x_52 = lean::cnstr_get(x_50, 0);
lean::inc(x_52);
x_53 = lean::cnstr_get(x_50, 1);
lean::inc(x_53);
if (lean::is_exclusive(x_50)) {
 lean::cnstr_release(x_50, 0);
 lean::cnstr_release(x_50, 1);
 x_54 = x_50;
} else {
 lean::dec_ref(x_50);
 x_54 = lean::box(0);
}
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_44);
lean::cnstr_set(x_55, 1, x_52);
if (lean::is_scalar(x_54)) {
 x_56 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_56 = x_54;
}
lean::cnstr_set(x_56, 0, x_55);
lean::cnstr_set(x_56, 1, x_53);
if (lean::is_scalar(x_51)) {
 x_57 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_57 = x_51;
}
lean::cnstr_set(x_57, 0, x_56);
return x_57;
}
}
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__5(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
if (lean::obj_tag(x_3) == 0)
{
obj* x_7; obj* x_8; obj* x_9; 
lean::dec(x_2);
lean::dec(x_1);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_6);
x_9 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_9, 0, x_8);
return x_9;
}
else
{
obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_10 = lean::cnstr_get(x_3, 0);
lean::inc(x_10);
x_11 = lean::cnstr_get(x_3, 1);
lean::inc(x_11);
if (lean::is_exclusive(x_3)) {
 lean::cnstr_release(x_3, 0);
 lean::cnstr_release(x_3, 1);
 x_12 = x_3;
} else {
 lean::dec_ref(x_3);
 x_12 = lean::box(0);
}
switch (lean::obj_tag(x_10)) {
case 0:
{
obj* x_63; obj* x_64; 
x_63 = lean::cnstr_get(x_10, 0);
lean::inc(x_63);
lean::dec(x_10);
x_64 = lean::cnstr_get(x_63, 1);
lean::inc(x_64);
lean::dec(x_63);
if (lean::obj_tag(x_64) == 0)
{
obj* x_65; obj* x_66; obj* x_67; 
lean::dec(x_64);
lean::inc(x_1);
x_65 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_65, 0, x_1);
x_66 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2___closed__1;
x_67 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_65, x_66, x_4, x_5, x_6);
lean::dec(x_6);
lean::dec(x_65);
if (lean::obj_tag(x_67) == 0)
{
uint8 x_68; 
lean::dec(x_12);
lean::dec(x_11);
lean::dec(x_2);
lean::dec(x_1);
x_68 = !lean::is_exclusive(x_67);
if (x_68 == 0)
{
return x_67;
}
else
{
obj* x_69; obj* x_70; 
x_69 = lean::cnstr_get(x_67, 0);
lean::inc(x_69);
lean::dec(x_67);
x_70 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_70, 0, x_69);
return x_70;
}
}
else
{
obj* x_71; 
x_71 = lean::cnstr_get(x_67, 0);
lean::inc(x_71);
lean::dec(x_67);
x_13 = x_71;
goto block_62;
}
}
else
{
obj* x_72; uint8 x_73; obj* x_74; obj* x_75; obj* x_76; 
x_72 = lean::cnstr_get(x_64, 0);
lean::inc(x_72);
lean::dec(x_64);
x_73 = 0;
x_74 = lean::box(x_73);
x_75 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_75, 0, x_74);
lean::cnstr_set(x_75, 1, x_72);
x_76 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_76, 0, x_75);
lean::cnstr_set(x_76, 1, x_6);
x_13 = x_76;
goto block_62;
}
}
case 1:
{
obj* x_77; obj* x_78; uint8 x_79; obj* x_80; obj* x_81; obj* x_82; 
x_77 = lean::cnstr_get(x_10, 0);
lean::inc(x_77);
lean::dec(x_10);
x_78 = lean::cnstr_get(x_77, 1);
lean::inc(x_78);
lean::dec(x_77);
x_79 = 1;
x_80 = lean::box(x_79);
x_81 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_81, 0, x_80);
lean::cnstr_set(x_81, 1, x_78);
x_82 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_82, 0, x_81);
lean::cnstr_set(x_82, 1, x_6);
x_13 = x_82;
goto block_62;
}
case 2:
{
obj* x_83; obj* x_84; uint8 x_85; obj* x_86; obj* x_87; obj* x_88; 
x_83 = lean::cnstr_get(x_10, 0);
lean::inc(x_83);
lean::dec(x_10);
x_84 = lean::cnstr_get(x_83, 1);
lean::inc(x_84);
lean::dec(x_83);
x_85 = 2;
x_86 = lean::box(x_85);
x_87 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_87, 0, x_86);
lean::cnstr_set(x_87, 1, x_84);
x_88 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_88, 0, x_87);
lean::cnstr_set(x_88, 1, x_6);
x_13 = x_88;
goto block_62;
}
default: 
{
obj* x_89; obj* x_90; uint8 x_91; obj* x_92; obj* x_93; obj* x_94; 
x_89 = lean::cnstr_get(x_10, 0);
lean::inc(x_89);
lean::dec(x_10);
x_90 = lean::cnstr_get(x_89, 1);
lean::inc(x_90);
lean::dec(x_89);
x_91 = 3;
x_92 = lean::box(x_91);
x_93 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_93, 0, x_92);
lean::cnstr_set(x_93, 1, x_90);
x_94 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_94, 0, x_93);
lean::cnstr_set(x_94, 1, x_6);
x_13 = x_94;
goto block_62;
}
}
block_62:
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; uint8 x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_14 = lean::cnstr_get(x_13, 0);
lean::inc(x_14);
x_15 = lean::cnstr_get(x_13, 1);
lean::inc(x_15);
lean::dec(x_13);
x_16 = lean::cnstr_get(x_14, 0);
lean::inc(x_16);
x_17 = lean::cnstr_get(x_14, 1);
lean::inc(x_17);
lean::dec(x_14);
x_18 = l_Lean_Elaborator_dummy;
x_19 = lean::unbox(x_16);
lean::dec(x_16);
lean::inc(x_2, 2);
x_20 = lean_expr_local(x_2, x_2, x_18, x_19);
x_21 = lean::cnstr_get(x_17, 0);
lean::inc(x_21);
x_22 = l_List_map___main___at_Lean_Elaborator_elabDefLike___spec__2(x_21);
x_23 = l_Lean_Elaborator_namesToPexpr(x_22);
x_24 = lean::cnstr_get(x_17, 1);
lean::inc(x_24);
x_25 = l_Lean_Elaborator_inferModToPexpr(x_24);
lean::dec(x_24);
x_26 = lean::cnstr_get(x_17, 2);
lean::inc(x_26);
lean::dec(x_17);
x_27 = lean::cnstr_get(x_26, 1);
lean::inc(x_27);
lean::dec(x_26);
x_28 = l_Lean_Expander_getOptType___main(x_27);
lean::dec(x_27);
x_29 = l_Lean_Elaborator_toPexpr___main(x_28, x_4, x_5, x_15);
if (lean::obj_tag(x_29) == 0)
{
uint8 x_30; 
lean::dec(x_25);
lean::dec(x_23);
lean::dec(x_20);
lean::dec(x_12);
lean::dec(x_11);
lean::dec(x_2);
lean::dec(x_1);
x_30 = !lean::is_exclusive(x_29);
if (x_30 == 0)
{
return x_29;
}
else
{
obj* x_31; obj* x_32; 
x_31 = lean::cnstr_get(x_29, 0);
lean::inc(x_31);
lean::dec(x_29);
x_32 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_32, 0, x_31);
return x_32;
}
}
else
{
obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
x_33 = lean::cnstr_get(x_29, 0);
lean::inc(x_33);
lean::dec(x_29);
x_34 = lean::cnstr_get(x_33, 0);
lean::inc(x_34);
x_35 = lean::cnstr_get(x_33, 1);
lean::inc(x_35);
lean::dec(x_33);
x_36 = lean::box(0);
if (lean::is_scalar(x_12)) {
 x_37 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_37 = x_12;
}
lean::cnstr_set(x_37, 0, x_34);
lean::cnstr_set(x_37, 1, x_36);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_25);
lean::cnstr_set(x_38, 1, x_37);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_23);
lean::cnstr_set(x_39, 1, x_38);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_20);
lean::cnstr_set(x_40, 1, x_39);
lean::inc(x_2);
x_41 = l_Lean_Expr_mkCapp(x_2, x_40);
x_42 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__5(x_1, x_2, x_11, x_4, x_5, x_35);
if (lean::obj_tag(x_42) == 0)
{
uint8 x_43; 
lean::dec(x_41);
x_43 = !lean::is_exclusive(x_42);
if (x_43 == 0)
{
return x_42;
}
else
{
obj* x_44; obj* x_45; 
x_44 = lean::cnstr_get(x_42, 0);
lean::inc(x_44);
lean::dec(x_42);
x_45 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_45, 0, x_44);
return x_45;
}
}
else
{
uint8 x_46; 
x_46 = !lean::is_exclusive(x_42);
if (x_46 == 0)
{
obj* x_47; uint8 x_48; 
x_47 = lean::cnstr_get(x_42, 0);
x_48 = !lean::is_exclusive(x_47);
if (x_48 == 0)
{
obj* x_49; obj* x_50; 
x_49 = lean::cnstr_get(x_47, 0);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_41);
lean::cnstr_set(x_50, 1, x_49);
lean::cnstr_set(x_47, 0, x_50);
return x_42;
}
else
{
obj* x_51; obj* x_52; obj* x_53; obj* x_54; 
x_51 = lean::cnstr_get(x_47, 0);
x_52 = lean::cnstr_get(x_47, 1);
lean::inc(x_52);
lean::inc(x_51);
lean::dec(x_47);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_41);
lean::cnstr_set(x_53, 1, x_51);
x_54 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_52);
lean::cnstr_set(x_42, 0, x_54);
return x_42;
}
}
else
{
obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; 
x_55 = lean::cnstr_get(x_42, 0);
lean::inc(x_55);
lean::dec(x_42);
x_56 = lean::cnstr_get(x_55, 0);
lean::inc(x_56);
x_57 = lean::cnstr_get(x_55, 1);
lean::inc(x_57);
if (lean::is_exclusive(x_55)) {
 lean::cnstr_release(x_55, 0);
 lean::cnstr_release(x_55, 1);
 x_58 = x_55;
} else {
 lean::dec_ref(x_55);
 x_58 = lean::box(0);
}
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_41);
lean::cnstr_set(x_59, 1, x_56);
if (lean::is_scalar(x_58)) {
 x_60 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_60 = x_58;
}
lean::cnstr_set(x_60, 0, x_59);
lean::cnstr_set(x_60, 1, x_57);
x_61 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_61, 0, x_60);
return x_61;
}
}
}
}
}
}
}
obj* l_Lean_Elaborator_declaration_elaborate___lambda__1(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9) {
_start:
{
obj* x_10; obj* x_11; obj* x_12; 
x_10 = l_Lean_Elaborator_identUnivParamsToPexpr(x_1);
x_11 = lean::cnstr_get(x_2, 1);
lean::inc(x_11);
lean::dec(x_2);
x_12 = l_Lean_Elaborator_toPexpr___main(x_11, x_7, x_8, x_9);
if (lean::obj_tag(x_12) == 0)
{
uint8 x_13; 
lean::dec(x_10);
lean::dec(x_6);
lean::dec(x_4);
lean::dec(x_3);
x_13 = !lean::is_exclusive(x_12);
if (x_13 == 0)
{
return x_12;
}
else
{
obj* x_14; obj* x_15; 
x_14 = lean::cnstr_get(x_12, 0);
lean::inc(x_14);
lean::dec(x_12);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_14);
return x_15;
}
}
else
{
obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_16 = lean::cnstr_get(x_12, 0);
lean::inc(x_16);
lean::dec(x_12);
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_18 = lean::cnstr_get(x_16, 1);
lean::inc(x_18);
lean::dec(x_16);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_3);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_10);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_6);
lean::cnstr_set(x_21, 1, x_20);
x_22 = l_Lean_Elaborator_mkEqns___closed__1;
x_23 = l_Lean_Expr_mkCapp(x_22, x_21);
x_24 = lean_expr_mk_mdata(x_4, x_23);
x_25 = l_Lean_Elaborator_oldElabCommand(x_5, x_24, x_7, x_8, x_18);
return x_25;
}
}
}
obj* l_Lean_Elaborator_declaration_elaborate___lambda__2(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9, obj* x_10, obj* x_11, obj* x_12, obj* x_13) {
_start:
{
obj* x_14; obj* x_157; 
x_157 = lean::cnstr_get(x_9, 1);
lean::inc(x_157);
lean::dec(x_9);
if (lean::obj_tag(x_157) == 0)
{
lean::inc(x_1);
x_14 = x_1;
goto block_156;
}
else
{
obj* x_158; obj* x_159; 
x_158 = lean::cnstr_get(x_157, 0);
lean::inc(x_158);
lean::dec(x_157);
x_159 = lean::cnstr_get(x_158, 1);
lean::inc(x_159);
lean::dec(x_158);
x_14 = x_159;
goto block_156;
}
block_156:
{
obj* x_15; 
x_15 = l_Lean_Elaborator_attrsToPexpr(x_14, x_11, x_12, x_13);
if (lean::obj_tag(x_15) == 0)
{
uint8 x_16; 
lean::dec(x_10);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_2);
lean::dec(x_1);
x_16 = !lean::is_exclusive(x_15);
if (x_16 == 0)
{
return x_15;
}
else
{
obj* x_17; obj* x_18; 
x_17 = lean::cnstr_get(x_15, 0);
lean::inc(x_17);
lean::dec(x_15);
x_18 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_18, 0, x_17);
return x_18;
}
}
else
{
obj* x_19; uint8 x_20; 
x_19 = lean::cnstr_get(x_15, 0);
lean::inc(x_19);
lean::dec(x_15);
x_20 = !lean::is_exclusive(x_19);
if (x_20 == 0)
{
obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_21 = lean::cnstr_get(x_19, 0);
x_22 = lean::cnstr_get(x_19, 1);
lean::inc(x_1);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_21);
lean::cnstr_set(x_23, 1, x_1);
x_24 = l_Lean_Elaborator_mkEqns___closed__1;
x_25 = l_Lean_Expr_mkCapp(x_24, x_23);
if (lean::obj_tag(x_8) == 0)
{
obj* x_80; 
x_80 = lean::box(0);
lean::cnstr_set(x_19, 0, x_80);
x_26 = x_19;
goto block_79;
}
else
{
obj* x_81; obj* x_82; obj* x_83; 
lean::free_heap_obj(x_19);
x_81 = lean::cnstr_get(x_8, 0);
lean::inc(x_81);
x_82 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_elabDefLike___lambda__1), 2, 1);
lean::closure_set(x_82, 0, x_81);
x_83 = l_Lean_Elaborator_modifyCurrentScope(x_82, x_11, x_12, x_22);
if (lean::obj_tag(x_83) == 0)
{
uint8 x_84; 
lean::dec(x_25);
lean::dec(x_10);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_2);
lean::dec(x_1);
x_84 = !lean::is_exclusive(x_83);
if (x_84 == 0)
{
return x_83;
}
else
{
obj* x_85; obj* x_86; 
x_85 = lean::cnstr_get(x_83, 0);
lean::inc(x_85);
lean::dec(x_83);
x_86 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_86, 0, x_85);
return x_86;
}
}
else
{
obj* x_87; 
x_87 = lean::cnstr_get(x_83, 0);
lean::inc(x_87);
lean::dec(x_83);
x_26 = x_87;
goto block_79;
}
}
block_79:
{
obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
x_27 = lean::cnstr_get(x_26, 1);
lean::inc(x_27);
lean::dec(x_26);
x_28 = lean::cnstr_get(x_2, 0);
lean::inc(x_28);
lean::dec(x_2);
x_29 = l_Lean_Elaborator_mangleIdent(x_28);
x_30 = l_Lean_Expander_getOptType___main(x_3);
x_31 = l_Lean_Elaborator_toPexpr___main(x_30, x_11, x_12, x_27);
if (lean::obj_tag(x_8) == 0)
{
lean::inc(x_1);
x_32 = x_1;
goto block_75;
}
else
{
obj* x_76; obj* x_77; obj* x_78; 
x_76 = lean::cnstr_get(x_8, 0);
lean::inc(x_76);
lean::dec(x_8);
x_77 = lean::cnstr_get(x_76, 1);
lean::inc(x_77);
lean::dec(x_76);
x_78 = l_List_map___main___at_Lean_Elaborator_elabDefLike___spec__2(x_77);
x_32 = x_78;
goto block_75;
}
block_75:
{
if (lean::obj_tag(x_31) == 0)
{
uint8 x_33; 
lean::dec(x_32);
lean::dec(x_29);
lean::dec(x_25);
lean::dec(x_10);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
x_33 = !lean::is_exclusive(x_31);
if (x_33 == 0)
{
return x_31;
}
else
{
obj* x_34; obj* x_35; 
x_34 = lean::cnstr_get(x_31, 0);
lean::inc(x_34);
lean::dec(x_31);
x_35 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_35, 0, x_34);
return x_35;
}
}
else
{
obj* x_36; obj* x_37; obj* x_38; obj* x_39; uint8 x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
x_36 = lean::cnstr_get(x_31, 0);
lean::inc(x_36);
lean::dec(x_31);
x_37 = l_Lean_Elaborator_namesToPexpr(x_32);
x_38 = lean::cnstr_get(x_36, 0);
lean::inc(x_38);
x_39 = lean::cnstr_get(x_36, 1);
lean::inc(x_39);
lean::dec(x_36);
x_40 = 0;
lean::inc(x_29);
x_41 = lean_expr_local(x_29, x_29, x_38, x_40);
lean::inc(x_1);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_1);
x_43 = l_Lean_Expr_mkCapp(x_24, x_42);
x_44 = l_Lean_Elaborator_simpleBindersToPexpr(x_4, x_11, x_12, x_39);
if (lean::obj_tag(x_44) == 0)
{
uint8 x_45; 
lean::dec(x_43);
lean::dec(x_37);
lean::dec(x_25);
lean::dec(x_10);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_1);
x_45 = !lean::is_exclusive(x_44);
if (x_45 == 0)
{
return x_44;
}
else
{
obj* x_46; obj* x_47; 
x_46 = lean::cnstr_get(x_44, 0);
lean::inc(x_46);
lean::dec(x_44);
x_47 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_47, 0, x_46);
return x_47;
}
}
else
{
obj* x_48; obj* x_49; obj* x_50; obj* x_51; 
x_48 = lean::cnstr_get(x_44, 0);
lean::inc(x_48);
lean::dec(x_44);
x_49 = lean::cnstr_get(x_48, 0);
lean::inc(x_49);
x_50 = lean::cnstr_get(x_48, 1);
lean::inc(x_50);
lean::dec(x_48);
lean::inc(x_6);
lean::inc(x_5);
x_51 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2(x_5, x_6, x_11, x_12, x_50);
if (lean::obj_tag(x_51) == 0)
{
uint8 x_52; 
lean::dec(x_49);
lean::dec(x_43);
lean::dec(x_37);
lean::dec(x_25);
lean::dec(x_10);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_1);
x_52 = !lean::is_exclusive(x_51);
if (x_52 == 0)
{
return x_51;
}
else
{
obj* x_53; obj* x_54; 
x_53 = lean::cnstr_get(x_51, 0);
lean::inc(x_53);
lean::dec(x_51);
x_54 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_54, 0, x_53);
return x_54;
}
}
else
{
obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; 
x_55 = lean::cnstr_get(x_51, 0);
lean::inc(x_55);
lean::dec(x_51);
x_56 = lean::cnstr_get(x_55, 0);
lean::inc(x_56);
x_57 = lean::cnstr_get(x_55, 1);
lean::inc(x_57);
lean::dec(x_55);
x_58 = l_Lean_Expr_mkCapp(x_24, x_56);
lean::inc(x_1);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_58);
lean::cnstr_set(x_59, 1, x_1);
x_60 = l_Lean_Expr_mkCapp(x_24, x_59);
x_61 = l_List_map___main___at_Lean_Elaborator_declaration_elaborate___spec__3(x_6);
x_62 = l_Lean_Expr_mkCapp(x_24, x_61);
lean::inc(x_1);
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_62);
lean::cnstr_set(x_63, 1, x_1);
x_64 = l_Lean_Expr_mkCapp(x_24, x_63);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_1);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_60);
lean::cnstr_set(x_66, 1, x_65);
x_67 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_67, 0, x_49);
lean::cnstr_set(x_67, 1, x_66);
x_68 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_68, 0, x_43);
lean::cnstr_set(x_68, 1, x_67);
x_69 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_69, 0, x_37);
lean::cnstr_set(x_69, 1, x_68);
x_70 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_70, 0, x_25);
lean::cnstr_set(x_70, 1, x_69);
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_10);
lean::cnstr_set(x_71, 1, x_70);
x_72 = l_Lean_Expr_mkCapp(x_24, x_71);
x_73 = lean_expr_mk_mdata(x_7, x_72);
x_74 = l_Lean_Elaborator_oldElabCommand(x_5, x_73, x_11, x_12, x_57);
lean::dec(x_5);
return x_74;
}
}
}
}
}
}
else
{
obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; 
x_88 = lean::cnstr_get(x_19, 0);
x_89 = lean::cnstr_get(x_19, 1);
lean::inc(x_89);
lean::inc(x_88);
lean::dec(x_19);
lean::inc(x_1);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_88);
lean::cnstr_set(x_90, 1, x_1);
x_91 = l_Lean_Elaborator_mkEqns___closed__1;
x_92 = l_Lean_Expr_mkCapp(x_91, x_90);
if (lean::obj_tag(x_8) == 0)
{
obj* x_147; obj* x_148; 
x_147 = lean::box(0);
x_148 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_148, 0, x_147);
lean::cnstr_set(x_148, 1, x_89);
x_93 = x_148;
goto block_146;
}
else
{
obj* x_149; obj* x_150; obj* x_151; 
x_149 = lean::cnstr_get(x_8, 0);
lean::inc(x_149);
x_150 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_elabDefLike___lambda__1), 2, 1);
lean::closure_set(x_150, 0, x_149);
x_151 = l_Lean_Elaborator_modifyCurrentScope(x_150, x_11, x_12, x_89);
if (lean::obj_tag(x_151) == 0)
{
obj* x_152; obj* x_153; obj* x_154; 
lean::dec(x_92);
lean::dec(x_10);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_2);
lean::dec(x_1);
x_152 = lean::cnstr_get(x_151, 0);
lean::inc(x_152);
if (lean::is_exclusive(x_151)) {
 lean::cnstr_release(x_151, 0);
 x_153 = x_151;
} else {
 lean::dec_ref(x_151);
 x_153 = lean::box(0);
}
if (lean::is_scalar(x_153)) {
 x_154 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_154 = x_153;
}
lean::cnstr_set(x_154, 0, x_152);
return x_154;
}
else
{
obj* x_155; 
x_155 = lean::cnstr_get(x_151, 0);
lean::inc(x_155);
lean::dec(x_151);
x_93 = x_155;
goto block_146;
}
}
block_146:
{
obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; 
x_94 = lean::cnstr_get(x_93, 1);
lean::inc(x_94);
lean::dec(x_93);
x_95 = lean::cnstr_get(x_2, 0);
lean::inc(x_95);
lean::dec(x_2);
x_96 = l_Lean_Elaborator_mangleIdent(x_95);
x_97 = l_Lean_Expander_getOptType___main(x_3);
x_98 = l_Lean_Elaborator_toPexpr___main(x_97, x_11, x_12, x_94);
if (lean::obj_tag(x_8) == 0)
{
lean::inc(x_1);
x_99 = x_1;
goto block_142;
}
else
{
obj* x_143; obj* x_144; obj* x_145; 
x_143 = lean::cnstr_get(x_8, 0);
lean::inc(x_143);
lean::dec(x_8);
x_144 = lean::cnstr_get(x_143, 1);
lean::inc(x_144);
lean::dec(x_143);
x_145 = l_List_map___main___at_Lean_Elaborator_elabDefLike___spec__2(x_144);
x_99 = x_145;
goto block_142;
}
block_142:
{
if (lean::obj_tag(x_98) == 0)
{
obj* x_100; obj* x_101; obj* x_102; 
lean::dec(x_99);
lean::dec(x_96);
lean::dec(x_92);
lean::dec(x_10);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
x_100 = lean::cnstr_get(x_98, 0);
lean::inc(x_100);
if (lean::is_exclusive(x_98)) {
 lean::cnstr_release(x_98, 0);
 x_101 = x_98;
} else {
 lean::dec_ref(x_98);
 x_101 = lean::box(0);
}
if (lean::is_scalar(x_101)) {
 x_102 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_102 = x_101;
}
lean::cnstr_set(x_102, 0, x_100);
return x_102;
}
else
{
obj* x_103; obj* x_104; obj* x_105; obj* x_106; uint8 x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; 
x_103 = lean::cnstr_get(x_98, 0);
lean::inc(x_103);
lean::dec(x_98);
x_104 = l_Lean_Elaborator_namesToPexpr(x_99);
x_105 = lean::cnstr_get(x_103, 0);
lean::inc(x_105);
x_106 = lean::cnstr_get(x_103, 1);
lean::inc(x_106);
lean::dec(x_103);
x_107 = 0;
lean::inc(x_96);
x_108 = lean_expr_local(x_96, x_96, x_105, x_107);
lean::inc(x_1);
x_109 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_109, 0, x_108);
lean::cnstr_set(x_109, 1, x_1);
x_110 = l_Lean_Expr_mkCapp(x_91, x_109);
x_111 = l_Lean_Elaborator_simpleBindersToPexpr(x_4, x_11, x_12, x_106);
if (lean::obj_tag(x_111) == 0)
{
obj* x_112; obj* x_113; obj* x_114; 
lean::dec(x_110);
lean::dec(x_104);
lean::dec(x_92);
lean::dec(x_10);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_1);
x_112 = lean::cnstr_get(x_111, 0);
lean::inc(x_112);
if (lean::is_exclusive(x_111)) {
 lean::cnstr_release(x_111, 0);
 x_113 = x_111;
} else {
 lean::dec_ref(x_111);
 x_113 = lean::box(0);
}
if (lean::is_scalar(x_113)) {
 x_114 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_114 = x_113;
}
lean::cnstr_set(x_114, 0, x_112);
return x_114;
}
else
{
obj* x_115; obj* x_116; obj* x_117; obj* x_118; 
x_115 = lean::cnstr_get(x_111, 0);
lean::inc(x_115);
lean::dec(x_111);
x_116 = lean::cnstr_get(x_115, 0);
lean::inc(x_116);
x_117 = lean::cnstr_get(x_115, 1);
lean::inc(x_117);
lean::dec(x_115);
lean::inc(x_6);
lean::inc(x_5);
x_118 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2(x_5, x_6, x_11, x_12, x_117);
if (lean::obj_tag(x_118) == 0)
{
obj* x_119; obj* x_120; obj* x_121; 
lean::dec(x_116);
lean::dec(x_110);
lean::dec(x_104);
lean::dec(x_92);
lean::dec(x_10);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_1);
x_119 = lean::cnstr_get(x_118, 0);
lean::inc(x_119);
if (lean::is_exclusive(x_118)) {
 lean::cnstr_release(x_118, 0);
 x_120 = x_118;
} else {
 lean::dec_ref(x_118);
 x_120 = lean::box(0);
}
if (lean::is_scalar(x_120)) {
 x_121 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_121 = x_120;
}
lean::cnstr_set(x_121, 0, x_119);
return x_121;
}
else
{
obj* x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; obj* x_129; obj* x_130; obj* x_131; obj* x_132; obj* x_133; obj* x_134; obj* x_135; obj* x_136; obj* x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_141; 
x_122 = lean::cnstr_get(x_118, 0);
lean::inc(x_122);
lean::dec(x_118);
x_123 = lean::cnstr_get(x_122, 0);
lean::inc(x_123);
x_124 = lean::cnstr_get(x_122, 1);
lean::inc(x_124);
lean::dec(x_122);
x_125 = l_Lean_Expr_mkCapp(x_91, x_123);
lean::inc(x_1);
x_126 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_126, 0, x_125);
lean::cnstr_set(x_126, 1, x_1);
x_127 = l_Lean_Expr_mkCapp(x_91, x_126);
x_128 = l_List_map___main___at_Lean_Elaborator_declaration_elaborate___spec__3(x_6);
x_129 = l_Lean_Expr_mkCapp(x_91, x_128);
lean::inc(x_1);
x_130 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_130, 0, x_129);
lean::cnstr_set(x_130, 1, x_1);
x_131 = l_Lean_Expr_mkCapp(x_91, x_130);
x_132 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_132, 0, x_131);
lean::cnstr_set(x_132, 1, x_1);
x_133 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_133, 0, x_127);
lean::cnstr_set(x_133, 1, x_132);
x_134 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_134, 0, x_116);
lean::cnstr_set(x_134, 1, x_133);
x_135 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_135, 0, x_110);
lean::cnstr_set(x_135, 1, x_134);
x_136 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_136, 0, x_104);
lean::cnstr_set(x_136, 1, x_135);
x_137 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_137, 0, x_92);
lean::cnstr_set(x_137, 1, x_136);
x_138 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_138, 0, x_10);
lean::cnstr_set(x_138, 1, x_137);
x_139 = l_Lean_Expr_mkCapp(x_91, x_138);
x_140 = lean_expr_mk_mdata(x_7, x_139);
x_141 = l_Lean_Elaborator_oldElabCommand(x_5, x_140, x_11, x_12, x_124);
lean::dec(x_5);
return x_141;
}
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Elaborator_declaration_elaborate___lambda__3___closed__1() {
_start:
{
obj* x_1; obj* x_2; 
x_1 = lean::box(0);
x_2 = l_Lean_Elaborator_inferModToPexpr(x_1);
return x_2;
}
}
obj* _init_l_Lean_Elaborator_declaration_elaborate___lambda__3___closed__2() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("mk");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* l_Lean_Elaborator_declaration_elaborate___lambda__3(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9, obj* x_10, obj* x_11, obj* x_12, obj* x_13, obj* x_14) {
_start:
{
obj* x_15; 
if (lean::obj_tag(x_10) == 0)
{
obj* x_107; obj* x_108; 
x_107 = lean::box(0);
x_108 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_108, 0, x_107);
lean::cnstr_set(x_108, 1, x_14);
x_15 = x_108;
goto block_106;
}
else
{
obj* x_109; obj* x_110; obj* x_111; 
x_109 = lean::cnstr_get(x_10, 0);
lean::inc(x_109);
x_110 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_elabDefLike___lambda__1), 2, 1);
lean::closure_set(x_110, 0, x_109);
x_111 = l_Lean_Elaborator_modifyCurrentScope(x_110, x_12, x_13, x_14);
if (lean::obj_tag(x_111) == 0)
{
uint8 x_112; 
lean::dec(x_11);
lean::dec(x_10);
lean::dec(x_9);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_1);
x_112 = !lean::is_exclusive(x_111);
if (x_112 == 0)
{
return x_111;
}
else
{
obj* x_113; obj* x_114; 
x_113 = lean::cnstr_get(x_111, 0);
lean::inc(x_113);
lean::dec(x_111);
x_114 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_114, 0, x_113);
return x_114;
}
}
else
{
obj* x_115; 
x_115 = lean::cnstr_get(x_111, 0);
lean::inc(x_115);
lean::dec(x_111);
x_15 = x_115;
goto block_106;
}
}
block_106:
{
obj* x_16; obj* x_17; obj* x_18; obj* x_19; uint8 x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_16 = lean::cnstr_get(x_15, 1);
lean::inc(x_16);
lean::dec(x_15);
x_17 = lean::cnstr_get(x_1, 0);
lean::inc(x_17);
lean::dec(x_1);
x_18 = l_Lean_Elaborator_mangleIdent(x_17);
x_19 = l_Lean_Elaborator_dummy;
x_20 = 0;
lean::inc(x_18);
x_21 = lean_expr_local(x_18, x_18, x_19, x_20);
x_22 = l_Lean_Expander_getOptType___main(x_2);
x_23 = l_Lean_Elaborator_toPexpr___main(x_22, x_12, x_13, x_16);
if (lean::obj_tag(x_10) == 0)
{
lean::inc(x_7);
x_24 = x_7;
goto block_102;
}
else
{
obj* x_103; obj* x_104; obj* x_105; 
x_103 = lean::cnstr_get(x_10, 0);
lean::inc(x_103);
lean::dec(x_10);
x_104 = lean::cnstr_get(x_103, 1);
lean::inc(x_104);
lean::dec(x_103);
x_105 = l_List_map___main___at_Lean_Elaborator_elabDefLike___spec__2(x_104);
x_24 = x_105;
goto block_102;
}
block_102:
{
if (lean::obj_tag(x_23) == 0)
{
uint8 x_25; 
lean::dec(x_24);
lean::dec(x_21);
lean::dec(x_11);
lean::dec(x_9);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_3);
x_25 = !lean::is_exclusive(x_23);
if (x_25 == 0)
{
return x_23;
}
else
{
obj* x_26; obj* x_27; 
x_26 = lean::cnstr_get(x_23, 0);
lean::inc(x_26);
lean::dec(x_23);
x_27 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_27, 0, x_26);
return x_27;
}
}
else
{
obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
x_28 = lean::cnstr_get(x_23, 0);
lean::inc(x_28);
lean::dec(x_23);
x_29 = l_Lean_Elaborator_namesToPexpr(x_24);
x_30 = lean::cnstr_get(x_28, 0);
lean::inc(x_30);
x_31 = lean::cnstr_get(x_28, 1);
lean::inc(x_31);
lean::dec(x_28);
x_32 = l_Lean_Elaborator_simpleBindersToPexpr(x_3, x_12, x_13, x_31);
if (lean::obj_tag(x_32) == 0)
{
uint8 x_33; 
lean::dec(x_30);
lean::dec(x_29);
lean::dec(x_21);
lean::dec(x_11);
lean::dec(x_9);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
x_33 = !lean::is_exclusive(x_32);
if (x_33 == 0)
{
return x_32;
}
else
{
obj* x_34; obj* x_35; 
x_34 = lean::cnstr_get(x_32, 0);
lean::inc(x_34);
lean::dec(x_32);
x_35 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_35, 0, x_34);
return x_35;
}
}
else
{
obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_36 = lean::cnstr_get(x_32, 0);
lean::inc(x_36);
lean::dec(x_32);
x_37 = lean::cnstr_get(x_36, 0);
lean::inc(x_37);
x_38 = lean::cnstr_get(x_36, 1);
lean::inc(x_38);
lean::dec(x_36);
if (lean::obj_tag(x_9) == 0)
{
lean::inc(x_7);
x_39 = x_7;
goto block_99;
}
else
{
obj* x_100; obj* x_101; 
x_100 = lean::cnstr_get(x_9, 0);
lean::inc(x_100);
lean::dec(x_9);
x_101 = lean::cnstr_get(x_100, 1);
lean::inc(x_101);
lean::dec(x_100);
x_39 = x_101;
goto block_99;
}
block_99:
{
obj* x_40; 
x_40 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__4(x_39, x_12, x_13, x_38);
if (lean::obj_tag(x_40) == 0)
{
uint8 x_41; 
lean::dec(x_37);
lean::dec(x_30);
lean::dec(x_29);
lean::dec(x_21);
lean::dec(x_11);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
x_41 = !lean::is_exclusive(x_40);
if (x_41 == 0)
{
return x_40;
}
else
{
obj* x_42; obj* x_43; 
x_42 = lean::cnstr_get(x_40, 0);
lean::inc(x_42);
lean::dec(x_40);
x_43 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_43, 0, x_42);
return x_43;
}
}
else
{
obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; 
x_44 = lean::cnstr_get(x_40, 0);
lean::inc(x_44);
lean::dec(x_40);
x_45 = lean::cnstr_get(x_44, 0);
lean::inc(x_45);
x_46 = lean::cnstr_get(x_44, 1);
lean::inc(x_46);
lean::dec(x_44);
x_47 = l_Lean_Elaborator_mkEqns___closed__1;
x_48 = l_Lean_Expr_mkCapp(x_47, x_45);
lean::inc(x_4);
x_49 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__5(x_4, x_47, x_5, x_12, x_13, x_46);
if (lean::obj_tag(x_6) == 0)
{
obj* x_95; 
x_95 = l_Lean_Elaborator_declaration_elaborate___lambda__3___closed__2;
x_50 = x_95;
goto block_94;
}
else
{
obj* x_96; obj* x_97; obj* x_98; 
x_96 = lean::cnstr_get(x_6, 0);
lean::inc(x_96);
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
lean::dec(x_96);
x_98 = l_Lean_Elaborator_mangleIdent(x_97);
x_50 = x_98;
goto block_94;
}
block_94:
{
obj* x_51; 
lean::inc(x_50);
x_51 = lean_expr_local(x_50, x_50, x_19, x_20);
if (lean::obj_tag(x_6) == 0)
{
if (lean::obj_tag(x_49) == 0)
{
uint8 x_52; 
lean::dec(x_51);
lean::dec(x_48);
lean::dec(x_37);
lean::dec(x_30);
lean::dec(x_29);
lean::dec(x_21);
lean::dec(x_11);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_4);
x_52 = !lean::is_exclusive(x_49);
if (x_52 == 0)
{
return x_49;
}
else
{
obj* x_53; obj* x_54; 
x_53 = lean::cnstr_get(x_49, 0);
lean::inc(x_53);
lean::dec(x_49);
x_54 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_54, 0, x_53);
return x_54;
}
}
else
{
obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; 
x_55 = lean::cnstr_get(x_49, 0);
lean::inc(x_55);
lean::dec(x_49);
x_56 = lean::cnstr_get(x_55, 0);
lean::inc(x_56);
x_57 = lean::cnstr_get(x_55, 1);
lean::inc(x_57);
lean::dec(x_55);
x_58 = l_Lean_Expr_mkCapp(x_47, x_56);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_58);
lean::cnstr_set(x_59, 1, x_7);
x_60 = l_Lean_Elaborator_declaration_elaborate___lambda__3___closed__1;
x_61 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_61, 0, x_60);
lean::cnstr_set(x_61, 1, x_59);
x_62 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_62, 0, x_51);
lean::cnstr_set(x_62, 1, x_61);
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_30);
lean::cnstr_set(x_63, 1, x_62);
x_64 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_64, 0, x_48);
lean::cnstr_set(x_64, 1, x_63);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_37);
lean::cnstr_set(x_65, 1, x_64);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_21);
lean::cnstr_set(x_66, 1, x_65);
x_67 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_67, 0, x_29);
lean::cnstr_set(x_67, 1, x_66);
x_68 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_68, 0, x_11);
lean::cnstr_set(x_68, 1, x_67);
x_69 = l_Lean_Expr_mkCapp(x_47, x_68);
x_70 = lean_expr_mk_mdata(x_8, x_69);
x_71 = l_Lean_Elaborator_oldElabCommand(x_4, x_70, x_12, x_13, x_57);
lean::dec(x_4);
return x_71;
}
}
else
{
if (lean::obj_tag(x_49) == 0)
{
uint8 x_72; 
lean::dec(x_51);
lean::dec(x_48);
lean::dec(x_37);
lean::dec(x_30);
lean::dec(x_29);
lean::dec(x_21);
lean::dec(x_11);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_4);
x_72 = !lean::is_exclusive(x_49);
if (x_72 == 0)
{
return x_49;
}
else
{
obj* x_73; obj* x_74; 
x_73 = lean::cnstr_get(x_49, 0);
lean::inc(x_73);
lean::dec(x_49);
x_74 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_74, 0, x_73);
return x_74;
}
}
else
{
obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; 
x_75 = lean::cnstr_get(x_6, 0);
lean::inc(x_75);
lean::dec(x_6);
x_76 = lean::cnstr_get(x_49, 0);
lean::inc(x_76);
lean::dec(x_49);
x_77 = lean::cnstr_get(x_75, 1);
lean::inc(x_77);
lean::dec(x_75);
x_78 = l_Lean_Elaborator_inferModToPexpr(x_77);
lean::dec(x_77);
x_79 = lean::cnstr_get(x_76, 0);
lean::inc(x_79);
x_80 = lean::cnstr_get(x_76, 1);
lean::inc(x_80);
lean::dec(x_76);
x_81 = l_Lean_Expr_mkCapp(x_47, x_79);
x_82 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_82, 0, x_81);
lean::cnstr_set(x_82, 1, x_7);
x_83 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_83, 0, x_78);
lean::cnstr_set(x_83, 1, x_82);
x_84 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_84, 0, x_51);
lean::cnstr_set(x_84, 1, x_83);
x_85 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_85, 0, x_30);
lean::cnstr_set(x_85, 1, x_84);
x_86 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_86, 0, x_48);
lean::cnstr_set(x_86, 1, x_85);
x_87 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_87, 0, x_37);
lean::cnstr_set(x_87, 1, x_86);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_21);
lean::cnstr_set(x_88, 1, x_87);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_29);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_11);
lean::cnstr_set(x_90, 1, x_89);
x_91 = l_Lean_Expr_mkCapp(x_47, x_90);
x_92 = lean_expr_mk_mdata(x_8, x_91);
x_93 = l_Lean_Elaborator_oldElabCommand(x_4, x_92, x_12, x_13, x_80);
lean::dec(x_4);
return x_93;
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Elaborator_declaration_elaborate___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_1 = lean::box(0);
x_2 = lean::mk_string("def");
x_3 = l_String_trim(x_2);
lean::dec(x_2);
x_4 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_4, 0, x_1);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_4);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Elaborator_declaration_elaborate___closed__2() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_1 = lean::box(0);
x_2 = lean::mk_string(".");
x_3 = lean::box(0);
x_4 = l_Lean_Name_toStringWithSep___main(x_2, x_3);
lean::dec(x_2);
x_5 = l_Lean_Parser_Substring_ofString(x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_7, 0, x_1);
lean::cnstr_set(x_7, 1, x_5);
lean::cnstr_set(x_7, 2, x_3);
lean::cnstr_set(x_7, 3, x_6);
lean::cnstr_set(x_7, 4, x_6);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_1);
return x_8;
}
}
obj* _init_l_Lean_Elaborator_declaration_elaborate___closed__3() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_1 = lean::box(0);
x_2 = lean::mk_string("command");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("axiom");
x_5 = lean_name_mk_string(x_1, x_4);
x_6 = lean::box(0);
x_7 = l_Lean_KVMap_setName(x_6, x_3, x_5);
return x_7;
}
}
obj* _init_l_Lean_Elaborator_declaration_elaborate___closed__4() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_1 = lean::box(0);
x_2 = lean::mk_string("command");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("inductives");
x_5 = lean_name_mk_string(x_1, x_4);
x_6 = lean::box(0);
x_7 = l_Lean_KVMap_setName(x_6, x_3, x_5);
return x_7;
}
}
obj* _init_l_Lean_Elaborator_declaration_elaborate___closed__5() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_1 = lean::box(0);
x_2 = lean::mk_string("command");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("structure");
x_5 = lean_name_mk_string(x_1, x_4);
x_6 = lean::box(0);
x_7 = l_Lean_KVMap_setName(x_6, x_3, x_5);
return x_7;
}
}
obj* l_Lean_Elaborator_declaration_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_11 = l_Lean_Parser_command_declaration_HasView;
x_12 = lean::cnstr_get(x_11, 0);
lean::inc(x_12);
lean::inc(x_1);
x_13 = lean::apply_1(x_12, x_1);
x_14 = lean::cnstr_get(x_13, 1);
lean::inc(x_14);
switch (lean::obj_tag(x_14)) {
case 0:
{
obj* x_15; obj* x_16; 
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
lean::dec(x_16);
x_17 = lean::cnstr_get(x_13, 0);
lean::inc(x_17);
lean::dec(x_13);
x_18 = lean::mk_nat_obj(1u);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_elabDefLike___boxed), 7, 4);
lean::closure_set(x_19, 0, x_1);
lean::closure_set(x_19, 1, x_17);
lean::closure_set(x_19, 2, x_15);
lean::closure_set(x_19, 3, x_18);
x_20 = l_Lean_Elaborator_locally(x_19, x_2, x_3, x_4);
return x_20;
}
case 3:
{
obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
lean::dec(x_16);
x_21 = lean::cnstr_get(x_13, 0);
lean::inc(x_21);
lean::dec(x_13);
x_22 = lean::mk_nat_obj(0u);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_elabDefLike___boxed), 7, 4);
lean::closure_set(x_23, 0, x_1);
lean::closure_set(x_23, 1, x_21);
lean::closure_set(x_23, 2, x_15);
lean::closure_set(x_23, 3, x_22);
x_24 = l_Lean_Elaborator_locally(x_23, x_2, x_3, x_4);
return x_24;
}
case 4:
{
obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
lean::dec(x_16);
x_25 = lean::cnstr_get(x_13, 0);
lean::inc(x_25);
lean::dec(x_13);
x_26 = lean::mk_nat_obj(2u);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_elabDefLike___boxed), 7, 4);
lean::closure_set(x_27, 0, x_1);
lean::closure_set(x_27, 1, x_25);
lean::closure_set(x_27, 2, x_15);
lean::closure_set(x_27, 3, x_26);
x_28 = l_Lean_Elaborator_locally(x_27, x_2, x_3, x_4);
return x_28;
}
default: 
{
obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
lean::dec(x_16);
x_29 = lean::cnstr_get(x_13, 0);
lean::inc(x_29);
lean::dec(x_13);
x_30 = lean::mk_nat_obj(6u);
x_31 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_elabDefLike___boxed), 7, 4);
lean::closure_set(x_31, 0, x_1);
lean::closure_set(x_31, 1, x_29);
lean::closure_set(x_31, 2, x_15);
lean::closure_set(x_31, 3, x_30);
x_32 = l_Lean_Elaborator_locally(x_31, x_2, x_3, x_4);
return x_32;
}
}
}
case 1:
{
obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; 
x_33 = lean::cnstr_get(x_14, 0);
lean::inc(x_33);
lean::dec(x_14);
x_34 = lean::cnstr_get(x_13, 0);
lean::inc(x_34);
lean::dec(x_13);
x_35 = lean::box(0);
x_36 = lean::cnstr_get(x_33, 2);
lean::inc(x_36);
x_37 = lean::cnstr_get(x_33, 1);
lean::inc(x_37);
x_38 = lean::cnstr_get(x_36, 0);
lean::inc(x_38);
x_39 = lean::cnstr_get(x_36, 1);
lean::inc(x_39);
lean::dec(x_36);
x_40 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_40, 0, x_39);
x_41 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_41, 0, x_38);
lean::cnstr_set(x_41, 1, x_40);
if (lean::obj_tag(x_37) == 0)
{
obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; 
x_42 = lean::cnstr_get(x_33, 3);
lean::inc(x_42);
lean::dec(x_33);
x_43 = l_Lean_Elaborator_declaration_elaborate___closed__1;
x_44 = l_Lean_Elaborator_declaration_elaborate___closed__2;
x_45 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_45, 0, x_43);
lean::cnstr_set(x_45, 1, x_35);
lean::cnstr_set(x_45, 2, x_44);
lean::cnstr_set(x_45, 3, x_41);
lean::cnstr_set(x_45, 4, x_42);
x_46 = lean::mk_nat_obj(4u);
x_47 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_elabDefLike___boxed), 7, 4);
lean::closure_set(x_47, 0, x_1);
lean::closure_set(x_47, 1, x_34);
lean::closure_set(x_47, 2, x_45);
lean::closure_set(x_47, 3, x_46);
x_48 = l_Lean_Elaborator_locally(x_47, x_2, x_3, x_4);
return x_48;
}
else
{
obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; 
x_49 = lean::cnstr_get(x_33, 3);
lean::inc(x_49);
lean::dec(x_33);
x_50 = lean::cnstr_get(x_37, 0);
lean::inc(x_50);
lean::dec(x_37);
x_51 = l_Lean_Elaborator_declaration_elaborate___closed__1;
x_52 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_35);
lean::cnstr_set(x_52, 2, x_50);
lean::cnstr_set(x_52, 3, x_41);
lean::cnstr_set(x_52, 4, x_49);
x_53 = lean::mk_nat_obj(4u);
x_54 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_elabDefLike___boxed), 7, 4);
lean::closure_set(x_54, 0, x_1);
lean::closure_set(x_54, 1, x_34);
lean::closure_set(x_54, 2, x_52);
lean::closure_set(x_54, 3, x_53);
x_55 = l_Lean_Elaborator_locally(x_54, x_2, x_3, x_4);
return x_55;
}
}
case 2:
{
obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; 
x_56 = lean::cnstr_get(x_14, 0);
lean::inc(x_56);
lean::dec(x_14);
x_57 = lean::cnstr_get(x_13, 0);
lean::inc(x_57);
lean::dec(x_13);
x_58 = lean::box(0);
x_59 = lean::cnstr_get(x_56, 1);
lean::inc(x_59);
x_60 = lean::cnstr_get(x_59, 0);
lean::inc(x_60);
x_61 = lean::cnstr_get(x_59, 1);
lean::inc(x_61);
lean::dec(x_59);
x_62 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_62, 0, x_61);
x_63 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_63, 0, x_60);
lean::cnstr_set(x_63, 1, x_62);
x_64 = lean::cnstr_get(x_56, 2);
lean::inc(x_64);
lean::dec(x_56);
x_65 = l_Lean_Elaborator_declaration_elaborate___closed__1;
x_66 = l_Lean_Elaborator_declaration_elaborate___closed__2;
x_67 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_67, 0, x_65);
lean::cnstr_set(x_67, 1, x_58);
lean::cnstr_set(x_67, 2, x_66);
lean::cnstr_set(x_67, 3, x_63);
lean::cnstr_set(x_67, 4, x_64);
x_68 = lean::mk_nat_obj(3u);
x_69 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_elabDefLike___boxed), 7, 4);
lean::closure_set(x_69, 0, x_1);
lean::closure_set(x_69, 1, x_57);
lean::closure_set(x_69, 2, x_67);
lean::closure_set(x_69, 3, x_68);
x_70 = l_Lean_Elaborator_locally(x_69, x_2, x_3, x_4);
return x_70;
}
case 3:
{
obj* x_71; obj* x_72; obj* x_73; 
x_71 = lean::cnstr_get(x_14, 0);
lean::inc(x_71);
lean::dec(x_14);
x_72 = lean::cnstr_get(x_71, 2);
lean::inc(x_72);
x_73 = lean::cnstr_get(x_72, 0);
lean::inc(x_73);
if (lean::obj_tag(x_73) == 0)
{
obj* x_74; 
lean::dec(x_73);
lean::dec(x_72);
lean::dec(x_71);
lean::dec(x_13);
x_74 = lean::box(0);
x_5 = x_74;
goto block_10;
}
else
{
obj* x_75; 
x_75 = lean::cnstr_get(x_73, 0);
lean::inc(x_75);
lean::dec(x_73);
if (lean::obj_tag(x_75) == 0)
{
obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; 
x_76 = lean::cnstr_get(x_71, 1);
lean::inc(x_76);
lean::dec(x_71);
x_77 = lean::cnstr_get(x_72, 1);
lean::inc(x_77);
lean::dec(x_72);
x_78 = lean::box(0);
x_79 = lean::cnstr_get(x_13, 0);
lean::inc(x_79);
lean::dec(x_13);
x_80 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_declModifiersToPexpr___boxed), 4, 1);
lean::closure_set(x_80, 0, x_79);
x_81 = l_Lean_Elaborator_declaration_elaborate___closed__3;
x_82 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_declaration_elaborate___lambda__1___boxed), 9, 5);
lean::closure_set(x_82, 0, x_76);
lean::closure_set(x_82, 1, x_77);
lean::closure_set(x_82, 2, x_78);
lean::closure_set(x_82, 3, x_81);
lean::closure_set(x_82, 4, x_1);
x_83 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_bind___at_Lean_Elaborator_declaration_elaborate___spec__1___rarg), 5, 2);
lean::closure_set(x_83, 0, x_80);
lean::closure_set(x_83, 1, x_82);
x_84 = l_Lean_Elaborator_locally(x_83, x_2, x_3, x_4);
return x_84;
}
else
{
obj* x_85; 
lean::dec(x_75);
lean::dec(x_72);
lean::dec(x_71);
lean::dec(x_13);
x_85 = lean::box(0);
x_5 = x_85;
goto block_10;
}
}
}
case 4:
{
obj* x_86; obj* x_87; 
x_86 = lean::cnstr_get(x_14, 0);
lean::inc(x_86);
lean::dec(x_14);
x_87 = lean::cnstr_get(x_86, 0);
lean::inc(x_87);
if (lean::obj_tag(x_87) == 0)
{
obj* x_88; obj* x_89; 
x_88 = lean::cnstr_get(x_86, 4);
lean::inc(x_88);
x_89 = lean::cnstr_get(x_88, 0);
lean::inc(x_89);
if (lean::obj_tag(x_89) == 0)
{
obj* x_90; 
lean::dec(x_89);
lean::dec(x_88);
lean::dec(x_86);
lean::dec(x_13);
x_90 = lean::box(0);
x_5 = x_90;
goto block_10;
}
else
{
obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; 
x_91 = lean::cnstr_get(x_86, 2);
lean::inc(x_91);
x_92 = lean::cnstr_get(x_86, 3);
lean::inc(x_92);
x_93 = lean::cnstr_get(x_86, 6);
lean::inc(x_93);
lean::dec(x_86);
x_94 = lean::cnstr_get(x_88, 1);
lean::inc(x_94);
lean::dec(x_88);
x_95 = lean::cnstr_get(x_89, 0);
lean::inc(x_95);
lean::dec(x_89);
x_96 = lean::box(0);
x_97 = lean::cnstr_get(x_13, 0);
lean::inc(x_97);
lean::dec(x_13);
lean::inc(x_97);
x_98 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_declModifiersToPexpr___boxed), 4, 1);
lean::closure_set(x_98, 0, x_97);
x_99 = l_Lean_Elaborator_declaration_elaborate___closed__4;
x_100 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_declaration_elaborate___lambda__2___boxed), 13, 9);
lean::closure_set(x_100, 0, x_96);
lean::closure_set(x_100, 1, x_92);
lean::closure_set(x_100, 2, x_94);
lean::closure_set(x_100, 3, x_95);
lean::closure_set(x_100, 4, x_1);
lean::closure_set(x_100, 5, x_93);
lean::closure_set(x_100, 6, x_99);
lean::closure_set(x_100, 7, x_91);
lean::closure_set(x_100, 8, x_97);
x_101 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_bind___at_Lean_Elaborator_declaration_elaborate___spec__1___rarg), 5, 2);
lean::closure_set(x_101, 0, x_98);
lean::closure_set(x_101, 1, x_100);
x_102 = l_Lean_Elaborator_locally(x_101, x_2, x_3, x_4);
return x_102;
}
}
else
{
obj* x_103; 
lean::dec(x_87);
lean::dec(x_86);
lean::dec(x_13);
x_103 = lean::box(0);
x_5 = x_103;
goto block_10;
}
}
default: 
{
obj* x_104; obj* x_105; 
x_104 = lean::cnstr_get(x_14, 0);
lean::inc(x_104);
lean::dec(x_14);
x_105 = lean::cnstr_get(x_104, 0);
lean::inc(x_105);
if (lean::obj_tag(x_105) == 0)
{
obj* x_106; obj* x_107; 
lean::dec(x_105);
x_106 = lean::cnstr_get(x_104, 3);
lean::inc(x_106);
x_107 = lean::cnstr_get(x_106, 0);
lean::inc(x_107);
if (lean::obj_tag(x_107) == 0)
{
obj* x_108; 
lean::dec(x_107);
lean::dec(x_106);
lean::dec(x_104);
lean::dec(x_13);
x_108 = lean::box(0);
x_5 = x_108;
goto block_10;
}
else
{
obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; 
x_109 = lean::cnstr_get(x_104, 1);
lean::inc(x_109);
x_110 = lean::cnstr_get(x_104, 2);
lean::inc(x_110);
x_111 = lean::cnstr_get(x_104, 4);
lean::inc(x_111);
x_112 = lean::cnstr_get(x_104, 6);
lean::inc(x_112);
x_113 = lean::cnstr_get(x_104, 7);
lean::inc(x_113);
lean::dec(x_104);
x_114 = lean::cnstr_get(x_106, 1);
lean::inc(x_114);
lean::dec(x_106);
x_115 = lean::cnstr_get(x_107, 0);
lean::inc(x_115);
lean::dec(x_107);
x_116 = lean::box(0);
x_117 = lean::cnstr_get(x_13, 0);
lean::inc(x_117);
lean::dec(x_13);
x_118 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_declModifiersToPexpr___boxed), 4, 1);
lean::closure_set(x_118, 0, x_117);
x_119 = l_Lean_Elaborator_declaration_elaborate___closed__5;
x_120 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_declaration_elaborate___lambda__3___boxed), 14, 10);
lean::closure_set(x_120, 0, x_110);
lean::closure_set(x_120, 1, x_114);
lean::closure_set(x_120, 2, x_115);
lean::closure_set(x_120, 3, x_1);
lean::closure_set(x_120, 4, x_113);
lean::closure_set(x_120, 5, x_112);
lean::closure_set(x_120, 6, x_116);
lean::closure_set(x_120, 7, x_119);
lean::closure_set(x_120, 8, x_111);
lean::closure_set(x_120, 9, x_109);
x_121 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_bind___at_Lean_Elaborator_declaration_elaborate___spec__1___rarg), 5, 2);
lean::closure_set(x_121, 0, x_118);
lean::closure_set(x_121, 1, x_120);
x_122 = l_Lean_Elaborator_locally(x_121, x_2, x_3, x_4);
return x_122;
}
}
else
{
obj* x_123; 
lean::dec(x_105);
lean::dec(x_104);
lean::dec(x_13);
x_123 = lean::box(0);
x_5 = x_123;
goto block_10;
}
}
}
block_10:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
lean::dec(x_5);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_1);
x_7 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2___closed__1;
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg___boxed), 5, 2);
lean::closure_set(x_8, 0, x_6);
lean::closure_set(x_8, 1, x_7);
x_9 = l_Lean_Elaborator_locally(x_8, x_2, x_3, x_4);
return x_9;
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_4);
lean::dec(x_3);
return x_6;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__4___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__4(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__5___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; 
x_7 = l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__5(x_1, x_2, x_3, x_4, x_5, x_6);
lean::dec(x_5);
lean::dec(x_4);
return x_7;
}
}
obj* l_Lean_Elaborator_declaration_elaborate___lambda__1___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9) {
_start:
{
obj* x_10; 
x_10 = l_Lean_Elaborator_declaration_elaborate___lambda__1(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_5);
return x_10;
}
}
obj* l_Lean_Elaborator_declaration_elaborate___lambda__2___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9, obj* x_10, obj* x_11, obj* x_12, obj* x_13) {
_start:
{
obj* x_14; 
x_14 = l_Lean_Elaborator_declaration_elaborate___lambda__2(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, x_11, x_12, x_13);
lean::dec(x_12);
lean::dec(x_11);
lean::dec(x_3);
return x_14;
}
}
obj* l_Lean_Elaborator_declaration_elaborate___lambda__3___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9, obj* x_10, obj* x_11, obj* x_12, obj* x_13, obj* x_14) {
_start:
{
obj* x_15; 
x_15 = l_Lean_Elaborator_declaration_elaborate___lambda__3(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, x_11, x_12, x_13, x_14);
lean::dec(x_13);
lean::dec(x_12);
lean::dec(x_2);
return x_15;
}
}
obj* l_List_mfilter___main___at_Lean_Elaborator_variables_elaborate___spec__1___lambda__1(obj* x_1, uint8 x_2, obj* x_3, obj* x_4) {
_start:
{
uint8 x_5; 
x_5 = !lean::is_exclusive(x_4);
if (x_5 == 0)
{
uint8 x_6; 
x_6 = !lean::is_exclusive(x_1);
if (x_6 == 0)
{
obj* x_7; obj* x_8; obj* x_9; 
x_7 = lean::cnstr_get(x_4, 4);
lean::cnstr_set_scalar(x_1, sizeof(void*)*2, x_2);
x_8 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
x_9 = l_Lean_Elaborator_OrderedRBMap_insert___rarg(x_8, x_7, x_3, x_1);
lean::cnstr_set(x_4, 4, x_9);
return x_4;
}
else
{
obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_10 = lean::cnstr_get(x_4, 4);
x_11 = lean::cnstr_get(x_1, 0);
x_12 = lean::cnstr_get(x_1, 1);
lean::inc(x_12);
lean::inc(x_11);
lean::dec(x_1);
x_13 = lean::alloc_cnstr(0, 2, 1);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set(x_13, 1, x_12);
lean::cnstr_set_scalar(x_13, sizeof(void*)*2, x_2);
x_14 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
x_15 = l_Lean_Elaborator_OrderedRBMap_insert___rarg(x_14, x_10, x_3, x_13);
lean::cnstr_set(x_4, 4, x_15);
return x_4;
}
}
else
{
obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_16 = lean::cnstr_get(x_4, 0);
x_17 = lean::cnstr_get(x_4, 1);
x_18 = lean::cnstr_get(x_4, 2);
x_19 = lean::cnstr_get(x_4, 3);
x_20 = lean::cnstr_get(x_4, 4);
x_21 = lean::cnstr_get(x_4, 5);
x_22 = lean::cnstr_get(x_4, 6);
x_23 = lean::cnstr_get(x_4, 7);
x_24 = lean::cnstr_get(x_4, 8);
lean::inc(x_24);
lean::inc(x_23);
lean::inc(x_22);
lean::inc(x_21);
lean::inc(x_20);
lean::inc(x_19);
lean::inc(x_18);
lean::inc(x_17);
lean::inc(x_16);
lean::dec(x_4);
x_25 = lean::cnstr_get(x_1, 0);
lean::inc(x_25);
x_26 = lean::cnstr_get(x_1, 1);
lean::inc(x_26);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_release(x_1, 0);
 lean::cnstr_release(x_1, 1);
 x_27 = x_1;
} else {
 lean::dec_ref(x_1);
 x_27 = lean::box(0);
}
if (lean::is_scalar(x_27)) {
 x_28 = lean::alloc_cnstr(0, 2, 1);
} else {
 x_28 = x_27;
}
lean::cnstr_set(x_28, 0, x_25);
lean::cnstr_set(x_28, 1, x_26);
lean::cnstr_set_scalar(x_28, sizeof(void*)*2, x_2);
x_29 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
x_30 = l_Lean_Elaborator_OrderedRBMap_insert___rarg(x_29, x_20, x_3, x_28);
x_31 = lean::alloc_cnstr(0, 9, 0);
lean::cnstr_set(x_31, 0, x_16);
lean::cnstr_set(x_31, 1, x_17);
lean::cnstr_set(x_31, 2, x_18);
lean::cnstr_set(x_31, 3, x_19);
lean::cnstr_set(x_31, 4, x_30);
lean::cnstr_set(x_31, 5, x_21);
lean::cnstr_set(x_31, 6, x_22);
lean::cnstr_set(x_31, 7, x_23);
lean::cnstr_set(x_31, 8, x_24);
return x_31;
}
}
}
obj* l_List_mfilter___main___at_Lean_Elaborator_variables_elaborate___spec__1(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_5; obj* x_6; 
x_5 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_5, 0, x_1);
lean::cnstr_set(x_5, 1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
else
{
obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_45; obj* x_46; obj* x_47; uint8 x_48; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
x_8 = lean::cnstr_get(x_1, 1);
lean::inc(x_8);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_release(x_1, 0);
 lean::cnstr_release(x_1, 1);
 x_9 = x_1;
} else {
 lean::dec_ref(x_1);
 x_9 = lean::box(0);
}
x_45 = l_Lean_Parser_Term_simpleBinder_View_toBinderInfo___main(x_7);
x_46 = lean::cnstr_get(x_45, 1);
lean::inc(x_46);
x_47 = lean::cnstr_get(x_45, 0);
lean::inc(x_47);
lean::dec(x_45);
x_48 = !lean::is_exclusive(x_46);
if (x_48 == 0)
{
obj* x_49; obj* x_50; obj* x_51; uint8 x_52; 
x_49 = lean::cnstr_get(x_46, 0);
x_50 = lean::cnstr_get(x_46, 1);
x_51 = l_Lean_Expander_bindingAnnotationUpdate;
x_52 = l_Lean_Parser_Syntax_isOfKind___main(x_51, x_50);
lean::dec(x_50);
if (x_52 == 0)
{
uint8 x_53; obj* x_54; 
lean::dec(x_49);
lean::dec(x_47);
x_53 = 1;
x_54 = lean::box(x_53);
lean::cnstr_set(x_46, 1, x_4);
lean::cnstr_set(x_46, 0, x_54);
x_10 = x_46;
goto block_44;
}
else
{
obj* x_55; 
lean::free_heap_obj(x_46);
x_55 = l_Lean_Elaborator_currentScope(x_2, x_3, x_4);
if (lean::obj_tag(x_55) == 0)
{
uint8 x_56; 
lean::dec(x_49);
lean::dec(x_47);
lean::dec(x_9);
lean::dec(x_8);
lean::dec(x_7);
x_56 = !lean::is_exclusive(x_55);
if (x_56 == 0)
{
return x_55;
}
else
{
obj* x_57; obj* x_58; 
x_57 = lean::cnstr_get(x_55, 0);
lean::inc(x_57);
lean::dec(x_55);
x_58 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_58, 0, x_57);
return x_58;
}
}
else
{
obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; 
x_59 = lean::cnstr_get(x_55, 0);
lean::inc(x_59);
lean::dec(x_55);
x_60 = lean::cnstr_get(x_59, 0);
lean::inc(x_60);
x_61 = lean::cnstr_get(x_59, 1);
lean::inc(x_61);
lean::dec(x_59);
x_62 = l_Lean_Elaborator_mangleIdent(x_49);
x_63 = lean::cnstr_get(x_60, 4);
lean::inc(x_63);
lean::dec(x_60);
x_64 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
lean::inc(x_62);
x_65 = l_Lean_Elaborator_OrderedRBMap_find___rarg(x_64, x_63, x_62);
if (lean::obj_tag(x_65) == 0)
{
obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; 
lean::dec(x_47);
x_66 = lean::box(0);
x_67 = l_Lean_Name_toString___closed__1;
lean::inc(x_62);
x_68 = l_Lean_Name_toStringWithSep___main(x_67, x_62);
x_69 = l_Lean_Parser_Substring_ofString(x_68);
x_70 = lean::box(0);
x_71 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_71, 0, x_66);
lean::cnstr_set(x_71, 1, x_69);
lean::cnstr_set(x_71, 2, x_62);
lean::cnstr_set(x_71, 3, x_70);
lean::cnstr_set(x_71, 4, x_70);
x_72 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_72, 0, x_71);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
x_74 = l_String_splitAux___main___closed__1;
x_75 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_73, x_74, x_2, x_3, x_61);
lean::dec(x_61);
lean::dec(x_73);
if (lean::obj_tag(x_75) == 0)
{
uint8 x_76; 
lean::dec(x_9);
lean::dec(x_8);
lean::dec(x_7);
x_76 = !lean::is_exclusive(x_75);
if (x_76 == 0)
{
return x_75;
}
else
{
obj* x_77; obj* x_78; 
x_77 = lean::cnstr_get(x_75, 0);
lean::inc(x_77);
lean::dec(x_75);
x_78 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_78, 0, x_77);
return x_78;
}
}
else
{
obj* x_79; uint8 x_80; 
x_79 = lean::cnstr_get(x_75, 0);
lean::inc(x_79);
lean::dec(x_75);
x_80 = !lean::is_exclusive(x_79);
if (x_80 == 0)
{
obj* x_81; uint8 x_82; obj* x_83; 
x_81 = lean::cnstr_get(x_79, 0);
lean::dec(x_81);
x_82 = 0;
x_83 = lean::box(x_82);
lean::cnstr_set(x_79, 0, x_83);
x_10 = x_79;
goto block_44;
}
else
{
obj* x_84; uint8 x_85; obj* x_86; obj* x_87; 
x_84 = lean::cnstr_get(x_79, 1);
lean::inc(x_84);
lean::dec(x_79);
x_85 = 0;
x_86 = lean::box(x_85);
x_87 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_87, 0, x_86);
lean::cnstr_set(x_87, 1, x_84);
x_10 = x_87;
goto block_44;
}
}
}
else
{
obj* x_88; obj* x_89; obj* x_90; obj* x_91; 
x_88 = lean::cnstr_get(x_65, 0);
lean::inc(x_88);
lean::dec(x_65);
x_89 = lean::cnstr_get(x_88, 1);
lean::inc(x_89);
lean::dec(x_88);
x_90 = lean::alloc_closure(reinterpret_cast<void*>(l_List_mfilter___main___at_Lean_Elaborator_variables_elaborate___spec__1___lambda__1___boxed), 4, 3);
lean::closure_set(x_90, 0, x_89);
lean::closure_set(x_90, 1, x_47);
lean::closure_set(x_90, 2, x_62);
x_91 = l_Lean_Elaborator_modifyCurrentScope(x_90, x_2, x_3, x_61);
if (lean::obj_tag(x_91) == 0)
{
uint8 x_92; 
lean::dec(x_9);
lean::dec(x_8);
lean::dec(x_7);
x_92 = !lean::is_exclusive(x_91);
if (x_92 == 0)
{
return x_91;
}
else
{
obj* x_93; obj* x_94; 
x_93 = lean::cnstr_get(x_91, 0);
lean::inc(x_93);
lean::dec(x_91);
x_94 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
}
else
{
obj* x_95; uint8 x_96; 
x_95 = lean::cnstr_get(x_91, 0);
lean::inc(x_95);
lean::dec(x_91);
x_96 = !lean::is_exclusive(x_95);
if (x_96 == 0)
{
obj* x_97; uint8 x_98; obj* x_99; 
x_97 = lean::cnstr_get(x_95, 0);
lean::dec(x_97);
x_98 = 0;
x_99 = lean::box(x_98);
lean::cnstr_set(x_95, 0, x_99);
x_10 = x_95;
goto block_44;
}
else
{
obj* x_100; uint8 x_101; obj* x_102; obj* x_103; 
x_100 = lean::cnstr_get(x_95, 1);
lean::inc(x_100);
lean::dec(x_95);
x_101 = 0;
x_102 = lean::box(x_101);
x_103 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_103, 0, x_102);
lean::cnstr_set(x_103, 1, x_100);
x_10 = x_103;
goto block_44;
}
}
}
}
}
}
else
{
obj* x_104; obj* x_105; obj* x_106; uint8 x_107; 
x_104 = lean::cnstr_get(x_46, 0);
x_105 = lean::cnstr_get(x_46, 1);
lean::inc(x_105);
lean::inc(x_104);
lean::dec(x_46);
x_106 = l_Lean_Expander_bindingAnnotationUpdate;
x_107 = l_Lean_Parser_Syntax_isOfKind___main(x_106, x_105);
lean::dec(x_105);
if (x_107 == 0)
{
uint8 x_108; obj* x_109; obj* x_110; 
lean::dec(x_104);
lean::dec(x_47);
x_108 = 1;
x_109 = lean::box(x_108);
x_110 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_110, 0, x_109);
lean::cnstr_set(x_110, 1, x_4);
x_10 = x_110;
goto block_44;
}
else
{
obj* x_111; 
x_111 = l_Lean_Elaborator_currentScope(x_2, x_3, x_4);
if (lean::obj_tag(x_111) == 0)
{
obj* x_112; obj* x_113; obj* x_114; 
lean::dec(x_104);
lean::dec(x_47);
lean::dec(x_9);
lean::dec(x_8);
lean::dec(x_7);
x_112 = lean::cnstr_get(x_111, 0);
lean::inc(x_112);
if (lean::is_exclusive(x_111)) {
 lean::cnstr_release(x_111, 0);
 x_113 = x_111;
} else {
 lean::dec_ref(x_111);
 x_113 = lean::box(0);
}
if (lean::is_scalar(x_113)) {
 x_114 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_114 = x_113;
}
lean::cnstr_set(x_114, 0, x_112);
return x_114;
}
else
{
obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; 
x_115 = lean::cnstr_get(x_111, 0);
lean::inc(x_115);
lean::dec(x_111);
x_116 = lean::cnstr_get(x_115, 0);
lean::inc(x_116);
x_117 = lean::cnstr_get(x_115, 1);
lean::inc(x_117);
lean::dec(x_115);
x_118 = l_Lean_Elaborator_mangleIdent(x_104);
x_119 = lean::cnstr_get(x_116, 4);
lean::inc(x_119);
lean::dec(x_116);
x_120 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
lean::inc(x_118);
x_121 = l_Lean_Elaborator_OrderedRBMap_find___rarg(x_120, x_119, x_118);
if (lean::obj_tag(x_121) == 0)
{
obj* x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; obj* x_129; obj* x_130; obj* x_131; 
lean::dec(x_47);
x_122 = lean::box(0);
x_123 = l_Lean_Name_toString___closed__1;
lean::inc(x_118);
x_124 = l_Lean_Name_toStringWithSep___main(x_123, x_118);
x_125 = l_Lean_Parser_Substring_ofString(x_124);
x_126 = lean::box(0);
x_127 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_127, 0, x_122);
lean::cnstr_set(x_127, 1, x_125);
lean::cnstr_set(x_127, 2, x_118);
lean::cnstr_set(x_127, 3, x_126);
lean::cnstr_set(x_127, 4, x_126);
x_128 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_128, 0, x_127);
x_129 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_129, 0, x_128);
x_130 = l_String_splitAux___main___closed__1;
x_131 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_129, x_130, x_2, x_3, x_117);
lean::dec(x_117);
lean::dec(x_129);
if (lean::obj_tag(x_131) == 0)
{
obj* x_132; obj* x_133; obj* x_134; 
lean::dec(x_9);
lean::dec(x_8);
lean::dec(x_7);
x_132 = lean::cnstr_get(x_131, 0);
lean::inc(x_132);
if (lean::is_exclusive(x_131)) {
 lean::cnstr_release(x_131, 0);
 x_133 = x_131;
} else {
 lean::dec_ref(x_131);
 x_133 = lean::box(0);
}
if (lean::is_scalar(x_133)) {
 x_134 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_134 = x_133;
}
lean::cnstr_set(x_134, 0, x_132);
return x_134;
}
else
{
obj* x_135; obj* x_136; obj* x_137; uint8 x_138; obj* x_139; obj* x_140; 
x_135 = lean::cnstr_get(x_131, 0);
lean::inc(x_135);
lean::dec(x_131);
x_136 = lean::cnstr_get(x_135, 1);
lean::inc(x_136);
if (lean::is_exclusive(x_135)) {
 lean::cnstr_release(x_135, 0);
 lean::cnstr_release(x_135, 1);
 x_137 = x_135;
} else {
 lean::dec_ref(x_135);
 x_137 = lean::box(0);
}
x_138 = 0;
x_139 = lean::box(x_138);
if (lean::is_scalar(x_137)) {
 x_140 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_140 = x_137;
}
lean::cnstr_set(x_140, 0, x_139);
lean::cnstr_set(x_140, 1, x_136);
x_10 = x_140;
goto block_44;
}
}
else
{
obj* x_141; obj* x_142; obj* x_143; obj* x_144; 
x_141 = lean::cnstr_get(x_121, 0);
lean::inc(x_141);
lean::dec(x_121);
x_142 = lean::cnstr_get(x_141, 1);
lean::inc(x_142);
lean::dec(x_141);
x_143 = lean::alloc_closure(reinterpret_cast<void*>(l_List_mfilter___main___at_Lean_Elaborator_variables_elaborate___spec__1___lambda__1___boxed), 4, 3);
lean::closure_set(x_143, 0, x_142);
lean::closure_set(x_143, 1, x_47);
lean::closure_set(x_143, 2, x_118);
x_144 = l_Lean_Elaborator_modifyCurrentScope(x_143, x_2, x_3, x_117);
if (lean::obj_tag(x_144) == 0)
{
obj* x_145; obj* x_146; obj* x_147; 
lean::dec(x_9);
lean::dec(x_8);
lean::dec(x_7);
x_145 = lean::cnstr_get(x_144, 0);
lean::inc(x_145);
if (lean::is_exclusive(x_144)) {
 lean::cnstr_release(x_144, 0);
 x_146 = x_144;
} else {
 lean::dec_ref(x_144);
 x_146 = lean::box(0);
}
if (lean::is_scalar(x_146)) {
 x_147 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_147 = x_146;
}
lean::cnstr_set(x_147, 0, x_145);
return x_147;
}
else
{
obj* x_148; obj* x_149; obj* x_150; uint8 x_151; obj* x_152; obj* x_153; 
x_148 = lean::cnstr_get(x_144, 0);
lean::inc(x_148);
lean::dec(x_144);
x_149 = lean::cnstr_get(x_148, 1);
lean::inc(x_149);
if (lean::is_exclusive(x_148)) {
 lean::cnstr_release(x_148, 0);
 lean::cnstr_release(x_148, 1);
 x_150 = x_148;
} else {
 lean::dec_ref(x_148);
 x_150 = lean::box(0);
}
x_151 = 0;
x_152 = lean::box(x_151);
if (lean::is_scalar(x_150)) {
 x_153 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_153 = x_150;
}
lean::cnstr_set(x_153, 0, x_152);
lean::cnstr_set(x_153, 1, x_149);
x_10 = x_153;
goto block_44;
}
}
}
}
}
block_44:
{
obj* x_11; obj* x_12; obj* x_13; 
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_12 = lean::cnstr_get(x_10, 1);
lean::inc(x_12);
lean::dec(x_10);
x_13 = l_List_mfilter___main___at_Lean_Elaborator_variables_elaborate___spec__1(x_8, x_2, x_3, x_12);
if (lean::obj_tag(x_13) == 0)
{
uint8 x_14; 
lean::dec(x_11);
lean::dec(x_9);
lean::dec(x_7);
x_14 = !lean::is_exclusive(x_13);
if (x_14 == 0)
{
return x_13;
}
else
{
obj* x_15; obj* x_16; 
x_15 = lean::cnstr_get(x_13, 0);
lean::inc(x_15);
lean::dec(x_13);
x_16 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_16, 0, x_15);
return x_16;
}
}
else
{
uint8 x_17; 
x_17 = !lean::is_exclusive(x_13);
if (x_17 == 0)
{
obj* x_18; uint8 x_19; 
x_18 = lean::cnstr_get(x_13, 0);
x_19 = lean::unbox(x_11);
lean::dec(x_11);
if (x_19 == 0)
{
uint8 x_20; 
lean::dec(x_9);
lean::dec(x_7);
x_20 = !lean::is_exclusive(x_18);
if (x_20 == 0)
{
return x_13;
}
else
{
obj* x_21; obj* x_22; obj* x_23; 
x_21 = lean::cnstr_get(x_18, 0);
x_22 = lean::cnstr_get(x_18, 1);
lean::inc(x_22);
lean::inc(x_21);
lean::dec(x_18);
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_21);
lean::cnstr_set(x_23, 1, x_22);
lean::cnstr_set(x_13, 0, x_23);
return x_13;
}
}
else
{
uint8 x_24; 
x_24 = !lean::is_exclusive(x_18);
if (x_24 == 0)
{
obj* x_25; obj* x_26; 
x_25 = lean::cnstr_get(x_18, 0);
if (lean::is_scalar(x_9)) {
 x_26 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_26 = x_9;
}
lean::cnstr_set(x_26, 0, x_7);
lean::cnstr_set(x_26, 1, x_25);
lean::cnstr_set(x_18, 0, x_26);
return x_13;
}
else
{
obj* x_27; obj* x_28; obj* x_29; obj* x_30; 
x_27 = lean::cnstr_get(x_18, 0);
x_28 = lean::cnstr_get(x_18, 1);
lean::inc(x_28);
lean::inc(x_27);
lean::dec(x_18);
if (lean::is_scalar(x_9)) {
 x_29 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_29 = x_9;
}
lean::cnstr_set(x_29, 0, x_7);
lean::cnstr_set(x_29, 1, x_27);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_28);
lean::cnstr_set(x_13, 0, x_30);
return x_13;
}
}
}
else
{
obj* x_31; uint8 x_32; 
x_31 = lean::cnstr_get(x_13, 0);
lean::inc(x_31);
lean::dec(x_13);
x_32 = lean::unbox(x_11);
lean::dec(x_11);
if (x_32 == 0)
{
obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; 
lean::dec(x_9);
lean::dec(x_7);
x_33 = lean::cnstr_get(x_31, 0);
lean::inc(x_33);
x_34 = lean::cnstr_get(x_31, 1);
lean::inc(x_34);
if (lean::is_exclusive(x_31)) {
 lean::cnstr_release(x_31, 0);
 lean::cnstr_release(x_31, 1);
 x_35 = x_31;
} else {
 lean::dec_ref(x_31);
 x_35 = lean::box(0);
}
if (lean::is_scalar(x_35)) {
 x_36 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_36 = x_35;
}
lean::cnstr_set(x_36, 0, x_33);
lean::cnstr_set(x_36, 1, x_34);
x_37 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_37, 0, x_36);
return x_37;
}
else
{
obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; 
x_38 = lean::cnstr_get(x_31, 0);
lean::inc(x_38);
x_39 = lean::cnstr_get(x_31, 1);
lean::inc(x_39);
if (lean::is_exclusive(x_31)) {
 lean::cnstr_release(x_31, 0);
 lean::cnstr_release(x_31, 1);
 x_40 = x_31;
} else {
 lean::dec_ref(x_31);
 x_40 = lean::box(0);
}
if (lean::is_scalar(x_9)) {
 x_41 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_41 = x_9;
}
lean::cnstr_set(x_41, 0, x_7);
lean::cnstr_set(x_41, 1, x_38);
if (lean::is_scalar(x_40)) {
 x_42 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_42 = x_40;
}
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_39);
x_43 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_43, 0, x_42);
return x_43;
}
}
}
}
}
}
}
obj* _init_l_Lean_Elaborator_variables_elaborate___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("variables.elaborate: unexpected input");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_variables_elaborate___closed__2() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_1 = lean::box(0);
x_2 = lean::mk_string("command");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("variables");
x_5 = lean_name_mk_string(x_1, x_4);
x_6 = lean::box(0);
x_7 = l_Lean_KVMap_setName(x_6, x_3, x_5);
return x_7;
}
}
obj* l_Lean_Elaborator_variables_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_5 = l_Lean_Parser_command_variables_HasView;
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
lean::inc(x_1);
x_7 = lean::apply_1(x_6, x_1);
x_8 = lean::cnstr_get(x_7, 1);
lean::inc(x_8);
lean::dec(x_7);
if (lean::obj_tag(x_8) == 0)
{
obj* x_9; obj* x_10; obj* x_11; 
lean::dec(x_8);
lean::inc(x_1);
x_9 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_9, 0, x_1);
x_10 = l_Lean_Elaborator_variables_elaborate___closed__1;
x_11 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_9, x_10, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_9);
if (lean::obj_tag(x_11) == 0)
{
uint8 x_12; 
lean::dec(x_1);
x_12 = !lean::is_exclusive(x_11);
if (x_12 == 0)
{
return x_11;
}
else
{
obj* x_13; obj* x_14; 
x_13 = lean::cnstr_get(x_11, 0);
lean::inc(x_13);
lean::dec(x_11);
x_14 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
}
else
{
obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
lean::dec(x_11);
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
x_17 = lean::cnstr_get(x_15, 1);
lean::inc(x_17);
lean::dec(x_15);
x_18 = l_Lean_Elaborator_simpleBindersToPexpr(x_16, x_2, x_3, x_17);
if (lean::obj_tag(x_18) == 0)
{
uint8 x_19; 
lean::dec(x_1);
x_19 = !lean::is_exclusive(x_18);
if (x_19 == 0)
{
return x_18;
}
else
{
obj* x_20; obj* x_21; 
x_20 = lean::cnstr_get(x_18, 0);
lean::inc(x_20);
lean::dec(x_18);
x_21 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_21, 0, x_20);
return x_21;
}
}
else
{
obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_22 = lean::cnstr_get(x_18, 0);
lean::inc(x_22);
lean::dec(x_18);
x_23 = lean::cnstr_get(x_22, 0);
lean::inc(x_23);
x_24 = lean::cnstr_get(x_22, 1);
lean::inc(x_24);
lean::dec(x_22);
x_25 = l_Lean_Elaborator_variables_elaborate___closed__2;
x_26 = lean_expr_mk_mdata(x_25, x_23);
x_27 = l_Lean_Elaborator_oldElabCommand(x_1, x_26, x_2, x_3, x_24);
lean::dec(x_1);
return x_27;
}
}
}
else
{
obj* x_28; obj* x_29; 
x_28 = lean::cnstr_get(x_8, 0);
lean::inc(x_28);
lean::dec(x_8);
x_29 = l_List_mfilter___main___at_Lean_Elaborator_variables_elaborate___spec__1(x_28, x_2, x_3, x_4);
if (lean::obj_tag(x_29) == 0)
{
uint8 x_30; 
lean::dec(x_1);
x_30 = !lean::is_exclusive(x_29);
if (x_30 == 0)
{
return x_29;
}
else
{
obj* x_31; obj* x_32; 
x_31 = lean::cnstr_get(x_29, 0);
lean::inc(x_31);
lean::dec(x_29);
x_32 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_32, 0, x_31);
return x_32;
}
}
else
{
obj* x_33; obj* x_34; obj* x_35; obj* x_36; 
x_33 = lean::cnstr_get(x_29, 0);
lean::inc(x_33);
lean::dec(x_29);
x_34 = lean::cnstr_get(x_33, 0);
lean::inc(x_34);
x_35 = lean::cnstr_get(x_33, 1);
lean::inc(x_35);
lean::dec(x_33);
x_36 = l_Lean_Elaborator_simpleBindersToPexpr(x_34, x_2, x_3, x_35);
if (lean::obj_tag(x_36) == 0)
{
uint8 x_37; 
lean::dec(x_1);
x_37 = !lean::is_exclusive(x_36);
if (x_37 == 0)
{
return x_36;
}
else
{
obj* x_38; obj* x_39; 
x_38 = lean::cnstr_get(x_36, 0);
lean::inc(x_38);
lean::dec(x_36);
x_39 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_39, 0, x_38);
return x_39;
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; 
x_40 = lean::cnstr_get(x_36, 0);
lean::inc(x_40);
lean::dec(x_36);
x_41 = lean::cnstr_get(x_40, 0);
lean::inc(x_41);
x_42 = lean::cnstr_get(x_40, 1);
lean::inc(x_42);
lean::dec(x_40);
x_43 = l_Lean_Elaborator_variables_elaborate___closed__2;
x_44 = lean_expr_mk_mdata(x_43, x_41);
x_45 = l_Lean_Elaborator_oldElabCommand(x_1, x_44, x_2, x_3, x_42);
lean::dec(x_1);
return x_45;
}
}
}
}
}
obj* l_List_mfilter___main___at_Lean_Elaborator_variables_elaborate___spec__1___lambda__1___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
uint8 x_5; obj* x_6; 
x_5 = lean::unbox(x_2);
lean::dec(x_2);
x_6 = l_List_mfilter___main___at_Lean_Elaborator_variables_elaborate___spec__1___lambda__1(x_1, x_5, x_3, x_4);
return x_6;
}
}
obj* l_List_mfilter___main___at_Lean_Elaborator_variables_elaborate___spec__1___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_mfilter___main___at_Lean_Elaborator_variables_elaborate___spec__1(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_variables_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_variables_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_List_foldl___main___at_Lean_Elaborator_include_elaborate___spec__1(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
return x_1;
}
else
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_3 = lean::cnstr_get(x_2, 0);
lean::inc(x_3);
x_4 = lean::cnstr_get(x_2, 1);
lean::inc(x_4);
lean::dec(x_2);
x_5 = l_Lean_Elaborator_mangleIdent(x_3);
x_6 = lean::box(0);
x_7 = l_RBNode_insert___at_Lean_NameSet_insert___spec__1(x_1, x_5, x_6);
x_1 = x_7;
x_2 = x_4;
goto _start;
}
}
}
obj* l_Lean_Elaborator_include_elaborate___lambda__1(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; 
x_3 = !lean::is_exclusive(x_2);
if (x_3 == 0)
{
obj* x_4; obj* x_5; obj* x_6; 
x_4 = lean::cnstr_get(x_2, 5);
x_5 = lean::cnstr_get(x_1, 1);
lean::inc(x_5);
lean::dec(x_1);
x_6 = l_List_foldl___main___at_Lean_Elaborator_include_elaborate___spec__1(x_4, x_5);
lean::cnstr_set(x_2, 5, x_6);
return x_2;
}
else
{
obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_7 = lean::cnstr_get(x_2, 0);
x_8 = lean::cnstr_get(x_2, 1);
x_9 = lean::cnstr_get(x_2, 2);
x_10 = lean::cnstr_get(x_2, 3);
x_11 = lean::cnstr_get(x_2, 4);
x_12 = lean::cnstr_get(x_2, 5);
x_13 = lean::cnstr_get(x_2, 6);
x_14 = lean::cnstr_get(x_2, 7);
x_15 = lean::cnstr_get(x_2, 8);
lean::inc(x_15);
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
lean::inc(x_8);
lean::inc(x_7);
lean::dec(x_2);
x_16 = lean::cnstr_get(x_1, 1);
lean::inc(x_16);
lean::dec(x_1);
x_17 = l_List_foldl___main___at_Lean_Elaborator_include_elaborate___spec__1(x_12, x_16);
x_18 = lean::alloc_cnstr(0, 9, 0);
lean::cnstr_set(x_18, 0, x_7);
lean::cnstr_set(x_18, 1, x_8);
lean::cnstr_set(x_18, 2, x_9);
lean::cnstr_set(x_18, 3, x_10);
lean::cnstr_set(x_18, 4, x_11);
lean::cnstr_set(x_18, 5, x_17);
lean::cnstr_set(x_18, 6, x_13);
lean::cnstr_set(x_18, 7, x_14);
lean::cnstr_set(x_18, 8, x_15);
return x_18;
}
}
}
obj* l_Lean_Elaborator_include_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_5 = l_Lean_Parser_command_include_HasView;
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
x_7 = lean::apply_1(x_6, x_1);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_include_elaborate___lambda__1), 2, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = l_Lean_Elaborator_modifyCurrentScope(x_8, x_2, x_3, x_4);
return x_9;
}
}
obj* l_Lean_Elaborator_include_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_include_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* _init_l_Lean_Elaborator_Module_header_elaborate___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("not implemented: imports");
return x_1;
}
}
obj* l_Lean_Elaborator_Module_header_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_5 = l_Lean_Parser_Module_header_HasView;
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
lean::inc(x_1);
x_7 = lean::apply_1(x_6, x_1);
x_8 = lean::cnstr_get(x_7, 0);
lean::inc(x_8);
if (lean::obj_tag(x_8) == 0)
{
obj* x_9; obj* x_10; obj* x_11; 
lean::dec(x_7);
x_9 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_9, 0, x_1);
x_10 = l_Lean_Elaborator_Module_header_elaborate___closed__1;
x_11 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_9, x_10, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_9);
return x_11;
}
else
{
uint8 x_12; 
x_12 = !lean::is_exclusive(x_8);
if (x_12 == 0)
{
obj* x_13; obj* x_14; 
x_13 = lean::cnstr_get(x_8, 0);
lean::dec(x_13);
x_14 = lean::cnstr_get(x_7, 1);
lean::inc(x_14);
lean::dec(x_7);
if (lean::obj_tag(x_14) == 0)
{
obj* x_15; obj* x_16; obj* x_17; 
lean::free_heap_obj(x_8);
lean::dec(x_1);
x_15 = lean::box(0);
x_16 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_4);
x_17 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_17, 0, x_16);
return x_17;
}
else
{
obj* x_18; obj* x_19; 
lean::dec(x_14);
lean::cnstr_set(x_8, 0, x_1);
x_18 = l_Lean_Elaborator_Module_header_elaborate___closed__1;
x_19 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_8, x_18, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_8);
return x_19;
}
}
else
{
obj* x_20; 
lean::dec(x_8);
x_20 = lean::cnstr_get(x_7, 1);
lean::inc(x_20);
lean::dec(x_7);
if (lean::obj_tag(x_20) == 0)
{
obj* x_21; obj* x_22; obj* x_23; 
lean::dec(x_1);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_4);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_22);
return x_23;
}
else
{
obj* x_24; obj* x_25; obj* x_26; 
lean::dec(x_20);
x_24 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_24, 0, x_1);
x_25 = l_Lean_Elaborator_Module_header_elaborate___closed__1;
x_26 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_24, x_25, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_24);
return x_26;
}
}
}
}
}
obj* l_Lean_Elaborator_Module_header_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_Module_header_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_precToNat___main(obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::mk_nat_obj(0u);
return x_2;
}
else
{
obj* x_3; obj* x_4; obj* x_5; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_4 = lean::cnstr_get(x_3, 1);
lean::inc(x_4);
lean::dec(x_3);
x_5 = l_Lean_Parser_command_NotationSpec_precedenceTerm_View_toNat___main(x_4);
return x_5;
}
}
}
obj* l_Lean_Elaborator_precToNat(obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_Lean_Elaborator_precToNat___main(x_1);
return x_2;
}
}
obj* _init_l_List_mfoldl___main___at_Lean_Elaborator_CommandParserConfig_registerNotationTokens___spec__1___closed__1() {
_start:
{
obj* x_1; obj* x_2; 
x_1 = lean::mk_string("registerNotationTokens: unreachable");
x_2 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2, 0, x_1);
return x_2;
}
}
obj* l_List_mfoldl___main___at_Lean_Elaborator_CommandParserConfig_registerNotationTokens___spec__1(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; 
x_3 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_3, 0, x_1);
return x_3;
}
else
{
obj* x_4; obj* x_5; obj* x_6; 
x_4 = lean::cnstr_get(x_2, 0);
lean::inc(x_4);
x_5 = lean::cnstr_get(x_4, 0);
lean::inc(x_5);
lean::dec(x_4);
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
if (lean::obj_tag(x_6) == 0)
{
obj* x_7; 
lean::dec(x_5);
lean::dec(x_2);
lean::dec(x_1);
x_7 = l_List_mfoldl___main___at_Lean_Elaborator_CommandParserConfig_registerNotationTokens___spec__1___closed__1;
return x_7;
}
else
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; uint8 x_12; 
x_8 = lean::cnstr_get(x_1, 0);
lean::inc(x_8);
x_9 = lean::cnstr_get(x_2, 1);
lean::inc(x_9);
lean::dec(x_2);
x_10 = lean::cnstr_get(x_5, 3);
lean::inc(x_10);
lean::dec(x_5);
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
lean::dec(x_6);
x_12 = !lean::is_exclusive(x_1);
if (x_12 == 0)
{
obj* x_13; uint8 x_14; 
x_13 = lean::cnstr_get(x_1, 0);
lean::dec(x_13);
x_14 = !lean::is_exclusive(x_8);
if (x_14 == 0)
{
obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_15 = lean::cnstr_get(x_8, 1);
x_16 = lean::cnstr_get(x_11, 1);
lean::inc(x_16);
lean::dec(x_11);
x_17 = l_String_trim(x_16);
lean::dec(x_16);
x_18 = l_Lean_Elaborator_precToNat___main(x_10);
x_19 = lean::box(0);
lean::inc(x_17);
x_20 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_20, 0, x_17);
lean::cnstr_set(x_20, 1, x_18);
lean::cnstr_set(x_20, 2, x_19);
x_21 = lean::mk_nat_obj(0u);
x_22 = l___private_init_lean_parser_trie_2__insertAux___main___rarg(x_17, x_20, x_15, x_21);
lean::dec(x_17);
lean::cnstr_set(x_8, 1, x_22);
x_2 = x_9;
goto _start;
}
else
{
obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_24 = lean::cnstr_get(x_8, 0);
x_25 = lean::cnstr_get(x_8, 1);
lean::inc(x_25);
lean::inc(x_24);
lean::dec(x_8);
x_26 = lean::cnstr_get(x_11, 1);
lean::inc(x_26);
lean::dec(x_11);
x_27 = l_String_trim(x_26);
lean::dec(x_26);
x_28 = l_Lean_Elaborator_precToNat___main(x_10);
x_29 = lean::box(0);
lean::inc(x_27);
x_30 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_30, 0, x_27);
lean::cnstr_set(x_30, 1, x_28);
lean::cnstr_set(x_30, 2, x_29);
x_31 = lean::mk_nat_obj(0u);
x_32 = l___private_init_lean_parser_trie_2__insertAux___main___rarg(x_27, x_30, x_25, x_31);
lean::dec(x_27);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_24);
lean::cnstr_set(x_33, 1, x_32);
lean::cnstr_set(x_1, 0, x_33);
x_2 = x_9;
goto _start;
}
}
else
{
obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; 
x_35 = lean::cnstr_get(x_1, 1);
x_36 = lean::cnstr_get(x_1, 2);
x_37 = lean::cnstr_get(x_1, 3);
x_38 = lean::cnstr_get(x_1, 4);
lean::inc(x_38);
lean::inc(x_37);
lean::inc(x_36);
lean::inc(x_35);
lean::dec(x_1);
x_39 = lean::cnstr_get(x_8, 0);
lean::inc(x_39);
x_40 = lean::cnstr_get(x_8, 1);
lean::inc(x_40);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_release(x_8, 1);
 x_41 = x_8;
} else {
 lean::dec_ref(x_8);
 x_41 = lean::box(0);
}
x_42 = lean::cnstr_get(x_11, 1);
lean::inc(x_42);
lean::dec(x_11);
x_43 = l_String_trim(x_42);
lean::dec(x_42);
x_44 = l_Lean_Elaborator_precToNat___main(x_10);
x_45 = lean::box(0);
lean::inc(x_43);
x_46 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_46, 0, x_43);
lean::cnstr_set(x_46, 1, x_44);
lean::cnstr_set(x_46, 2, x_45);
x_47 = lean::mk_nat_obj(0u);
x_48 = l___private_init_lean_parser_trie_2__insertAux___main___rarg(x_43, x_46, x_40, x_47);
lean::dec(x_43);
if (lean::is_scalar(x_41)) {
 x_49 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_49 = x_41;
}
lean::cnstr_set(x_49, 0, x_39);
lean::cnstr_set(x_49, 1, x_48);
x_50 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_35);
lean::cnstr_set(x_50, 2, x_36);
lean::cnstr_set(x_50, 3, x_37);
lean::cnstr_set(x_50, 4, x_38);
x_1 = x_50;
x_2 = x_9;
goto _start;
}
}
}
}
}
obj* l_Lean_Elaborator_CommandParserConfig_registerNotationTokens(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; obj* x_4; 
x_3 = lean::cnstr_get(x_1, 1);
lean::inc(x_3);
lean::dec(x_1);
x_4 = l_List_mfoldl___main___at_Lean_Elaborator_CommandParserConfig_registerNotationTokens___spec__1(x_2, x_3);
return x_4;
}
}
obj* l_Option_toMonad___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__1___rarg(obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_4; obj* x_5; 
x_3 = lean::cnstr_get(x_1, 0);
x_4 = lean::box(0);
lean::inc(x_3);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_3);
lean::cnstr_set(x_5, 1, x_4);
return x_5;
}
}
}
obj* l_Option_toMonad___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__1(obj* x_1) {
_start:
{
obj* x_2; 
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Option_toMonad___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__1___rarg___boxed), 1, 0);
return x_2;
}
}
obj* _init_l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__1() {
_start:
{
obj* x_1; obj* x_2; 
x_1 = lean::mk_string("registerNotationParser: unreachable");
x_2 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2, 0, x_1);
return x_2;
}
}
obj* _init_l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__2() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderIdent_Parser), 5, 0);
x_2 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2, 0, x_1);
x_3 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_3, 0, x_2);
return x_3;
}
}
obj* _init_l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__3() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binders_Parser), 5, 0);
x_2 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_2, 0, x_1);
x_3 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_3, 0, x_2);
return x_3;
}
}
obj* _init_l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__4() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_1 = lean::mk_nat_obj(0u);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_3, 0, x_2);
x_4 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_4, 0, x_3);
return x_4;
}
}
obj* _init_l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__5() {
_start:
{
obj* x_1; obj* x_2; 
x_1 = lean::mk_string("registerNotationParser: unimplemented");
x_2 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_2, 0, x_1);
return x_2;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2(obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Expander_expandBracketedBinder___main___closed__4;
return x_2;
}
else
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_22; obj* x_23; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
x_4 = lean::cnstr_get(x_1, 1);
lean::inc(x_4);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_release(x_1, 0);
 lean::cnstr_release(x_1, 1);
 x_5 = x_1;
} else {
 lean::dec_ref(x_1);
 x_5 = lean::box(0);
}
x_22 = lean::cnstr_get(x_3, 0);
lean::inc(x_22);
x_23 = lean::cnstr_get(x_22, 1);
lean::inc(x_23);
lean::dec(x_22);
if (lean::obj_tag(x_23) == 0)
{
obj* x_24; 
lean::dec(x_3);
x_24 = l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__1;
x_6 = x_24;
goto block_21;
}
else
{
obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_44; 
x_25 = lean::cnstr_get(x_23, 0);
lean::inc(x_25);
lean::dec(x_23);
x_26 = lean::cnstr_get(x_25, 1);
lean::inc(x_26);
lean::dec(x_25);
x_27 = l_String_trim(x_26);
lean::dec(x_26);
lean::inc(x_27);
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_28, 0, x_27);
x_29 = lean::mk_nat_obj(0u);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_30, 0, x_27);
lean::closure_set(x_30, 1, x_29);
lean::closure_set(x_30, 2, x_28);
x_44 = lean::cnstr_get(x_3, 1);
lean::inc(x_44);
lean::dec(x_3);
if (lean::obj_tag(x_44) == 0)
{
obj* x_45; 
x_45 = l_Lean_Expander_noExpansion___closed__1;
x_31 = x_45;
goto block_43;
}
else
{
obj* x_46; 
x_46 = lean::cnstr_get(x_44, 0);
lean::inc(x_46);
lean::dec(x_44);
switch (lean::obj_tag(x_46)) {
case 0:
{
obj* x_47; 
lean::dec(x_46);
x_47 = l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__2;
x_31 = x_47;
goto block_43;
}
case 1:
{
obj* x_48; 
lean::dec(x_46);
x_48 = l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__3;
x_31 = x_48;
goto block_43;
}
default: 
{
obj* x_49; obj* x_50; 
x_49 = lean::cnstr_get(x_46, 0);
lean::inc(x_49);
lean::dec(x_46);
x_50 = lean::cnstr_get(x_49, 1);
lean::inc(x_50);
lean::dec(x_49);
if (lean::obj_tag(x_50) == 0)
{
obj* x_51; 
x_51 = l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__4;
x_31 = x_51;
goto block_43;
}
else
{
uint8 x_52; 
x_52 = !lean::is_exclusive(x_50);
if (x_52 == 0)
{
obj* x_53; obj* x_54; 
x_53 = lean::cnstr_get(x_50, 0);
x_54 = lean::cnstr_get(x_53, 1);
lean::inc(x_54);
lean::dec(x_53);
switch (lean::obj_tag(x_54)) {
case 0:
{
obj* x_55; obj* x_56; obj* x_57; obj* x_58; 
x_55 = lean::cnstr_get(x_54, 0);
lean::inc(x_55);
lean::dec(x_54);
x_56 = l_Lean_Parser_command_NotationSpec_precedenceTerm_View_toNat___main(x_55);
x_57 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_57, 0, x_56);
lean::cnstr_set(x_50, 0, x_57);
x_58 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_58, 0, x_50);
x_31 = x_58;
goto block_43;
}
case 2:
{
obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; 
x_59 = lean::cnstr_get(x_54, 0);
lean::inc(x_59);
lean::dec(x_54);
x_60 = lean::cnstr_get(x_59, 2);
lean::inc(x_60);
lean::dec(x_59);
x_61 = l_Lean_Elaborator_precToNat___main(x_60);
x_62 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_62, 0, x_61);
lean::cnstr_set(x_50, 0, x_62);
x_63 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_63, 0, x_50);
x_31 = x_63;
goto block_43;
}
default: 
{
obj* x_64; 
lean::dec(x_54);
lean::free_heap_obj(x_50);
x_64 = l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__5;
x_31 = x_64;
goto block_43;
}
}
}
else
{
obj* x_65; obj* x_66; 
x_65 = lean::cnstr_get(x_50, 0);
lean::inc(x_65);
lean::dec(x_50);
x_66 = lean::cnstr_get(x_65, 1);
lean::inc(x_66);
lean::dec(x_65);
switch (lean::obj_tag(x_66)) {
case 0:
{
obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; 
x_67 = lean::cnstr_get(x_66, 0);
lean::inc(x_67);
lean::dec(x_66);
x_68 = l_Lean_Parser_command_NotationSpec_precedenceTerm_View_toNat___main(x_67);
x_69 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_69, 0, x_68);
x_70 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_70, 0, x_69);
x_71 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_71, 0, x_70);
x_31 = x_71;
goto block_43;
}
case 2:
{
obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; 
x_72 = lean::cnstr_get(x_66, 0);
lean::inc(x_72);
lean::dec(x_66);
x_73 = lean::cnstr_get(x_72, 2);
lean::inc(x_73);
lean::dec(x_72);
x_74 = l_Lean_Elaborator_precToNat___main(x_73);
x_75 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_75, 0, x_74);
x_76 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_76, 0, x_75);
x_77 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_77, 0, x_76);
x_31 = x_77;
goto block_43;
}
default: 
{
obj* x_78; 
lean::dec(x_66);
x_78 = l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__5;
x_31 = x_78;
goto block_43;
}
}
}
}
}
}
}
block_43:
{
if (lean::obj_tag(x_31) == 0)
{
uint8 x_32; 
lean::dec(x_30);
x_32 = !lean::is_exclusive(x_31);
if (x_32 == 0)
{
x_6 = x_31;
goto block_21;
}
else
{
obj* x_33; obj* x_34; 
x_33 = lean::cnstr_get(x_31, 0);
lean::inc(x_33);
lean::dec(x_31);
x_34 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_34, 0, x_33);
x_6 = x_34;
goto block_21;
}
}
else
{
uint8 x_35; 
x_35 = !lean::is_exclusive(x_31);
if (x_35 == 0)
{
obj* x_36; obj* x_37; obj* x_38; 
x_36 = lean::cnstr_get(x_31, 0);
x_37 = l_Option_toMonad___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__1___rarg(x_36);
lean::dec(x_36);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_30);
lean::cnstr_set(x_38, 1, x_37);
lean::cnstr_set(x_31, 0, x_38);
x_6 = x_31;
goto block_21;
}
else
{
obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
x_39 = lean::cnstr_get(x_31, 0);
lean::inc(x_39);
lean::dec(x_31);
x_40 = l_Option_toMonad___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__1___rarg(x_39);
lean::dec(x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_30);
lean::cnstr_set(x_41, 1, x_40);
x_42 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_42, 0, x_41);
x_6 = x_42;
goto block_21;
}
}
}
}
block_21:
{
if (lean::obj_tag(x_6) == 0)
{
uint8 x_7; 
lean::dec(x_5);
lean::dec(x_4);
x_7 = !lean::is_exclusive(x_6);
if (x_7 == 0)
{
return x_6;
}
else
{
obj* x_8; obj* x_9; 
x_8 = lean::cnstr_get(x_6, 0);
lean::inc(x_8);
lean::dec(x_6);
x_9 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_9, 0, x_8);
return x_9;
}
}
else
{
obj* x_10; obj* x_11; 
x_10 = lean::cnstr_get(x_6, 0);
lean::inc(x_10);
lean::dec(x_6);
x_11 = l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2(x_4);
if (lean::obj_tag(x_11) == 0)
{
uint8 x_12; 
lean::dec(x_10);
lean::dec(x_5);
x_12 = !lean::is_exclusive(x_11);
if (x_12 == 0)
{
return x_11;
}
else
{
obj* x_13; obj* x_14; 
x_13 = lean::cnstr_get(x_11, 0);
lean::inc(x_13);
lean::dec(x_11);
x_14 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
}
else
{
uint8 x_15; 
x_15 = !lean::is_exclusive(x_11);
if (x_15 == 0)
{
obj* x_16; obj* x_17; 
x_16 = lean::cnstr_get(x_11, 0);
if (lean::is_scalar(x_5)) {
 x_17 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_17 = x_5;
}
lean::cnstr_set(x_17, 0, x_10);
lean::cnstr_set(x_17, 1, x_16);
lean::cnstr_set(x_11, 0, x_17);
return x_11;
}
else
{
obj* x_18; obj* x_19; obj* x_20; 
x_18 = lean::cnstr_get(x_11, 0);
lean::inc(x_18);
lean::dec(x_11);
if (lean::is_scalar(x_5)) {
 x_19 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_19 = x_5;
}
lean::cnstr_set(x_19, 0, x_10);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
}
}
}
}
}
obj* l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__3(obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
uint8 x_3; 
x_3 = !lean::is_exclusive(x_1);
if (x_3 == 0)
{
obj* x_4; obj* x_5; 
x_4 = lean::cnstr_get(x_1, 1);
x_5 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__3(x_4);
lean::cnstr_set(x_1, 1, x_5);
return x_1;
}
else
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_6 = lean::cnstr_get(x_1, 0);
x_7 = lean::cnstr_get(x_1, 1);
lean::inc(x_7);
lean::inc(x_6);
lean::dec(x_1);
x_8 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__3(x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_6);
lean::cnstr_set(x_9, 1, x_8);
return x_9;
}
}
}
}
obj* l_coe___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__4(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; 
x_8 = lean::apply_5(x_1, x_3, x_4, x_5, x_6, x_7);
return x_8;
}
}
obj* l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__5(obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
uint8 x_3; 
x_3 = !lean::is_exclusive(x_1);
if (x_3 == 0)
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_4 = lean::cnstr_get(x_1, 0);
x_5 = lean::cnstr_get(x_1, 1);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_coe___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__4___boxed), 7, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__5(x_5);
lean::cnstr_set(x_1, 1, x_7);
lean::cnstr_set(x_1, 0, x_6);
return x_1;
}
else
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_8 = lean::cnstr_get(x_1, 0);
x_9 = lean::cnstr_get(x_1, 1);
lean::inc(x_9);
lean::inc(x_8);
lean::dec(x_1);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_coe___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__4___boxed), 7, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__5(x_9);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
return x_12;
}
}
}
}
obj* _init_l_Lean_Elaborator_CommandParserConfig_registerNotationParser___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_getLeading___boxed), 6, 0);
return x_1;
}
}
obj* l_Lean_Elaborator_CommandParserConfig_registerNotationParser(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; obj* x_5; obj* x_6; 
x_4 = lean::cnstr_get(x_2, 2);
lean::inc(x_4);
x_5 = lean::cnstr_get(x_4, 1);
lean::inc(x_5);
lean::inc(x_5);
x_6 = l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2(x_5);
if (lean::obj_tag(x_6) == 0)
{
uint8 x_7; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_1);
x_7 = !lean::is_exclusive(x_6);
if (x_7 == 0)
{
return x_6;
}
else
{
obj* x_8; obj* x_9; 
x_8 = lean::cnstr_get(x_6, 0);
lean::inc(x_8);
lean::dec(x_6);
x_9 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_9, 0, x_8);
return x_9;
}
}
else
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_10; 
lean::dec(x_6);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_1);
x_10 = l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__1;
return x_10;
}
else
{
uint8 x_11; 
x_11 = !lean::is_exclusive(x_5);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_12 = lean::cnstr_get(x_5, 0);
x_13 = lean::cnstr_get(x_5, 1);
lean::dec(x_13);
x_14 = lean::cnstr_get(x_12, 0);
lean::inc(x_14);
lean::dec(x_12);
x_15 = lean::cnstr_get(x_14, 1);
lean::inc(x_15);
lean::dec(x_14);
if (lean::obj_tag(x_15) == 0)
{
obj* x_16; 
lean::free_heap_obj(x_5);
lean::dec(x_6);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_1);
x_16 = l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__1;
return x_16;
}
else
{
uint8 x_17; 
x_17 = !lean::is_exclusive(x_6);
if (x_17 == 0)
{
obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_18 = lean::cnstr_get(x_6, 0);
x_19 = lean::cnstr_get(x_15, 0);
lean::inc(x_19);
lean::dec(x_15);
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_21 = l_String_trim(x_20);
lean::dec(x_20);
x_22 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__3(x_18);
x_23 = l_List_join___main___rarg(x_22);
x_24 = lean::cnstr_get(x_2, 0);
lean::inc(x_24);
lean::dec(x_2);
if (lean::obj_tag(x_24) == 0)
{
obj* x_25; 
x_25 = lean::cnstr_get(x_4, 0);
lean::inc(x_25);
lean::dec(x_4);
if (lean::obj_tag(x_25) == 0)
{
uint8 x_26; 
lean::free_heap_obj(x_5);
x_26 = !lean::is_exclusive(x_3);
if (x_26 == 0)
{
obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_27 = lean::cnstr_get(x_3, 1);
x_28 = lean::box(0);
x_29 = lean_name_mk_string(x_28, x_21);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_30, 0, x_1);
lean::closure_set(x_30, 1, x_23);
x_31 = l_Lean_Parser_TokenMap_insert___rarg(x_27, x_29, x_30);
lean::cnstr_set(x_3, 1, x_31);
lean::cnstr_set(x_6, 0, x_3);
return x_6;
}
else
{
obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; 
x_32 = lean::cnstr_get(x_3, 0);
x_33 = lean::cnstr_get(x_3, 1);
x_34 = lean::cnstr_get(x_3, 2);
x_35 = lean::cnstr_get(x_3, 3);
x_36 = lean::cnstr_get(x_3, 4);
lean::inc(x_36);
lean::inc(x_35);
lean::inc(x_34);
lean::inc(x_33);
lean::inc(x_32);
lean::dec(x_3);
x_37 = lean::box(0);
x_38 = lean_name_mk_string(x_37, x_21);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_39, 0, x_1);
lean::closure_set(x_39, 1, x_23);
x_40 = l_Lean_Parser_TokenMap_insert___rarg(x_33, x_38, x_39);
x_41 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_41, 0, x_32);
lean::cnstr_set(x_41, 1, x_40);
lean::cnstr_set(x_41, 2, x_34);
lean::cnstr_set(x_41, 3, x_35);
lean::cnstr_set(x_41, 4, x_36);
lean::cnstr_set(x_6, 0, x_41);
return x_6;
}
}
else
{
uint8 x_42; 
lean::dec(x_25);
x_42 = !lean::is_exclusive(x_3);
if (x_42 == 0)
{
obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; 
x_43 = lean::cnstr_get(x_3, 2);
x_44 = lean::box(0);
x_45 = lean_name_mk_string(x_44, x_21);
x_46 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__5(x_23);
x_47 = l_Lean_Elaborator_CommandParserConfig_registerNotationParser___closed__1;
lean::cnstr_set(x_5, 1, x_46);
lean::cnstr_set(x_5, 0, x_47);
x_48 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3), 8, 2);
lean::closure_set(x_48, 0, x_1);
lean::closure_set(x_48, 1, x_5);
x_49 = l_Lean_Parser_TokenMap_insert___rarg(x_43, x_45, x_48);
lean::cnstr_set(x_3, 2, x_49);
lean::cnstr_set(x_6, 0, x_3);
return x_6;
}
else
{
obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; 
x_50 = lean::cnstr_get(x_3, 0);
x_51 = lean::cnstr_get(x_3, 1);
x_52 = lean::cnstr_get(x_3, 2);
x_53 = lean::cnstr_get(x_3, 3);
x_54 = lean::cnstr_get(x_3, 4);
lean::inc(x_54);
lean::inc(x_53);
lean::inc(x_52);
lean::inc(x_51);
lean::inc(x_50);
lean::dec(x_3);
x_55 = lean::box(0);
x_56 = lean_name_mk_string(x_55, x_21);
x_57 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__5(x_23);
x_58 = l_Lean_Elaborator_CommandParserConfig_registerNotationParser___closed__1;
lean::cnstr_set(x_5, 1, x_57);
lean::cnstr_set(x_5, 0, x_58);
x_59 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3), 8, 2);
lean::closure_set(x_59, 0, x_1);
lean::closure_set(x_59, 1, x_5);
x_60 = l_Lean_Parser_TokenMap_insert___rarg(x_52, x_56, x_59);
x_61 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_61, 0, x_50);
lean::cnstr_set(x_61, 1, x_51);
lean::cnstr_set(x_61, 2, x_60);
lean::cnstr_set(x_61, 3, x_53);
lean::cnstr_set(x_61, 4, x_54);
lean::cnstr_set(x_6, 0, x_61);
return x_6;
}
}
}
else
{
obj* x_62; 
lean::dec(x_24);
x_62 = lean::cnstr_get(x_4, 0);
lean::inc(x_62);
lean::dec(x_4);
if (lean::obj_tag(x_62) == 0)
{
uint8 x_63; 
lean::free_heap_obj(x_5);
x_63 = !lean::is_exclusive(x_3);
if (x_63 == 0)
{
obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; 
x_64 = lean::cnstr_get(x_3, 3);
x_65 = lean::box(0);
x_66 = lean_name_mk_string(x_65, x_21);
x_67 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_67, 0, x_1);
lean::closure_set(x_67, 1, x_23);
x_68 = l_Lean_Parser_TokenMap_insert___rarg(x_64, x_66, x_67);
lean::cnstr_set(x_3, 3, x_68);
lean::cnstr_set(x_6, 0, x_3);
return x_6;
}
else
{
obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; 
x_69 = lean::cnstr_get(x_3, 0);
x_70 = lean::cnstr_get(x_3, 1);
x_71 = lean::cnstr_get(x_3, 2);
x_72 = lean::cnstr_get(x_3, 3);
x_73 = lean::cnstr_get(x_3, 4);
lean::inc(x_73);
lean::inc(x_72);
lean::inc(x_71);
lean::inc(x_70);
lean::inc(x_69);
lean::dec(x_3);
x_74 = lean::box(0);
x_75 = lean_name_mk_string(x_74, x_21);
x_76 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_76, 0, x_1);
lean::closure_set(x_76, 1, x_23);
x_77 = l_Lean_Parser_TokenMap_insert___rarg(x_72, x_75, x_76);
x_78 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_78, 0, x_69);
lean::cnstr_set(x_78, 1, x_70);
lean::cnstr_set(x_78, 2, x_71);
lean::cnstr_set(x_78, 3, x_77);
lean::cnstr_set(x_78, 4, x_73);
lean::cnstr_set(x_6, 0, x_78);
return x_6;
}
}
else
{
uint8 x_79; 
lean::dec(x_62);
x_79 = !lean::is_exclusive(x_3);
if (x_79 == 0)
{
obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; 
x_80 = lean::cnstr_get(x_3, 4);
x_81 = lean::box(0);
x_82 = lean_name_mk_string(x_81, x_21);
x_83 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__5(x_23);
x_84 = l_Lean_Elaborator_CommandParserConfig_registerNotationParser___closed__1;
lean::cnstr_set(x_5, 1, x_83);
lean::cnstr_set(x_5, 0, x_84);
x_85 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3), 8, 2);
lean::closure_set(x_85, 0, x_1);
lean::closure_set(x_85, 1, x_5);
x_86 = l_Lean_Parser_TokenMap_insert___rarg(x_80, x_82, x_85);
lean::cnstr_set(x_3, 4, x_86);
lean::cnstr_set(x_6, 0, x_3);
return x_6;
}
else
{
obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; 
x_87 = lean::cnstr_get(x_3, 0);
x_88 = lean::cnstr_get(x_3, 1);
x_89 = lean::cnstr_get(x_3, 2);
x_90 = lean::cnstr_get(x_3, 3);
x_91 = lean::cnstr_get(x_3, 4);
lean::inc(x_91);
lean::inc(x_90);
lean::inc(x_89);
lean::inc(x_88);
lean::inc(x_87);
lean::dec(x_3);
x_92 = lean::box(0);
x_93 = lean_name_mk_string(x_92, x_21);
x_94 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__5(x_23);
x_95 = l_Lean_Elaborator_CommandParserConfig_registerNotationParser___closed__1;
lean::cnstr_set(x_5, 1, x_94);
lean::cnstr_set(x_5, 0, x_95);
x_96 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3), 8, 2);
lean::closure_set(x_96, 0, x_1);
lean::closure_set(x_96, 1, x_5);
x_97 = l_Lean_Parser_TokenMap_insert___rarg(x_91, x_93, x_96);
x_98 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_98, 0, x_87);
lean::cnstr_set(x_98, 1, x_88);
lean::cnstr_set(x_98, 2, x_89);
lean::cnstr_set(x_98, 3, x_90);
lean::cnstr_set(x_98, 4, x_97);
lean::cnstr_set(x_6, 0, x_98);
return x_6;
}
}
}
}
else
{
obj* x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_105; 
x_99 = lean::cnstr_get(x_6, 0);
lean::inc(x_99);
lean::dec(x_6);
x_100 = lean::cnstr_get(x_15, 0);
lean::inc(x_100);
lean::dec(x_15);
x_101 = lean::cnstr_get(x_100, 1);
lean::inc(x_101);
lean::dec(x_100);
x_102 = l_String_trim(x_101);
lean::dec(x_101);
x_103 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__3(x_99);
x_104 = l_List_join___main___rarg(x_103);
x_105 = lean::cnstr_get(x_2, 0);
lean::inc(x_105);
lean::dec(x_2);
if (lean::obj_tag(x_105) == 0)
{
obj* x_106; 
x_106 = lean::cnstr_get(x_4, 0);
lean::inc(x_106);
lean::dec(x_4);
if (lean::obj_tag(x_106) == 0)
{
obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; obj* x_115; obj* x_116; obj* x_117; obj* x_118; 
lean::free_heap_obj(x_5);
x_107 = lean::cnstr_get(x_3, 0);
lean::inc(x_107);
x_108 = lean::cnstr_get(x_3, 1);
lean::inc(x_108);
x_109 = lean::cnstr_get(x_3, 2);
lean::inc(x_109);
x_110 = lean::cnstr_get(x_3, 3);
lean::inc(x_110);
x_111 = lean::cnstr_get(x_3, 4);
lean::inc(x_111);
if (lean::is_exclusive(x_3)) {
 lean::cnstr_release(x_3, 0);
 lean::cnstr_release(x_3, 1);
 lean::cnstr_release(x_3, 2);
 lean::cnstr_release(x_3, 3);
 lean::cnstr_release(x_3, 4);
 x_112 = x_3;
} else {
 lean::dec_ref(x_3);
 x_112 = lean::box(0);
}
x_113 = lean::box(0);
x_114 = lean_name_mk_string(x_113, x_102);
x_115 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_115, 0, x_1);
lean::closure_set(x_115, 1, x_104);
x_116 = l_Lean_Parser_TokenMap_insert___rarg(x_108, x_114, x_115);
if (lean::is_scalar(x_112)) {
 x_117 = lean::alloc_cnstr(0, 5, 0);
} else {
 x_117 = x_112;
}
lean::cnstr_set(x_117, 0, x_107);
lean::cnstr_set(x_117, 1, x_116);
lean::cnstr_set(x_117, 2, x_109);
lean::cnstr_set(x_117, 3, x_110);
lean::cnstr_set(x_117, 4, x_111);
x_118 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_118, 0, x_117);
return x_118;
}
else
{
obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; obj* x_129; obj* x_130; obj* x_131; obj* x_132; 
lean::dec(x_106);
x_119 = lean::cnstr_get(x_3, 0);
lean::inc(x_119);
x_120 = lean::cnstr_get(x_3, 1);
lean::inc(x_120);
x_121 = lean::cnstr_get(x_3, 2);
lean::inc(x_121);
x_122 = lean::cnstr_get(x_3, 3);
lean::inc(x_122);
x_123 = lean::cnstr_get(x_3, 4);
lean::inc(x_123);
if (lean::is_exclusive(x_3)) {
 lean::cnstr_release(x_3, 0);
 lean::cnstr_release(x_3, 1);
 lean::cnstr_release(x_3, 2);
 lean::cnstr_release(x_3, 3);
 lean::cnstr_release(x_3, 4);
 x_124 = x_3;
} else {
 lean::dec_ref(x_3);
 x_124 = lean::box(0);
}
x_125 = lean::box(0);
x_126 = lean_name_mk_string(x_125, x_102);
x_127 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__5(x_104);
x_128 = l_Lean_Elaborator_CommandParserConfig_registerNotationParser___closed__1;
lean::cnstr_set(x_5, 1, x_127);
lean::cnstr_set(x_5, 0, x_128);
x_129 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3), 8, 2);
lean::closure_set(x_129, 0, x_1);
lean::closure_set(x_129, 1, x_5);
x_130 = l_Lean_Parser_TokenMap_insert___rarg(x_121, x_126, x_129);
if (lean::is_scalar(x_124)) {
 x_131 = lean::alloc_cnstr(0, 5, 0);
} else {
 x_131 = x_124;
}
lean::cnstr_set(x_131, 0, x_119);
lean::cnstr_set(x_131, 1, x_120);
lean::cnstr_set(x_131, 2, x_130);
lean::cnstr_set(x_131, 3, x_122);
lean::cnstr_set(x_131, 4, x_123);
x_132 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_132, 0, x_131);
return x_132;
}
}
else
{
obj* x_133; 
lean::dec(x_105);
x_133 = lean::cnstr_get(x_4, 0);
lean::inc(x_133);
lean::dec(x_4);
if (lean::obj_tag(x_133) == 0)
{
obj* x_134; obj* x_135; obj* x_136; obj* x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_141; obj* x_142; obj* x_143; obj* x_144; obj* x_145; 
lean::free_heap_obj(x_5);
x_134 = lean::cnstr_get(x_3, 0);
lean::inc(x_134);
x_135 = lean::cnstr_get(x_3, 1);
lean::inc(x_135);
x_136 = lean::cnstr_get(x_3, 2);
lean::inc(x_136);
x_137 = lean::cnstr_get(x_3, 3);
lean::inc(x_137);
x_138 = lean::cnstr_get(x_3, 4);
lean::inc(x_138);
if (lean::is_exclusive(x_3)) {
 lean::cnstr_release(x_3, 0);
 lean::cnstr_release(x_3, 1);
 lean::cnstr_release(x_3, 2);
 lean::cnstr_release(x_3, 3);
 lean::cnstr_release(x_3, 4);
 x_139 = x_3;
} else {
 lean::dec_ref(x_3);
 x_139 = lean::box(0);
}
x_140 = lean::box(0);
x_141 = lean_name_mk_string(x_140, x_102);
x_142 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_142, 0, x_1);
lean::closure_set(x_142, 1, x_104);
x_143 = l_Lean_Parser_TokenMap_insert___rarg(x_137, x_141, x_142);
if (lean::is_scalar(x_139)) {
 x_144 = lean::alloc_cnstr(0, 5, 0);
} else {
 x_144 = x_139;
}
lean::cnstr_set(x_144, 0, x_134);
lean::cnstr_set(x_144, 1, x_135);
lean::cnstr_set(x_144, 2, x_136);
lean::cnstr_set(x_144, 3, x_143);
lean::cnstr_set(x_144, 4, x_138);
x_145 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_145, 0, x_144);
return x_145;
}
else
{
obj* x_146; obj* x_147; obj* x_148; obj* x_149; obj* x_150; obj* x_151; obj* x_152; obj* x_153; obj* x_154; obj* x_155; obj* x_156; obj* x_157; obj* x_158; obj* x_159; 
lean::dec(x_133);
x_146 = lean::cnstr_get(x_3, 0);
lean::inc(x_146);
x_147 = lean::cnstr_get(x_3, 1);
lean::inc(x_147);
x_148 = lean::cnstr_get(x_3, 2);
lean::inc(x_148);
x_149 = lean::cnstr_get(x_3, 3);
lean::inc(x_149);
x_150 = lean::cnstr_get(x_3, 4);
lean::inc(x_150);
if (lean::is_exclusive(x_3)) {
 lean::cnstr_release(x_3, 0);
 lean::cnstr_release(x_3, 1);
 lean::cnstr_release(x_3, 2);
 lean::cnstr_release(x_3, 3);
 lean::cnstr_release(x_3, 4);
 x_151 = x_3;
} else {
 lean::dec_ref(x_3);
 x_151 = lean::box(0);
}
x_152 = lean::box(0);
x_153 = lean_name_mk_string(x_152, x_102);
x_154 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__5(x_104);
x_155 = l_Lean_Elaborator_CommandParserConfig_registerNotationParser___closed__1;
lean::cnstr_set(x_5, 1, x_154);
lean::cnstr_set(x_5, 0, x_155);
x_156 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3), 8, 2);
lean::closure_set(x_156, 0, x_1);
lean::closure_set(x_156, 1, x_5);
x_157 = l_Lean_Parser_TokenMap_insert___rarg(x_150, x_153, x_156);
if (lean::is_scalar(x_151)) {
 x_158 = lean::alloc_cnstr(0, 5, 0);
} else {
 x_158 = x_151;
}
lean::cnstr_set(x_158, 0, x_146);
lean::cnstr_set(x_158, 1, x_147);
lean::cnstr_set(x_158, 2, x_148);
lean::cnstr_set(x_158, 3, x_149);
lean::cnstr_set(x_158, 4, x_157);
x_159 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_159, 0, x_158);
return x_159;
}
}
}
}
}
else
{
obj* x_160; obj* x_161; obj* x_162; 
x_160 = lean::cnstr_get(x_5, 0);
lean::inc(x_160);
lean::dec(x_5);
x_161 = lean::cnstr_get(x_160, 0);
lean::inc(x_161);
lean::dec(x_160);
x_162 = lean::cnstr_get(x_161, 1);
lean::inc(x_162);
lean::dec(x_161);
if (lean::obj_tag(x_162) == 0)
{
obj* x_163; 
lean::dec(x_6);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_1);
x_163 = l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__1;
return x_163;
}
else
{
obj* x_164; obj* x_165; obj* x_166; obj* x_167; obj* x_168; obj* x_169; obj* x_170; obj* x_171; 
x_164 = lean::cnstr_get(x_6, 0);
lean::inc(x_164);
if (lean::is_exclusive(x_6)) {
 lean::cnstr_release(x_6, 0);
 x_165 = x_6;
} else {
 lean::dec_ref(x_6);
 x_165 = lean::box(0);
}
x_166 = lean::cnstr_get(x_162, 0);
lean::inc(x_166);
lean::dec(x_162);
x_167 = lean::cnstr_get(x_166, 1);
lean::inc(x_167);
lean::dec(x_166);
x_168 = l_String_trim(x_167);
lean::dec(x_167);
x_169 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__3(x_164);
x_170 = l_List_join___main___rarg(x_169);
x_171 = lean::cnstr_get(x_2, 0);
lean::inc(x_171);
lean::dec(x_2);
if (lean::obj_tag(x_171) == 0)
{
obj* x_172; 
x_172 = lean::cnstr_get(x_4, 0);
lean::inc(x_172);
lean::dec(x_4);
if (lean::obj_tag(x_172) == 0)
{
obj* x_173; obj* x_174; obj* x_175; obj* x_176; obj* x_177; obj* x_178; obj* x_179; obj* x_180; obj* x_181; obj* x_182; obj* x_183; obj* x_184; 
x_173 = lean::cnstr_get(x_3, 0);
lean::inc(x_173);
x_174 = lean::cnstr_get(x_3, 1);
lean::inc(x_174);
x_175 = lean::cnstr_get(x_3, 2);
lean::inc(x_175);
x_176 = lean::cnstr_get(x_3, 3);
lean::inc(x_176);
x_177 = lean::cnstr_get(x_3, 4);
lean::inc(x_177);
if (lean::is_exclusive(x_3)) {
 lean::cnstr_release(x_3, 0);
 lean::cnstr_release(x_3, 1);
 lean::cnstr_release(x_3, 2);
 lean::cnstr_release(x_3, 3);
 lean::cnstr_release(x_3, 4);
 x_178 = x_3;
} else {
 lean::dec_ref(x_3);
 x_178 = lean::box(0);
}
x_179 = lean::box(0);
x_180 = lean_name_mk_string(x_179, x_168);
x_181 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_181, 0, x_1);
lean::closure_set(x_181, 1, x_170);
x_182 = l_Lean_Parser_TokenMap_insert___rarg(x_174, x_180, x_181);
if (lean::is_scalar(x_178)) {
 x_183 = lean::alloc_cnstr(0, 5, 0);
} else {
 x_183 = x_178;
}
lean::cnstr_set(x_183, 0, x_173);
lean::cnstr_set(x_183, 1, x_182);
lean::cnstr_set(x_183, 2, x_175);
lean::cnstr_set(x_183, 3, x_176);
lean::cnstr_set(x_183, 4, x_177);
if (lean::is_scalar(x_165)) {
 x_184 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_184 = x_165;
}
lean::cnstr_set(x_184, 0, x_183);
return x_184;
}
else
{
obj* x_185; obj* x_186; obj* x_187; obj* x_188; obj* x_189; obj* x_190; obj* x_191; obj* x_192; obj* x_193; obj* x_194; obj* x_195; obj* x_196; obj* x_197; obj* x_198; obj* x_199; 
lean::dec(x_172);
x_185 = lean::cnstr_get(x_3, 0);
lean::inc(x_185);
x_186 = lean::cnstr_get(x_3, 1);
lean::inc(x_186);
x_187 = lean::cnstr_get(x_3, 2);
lean::inc(x_187);
x_188 = lean::cnstr_get(x_3, 3);
lean::inc(x_188);
x_189 = lean::cnstr_get(x_3, 4);
lean::inc(x_189);
if (lean::is_exclusive(x_3)) {
 lean::cnstr_release(x_3, 0);
 lean::cnstr_release(x_3, 1);
 lean::cnstr_release(x_3, 2);
 lean::cnstr_release(x_3, 3);
 lean::cnstr_release(x_3, 4);
 x_190 = x_3;
} else {
 lean::dec_ref(x_3);
 x_190 = lean::box(0);
}
x_191 = lean::box(0);
x_192 = lean_name_mk_string(x_191, x_168);
x_193 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__5(x_170);
x_194 = l_Lean_Elaborator_CommandParserConfig_registerNotationParser___closed__1;
x_195 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_195, 0, x_194);
lean::cnstr_set(x_195, 1, x_193);
x_196 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3), 8, 2);
lean::closure_set(x_196, 0, x_1);
lean::closure_set(x_196, 1, x_195);
x_197 = l_Lean_Parser_TokenMap_insert___rarg(x_187, x_192, x_196);
if (lean::is_scalar(x_190)) {
 x_198 = lean::alloc_cnstr(0, 5, 0);
} else {
 x_198 = x_190;
}
lean::cnstr_set(x_198, 0, x_185);
lean::cnstr_set(x_198, 1, x_186);
lean::cnstr_set(x_198, 2, x_197);
lean::cnstr_set(x_198, 3, x_188);
lean::cnstr_set(x_198, 4, x_189);
if (lean::is_scalar(x_165)) {
 x_199 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_199 = x_165;
}
lean::cnstr_set(x_199, 0, x_198);
return x_199;
}
}
else
{
obj* x_200; 
lean::dec(x_171);
x_200 = lean::cnstr_get(x_4, 0);
lean::inc(x_200);
lean::dec(x_4);
if (lean::obj_tag(x_200) == 0)
{
obj* x_201; obj* x_202; obj* x_203; obj* x_204; obj* x_205; obj* x_206; obj* x_207; obj* x_208; obj* x_209; obj* x_210; obj* x_211; obj* x_212; 
x_201 = lean::cnstr_get(x_3, 0);
lean::inc(x_201);
x_202 = lean::cnstr_get(x_3, 1);
lean::inc(x_202);
x_203 = lean::cnstr_get(x_3, 2);
lean::inc(x_203);
x_204 = lean::cnstr_get(x_3, 3);
lean::inc(x_204);
x_205 = lean::cnstr_get(x_3, 4);
lean::inc(x_205);
if (lean::is_exclusive(x_3)) {
 lean::cnstr_release(x_3, 0);
 lean::cnstr_release(x_3, 1);
 lean::cnstr_release(x_3, 2);
 lean::cnstr_release(x_3, 3);
 lean::cnstr_release(x_3, 4);
 x_206 = x_3;
} else {
 lean::dec_ref(x_3);
 x_206 = lean::box(0);
}
x_207 = lean::box(0);
x_208 = lean_name_mk_string(x_207, x_168);
x_209 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_209, 0, x_1);
lean::closure_set(x_209, 1, x_170);
x_210 = l_Lean_Parser_TokenMap_insert___rarg(x_204, x_208, x_209);
if (lean::is_scalar(x_206)) {
 x_211 = lean::alloc_cnstr(0, 5, 0);
} else {
 x_211 = x_206;
}
lean::cnstr_set(x_211, 0, x_201);
lean::cnstr_set(x_211, 1, x_202);
lean::cnstr_set(x_211, 2, x_203);
lean::cnstr_set(x_211, 3, x_210);
lean::cnstr_set(x_211, 4, x_205);
if (lean::is_scalar(x_165)) {
 x_212 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_212 = x_165;
}
lean::cnstr_set(x_212, 0, x_211);
return x_212;
}
else
{
obj* x_213; obj* x_214; obj* x_215; obj* x_216; obj* x_217; obj* x_218; obj* x_219; obj* x_220; obj* x_221; obj* x_222; obj* x_223; obj* x_224; obj* x_225; obj* x_226; obj* x_227; 
lean::dec(x_200);
x_213 = lean::cnstr_get(x_3, 0);
lean::inc(x_213);
x_214 = lean::cnstr_get(x_3, 1);
lean::inc(x_214);
x_215 = lean::cnstr_get(x_3, 2);
lean::inc(x_215);
x_216 = lean::cnstr_get(x_3, 3);
lean::inc(x_216);
x_217 = lean::cnstr_get(x_3, 4);
lean::inc(x_217);
if (lean::is_exclusive(x_3)) {
 lean::cnstr_release(x_3, 0);
 lean::cnstr_release(x_3, 1);
 lean::cnstr_release(x_3, 2);
 lean::cnstr_release(x_3, 3);
 lean::cnstr_release(x_3, 4);
 x_218 = x_3;
} else {
 lean::dec_ref(x_3);
 x_218 = lean::box(0);
}
x_219 = lean::box(0);
x_220 = lean_name_mk_string(x_219, x_168);
x_221 = l_List_map___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__5(x_170);
x_222 = l_Lean_Elaborator_CommandParserConfig_registerNotationParser___closed__1;
x_223 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_223, 0, x_222);
lean::cnstr_set(x_223, 1, x_221);
x_224 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3), 8, 2);
lean::closure_set(x_224, 0, x_1);
lean::closure_set(x_224, 1, x_223);
x_225 = l_Lean_Parser_TokenMap_insert___rarg(x_217, x_220, x_224);
if (lean::is_scalar(x_218)) {
 x_226 = lean::alloc_cnstr(0, 5, 0);
} else {
 x_226 = x_218;
}
lean::cnstr_set(x_226, 0, x_213);
lean::cnstr_set(x_226, 1, x_214);
lean::cnstr_set(x_226, 2, x_215);
lean::cnstr_set(x_226, 3, x_216);
lean::cnstr_set(x_226, 4, x_225);
if (lean::is_scalar(x_165)) {
 x_227 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_227 = x_165;
}
lean::cnstr_set(x_227, 0, x_226);
return x_227;
}
}
}
}
}
}
}
}
obj* l_Option_toMonad___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__1___rarg___boxed(obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_Option_toMonad___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__1___rarg(x_1);
lean::dec(x_1);
return x_2;
}
}
obj* l_coe___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__4___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; 
x_8 = l_coe___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__4(x_1, x_2, x_3, x_4, x_5, x_6, x_7);
lean::dec(x_2);
return x_8;
}
}
obj* l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__1(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_6; obj* x_7; 
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_1);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_8 = lean::cnstr_get(x_2, 0);
lean::inc(x_8);
x_9 = lean::cnstr_get(x_2, 1);
lean::inc(x_9);
lean::dec(x_2);
x_10 = lean::cnstr_get(x_8, 2);
lean::inc(x_10);
x_11 = l_Lean_Elaborator_CommandParserConfig_registerNotationTokens(x_10, x_1);
if (lean::obj_tag(x_11) == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_12 = lean::cnstr_get(x_11, 0);
lean::inc(x_12);
lean::dec(x_11);
x_13 = l_Lean_Parser_command_reserveNotation_HasView;
x_14 = lean::cnstr_get(x_13, 1);
lean::inc(x_14);
x_15 = lean::apply_1(x_14, x_8);
x_16 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_16, 0, x_15);
x_17 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_16, x_12, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_16);
if (lean::obj_tag(x_17) == 0)
{
uint8 x_18; 
lean::dec(x_9);
x_18 = !lean::is_exclusive(x_17);
if (x_18 == 0)
{
return x_17;
}
else
{
obj* x_19; obj* x_20; 
x_19 = lean::cnstr_get(x_17, 0);
lean::inc(x_19);
lean::dec(x_17);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
else
{
obj* x_21; obj* x_22; obj* x_23; 
x_21 = lean::cnstr_get(x_17, 0);
lean::inc(x_21);
lean::dec(x_17);
x_22 = lean::cnstr_get(x_21, 0);
lean::inc(x_22);
x_23 = lean::cnstr_get(x_21, 1);
lean::inc(x_23);
lean::dec(x_21);
x_1 = x_22;
x_2 = x_9;
x_5 = x_23;
goto _start;
}
}
else
{
obj* x_25; 
lean::dec(x_8);
x_25 = lean::cnstr_get(x_11, 0);
lean::inc(x_25);
lean::dec(x_11);
x_1 = x_25;
x_2 = x_9;
goto _start;
}
}
}
}
obj* l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__2(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_6; obj* x_7; 
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_1);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_8 = lean::cnstr_get(x_2, 0);
lean::inc(x_8);
x_9 = lean::cnstr_get(x_2, 1);
lean::inc(x_9);
lean::dec(x_2);
x_10 = lean::cnstr_get(x_8, 1);
lean::inc(x_10);
x_11 = lean::cnstr_get(x_10, 2);
lean::inc(x_11);
x_12 = l_Lean_Elaborator_CommandParserConfig_registerNotationTokens(x_11, x_1);
if (lean::obj_tag(x_12) == 0)
{
obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
lean::dec(x_8);
x_13 = lean::cnstr_get(x_12, 0);
lean::inc(x_13);
lean::dec(x_12);
x_14 = l_Lean_Parser_command_notation_HasView;
x_15 = lean::cnstr_get(x_14, 1);
lean::inc(x_15);
x_16 = lean::apply_1(x_15, x_10);
x_17 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_17, 0, x_16);
x_18 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_17, x_13, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_17);
if (lean::obj_tag(x_18) == 0)
{
uint8 x_19; 
lean::dec(x_9);
x_19 = !lean::is_exclusive(x_18);
if (x_19 == 0)
{
return x_18;
}
else
{
obj* x_20; obj* x_21; 
x_20 = lean::cnstr_get(x_18, 0);
lean::inc(x_20);
lean::dec(x_18);
x_21 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_21, 0, x_20);
return x_21;
}
}
else
{
obj* x_22; obj* x_23; obj* x_24; 
x_22 = lean::cnstr_get(x_18, 0);
lean::inc(x_22);
lean::dec(x_18);
x_23 = lean::cnstr_get(x_22, 0);
lean::inc(x_23);
x_24 = lean::cnstr_get(x_22, 1);
lean::inc(x_24);
lean::dec(x_22);
x_1 = x_23;
x_2 = x_9;
x_5 = x_24;
goto _start;
}
}
else
{
obj* x_26; obj* x_27; obj* x_28; 
x_26 = lean::cnstr_get(x_12, 0);
lean::inc(x_26);
lean::dec(x_12);
x_27 = lean::cnstr_get(x_8, 0);
lean::inc(x_27);
lean::dec(x_8);
lean::inc(x_10);
x_28 = l_Lean_Elaborator_CommandParserConfig_registerNotationParser(x_27, x_10, x_26);
if (lean::obj_tag(x_28) == 0)
{
obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_29 = lean::cnstr_get(x_28, 0);
lean::inc(x_29);
lean::dec(x_28);
x_30 = l_Lean_Parser_command_notation_HasView;
x_31 = lean::cnstr_get(x_30, 1);
lean::inc(x_31);
x_32 = lean::apply_1(x_31, x_10);
x_33 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_33, 0, x_32);
x_34 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_33, x_29, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_33);
if (lean::obj_tag(x_34) == 0)
{
uint8 x_35; 
lean::dec(x_9);
x_35 = !lean::is_exclusive(x_34);
if (x_35 == 0)
{
return x_34;
}
else
{
obj* x_36; obj* x_37; 
x_36 = lean::cnstr_get(x_34, 0);
lean::inc(x_36);
lean::dec(x_34);
x_37 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_37, 0, x_36);
return x_37;
}
}
else
{
obj* x_38; obj* x_39; obj* x_40; 
x_38 = lean::cnstr_get(x_34, 0);
lean::inc(x_38);
lean::dec(x_34);
x_39 = lean::cnstr_get(x_38, 0);
lean::inc(x_39);
x_40 = lean::cnstr_get(x_38, 1);
lean::inc(x_40);
lean::dec(x_38);
x_1 = x_39;
x_2 = x_9;
x_5 = x_40;
goto _start;
}
}
else
{
obj* x_42; 
lean::dec(x_10);
x_42 = lean::cnstr_get(x_28, 0);
lean::inc(x_42);
lean::dec(x_28);
x_1 = x_42;
x_2 = x_9;
goto _start;
}
}
}
}
}
obj* l_Lean_Elaborator_updateParserConfig(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
lean::inc(x_3);
x_4 = l_Lean_Elaborator_currentScope(x_1, x_2, x_3);
if (lean::obj_tag(x_4) == 0)
{
uint8 x_5; 
lean::dec(x_3);
lean::dec(x_2);
x_5 = !lean::is_exclusive(x_4);
if (x_5 == 0)
{
return x_4;
}
else
{
obj* x_6; obj* x_7; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_7 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
}
else
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; uint8 x_12; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_2, 1);
lean::inc(x_9);
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
x_12 = !lean::is_exclusive(x_9);
if (x_12 == 0)
{
uint8 x_13; 
x_13 = !lean::is_exclusive(x_3);
if (x_13 == 0)
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_14 = lean::cnstr_get(x_9, 0);
x_15 = lean::cnstr_get(x_9, 1);
x_16 = lean::cnstr_get(x_3, 0);
x_17 = lean::cnstr_get(x_3, 1);
x_18 = lean::cnstr_get(x_3, 2);
x_19 = lean::cnstr_get(x_3, 3);
x_20 = lean::cnstr_get(x_3, 4);
x_21 = lean::cnstr_get(x_3, 5);
x_22 = lean::cnstr_get(x_3, 7);
x_23 = lean::cnstr_get(x_3, 8);
x_24 = lean::cnstr_get(x_3, 9);
x_25 = lean::cnstr_get(x_3, 10);
x_26 = lean::cnstr_get(x_3, 6);
lean::dec(x_26);
lean::inc(x_16);
x_27 = l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__1(x_14, x_16, x_1, x_2, x_11);
if (lean::obj_tag(x_27) == 0)
{
uint8 x_28; 
lean::free_heap_obj(x_3);
lean::dec(x_25);
lean::dec(x_24);
lean::dec(x_23);
lean::dec(x_22);
lean::dec(x_21);
lean::dec(x_20);
lean::dec(x_19);
lean::dec(x_18);
lean::dec(x_17);
lean::dec(x_16);
lean::free_heap_obj(x_9);
lean::dec(x_15);
lean::dec(x_10);
lean::dec(x_2);
x_28 = !lean::is_exclusive(x_27);
if (x_28 == 0)
{
return x_27;
}
else
{
obj* x_29; obj* x_30; 
x_29 = lean::cnstr_get(x_27, 0);
lean::inc(x_29);
lean::dec(x_27);
x_30 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_30, 0, x_29);
return x_30;
}
}
else
{
obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; 
x_31 = lean::cnstr_get(x_27, 0);
lean::inc(x_31);
lean::dec(x_27);
x_32 = lean::cnstr_get(x_31, 0);
lean::inc(x_32);
x_33 = lean::cnstr_get(x_31, 1);
lean::inc(x_33);
lean::dec(x_31);
x_34 = lean::cnstr_get(x_10, 2);
lean::inc(x_34);
lean::dec(x_10);
lean::inc(x_17);
x_35 = l_List_append___rarg(x_17, x_34);
x_36 = l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__2(x_32, x_35, x_1, x_2, x_33);
lean::dec(x_2);
if (lean::obj_tag(x_36) == 0)
{
uint8 x_37; 
lean::free_heap_obj(x_3);
lean::dec(x_25);
lean::dec(x_24);
lean::dec(x_23);
lean::dec(x_22);
lean::dec(x_21);
lean::dec(x_20);
lean::dec(x_19);
lean::dec(x_18);
lean::dec(x_17);
lean::dec(x_16);
lean::free_heap_obj(x_9);
lean::dec(x_15);
x_37 = !lean::is_exclusive(x_36);
if (x_37 == 0)
{
return x_36;
}
else
{
obj* x_38; obj* x_39; 
x_38 = lean::cnstr_get(x_36, 0);
lean::inc(x_38);
lean::dec(x_36);
x_39 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_39, 0, x_38);
return x_39;
}
}
else
{
uint8 x_40; 
x_40 = !lean::is_exclusive(x_36);
if (x_40 == 0)
{
obj* x_41; uint8 x_42; 
x_41 = lean::cnstr_get(x_36, 0);
x_42 = !lean::is_exclusive(x_41);
if (x_42 == 0)
{
obj* x_43; obj* x_44; obj* x_45; 
x_43 = lean::cnstr_get(x_41, 0);
x_44 = lean::cnstr_get(x_41, 1);
lean::dec(x_44);
lean::cnstr_set(x_9, 0, x_43);
lean::cnstr_set(x_3, 6, x_9);
x_45 = lean::box(0);
lean::cnstr_set(x_41, 1, x_3);
lean::cnstr_set(x_41, 0, x_45);
return x_36;
}
else
{
obj* x_46; obj* x_47; obj* x_48; 
x_46 = lean::cnstr_get(x_41, 0);
lean::inc(x_46);
lean::dec(x_41);
lean::cnstr_set(x_9, 0, x_46);
lean::cnstr_set(x_3, 6, x_9);
x_47 = lean::box(0);
x_48 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_48, 0, x_47);
lean::cnstr_set(x_48, 1, x_3);
lean::cnstr_set(x_36, 0, x_48);
return x_36;
}
}
else
{
obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; 
x_49 = lean::cnstr_get(x_36, 0);
lean::inc(x_49);
lean::dec(x_36);
x_50 = lean::cnstr_get(x_49, 0);
lean::inc(x_50);
if (lean::is_exclusive(x_49)) {
 lean::cnstr_release(x_49, 0);
 lean::cnstr_release(x_49, 1);
 x_51 = x_49;
} else {
 lean::dec_ref(x_49);
 x_51 = lean::box(0);
}
lean::cnstr_set(x_9, 0, x_50);
lean::cnstr_set(x_3, 6, x_9);
x_52 = lean::box(0);
if (lean::is_scalar(x_51)) {
 x_53 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_53 = x_51;
}
lean::cnstr_set(x_53, 0, x_52);
lean::cnstr_set(x_53, 1, x_3);
x_54 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_54, 0, x_53);
return x_54;
}
}
}
}
else
{
obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; 
x_55 = lean::cnstr_get(x_9, 0);
x_56 = lean::cnstr_get(x_9, 1);
x_57 = lean::cnstr_get(x_3, 0);
x_58 = lean::cnstr_get(x_3, 1);
x_59 = lean::cnstr_get(x_3, 2);
x_60 = lean::cnstr_get(x_3, 3);
x_61 = lean::cnstr_get(x_3, 4);
x_62 = lean::cnstr_get(x_3, 5);
x_63 = lean::cnstr_get(x_3, 7);
x_64 = lean::cnstr_get(x_3, 8);
x_65 = lean::cnstr_get(x_3, 9);
x_66 = lean::cnstr_get(x_3, 10);
lean::inc(x_66);
lean::inc(x_65);
lean::inc(x_64);
lean::inc(x_63);
lean::inc(x_62);
lean::inc(x_61);
lean::inc(x_60);
lean::inc(x_59);
lean::inc(x_58);
lean::inc(x_57);
lean::dec(x_3);
lean::inc(x_57);
x_67 = l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__1(x_55, x_57, x_1, x_2, x_11);
if (lean::obj_tag(x_67) == 0)
{
obj* x_68; obj* x_69; obj* x_70; 
lean::dec(x_66);
lean::dec(x_65);
lean::dec(x_64);
lean::dec(x_63);
lean::dec(x_62);
lean::dec(x_61);
lean::dec(x_60);
lean::dec(x_59);
lean::dec(x_58);
lean::dec(x_57);
lean::free_heap_obj(x_9);
lean::dec(x_56);
lean::dec(x_10);
lean::dec(x_2);
x_68 = lean::cnstr_get(x_67, 0);
lean::inc(x_68);
if (lean::is_exclusive(x_67)) {
 lean::cnstr_release(x_67, 0);
 x_69 = x_67;
} else {
 lean::dec_ref(x_67);
 x_69 = lean::box(0);
}
if (lean::is_scalar(x_69)) {
 x_70 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_70 = x_69;
}
lean::cnstr_set(x_70, 0, x_68);
return x_70;
}
else
{
obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; 
x_71 = lean::cnstr_get(x_67, 0);
lean::inc(x_71);
lean::dec(x_67);
x_72 = lean::cnstr_get(x_71, 0);
lean::inc(x_72);
x_73 = lean::cnstr_get(x_71, 1);
lean::inc(x_73);
lean::dec(x_71);
x_74 = lean::cnstr_get(x_10, 2);
lean::inc(x_74);
lean::dec(x_10);
lean::inc(x_58);
x_75 = l_List_append___rarg(x_58, x_74);
x_76 = l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__2(x_72, x_75, x_1, x_2, x_73);
lean::dec(x_2);
if (lean::obj_tag(x_76) == 0)
{
obj* x_77; obj* x_78; obj* x_79; 
lean::dec(x_66);
lean::dec(x_65);
lean::dec(x_64);
lean::dec(x_63);
lean::dec(x_62);
lean::dec(x_61);
lean::dec(x_60);
lean::dec(x_59);
lean::dec(x_58);
lean::dec(x_57);
lean::free_heap_obj(x_9);
lean::dec(x_56);
x_77 = lean::cnstr_get(x_76, 0);
lean::inc(x_77);
if (lean::is_exclusive(x_76)) {
 lean::cnstr_release(x_76, 0);
 x_78 = x_76;
} else {
 lean::dec_ref(x_76);
 x_78 = lean::box(0);
}
if (lean::is_scalar(x_78)) {
 x_79 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_79 = x_78;
}
lean::cnstr_set(x_79, 0, x_77);
return x_79;
}
else
{
obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; 
x_80 = lean::cnstr_get(x_76, 0);
lean::inc(x_80);
if (lean::is_exclusive(x_76)) {
 lean::cnstr_release(x_76, 0);
 x_81 = x_76;
} else {
 lean::dec_ref(x_76);
 x_81 = lean::box(0);
}
x_82 = lean::cnstr_get(x_80, 0);
lean::inc(x_82);
if (lean::is_exclusive(x_80)) {
 lean::cnstr_release(x_80, 0);
 lean::cnstr_release(x_80, 1);
 x_83 = x_80;
} else {
 lean::dec_ref(x_80);
 x_83 = lean::box(0);
}
lean::cnstr_set(x_9, 0, x_82);
x_84 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_84, 0, x_57);
lean::cnstr_set(x_84, 1, x_58);
lean::cnstr_set(x_84, 2, x_59);
lean::cnstr_set(x_84, 3, x_60);
lean::cnstr_set(x_84, 4, x_61);
lean::cnstr_set(x_84, 5, x_62);
lean::cnstr_set(x_84, 6, x_9);
lean::cnstr_set(x_84, 7, x_63);
lean::cnstr_set(x_84, 8, x_64);
lean::cnstr_set(x_84, 9, x_65);
lean::cnstr_set(x_84, 10, x_66);
x_85 = lean::box(0);
if (lean::is_scalar(x_83)) {
 x_86 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_86 = x_83;
}
lean::cnstr_set(x_86, 0, x_85);
lean::cnstr_set(x_86, 1, x_84);
if (lean::is_scalar(x_81)) {
 x_87 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_87 = x_81;
}
lean::cnstr_set(x_87, 0, x_86);
return x_87;
}
}
}
}
else
{
obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; 
x_88 = lean::cnstr_get(x_9, 0);
x_89 = lean::cnstr_get(x_9, 1);
lean::inc(x_89);
lean::inc(x_88);
lean::dec(x_9);
x_90 = lean::cnstr_get(x_3, 0);
lean::inc(x_90);
x_91 = lean::cnstr_get(x_3, 1);
lean::inc(x_91);
x_92 = lean::cnstr_get(x_3, 2);
lean::inc(x_92);
x_93 = lean::cnstr_get(x_3, 3);
lean::inc(x_93);
x_94 = lean::cnstr_get(x_3, 4);
lean::inc(x_94);
x_95 = lean::cnstr_get(x_3, 5);
lean::inc(x_95);
x_96 = lean::cnstr_get(x_3, 7);
lean::inc(x_96);
x_97 = lean::cnstr_get(x_3, 8);
lean::inc(x_97);
x_98 = lean::cnstr_get(x_3, 9);
lean::inc(x_98);
x_99 = lean::cnstr_get(x_3, 10);
lean::inc(x_99);
if (lean::is_exclusive(x_3)) {
 lean::cnstr_release(x_3, 0);
 lean::cnstr_release(x_3, 1);
 lean::cnstr_release(x_3, 2);
 lean::cnstr_release(x_3, 3);
 lean::cnstr_release(x_3, 4);
 lean::cnstr_release(x_3, 5);
 lean::cnstr_release(x_3, 6);
 lean::cnstr_release(x_3, 7);
 lean::cnstr_release(x_3, 8);
 lean::cnstr_release(x_3, 9);
 lean::cnstr_release(x_3, 10);
 x_100 = x_3;
} else {
 lean::dec_ref(x_3);
 x_100 = lean::box(0);
}
lean::inc(x_90);
x_101 = l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__1(x_88, x_90, x_1, x_2, x_11);
if (lean::obj_tag(x_101) == 0)
{
obj* x_102; obj* x_103; obj* x_104; 
lean::dec(x_100);
lean::dec(x_99);
lean::dec(x_98);
lean::dec(x_97);
lean::dec(x_96);
lean::dec(x_95);
lean::dec(x_94);
lean::dec(x_93);
lean::dec(x_92);
lean::dec(x_91);
lean::dec(x_90);
lean::dec(x_89);
lean::dec(x_10);
lean::dec(x_2);
x_102 = lean::cnstr_get(x_101, 0);
lean::inc(x_102);
if (lean::is_exclusive(x_101)) {
 lean::cnstr_release(x_101, 0);
 x_103 = x_101;
} else {
 lean::dec_ref(x_101);
 x_103 = lean::box(0);
}
if (lean::is_scalar(x_103)) {
 x_104 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_104 = x_103;
}
lean::cnstr_set(x_104, 0, x_102);
return x_104;
}
else
{
obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; 
x_105 = lean::cnstr_get(x_101, 0);
lean::inc(x_105);
lean::dec(x_101);
x_106 = lean::cnstr_get(x_105, 0);
lean::inc(x_106);
x_107 = lean::cnstr_get(x_105, 1);
lean::inc(x_107);
lean::dec(x_105);
x_108 = lean::cnstr_get(x_10, 2);
lean::inc(x_108);
lean::dec(x_10);
lean::inc(x_91);
x_109 = l_List_append___rarg(x_91, x_108);
x_110 = l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__2(x_106, x_109, x_1, x_2, x_107);
lean::dec(x_2);
if (lean::obj_tag(x_110) == 0)
{
obj* x_111; obj* x_112; obj* x_113; 
lean::dec(x_100);
lean::dec(x_99);
lean::dec(x_98);
lean::dec(x_97);
lean::dec(x_96);
lean::dec(x_95);
lean::dec(x_94);
lean::dec(x_93);
lean::dec(x_92);
lean::dec(x_91);
lean::dec(x_90);
lean::dec(x_89);
x_111 = lean::cnstr_get(x_110, 0);
lean::inc(x_111);
if (lean::is_exclusive(x_110)) {
 lean::cnstr_release(x_110, 0);
 x_112 = x_110;
} else {
 lean::dec_ref(x_110);
 x_112 = lean::box(0);
}
if (lean::is_scalar(x_112)) {
 x_113 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_113 = x_112;
}
lean::cnstr_set(x_113, 0, x_111);
return x_113;
}
else
{
obj* x_114; obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; 
x_114 = lean::cnstr_get(x_110, 0);
lean::inc(x_114);
if (lean::is_exclusive(x_110)) {
 lean::cnstr_release(x_110, 0);
 x_115 = x_110;
} else {
 lean::dec_ref(x_110);
 x_115 = lean::box(0);
}
x_116 = lean::cnstr_get(x_114, 0);
lean::inc(x_116);
if (lean::is_exclusive(x_114)) {
 lean::cnstr_release(x_114, 0);
 lean::cnstr_release(x_114, 1);
 x_117 = x_114;
} else {
 lean::dec_ref(x_114);
 x_117 = lean::box(0);
}
x_118 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_118, 0, x_116);
lean::cnstr_set(x_118, 1, x_89);
if (lean::is_scalar(x_100)) {
 x_119 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_119 = x_100;
}
lean::cnstr_set(x_119, 0, x_90);
lean::cnstr_set(x_119, 1, x_91);
lean::cnstr_set(x_119, 2, x_92);
lean::cnstr_set(x_119, 3, x_93);
lean::cnstr_set(x_119, 4, x_94);
lean::cnstr_set(x_119, 5, x_95);
lean::cnstr_set(x_119, 6, x_118);
lean::cnstr_set(x_119, 7, x_96);
lean::cnstr_set(x_119, 8, x_97);
lean::cnstr_set(x_119, 9, x_98);
lean::cnstr_set(x_119, 10, x_99);
x_120 = lean::box(0);
if (lean::is_scalar(x_117)) {
 x_121 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_121 = x_117;
}
lean::cnstr_set(x_121, 0, x_120);
lean::cnstr_set(x_121, 1, x_119);
if (lean::is_scalar(x_115)) {
 x_122 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_122 = x_115;
}
lean::cnstr_set(x_122, 0, x_121);
return x_122;
}
}
}
}
}
}
obj* l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__1___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__1(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_4);
lean::dec(x_3);
return x_6;
}
}
obj* l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__2___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_List_mfoldl___main___at_Lean_Elaborator_updateParserConfig___spec__2(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_4);
lean::dec(x_3);
return x_6;
}
}
obj* l_Lean_Elaborator_updateParserConfig___boxed(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = l_Lean_Elaborator_updateParserConfig(x_1, x_2, x_3);
lean::dec(x_1);
return x_4;
}
}
obj* _init_l_Lean_Elaborator_postprocessNotationSpec___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_1 = lean::box(0);
x_2 = lean::mk_string(":");
x_3 = l_String_trim(x_2);
lean::dec(x_2);
x_4 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_4, 0, x_1);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_4);
x_6 = l_Lean_Parser_maxPrec;
x_7 = l_Lean_Parser_number_View_ofNat(x_6);
x_8 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
x_9 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_9, 0, x_8);
x_10 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_10, 0, x_5);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_11, 0, x_10);
return x_11;
}
}
obj* l_Lean_Elaborator_postprocessNotationSpec(obj* x_1) {
_start:
{
obj* x_2; 
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; 
x_3 = lean::cnstr_get(x_1, 1);
lean::inc(x_3);
if (lean::obj_tag(x_3) == 0)
{
return x_1;
}
else
{
obj* x_4; obj* x_5; obj* x_6; 
x_4 = lean::cnstr_get(x_3, 0);
lean::inc(x_4);
x_5 = lean::cnstr_get(x_4, 0);
lean::inc(x_5);
x_6 = lean::cnstr_get(x_5, 3);
lean::inc(x_6);
if (lean::obj_tag(x_6) == 0)
{
uint8 x_7; 
x_7 = !lean::is_exclusive(x_1);
if (x_7 == 0)
{
obj* x_8; obj* x_9; uint8 x_10; 
x_8 = lean::cnstr_get(x_1, 1);
lean::dec(x_8);
x_9 = lean::cnstr_get(x_1, 0);
lean::dec(x_9);
x_10 = !lean::is_exclusive(x_3);
if (x_10 == 0)
{
obj* x_11; uint8 x_12; 
x_11 = lean::cnstr_get(x_3, 0);
lean::dec(x_11);
x_12 = !lean::is_exclusive(x_4);
if (x_12 == 0)
{
obj* x_13; uint8 x_14; 
x_13 = lean::cnstr_get(x_4, 0);
lean::dec(x_13);
x_14 = !lean::is_exclusive(x_5);
if (x_14 == 0)
{
obj* x_15; obj* x_16; 
x_15 = lean::cnstr_get(x_5, 3);
lean::dec(x_15);
x_16 = l_Lean_Elaborator_postprocessNotationSpec___closed__1;
lean::cnstr_set(x_5, 3, x_16);
return x_1;
}
else
{
obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
x_17 = lean::cnstr_get(x_5, 0);
x_18 = lean::cnstr_get(x_5, 1);
x_19 = lean::cnstr_get(x_5, 2);
lean::inc(x_19);
lean::inc(x_18);
lean::inc(x_17);
lean::dec(x_5);
x_20 = l_Lean_Elaborator_postprocessNotationSpec___closed__1;
x_21 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_21, 0, x_17);
lean::cnstr_set(x_21, 1, x_18);
lean::cnstr_set(x_21, 2, x_19);
lean::cnstr_set(x_21, 3, x_20);
lean::cnstr_set(x_4, 0, x_21);
return x_1;
}
}
else
{
obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_22 = lean::cnstr_get(x_4, 1);
lean::inc(x_22);
lean::dec(x_4);
x_23 = lean::cnstr_get(x_5, 0);
lean::inc(x_23);
x_24 = lean::cnstr_get(x_5, 1);
lean::inc(x_24);
x_25 = lean::cnstr_get(x_5, 2);
lean::inc(x_25);
if (lean::is_exclusive(x_5)) {
 lean::cnstr_release(x_5, 0);
 lean::cnstr_release(x_5, 1);
 lean::cnstr_release(x_5, 2);
 lean::cnstr_release(x_5, 3);
 x_26 = x_5;
} else {
 lean::dec_ref(x_5);
 x_26 = lean::box(0);
}
x_27 = l_Lean_Elaborator_postprocessNotationSpec___closed__1;
if (lean::is_scalar(x_26)) {
 x_28 = lean::alloc_cnstr(0, 4, 0);
} else {
 x_28 = x_26;
}
lean::cnstr_set(x_28, 0, x_23);
lean::cnstr_set(x_28, 1, x_24);
lean::cnstr_set(x_28, 2, x_25);
lean::cnstr_set(x_28, 3, x_27);
x_29 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_22);
lean::cnstr_set(x_3, 0, x_29);
return x_1;
}
}
else
{
obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; 
x_30 = lean::cnstr_get(x_3, 1);
lean::inc(x_30);
lean::dec(x_3);
x_31 = lean::cnstr_get(x_4, 1);
lean::inc(x_31);
if (lean::is_exclusive(x_4)) {
 lean::cnstr_release(x_4, 0);
 lean::cnstr_release(x_4, 1);
 x_32 = x_4;
} else {
 lean::dec_ref(x_4);
 x_32 = lean::box(0);
}
x_33 = lean::cnstr_get(x_5, 0);
lean::inc(x_33);
x_34 = lean::cnstr_get(x_5, 1);
lean::inc(x_34);
x_35 = lean::cnstr_get(x_5, 2);
lean::inc(x_35);
if (lean::is_exclusive(x_5)) {
 lean::cnstr_release(x_5, 0);
 lean::cnstr_release(x_5, 1);
 lean::cnstr_release(x_5, 2);
 lean::cnstr_release(x_5, 3);
 x_36 = x_5;
} else {
 lean::dec_ref(x_5);
 x_36 = lean::box(0);
}
x_37 = l_Lean_Elaborator_postprocessNotationSpec___closed__1;
if (lean::is_scalar(x_36)) {
 x_38 = lean::alloc_cnstr(0, 4, 0);
} else {
 x_38 = x_36;
}
lean::cnstr_set(x_38, 0, x_33);
lean::cnstr_set(x_38, 1, x_34);
lean::cnstr_set(x_38, 2, x_35);
lean::cnstr_set(x_38, 3, x_37);
if (lean::is_scalar(x_32)) {
 x_39 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_39 = x_32;
}
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_31);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_30);
lean::cnstr_set(x_1, 1, x_40);
return x_1;
}
}
else
{
obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; 
lean::dec(x_1);
x_41 = lean::cnstr_get(x_3, 1);
lean::inc(x_41);
if (lean::is_exclusive(x_3)) {
 lean::cnstr_release(x_3, 0);
 lean::cnstr_release(x_3, 1);
 x_42 = x_3;
} else {
 lean::dec_ref(x_3);
 x_42 = lean::box(0);
}
x_43 = lean::cnstr_get(x_4, 1);
lean::inc(x_43);
if (lean::is_exclusive(x_4)) {
 lean::cnstr_release(x_4, 0);
 lean::cnstr_release(x_4, 1);
 x_44 = x_4;
} else {
 lean::dec_ref(x_4);
 x_44 = lean::box(0);
}
x_45 = lean::cnstr_get(x_5, 0);
lean::inc(x_45);
x_46 = lean::cnstr_get(x_5, 1);
lean::inc(x_46);
x_47 = lean::cnstr_get(x_5, 2);
lean::inc(x_47);
if (lean::is_exclusive(x_5)) {
 lean::cnstr_release(x_5, 0);
 lean::cnstr_release(x_5, 1);
 lean::cnstr_release(x_5, 2);
 lean::cnstr_release(x_5, 3);
 x_48 = x_5;
} else {
 lean::dec_ref(x_5);
 x_48 = lean::box(0);
}
x_49 = l_Lean_Elaborator_postprocessNotationSpec___closed__1;
if (lean::is_scalar(x_48)) {
 x_50 = lean::alloc_cnstr(0, 4, 0);
} else {
 x_50 = x_48;
}
lean::cnstr_set(x_50, 0, x_45);
lean::cnstr_set(x_50, 1, x_46);
lean::cnstr_set(x_50, 2, x_47);
lean::cnstr_set(x_50, 3, x_49);
if (lean::is_scalar(x_44)) {
 x_51 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_51 = x_44;
}
lean::cnstr_set(x_51, 0, x_50);
lean::cnstr_set(x_51, 1, x_43);
if (lean::is_scalar(x_42)) {
 x_52 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_52 = x_42;
}
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_41);
x_53 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_53, 0, x_2);
lean::cnstr_set(x_53, 1, x_52);
return x_53;
}
}
else
{
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_3);
return x_1;
}
}
}
else
{
lean::dec(x_2);
return x_1;
}
}
}
obj* l_Lean_Elaborator_reserveNotation_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; uint8 x_8; 
x_5 = l_Lean_Parser_command_reserveNotation_HasView;
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
x_7 = lean::apply_1(x_6, x_1);
x_8 = !lean::is_exclusive(x_7);
if (x_8 == 0)
{
obj* x_9; obj* x_10; uint8 x_11; 
x_9 = lean::cnstr_get(x_7, 2);
x_10 = l_Lean_Elaborator_postprocessNotationSpec(x_9);
lean::cnstr_set(x_7, 2, x_10);
x_11 = !lean::is_exclusive(x_4);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; 
x_12 = lean::cnstr_get(x_4, 0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_7);
lean::cnstr_set(x_13, 1, x_12);
lean::cnstr_set(x_4, 0, x_13);
x_14 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_4);
return x_14;
}
else
{
obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_15 = lean::cnstr_get(x_4, 0);
x_16 = lean::cnstr_get(x_4, 1);
x_17 = lean::cnstr_get(x_4, 2);
x_18 = lean::cnstr_get(x_4, 3);
x_19 = lean::cnstr_get(x_4, 4);
x_20 = lean::cnstr_get(x_4, 5);
x_21 = lean::cnstr_get(x_4, 6);
x_22 = lean::cnstr_get(x_4, 7);
x_23 = lean::cnstr_get(x_4, 8);
x_24 = lean::cnstr_get(x_4, 9);
x_25 = lean::cnstr_get(x_4, 10);
lean::inc(x_25);
lean::inc(x_24);
lean::inc(x_23);
lean::inc(x_22);
lean::inc(x_21);
lean::inc(x_20);
lean::inc(x_19);
lean::inc(x_18);
lean::inc(x_17);
lean::inc(x_16);
lean::inc(x_15);
lean::dec(x_4);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_7);
lean::cnstr_set(x_26, 1, x_15);
x_27 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_16);
lean::cnstr_set(x_27, 2, x_17);
lean::cnstr_set(x_27, 3, x_18);
lean::cnstr_set(x_27, 4, x_19);
lean::cnstr_set(x_27, 5, x_20);
lean::cnstr_set(x_27, 6, x_21);
lean::cnstr_set(x_27, 7, x_22);
lean::cnstr_set(x_27, 8, x_23);
lean::cnstr_set(x_27, 9, x_24);
lean::cnstr_set(x_27, 10, x_25);
x_28 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_27);
return x_28;
}
}
else
{
obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; 
x_29 = lean::cnstr_get(x_7, 0);
x_30 = lean::cnstr_get(x_7, 1);
x_31 = lean::cnstr_get(x_7, 2);
lean::inc(x_31);
lean::inc(x_30);
lean::inc(x_29);
lean::dec(x_7);
x_32 = l_Lean_Elaborator_postprocessNotationSpec(x_31);
x_33 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_33, 0, x_29);
lean::cnstr_set(x_33, 1, x_30);
lean::cnstr_set(x_33, 2, x_32);
x_34 = lean::cnstr_get(x_4, 0);
lean::inc(x_34);
x_35 = lean::cnstr_get(x_4, 1);
lean::inc(x_35);
x_36 = lean::cnstr_get(x_4, 2);
lean::inc(x_36);
x_37 = lean::cnstr_get(x_4, 3);
lean::inc(x_37);
x_38 = lean::cnstr_get(x_4, 4);
lean::inc(x_38);
x_39 = lean::cnstr_get(x_4, 5);
lean::inc(x_39);
x_40 = lean::cnstr_get(x_4, 6);
lean::inc(x_40);
x_41 = lean::cnstr_get(x_4, 7);
lean::inc(x_41);
x_42 = lean::cnstr_get(x_4, 8);
lean::inc(x_42);
x_43 = lean::cnstr_get(x_4, 9);
lean::inc(x_43);
x_44 = lean::cnstr_get(x_4, 10);
lean::inc(x_44);
if (lean::is_exclusive(x_4)) {
 lean::cnstr_release(x_4, 0);
 lean::cnstr_release(x_4, 1);
 lean::cnstr_release(x_4, 2);
 lean::cnstr_release(x_4, 3);
 lean::cnstr_release(x_4, 4);
 lean::cnstr_release(x_4, 5);
 lean::cnstr_release(x_4, 6);
 lean::cnstr_release(x_4, 7);
 lean::cnstr_release(x_4, 8);
 lean::cnstr_release(x_4, 9);
 lean::cnstr_release(x_4, 10);
 x_45 = x_4;
} else {
 lean::dec_ref(x_4);
 x_45 = lean::box(0);
}
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_33);
lean::cnstr_set(x_46, 1, x_34);
if (lean::is_scalar(x_45)) {
 x_47 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_47 = x_45;
}
lean::cnstr_set(x_47, 0, x_46);
lean::cnstr_set(x_47, 1, x_35);
lean::cnstr_set(x_47, 2, x_36);
lean::cnstr_set(x_47, 3, x_37);
lean::cnstr_set(x_47, 4, x_38);
lean::cnstr_set(x_47, 5, x_39);
lean::cnstr_set(x_47, 6, x_40);
lean::cnstr_set(x_47, 7, x_41);
lean::cnstr_set(x_47, 8, x_42);
lean::cnstr_set(x_47, 9, x_43);
lean::cnstr_set(x_47, 10, x_44);
x_48 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_47);
return x_48;
}
}
}
obj* l_Lean_Elaborator_reserveNotation_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_reserveNotation_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_2);
return x_5;
}
}
uint8 l_Lean_Elaborator_matchPrecedence___main(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_2) == 0)
{
uint8 x_3; 
x_3 = 0;
return x_3;
}
else
{
uint8 x_4; 
lean::dec(x_2);
x_4 = 1;
return x_4;
}
}
else
{
if (lean::obj_tag(x_2) == 0)
{
uint8 x_5; 
lean::dec(x_1);
x_5 = 0;
return x_5;
}
else
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; uint8 x_12; 
x_6 = lean::cnstr_get(x_1, 0);
lean::inc(x_6);
lean::dec(x_1);
x_7 = lean::cnstr_get(x_2, 0);
lean::inc(x_7);
lean::dec(x_2);
x_8 = lean::cnstr_get(x_6, 1);
lean::inc(x_8);
lean::dec(x_6);
x_9 = l_Lean_Parser_command_NotationSpec_precedenceTerm_View_toNat___main(x_8);
x_10 = lean::cnstr_get(x_7, 1);
lean::inc(x_10);
lean::dec(x_7);
x_11 = l_Lean_Parser_command_NotationSpec_precedenceTerm_View_toNat___main(x_10);
x_12 = lean::nat_dec_eq(x_9, x_11);
lean::dec(x_11);
lean::dec(x_9);
return x_12;
}
}
}
}
obj* l_Lean_Elaborator_matchPrecedence___main___boxed(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; obj* x_4; 
x_3 = l_Lean_Elaborator_matchPrecedence___main(x_1, x_2);
x_4 = lean::box(x_3);
return x_4;
}
}
uint8 l_Lean_Elaborator_matchPrecedence(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; 
x_3 = l_Lean_Elaborator_matchPrecedence___main(x_1, x_2);
return x_3;
}
}
obj* l_Lean_Elaborator_matchPrecedence___boxed(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; obj* x_4; 
x_3 = l_Lean_Elaborator_matchPrecedence(x_1, x_2);
x_4 = lean::box(x_3);
return x_4;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_matchSpec___spec__1(obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_List_mmap___main___at_Lean_Parser_Syntax_reprint___main___spec__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_18; obj* x_19; obj* x_20; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
x_4 = lean::cnstr_get(x_1, 1);
lean::inc(x_4);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_release(x_1, 0);
 lean::cnstr_release(x_1, 1);
 x_5 = x_1;
} else {
 lean::dec_ref(x_1);
 x_5 = lean::box(0);
}
x_18 = lean::cnstr_get(x_3, 0);
lean::inc(x_18);
x_19 = lean::cnstr_get(x_18, 0);
lean::inc(x_19);
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
if (lean::obj_tag(x_20) == 0)
{
obj* x_21; 
lean::dec(x_19);
lean::dec(x_18);
lean::dec(x_3);
x_21 = lean::box(0);
x_6 = x_21;
goto block_17;
}
else
{
obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_37; 
x_22 = lean::cnstr_get(x_3, 1);
lean::inc(x_22);
lean::dec(x_3);
x_23 = lean::cnstr_get(x_19, 3);
lean::inc(x_23);
lean::dec(x_19);
x_24 = lean::cnstr_get(x_20, 0);
lean::inc(x_24);
lean::dec(x_20);
x_25 = lean::cnstr_get(x_22, 0);
lean::inc(x_25);
x_26 = lean::cnstr_get(x_22, 1);
lean::inc(x_26);
if (lean::is_exclusive(x_22)) {
 lean::cnstr_release(x_22, 0);
 lean::cnstr_release(x_22, 1);
 x_27 = x_22;
} else {
 lean::dec_ref(x_22);
 x_27 = lean::box(0);
}
x_37 = lean::cnstr_get(x_25, 1);
lean::inc(x_37);
if (lean::obj_tag(x_37) == 0)
{
obj* x_38; 
lean::dec(x_27);
lean::dec(x_26);
lean::dec(x_25);
lean::dec(x_24);
lean::dec(x_23);
lean::dec(x_18);
x_38 = lean::box(0);
x_6 = x_38;
goto block_17;
}
else
{
obj* x_39; uint8 x_40; 
x_39 = lean::cnstr_get(x_25, 3);
lean::inc(x_39);
x_40 = !lean::is_exclusive(x_37);
if (x_40 == 0)
{
obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; uint8 x_46; 
x_41 = lean::cnstr_get(x_37, 0);
x_42 = lean::cnstr_get(x_24, 1);
lean::inc(x_42);
lean::dec(x_24);
x_43 = l_String_trim(x_42);
lean::dec(x_42);
x_44 = lean::cnstr_get(x_41, 1);
lean::inc(x_44);
lean::dec(x_41);
x_45 = l_String_trim(x_44);
lean::dec(x_44);
x_46 = lean::string_dec_eq(x_43, x_45);
lean::dec(x_45);
lean::dec(x_43);
if (x_46 == 0)
{
obj* x_47; 
lean::free_heap_obj(x_37);
lean::dec(x_39);
lean::dec(x_27);
lean::dec(x_26);
lean::dec(x_25);
lean::dec(x_23);
lean::dec(x_18);
x_47 = lean::box(0);
x_6 = x_47;
goto block_17;
}
else
{
uint8 x_48; 
x_48 = l_Lean_Elaborator_matchPrecedence___main(x_23, x_39);
if (x_48 == 0)
{
obj* x_49; 
lean::free_heap_obj(x_37);
lean::dec(x_27);
lean::dec(x_26);
lean::dec(x_25);
lean::dec(x_18);
x_49 = lean::box(0);
x_6 = x_49;
goto block_17;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_18, 1);
lean::inc(x_50);
lean::dec(x_18);
if (lean::obj_tag(x_50) == 0)
{
if (lean::obj_tag(x_26) == 0)
{
lean::cnstr_set(x_37, 0, x_26);
x_28 = x_37;
goto block_36;
}
else
{
obj* x_51; 
lean::free_heap_obj(x_37);
lean::dec(x_26);
x_51 = lean::box(0);
x_28 = x_51;
goto block_36;
}
}
else
{
obj* x_52; obj* x_53; 
lean::free_heap_obj(x_37);
x_52 = lean::cnstr_get(x_50, 0);
lean::inc(x_52);
if (lean::is_exclusive(x_50)) {
 lean::cnstr_release(x_50, 0);
 x_53 = x_50;
} else {
 lean::dec_ref(x_50);
 x_53 = lean::box(0);
}
switch (lean::obj_tag(x_52)) {
case 0:
{
if (lean::obj_tag(x_26) == 0)
{
obj* x_54; 
lean::dec(x_53);
lean::dec(x_52);
x_54 = lean::box(0);
x_28 = x_54;
goto block_36;
}
else
{
obj* x_55; 
x_55 = lean::cnstr_get(x_26, 0);
lean::inc(x_55);
if (lean::obj_tag(x_55) == 0)
{
obj* x_56; obj* x_57; obj* x_58; obj* x_59; uint8 x_60; 
x_56 = lean::cnstr_get(x_52, 0);
lean::inc(x_56);
lean::dec(x_52);
x_57 = lean::cnstr_get(x_55, 0);
lean::inc(x_57);
lean::dec(x_55);
x_58 = lean::cnstr_get(x_56, 1);
lean::inc(x_58);
lean::dec(x_56);
x_59 = lean::cnstr_get(x_57, 1);
lean::inc(x_59);
lean::dec(x_57);
x_60 = l_Lean_Elaborator_matchPrecedence___main(x_58, x_59);
if (x_60 == 0)
{
obj* x_61; 
lean::dec(x_53);
lean::dec(x_26);
x_61 = lean::box(0);
x_28 = x_61;
goto block_36;
}
else
{
obj* x_62; 
if (lean::is_scalar(x_53)) {
 x_62 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_62 = x_53;
}
lean::cnstr_set(x_62, 0, x_26);
x_28 = x_62;
goto block_36;
}
}
else
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_53);
lean::dec(x_52);
lean::dec(x_26);
x_63 = lean::box(0);
x_28 = x_63;
goto block_36;
}
}
}
case 1:
{
if (lean::obj_tag(x_26) == 0)
{
obj* x_64; 
lean::dec(x_53);
lean::dec(x_52);
x_64 = lean::box(0);
x_28 = x_64;
goto block_36;
}
else
{
obj* x_65; 
x_65 = lean::cnstr_get(x_26, 0);
lean::inc(x_65);
switch (lean::obj_tag(x_65)) {
case 0:
{
obj* x_66; 
lean::dec(x_65);
lean::dec(x_53);
lean::dec(x_52);
lean::dec(x_26);
x_66 = lean::box(0);
x_28 = x_66;
goto block_36;
}
case 1:
{
obj* x_67; obj* x_68; obj* x_69; obj* x_70; uint8 x_71; 
x_67 = lean::cnstr_get(x_52, 0);
lean::inc(x_67);
lean::dec(x_52);
x_68 = lean::cnstr_get(x_65, 0);
lean::inc(x_68);
lean::dec(x_65);
x_69 = lean::cnstr_get(x_67, 1);
lean::inc(x_69);
lean::dec(x_67);
x_70 = lean::cnstr_get(x_68, 1);
lean::inc(x_70);
lean::dec(x_68);
x_71 = l_Lean_Elaborator_matchPrecedence___main(x_69, x_70);
if (x_71 == 0)
{
obj* x_72; 
lean::dec(x_53);
lean::dec(x_26);
x_72 = lean::box(0);
x_28 = x_72;
goto block_36;
}
else
{
obj* x_73; 
if (lean::is_scalar(x_53)) {
 x_73 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_73 = x_53;
}
lean::cnstr_set(x_73, 0, x_26);
x_28 = x_73;
goto block_36;
}
}
default: 
{
obj* x_74; 
lean::dec(x_65);
lean::dec(x_53);
lean::dec(x_52);
lean::dec(x_26);
x_74 = lean::box(0);
x_28 = x_74;
goto block_36;
}
}
}
}
default: 
{
obj* x_75; obj* x_76; obj* x_77; 
x_75 = lean::cnstr_get(x_52, 0);
lean::inc(x_75);
if (lean::is_exclusive(x_52)) {
 lean::cnstr_release(x_52, 0);
 x_76 = x_52;
} else {
 lean::dec_ref(x_52);
 x_76 = lean::box(0);
}
if (lean::obj_tag(x_26) == 0)
{
obj* x_98; 
lean::dec(x_76);
lean::dec(x_75);
lean::dec(x_53);
x_98 = lean::box(0);
x_28 = x_98;
goto block_36;
}
else
{
uint8 x_99; 
x_99 = !lean::is_exclusive(x_26);
if (x_99 == 0)
{
obj* x_100; 
x_100 = lean::cnstr_get(x_26, 0);
switch (lean::obj_tag(x_100)) {
case 0:
{
obj* x_101; 
lean::free_heap_obj(x_26);
lean::dec(x_100);
lean::dec(x_76);
lean::dec(x_75);
lean::dec(x_53);
x_101 = lean::box(0);
x_28 = x_101;
goto block_36;
}
case 1:
{
obj* x_102; 
lean::free_heap_obj(x_26);
lean::dec(x_100);
lean::dec(x_76);
lean::dec(x_75);
lean::dec(x_53);
x_102 = lean::box(0);
x_28 = x_102;
goto block_36;
}
default: 
{
obj* x_103; 
x_103 = lean::cnstr_get(x_75, 1);
lean::inc(x_103);
if (lean::obj_tag(x_103) == 0)
{
obj* x_104; obj* x_105; 
x_104 = lean::cnstr_get(x_100, 0);
lean::inc(x_104);
lean::dec(x_100);
x_105 = lean::cnstr_get(x_104, 1);
lean::inc(x_105);
lean::dec(x_104);
if (lean::obj_tag(x_105) == 0)
{
obj* x_106; 
lean::free_heap_obj(x_26);
x_106 = lean::box(0);
x_77 = x_106;
goto block_97;
}
else
{
obj* x_107; obj* x_108; 
x_107 = lean::cnstr_get(x_105, 0);
lean::inc(x_107);
x_108 = lean::cnstr_get(x_107, 1);
lean::inc(x_108);
lean::dec(x_107);
if (lean::obj_tag(x_108) == 0)
{
lean::dec(x_108);
lean::cnstr_set(x_26, 0, x_105);
x_77 = x_26;
goto block_97;
}
else
{
obj* x_109; 
lean::dec(x_108);
lean::dec(x_105);
lean::free_heap_obj(x_26);
x_109 = lean::box(0);
x_77 = x_109;
goto block_97;
}
}
}
else
{
obj* x_110; obj* x_111; 
lean::free_heap_obj(x_26);
x_110 = lean::cnstr_get(x_103, 0);
lean::inc(x_110);
x_111 = lean::cnstr_get(x_110, 1);
lean::inc(x_111);
lean::dec(x_110);
if (lean::obj_tag(x_111) == 0)
{
obj* x_112; obj* x_113; 
x_112 = lean::cnstr_get(x_100, 0);
lean::inc(x_112);
lean::dec(x_100);
x_113 = lean::cnstr_get(x_112, 1);
lean::inc(x_113);
lean::dec(x_112);
if (lean::obj_tag(x_113) == 0)
{
obj* x_114; 
lean::dec(x_111);
lean::dec(x_103);
x_114 = lean::box(0);
x_77 = x_114;
goto block_97;
}
else
{
uint8 x_115; 
x_115 = !lean::is_exclusive(x_113);
if (x_115 == 0)
{
obj* x_116; obj* x_117; 
x_116 = lean::cnstr_get(x_113, 0);
x_117 = lean::cnstr_get(x_116, 1);
lean::inc(x_117);
lean::dec(x_116);
if (lean::obj_tag(x_117) == 0)
{
obj* x_118; obj* x_119; obj* x_120; obj* x_121; uint8 x_122; 
x_118 = lean::cnstr_get(x_111, 0);
lean::inc(x_118);
lean::dec(x_111);
x_119 = lean::cnstr_get(x_117, 0);
lean::inc(x_119);
lean::dec(x_117);
x_120 = l_Lean_Parser_command_NotationSpec_precedenceTerm_View_toNat___main(x_118);
x_121 = l_Lean_Parser_command_NotationSpec_precedenceTerm_View_toNat___main(x_119);
x_122 = lean::nat_dec_eq(x_120, x_121);
lean::dec(x_121);
lean::dec(x_120);
if (x_122 == 0)
{
obj* x_123; 
lean::free_heap_obj(x_113);
lean::dec(x_103);
x_123 = lean::box(0);
x_77 = x_123;
goto block_97;
}
else
{
lean::cnstr_set(x_113, 0, x_103);
x_77 = x_113;
goto block_97;
}
}
else
{
obj* x_124; 
lean::dec(x_117);
lean::free_heap_obj(x_113);
lean::dec(x_111);
lean::dec(x_103);
x_124 = lean::box(0);
x_77 = x_124;
goto block_97;
}
}
else
{
obj* x_125; obj* x_126; 
x_125 = lean::cnstr_get(x_113, 0);
lean::inc(x_125);
lean::dec(x_113);
x_126 = lean::cnstr_get(x_125, 1);
lean::inc(x_126);
lean::dec(x_125);
if (lean::obj_tag(x_126) == 0)
{
obj* x_127; obj* x_128; obj* x_129; obj* x_130; uint8 x_131; 
x_127 = lean::cnstr_get(x_111, 0);
lean::inc(x_127);
lean::dec(x_111);
x_128 = lean::cnstr_get(x_126, 0);
lean::inc(x_128);
lean::dec(x_126);
x_129 = l_Lean_Parser_command_NotationSpec_precedenceTerm_View_toNat___main(x_127);
x_130 = l_Lean_Parser_command_NotationSpec_precedenceTerm_View_toNat___main(x_128);
x_131 = lean::nat_dec_eq(x_129, x_130);
lean::dec(x_130);
lean::dec(x_129);
if (x_131 == 0)
{
obj* x_132; 
lean::dec(x_103);
x_132 = lean::box(0);
x_77 = x_132;
goto block_97;
}
else
{
obj* x_133; 
x_133 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_133, 0, x_103);
x_77 = x_133;
goto block_97;
}
}
else
{
obj* x_134; 
lean::dec(x_126);
lean::dec(x_111);
lean::dec(x_103);
x_134 = lean::box(0);
x_77 = x_134;
goto block_97;
}
}
}
}
else
{
obj* x_135; 
lean::dec(x_111);
lean::dec(x_103);
lean::dec(x_100);
x_135 = lean::box(0);
x_77 = x_135;
goto block_97;
}
}
}
}
}
else
{
obj* x_136; 
x_136 = lean::cnstr_get(x_26, 0);
lean::inc(x_136);
lean::dec(x_26);
switch (lean::obj_tag(x_136)) {
case 0:
{
obj* x_137; 
lean::dec(x_136);
lean::dec(x_76);
lean::dec(x_75);
lean::dec(x_53);
x_137 = lean::box(0);
x_28 = x_137;
goto block_36;
}
case 1:
{
obj* x_138; 
lean::dec(x_136);
lean::dec(x_76);
lean::dec(x_75);
lean::dec(x_53);
x_138 = lean::box(0);
x_28 = x_138;
goto block_36;
}
default: 
{
obj* x_139; 
x_139 = lean::cnstr_get(x_75, 1);
lean::inc(x_139);
if (lean::obj_tag(x_139) == 0)
{
obj* x_140; obj* x_141; 
x_140 = lean::cnstr_get(x_136, 0);
lean::inc(x_140);
lean::dec(x_136);
x_141 = lean::cnstr_get(x_140, 1);
lean::inc(x_141);
lean::dec(x_140);
if (lean::obj_tag(x_141) == 0)
{
obj* x_142; 
x_142 = lean::box(0);
x_77 = x_142;
goto block_97;
}
else
{
obj* x_143; obj* x_144; 
x_143 = lean::cnstr_get(x_141, 0);
lean::inc(x_143);
x_144 = lean::cnstr_get(x_143, 1);
lean::inc(x_144);
lean::dec(x_143);
if (lean::obj_tag(x_144) == 0)
{
obj* x_145; 
lean::dec(x_144);
x_145 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_145, 0, x_141);
x_77 = x_145;
goto block_97;
}
else
{
obj* x_146; 
lean::dec(x_144);
lean::dec(x_141);
x_146 = lean::box(0);
x_77 = x_146;
goto block_97;
}
}
}
else
{
obj* x_147; obj* x_148; 
x_147 = lean::cnstr_get(x_139, 0);
lean::inc(x_147);
x_148 = lean::cnstr_get(x_147, 1);
lean::inc(x_148);
lean::dec(x_147);
if (lean::obj_tag(x_148) == 0)
{
obj* x_149; obj* x_150; 
x_149 = lean::cnstr_get(x_136, 0);
lean::inc(x_149);
lean::dec(x_136);
x_150 = lean::cnstr_get(x_149, 1);
lean::inc(x_150);
lean::dec(x_149);
if (lean::obj_tag(x_150) == 0)
{
obj* x_151; 
lean::dec(x_148);
lean::dec(x_139);
x_151 = lean::box(0);
x_77 = x_151;
goto block_97;
}
else
{
obj* x_152; obj* x_153; obj* x_154; 
x_152 = lean::cnstr_get(x_150, 0);
lean::inc(x_152);
if (lean::is_exclusive(x_150)) {
 lean::cnstr_release(x_150, 0);
 x_153 = x_150;
} else {
 lean::dec_ref(x_150);
 x_153 = lean::box(0);
}
x_154 = lean::cnstr_get(x_152, 1);
lean::inc(x_154);
lean::dec(x_152);
if (lean::obj_tag(x_154) == 0)
{
obj* x_155; obj* x_156; obj* x_157; obj* x_158; uint8 x_159; 
x_155 = lean::cnstr_get(x_148, 0);
lean::inc(x_155);
lean::dec(x_148);
x_156 = lean::cnstr_get(x_154, 0);
lean::inc(x_156);
lean::dec(x_154);
x_157 = l_Lean_Parser_command_NotationSpec_precedenceTerm_View_toNat___main(x_155);
x_158 = l_Lean_Parser_command_NotationSpec_precedenceTerm_View_toNat___main(x_156);
x_159 = lean::nat_dec_eq(x_157, x_158);
lean::dec(x_158);
lean::dec(x_157);
if (x_159 == 0)
{
obj* x_160; 
lean::dec(x_153);
lean::dec(x_139);
x_160 = lean::box(0);
x_77 = x_160;
goto block_97;
}
else
{
obj* x_161; 
if (lean::is_scalar(x_153)) {
 x_161 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_161 = x_153;
}
lean::cnstr_set(x_161, 0, x_139);
x_77 = x_161;
goto block_97;
}
}
else
{
obj* x_162; 
lean::dec(x_154);
lean::dec(x_153);
lean::dec(x_148);
lean::dec(x_139);
x_162 = lean::box(0);
x_77 = x_162;
goto block_97;
}
}
}
else
{
obj* x_163; 
lean::dec(x_148);
lean::dec(x_139);
lean::dec(x_136);
x_163 = lean::box(0);
x_77 = x_163;
goto block_97;
}
}
}
}
}
}
block_97:
{
if (lean::obj_tag(x_77) == 0)
{
obj* x_78; 
lean::dec(x_76);
lean::dec(x_75);
lean::dec(x_53);
x_78 = lean::box(0);
x_28 = x_78;
goto block_36;
}
else
{
uint8 x_79; 
x_79 = !lean::is_exclusive(x_77);
if (x_79 == 0)
{
uint8 x_80; 
x_80 = !lean::is_exclusive(x_75);
if (x_80 == 0)
{
obj* x_81; obj* x_82; obj* x_83; obj* x_84; 
x_81 = lean::cnstr_get(x_77, 0);
x_82 = lean::cnstr_get(x_75, 1);
lean::dec(x_82);
lean::cnstr_set(x_75, 1, x_81);
if (lean::is_scalar(x_76)) {
 x_83 = lean::alloc_cnstr(2, 1, 0);
} else {
 x_83 = x_76;
}
lean::cnstr_set(x_83, 0, x_75);
lean::cnstr_set(x_77, 0, x_83);
if (lean::is_scalar(x_53)) {
 x_84 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_84 = x_53;
}
lean::cnstr_set(x_84, 0, x_77);
x_28 = x_84;
goto block_36;
}
else
{
obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; 
x_85 = lean::cnstr_get(x_77, 0);
x_86 = lean::cnstr_get(x_75, 0);
lean::inc(x_86);
lean::dec(x_75);
x_87 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_87, 0, x_86);
lean::cnstr_set(x_87, 1, x_85);
if (lean::is_scalar(x_76)) {
 x_88 = lean::alloc_cnstr(2, 1, 0);
} else {
 x_88 = x_76;
}
lean::cnstr_set(x_88, 0, x_87);
lean::cnstr_set(x_77, 0, x_88);
if (lean::is_scalar(x_53)) {
 x_89 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_89 = x_53;
}
lean::cnstr_set(x_89, 0, x_77);
x_28 = x_89;
goto block_36;
}
}
else
{
obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; 
x_90 = lean::cnstr_get(x_77, 0);
lean::inc(x_90);
lean::dec(x_77);
x_91 = lean::cnstr_get(x_75, 0);
lean::inc(x_91);
if (lean::is_exclusive(x_75)) {
 lean::cnstr_release(x_75, 0);
 lean::cnstr_release(x_75, 1);
 x_92 = x_75;
} else {
 lean::dec_ref(x_75);
 x_92 = lean::box(0);
}
if (lean::is_scalar(x_92)) {
 x_93 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_93 = x_92;
}
lean::cnstr_set(x_93, 0, x_91);
lean::cnstr_set(x_93, 1, x_90);
if (lean::is_scalar(x_76)) {
 x_94 = lean::alloc_cnstr(2, 1, 0);
} else {
 x_94 = x_76;
}
lean::cnstr_set(x_94, 0, x_93);
x_95 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_95, 0, x_94);
if (lean::is_scalar(x_53)) {
 x_96 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_96 = x_53;
}
lean::cnstr_set(x_96, 0, x_95);
x_28 = x_96;
goto block_36;
}
}
}
}
}
}
}
}
}
else
{
obj* x_164; obj* x_165; obj* x_166; obj* x_167; obj* x_168; uint8 x_169; 
x_164 = lean::cnstr_get(x_37, 0);
lean::inc(x_164);
lean::dec(x_37);
x_165 = lean::cnstr_get(x_24, 1);
lean::inc(x_165);
lean::dec(x_24);
x_166 = l_String_trim(x_165);
lean::dec(x_165);
x_167 = lean::cnstr_get(x_164, 1);
lean::inc(x_167);
lean::dec(x_164);
x_168 = l_String_trim(x_167);
lean::dec(x_167);
x_169 = lean::string_dec_eq(x_166, x_168);
lean::dec(x_168);
lean::dec(x_166);
if (x_169 == 0)
{
obj* x_170; 
lean::dec(x_39);
lean::dec(x_27);
lean::dec(x_26);
lean::dec(x_25);
lean::dec(x_23);
lean::dec(x_18);
x_170 = lean::box(0);
x_6 = x_170;
goto block_17;
}
else
{
uint8 x_171; 
x_171 = l_Lean_Elaborator_matchPrecedence___main(x_23, x_39);
if (x_171 == 0)
{
obj* x_172; 
lean::dec(x_27);
lean::dec(x_26);
lean::dec(x_25);
lean::dec(x_18);
x_172 = lean::box(0);
x_6 = x_172;
goto block_17;
}
else
{
obj* x_173; 
x_173 = lean::cnstr_get(x_18, 1);
lean::inc(x_173);
lean::dec(x_18);
if (lean::obj_tag(x_173) == 0)
{
if (lean::obj_tag(x_26) == 0)
{
obj* x_174; 
x_174 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_174, 0, x_26);
x_28 = x_174;
goto block_36;
}
else
{
obj* x_175; 
lean::dec(x_26);
x_175 = lean::box(0);
x_28 = x_175;
goto block_36;
}
}
else
{
obj* x_176; obj* x_177; 
x_176 = lean::cnstr_get(x_173, 0);
lean::inc(x_176);
if (lean::is_exclusive(x_173)) {
 lean::cnstr_release(x_173, 0);
 x_177 = x_173;
} else {
 lean::dec_ref(x_173);
 x_177 = lean::box(0);
}
switch (lean::obj_tag(x_176)) {
case 0:
{
if (lean::obj_tag(x_26) == 0)
{
obj* x_178; 
lean::dec(x_177);
lean::dec(x_176);
x_178 = lean::box(0);
x_28 = x_178;
goto block_36;
}
else
{
obj* x_179; 
x_179 = lean::cnstr_get(x_26, 0);
lean::inc(x_179);
if (lean::obj_tag(x_179) == 0)
{
obj* x_180; obj* x_181; obj* x_182; obj* x_183; uint8 x_184; 
x_180 = lean::cnstr_get(x_176, 0);
lean::inc(x_180);
lean::dec(x_176);
x_181 = lean::cnstr_get(x_179, 0);
lean::inc(x_181);
lean::dec(x_179);
x_182 = lean::cnstr_get(x_180, 1);
lean::inc(x_182);
lean::dec(x_180);
x_183 = lean::cnstr_get(x_181, 1);
lean::inc(x_183);
lean::dec(x_181);
x_184 = l_Lean_Elaborator_matchPrecedence___main(x_182, x_183);
if (x_184 == 0)
{
obj* x_185; 
lean::dec(x_177);
lean::dec(x_26);
x_185 = lean::box(0);
x_28 = x_185;
goto block_36;
}
else
{
obj* x_186; 
if (lean::is_scalar(x_177)) {
 x_186 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_186 = x_177;
}
lean::cnstr_set(x_186, 0, x_26);
x_28 = x_186;
goto block_36;
}
}
else
{
obj* x_187; 
lean::dec(x_179);
lean::dec(x_177);
lean::dec(x_176);
lean::dec(x_26);
x_187 = lean::box(0);
x_28 = x_187;
goto block_36;
}
}
}
case 1:
{
if (lean::obj_tag(x_26) == 0)
{
obj* x_188; 
lean::dec(x_177);
lean::dec(x_176);
x_188 = lean::box(0);
x_28 = x_188;
goto block_36;
}
else
{
obj* x_189; 
x_189 = lean::cnstr_get(x_26, 0);
lean::inc(x_189);
switch (lean::obj_tag(x_189)) {
case 0:
{
obj* x_190; 
lean::dec(x_189);
lean::dec(x_177);
lean::dec(x_176);
lean::dec(x_26);
x_190 = lean::box(0);
x_28 = x_190;
goto block_36;
}
case 1:
{
obj* x_191; obj* x_192; obj* x_193; obj* x_194; uint8 x_195; 
x_191 = lean::cnstr_get(x_176, 0);
lean::inc(x_191);
lean::dec(x_176);
x_192 = lean::cnstr_get(x_189, 0);
lean::inc(x_192);
lean::dec(x_189);
x_193 = lean::cnstr_get(x_191, 1);
lean::inc(x_193);
lean::dec(x_191);
x_194 = lean::cnstr_get(x_192, 1);
lean::inc(x_194);
lean::dec(x_192);
x_195 = l_Lean_Elaborator_matchPrecedence___main(x_193, x_194);
if (x_195 == 0)
{
obj* x_196; 
lean::dec(x_177);
lean::dec(x_26);
x_196 = lean::box(0);
x_28 = x_196;
goto block_36;
}
else
{
obj* x_197; 
if (lean::is_scalar(x_177)) {
 x_197 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_197 = x_177;
}
lean::cnstr_set(x_197, 0, x_26);
x_28 = x_197;
goto block_36;
}
}
default: 
{
obj* x_198; 
lean::dec(x_189);
lean::dec(x_177);
lean::dec(x_176);
lean::dec(x_26);
x_198 = lean::box(0);
x_28 = x_198;
goto block_36;
}
}
}
}
default: 
{
obj* x_199; obj* x_200; obj* x_201; 
x_199 = lean::cnstr_get(x_176, 0);
lean::inc(x_199);
if (lean::is_exclusive(x_176)) {
 lean::cnstr_release(x_176, 0);
 x_200 = x_176;
} else {
 lean::dec_ref(x_176);
 x_200 = lean::box(0);
}
if (lean::obj_tag(x_26) == 0)
{
obj* x_212; 
lean::dec(x_200);
lean::dec(x_199);
lean::dec(x_177);
x_212 = lean::box(0);
x_28 = x_212;
goto block_36;
}
else
{
obj* x_213; obj* x_214; 
x_213 = lean::cnstr_get(x_26, 0);
lean::inc(x_213);
if (lean::is_exclusive(x_26)) {
 lean::cnstr_release(x_26, 0);
 x_214 = x_26;
} else {
 lean::dec_ref(x_26);
 x_214 = lean::box(0);
}
switch (lean::obj_tag(x_213)) {
case 0:
{
obj* x_215; 
lean::dec(x_214);
lean::dec(x_213);
lean::dec(x_200);
lean::dec(x_199);
lean::dec(x_177);
x_215 = lean::box(0);
x_28 = x_215;
goto block_36;
}
case 1:
{
obj* x_216; 
lean::dec(x_214);
lean::dec(x_213);
lean::dec(x_200);
lean::dec(x_199);
lean::dec(x_177);
x_216 = lean::box(0);
x_28 = x_216;
goto block_36;
}
default: 
{
obj* x_217; 
x_217 = lean::cnstr_get(x_199, 1);
lean::inc(x_217);
if (lean::obj_tag(x_217) == 0)
{
obj* x_218; obj* x_219; 
x_218 = lean::cnstr_get(x_213, 0);
lean::inc(x_218);
lean::dec(x_213);
x_219 = lean::cnstr_get(x_218, 1);
lean::inc(x_219);
lean::dec(x_218);
if (lean::obj_tag(x_219) == 0)
{
obj* x_220; 
lean::dec(x_214);
x_220 = lean::box(0);
x_201 = x_220;
goto block_211;
}
else
{
obj* x_221; obj* x_222; 
x_221 = lean::cnstr_get(x_219, 0);
lean::inc(x_221);
x_222 = lean::cnstr_get(x_221, 1);
lean::inc(x_222);
lean::dec(x_221);
if (lean::obj_tag(x_222) == 0)
{
obj* x_223; 
lean::dec(x_222);
if (lean::is_scalar(x_214)) {
 x_223 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_223 = x_214;
}
lean::cnstr_set(x_223, 0, x_219);
x_201 = x_223;
goto block_211;
}
else
{
obj* x_224; 
lean::dec(x_222);
lean::dec(x_219);
lean::dec(x_214);
x_224 = lean::box(0);
x_201 = x_224;
goto block_211;
}
}
}
else
{
obj* x_225; obj* x_226; 
lean::dec(x_214);
x_225 = lean::cnstr_get(x_217, 0);
lean::inc(x_225);
x_226 = lean::cnstr_get(x_225, 1);
lean::inc(x_226);
lean::dec(x_225);
if (lean::obj_tag(x_226) == 0)
{
obj* x_227; obj* x_228; 
x_227 = lean::cnstr_get(x_213, 0);
lean::inc(x_227);
lean::dec(x_213);
x_228 = lean::cnstr_get(x_227, 1);
lean::inc(x_228);
lean::dec(x_227);
if (lean::obj_tag(x_228) == 0)
{
obj* x_229; 
lean::dec(x_226);
lean::dec(x_217);
x_229 = lean::box(0);
x_201 = x_229;
goto block_211;
}
else
{
obj* x_230; obj* x_231; obj* x_232; 
x_230 = lean::cnstr_get(x_228, 0);
lean::inc(x_230);
if (lean::is_exclusive(x_228)) {
 lean::cnstr_release(x_228, 0);
 x_231 = x_228;
} else {
 lean::dec_ref(x_228);
 x_231 = lean::box(0);
}
x_232 = lean::cnstr_get(x_230, 1);
lean::inc(x_232);
lean::dec(x_230);
if (lean::obj_tag(x_232) == 0)
{
obj* x_233; obj* x_234; obj* x_235; obj* x_236; uint8 x_237; 
x_233 = lean::cnstr_get(x_226, 0);
lean::inc(x_233);
lean::dec(x_226);
x_234 = lean::cnstr_get(x_232, 0);
lean::inc(x_234);
lean::dec(x_232);
x_235 = l_Lean_Parser_command_NotationSpec_precedenceTerm_View_toNat___main(x_233);
x_236 = l_Lean_Parser_command_NotationSpec_precedenceTerm_View_toNat___main(x_234);
x_237 = lean::nat_dec_eq(x_235, x_236);
lean::dec(x_236);
lean::dec(x_235);
if (x_237 == 0)
{
obj* x_238; 
lean::dec(x_231);
lean::dec(x_217);
x_238 = lean::box(0);
x_201 = x_238;
goto block_211;
}
else
{
obj* x_239; 
if (lean::is_scalar(x_231)) {
 x_239 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_239 = x_231;
}
lean::cnstr_set(x_239, 0, x_217);
x_201 = x_239;
goto block_211;
}
}
else
{
obj* x_240; 
lean::dec(x_232);
lean::dec(x_231);
lean::dec(x_226);
lean::dec(x_217);
x_240 = lean::box(0);
x_201 = x_240;
goto block_211;
}
}
}
else
{
obj* x_241; 
lean::dec(x_226);
lean::dec(x_217);
lean::dec(x_213);
x_241 = lean::box(0);
x_201 = x_241;
goto block_211;
}
}
}
}
}
block_211:
{
if (lean::obj_tag(x_201) == 0)
{
obj* x_202; 
lean::dec(x_200);
lean::dec(x_199);
lean::dec(x_177);
x_202 = lean::box(0);
x_28 = x_202;
goto block_36;
}
else
{
obj* x_203; obj* x_204; obj* x_205; obj* x_206; obj* x_207; obj* x_208; obj* x_209; obj* x_210; 
x_203 = lean::cnstr_get(x_201, 0);
lean::inc(x_203);
if (lean::is_exclusive(x_201)) {
 lean::cnstr_release(x_201, 0);
 x_204 = x_201;
} else {
 lean::dec_ref(x_201);
 x_204 = lean::box(0);
}
x_205 = lean::cnstr_get(x_199, 0);
lean::inc(x_205);
if (lean::is_exclusive(x_199)) {
 lean::cnstr_release(x_199, 0);
 lean::cnstr_release(x_199, 1);
 x_206 = x_199;
} else {
 lean::dec_ref(x_199);
 x_206 = lean::box(0);
}
if (lean::is_scalar(x_206)) {
 x_207 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_207 = x_206;
}
lean::cnstr_set(x_207, 0, x_205);
lean::cnstr_set(x_207, 1, x_203);
if (lean::is_scalar(x_200)) {
 x_208 = lean::alloc_cnstr(2, 1, 0);
} else {
 x_208 = x_200;
}
lean::cnstr_set(x_208, 0, x_207);
if (lean::is_scalar(x_204)) {
 x_209 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_209 = x_204;
}
lean::cnstr_set(x_209, 0, x_208);
if (lean::is_scalar(x_177)) {
 x_210 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_210 = x_177;
}
lean::cnstr_set(x_210, 0, x_209);
x_28 = x_210;
goto block_36;
}
}
}
}
}
}
}
}
}
block_36:
{
if (lean::obj_tag(x_28) == 0)
{
obj* x_29; 
lean::dec(x_27);
lean::dec(x_25);
x_29 = lean::box(0);
x_6 = x_29;
goto block_17;
}
else
{
uint8 x_30; 
x_30 = !lean::is_exclusive(x_28);
if (x_30 == 0)
{
obj* x_31; obj* x_32; 
x_31 = lean::cnstr_get(x_28, 0);
if (lean::is_scalar(x_27)) {
 x_32 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_32 = x_27;
}
lean::cnstr_set(x_32, 0, x_25);
lean::cnstr_set(x_32, 1, x_31);
lean::cnstr_set(x_28, 0, x_32);
x_6 = x_28;
goto block_17;
}
else
{
obj* x_33; obj* x_34; obj* x_35; 
x_33 = lean::cnstr_get(x_28, 0);
lean::inc(x_33);
lean::dec(x_28);
if (lean::is_scalar(x_27)) {
 x_34 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_34 = x_27;
}
lean::cnstr_set(x_34, 0, x_25);
lean::cnstr_set(x_34, 1, x_33);
x_35 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_35, 0, x_34);
x_6 = x_35;
goto block_17;
}
}
}
}
block_17:
{
if (lean::obj_tag(x_6) == 0)
{
obj* x_7; 
lean::dec(x_5);
lean::dec(x_4);
x_7 = lean::box(0);
return x_7;
}
else
{
obj* x_8; obj* x_9; 
x_8 = lean::cnstr_get(x_6, 0);
lean::inc(x_8);
lean::dec(x_6);
x_9 = l_List_mmap___main___at_Lean_Elaborator_matchSpec___spec__1(x_4);
if (lean::obj_tag(x_9) == 0)
{
obj* x_10; 
lean::dec(x_8);
lean::dec(x_5);
x_10 = lean::box(0);
return x_10;
}
else
{
uint8 x_11; 
x_11 = !lean::is_exclusive(x_9);
if (x_11 == 0)
{
obj* x_12; obj* x_13; 
x_12 = lean::cnstr_get(x_9, 0);
if (lean::is_scalar(x_5)) {
 x_13 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_13 = x_5;
}
lean::cnstr_set(x_13, 0, x_8);
lean::cnstr_set(x_13, 1, x_12);
lean::cnstr_set(x_9, 0, x_13);
return x_9;
}
else
{
obj* x_14; obj* x_15; obj* x_16; 
x_14 = lean::cnstr_get(x_9, 0);
lean::inc(x_14);
lean::dec(x_9);
if (lean::is_scalar(x_5)) {
 x_15 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_15 = x_5;
}
lean::cnstr_set(x_15, 0, x_8);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_16, 0, x_15);
return x_16;
}
}
}
}
}
}
}
obj* l_Lean_Elaborator_matchSpec(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
x_4 = lean::cnstr_get(x_1, 1);
lean::inc(x_4);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_release(x_1, 0);
 lean::cnstr_release(x_1, 1);
 x_5 = x_1;
} else {
 lean::dec_ref(x_1);
 x_5 = lean::box(0);
}
if (lean::obj_tag(x_3) == 0)
{
obj* x_19; 
x_19 = lean::cnstr_get(x_2, 0);
lean::inc(x_19);
if (lean::obj_tag(x_19) == 0)
{
obj* x_20; 
x_20 = lean::box(0);
x_6 = x_20;
goto block_18;
}
else
{
obj* x_21; 
lean::dec(x_19);
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_2);
x_21 = lean::box(0);
return x_21;
}
}
else
{
obj* x_22; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
x_23 = lean::box(0);
return x_23;
}
else
{
obj* x_24; 
lean::dec(x_22);
x_24 = lean::box(0);
x_6 = x_24;
goto block_18;
}
}
block_18:
{
obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
lean::dec(x_6);
x_7 = lean::cnstr_get(x_2, 1);
lean::inc(x_7);
lean::dec(x_2);
x_8 = l_List_zip___rarg___closed__1;
x_9 = l_List_zipWith___main___rarg(x_8, x_4, x_7);
x_10 = l_List_mmap___main___at_Lean_Elaborator_matchSpec___spec__1(x_9);
if (lean::obj_tag(x_10) == 0)
{
obj* x_11; 
lean::dec(x_5);
lean::dec(x_3);
x_11 = lean::box(0);
return x_11;
}
else
{
uint8 x_12; 
x_12 = !lean::is_exclusive(x_10);
if (x_12 == 0)
{
obj* x_13; obj* x_14; 
x_13 = lean::cnstr_get(x_10, 0);
if (lean::is_scalar(x_5)) {
 x_14 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_14 = x_5;
}
lean::cnstr_set(x_14, 0, x_3);
lean::cnstr_set(x_14, 1, x_13);
lean::cnstr_set(x_10, 0, x_14);
return x_10;
}
else
{
obj* x_15; obj* x_16; obj* x_17; 
x_15 = lean::cnstr_get(x_10, 0);
lean::inc(x_15);
lean::dec(x_10);
if (lean::is_scalar(x_5)) {
 x_16 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_16 = x_5;
}
lean::cnstr_set(x_16, 0, x_3);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_17, 0, x_16);
return x_17;
}
}
}
}
}
obj* l_List_filterMap___main___at_Lean_Elaborator_notation_elaborateAux___spec__1(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = lean::box(0);
return x_3;
}
else
{
uint8 x_4; 
x_4 = !lean::is_exclusive(x_2);
if (x_4 == 0)
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_5 = lean::cnstr_get(x_2, 0);
x_6 = lean::cnstr_get(x_2, 1);
x_7 = lean::cnstr_get(x_1, 2);
lean::inc(x_7);
x_8 = lean::cnstr_get(x_5, 2);
lean::inc(x_8);
lean::dec(x_5);
x_9 = l_Lean_Elaborator_matchSpec(x_7, x_8);
if (lean::obj_tag(x_9) == 0)
{
lean::free_heap_obj(x_2);
x_2 = x_6;
goto _start;
}
else
{
obj* x_11; obj* x_12; 
x_11 = lean::cnstr_get(x_9, 0);
lean::inc(x_11);
lean::dec(x_9);
x_12 = l_List_filterMap___main___at_Lean_Elaborator_notation_elaborateAux___spec__1(x_1, x_6);
lean::cnstr_set(x_2, 1, x_12);
lean::cnstr_set(x_2, 0, x_11);
return x_2;
}
}
else
{
obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_13 = lean::cnstr_get(x_2, 0);
x_14 = lean::cnstr_get(x_2, 1);
lean::inc(x_14);
lean::inc(x_13);
lean::dec(x_2);
x_15 = lean::cnstr_get(x_1, 2);
lean::inc(x_15);
x_16 = lean::cnstr_get(x_13, 2);
lean::inc(x_16);
lean::dec(x_13);
x_17 = l_Lean_Elaborator_matchSpec(x_15, x_16);
if (lean::obj_tag(x_17) == 0)
{
x_2 = x_14;
goto _start;
}
else
{
obj* x_19; obj* x_20; obj* x_21; 
x_19 = lean::cnstr_get(x_17, 0);
lean::inc(x_19);
lean::dec(x_17);
x_20 = l_List_filterMap___main___at_Lean_Elaborator_notation_elaborateAux___spec__1(x_1, x_14);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
}
}
}
}
obj* _init_l_Lean_Elaborator_notation_elaborateAux___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("invalid notation, matches multiple reserved notations");
return x_1;
}
}
obj* l_Lean_Elaborator_notation_elaborateAux(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; 
x_5 = lean::cnstr_get(x_4, 0);
lean::inc(x_5);
lean::inc(x_1);
x_6 = l_List_filterMap___main___at_Lean_Elaborator_notation_elaborateAux___spec__1(x_1, x_5);
if (lean::obj_tag(x_6) == 0)
{
uint8 x_7; 
x_7 = !lean::is_exclusive(x_1);
if (x_7 == 0)
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_8 = lean::cnstr_get(x_1, 2);
x_9 = l_Lean_Elaborator_postprocessNotationSpec(x_8);
lean::cnstr_set(x_1, 2, x_9);
x_10 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_10, 0, x_1);
lean::cnstr_set(x_10, 1, x_4);
x_11 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_11, 0, x_10);
return x_11;
}
else
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
x_12 = lean::cnstr_get(x_1, 0);
x_13 = lean::cnstr_get(x_1, 1);
x_14 = lean::cnstr_get(x_1, 2);
x_15 = lean::cnstr_get(x_1, 3);
x_16 = lean::cnstr_get(x_1, 4);
lean::inc(x_16);
lean::inc(x_15);
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::dec(x_1);
x_17 = l_Lean_Elaborator_postprocessNotationSpec(x_14);
x_18 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_18, 0, x_12);
lean::cnstr_set(x_18, 1, x_13);
lean::cnstr_set(x_18, 2, x_17);
lean::cnstr_set(x_18, 3, x_15);
lean::cnstr_set(x_18, 4, x_16);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_4);
x_20 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
else
{
obj* x_21; 
x_21 = lean::cnstr_get(x_6, 1);
lean::inc(x_21);
if (lean::obj_tag(x_21) == 0)
{
obj* x_22; uint8 x_23; 
x_22 = lean::cnstr_get(x_6, 0);
lean::inc(x_22);
lean::dec(x_6);
x_23 = !lean::is_exclusive(x_1);
if (x_23 == 0)
{
obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_24 = lean::cnstr_get(x_1, 2);
lean::dec(x_24);
x_25 = l_Lean_Elaborator_postprocessNotationSpec(x_22);
lean::cnstr_set(x_1, 2, x_25);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_1);
lean::cnstr_set(x_26, 1, x_4);
x_27 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_27, 0, x_26);
return x_27;
}
else
{
obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; 
x_28 = lean::cnstr_get(x_1, 0);
x_29 = lean::cnstr_get(x_1, 1);
x_30 = lean::cnstr_get(x_1, 3);
x_31 = lean::cnstr_get(x_1, 4);
lean::inc(x_31);
lean::inc(x_30);
lean::inc(x_29);
lean::inc(x_28);
lean::dec(x_1);
x_32 = l_Lean_Elaborator_postprocessNotationSpec(x_22);
x_33 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_33, 0, x_28);
lean::cnstr_set(x_33, 1, x_29);
lean::cnstr_set(x_33, 2, x_32);
lean::cnstr_set(x_33, 3, x_30);
lean::cnstr_set(x_33, 4, x_31);
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_4);
x_35 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_35, 0, x_34);
return x_35;
}
}
else
{
obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; 
lean::dec(x_21);
lean::dec(x_6);
x_36 = l_Lean_Parser_command_notation_HasView;
x_37 = lean::cnstr_get(x_36, 1);
lean::inc(x_37);
x_38 = lean::apply_1(x_37, x_1);
x_39 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_39, 0, x_38);
x_40 = l_Lean_Elaborator_notation_elaborateAux___closed__1;
x_41 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_39, x_40, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_39);
if (lean::obj_tag(x_41) == 0)
{
uint8 x_42; 
x_42 = !lean::is_exclusive(x_41);
if (x_42 == 0)
{
return x_41;
}
else
{
obj* x_43; obj* x_44; 
x_43 = lean::cnstr_get(x_41, 0);
lean::inc(x_43);
lean::dec(x_41);
x_44 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_44, 0, x_43);
return x_44;
}
}
else
{
uint8 x_45; 
x_45 = !lean::is_exclusive(x_41);
if (x_45 == 0)
{
obj* x_46; uint8 x_47; 
x_46 = lean::cnstr_get(x_41, 0);
x_47 = !lean::is_exclusive(x_46);
if (x_47 == 0)
{
obj* x_48; uint8 x_49; 
x_48 = lean::cnstr_get(x_46, 0);
x_49 = !lean::is_exclusive(x_48);
if (x_49 == 0)
{
obj* x_50; obj* x_51; 
x_50 = lean::cnstr_get(x_48, 2);
x_51 = l_Lean_Elaborator_postprocessNotationSpec(x_50);
lean::cnstr_set(x_48, 2, x_51);
return x_41;
}
else
{
obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; 
x_52 = lean::cnstr_get(x_48, 0);
x_53 = lean::cnstr_get(x_48, 1);
x_54 = lean::cnstr_get(x_48, 2);
x_55 = lean::cnstr_get(x_48, 3);
x_56 = lean::cnstr_get(x_48, 4);
lean::inc(x_56);
lean::inc(x_55);
lean::inc(x_54);
lean::inc(x_53);
lean::inc(x_52);
lean::dec(x_48);
x_57 = l_Lean_Elaborator_postprocessNotationSpec(x_54);
x_58 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_58, 0, x_52);
lean::cnstr_set(x_58, 1, x_53);
lean::cnstr_set(x_58, 2, x_57);
lean::cnstr_set(x_58, 3, x_55);
lean::cnstr_set(x_58, 4, x_56);
lean::cnstr_set(x_46, 0, x_58);
return x_41;
}
}
else
{
obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; 
x_59 = lean::cnstr_get(x_46, 0);
x_60 = lean::cnstr_get(x_46, 1);
lean::inc(x_60);
lean::inc(x_59);
lean::dec(x_46);
x_61 = lean::cnstr_get(x_59, 0);
lean::inc(x_61);
x_62 = lean::cnstr_get(x_59, 1);
lean::inc(x_62);
x_63 = lean::cnstr_get(x_59, 2);
lean::inc(x_63);
x_64 = lean::cnstr_get(x_59, 3);
lean::inc(x_64);
x_65 = lean::cnstr_get(x_59, 4);
lean::inc(x_65);
if (lean::is_exclusive(x_59)) {
 lean::cnstr_release(x_59, 0);
 lean::cnstr_release(x_59, 1);
 lean::cnstr_release(x_59, 2);
 lean::cnstr_release(x_59, 3);
 lean::cnstr_release(x_59, 4);
 x_66 = x_59;
} else {
 lean::dec_ref(x_59);
 x_66 = lean::box(0);
}
x_67 = l_Lean_Elaborator_postprocessNotationSpec(x_63);
if (lean::is_scalar(x_66)) {
 x_68 = lean::alloc_cnstr(0, 5, 0);
} else {
 x_68 = x_66;
}
lean::cnstr_set(x_68, 0, x_61);
lean::cnstr_set(x_68, 1, x_62);
lean::cnstr_set(x_68, 2, x_67);
lean::cnstr_set(x_68, 3, x_64);
lean::cnstr_set(x_68, 4, x_65);
x_69 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_69, 0, x_68);
lean::cnstr_set(x_69, 1, x_60);
lean::cnstr_set(x_41, 0, x_69);
return x_41;
}
}
else
{
obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; 
x_70 = lean::cnstr_get(x_41, 0);
lean::inc(x_70);
lean::dec(x_41);
x_71 = lean::cnstr_get(x_70, 0);
lean::inc(x_71);
x_72 = lean::cnstr_get(x_70, 1);
lean::inc(x_72);
if (lean::is_exclusive(x_70)) {
 lean::cnstr_release(x_70, 0);
 lean::cnstr_release(x_70, 1);
 x_73 = x_70;
} else {
 lean::dec_ref(x_70);
 x_73 = lean::box(0);
}
x_74 = lean::cnstr_get(x_71, 0);
lean::inc(x_74);
x_75 = lean::cnstr_get(x_71, 1);
lean::inc(x_75);
x_76 = lean::cnstr_get(x_71, 2);
lean::inc(x_76);
x_77 = lean::cnstr_get(x_71, 3);
lean::inc(x_77);
x_78 = lean::cnstr_get(x_71, 4);
lean::inc(x_78);
if (lean::is_exclusive(x_71)) {
 lean::cnstr_release(x_71, 0);
 lean::cnstr_release(x_71, 1);
 lean::cnstr_release(x_71, 2);
 lean::cnstr_release(x_71, 3);
 lean::cnstr_release(x_71, 4);
 x_79 = x_71;
} else {
 lean::dec_ref(x_71);
 x_79 = lean::box(0);
}
x_80 = l_Lean_Elaborator_postprocessNotationSpec(x_76);
if (lean::is_scalar(x_79)) {
 x_81 = lean::alloc_cnstr(0, 5, 0);
} else {
 x_81 = x_79;
}
lean::cnstr_set(x_81, 0, x_74);
lean::cnstr_set(x_81, 1, x_75);
lean::cnstr_set(x_81, 2, x_80);
lean::cnstr_set(x_81, 3, x_77);
lean::cnstr_set(x_81, 4, x_78);
if (lean::is_scalar(x_73)) {
 x_82 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_82 = x_73;
}
lean::cnstr_set(x_82, 0, x_81);
lean::cnstr_set(x_82, 1, x_72);
x_83 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_83, 0, x_82);
return x_83;
}
}
}
}
}
}
obj* l_Lean_Elaborator_notation_elaborateAux___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_notation_elaborateAux(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* _init_l_Lean_Elaborator_mkNotationKind___rarg___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("_notation");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* l_Lean_Elaborator_mkNotationKind___rarg(obj* x_1) {
_start:
{
uint8 x_2; 
x_2 = !lean::is_exclusive(x_1);
if (x_2 == 0)
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_3 = lean::cnstr_get(x_1, 2);
x_4 = lean::mk_nat_obj(1u);
x_5 = lean::nat_add(x_3, x_4);
lean::cnstr_set(x_1, 2, x_5);
x_6 = l_Lean_Elaborator_mkNotationKind___rarg___closed__1;
x_7 = lean_name_mk_numeral(x_6, x_3);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_1);
x_9 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_9, 0, x_8);
return x_9;
}
else
{
obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_10 = lean::cnstr_get(x_1, 0);
x_11 = lean::cnstr_get(x_1, 1);
x_12 = lean::cnstr_get(x_1, 2);
x_13 = lean::cnstr_get(x_1, 3);
x_14 = lean::cnstr_get(x_1, 4);
x_15 = lean::cnstr_get(x_1, 5);
x_16 = lean::cnstr_get(x_1, 6);
x_17 = lean::cnstr_get(x_1, 7);
x_18 = lean::cnstr_get(x_1, 8);
x_19 = lean::cnstr_get(x_1, 9);
x_20 = lean::cnstr_get(x_1, 10);
lean::inc(x_20);
lean::inc(x_19);
lean::inc(x_18);
lean::inc(x_17);
lean::inc(x_16);
lean::inc(x_15);
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::dec(x_1);
x_21 = lean::mk_nat_obj(1u);
x_22 = lean::nat_add(x_12, x_21);
x_23 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_23, 0, x_10);
lean::cnstr_set(x_23, 1, x_11);
lean::cnstr_set(x_23, 2, x_22);
lean::cnstr_set(x_23, 3, x_13);
lean::cnstr_set(x_23, 4, x_14);
lean::cnstr_set(x_23, 5, x_15);
lean::cnstr_set(x_23, 6, x_16);
lean::cnstr_set(x_23, 7, x_17);
lean::cnstr_set(x_23, 8, x_18);
lean::cnstr_set(x_23, 9, x_19);
lean::cnstr_set(x_23, 10, x_20);
x_24 = l_Lean_Elaborator_mkNotationKind___rarg___closed__1;
x_25 = lean_name_mk_numeral(x_24, x_12);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_23);
x_27 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_27, 0, x_26);
return x_27;
}
}
}
obj* l_Lean_Elaborator_mkNotationKind(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_mkNotationKind___rarg), 1, 0);
return x_3;
}
}
obj* l_Lean_Elaborator_mkNotationKind___boxed(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = l_Lean_Elaborator_mkNotationKind(x_1, x_2);
lean::dec(x_2);
lean::dec(x_1);
return x_3;
}
}
obj* l_Lean_Elaborator_registerNotationMacro(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_mkNotationKind___rarg(x_4);
if (lean::obj_tag(x_5) == 0)
{
uint8 x_6; 
lean::dec(x_1);
x_6 = !lean::is_exclusive(x_5);
if (x_6 == 0)
{
return x_5;
}
else
{
obj* x_7; obj* x_8; 
x_7 = lean::cnstr_get(x_5, 0);
lean::inc(x_7);
lean::dec(x_5);
x_8 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
}
else
{
uint8 x_9; 
x_9 = !lean::is_exclusive(x_5);
if (x_9 == 0)
{
obj* x_10; uint8 x_11; 
x_10 = lean::cnstr_get(x_5, 0);
x_11 = !lean::is_exclusive(x_10);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; uint8 x_16; 
x_12 = lean::cnstr_get(x_10, 0);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_12);
x_14 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_1);
lean::inc(x_14);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Expander_mkNotationTransformer___boxed), 3, 1);
lean::closure_set(x_15, 0, x_14);
x_16 = !lean::is_exclusive(x_13);
if (x_16 == 0)
{
obj* x_17; uint8 x_18; 
x_17 = lean::cnstr_get(x_13, 7);
x_18 = !lean::is_exclusive(x_17);
if (x_18 == 0)
{
obj* x_19; obj* x_20; 
x_19 = lean::cnstr_get(x_17, 1);
x_20 = l_RBNode_insert___at_Lean_Expander_builtinTransformers___spec__1(x_19, x_12, x_15);
lean::cnstr_set(x_17, 1, x_20);
lean::cnstr_set(x_10, 0, x_14);
return x_5;
}
else
{
obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_21 = lean::cnstr_get(x_17, 0);
x_22 = lean::cnstr_get(x_17, 1);
lean::inc(x_22);
lean::inc(x_21);
lean::dec(x_17);
x_23 = l_RBNode_insert___at_Lean_Expander_builtinTransformers___spec__1(x_22, x_12, x_15);
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_21);
lean::cnstr_set(x_24, 1, x_23);
lean::cnstr_set(x_13, 7, x_24);
lean::cnstr_set(x_10, 0, x_14);
return x_5;
}
}
else
{
obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; 
x_25 = lean::cnstr_get(x_13, 7);
x_26 = lean::cnstr_get(x_13, 0);
x_27 = lean::cnstr_get(x_13, 1);
x_28 = lean::cnstr_get(x_13, 2);
x_29 = lean::cnstr_get(x_13, 3);
x_30 = lean::cnstr_get(x_13, 4);
x_31 = lean::cnstr_get(x_13, 5);
x_32 = lean::cnstr_get(x_13, 6);
x_33 = lean::cnstr_get(x_13, 8);
x_34 = lean::cnstr_get(x_13, 9);
x_35 = lean::cnstr_get(x_13, 10);
lean::inc(x_35);
lean::inc(x_34);
lean::inc(x_33);
lean::inc(x_25);
lean::inc(x_32);
lean::inc(x_31);
lean::inc(x_30);
lean::inc(x_29);
lean::inc(x_28);
lean::inc(x_27);
lean::inc(x_26);
lean::dec(x_13);
x_36 = lean::cnstr_get(x_25, 0);
lean::inc(x_36);
x_37 = lean::cnstr_get(x_25, 1);
lean::inc(x_37);
if (lean::is_exclusive(x_25)) {
 lean::cnstr_release(x_25, 0);
 lean::cnstr_release(x_25, 1);
 x_38 = x_25;
} else {
 lean::dec_ref(x_25);
 x_38 = lean::box(0);
}
x_39 = l_RBNode_insert___at_Lean_Expander_builtinTransformers___spec__1(x_37, x_12, x_15);
if (lean::is_scalar(x_38)) {
 x_40 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_40 = x_38;
}
lean::cnstr_set(x_40, 0, x_36);
lean::cnstr_set(x_40, 1, x_39);
x_41 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_41, 0, x_26);
lean::cnstr_set(x_41, 1, x_27);
lean::cnstr_set(x_41, 2, x_28);
lean::cnstr_set(x_41, 3, x_29);
lean::cnstr_set(x_41, 4, x_30);
lean::cnstr_set(x_41, 5, x_31);
lean::cnstr_set(x_41, 6, x_32);
lean::cnstr_set(x_41, 7, x_40);
lean::cnstr_set(x_41, 8, x_33);
lean::cnstr_set(x_41, 9, x_34);
lean::cnstr_set(x_41, 10, x_35);
lean::cnstr_set(x_10, 1, x_41);
lean::cnstr_set(x_10, 0, x_14);
return x_5;
}
}
else
{
obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; 
x_42 = lean::cnstr_get(x_10, 0);
x_43 = lean::cnstr_get(x_10, 1);
lean::inc(x_43);
lean::inc(x_42);
lean::dec(x_10);
lean::inc(x_42);
x_44 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_44, 0, x_42);
lean::cnstr_set(x_44, 1, x_1);
lean::inc(x_44);
x_45 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Expander_mkNotationTransformer___boxed), 3, 1);
lean::closure_set(x_45, 0, x_44);
x_46 = lean::cnstr_get(x_43, 7);
lean::inc(x_46);
x_47 = lean::cnstr_get(x_43, 0);
lean::inc(x_47);
x_48 = lean::cnstr_get(x_43, 1);
lean::inc(x_48);
x_49 = lean::cnstr_get(x_43, 2);
lean::inc(x_49);
x_50 = lean::cnstr_get(x_43, 3);
lean::inc(x_50);
x_51 = lean::cnstr_get(x_43, 4);
lean::inc(x_51);
x_52 = lean::cnstr_get(x_43, 5);
lean::inc(x_52);
x_53 = lean::cnstr_get(x_43, 6);
lean::inc(x_53);
x_54 = lean::cnstr_get(x_43, 8);
lean::inc(x_54);
x_55 = lean::cnstr_get(x_43, 9);
lean::inc(x_55);
x_56 = lean::cnstr_get(x_43, 10);
lean::inc(x_56);
if (lean::is_exclusive(x_43)) {
 lean::cnstr_release(x_43, 0);
 lean::cnstr_release(x_43, 1);
 lean::cnstr_release(x_43, 2);
 lean::cnstr_release(x_43, 3);
 lean::cnstr_release(x_43, 4);
 lean::cnstr_release(x_43, 5);
 lean::cnstr_release(x_43, 6);
 lean::cnstr_release(x_43, 7);
 lean::cnstr_release(x_43, 8);
 lean::cnstr_release(x_43, 9);
 lean::cnstr_release(x_43, 10);
 x_57 = x_43;
} else {
 lean::dec_ref(x_43);
 x_57 = lean::box(0);
}
x_58 = lean::cnstr_get(x_46, 0);
lean::inc(x_58);
x_59 = lean::cnstr_get(x_46, 1);
lean::inc(x_59);
if (lean::is_exclusive(x_46)) {
 lean::cnstr_release(x_46, 0);
 lean::cnstr_release(x_46, 1);
 x_60 = x_46;
} else {
 lean::dec_ref(x_46);
 x_60 = lean::box(0);
}
x_61 = l_RBNode_insert___at_Lean_Expander_builtinTransformers___spec__1(x_59, x_42, x_45);
if (lean::is_scalar(x_60)) {
 x_62 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_62 = x_60;
}
lean::cnstr_set(x_62, 0, x_58);
lean::cnstr_set(x_62, 1, x_61);
if (lean::is_scalar(x_57)) {
 x_63 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_63 = x_57;
}
lean::cnstr_set(x_63, 0, x_47);
lean::cnstr_set(x_63, 1, x_48);
lean::cnstr_set(x_63, 2, x_49);
lean::cnstr_set(x_63, 3, x_50);
lean::cnstr_set(x_63, 4, x_51);
lean::cnstr_set(x_63, 5, x_52);
lean::cnstr_set(x_63, 6, x_53);
lean::cnstr_set(x_63, 7, x_62);
lean::cnstr_set(x_63, 8, x_54);
lean::cnstr_set(x_63, 9, x_55);
lean::cnstr_set(x_63, 10, x_56);
x_64 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_64, 0, x_44);
lean::cnstr_set(x_64, 1, x_63);
lean::cnstr_set(x_5, 0, x_64);
return x_5;
}
}
else
{
obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; 
x_65 = lean::cnstr_get(x_5, 0);
lean::inc(x_65);
lean::dec(x_5);
x_66 = lean::cnstr_get(x_65, 0);
lean::inc(x_66);
x_67 = lean::cnstr_get(x_65, 1);
lean::inc(x_67);
if (lean::is_exclusive(x_65)) {
 lean::cnstr_release(x_65, 0);
 lean::cnstr_release(x_65, 1);
 x_68 = x_65;
} else {
 lean::dec_ref(x_65);
 x_68 = lean::box(0);
}
lean::inc(x_66);
x_69 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_69, 0, x_66);
lean::cnstr_set(x_69, 1, x_1);
lean::inc(x_69);
x_70 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Expander_mkNotationTransformer___boxed), 3, 1);
lean::closure_set(x_70, 0, x_69);
x_71 = lean::cnstr_get(x_67, 7);
lean::inc(x_71);
x_72 = lean::cnstr_get(x_67, 0);
lean::inc(x_72);
x_73 = lean::cnstr_get(x_67, 1);
lean::inc(x_73);
x_74 = lean::cnstr_get(x_67, 2);
lean::inc(x_74);
x_75 = lean::cnstr_get(x_67, 3);
lean::inc(x_75);
x_76 = lean::cnstr_get(x_67, 4);
lean::inc(x_76);
x_77 = lean::cnstr_get(x_67, 5);
lean::inc(x_77);
x_78 = lean::cnstr_get(x_67, 6);
lean::inc(x_78);
x_79 = lean::cnstr_get(x_67, 8);
lean::inc(x_79);
x_80 = lean::cnstr_get(x_67, 9);
lean::inc(x_80);
x_81 = lean::cnstr_get(x_67, 10);
lean::inc(x_81);
if (lean::is_exclusive(x_67)) {
 lean::cnstr_release(x_67, 0);
 lean::cnstr_release(x_67, 1);
 lean::cnstr_release(x_67, 2);
 lean::cnstr_release(x_67, 3);
 lean::cnstr_release(x_67, 4);
 lean::cnstr_release(x_67, 5);
 lean::cnstr_release(x_67, 6);
 lean::cnstr_release(x_67, 7);
 lean::cnstr_release(x_67, 8);
 lean::cnstr_release(x_67, 9);
 lean::cnstr_release(x_67, 10);
 x_82 = x_67;
} else {
 lean::dec_ref(x_67);
 x_82 = lean::box(0);
}
x_83 = lean::cnstr_get(x_71, 0);
lean::inc(x_83);
x_84 = lean::cnstr_get(x_71, 1);
lean::inc(x_84);
if (lean::is_exclusive(x_71)) {
 lean::cnstr_release(x_71, 0);
 lean::cnstr_release(x_71, 1);
 x_85 = x_71;
} else {
 lean::dec_ref(x_71);
 x_85 = lean::box(0);
}
x_86 = l_RBNode_insert___at_Lean_Expander_builtinTransformers___spec__1(x_84, x_66, x_70);
if (lean::is_scalar(x_85)) {
 x_87 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_87 = x_85;
}
lean::cnstr_set(x_87, 0, x_83);
lean::cnstr_set(x_87, 1, x_86);
if (lean::is_scalar(x_82)) {
 x_88 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_88 = x_82;
}
lean::cnstr_set(x_88, 0, x_72);
lean::cnstr_set(x_88, 1, x_73);
lean::cnstr_set(x_88, 2, x_74);
lean::cnstr_set(x_88, 3, x_75);
lean::cnstr_set(x_88, 4, x_76);
lean::cnstr_set(x_88, 5, x_77);
lean::cnstr_set(x_88, 6, x_78);
lean::cnstr_set(x_88, 7, x_87);
lean::cnstr_set(x_88, 8, x_79);
lean::cnstr_set(x_88, 9, x_80);
lean::cnstr_set(x_88, 10, x_81);
if (lean::is_scalar(x_68)) {
 x_89 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_89 = x_68;
}
lean::cnstr_set(x_89, 0, x_69);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_90, 0, x_89);
return x_90;
}
}
}
}
obj* l_Lean_Elaborator_registerNotationMacro___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_registerNotationMacro(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
uint8 l_List_foldr___main___at_Lean_Elaborator_notation_elaborate___spec__1(uint8 x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
return x_1;
}
else
{
obj* x_3; obj* x_4; uint8 x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_2, 0);
x_4 = lean::cnstr_get(x_2, 1);
x_5 = l_List_foldr___main___at_Lean_Elaborator_notation_elaborate___spec__1(x_1, x_4);
x_6 = lean::cnstr_get(x_3, 1);
if (lean::obj_tag(x_6) == 0)
{
return x_5;
}
else
{
obj* x_7; 
x_7 = lean::cnstr_get(x_6, 0);
switch (lean::obj_tag(x_7)) {
case 0:
{
return x_5;
}
case 1:
{
return x_5;
}
default: 
{
obj* x_8; obj* x_9; 
x_8 = lean::cnstr_get(x_7, 0);
x_9 = lean::cnstr_get(x_8, 1);
if (lean::obj_tag(x_9) == 0)
{
return x_5;
}
else
{
obj* x_10; obj* x_11; 
x_10 = lean::cnstr_get(x_9, 0);
x_11 = lean::cnstr_get(x_10, 1);
if (lean::obj_tag(x_11) == 3)
{
uint8 x_12; 
x_12 = 1;
return x_12;
}
else
{
return x_5;
}
}
}
}
}
}
}
}
obj* l_Lean_Elaborator_notation_elaborate___lambda__1(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; 
x_3 = !lean::is_exclusive(x_2);
if (x_3 == 0)
{
obj* x_4; obj* x_5; 
x_4 = lean::cnstr_get(x_2, 2);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_1);
lean::cnstr_set(x_5, 1, x_4);
lean::cnstr_set(x_2, 2, x_5);
return x_2;
}
else
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_6 = lean::cnstr_get(x_2, 0);
x_7 = lean::cnstr_get(x_2, 1);
x_8 = lean::cnstr_get(x_2, 2);
x_9 = lean::cnstr_get(x_2, 3);
x_10 = lean::cnstr_get(x_2, 4);
x_11 = lean::cnstr_get(x_2, 5);
x_12 = lean::cnstr_get(x_2, 6);
x_13 = lean::cnstr_get(x_2, 7);
x_14 = lean::cnstr_get(x_2, 8);
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
lean::inc(x_8);
lean::inc(x_7);
lean::inc(x_6);
lean::dec(x_2);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_1);
lean::cnstr_set(x_15, 1, x_8);
x_16 = lean::alloc_cnstr(0, 9, 0);
lean::cnstr_set(x_16, 0, x_6);
lean::cnstr_set(x_16, 1, x_7);
lean::cnstr_set(x_16, 2, x_15);
lean::cnstr_set(x_16, 3, x_9);
lean::cnstr_set(x_16, 4, x_10);
lean::cnstr_set(x_16, 5, x_11);
lean::cnstr_set(x_16, 6, x_12);
lean::cnstr_set(x_16, 7, x_13);
lean::cnstr_set(x_16, 8, x_14);
return x_16;
}
}
}
obj* _init_l_Lean_Elaborator_notation_elaborate___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::mk_nat_obj(1u);
x_2 = lean::mk_nat_obj(0u);
x_3 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_3, 0, x_1);
lean::cnstr_set(x_3, 1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_notation_elaborate___closed__2() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("ignoring notation using 'fold' action");
return x_1;
}
}
obj* l_Lean_Elaborator_notation_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; uint8 x_10; uint8 x_11; 
x_5 = l_Lean_Parser_command_notation_HasView;
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
x_7 = lean::apply_1(x_6, x_1);
x_8 = lean::cnstr_get(x_7, 2);
lean::inc(x_8);
x_9 = lean::cnstr_get(x_8, 1);
lean::inc(x_9);
lean::dec(x_8);
x_10 = 0;
x_11 = l_List_foldr___main___at_Lean_Elaborator_notation_elaborate___spec__1(x_10, x_9);
lean::dec(x_9);
if (x_11 == 0)
{
obj* x_12; 
x_12 = l_Lean_Elaborator_notation_elaborateAux(x_7, x_2, x_3, x_4);
if (lean::obj_tag(x_12) == 0)
{
uint8 x_13; 
lean::dec(x_3);
x_13 = !lean::is_exclusive(x_12);
if (x_13 == 0)
{
return x_12;
}
else
{
obj* x_14; obj* x_15; 
x_14 = lean::cnstr_get(x_12, 0);
lean::inc(x_14);
lean::dec(x_12);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_14);
return x_15;
}
}
else
{
obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_16 = lean::cnstr_get(x_12, 0);
lean::inc(x_16);
lean::dec(x_12);
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_18 = lean::cnstr_get(x_16, 1);
lean::inc(x_18);
lean::dec(x_16);
lean::inc(x_17);
x_19 = l_Lean_Elaborator_registerNotationMacro(x_17, x_2, x_3, x_18);
if (lean::obj_tag(x_19) == 0)
{
uint8 x_20; 
lean::dec(x_17);
lean::dec(x_3);
x_20 = !lean::is_exclusive(x_19);
if (x_20 == 0)
{
return x_19;
}
else
{
obj* x_21; obj* x_22; 
x_21 = lean::cnstr_get(x_19, 0);
lean::inc(x_21);
lean::dec(x_19);
x_22 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_22, 0, x_21);
return x_22;
}
}
else
{
obj* x_23; obj* x_24; 
x_23 = lean::cnstr_get(x_19, 0);
lean::inc(x_23);
lean::dec(x_19);
x_24 = lean::cnstr_get(x_17, 0);
lean::inc(x_24);
lean::dec(x_17);
if (lean::obj_tag(x_24) == 0)
{
obj* x_25; obj* x_26; uint8 x_27; 
x_25 = lean::cnstr_get(x_23, 1);
lean::inc(x_25);
x_26 = lean::cnstr_get(x_23, 0);
lean::inc(x_26);
lean::dec(x_23);
x_27 = !lean::is_exclusive(x_25);
if (x_27 == 0)
{
obj* x_28; obj* x_29; obj* x_30; 
x_28 = lean::cnstr_get(x_25, 1);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_26);
lean::cnstr_set(x_29, 1, x_28);
lean::cnstr_set(x_25, 1, x_29);
x_30 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_25);
return x_30;
}
else
{
obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
x_31 = lean::cnstr_get(x_25, 0);
x_32 = lean::cnstr_get(x_25, 1);
x_33 = lean::cnstr_get(x_25, 2);
x_34 = lean::cnstr_get(x_25, 3);
x_35 = lean::cnstr_get(x_25, 4);
x_36 = lean::cnstr_get(x_25, 5);
x_37 = lean::cnstr_get(x_25, 6);
x_38 = lean::cnstr_get(x_25, 7);
x_39 = lean::cnstr_get(x_25, 8);
x_40 = lean::cnstr_get(x_25, 9);
x_41 = lean::cnstr_get(x_25, 10);
lean::inc(x_41);
lean::inc(x_40);
lean::inc(x_39);
lean::inc(x_38);
lean::inc(x_37);
lean::inc(x_36);
lean::inc(x_35);
lean::inc(x_34);
lean::inc(x_33);
lean::inc(x_32);
lean::inc(x_31);
lean::dec(x_25);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_26);
lean::cnstr_set(x_42, 1, x_32);
x_43 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_43, 0, x_31);
lean::cnstr_set(x_43, 1, x_42);
lean::cnstr_set(x_43, 2, x_33);
lean::cnstr_set(x_43, 3, x_34);
lean::cnstr_set(x_43, 4, x_35);
lean::cnstr_set(x_43, 5, x_36);
lean::cnstr_set(x_43, 6, x_37);
lean::cnstr_set(x_43, 7, x_38);
lean::cnstr_set(x_43, 8, x_39);
lean::cnstr_set(x_43, 9, x_40);
lean::cnstr_set(x_43, 10, x_41);
x_44 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_43);
return x_44;
}
}
else
{
obj* x_45; obj* x_46; obj* x_47; obj* x_48; 
lean::dec(x_24);
x_45 = lean::cnstr_get(x_23, 0);
lean::inc(x_45);
x_46 = lean::cnstr_get(x_23, 1);
lean::inc(x_46);
lean::dec(x_23);
x_47 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_notation_elaborate___lambda__1), 2, 1);
lean::closure_set(x_47, 0, x_45);
x_48 = l_Lean_Elaborator_modifyCurrentScope(x_47, x_2, x_3, x_46);
if (lean::obj_tag(x_48) == 0)
{
uint8 x_49; 
lean::dec(x_3);
x_49 = !lean::is_exclusive(x_48);
if (x_49 == 0)
{
return x_48;
}
else
{
obj* x_50; obj* x_51; 
x_50 = lean::cnstr_get(x_48, 0);
lean::inc(x_50);
lean::dec(x_48);
x_51 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_51, 0, x_50);
return x_51;
}
}
else
{
obj* x_52; obj* x_53; obj* x_54; 
x_52 = lean::cnstr_get(x_48, 0);
lean::inc(x_52);
lean::dec(x_48);
x_53 = lean::cnstr_get(x_52, 1);
lean::inc(x_53);
lean::dec(x_52);
x_54 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_53);
return x_54;
}
}
}
}
}
else
{
obj* x_55; uint8 x_56; 
lean::dec(x_7);
x_55 = lean::cnstr_get(x_3, 0);
lean::inc(x_55);
lean::dec(x_3);
x_56 = !lean::is_exclusive(x_4);
if (x_56 == 0)
{
obj* x_57; obj* x_58; obj* x_59; obj* x_60; uint8 x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; 
x_57 = lean::cnstr_get(x_4, 5);
x_58 = lean::cnstr_get(x_55, 0);
lean::inc(x_58);
lean::dec(x_55);
x_59 = lean::box(0);
x_60 = l_Lean_Elaborator_notation_elaborate___closed__1;
x_61 = 1;
x_62 = l_String_splitAux___main___closed__1;
x_63 = l_Lean_Elaborator_notation_elaborate___closed__2;
x_64 = lean::alloc_cnstr(0, 5, 1);
lean::cnstr_set(x_64, 0, x_58);
lean::cnstr_set(x_64, 1, x_60);
lean::cnstr_set(x_64, 2, x_59);
lean::cnstr_set(x_64, 3, x_62);
lean::cnstr_set(x_64, 4, x_63);
lean::cnstr_set_scalar(x_64, sizeof(void*)*5, x_61);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_57);
lean::cnstr_set(x_4, 5, x_65);
x_66 = lean::box(0);
x_67 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_67, 0, x_66);
lean::cnstr_set(x_67, 1, x_4);
x_68 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_68, 0, x_67);
return x_68;
}
else
{
obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; uint8 x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; 
x_69 = lean::cnstr_get(x_4, 0);
x_70 = lean::cnstr_get(x_4, 1);
x_71 = lean::cnstr_get(x_4, 2);
x_72 = lean::cnstr_get(x_4, 3);
x_73 = lean::cnstr_get(x_4, 4);
x_74 = lean::cnstr_get(x_4, 5);
x_75 = lean::cnstr_get(x_4, 6);
x_76 = lean::cnstr_get(x_4, 7);
x_77 = lean::cnstr_get(x_4, 8);
x_78 = lean::cnstr_get(x_4, 9);
x_79 = lean::cnstr_get(x_4, 10);
lean::inc(x_79);
lean::inc(x_78);
lean::inc(x_77);
lean::inc(x_76);
lean::inc(x_75);
lean::inc(x_74);
lean::inc(x_73);
lean::inc(x_72);
lean::inc(x_71);
lean::inc(x_70);
lean::inc(x_69);
lean::dec(x_4);
x_80 = lean::cnstr_get(x_55, 0);
lean::inc(x_80);
lean::dec(x_55);
x_81 = lean::box(0);
x_82 = l_Lean_Elaborator_notation_elaborate___closed__1;
x_83 = 1;
x_84 = l_String_splitAux___main___closed__1;
x_85 = l_Lean_Elaborator_notation_elaborate___closed__2;
x_86 = lean::alloc_cnstr(0, 5, 1);
lean::cnstr_set(x_86, 0, x_80);
lean::cnstr_set(x_86, 1, x_82);
lean::cnstr_set(x_86, 2, x_81);
lean::cnstr_set(x_86, 3, x_84);
lean::cnstr_set(x_86, 4, x_85);
lean::cnstr_set_scalar(x_86, sizeof(void*)*5, x_83);
x_87 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_87, 0, x_86);
lean::cnstr_set(x_87, 1, x_74);
x_88 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_88, 0, x_69);
lean::cnstr_set(x_88, 1, x_70);
lean::cnstr_set(x_88, 2, x_71);
lean::cnstr_set(x_88, 3, x_72);
lean::cnstr_set(x_88, 4, x_73);
lean::cnstr_set(x_88, 5, x_87);
lean::cnstr_set(x_88, 6, x_75);
lean::cnstr_set(x_88, 7, x_76);
lean::cnstr_set(x_88, 8, x_77);
lean::cnstr_set(x_88, 9, x_78);
lean::cnstr_set(x_88, 10, x_79);
x_89 = lean::box(0);
x_90 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_90, 0, x_89);
lean::cnstr_set(x_90, 1, x_88);
x_91 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_91, 0, x_90);
return x_91;
}
}
}
}
obj* l_List_foldr___main___at_Lean_Elaborator_notation_elaborate___spec__1___boxed(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; uint8 x_4; obj* x_5; 
x_3 = lean::unbox(x_1);
lean::dec(x_1);
x_4 = l_List_foldr___main___at_Lean_Elaborator_notation_elaborate___spec__1(x_3, x_2);
lean::dec(x_2);
x_5 = lean::box(x_4);
return x_5;
}
}
obj* l_Lean_Elaborator_notation_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_notation_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_universe_elaborate___lambda__1(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; 
x_3 = !lean::is_exclusive(x_2);
if (x_3 == 0)
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_4 = lean::cnstr_get(x_2, 3);
lean::inc(x_1);
x_5 = level_mk_param(x_1);
x_6 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
x_7 = l_Lean_Elaborator_OrderedRBMap_insert___rarg(x_6, x_4, x_1, x_5);
lean::cnstr_set(x_2, 3, x_7);
return x_2;
}
else
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
x_8 = lean::cnstr_get(x_2, 0);
x_9 = lean::cnstr_get(x_2, 1);
x_10 = lean::cnstr_get(x_2, 2);
x_11 = lean::cnstr_get(x_2, 3);
x_12 = lean::cnstr_get(x_2, 4);
x_13 = lean::cnstr_get(x_2, 5);
x_14 = lean::cnstr_get(x_2, 6);
x_15 = lean::cnstr_get(x_2, 7);
x_16 = lean::cnstr_get(x_2, 8);
lean::inc(x_16);
lean::inc(x_15);
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
lean::inc(x_8);
lean::dec(x_2);
lean::inc(x_1);
x_17 = level_mk_param(x_1);
x_18 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
x_19 = l_Lean_Elaborator_OrderedRBMap_insert___rarg(x_18, x_11, x_1, x_17);
x_20 = lean::alloc_cnstr(0, 9, 0);
lean::cnstr_set(x_20, 0, x_8);
lean::cnstr_set(x_20, 1, x_9);
lean::cnstr_set(x_20, 2, x_10);
lean::cnstr_set(x_20, 3, x_19);
lean::cnstr_set(x_20, 4, x_12);
lean::cnstr_set(x_20, 5, x_13);
lean::cnstr_set(x_20, 6, x_14);
lean::cnstr_set(x_20, 7, x_15);
lean::cnstr_set(x_20, 8, x_16);
return x_20;
}
}
}
obj* _init_l_Lean_Elaborator_universe_elaborate___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("a universe named '");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_universe_elaborate___closed__2() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("' has already been declared in this Scope");
return x_1;
}
}
obj* l_Lean_Elaborator_universe_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_5 = l_Lean_Parser_command_universe_HasView;
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
lean::inc(x_1);
x_7 = lean::apply_1(x_6, x_1);
x_8 = lean::cnstr_get(x_7, 1);
lean::inc(x_8);
lean::dec(x_7);
x_9 = l_Lean_Elaborator_mangleIdent(x_8);
x_10 = l_Lean_Elaborator_currentScope(x_2, x_3, x_4);
if (lean::obj_tag(x_10) == 0)
{
uint8 x_11; 
lean::dec(x_9);
lean::dec(x_1);
x_11 = !lean::is_exclusive(x_10);
if (x_11 == 0)
{
return x_10;
}
else
{
obj* x_12; obj* x_13; 
x_12 = lean::cnstr_get(x_10, 0);
lean::inc(x_12);
lean::dec(x_10);
x_13 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
}
else
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_14 = lean::cnstr_get(x_10, 0);
lean::inc(x_14);
lean::dec(x_10);
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
x_16 = lean::cnstr_get(x_14, 1);
lean::inc(x_16);
lean::dec(x_14);
x_17 = lean::cnstr_get(x_15, 3);
lean::inc(x_17);
lean::dec(x_15);
x_18 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
lean::inc(x_9);
x_19 = l_Lean_Elaborator_OrderedRBMap_find___rarg(x_18, x_17, x_9);
if (lean::obj_tag(x_19) == 0)
{
obj* x_20; obj* x_21; 
lean::dec(x_1);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_universe_elaborate___lambda__1), 2, 1);
lean::closure_set(x_20, 0, x_9);
x_21 = l_Lean_Elaborator_modifyCurrentScope(x_20, x_2, x_3, x_16);
return x_21;
}
else
{
uint8 x_22; 
x_22 = !lean::is_exclusive(x_19);
if (x_22 == 0)
{
obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; 
x_23 = lean::cnstr_get(x_19, 0);
lean::dec(x_23);
lean::cnstr_set(x_19, 0, x_1);
x_24 = l_Lean_Name_toString___closed__1;
x_25 = l_Lean_Name_toStringWithSep___main(x_24, x_9);
x_26 = l_Lean_Elaborator_universe_elaborate___closed__1;
x_27 = lean::string_append(x_26, x_25);
lean::dec(x_25);
x_28 = l_Lean_Elaborator_universe_elaborate___closed__2;
x_29 = lean::string_append(x_27, x_28);
x_30 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_19, x_29, x_2, x_3, x_16);
lean::dec(x_16);
lean::dec(x_19);
return x_30;
}
else
{
obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; 
lean::dec(x_19);
x_31 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_31, 0, x_1);
x_32 = l_Lean_Name_toString___closed__1;
x_33 = l_Lean_Name_toStringWithSep___main(x_32, x_9);
x_34 = l_Lean_Elaborator_universe_elaborate___closed__1;
x_35 = lean::string_append(x_34, x_33);
lean::dec(x_33);
x_36 = l_Lean_Elaborator_universe_elaborate___closed__2;
x_37 = lean::string_append(x_35, x_36);
x_38 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_31, x_37, x_2, x_3, x_16);
lean::dec(x_16);
lean::dec(x_31);
return x_38;
}
}
}
}
}
obj* l_Lean_Elaborator_universe_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_universe_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* _init_l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("unknown identifier '");
return x_1;
}
}
obj* _init_l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___closed__2() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("invalid 'attribute' command, identifier is ambiguous");
return x_1;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
obj* x_8; obj* x_9; 
x_8 = lean::cnstr_get(x_1, 0);
lean::inc(x_8);
x_9 = lean::cnstr_get(x_8, 3);
lean::inc(x_9);
if (lean::obj_tag(x_9) == 0)
{
uint8 x_10; 
x_10 = !lean::is_exclusive(x_1);
if (x_10 == 0)
{
obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_11 = lean::cnstr_get(x_1, 1);
x_12 = lean::cnstr_get(x_1, 0);
lean::dec(x_12);
lean::inc(x_8);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_8);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
x_15 = lean::cnstr_get(x_8, 2);
lean::inc(x_15);
lean::dec(x_8);
x_16 = l_Lean_Name_toString___closed__1;
x_17 = l_Lean_Name_toStringWithSep___main(x_16, x_15);
x_18 = l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___closed__1;
x_19 = lean::string_append(x_18, x_17);
lean::dec(x_17);
x_20 = l_Char_HasRepr___closed__1;
x_21 = lean::string_append(x_19, x_20);
x_22 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_14, x_21, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_14);
if (lean::obj_tag(x_22) == 0)
{
uint8 x_23; 
lean::free_heap_obj(x_1);
lean::dec(x_11);
x_23 = !lean::is_exclusive(x_22);
if (x_23 == 0)
{
return x_22;
}
else
{
obj* x_24; obj* x_25; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_25 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_25, 0, x_24);
return x_25;
}
}
else
{
obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_26 = lean::cnstr_get(x_22, 0);
lean::inc(x_26);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_26, 0);
lean::inc(x_27);
x_28 = lean::cnstr_get(x_26, 1);
lean::inc(x_28);
lean::dec(x_26);
x_29 = l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1(x_11, x_2, x_3, x_28);
if (lean::obj_tag(x_29) == 0)
{
uint8 x_30; 
lean::dec(x_27);
lean::free_heap_obj(x_1);
x_30 = !lean::is_exclusive(x_29);
if (x_30 == 0)
{
return x_29;
}
else
{
obj* x_31; obj* x_32; 
x_31 = lean::cnstr_get(x_29, 0);
lean::inc(x_31);
lean::dec(x_29);
x_32 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_32, 0, x_31);
return x_32;
}
}
else
{
uint8 x_33; 
x_33 = !lean::is_exclusive(x_29);
if (x_33 == 0)
{
obj* x_34; uint8 x_35; 
x_34 = lean::cnstr_get(x_29, 0);
x_35 = !lean::is_exclusive(x_34);
if (x_35 == 0)
{
obj* x_36; 
x_36 = lean::cnstr_get(x_34, 0);
lean::cnstr_set(x_1, 1, x_36);
lean::cnstr_set(x_1, 0, x_27);
lean::cnstr_set(x_34, 0, x_1);
return x_29;
}
else
{
obj* x_37; obj* x_38; obj* x_39; 
x_37 = lean::cnstr_get(x_34, 0);
x_38 = lean::cnstr_get(x_34, 1);
lean::inc(x_38);
lean::inc(x_37);
lean::dec(x_34);
lean::cnstr_set(x_1, 1, x_37);
lean::cnstr_set(x_1, 0, x_27);
x_39 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_39, 0, x_1);
lean::cnstr_set(x_39, 1, x_38);
lean::cnstr_set(x_29, 0, x_39);
return x_29;
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; 
x_40 = lean::cnstr_get(x_29, 0);
lean::inc(x_40);
lean::dec(x_29);
x_41 = lean::cnstr_get(x_40, 0);
lean::inc(x_41);
x_42 = lean::cnstr_get(x_40, 1);
lean::inc(x_42);
if (lean::is_exclusive(x_40)) {
 lean::cnstr_release(x_40, 0);
 lean::cnstr_release(x_40, 1);
 x_43 = x_40;
} else {
 lean::dec_ref(x_40);
 x_43 = lean::box(0);
}
lean::cnstr_set(x_1, 1, x_41);
lean::cnstr_set(x_1, 0, x_27);
if (lean::is_scalar(x_43)) {
 x_44 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_44 = x_43;
}
lean::cnstr_set(x_44, 0, x_1);
lean::cnstr_set(x_44, 1, x_42);
x_45 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_45, 0, x_44);
return x_45;
}
}
}
}
else
{
obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; 
x_46 = lean::cnstr_get(x_1, 1);
lean::inc(x_46);
lean::dec(x_1);
lean::inc(x_8);
x_47 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_47, 0, x_8);
x_48 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_48, 0, x_47);
x_49 = lean::cnstr_get(x_8, 2);
lean::inc(x_49);
lean::dec(x_8);
x_50 = l_Lean_Name_toString___closed__1;
x_51 = l_Lean_Name_toStringWithSep___main(x_50, x_49);
x_52 = l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___closed__1;
x_53 = lean::string_append(x_52, x_51);
lean::dec(x_51);
x_54 = l_Char_HasRepr___closed__1;
x_55 = lean::string_append(x_53, x_54);
x_56 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_48, x_55, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_48);
if (lean::obj_tag(x_56) == 0)
{
obj* x_57; obj* x_58; obj* x_59; 
lean::dec(x_46);
x_57 = lean::cnstr_get(x_56, 0);
lean::inc(x_57);
if (lean::is_exclusive(x_56)) {
 lean::cnstr_release(x_56, 0);
 x_58 = x_56;
} else {
 lean::dec_ref(x_56);
 x_58 = lean::box(0);
}
if (lean::is_scalar(x_58)) {
 x_59 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_59 = x_58;
}
lean::cnstr_set(x_59, 0, x_57);
return x_59;
}
else
{
obj* x_60; obj* x_61; obj* x_62; obj* x_63; 
x_60 = lean::cnstr_get(x_56, 0);
lean::inc(x_60);
lean::dec(x_56);
x_61 = lean::cnstr_get(x_60, 0);
lean::inc(x_61);
x_62 = lean::cnstr_get(x_60, 1);
lean::inc(x_62);
lean::dec(x_60);
x_63 = l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1(x_46, x_2, x_3, x_62);
if (lean::obj_tag(x_63) == 0)
{
obj* x_64; obj* x_65; obj* x_66; 
lean::dec(x_61);
x_64 = lean::cnstr_get(x_63, 0);
lean::inc(x_64);
if (lean::is_exclusive(x_63)) {
 lean::cnstr_release(x_63, 0);
 x_65 = x_63;
} else {
 lean::dec_ref(x_63);
 x_65 = lean::box(0);
}
if (lean::is_scalar(x_65)) {
 x_66 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_66 = x_65;
}
lean::cnstr_set(x_66, 0, x_64);
return x_66;
}
else
{
obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; 
x_67 = lean::cnstr_get(x_63, 0);
lean::inc(x_67);
if (lean::is_exclusive(x_63)) {
 lean::cnstr_release(x_63, 0);
 x_68 = x_63;
} else {
 lean::dec_ref(x_63);
 x_68 = lean::box(0);
}
x_69 = lean::cnstr_get(x_67, 0);
lean::inc(x_69);
x_70 = lean::cnstr_get(x_67, 1);
lean::inc(x_70);
if (lean::is_exclusive(x_67)) {
 lean::cnstr_release(x_67, 0);
 lean::cnstr_release(x_67, 1);
 x_71 = x_67;
} else {
 lean::dec_ref(x_67);
 x_71 = lean::box(0);
}
x_72 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_72, 0, x_61);
lean::cnstr_set(x_72, 1, x_69);
if (lean::is_scalar(x_71)) {
 x_73 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_73 = x_71;
}
lean::cnstr_set(x_73, 0, x_72);
lean::cnstr_set(x_73, 1, x_70);
if (lean::is_scalar(x_68)) {
 x_74 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_74 = x_68;
}
lean::cnstr_set(x_74, 0, x_73);
return x_74;
}
}
}
}
else
{
obj* x_75; 
x_75 = lean::cnstr_get(x_9, 1);
lean::inc(x_75);
if (lean::obj_tag(x_75) == 0)
{
obj* x_76; uint8 x_77; 
lean::dec(x_8);
x_76 = lean::cnstr_get(x_1, 1);
lean::inc(x_76);
lean::dec(x_1);
x_77 = !lean::is_exclusive(x_9);
if (x_77 == 0)
{
obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; 
x_78 = lean::cnstr_get(x_9, 0);
x_79 = lean::cnstr_get(x_9, 1);
lean::dec(x_79);
x_80 = lean::box(0);
x_81 = lean_expr_mk_const(x_78, x_80);
x_82 = l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1(x_76, x_2, x_3, x_4);
if (lean::obj_tag(x_82) == 0)
{
uint8 x_83; 
lean::dec(x_81);
lean::free_heap_obj(x_9);
x_83 = !lean::is_exclusive(x_82);
if (x_83 == 0)
{
return x_82;
}
else
{
obj* x_84; obj* x_85; 
x_84 = lean::cnstr_get(x_82, 0);
lean::inc(x_84);
lean::dec(x_82);
x_85 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_85, 0, x_84);
return x_85;
}
}
else
{
uint8 x_86; 
x_86 = !lean::is_exclusive(x_82);
if (x_86 == 0)
{
obj* x_87; uint8 x_88; 
x_87 = lean::cnstr_get(x_82, 0);
x_88 = !lean::is_exclusive(x_87);
if (x_88 == 0)
{
obj* x_89; 
x_89 = lean::cnstr_get(x_87, 0);
lean::cnstr_set(x_9, 1, x_89);
lean::cnstr_set(x_9, 0, x_81);
lean::cnstr_set(x_87, 0, x_9);
return x_82;
}
else
{
obj* x_90; obj* x_91; obj* x_92; 
x_90 = lean::cnstr_get(x_87, 0);
x_91 = lean::cnstr_get(x_87, 1);
lean::inc(x_91);
lean::inc(x_90);
lean::dec(x_87);
lean::cnstr_set(x_9, 1, x_90);
lean::cnstr_set(x_9, 0, x_81);
x_92 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_92, 0, x_9);
lean::cnstr_set(x_92, 1, x_91);
lean::cnstr_set(x_82, 0, x_92);
return x_82;
}
}
else
{
obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; 
x_93 = lean::cnstr_get(x_82, 0);
lean::inc(x_93);
lean::dec(x_82);
x_94 = lean::cnstr_get(x_93, 0);
lean::inc(x_94);
x_95 = lean::cnstr_get(x_93, 1);
lean::inc(x_95);
if (lean::is_exclusive(x_93)) {
 lean::cnstr_release(x_93, 0);
 lean::cnstr_release(x_93, 1);
 x_96 = x_93;
} else {
 lean::dec_ref(x_93);
 x_96 = lean::box(0);
}
lean::cnstr_set(x_9, 1, x_94);
lean::cnstr_set(x_9, 0, x_81);
if (lean::is_scalar(x_96)) {
 x_97 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_97 = x_96;
}
lean::cnstr_set(x_97, 0, x_9);
lean::cnstr_set(x_97, 1, x_95);
x_98 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_98, 0, x_97);
return x_98;
}
}
}
else
{
obj* x_99; obj* x_100; obj* x_101; obj* x_102; 
x_99 = lean::cnstr_get(x_9, 0);
lean::inc(x_99);
lean::dec(x_9);
x_100 = lean::box(0);
x_101 = lean_expr_mk_const(x_99, x_100);
x_102 = l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1(x_76, x_2, x_3, x_4);
if (lean::obj_tag(x_102) == 0)
{
obj* x_103; obj* x_104; obj* x_105; 
lean::dec(x_101);
x_103 = lean::cnstr_get(x_102, 0);
lean::inc(x_103);
if (lean::is_exclusive(x_102)) {
 lean::cnstr_release(x_102, 0);
 x_104 = x_102;
} else {
 lean::dec_ref(x_102);
 x_104 = lean::box(0);
}
if (lean::is_scalar(x_104)) {
 x_105 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_105 = x_104;
}
lean::cnstr_set(x_105, 0, x_103);
return x_105;
}
else
{
obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; 
x_106 = lean::cnstr_get(x_102, 0);
lean::inc(x_106);
if (lean::is_exclusive(x_102)) {
 lean::cnstr_release(x_102, 0);
 x_107 = x_102;
} else {
 lean::dec_ref(x_102);
 x_107 = lean::box(0);
}
x_108 = lean::cnstr_get(x_106, 0);
lean::inc(x_108);
x_109 = lean::cnstr_get(x_106, 1);
lean::inc(x_109);
if (lean::is_exclusive(x_106)) {
 lean::cnstr_release(x_106, 0);
 lean::cnstr_release(x_106, 1);
 x_110 = x_106;
} else {
 lean::dec_ref(x_106);
 x_110 = lean::box(0);
}
x_111 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_111, 0, x_101);
lean::cnstr_set(x_111, 1, x_108);
if (lean::is_scalar(x_110)) {
 x_112 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_112 = x_110;
}
lean::cnstr_set(x_112, 0, x_111);
lean::cnstr_set(x_112, 1, x_109);
if (lean::is_scalar(x_107)) {
 x_113 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_113 = x_107;
}
lean::cnstr_set(x_113, 0, x_112);
return x_113;
}
}
}
else
{
uint8 x_114; 
lean::dec(x_9);
x_114 = !lean::is_exclusive(x_75);
if (x_114 == 0)
{
obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; 
x_115 = lean::cnstr_get(x_75, 1);
lean::dec(x_115);
x_116 = lean::cnstr_get(x_75, 0);
lean::dec(x_116);
x_117 = lean::cnstr_get(x_1, 1);
lean::inc(x_117);
lean::dec(x_1);
x_118 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_118, 0, x_8);
x_119 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_119, 0, x_118);
x_120 = l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___closed__2;
x_121 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_119, x_120, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_119);
if (lean::obj_tag(x_121) == 0)
{
uint8 x_122; 
lean::dec(x_117);
lean::free_heap_obj(x_75);
x_122 = !lean::is_exclusive(x_121);
if (x_122 == 0)
{
return x_121;
}
else
{
obj* x_123; obj* x_124; 
x_123 = lean::cnstr_get(x_121, 0);
lean::inc(x_123);
lean::dec(x_121);
x_124 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_124, 0, x_123);
return x_124;
}
}
else
{
obj* x_125; obj* x_126; obj* x_127; obj* x_128; 
x_125 = lean::cnstr_get(x_121, 0);
lean::inc(x_125);
lean::dec(x_121);
x_126 = lean::cnstr_get(x_125, 0);
lean::inc(x_126);
x_127 = lean::cnstr_get(x_125, 1);
lean::inc(x_127);
lean::dec(x_125);
x_128 = l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1(x_117, x_2, x_3, x_127);
if (lean::obj_tag(x_128) == 0)
{
uint8 x_129; 
lean::dec(x_126);
lean::free_heap_obj(x_75);
x_129 = !lean::is_exclusive(x_128);
if (x_129 == 0)
{
return x_128;
}
else
{
obj* x_130; obj* x_131; 
x_130 = lean::cnstr_get(x_128, 0);
lean::inc(x_130);
lean::dec(x_128);
x_131 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_131, 0, x_130);
return x_131;
}
}
else
{
uint8 x_132; 
x_132 = !lean::is_exclusive(x_128);
if (x_132 == 0)
{
obj* x_133; uint8 x_134; 
x_133 = lean::cnstr_get(x_128, 0);
x_134 = !lean::is_exclusive(x_133);
if (x_134 == 0)
{
obj* x_135; 
x_135 = lean::cnstr_get(x_133, 0);
lean::cnstr_set(x_75, 1, x_135);
lean::cnstr_set(x_75, 0, x_126);
lean::cnstr_set(x_133, 0, x_75);
return x_128;
}
else
{
obj* x_136; obj* x_137; obj* x_138; 
x_136 = lean::cnstr_get(x_133, 0);
x_137 = lean::cnstr_get(x_133, 1);
lean::inc(x_137);
lean::inc(x_136);
lean::dec(x_133);
lean::cnstr_set(x_75, 1, x_136);
lean::cnstr_set(x_75, 0, x_126);
x_138 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_138, 0, x_75);
lean::cnstr_set(x_138, 1, x_137);
lean::cnstr_set(x_128, 0, x_138);
return x_128;
}
}
else
{
obj* x_139; obj* x_140; obj* x_141; obj* x_142; obj* x_143; obj* x_144; 
x_139 = lean::cnstr_get(x_128, 0);
lean::inc(x_139);
lean::dec(x_128);
x_140 = lean::cnstr_get(x_139, 0);
lean::inc(x_140);
x_141 = lean::cnstr_get(x_139, 1);
lean::inc(x_141);
if (lean::is_exclusive(x_139)) {
 lean::cnstr_release(x_139, 0);
 lean::cnstr_release(x_139, 1);
 x_142 = x_139;
} else {
 lean::dec_ref(x_139);
 x_142 = lean::box(0);
}
lean::cnstr_set(x_75, 1, x_140);
lean::cnstr_set(x_75, 0, x_126);
if (lean::is_scalar(x_142)) {
 x_143 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_143 = x_142;
}
lean::cnstr_set(x_143, 0, x_75);
lean::cnstr_set(x_143, 1, x_141);
x_144 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_144, 0, x_143);
return x_144;
}
}
}
}
else
{
obj* x_145; obj* x_146; obj* x_147; obj* x_148; obj* x_149; 
lean::dec(x_75);
x_145 = lean::cnstr_get(x_1, 1);
lean::inc(x_145);
lean::dec(x_1);
x_146 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_146, 0, x_8);
x_147 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_147, 0, x_146);
x_148 = l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___closed__2;
x_149 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_147, x_148, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_147);
if (lean::obj_tag(x_149) == 0)
{
obj* x_150; obj* x_151; obj* x_152; 
lean::dec(x_145);
x_150 = lean::cnstr_get(x_149, 0);
lean::inc(x_150);
if (lean::is_exclusive(x_149)) {
 lean::cnstr_release(x_149, 0);
 x_151 = x_149;
} else {
 lean::dec_ref(x_149);
 x_151 = lean::box(0);
}
if (lean::is_scalar(x_151)) {
 x_152 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_152 = x_151;
}
lean::cnstr_set(x_152, 0, x_150);
return x_152;
}
else
{
obj* x_153; obj* x_154; obj* x_155; obj* x_156; 
x_153 = lean::cnstr_get(x_149, 0);
lean::inc(x_153);
lean::dec(x_149);
x_154 = lean::cnstr_get(x_153, 0);
lean::inc(x_154);
x_155 = lean::cnstr_get(x_153, 1);
lean::inc(x_155);
lean::dec(x_153);
x_156 = l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1(x_145, x_2, x_3, x_155);
if (lean::obj_tag(x_156) == 0)
{
obj* x_157; obj* x_158; obj* x_159; 
lean::dec(x_154);
x_157 = lean::cnstr_get(x_156, 0);
lean::inc(x_157);
if (lean::is_exclusive(x_156)) {
 lean::cnstr_release(x_156, 0);
 x_158 = x_156;
} else {
 lean::dec_ref(x_156);
 x_158 = lean::box(0);
}
if (lean::is_scalar(x_158)) {
 x_159 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_159 = x_158;
}
lean::cnstr_set(x_159, 0, x_157);
return x_159;
}
else
{
obj* x_160; obj* x_161; obj* x_162; obj* x_163; obj* x_164; obj* x_165; obj* x_166; obj* x_167; 
x_160 = lean::cnstr_get(x_156, 0);
lean::inc(x_160);
if (lean::is_exclusive(x_156)) {
 lean::cnstr_release(x_156, 0);
 x_161 = x_156;
} else {
 lean::dec_ref(x_156);
 x_161 = lean::box(0);
}
x_162 = lean::cnstr_get(x_160, 0);
lean::inc(x_162);
x_163 = lean::cnstr_get(x_160, 1);
lean::inc(x_163);
if (lean::is_exclusive(x_160)) {
 lean::cnstr_release(x_160, 0);
 lean::cnstr_release(x_160, 1);
 x_164 = x_160;
} else {
 lean::dec_ref(x_160);
 x_164 = lean::box(0);
}
x_165 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_165, 0, x_154);
lean::cnstr_set(x_165, 1, x_162);
if (lean::is_scalar(x_164)) {
 x_166 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_166 = x_164;
}
lean::cnstr_set(x_166, 0, x_165);
lean::cnstr_set(x_166, 1, x_163);
if (lean::is_scalar(x_161)) {
 x_167 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_167 = x_161;
}
lean::cnstr_set(x_167, 0, x_166);
return x_167;
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Elaborator_attribute_elaborate___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_1 = lean::box(0);
x_2 = lean::mk_string("command");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("attribute");
x_5 = lean_name_mk_string(x_1, x_4);
x_6 = lean::box(0);
x_7 = l_Lean_KVMap_setName(x_6, x_3, x_5);
return x_7;
}
}
obj* _init_l_Lean_Elaborator_attribute_elaborate___closed__2() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("local");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* l_Lean_Elaborator_attribute_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; uint8 x_11; 
x_5 = l_Lean_Parser_command_attribute_HasView;
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
lean::inc(x_1);
x_7 = lean::apply_1(x_6, x_1);
x_8 = lean::cnstr_get(x_7, 0);
lean::inc(x_8);
x_9 = lean::cnstr_get(x_7, 3);
lean::inc(x_9);
x_10 = l_Lean_Elaborator_attrsToPexpr(x_9, x_2, x_3, x_4);
if (lean::obj_tag(x_8) == 0)
{
uint8 x_35; 
x_35 = 0;
x_11 = x_35;
goto block_34;
}
else
{
uint8 x_36; 
lean::dec(x_8);
x_36 = 1;
x_11 = x_36;
goto block_34;
}
block_34:
{
if (lean::obj_tag(x_10) == 0)
{
uint8 x_12; 
lean::dec(x_7);
lean::dec(x_1);
x_12 = !lean::is_exclusive(x_10);
if (x_12 == 0)
{
return x_10;
}
else
{
obj* x_13; obj* x_14; 
x_13 = lean::cnstr_get(x_10, 0);
lean::inc(x_13);
lean::dec(x_10);
x_14 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
}
else
{
obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_15 = lean::cnstr_get(x_10, 0);
lean::inc(x_15);
lean::dec(x_10);
x_16 = l_Lean_Elaborator_attribute_elaborate___closed__1;
x_17 = l_Lean_Elaborator_attribute_elaborate___closed__2;
x_18 = l_Lean_KVMap_setBool(x_16, x_17, x_11);
x_19 = lean::cnstr_get(x_15, 0);
lean::inc(x_19);
x_20 = lean::cnstr_get(x_15, 1);
lean::inc(x_20);
lean::dec(x_15);
x_21 = lean::cnstr_get(x_7, 5);
lean::inc(x_21);
lean::dec(x_7);
x_22 = l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1(x_21, x_2, x_3, x_20);
if (lean::obj_tag(x_22) == 0)
{
uint8 x_23; 
lean::dec(x_19);
lean::dec(x_18);
lean::dec(x_1);
x_23 = !lean::is_exclusive(x_22);
if (x_23 == 0)
{
return x_22;
}
else
{
obj* x_24; obj* x_25; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_25 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_25, 0, x_24);
return x_25;
}
}
else
{
obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_26 = lean::cnstr_get(x_22, 0);
lean::inc(x_26);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_26, 0);
lean::inc(x_27);
x_28 = lean::cnstr_get(x_26, 1);
lean::inc(x_28);
lean::dec(x_26);
x_29 = l_Lean_Elaborator_mkEqns___closed__1;
x_30 = l_Lean_Expr_mkCapp(x_29, x_27);
x_31 = lean_expr_mk_app(x_19, x_30);
x_32 = lean_expr_mk_mdata(x_18, x_31);
x_33 = l_Lean_Elaborator_oldElabCommand(x_1, x_32, x_2, x_3, x_28);
lean::dec(x_1);
return x_33;
}
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_attribute_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_attribute_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* _init_l_Lean_Elaborator_check_elaborate___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_1 = lean::box(0);
x_2 = lean::mk_string("command");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("#check");
x_5 = lean_name_mk_string(x_1, x_4);
x_6 = lean::box(0);
x_7 = l_Lean_KVMap_setName(x_6, x_3, x_5);
return x_7;
}
}
obj* l_Lean_Elaborator_check_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_5 = l_Lean_Parser_command_check_HasView;
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
lean::inc(x_1);
x_7 = lean::apply_1(x_6, x_1);
x_8 = lean::cnstr_get(x_7, 1);
lean::inc(x_8);
lean::dec(x_7);
x_9 = l_Lean_Elaborator_toPexpr___main(x_8, x_2, x_3, x_4);
if (lean::obj_tag(x_9) == 0)
{
uint8 x_10; 
lean::dec(x_1);
x_10 = !lean::is_exclusive(x_9);
if (x_10 == 0)
{
return x_9;
}
else
{
obj* x_11; obj* x_12; 
x_11 = lean::cnstr_get(x_9, 0);
lean::inc(x_11);
lean::dec(x_9);
x_12 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_12, 0, x_11);
return x_12;
}
}
else
{
obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
lean::dec(x_9);
x_14 = lean::cnstr_get(x_13, 0);
lean::inc(x_14);
x_15 = lean::cnstr_get(x_13, 1);
lean::inc(x_15);
lean::dec(x_13);
x_16 = l_Lean_Elaborator_check_elaborate___closed__1;
x_17 = lean_expr_mk_mdata(x_16, x_14);
x_18 = l_Lean_Elaborator_oldElabCommand(x_1, x_17, x_2, x_3, x_15);
lean::dec(x_1);
return x_18;
}
}
}
obj* l_Lean_Elaborator_check_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_check_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_open_elaborate___lambda__1(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; 
x_3 = !lean::is_exclusive(x_2);
if (x_3 == 0)
{
obj* x_4; obj* x_5; obj* x_6; 
x_4 = lean::cnstr_get(x_2, 7);
x_5 = lean::cnstr_get(x_1, 1);
lean::inc(x_5);
lean::dec(x_1);
x_6 = l_List_append___rarg(x_4, x_5);
lean::cnstr_set(x_2, 7, x_6);
return x_2;
}
else
{
obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_7 = lean::cnstr_get(x_2, 0);
x_8 = lean::cnstr_get(x_2, 1);
x_9 = lean::cnstr_get(x_2, 2);
x_10 = lean::cnstr_get(x_2, 3);
x_11 = lean::cnstr_get(x_2, 4);
x_12 = lean::cnstr_get(x_2, 5);
x_13 = lean::cnstr_get(x_2, 6);
x_14 = lean::cnstr_get(x_2, 7);
x_15 = lean::cnstr_get(x_2, 8);
lean::inc(x_15);
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
lean::inc(x_8);
lean::inc(x_7);
lean::dec(x_2);
x_16 = lean::cnstr_get(x_1, 1);
lean::inc(x_16);
lean::dec(x_1);
x_17 = l_List_append___rarg(x_14, x_16);
x_18 = lean::alloc_cnstr(0, 9, 0);
lean::cnstr_set(x_18, 0, x_7);
lean::cnstr_set(x_18, 1, x_8);
lean::cnstr_set(x_18, 2, x_9);
lean::cnstr_set(x_18, 3, x_10);
lean::cnstr_set(x_18, 4, x_11);
lean::cnstr_set(x_18, 5, x_12);
lean::cnstr_set(x_18, 6, x_13);
lean::cnstr_set(x_18, 7, x_17);
lean::cnstr_set(x_18, 8, x_15);
return x_18;
}
}
}
obj* l_Lean_Elaborator_open_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_5 = l_Lean_Parser_command_open_HasView;
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
x_7 = lean::apply_1(x_6, x_1);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_open_elaborate___lambda__1), 2, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = l_Lean_Elaborator_modifyCurrentScope(x_8, x_2, x_3, x_4);
return x_9;
}
}
obj* l_Lean_Elaborator_open_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_open_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_List_map___main___at_Lean_Elaborator_export_elaborate___spec__1(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = lean::box(0);
return x_3;
}
else
{
uint8 x_4; 
x_4 = !lean::is_exclusive(x_2);
if (x_4 == 0)
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_2, 0);
x_6 = lean::cnstr_get(x_2, 1);
lean::inc(x_1);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_1);
lean::cnstr_set(x_7, 1, x_5);
x_8 = l_List_map___main___at_Lean_Elaborator_export_elaborate___spec__1(x_1, x_6);
lean::cnstr_set(x_2, 1, x_8);
lean::cnstr_set(x_2, 0, x_7);
return x_2;
}
else
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_9 = lean::cnstr_get(x_2, 0);
x_10 = lean::cnstr_get(x_2, 1);
lean::inc(x_10);
lean::inc(x_9);
lean::dec(x_2);
lean::inc(x_1);
x_11 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_11, 0, x_1);
lean::cnstr_set(x_11, 1, x_9);
x_12 = l_List_map___main___at_Lean_Elaborator_export_elaborate___spec__1(x_1, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set(x_13, 1, x_12);
return x_13;
}
}
}
}
obj* l_Lean_Elaborator_export_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_5 = l_Lean_Parser_command_export_HasView;
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
x_7 = lean::apply_1(x_6, x_1);
x_8 = l_Lean_Elaborator_getNamespace(x_2, x_3, x_4);
if (lean::obj_tag(x_8) == 0)
{
uint8 x_9; 
lean::dec(x_7);
x_9 = !lean::is_exclusive(x_8);
if (x_9 == 0)
{
return x_8;
}
else
{
obj* x_10; obj* x_11; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_11 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_11, 0, x_10);
return x_11;
}
}
else
{
uint8 x_12; 
x_12 = !lean::is_exclusive(x_8);
if (x_12 == 0)
{
obj* x_13; uint8 x_14; 
x_13 = lean::cnstr_get(x_8, 0);
x_14 = !lean::is_exclusive(x_13);
if (x_14 == 0)
{
obj* x_15; uint8 x_16; 
x_15 = lean::cnstr_get(x_13, 1);
x_16 = !lean::is_exclusive(x_15);
if (x_16 == 0)
{
obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_17 = lean::cnstr_get(x_13, 0);
x_18 = lean::cnstr_get(x_15, 3);
x_19 = lean::cnstr_get(x_7, 1);
lean::inc(x_19);
lean::dec(x_7);
x_20 = l_List_map___main___at_Lean_Elaborator_export_elaborate___spec__1(x_17, x_19);
x_21 = l_List_append___rarg(x_18, x_20);
lean::cnstr_set(x_15, 3, x_21);
x_22 = lean::box(0);
lean::cnstr_set(x_13, 0, x_22);
return x_8;
}
else
{
obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_23 = lean::cnstr_get(x_13, 0);
x_24 = lean::cnstr_get(x_15, 0);
x_25 = lean::cnstr_get(x_15, 1);
x_26 = lean::cnstr_get(x_15, 2);
x_27 = lean::cnstr_get(x_15, 3);
x_28 = lean::cnstr_get(x_15, 4);
x_29 = lean::cnstr_get(x_15, 5);
x_30 = lean::cnstr_get(x_15, 6);
x_31 = lean::cnstr_get(x_15, 7);
x_32 = lean::cnstr_get(x_15, 8);
x_33 = lean::cnstr_get(x_15, 9);
x_34 = lean::cnstr_get(x_15, 10);
lean::inc(x_34);
lean::inc(x_33);
lean::inc(x_32);
lean::inc(x_31);
lean::inc(x_30);
lean::inc(x_29);
lean::inc(x_28);
lean::inc(x_27);
lean::inc(x_26);
lean::inc(x_25);
lean::inc(x_24);
lean::dec(x_15);
x_35 = lean::cnstr_get(x_7, 1);
lean::inc(x_35);
lean::dec(x_7);
x_36 = l_List_map___main___at_Lean_Elaborator_export_elaborate___spec__1(x_23, x_35);
x_37 = l_List_append___rarg(x_27, x_36);
x_38 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_38, 0, x_24);
lean::cnstr_set(x_38, 1, x_25);
lean::cnstr_set(x_38, 2, x_26);
lean::cnstr_set(x_38, 3, x_37);
lean::cnstr_set(x_38, 4, x_28);
lean::cnstr_set(x_38, 5, x_29);
lean::cnstr_set(x_38, 6, x_30);
lean::cnstr_set(x_38, 7, x_31);
lean::cnstr_set(x_38, 8, x_32);
lean::cnstr_set(x_38, 9, x_33);
lean::cnstr_set(x_38, 10, x_34);
x_39 = lean::box(0);
lean::cnstr_set(x_13, 1, x_38);
lean::cnstr_set(x_13, 0, x_39);
return x_8;
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; 
x_40 = lean::cnstr_get(x_13, 1);
x_41 = lean::cnstr_get(x_13, 0);
lean::inc(x_40);
lean::inc(x_41);
lean::dec(x_13);
x_42 = lean::cnstr_get(x_40, 0);
lean::inc(x_42);
x_43 = lean::cnstr_get(x_40, 1);
lean::inc(x_43);
x_44 = lean::cnstr_get(x_40, 2);
lean::inc(x_44);
x_45 = lean::cnstr_get(x_40, 3);
lean::inc(x_45);
x_46 = lean::cnstr_get(x_40, 4);
lean::inc(x_46);
x_47 = lean::cnstr_get(x_40, 5);
lean::inc(x_47);
x_48 = lean::cnstr_get(x_40, 6);
lean::inc(x_48);
x_49 = lean::cnstr_get(x_40, 7);
lean::inc(x_49);
x_50 = lean::cnstr_get(x_40, 8);
lean::inc(x_50);
x_51 = lean::cnstr_get(x_40, 9);
lean::inc(x_51);
x_52 = lean::cnstr_get(x_40, 10);
lean::inc(x_52);
if (lean::is_exclusive(x_40)) {
 lean::cnstr_release(x_40, 0);
 lean::cnstr_release(x_40, 1);
 lean::cnstr_release(x_40, 2);
 lean::cnstr_release(x_40, 3);
 lean::cnstr_release(x_40, 4);
 lean::cnstr_release(x_40, 5);
 lean::cnstr_release(x_40, 6);
 lean::cnstr_release(x_40, 7);
 lean::cnstr_release(x_40, 8);
 lean::cnstr_release(x_40, 9);
 lean::cnstr_release(x_40, 10);
 x_53 = x_40;
} else {
 lean::dec_ref(x_40);
 x_53 = lean::box(0);
}
x_54 = lean::cnstr_get(x_7, 1);
lean::inc(x_54);
lean::dec(x_7);
x_55 = l_List_map___main___at_Lean_Elaborator_export_elaborate___spec__1(x_41, x_54);
x_56 = l_List_append___rarg(x_45, x_55);
if (lean::is_scalar(x_53)) {
 x_57 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_57 = x_53;
}
lean::cnstr_set(x_57, 0, x_42);
lean::cnstr_set(x_57, 1, x_43);
lean::cnstr_set(x_57, 2, x_44);
lean::cnstr_set(x_57, 3, x_56);
lean::cnstr_set(x_57, 4, x_46);
lean::cnstr_set(x_57, 5, x_47);
lean::cnstr_set(x_57, 6, x_48);
lean::cnstr_set(x_57, 7, x_49);
lean::cnstr_set(x_57, 8, x_50);
lean::cnstr_set(x_57, 9, x_51);
lean::cnstr_set(x_57, 10, x_52);
x_58 = lean::box(0);
x_59 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_59, 0, x_58);
lean::cnstr_set(x_59, 1, x_57);
lean::cnstr_set(x_8, 0, x_59);
return x_8;
}
}
else
{
obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; 
x_60 = lean::cnstr_get(x_8, 0);
lean::inc(x_60);
lean::dec(x_8);
x_61 = lean::cnstr_get(x_60, 1);
lean::inc(x_61);
x_62 = lean::cnstr_get(x_60, 0);
lean::inc(x_62);
if (lean::is_exclusive(x_60)) {
 lean::cnstr_release(x_60, 0);
 lean::cnstr_release(x_60, 1);
 x_63 = x_60;
} else {
 lean::dec_ref(x_60);
 x_63 = lean::box(0);
}
x_64 = lean::cnstr_get(x_61, 0);
lean::inc(x_64);
x_65 = lean::cnstr_get(x_61, 1);
lean::inc(x_65);
x_66 = lean::cnstr_get(x_61, 2);
lean::inc(x_66);
x_67 = lean::cnstr_get(x_61, 3);
lean::inc(x_67);
x_68 = lean::cnstr_get(x_61, 4);
lean::inc(x_68);
x_69 = lean::cnstr_get(x_61, 5);
lean::inc(x_69);
x_70 = lean::cnstr_get(x_61, 6);
lean::inc(x_70);
x_71 = lean::cnstr_get(x_61, 7);
lean::inc(x_71);
x_72 = lean::cnstr_get(x_61, 8);
lean::inc(x_72);
x_73 = lean::cnstr_get(x_61, 9);
lean::inc(x_73);
x_74 = lean::cnstr_get(x_61, 10);
lean::inc(x_74);
if (lean::is_exclusive(x_61)) {
 lean::cnstr_release(x_61, 0);
 lean::cnstr_release(x_61, 1);
 lean::cnstr_release(x_61, 2);
 lean::cnstr_release(x_61, 3);
 lean::cnstr_release(x_61, 4);
 lean::cnstr_release(x_61, 5);
 lean::cnstr_release(x_61, 6);
 lean::cnstr_release(x_61, 7);
 lean::cnstr_release(x_61, 8);
 lean::cnstr_release(x_61, 9);
 lean::cnstr_release(x_61, 10);
 x_75 = x_61;
} else {
 lean::dec_ref(x_61);
 x_75 = lean::box(0);
}
x_76 = lean::cnstr_get(x_7, 1);
lean::inc(x_76);
lean::dec(x_7);
x_77 = l_List_map___main___at_Lean_Elaborator_export_elaborate___spec__1(x_62, x_76);
x_78 = l_List_append___rarg(x_67, x_77);
if (lean::is_scalar(x_75)) {
 x_79 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_79 = x_75;
}
lean::cnstr_set(x_79, 0, x_64);
lean::cnstr_set(x_79, 1, x_65);
lean::cnstr_set(x_79, 2, x_66);
lean::cnstr_set(x_79, 3, x_78);
lean::cnstr_set(x_79, 4, x_68);
lean::cnstr_set(x_79, 5, x_69);
lean::cnstr_set(x_79, 6, x_70);
lean::cnstr_set(x_79, 7, x_71);
lean::cnstr_set(x_79, 8, x_72);
lean::cnstr_set(x_79, 9, x_73);
lean::cnstr_set(x_79, 10, x_74);
x_80 = lean::box(0);
if (lean::is_scalar(x_63)) {
 x_81 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_81 = x_63;
}
lean::cnstr_set(x_81, 0, x_80);
lean::cnstr_set(x_81, 1, x_79);
x_82 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_82, 0, x_81);
return x_82;
}
}
}
}
obj* l_Lean_Elaborator_export_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_export_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* _init_l_Lean_Elaborator_initQuot_elaborate___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::box(0);
x_2 = lean::mk_string("command");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("initQuot");
x_5 = lean_name_mk_string(x_1, x_4);
x_6 = lean::box(0);
x_7 = l_Lean_KVMap_setName(x_6, x_3, x_5);
x_8 = l_Lean_Elaborator_dummy;
x_9 = lean_expr_mk_mdata(x_7, x_8);
return x_9;
}
}
obj* l_Lean_Elaborator_initQuot_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; 
x_5 = l_Lean_Elaborator_initQuot_elaborate___closed__1;
x_6 = l_Lean_Elaborator_oldElabCommand(x_1, x_5, x_2, x_3, x_4);
return x_6;
}
}
obj* l_Lean_Elaborator_initQuot_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_initQuot_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_1);
return x_5;
}
}
obj* l_Lean_Elaborator_setOption_elaborate___lambda__1(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; 
x_3 = !lean::is_exclusive(x_2);
if (x_3 == 0)
{
obj* x_4; 
x_4 = lean::cnstr_get(x_2, 8);
lean::dec(x_4);
lean::cnstr_set(x_2, 8, x_1);
return x_2;
}
else
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_5 = lean::cnstr_get(x_2, 0);
x_6 = lean::cnstr_get(x_2, 1);
x_7 = lean::cnstr_get(x_2, 2);
x_8 = lean::cnstr_get(x_2, 3);
x_9 = lean::cnstr_get(x_2, 4);
x_10 = lean::cnstr_get(x_2, 5);
x_11 = lean::cnstr_get(x_2, 6);
x_12 = lean::cnstr_get(x_2, 7);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
lean::inc(x_8);
lean::inc(x_7);
lean::inc(x_6);
lean::inc(x_5);
lean::dec(x_2);
x_13 = lean::alloc_cnstr(0, 9, 0);
lean::cnstr_set(x_13, 0, x_5);
lean::cnstr_set(x_13, 1, x_6);
lean::cnstr_set(x_13, 2, x_7);
lean::cnstr_set(x_13, 3, x_8);
lean::cnstr_set(x_13, 4, x_9);
lean::cnstr_set(x_13, 5, x_10);
lean::cnstr_set(x_13, 6, x_11);
lean::cnstr_set(x_13, 7, x_12);
lean::cnstr_set(x_13, 8, x_1);
return x_13;
}
}
}
obj* l_Lean_Elaborator_setOption_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_5 = l_Lean_Parser_command_setOption_HasView;
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
x_7 = lean::apply_1(x_6, x_1);
x_8 = lean::cnstr_get(x_7, 1);
lean::inc(x_8);
x_9 = lean::cnstr_get(x_8, 2);
lean::inc(x_9);
lean::dec(x_8);
x_10 = l_Lean_Elaborator_currentScope(x_2, x_3, x_4);
if (lean::obj_tag(x_10) == 0)
{
uint8 x_11; 
lean::dec(x_9);
lean::dec(x_7);
x_11 = !lean::is_exclusive(x_10);
if (x_11 == 0)
{
return x_10;
}
else
{
obj* x_12; obj* x_13; 
x_12 = lean::cnstr_get(x_10, 0);
lean::inc(x_12);
lean::dec(x_10);
x_13 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
}
else
{
obj* x_14; obj* x_15; 
x_14 = lean::cnstr_get(x_10, 0);
lean::inc(x_14);
lean::dec(x_10);
x_15 = lean::cnstr_get(x_7, 2);
lean::inc(x_15);
lean::dec(x_7);
switch (lean::obj_tag(x_15)) {
case 0:
{
obj* x_16; 
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
lean::dec(x_15);
if (lean::obj_tag(x_16) == 0)
{
obj* x_17; obj* x_18; obj* x_19; uint8 x_20; obj* x_21; obj* x_22; obj* x_23; 
lean::dec(x_16);
x_17 = lean::cnstr_get(x_14, 0);
lean::inc(x_17);
x_18 = lean::cnstr_get(x_14, 1);
lean::inc(x_18);
lean::dec(x_14);
x_19 = lean::cnstr_get(x_17, 8);
lean::inc(x_19);
lean::dec(x_17);
x_20 = 1;
x_21 = l_Lean_KVMap_setBool(x_19, x_9, x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_setOption_elaborate___lambda__1), 2, 1);
lean::closure_set(x_22, 0, x_21);
x_23 = l_Lean_Elaborator_modifyCurrentScope(x_22, x_2, x_3, x_18);
return x_23;
}
else
{
obj* x_24; obj* x_25; obj* x_26; uint8 x_27; obj* x_28; obj* x_29; obj* x_30; 
lean::dec(x_16);
x_24 = lean::cnstr_get(x_14, 0);
lean::inc(x_24);
x_25 = lean::cnstr_get(x_14, 1);
lean::inc(x_25);
lean::dec(x_14);
x_26 = lean::cnstr_get(x_24, 8);
lean::inc(x_26);
lean::dec(x_24);
x_27 = 0;
x_28 = l_Lean_KVMap_setBool(x_26, x_9, x_27);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_setOption_elaborate___lambda__1), 2, 1);
lean::closure_set(x_29, 0, x_28);
x_30 = l_Lean_Elaborator_modifyCurrentScope(x_29, x_2, x_3, x_25);
return x_30;
}
}
case 1:
{
obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; 
x_31 = lean::cnstr_get(x_14, 0);
lean::inc(x_31);
x_32 = lean::cnstr_get(x_14, 1);
lean::inc(x_32);
lean::dec(x_14);
x_33 = lean::cnstr_get(x_31, 8);
lean::inc(x_33);
lean::dec(x_31);
x_34 = lean::cnstr_get(x_15, 0);
lean::inc(x_34);
lean::dec(x_15);
x_35 = l_Lean_Parser_stringLit_View_value(x_34);
if (lean::obj_tag(x_35) == 0)
{
obj* x_36; obj* x_37; 
lean::dec(x_9);
x_36 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_setOption_elaborate___lambda__1), 2, 1);
lean::closure_set(x_36, 0, x_33);
x_37 = l_Lean_Elaborator_modifyCurrentScope(x_36, x_2, x_3, x_32);
return x_37;
}
else
{
obj* x_38; obj* x_39; obj* x_40; obj* x_41; 
x_38 = lean::cnstr_get(x_35, 0);
lean::inc(x_38);
lean::dec(x_35);
x_39 = l_Lean_KVMap_setString(x_33, x_9, x_38);
x_40 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_setOption_elaborate___lambda__1), 2, 1);
lean::closure_set(x_40, 0, x_39);
x_41 = l_Lean_Elaborator_modifyCurrentScope(x_40, x_2, x_3, x_32);
return x_41;
}
}
default: 
{
obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; 
x_42 = lean::cnstr_get(x_14, 0);
lean::inc(x_42);
x_43 = lean::cnstr_get(x_14, 1);
lean::inc(x_43);
lean::dec(x_14);
x_44 = lean::cnstr_get(x_42, 8);
lean::inc(x_44);
lean::dec(x_42);
x_45 = lean::cnstr_get(x_15, 0);
lean::inc(x_45);
lean::dec(x_15);
x_46 = l_Lean_Parser_number_View_toNat___main(x_45);
x_47 = l_Lean_KVMap_setNat(x_44, x_9, x_46);
x_48 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_setOption_elaborate___lambda__1), 2, 1);
lean::closure_set(x_48, 0, x_47);
x_49 = l_Lean_Elaborator_modifyCurrentScope(x_48, x_2, x_3, x_43);
return x_49;
}
}
}
}
}
obj* l_Lean_Elaborator_setOption_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_setOption_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_List_mfor___main___at_Lean_Elaborator_noKind_elaborate___spec__1(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_5; obj* x_6; obj* x_7; 
lean::dec(x_3);
lean::dec(x_2);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
obj* x_8; obj* x_9; obj* x_10; 
x_8 = lean::cnstr_get(x_1, 0);
lean::inc(x_8);
x_9 = lean::cnstr_get(x_1, 1);
lean::inc(x_9);
lean::dec(x_1);
lean::inc(x_2);
lean::inc(x_3);
x_10 = lean::apply_3(x_2, x_8, x_3, x_4);
if (lean::obj_tag(x_10) == 0)
{
uint8 x_11; 
lean::dec(x_9);
lean::dec(x_3);
lean::dec(x_2);
x_11 = !lean::is_exclusive(x_10);
if (x_11 == 0)
{
return x_10;
}
else
{
obj* x_12; obj* x_13; 
x_12 = lean::cnstr_get(x_10, 0);
lean::inc(x_12);
lean::dec(x_10);
x_13 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
}
else
{
obj* x_14; obj* x_15; 
x_14 = lean::cnstr_get(x_10, 0);
lean::inc(x_14);
lean::dec(x_10);
x_15 = lean::cnstr_get(x_14, 1);
lean::inc(x_15);
lean::dec(x_14);
x_1 = x_9;
x_4 = x_15;
goto _start;
}
}
}
}
obj* _init_l_Lean_Elaborator_noKind_elaborate___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("noKind.elaborate: unreachable");
return x_1;
}
}
obj* l_Lean_Elaborator_noKind_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
lean::inc(x_1);
x_5 = l_Lean_Parser_Syntax_asNode___main(x_1);
if (lean::obj_tag(x_5) == 0)
{
obj* x_6; obj* x_7; obj* x_8; 
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_1);
x_7 = l_Lean_Elaborator_noKind_elaborate___closed__1;
x_8 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_6, x_7, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_6);
return x_8;
}
else
{
obj* x_9; obj* x_10; obj* x_11; 
lean::dec(x_1);
x_9 = lean::cnstr_get(x_5, 0);
lean::inc(x_9);
lean::dec(x_5);
x_10 = lean::cnstr_get(x_9, 1);
lean::inc(x_10);
lean::dec(x_9);
x_11 = l_List_mfor___main___at_Lean_Elaborator_noKind_elaborate___spec__1(x_10, x_2, x_3, x_4);
return x_11;
}
}
}
obj* _init_l_Lean_Elaborator_end_elaborate___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("invalid 'end', there is no open Scope to end");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_end_elaborate___closed__2() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_1 = lean::box(0);
x_2 = lean::mk_string(".");
x_3 = lean::box(0);
x_4 = l_Lean_Name_toStringWithSep___main(x_2, x_3);
lean::dec(x_2);
x_5 = l_Lean_Parser_Substring_ofString(x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_7, 0, x_1);
lean::cnstr_set(x_7, 1, x_5);
lean::cnstr_set(x_7, 2, x_3);
lean::cnstr_set(x_7, 3, x_6);
lean::cnstr_set(x_7, 4, x_6);
x_8 = l_Lean_Elaborator_mangleIdent(x_7);
return x_8;
}
}
obj* _init_l_Lean_Elaborator_end_elaborate___closed__3() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("invalid end of ");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_end_elaborate___closed__4() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string(", expected Name '");
return x_1;
}
}
obj* l_Lean_Elaborator_end_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = lean::cnstr_get(x_4, 4);
lean::inc(x_5);
if (lean::obj_tag(x_5) == 0)
{
obj* x_6; obj* x_7; obj* x_8; 
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_1);
x_7 = l_Lean_Elaborator_end_elaborate___closed__1;
x_8 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_6, x_7, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_6);
return x_8;
}
else
{
obj* x_9; 
x_9 = lean::cnstr_get(x_5, 1);
lean::inc(x_9);
if (lean::obj_tag(x_9) == 0)
{
obj* x_10; obj* x_11; obj* x_12; 
lean::dec(x_5);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_1);
x_11 = l_Lean_Elaborator_end_elaborate___closed__1;
x_12 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_10, x_11, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_10);
return x_12;
}
else
{
obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_13 = lean::cnstr_get(x_4, 0);
lean::inc(x_13);
x_14 = lean::cnstr_get(x_4, 1);
lean::inc(x_14);
x_15 = lean::cnstr_get(x_4, 2);
lean::inc(x_15);
x_16 = lean::cnstr_get(x_4, 3);
lean::inc(x_16);
x_17 = lean::cnstr_get(x_4, 5);
lean::inc(x_17);
x_18 = lean::cnstr_get(x_4, 6);
lean::inc(x_18);
x_19 = lean::cnstr_get(x_4, 7);
lean::inc(x_19);
x_20 = lean::cnstr_get(x_4, 8);
lean::inc(x_20);
x_21 = lean::cnstr_get(x_4, 9);
lean::inc(x_21);
x_22 = lean::cnstr_get(x_4, 10);
lean::inc(x_22);
x_23 = lean::cnstr_get(x_5, 0);
lean::inc(x_23);
lean::dec(x_5);
x_24 = l_Lean_Parser_command_end_HasView;
x_25 = lean::cnstr_get(x_24, 0);
lean::inc(x_25);
lean::inc(x_1);
x_26 = lean::apply_1(x_25, x_1);
x_27 = lean::cnstr_get(x_26, 1);
lean::inc(x_27);
lean::dec(x_26);
if (lean::obj_tag(x_27) == 0)
{
obj* x_28; obj* x_29; uint8 x_30; 
x_28 = lean::cnstr_get(x_23, 1);
lean::inc(x_28);
x_29 = l_Lean_Elaborator_end_elaborate___closed__2;
x_30 = lean_name_dec_eq(x_29, x_28);
if (x_30 == 0)
{
obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; uint8 x_43; 
x_31 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_31, 0, x_1);
x_32 = lean::cnstr_get(x_23, 0);
lean::inc(x_32);
lean::dec(x_23);
x_33 = l_Lean_Elaborator_end_elaborate___closed__3;
x_34 = lean::string_append(x_33, x_32);
lean::dec(x_32);
x_35 = l_Lean_Elaborator_end_elaborate___closed__4;
x_36 = lean::string_append(x_34, x_35);
x_37 = l_Lean_Name_toString___closed__1;
x_38 = l_Lean_Name_toStringWithSep___main(x_37, x_28);
x_39 = lean::string_append(x_36, x_38);
lean::dec(x_38);
x_40 = l_Char_HasRepr___closed__1;
x_41 = lean::string_append(x_39, x_40);
x_42 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_31, x_41, x_2, x_3, x_4);
lean::dec(x_31);
x_43 = !lean::is_exclusive(x_4);
if (x_43 == 0)
{
obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; 
x_44 = lean::cnstr_get(x_4, 10);
lean::dec(x_44);
x_45 = lean::cnstr_get(x_4, 9);
lean::dec(x_45);
x_46 = lean::cnstr_get(x_4, 8);
lean::dec(x_46);
x_47 = lean::cnstr_get(x_4, 7);
lean::dec(x_47);
x_48 = lean::cnstr_get(x_4, 6);
lean::dec(x_48);
x_49 = lean::cnstr_get(x_4, 5);
lean::dec(x_49);
x_50 = lean::cnstr_get(x_4, 4);
lean::dec(x_50);
x_51 = lean::cnstr_get(x_4, 3);
lean::dec(x_51);
x_52 = lean::cnstr_get(x_4, 2);
lean::dec(x_52);
x_53 = lean::cnstr_get(x_4, 1);
lean::dec(x_53);
x_54 = lean::cnstr_get(x_4, 0);
lean::dec(x_54);
if (lean::obj_tag(x_42) == 0)
{
uint8 x_55; 
lean::free_heap_obj(x_4);
lean::dec(x_22);
lean::dec(x_21);
lean::dec(x_20);
lean::dec(x_19);
lean::dec(x_18);
lean::dec(x_17);
lean::dec(x_16);
lean::dec(x_15);
lean::dec(x_14);
lean::dec(x_13);
lean::dec(x_9);
lean::dec(x_3);
x_55 = !lean::is_exclusive(x_42);
if (x_55 == 0)
{
return x_42;
}
else
{
obj* x_56; obj* x_57; 
x_56 = lean::cnstr_get(x_42, 0);
lean::inc(x_56);
lean::dec(x_42);
x_57 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_57, 0, x_56);
return x_57;
}
}
else
{
obj* x_58; 
lean::dec(x_42);
lean::cnstr_set(x_4, 4, x_9);
x_58 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_4);
return x_58;
}
}
else
{
lean::dec(x_4);
if (lean::obj_tag(x_42) == 0)
{
obj* x_59; obj* x_60; obj* x_61; 
lean::dec(x_22);
lean::dec(x_21);
lean::dec(x_20);
lean::dec(x_19);
lean::dec(x_18);
lean::dec(x_17);
lean::dec(x_16);
lean::dec(x_15);
lean::dec(x_14);
lean::dec(x_13);
lean::dec(x_9);
lean::dec(x_3);
x_59 = lean::cnstr_get(x_42, 0);
lean::inc(x_59);
if (lean::is_exclusive(x_42)) {
 lean::cnstr_release(x_42, 0);
 x_60 = x_42;
} else {
 lean::dec_ref(x_42);
 x_60 = lean::box(0);
}
if (lean::is_scalar(x_60)) {
 x_61 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_61 = x_60;
}
lean::cnstr_set(x_61, 0, x_59);
return x_61;
}
else
{
obj* x_62; obj* x_63; 
lean::dec(x_42);
x_62 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_62, 0, x_13);
lean::cnstr_set(x_62, 1, x_14);
lean::cnstr_set(x_62, 2, x_15);
lean::cnstr_set(x_62, 3, x_16);
lean::cnstr_set(x_62, 4, x_9);
lean::cnstr_set(x_62, 5, x_17);
lean::cnstr_set(x_62, 6, x_18);
lean::cnstr_set(x_62, 7, x_19);
lean::cnstr_set(x_62, 8, x_20);
lean::cnstr_set(x_62, 9, x_21);
lean::cnstr_set(x_62, 10, x_22);
x_63 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_62);
return x_63;
}
}
}
else
{
uint8 x_64; 
lean::dec(x_28);
lean::dec(x_23);
lean::dec(x_1);
x_64 = !lean::is_exclusive(x_4);
if (x_64 == 0)
{
obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; 
x_65 = lean::cnstr_get(x_4, 10);
lean::dec(x_65);
x_66 = lean::cnstr_get(x_4, 9);
lean::dec(x_66);
x_67 = lean::cnstr_get(x_4, 8);
lean::dec(x_67);
x_68 = lean::cnstr_get(x_4, 7);
lean::dec(x_68);
x_69 = lean::cnstr_get(x_4, 6);
lean::dec(x_69);
x_70 = lean::cnstr_get(x_4, 5);
lean::dec(x_70);
x_71 = lean::cnstr_get(x_4, 4);
lean::dec(x_71);
x_72 = lean::cnstr_get(x_4, 3);
lean::dec(x_72);
x_73 = lean::cnstr_get(x_4, 2);
lean::dec(x_73);
x_74 = lean::cnstr_get(x_4, 1);
lean::dec(x_74);
x_75 = lean::cnstr_get(x_4, 0);
lean::dec(x_75);
lean::cnstr_set(x_4, 4, x_9);
x_76 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_4);
return x_76;
}
else
{
obj* x_77; obj* x_78; 
lean::dec(x_4);
x_77 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_77, 0, x_13);
lean::cnstr_set(x_77, 1, x_14);
lean::cnstr_set(x_77, 2, x_15);
lean::cnstr_set(x_77, 3, x_16);
lean::cnstr_set(x_77, 4, x_9);
lean::cnstr_set(x_77, 5, x_17);
lean::cnstr_set(x_77, 6, x_18);
lean::cnstr_set(x_77, 7, x_19);
lean::cnstr_set(x_77, 8, x_20);
lean::cnstr_set(x_77, 9, x_21);
lean::cnstr_set(x_77, 10, x_22);
x_78 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_77);
return x_78;
}
}
}
else
{
obj* x_79; uint8 x_80; 
x_79 = lean::cnstr_get(x_23, 1);
lean::inc(x_79);
x_80 = !lean::is_exclusive(x_27);
if (x_80 == 0)
{
obj* x_81; obj* x_82; uint8 x_83; 
x_81 = lean::cnstr_get(x_27, 0);
x_82 = l_Lean_Elaborator_mangleIdent(x_81);
x_83 = lean_name_dec_eq(x_82, x_79);
lean::dec(x_82);
if (x_83 == 0)
{
obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; uint8 x_95; 
lean::cnstr_set(x_27, 0, x_1);
x_84 = lean::cnstr_get(x_23, 0);
lean::inc(x_84);
lean::dec(x_23);
x_85 = l_Lean_Elaborator_end_elaborate___closed__3;
x_86 = lean::string_append(x_85, x_84);
lean::dec(x_84);
x_87 = l_Lean_Elaborator_end_elaborate___closed__4;
x_88 = lean::string_append(x_86, x_87);
x_89 = l_Lean_Name_toString___closed__1;
x_90 = l_Lean_Name_toStringWithSep___main(x_89, x_79);
x_91 = lean::string_append(x_88, x_90);
lean::dec(x_90);
x_92 = l_Char_HasRepr___closed__1;
x_93 = lean::string_append(x_91, x_92);
x_94 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_27, x_93, x_2, x_3, x_4);
lean::dec(x_27);
x_95 = !lean::is_exclusive(x_4);
if (x_95 == 0)
{
obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_105; obj* x_106; 
x_96 = lean::cnstr_get(x_4, 10);
lean::dec(x_96);
x_97 = lean::cnstr_get(x_4, 9);
lean::dec(x_97);
x_98 = lean::cnstr_get(x_4, 8);
lean::dec(x_98);
x_99 = lean::cnstr_get(x_4, 7);
lean::dec(x_99);
x_100 = lean::cnstr_get(x_4, 6);
lean::dec(x_100);
x_101 = lean::cnstr_get(x_4, 5);
lean::dec(x_101);
x_102 = lean::cnstr_get(x_4, 4);
lean::dec(x_102);
x_103 = lean::cnstr_get(x_4, 3);
lean::dec(x_103);
x_104 = lean::cnstr_get(x_4, 2);
lean::dec(x_104);
x_105 = lean::cnstr_get(x_4, 1);
lean::dec(x_105);
x_106 = lean::cnstr_get(x_4, 0);
lean::dec(x_106);
if (lean::obj_tag(x_94) == 0)
{
uint8 x_107; 
lean::free_heap_obj(x_4);
lean::dec(x_22);
lean::dec(x_21);
lean::dec(x_20);
lean::dec(x_19);
lean::dec(x_18);
lean::dec(x_17);
lean::dec(x_16);
lean::dec(x_15);
lean::dec(x_14);
lean::dec(x_13);
lean::dec(x_9);
lean::dec(x_3);
x_107 = !lean::is_exclusive(x_94);
if (x_107 == 0)
{
return x_94;
}
else
{
obj* x_108; obj* x_109; 
x_108 = lean::cnstr_get(x_94, 0);
lean::inc(x_108);
lean::dec(x_94);
x_109 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_109, 0, x_108);
return x_109;
}
}
else
{
obj* x_110; 
lean::dec(x_94);
lean::cnstr_set(x_4, 4, x_9);
x_110 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_4);
return x_110;
}
}
else
{
lean::dec(x_4);
if (lean::obj_tag(x_94) == 0)
{
obj* x_111; obj* x_112; obj* x_113; 
lean::dec(x_22);
lean::dec(x_21);
lean::dec(x_20);
lean::dec(x_19);
lean::dec(x_18);
lean::dec(x_17);
lean::dec(x_16);
lean::dec(x_15);
lean::dec(x_14);
lean::dec(x_13);
lean::dec(x_9);
lean::dec(x_3);
x_111 = lean::cnstr_get(x_94, 0);
lean::inc(x_111);
if (lean::is_exclusive(x_94)) {
 lean::cnstr_release(x_94, 0);
 x_112 = x_94;
} else {
 lean::dec_ref(x_94);
 x_112 = lean::box(0);
}
if (lean::is_scalar(x_112)) {
 x_113 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_113 = x_112;
}
lean::cnstr_set(x_113, 0, x_111);
return x_113;
}
else
{
obj* x_114; obj* x_115; 
lean::dec(x_94);
x_114 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_114, 0, x_13);
lean::cnstr_set(x_114, 1, x_14);
lean::cnstr_set(x_114, 2, x_15);
lean::cnstr_set(x_114, 3, x_16);
lean::cnstr_set(x_114, 4, x_9);
lean::cnstr_set(x_114, 5, x_17);
lean::cnstr_set(x_114, 6, x_18);
lean::cnstr_set(x_114, 7, x_19);
lean::cnstr_set(x_114, 8, x_20);
lean::cnstr_set(x_114, 9, x_21);
lean::cnstr_set(x_114, 10, x_22);
x_115 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_114);
return x_115;
}
}
}
else
{
uint8 x_116; 
lean::free_heap_obj(x_27);
lean::dec(x_79);
lean::dec(x_23);
lean::dec(x_1);
x_116 = !lean::is_exclusive(x_4);
if (x_116 == 0)
{
obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; 
x_117 = lean::cnstr_get(x_4, 10);
lean::dec(x_117);
x_118 = lean::cnstr_get(x_4, 9);
lean::dec(x_118);
x_119 = lean::cnstr_get(x_4, 8);
lean::dec(x_119);
x_120 = lean::cnstr_get(x_4, 7);
lean::dec(x_120);
x_121 = lean::cnstr_get(x_4, 6);
lean::dec(x_121);
x_122 = lean::cnstr_get(x_4, 5);
lean::dec(x_122);
x_123 = lean::cnstr_get(x_4, 4);
lean::dec(x_123);
x_124 = lean::cnstr_get(x_4, 3);
lean::dec(x_124);
x_125 = lean::cnstr_get(x_4, 2);
lean::dec(x_125);
x_126 = lean::cnstr_get(x_4, 1);
lean::dec(x_126);
x_127 = lean::cnstr_get(x_4, 0);
lean::dec(x_127);
lean::cnstr_set(x_4, 4, x_9);
x_128 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_4);
return x_128;
}
else
{
obj* x_129; obj* x_130; 
lean::dec(x_4);
x_129 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_129, 0, x_13);
lean::cnstr_set(x_129, 1, x_14);
lean::cnstr_set(x_129, 2, x_15);
lean::cnstr_set(x_129, 3, x_16);
lean::cnstr_set(x_129, 4, x_9);
lean::cnstr_set(x_129, 5, x_17);
lean::cnstr_set(x_129, 6, x_18);
lean::cnstr_set(x_129, 7, x_19);
lean::cnstr_set(x_129, 8, x_20);
lean::cnstr_set(x_129, 9, x_21);
lean::cnstr_set(x_129, 10, x_22);
x_130 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_129);
return x_130;
}
}
}
else
{
obj* x_131; obj* x_132; uint8 x_133; 
x_131 = lean::cnstr_get(x_27, 0);
lean::inc(x_131);
lean::dec(x_27);
x_132 = l_Lean_Elaborator_mangleIdent(x_131);
x_133 = lean_name_dec_eq(x_132, x_79);
lean::dec(x_132);
if (x_133 == 0)
{
obj* x_134; obj* x_135; obj* x_136; obj* x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_141; obj* x_142; obj* x_143; obj* x_144; obj* x_145; obj* x_146; 
x_134 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_134, 0, x_1);
x_135 = lean::cnstr_get(x_23, 0);
lean::inc(x_135);
lean::dec(x_23);
x_136 = l_Lean_Elaborator_end_elaborate___closed__3;
x_137 = lean::string_append(x_136, x_135);
lean::dec(x_135);
x_138 = l_Lean_Elaborator_end_elaborate___closed__4;
x_139 = lean::string_append(x_137, x_138);
x_140 = l_Lean_Name_toString___closed__1;
x_141 = l_Lean_Name_toStringWithSep___main(x_140, x_79);
x_142 = lean::string_append(x_139, x_141);
lean::dec(x_141);
x_143 = l_Char_HasRepr___closed__1;
x_144 = lean::string_append(x_142, x_143);
x_145 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_134, x_144, x_2, x_3, x_4);
lean::dec(x_134);
if (lean::is_exclusive(x_4)) {
 lean::cnstr_release(x_4, 0);
 lean::cnstr_release(x_4, 1);
 lean::cnstr_release(x_4, 2);
 lean::cnstr_release(x_4, 3);
 lean::cnstr_release(x_4, 4);
 lean::cnstr_release(x_4, 5);
 lean::cnstr_release(x_4, 6);
 lean::cnstr_release(x_4, 7);
 lean::cnstr_release(x_4, 8);
 lean::cnstr_release(x_4, 9);
 lean::cnstr_release(x_4, 10);
 x_146 = x_4;
} else {
 lean::dec_ref(x_4);
 x_146 = lean::box(0);
}
if (lean::obj_tag(x_145) == 0)
{
obj* x_147; obj* x_148; obj* x_149; 
lean::dec(x_146);
lean::dec(x_22);
lean::dec(x_21);
lean::dec(x_20);
lean::dec(x_19);
lean::dec(x_18);
lean::dec(x_17);
lean::dec(x_16);
lean::dec(x_15);
lean::dec(x_14);
lean::dec(x_13);
lean::dec(x_9);
lean::dec(x_3);
x_147 = lean::cnstr_get(x_145, 0);
lean::inc(x_147);
if (lean::is_exclusive(x_145)) {
 lean::cnstr_release(x_145, 0);
 x_148 = x_145;
} else {
 lean::dec_ref(x_145);
 x_148 = lean::box(0);
}
if (lean::is_scalar(x_148)) {
 x_149 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_149 = x_148;
}
lean::cnstr_set(x_149, 0, x_147);
return x_149;
}
else
{
obj* x_150; obj* x_151; 
lean::dec(x_145);
if (lean::is_scalar(x_146)) {
 x_150 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_150 = x_146;
}
lean::cnstr_set(x_150, 0, x_13);
lean::cnstr_set(x_150, 1, x_14);
lean::cnstr_set(x_150, 2, x_15);
lean::cnstr_set(x_150, 3, x_16);
lean::cnstr_set(x_150, 4, x_9);
lean::cnstr_set(x_150, 5, x_17);
lean::cnstr_set(x_150, 6, x_18);
lean::cnstr_set(x_150, 7, x_19);
lean::cnstr_set(x_150, 8, x_20);
lean::cnstr_set(x_150, 9, x_21);
lean::cnstr_set(x_150, 10, x_22);
x_151 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_150);
return x_151;
}
}
else
{
obj* x_152; obj* x_153; obj* x_154; 
lean::dec(x_79);
lean::dec(x_23);
lean::dec(x_1);
if (lean::is_exclusive(x_4)) {
 lean::cnstr_release(x_4, 0);
 lean::cnstr_release(x_4, 1);
 lean::cnstr_release(x_4, 2);
 lean::cnstr_release(x_4, 3);
 lean::cnstr_release(x_4, 4);
 lean::cnstr_release(x_4, 5);
 lean::cnstr_release(x_4, 6);
 lean::cnstr_release(x_4, 7);
 lean::cnstr_release(x_4, 8);
 lean::cnstr_release(x_4, 9);
 lean::cnstr_release(x_4, 10);
 x_152 = x_4;
} else {
 lean::dec_ref(x_4);
 x_152 = lean::box(0);
}
if (lean::is_scalar(x_152)) {
 x_153 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_153 = x_152;
}
lean::cnstr_set(x_153, 0, x_13);
lean::cnstr_set(x_153, 1, x_14);
lean::cnstr_set(x_153, 2, x_15);
lean::cnstr_set(x_153, 3, x_16);
lean::cnstr_set(x_153, 4, x_9);
lean::cnstr_set(x_153, 5, x_17);
lean::cnstr_set(x_153, 6, x_18);
lean::cnstr_set(x_153, 7, x_19);
lean::cnstr_set(x_153, 8, x_20);
lean::cnstr_set(x_153, 9, x_21);
lean::cnstr_set(x_153, 10, x_22);
x_154 = l_Lean_Elaborator_updateParserConfig(x_2, x_3, x_153);
return x_154;
}
}
}
}
}
}
}
obj* l_Lean_Elaborator_end_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_end_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_2);
return x_5;
}
}
obj* _init_l_Lean_Elaborator_section_elaborate___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("section");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_section_elaborate___closed__2() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_1 = lean::box(0);
x_2 = lean::mk_string(".");
x_3 = lean::box(0);
x_4 = l_Lean_Name_toStringWithSep___main(x_2, x_3);
lean::dec(x_2);
x_5 = l_Lean_Parser_Substring_ofString(x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_7, 0, x_1);
lean::cnstr_set(x_7, 1, x_5);
lean::cnstr_set(x_7, 2, x_3);
lean::cnstr_set(x_7, 3, x_6);
lean::cnstr_set(x_7, 4, x_6);
return x_7;
}
}
obj* l_Lean_Elaborator_section_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_5 = l_Lean_Parser_command_section_HasView;
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
x_7 = lean::apply_1(x_6, x_1);
x_8 = lean::cnstr_get(x_7, 1);
lean::inc(x_8);
lean::dec(x_7);
x_9 = l_Lean_Elaborator_currentScope(x_2, x_3, x_4);
if (lean::obj_tag(x_8) == 0)
{
obj* x_126; 
x_126 = l_Lean_Elaborator_section_elaborate___closed__2;
x_10 = x_126;
goto block_125;
}
else
{
obj* x_127; 
x_127 = lean::cnstr_get(x_8, 0);
lean::inc(x_127);
lean::dec(x_8);
x_10 = x_127;
goto block_125;
}
block_125:
{
if (lean::obj_tag(x_9) == 0)
{
uint8 x_11; 
lean::dec(x_10);
x_11 = !lean::is_exclusive(x_9);
if (x_11 == 0)
{
return x_9;
}
else
{
obj* x_12; obj* x_13; 
x_12 = lean::cnstr_get(x_9, 0);
lean::inc(x_12);
lean::dec(x_9);
x_13 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
}
else
{
uint8 x_14; 
x_14 = !lean::is_exclusive(x_9);
if (x_14 == 0)
{
obj* x_15; obj* x_16; uint8 x_17; 
x_15 = lean::cnstr_get(x_9, 0);
x_16 = l_Lean_Elaborator_mangleIdent(x_10);
x_17 = !lean::is_exclusive(x_15);
if (x_17 == 0)
{
obj* x_18; uint8 x_19; 
x_18 = lean::cnstr_get(x_15, 1);
x_19 = !lean::is_exclusive(x_18);
if (x_19 == 0)
{
obj* x_20; uint8 x_21; 
x_20 = lean::cnstr_get(x_15, 0);
x_21 = !lean::is_exclusive(x_20);
if (x_21 == 0)
{
obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_22 = lean::cnstr_get(x_18, 4);
x_23 = lean::cnstr_get(x_20, 1);
lean::dec(x_23);
x_24 = lean::cnstr_get(x_20, 0);
lean::dec(x_24);
x_25 = l_Lean_Elaborator_section_elaborate___closed__1;
lean::cnstr_set(x_20, 1, x_16);
lean::cnstr_set(x_20, 0, x_25);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_20);
lean::cnstr_set(x_26, 1, x_22);
lean::cnstr_set(x_18, 4, x_26);
x_27 = lean::box(0);
lean::cnstr_set(x_15, 0, x_27);
return x_9;
}
else
{
obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_28 = lean::cnstr_get(x_18, 4);
x_29 = lean::cnstr_get(x_20, 2);
x_30 = lean::cnstr_get(x_20, 3);
x_31 = lean::cnstr_get(x_20, 4);
x_32 = lean::cnstr_get(x_20, 5);
x_33 = lean::cnstr_get(x_20, 6);
x_34 = lean::cnstr_get(x_20, 7);
x_35 = lean::cnstr_get(x_20, 8);
lean::inc(x_35);
lean::inc(x_34);
lean::inc(x_33);
lean::inc(x_32);
lean::inc(x_31);
lean::inc(x_30);
lean::inc(x_29);
lean::dec(x_20);
x_36 = l_Lean_Elaborator_section_elaborate___closed__1;
x_37 = lean::alloc_cnstr(0, 9, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_16);
lean::cnstr_set(x_37, 2, x_29);
lean::cnstr_set(x_37, 3, x_30);
lean::cnstr_set(x_37, 4, x_31);
lean::cnstr_set(x_37, 5, x_32);
lean::cnstr_set(x_37, 6, x_33);
lean::cnstr_set(x_37, 7, x_34);
lean::cnstr_set(x_37, 8, x_35);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_28);
lean::cnstr_set(x_18, 4, x_38);
x_39 = lean::box(0);
lean::cnstr_set(x_15, 0, x_39);
return x_9;
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; 
x_40 = lean::cnstr_get(x_15, 0);
x_41 = lean::cnstr_get(x_18, 0);
x_42 = lean::cnstr_get(x_18, 1);
x_43 = lean::cnstr_get(x_18, 2);
x_44 = lean::cnstr_get(x_18, 3);
x_45 = lean::cnstr_get(x_18, 4);
x_46 = lean::cnstr_get(x_18, 5);
x_47 = lean::cnstr_get(x_18, 6);
x_48 = lean::cnstr_get(x_18, 7);
x_49 = lean::cnstr_get(x_18, 8);
x_50 = lean::cnstr_get(x_18, 9);
x_51 = lean::cnstr_get(x_18, 10);
lean::inc(x_51);
lean::inc(x_50);
lean::inc(x_49);
lean::inc(x_48);
lean::inc(x_47);
lean::inc(x_46);
lean::inc(x_45);
lean::inc(x_44);
lean::inc(x_43);
lean::inc(x_42);
lean::inc(x_41);
lean::dec(x_18);
x_52 = lean::cnstr_get(x_40, 2);
lean::inc(x_52);
x_53 = lean::cnstr_get(x_40, 3);
lean::inc(x_53);
x_54 = lean::cnstr_get(x_40, 4);
lean::inc(x_54);
x_55 = lean::cnstr_get(x_40, 5);
lean::inc(x_55);
x_56 = lean::cnstr_get(x_40, 6);
lean::inc(x_56);
x_57 = lean::cnstr_get(x_40, 7);
lean::inc(x_57);
x_58 = lean::cnstr_get(x_40, 8);
lean::inc(x_58);
if (lean::is_exclusive(x_40)) {
 lean::cnstr_release(x_40, 0);
 lean::cnstr_release(x_40, 1);
 lean::cnstr_release(x_40, 2);
 lean::cnstr_release(x_40, 3);
 lean::cnstr_release(x_40, 4);
 lean::cnstr_release(x_40, 5);
 lean::cnstr_release(x_40, 6);
 lean::cnstr_release(x_40, 7);
 lean::cnstr_release(x_40, 8);
 x_59 = x_40;
} else {
 lean::dec_ref(x_40);
 x_59 = lean::box(0);
}
x_60 = l_Lean_Elaborator_section_elaborate___closed__1;
if (lean::is_scalar(x_59)) {
 x_61 = lean::alloc_cnstr(0, 9, 0);
} else {
 x_61 = x_59;
}
lean::cnstr_set(x_61, 0, x_60);
lean::cnstr_set(x_61, 1, x_16);
lean::cnstr_set(x_61, 2, x_52);
lean::cnstr_set(x_61, 3, x_53);
lean::cnstr_set(x_61, 4, x_54);
lean::cnstr_set(x_61, 5, x_55);
lean::cnstr_set(x_61, 6, x_56);
lean::cnstr_set(x_61, 7, x_57);
lean::cnstr_set(x_61, 8, x_58);
x_62 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_62, 0, x_61);
lean::cnstr_set(x_62, 1, x_45);
x_63 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_63, 0, x_41);
lean::cnstr_set(x_63, 1, x_42);
lean::cnstr_set(x_63, 2, x_43);
lean::cnstr_set(x_63, 3, x_44);
lean::cnstr_set(x_63, 4, x_62);
lean::cnstr_set(x_63, 5, x_46);
lean::cnstr_set(x_63, 6, x_47);
lean::cnstr_set(x_63, 7, x_48);
lean::cnstr_set(x_63, 8, x_49);
lean::cnstr_set(x_63, 9, x_50);
lean::cnstr_set(x_63, 10, x_51);
x_64 = lean::box(0);
lean::cnstr_set(x_15, 1, x_63);
lean::cnstr_set(x_15, 0, x_64);
return x_9;
}
}
else
{
obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; 
x_65 = lean::cnstr_get(x_15, 1);
x_66 = lean::cnstr_get(x_15, 0);
lean::inc(x_65);
lean::inc(x_66);
lean::dec(x_15);
x_67 = lean::cnstr_get(x_65, 0);
lean::inc(x_67);
x_68 = lean::cnstr_get(x_65, 1);
lean::inc(x_68);
x_69 = lean::cnstr_get(x_65, 2);
lean::inc(x_69);
x_70 = lean::cnstr_get(x_65, 3);
lean::inc(x_70);
x_71 = lean::cnstr_get(x_65, 4);
lean::inc(x_71);
x_72 = lean::cnstr_get(x_65, 5);
lean::inc(x_72);
x_73 = lean::cnstr_get(x_65, 6);
lean::inc(x_73);
x_74 = lean::cnstr_get(x_65, 7);
lean::inc(x_74);
x_75 = lean::cnstr_get(x_65, 8);
lean::inc(x_75);
x_76 = lean::cnstr_get(x_65, 9);
lean::inc(x_76);
x_77 = lean::cnstr_get(x_65, 10);
lean::inc(x_77);
if (lean::is_exclusive(x_65)) {
 lean::cnstr_release(x_65, 0);
 lean::cnstr_release(x_65, 1);
 lean::cnstr_release(x_65, 2);
 lean::cnstr_release(x_65, 3);
 lean::cnstr_release(x_65, 4);
 lean::cnstr_release(x_65, 5);
 lean::cnstr_release(x_65, 6);
 lean::cnstr_release(x_65, 7);
 lean::cnstr_release(x_65, 8);
 lean::cnstr_release(x_65, 9);
 lean::cnstr_release(x_65, 10);
 x_78 = x_65;
} else {
 lean::dec_ref(x_65);
 x_78 = lean::box(0);
}
x_79 = lean::cnstr_get(x_66, 2);
lean::inc(x_79);
x_80 = lean::cnstr_get(x_66, 3);
lean::inc(x_80);
x_81 = lean::cnstr_get(x_66, 4);
lean::inc(x_81);
x_82 = lean::cnstr_get(x_66, 5);
lean::inc(x_82);
x_83 = lean::cnstr_get(x_66, 6);
lean::inc(x_83);
x_84 = lean::cnstr_get(x_66, 7);
lean::inc(x_84);
x_85 = lean::cnstr_get(x_66, 8);
lean::inc(x_85);
if (lean::is_exclusive(x_66)) {
 lean::cnstr_release(x_66, 0);
 lean::cnstr_release(x_66, 1);
 lean::cnstr_release(x_66, 2);
 lean::cnstr_release(x_66, 3);
 lean::cnstr_release(x_66, 4);
 lean::cnstr_release(x_66, 5);
 lean::cnstr_release(x_66, 6);
 lean::cnstr_release(x_66, 7);
 lean::cnstr_release(x_66, 8);
 x_86 = x_66;
} else {
 lean::dec_ref(x_66);
 x_86 = lean::box(0);
}
x_87 = l_Lean_Elaborator_section_elaborate___closed__1;
if (lean::is_scalar(x_86)) {
 x_88 = lean::alloc_cnstr(0, 9, 0);
} else {
 x_88 = x_86;
}
lean::cnstr_set(x_88, 0, x_87);
lean::cnstr_set(x_88, 1, x_16);
lean::cnstr_set(x_88, 2, x_79);
lean::cnstr_set(x_88, 3, x_80);
lean::cnstr_set(x_88, 4, x_81);
lean::cnstr_set(x_88, 5, x_82);
lean::cnstr_set(x_88, 6, x_83);
lean::cnstr_set(x_88, 7, x_84);
lean::cnstr_set(x_88, 8, x_85);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_88);
lean::cnstr_set(x_89, 1, x_71);
if (lean::is_scalar(x_78)) {
 x_90 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_90 = x_78;
}
lean::cnstr_set(x_90, 0, x_67);
lean::cnstr_set(x_90, 1, x_68);
lean::cnstr_set(x_90, 2, x_69);
lean::cnstr_set(x_90, 3, x_70);
lean::cnstr_set(x_90, 4, x_89);
lean::cnstr_set(x_90, 5, x_72);
lean::cnstr_set(x_90, 6, x_73);
lean::cnstr_set(x_90, 7, x_74);
lean::cnstr_set(x_90, 8, x_75);
lean::cnstr_set(x_90, 9, x_76);
lean::cnstr_set(x_90, 10, x_77);
x_91 = lean::box(0);
x_92 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_92, 0, x_91);
lean::cnstr_set(x_92, 1, x_90);
lean::cnstr_set(x_9, 0, x_92);
return x_9;
}
}
else
{
obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; 
x_93 = lean::cnstr_get(x_9, 0);
lean::inc(x_93);
lean::dec(x_9);
x_94 = l_Lean_Elaborator_mangleIdent(x_10);
x_95 = lean::cnstr_get(x_93, 1);
lean::inc(x_95);
x_96 = lean::cnstr_get(x_93, 0);
lean::inc(x_96);
if (lean::is_exclusive(x_93)) {
 lean::cnstr_release(x_93, 0);
 lean::cnstr_release(x_93, 1);
 x_97 = x_93;
} else {
 lean::dec_ref(x_93);
 x_97 = lean::box(0);
}
x_98 = lean::cnstr_get(x_95, 0);
lean::inc(x_98);
x_99 = lean::cnstr_get(x_95, 1);
lean::inc(x_99);
x_100 = lean::cnstr_get(x_95, 2);
lean::inc(x_100);
x_101 = lean::cnstr_get(x_95, 3);
lean::inc(x_101);
x_102 = lean::cnstr_get(x_95, 4);
lean::inc(x_102);
x_103 = lean::cnstr_get(x_95, 5);
lean::inc(x_103);
x_104 = lean::cnstr_get(x_95, 6);
lean::inc(x_104);
x_105 = lean::cnstr_get(x_95, 7);
lean::inc(x_105);
x_106 = lean::cnstr_get(x_95, 8);
lean::inc(x_106);
x_107 = lean::cnstr_get(x_95, 9);
lean::inc(x_107);
x_108 = lean::cnstr_get(x_95, 10);
lean::inc(x_108);
if (lean::is_exclusive(x_95)) {
 lean::cnstr_release(x_95, 0);
 lean::cnstr_release(x_95, 1);
 lean::cnstr_release(x_95, 2);
 lean::cnstr_release(x_95, 3);
 lean::cnstr_release(x_95, 4);
 lean::cnstr_release(x_95, 5);
 lean::cnstr_release(x_95, 6);
 lean::cnstr_release(x_95, 7);
 lean::cnstr_release(x_95, 8);
 lean::cnstr_release(x_95, 9);
 lean::cnstr_release(x_95, 10);
 x_109 = x_95;
} else {
 lean::dec_ref(x_95);
 x_109 = lean::box(0);
}
x_110 = lean::cnstr_get(x_96, 2);
lean::inc(x_110);
x_111 = lean::cnstr_get(x_96, 3);
lean::inc(x_111);
x_112 = lean::cnstr_get(x_96, 4);
lean::inc(x_112);
x_113 = lean::cnstr_get(x_96, 5);
lean::inc(x_113);
x_114 = lean::cnstr_get(x_96, 6);
lean::inc(x_114);
x_115 = lean::cnstr_get(x_96, 7);
lean::inc(x_115);
x_116 = lean::cnstr_get(x_96, 8);
lean::inc(x_116);
if (lean::is_exclusive(x_96)) {
 lean::cnstr_release(x_96, 0);
 lean::cnstr_release(x_96, 1);
 lean::cnstr_release(x_96, 2);
 lean::cnstr_release(x_96, 3);
 lean::cnstr_release(x_96, 4);
 lean::cnstr_release(x_96, 5);
 lean::cnstr_release(x_96, 6);
 lean::cnstr_release(x_96, 7);
 lean::cnstr_release(x_96, 8);
 x_117 = x_96;
} else {
 lean::dec_ref(x_96);
 x_117 = lean::box(0);
}
x_118 = l_Lean_Elaborator_section_elaborate___closed__1;
if (lean::is_scalar(x_117)) {
 x_119 = lean::alloc_cnstr(0, 9, 0);
} else {
 x_119 = x_117;
}
lean::cnstr_set(x_119, 0, x_118);
lean::cnstr_set(x_119, 1, x_94);
lean::cnstr_set(x_119, 2, x_110);
lean::cnstr_set(x_119, 3, x_111);
lean::cnstr_set(x_119, 4, x_112);
lean::cnstr_set(x_119, 5, x_113);
lean::cnstr_set(x_119, 6, x_114);
lean::cnstr_set(x_119, 7, x_115);
lean::cnstr_set(x_119, 8, x_116);
x_120 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_120, 0, x_119);
lean::cnstr_set(x_120, 1, x_102);
if (lean::is_scalar(x_109)) {
 x_121 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_121 = x_109;
}
lean::cnstr_set(x_121, 0, x_98);
lean::cnstr_set(x_121, 1, x_99);
lean::cnstr_set(x_121, 2, x_100);
lean::cnstr_set(x_121, 3, x_101);
lean::cnstr_set(x_121, 4, x_120);
lean::cnstr_set(x_121, 5, x_103);
lean::cnstr_set(x_121, 6, x_104);
lean::cnstr_set(x_121, 7, x_105);
lean::cnstr_set(x_121, 8, x_106);
lean::cnstr_set(x_121, 9, x_107);
lean::cnstr_set(x_121, 10, x_108);
x_122 = lean::box(0);
if (lean::is_scalar(x_97)) {
 x_123 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_123 = x_97;
}
lean::cnstr_set(x_123, 0, x_122);
lean::cnstr_set(x_123, 1, x_121);
x_124 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_124, 0, x_123);
return x_124;
}
}
}
}
}
obj* l_Lean_Elaborator_section_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_section_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* _init_l_Lean_Elaborator_namespace_elaborate___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("namespace");
return x_1;
}
}
obj* l_Lean_Elaborator_namespace_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_5 = l_Lean_Parser_command_namespace_HasView;
x_6 = lean::cnstr_get(x_5, 0);
lean::inc(x_6);
x_7 = lean::apply_1(x_6, x_1);
x_8 = lean::cnstr_get(x_7, 1);
lean::inc(x_8);
lean::dec(x_7);
x_9 = l_Lean_Elaborator_mangleIdent(x_8);
x_10 = l_Lean_Elaborator_currentScope(x_2, x_3, x_4);
if (lean::obj_tag(x_10) == 0)
{
uint8 x_11; 
lean::dec(x_9);
x_11 = !lean::is_exclusive(x_10);
if (x_11 == 0)
{
return x_10;
}
else
{
obj* x_12; obj* x_13; 
x_12 = lean::cnstr_get(x_10, 0);
lean::inc(x_12);
lean::dec(x_10);
x_13 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
}
else
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_14 = lean::cnstr_get(x_10, 0);
lean::inc(x_14);
lean::dec(x_10);
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
x_16 = lean::cnstr_get(x_14, 1);
lean::inc(x_16);
lean::dec(x_14);
x_17 = l_Lean_Elaborator_getNamespace(x_2, x_3, x_16);
if (lean::obj_tag(x_17) == 0)
{
uint8 x_18; 
lean::dec(x_15);
lean::dec(x_9);
x_18 = !lean::is_exclusive(x_17);
if (x_18 == 0)
{
return x_17;
}
else
{
obj* x_19; obj* x_20; 
x_19 = lean::cnstr_get(x_17, 0);
lean::inc(x_19);
lean::dec(x_17);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
else
{
uint8 x_21; 
x_21 = !lean::is_exclusive(x_17);
if (x_21 == 0)
{
obj* x_22; uint8 x_23; 
x_22 = lean::cnstr_get(x_17, 0);
x_23 = !lean::is_exclusive(x_22);
if (x_23 == 0)
{
uint8 x_24; 
x_24 = !lean::is_exclusive(x_15);
if (x_24 == 0)
{
obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; uint8 x_33; 
x_25 = lean::cnstr_get(x_22, 0);
x_26 = lean::cnstr_get(x_22, 1);
x_27 = lean::cnstr_get(x_15, 6);
x_28 = lean::cnstr_get(x_15, 1);
lean::dec(x_28);
x_29 = lean::cnstr_get(x_15, 0);
lean::dec(x_29);
lean::inc(x_9);
x_30 = l_Lean_Name_append___main(x_25, x_9);
lean::dec(x_25);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_27);
x_32 = l_Lean_Elaborator_namespace_elaborate___closed__1;
lean::cnstr_set(x_15, 6, x_31);
lean::cnstr_set(x_15, 1, x_9);
lean::cnstr_set(x_15, 0, x_32);
x_33 = !lean::is_exclusive(x_26);
if (x_33 == 0)
{
obj* x_34; obj* x_35; obj* x_36; 
x_34 = lean::cnstr_get(x_26, 4);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_15);
lean::cnstr_set(x_35, 1, x_34);
lean::cnstr_set(x_26, 4, x_35);
x_36 = lean::box(0);
lean::cnstr_set(x_22, 0, x_36);
return x_17;
}
else
{
obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; 
x_37 = lean::cnstr_get(x_26, 0);
x_38 = lean::cnstr_get(x_26, 1);
x_39 = lean::cnstr_get(x_26, 2);
x_40 = lean::cnstr_get(x_26, 3);
x_41 = lean::cnstr_get(x_26, 4);
x_42 = lean::cnstr_get(x_26, 5);
x_43 = lean::cnstr_get(x_26, 6);
x_44 = lean::cnstr_get(x_26, 7);
x_45 = lean::cnstr_get(x_26, 8);
x_46 = lean::cnstr_get(x_26, 9);
x_47 = lean::cnstr_get(x_26, 10);
lean::inc(x_47);
lean::inc(x_46);
lean::inc(x_45);
lean::inc(x_44);
lean::inc(x_43);
lean::inc(x_42);
lean::inc(x_41);
lean::inc(x_40);
lean::inc(x_39);
lean::inc(x_38);
lean::inc(x_37);
lean::dec(x_26);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_15);
lean::cnstr_set(x_48, 1, x_41);
x_49 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_49, 0, x_37);
lean::cnstr_set(x_49, 1, x_38);
lean::cnstr_set(x_49, 2, x_39);
lean::cnstr_set(x_49, 3, x_40);
lean::cnstr_set(x_49, 4, x_48);
lean::cnstr_set(x_49, 5, x_42);
lean::cnstr_set(x_49, 6, x_43);
lean::cnstr_set(x_49, 7, x_44);
lean::cnstr_set(x_49, 8, x_45);
lean::cnstr_set(x_49, 9, x_46);
lean::cnstr_set(x_49, 10, x_47);
x_50 = lean::box(0);
lean::cnstr_set(x_22, 1, x_49);
lean::cnstr_set(x_22, 0, x_50);
return x_17;
}
}
else
{
obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; 
x_51 = lean::cnstr_get(x_22, 0);
x_52 = lean::cnstr_get(x_22, 1);
x_53 = lean::cnstr_get(x_15, 2);
x_54 = lean::cnstr_get(x_15, 3);
x_55 = lean::cnstr_get(x_15, 4);
x_56 = lean::cnstr_get(x_15, 5);
x_57 = lean::cnstr_get(x_15, 6);
x_58 = lean::cnstr_get(x_15, 7);
x_59 = lean::cnstr_get(x_15, 8);
lean::inc(x_59);
lean::inc(x_58);
lean::inc(x_57);
lean::inc(x_56);
lean::inc(x_55);
lean::inc(x_54);
lean::inc(x_53);
lean::dec(x_15);
lean::inc(x_9);
x_60 = l_Lean_Name_append___main(x_51, x_9);
lean::dec(x_51);
x_61 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_61, 0, x_60);
lean::cnstr_set(x_61, 1, x_57);
x_62 = l_Lean_Elaborator_namespace_elaborate___closed__1;
x_63 = lean::alloc_cnstr(0, 9, 0);
lean::cnstr_set(x_63, 0, x_62);
lean::cnstr_set(x_63, 1, x_9);
lean::cnstr_set(x_63, 2, x_53);
lean::cnstr_set(x_63, 3, x_54);
lean::cnstr_set(x_63, 4, x_55);
lean::cnstr_set(x_63, 5, x_56);
lean::cnstr_set(x_63, 6, x_61);
lean::cnstr_set(x_63, 7, x_58);
lean::cnstr_set(x_63, 8, x_59);
x_64 = lean::cnstr_get(x_52, 0);
lean::inc(x_64);
x_65 = lean::cnstr_get(x_52, 1);
lean::inc(x_65);
x_66 = lean::cnstr_get(x_52, 2);
lean::inc(x_66);
x_67 = lean::cnstr_get(x_52, 3);
lean::inc(x_67);
x_68 = lean::cnstr_get(x_52, 4);
lean::inc(x_68);
x_69 = lean::cnstr_get(x_52, 5);
lean::inc(x_69);
x_70 = lean::cnstr_get(x_52, 6);
lean::inc(x_70);
x_71 = lean::cnstr_get(x_52, 7);
lean::inc(x_71);
x_72 = lean::cnstr_get(x_52, 8);
lean::inc(x_72);
x_73 = lean::cnstr_get(x_52, 9);
lean::inc(x_73);
x_74 = lean::cnstr_get(x_52, 10);
lean::inc(x_74);
if (lean::is_exclusive(x_52)) {
 lean::cnstr_release(x_52, 0);
 lean::cnstr_release(x_52, 1);
 lean::cnstr_release(x_52, 2);
 lean::cnstr_release(x_52, 3);
 lean::cnstr_release(x_52, 4);
 lean::cnstr_release(x_52, 5);
 lean::cnstr_release(x_52, 6);
 lean::cnstr_release(x_52, 7);
 lean::cnstr_release(x_52, 8);
 lean::cnstr_release(x_52, 9);
 lean::cnstr_release(x_52, 10);
 x_75 = x_52;
} else {
 lean::dec_ref(x_52);
 x_75 = lean::box(0);
}
x_76 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_76, 0, x_63);
lean::cnstr_set(x_76, 1, x_68);
if (lean::is_scalar(x_75)) {
 x_77 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_77 = x_75;
}
lean::cnstr_set(x_77, 0, x_64);
lean::cnstr_set(x_77, 1, x_65);
lean::cnstr_set(x_77, 2, x_66);
lean::cnstr_set(x_77, 3, x_67);
lean::cnstr_set(x_77, 4, x_76);
lean::cnstr_set(x_77, 5, x_69);
lean::cnstr_set(x_77, 6, x_70);
lean::cnstr_set(x_77, 7, x_71);
lean::cnstr_set(x_77, 8, x_72);
lean::cnstr_set(x_77, 9, x_73);
lean::cnstr_set(x_77, 10, x_74);
x_78 = lean::box(0);
lean::cnstr_set(x_22, 1, x_77);
lean::cnstr_set(x_22, 0, x_78);
return x_17;
}
}
else
{
obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; obj* x_108; 
x_79 = lean::cnstr_get(x_22, 0);
x_80 = lean::cnstr_get(x_22, 1);
lean::inc(x_80);
lean::inc(x_79);
lean::dec(x_22);
x_81 = lean::cnstr_get(x_15, 2);
lean::inc(x_81);
x_82 = lean::cnstr_get(x_15, 3);
lean::inc(x_82);
x_83 = lean::cnstr_get(x_15, 4);
lean::inc(x_83);
x_84 = lean::cnstr_get(x_15, 5);
lean::inc(x_84);
x_85 = lean::cnstr_get(x_15, 6);
lean::inc(x_85);
x_86 = lean::cnstr_get(x_15, 7);
lean::inc(x_86);
x_87 = lean::cnstr_get(x_15, 8);
lean::inc(x_87);
if (lean::is_exclusive(x_15)) {
 lean::cnstr_release(x_15, 0);
 lean::cnstr_release(x_15, 1);
 lean::cnstr_release(x_15, 2);
 lean::cnstr_release(x_15, 3);
 lean::cnstr_release(x_15, 4);
 lean::cnstr_release(x_15, 5);
 lean::cnstr_release(x_15, 6);
 lean::cnstr_release(x_15, 7);
 lean::cnstr_release(x_15, 8);
 x_88 = x_15;
} else {
 lean::dec_ref(x_15);
 x_88 = lean::box(0);
}
lean::inc(x_9);
x_89 = l_Lean_Name_append___main(x_79, x_9);
lean::dec(x_79);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_89);
lean::cnstr_set(x_90, 1, x_85);
x_91 = l_Lean_Elaborator_namespace_elaborate___closed__1;
if (lean::is_scalar(x_88)) {
 x_92 = lean::alloc_cnstr(0, 9, 0);
} else {
 x_92 = x_88;
}
lean::cnstr_set(x_92, 0, x_91);
lean::cnstr_set(x_92, 1, x_9);
lean::cnstr_set(x_92, 2, x_81);
lean::cnstr_set(x_92, 3, x_82);
lean::cnstr_set(x_92, 4, x_83);
lean::cnstr_set(x_92, 5, x_84);
lean::cnstr_set(x_92, 6, x_90);
lean::cnstr_set(x_92, 7, x_86);
lean::cnstr_set(x_92, 8, x_87);
x_93 = lean::cnstr_get(x_80, 0);
lean::inc(x_93);
x_94 = lean::cnstr_get(x_80, 1);
lean::inc(x_94);
x_95 = lean::cnstr_get(x_80, 2);
lean::inc(x_95);
x_96 = lean::cnstr_get(x_80, 3);
lean::inc(x_96);
x_97 = lean::cnstr_get(x_80, 4);
lean::inc(x_97);
x_98 = lean::cnstr_get(x_80, 5);
lean::inc(x_98);
x_99 = lean::cnstr_get(x_80, 6);
lean::inc(x_99);
x_100 = lean::cnstr_get(x_80, 7);
lean::inc(x_100);
x_101 = lean::cnstr_get(x_80, 8);
lean::inc(x_101);
x_102 = lean::cnstr_get(x_80, 9);
lean::inc(x_102);
x_103 = lean::cnstr_get(x_80, 10);
lean::inc(x_103);
if (lean::is_exclusive(x_80)) {
 lean::cnstr_release(x_80, 0);
 lean::cnstr_release(x_80, 1);
 lean::cnstr_release(x_80, 2);
 lean::cnstr_release(x_80, 3);
 lean::cnstr_release(x_80, 4);
 lean::cnstr_release(x_80, 5);
 lean::cnstr_release(x_80, 6);
 lean::cnstr_release(x_80, 7);
 lean::cnstr_release(x_80, 8);
 lean::cnstr_release(x_80, 9);
 lean::cnstr_release(x_80, 10);
 x_104 = x_80;
} else {
 lean::dec_ref(x_80);
 x_104 = lean::box(0);
}
x_105 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_105, 0, x_92);
lean::cnstr_set(x_105, 1, x_97);
if (lean::is_scalar(x_104)) {
 x_106 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_106 = x_104;
}
lean::cnstr_set(x_106, 0, x_93);
lean::cnstr_set(x_106, 1, x_94);
lean::cnstr_set(x_106, 2, x_95);
lean::cnstr_set(x_106, 3, x_96);
lean::cnstr_set(x_106, 4, x_105);
lean::cnstr_set(x_106, 5, x_98);
lean::cnstr_set(x_106, 6, x_99);
lean::cnstr_set(x_106, 7, x_100);
lean::cnstr_set(x_106, 8, x_101);
lean::cnstr_set(x_106, 9, x_102);
lean::cnstr_set(x_106, 10, x_103);
x_107 = lean::box(0);
x_108 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_108, 0, x_107);
lean::cnstr_set(x_108, 1, x_106);
lean::cnstr_set(x_17, 0, x_108);
return x_17;
}
}
else
{
obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; obj* x_129; obj* x_130; obj* x_131; obj* x_132; obj* x_133; obj* x_134; obj* x_135; obj* x_136; obj* x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_141; 
x_109 = lean::cnstr_get(x_17, 0);
lean::inc(x_109);
lean::dec(x_17);
x_110 = lean::cnstr_get(x_109, 0);
lean::inc(x_110);
x_111 = lean::cnstr_get(x_109, 1);
lean::inc(x_111);
if (lean::is_exclusive(x_109)) {
 lean::cnstr_release(x_109, 0);
 lean::cnstr_release(x_109, 1);
 x_112 = x_109;
} else {
 lean::dec_ref(x_109);
 x_112 = lean::box(0);
}
x_113 = lean::cnstr_get(x_15, 2);
lean::inc(x_113);
x_114 = lean::cnstr_get(x_15, 3);
lean::inc(x_114);
x_115 = lean::cnstr_get(x_15, 4);
lean::inc(x_115);
x_116 = lean::cnstr_get(x_15, 5);
lean::inc(x_116);
x_117 = lean::cnstr_get(x_15, 6);
lean::inc(x_117);
x_118 = lean::cnstr_get(x_15, 7);
lean::inc(x_118);
x_119 = lean::cnstr_get(x_15, 8);
lean::inc(x_119);
if (lean::is_exclusive(x_15)) {
 lean::cnstr_release(x_15, 0);
 lean::cnstr_release(x_15, 1);
 lean::cnstr_release(x_15, 2);
 lean::cnstr_release(x_15, 3);
 lean::cnstr_release(x_15, 4);
 lean::cnstr_release(x_15, 5);
 lean::cnstr_release(x_15, 6);
 lean::cnstr_release(x_15, 7);
 lean::cnstr_release(x_15, 8);
 x_120 = x_15;
} else {
 lean::dec_ref(x_15);
 x_120 = lean::box(0);
}
lean::inc(x_9);
x_121 = l_Lean_Name_append___main(x_110, x_9);
lean::dec(x_110);
x_122 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_122, 0, x_121);
lean::cnstr_set(x_122, 1, x_117);
x_123 = l_Lean_Elaborator_namespace_elaborate___closed__1;
if (lean::is_scalar(x_120)) {
 x_124 = lean::alloc_cnstr(0, 9, 0);
} else {
 x_124 = x_120;
}
lean::cnstr_set(x_124, 0, x_123);
lean::cnstr_set(x_124, 1, x_9);
lean::cnstr_set(x_124, 2, x_113);
lean::cnstr_set(x_124, 3, x_114);
lean::cnstr_set(x_124, 4, x_115);
lean::cnstr_set(x_124, 5, x_116);
lean::cnstr_set(x_124, 6, x_122);
lean::cnstr_set(x_124, 7, x_118);
lean::cnstr_set(x_124, 8, x_119);
x_125 = lean::cnstr_get(x_111, 0);
lean::inc(x_125);
x_126 = lean::cnstr_get(x_111, 1);
lean::inc(x_126);
x_127 = lean::cnstr_get(x_111, 2);
lean::inc(x_127);
x_128 = lean::cnstr_get(x_111, 3);
lean::inc(x_128);
x_129 = lean::cnstr_get(x_111, 4);
lean::inc(x_129);
x_130 = lean::cnstr_get(x_111, 5);
lean::inc(x_130);
x_131 = lean::cnstr_get(x_111, 6);
lean::inc(x_131);
x_132 = lean::cnstr_get(x_111, 7);
lean::inc(x_132);
x_133 = lean::cnstr_get(x_111, 8);
lean::inc(x_133);
x_134 = lean::cnstr_get(x_111, 9);
lean::inc(x_134);
x_135 = lean::cnstr_get(x_111, 10);
lean::inc(x_135);
if (lean::is_exclusive(x_111)) {
 lean::cnstr_release(x_111, 0);
 lean::cnstr_release(x_111, 1);
 lean::cnstr_release(x_111, 2);
 lean::cnstr_release(x_111, 3);
 lean::cnstr_release(x_111, 4);
 lean::cnstr_release(x_111, 5);
 lean::cnstr_release(x_111, 6);
 lean::cnstr_release(x_111, 7);
 lean::cnstr_release(x_111, 8);
 lean::cnstr_release(x_111, 9);
 lean::cnstr_release(x_111, 10);
 x_136 = x_111;
} else {
 lean::dec_ref(x_111);
 x_136 = lean::box(0);
}
x_137 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_137, 0, x_124);
lean::cnstr_set(x_137, 1, x_129);
if (lean::is_scalar(x_136)) {
 x_138 = lean::alloc_cnstr(0, 11, 0);
} else {
 x_138 = x_136;
}
lean::cnstr_set(x_138, 0, x_125);
lean::cnstr_set(x_138, 1, x_126);
lean::cnstr_set(x_138, 2, x_127);
lean::cnstr_set(x_138, 3, x_128);
lean::cnstr_set(x_138, 4, x_137);
lean::cnstr_set(x_138, 5, x_130);
lean::cnstr_set(x_138, 6, x_131);
lean::cnstr_set(x_138, 7, x_132);
lean::cnstr_set(x_138, 8, x_133);
lean::cnstr_set(x_138, 9, x_134);
lean::cnstr_set(x_138, 10, x_135);
x_139 = lean::box(0);
if (lean::is_scalar(x_112)) {
 x_140 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_140 = x_112;
}
lean::cnstr_set(x_140, 0, x_139);
lean::cnstr_set(x_140, 1, x_138);
x_141 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_141, 0, x_140);
return x_141;
}
}
}
}
}
obj* l_Lean_Elaborator_namespace_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_namespace_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* _init_l_Lean_Elaborator_eoi_elaborate___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("invalid end of input, expected 'end'");
return x_1;
}
}
obj* l_Lean_Elaborator_eoi_elaborate(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; uint8 x_9; 
x_5 = lean::cnstr_get(x_4, 4);
lean::inc(x_5);
x_6 = lean::mk_nat_obj(0u);
x_7 = l_List_lengthAux___main___rarg(x_5, x_6);
lean::dec(x_5);
x_8 = lean::mk_nat_obj(1u);
x_9 = lean::nat_dec_lt(x_8, x_7);
lean::dec(x_7);
if (x_9 == 0)
{
obj* x_10; obj* x_11; obj* x_12; 
lean::dec(x_1);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_11, 0, x_10);
lean::cnstr_set(x_11, 1, x_4);
x_12 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_12, 0, x_11);
return x_12;
}
else
{
obj* x_13; obj* x_14; obj* x_15; 
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_1);
x_14 = l_Lean_Elaborator_eoi_elaborate___closed__1;
x_15 = l_Lean_Expander_error___at_Lean_Elaborator_currentScope___spec__1___rarg(x_13, x_14, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_13);
return x_15;
}
}
}
obj* l_Lean_Elaborator_eoi_elaborate___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_eoi_elaborate(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
uint8 x_4; obj* x_5; 
x_4 = 0;
x_5 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_5, 0, x_1);
lean::cnstr_set(x_5, 1, x_2);
lean::cnstr_set(x_5, 2, x_3);
lean::cnstr_set(x_5, 3, x_1);
lean::cnstr_set_scalar(x_5, sizeof(void*)*4, x_4);
return x_5;
}
else
{
uint8 x_6; 
x_6 = lean::cnstr_get_scalar<uint8>(x_1, sizeof(void*)*4);
if (x_6 == 0)
{
uint8 x_7; 
x_7 = !lean::is_exclusive(x_1);
if (x_7 == 0)
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; uint8 x_12; 
x_8 = lean::cnstr_get(x_1, 0);
x_9 = lean::cnstr_get(x_1, 1);
x_10 = lean::cnstr_get(x_1, 2);
x_11 = lean::cnstr_get(x_1, 3);
x_12 = l_Lean_Name_quickLt(x_2, x_9);
if (x_12 == 0)
{
uint8 x_13; 
x_13 = l_Lean_Name_quickLt(x_9, x_2);
if (x_13 == 0)
{
lean::dec(x_10);
lean::dec(x_9);
lean::cnstr_set(x_1, 2, x_3);
lean::cnstr_set(x_1, 1, x_2);
return x_1;
}
else
{
obj* x_14; 
x_14 = l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(x_11, x_2, x_3);
lean::cnstr_set(x_1, 3, x_14);
return x_1;
}
}
else
{
obj* x_15; 
x_15 = l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(x_8, x_2, x_3);
lean::cnstr_set(x_1, 0, x_15);
return x_1;
}
}
else
{
obj* x_16; obj* x_17; obj* x_18; obj* x_19; uint8 x_20; 
x_16 = lean::cnstr_get(x_1, 0);
x_17 = lean::cnstr_get(x_1, 1);
x_18 = lean::cnstr_get(x_1, 2);
x_19 = lean::cnstr_get(x_1, 3);
lean::inc(x_19);
lean::inc(x_18);
lean::inc(x_17);
lean::inc(x_16);
lean::dec(x_1);
x_20 = l_Lean_Name_quickLt(x_2, x_17);
if (x_20 == 0)
{
uint8 x_21; 
x_21 = l_Lean_Name_quickLt(x_17, x_2);
if (x_21 == 0)
{
obj* x_22; 
lean::dec(x_18);
lean::dec(x_17);
x_22 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_22, 0, x_16);
lean::cnstr_set(x_22, 1, x_2);
lean::cnstr_set(x_22, 2, x_3);
lean::cnstr_set(x_22, 3, x_19);
lean::cnstr_set_scalar(x_22, sizeof(void*)*4, x_6);
return x_22;
}
else
{
obj* x_23; obj* x_24; 
x_23 = l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(x_19, x_2, x_3);
x_24 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_24, 0, x_16);
lean::cnstr_set(x_24, 1, x_17);
lean::cnstr_set(x_24, 2, x_18);
lean::cnstr_set(x_24, 3, x_23);
lean::cnstr_set_scalar(x_24, sizeof(void*)*4, x_6);
return x_24;
}
}
else
{
obj* x_25; obj* x_26; 
x_25 = l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(x_16, x_2, x_3);
x_26 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_17);
lean::cnstr_set(x_26, 2, x_18);
lean::cnstr_set(x_26, 3, x_19);
lean::cnstr_set_scalar(x_26, sizeof(void*)*4, x_6);
return x_26;
}
}
}
else
{
uint8 x_27; 
x_27 = !lean::is_exclusive(x_1);
if (x_27 == 0)
{
obj* x_28; obj* x_29; obj* x_30; obj* x_31; uint8 x_32; 
x_28 = lean::cnstr_get(x_1, 0);
x_29 = lean::cnstr_get(x_1, 1);
x_30 = lean::cnstr_get(x_1, 2);
x_31 = lean::cnstr_get(x_1, 3);
x_32 = l_Lean_Name_quickLt(x_2, x_29);
if (x_32 == 0)
{
uint8 x_33; 
x_33 = l_Lean_Name_quickLt(x_29, x_2);
if (x_33 == 0)
{
lean::dec(x_30);
lean::dec(x_29);
lean::cnstr_set(x_1, 2, x_3);
lean::cnstr_set(x_1, 1, x_2);
return x_1;
}
else
{
uint8 x_34; 
x_34 = l_RBNode_isRed___main___rarg(x_31);
if (x_34 == 0)
{
obj* x_35; 
x_35 = l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(x_31, x_2, x_3);
lean::cnstr_set(x_1, 3, x_35);
return x_1;
}
else
{
obj* x_36; 
x_36 = l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(x_31, x_2, x_3);
if (lean::obj_tag(x_36) == 0)
{
lean::free_heap_obj(x_1);
lean::dec(x_30);
lean::dec(x_29);
lean::dec(x_28);
return x_36;
}
else
{
obj* x_37; 
x_37 = lean::cnstr_get(x_36, 0);
lean::inc(x_37);
if (lean::obj_tag(x_37) == 0)
{
obj* x_38; 
x_38 = lean::cnstr_get(x_36, 3);
lean::inc(x_38);
if (lean::obj_tag(x_38) == 0)
{
uint8 x_39; 
x_39 = !lean::is_exclusive(x_36);
if (x_39 == 0)
{
obj* x_40; obj* x_41; uint8 x_42; uint8 x_43; 
x_40 = lean::cnstr_get(x_36, 3);
lean::dec(x_40);
x_41 = lean::cnstr_get(x_36, 0);
lean::dec(x_41);
x_42 = 0;
lean::cnstr_set(x_36, 0, x_38);
lean::cnstr_set_scalar(x_36, sizeof(void*)*4, x_42);
x_43 = 1;
lean::cnstr_set(x_1, 3, x_36);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_43);
return x_1;
}
else
{
obj* x_44; obj* x_45; uint8 x_46; obj* x_47; uint8 x_48; 
x_44 = lean::cnstr_get(x_36, 1);
x_45 = lean::cnstr_get(x_36, 2);
lean::inc(x_45);
lean::inc(x_44);
lean::dec(x_36);
x_46 = 0;
x_47 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_47, 0, x_38);
lean::cnstr_set(x_47, 1, x_44);
lean::cnstr_set(x_47, 2, x_45);
lean::cnstr_set(x_47, 3, x_38);
lean::cnstr_set_scalar(x_47, sizeof(void*)*4, x_46);
x_48 = 1;
lean::cnstr_set(x_1, 3, x_47);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_48);
return x_1;
}
}
else
{
uint8 x_49; 
x_49 = lean::cnstr_get_scalar<uint8>(x_38, sizeof(void*)*4);
if (x_49 == 0)
{
uint8 x_50; 
x_50 = !lean::is_exclusive(x_36);
if (x_50 == 0)
{
obj* x_51; obj* x_52; obj* x_53; obj* x_54; uint8 x_55; 
x_51 = lean::cnstr_get(x_36, 1);
x_52 = lean::cnstr_get(x_36, 2);
x_53 = lean::cnstr_get(x_36, 3);
lean::dec(x_53);
x_54 = lean::cnstr_get(x_36, 0);
lean::dec(x_54);
x_55 = !lean::is_exclusive(x_38);
if (x_55 == 0)
{
obj* x_56; obj* x_57; obj* x_58; obj* x_59; uint8 x_60; 
x_56 = lean::cnstr_get(x_38, 0);
x_57 = lean::cnstr_get(x_38, 1);
x_58 = lean::cnstr_get(x_38, 2);
x_59 = lean::cnstr_get(x_38, 3);
x_60 = 1;
lean::cnstr_set(x_38, 3, x_37);
lean::cnstr_set(x_38, 2, x_30);
lean::cnstr_set(x_38, 1, x_29);
lean::cnstr_set(x_38, 0, x_28);
lean::cnstr_set_scalar(x_38, sizeof(void*)*4, x_60);
lean::cnstr_set(x_36, 3, x_59);
lean::cnstr_set(x_36, 2, x_58);
lean::cnstr_set(x_36, 1, x_57);
lean::cnstr_set(x_36, 0, x_56);
lean::cnstr_set_scalar(x_36, sizeof(void*)*4, x_60);
lean::cnstr_set(x_1, 3, x_36);
lean::cnstr_set(x_1, 2, x_52);
lean::cnstr_set(x_1, 1, x_51);
lean::cnstr_set(x_1, 0, x_38);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_49);
return x_1;
}
else
{
obj* x_61; obj* x_62; obj* x_63; obj* x_64; uint8 x_65; obj* x_66; 
x_61 = lean::cnstr_get(x_38, 0);
x_62 = lean::cnstr_get(x_38, 1);
x_63 = lean::cnstr_get(x_38, 2);
x_64 = lean::cnstr_get(x_38, 3);
lean::inc(x_64);
lean::inc(x_63);
lean::inc(x_62);
lean::inc(x_61);
lean::dec(x_38);
x_65 = 1;
x_66 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_66, 0, x_28);
lean::cnstr_set(x_66, 1, x_29);
lean::cnstr_set(x_66, 2, x_30);
lean::cnstr_set(x_66, 3, x_37);
lean::cnstr_set_scalar(x_66, sizeof(void*)*4, x_65);
lean::cnstr_set(x_36, 3, x_64);
lean::cnstr_set(x_36, 2, x_63);
lean::cnstr_set(x_36, 1, x_62);
lean::cnstr_set(x_36, 0, x_61);
lean::cnstr_set_scalar(x_36, sizeof(void*)*4, x_65);
lean::cnstr_set(x_1, 3, x_36);
lean::cnstr_set(x_1, 2, x_52);
lean::cnstr_set(x_1, 1, x_51);
lean::cnstr_set(x_1, 0, x_66);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_49);
return x_1;
}
}
else
{
obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; uint8 x_74; obj* x_75; obj* x_76; 
x_67 = lean::cnstr_get(x_36, 1);
x_68 = lean::cnstr_get(x_36, 2);
lean::inc(x_68);
lean::inc(x_67);
lean::dec(x_36);
x_69 = lean::cnstr_get(x_38, 0);
lean::inc(x_69);
x_70 = lean::cnstr_get(x_38, 1);
lean::inc(x_70);
x_71 = lean::cnstr_get(x_38, 2);
lean::inc(x_71);
x_72 = lean::cnstr_get(x_38, 3);
lean::inc(x_72);
if (lean::is_exclusive(x_38)) {
 lean::cnstr_release(x_38, 0);
 lean::cnstr_release(x_38, 1);
 lean::cnstr_release(x_38, 2);
 lean::cnstr_release(x_38, 3);
 x_73 = x_38;
} else {
 lean::dec_ref(x_38);
 x_73 = lean::box(0);
}
x_74 = 1;
if (lean::is_scalar(x_73)) {
 x_75 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_75 = x_73;
}
lean::cnstr_set(x_75, 0, x_28);
lean::cnstr_set(x_75, 1, x_29);
lean::cnstr_set(x_75, 2, x_30);
lean::cnstr_set(x_75, 3, x_37);
lean::cnstr_set_scalar(x_75, sizeof(void*)*4, x_74);
x_76 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_76, 0, x_69);
lean::cnstr_set(x_76, 1, x_70);
lean::cnstr_set(x_76, 2, x_71);
lean::cnstr_set(x_76, 3, x_72);
lean::cnstr_set_scalar(x_76, sizeof(void*)*4, x_74);
lean::cnstr_set(x_1, 3, x_76);
lean::cnstr_set(x_1, 2, x_68);
lean::cnstr_set(x_1, 1, x_67);
lean::cnstr_set(x_1, 0, x_75);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_49);
return x_1;
}
}
else
{
uint8 x_77; 
x_77 = !lean::is_exclusive(x_36);
if (x_77 == 0)
{
obj* x_78; obj* x_79; uint8 x_80; 
x_78 = lean::cnstr_get(x_36, 3);
lean::dec(x_78);
x_79 = lean::cnstr_get(x_36, 0);
lean::dec(x_79);
x_80 = 0;
lean::cnstr_set_scalar(x_36, sizeof(void*)*4, x_80);
lean::cnstr_set(x_1, 3, x_36);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_49);
return x_1;
}
else
{
obj* x_81; obj* x_82; uint8 x_83; obj* x_84; 
x_81 = lean::cnstr_get(x_36, 1);
x_82 = lean::cnstr_get(x_36, 2);
lean::inc(x_82);
lean::inc(x_81);
lean::dec(x_36);
x_83 = 0;
x_84 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_84, 0, x_37);
lean::cnstr_set(x_84, 1, x_81);
lean::cnstr_set(x_84, 2, x_82);
lean::cnstr_set(x_84, 3, x_38);
lean::cnstr_set_scalar(x_84, sizeof(void*)*4, x_83);
lean::cnstr_set(x_1, 3, x_84);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_49);
return x_1;
}
}
}
}
else
{
uint8 x_85; 
x_85 = lean::cnstr_get_scalar<uint8>(x_37, sizeof(void*)*4);
if (x_85 == 0)
{
uint8 x_86; 
x_86 = !lean::is_exclusive(x_36);
if (x_86 == 0)
{
obj* x_87; uint8 x_88; 
x_87 = lean::cnstr_get(x_36, 0);
lean::dec(x_87);
x_88 = !lean::is_exclusive(x_37);
if (x_88 == 0)
{
obj* x_89; obj* x_90; obj* x_91; obj* x_92; uint8 x_93; 
x_89 = lean::cnstr_get(x_37, 0);
x_90 = lean::cnstr_get(x_37, 1);
x_91 = lean::cnstr_get(x_37, 2);
x_92 = lean::cnstr_get(x_37, 3);
x_93 = 1;
lean::cnstr_set(x_37, 3, x_89);
lean::cnstr_set(x_37, 2, x_30);
lean::cnstr_set(x_37, 1, x_29);
lean::cnstr_set(x_37, 0, x_28);
lean::cnstr_set_scalar(x_37, sizeof(void*)*4, x_93);
lean::cnstr_set(x_36, 0, x_92);
lean::cnstr_set_scalar(x_36, sizeof(void*)*4, x_93);
lean::cnstr_set(x_1, 3, x_36);
lean::cnstr_set(x_1, 2, x_91);
lean::cnstr_set(x_1, 1, x_90);
lean::cnstr_set(x_1, 0, x_37);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_85);
return x_1;
}
else
{
obj* x_94; obj* x_95; obj* x_96; obj* x_97; uint8 x_98; obj* x_99; 
x_94 = lean::cnstr_get(x_37, 0);
x_95 = lean::cnstr_get(x_37, 1);
x_96 = lean::cnstr_get(x_37, 2);
x_97 = lean::cnstr_get(x_37, 3);
lean::inc(x_97);
lean::inc(x_96);
lean::inc(x_95);
lean::inc(x_94);
lean::dec(x_37);
x_98 = 1;
x_99 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_99, 0, x_28);
lean::cnstr_set(x_99, 1, x_29);
lean::cnstr_set(x_99, 2, x_30);
lean::cnstr_set(x_99, 3, x_94);
lean::cnstr_set_scalar(x_99, sizeof(void*)*4, x_98);
lean::cnstr_set(x_36, 0, x_97);
lean::cnstr_set_scalar(x_36, sizeof(void*)*4, x_98);
lean::cnstr_set(x_1, 3, x_36);
lean::cnstr_set(x_1, 2, x_96);
lean::cnstr_set(x_1, 1, x_95);
lean::cnstr_set(x_1, 0, x_99);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_85);
return x_1;
}
}
else
{
obj* x_100; obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; uint8 x_108; obj* x_109; obj* x_110; 
x_100 = lean::cnstr_get(x_36, 1);
x_101 = lean::cnstr_get(x_36, 2);
x_102 = lean::cnstr_get(x_36, 3);
lean::inc(x_102);
lean::inc(x_101);
lean::inc(x_100);
lean::dec(x_36);
x_103 = lean::cnstr_get(x_37, 0);
lean::inc(x_103);
x_104 = lean::cnstr_get(x_37, 1);
lean::inc(x_104);
x_105 = lean::cnstr_get(x_37, 2);
lean::inc(x_105);
x_106 = lean::cnstr_get(x_37, 3);
lean::inc(x_106);
if (lean::is_exclusive(x_37)) {
 lean::cnstr_release(x_37, 0);
 lean::cnstr_release(x_37, 1);
 lean::cnstr_release(x_37, 2);
 lean::cnstr_release(x_37, 3);
 x_107 = x_37;
} else {
 lean::dec_ref(x_37);
 x_107 = lean::box(0);
}
x_108 = 1;
if (lean::is_scalar(x_107)) {
 x_109 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_109 = x_107;
}
lean::cnstr_set(x_109, 0, x_28);
lean::cnstr_set(x_109, 1, x_29);
lean::cnstr_set(x_109, 2, x_30);
lean::cnstr_set(x_109, 3, x_103);
lean::cnstr_set_scalar(x_109, sizeof(void*)*4, x_108);
x_110 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_110, 0, x_106);
lean::cnstr_set(x_110, 1, x_100);
lean::cnstr_set(x_110, 2, x_101);
lean::cnstr_set(x_110, 3, x_102);
lean::cnstr_set_scalar(x_110, sizeof(void*)*4, x_108);
lean::cnstr_set(x_1, 3, x_110);
lean::cnstr_set(x_1, 2, x_105);
lean::cnstr_set(x_1, 1, x_104);
lean::cnstr_set(x_1, 0, x_109);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_85);
return x_1;
}
}
else
{
obj* x_111; 
x_111 = lean::cnstr_get(x_36, 3);
lean::inc(x_111);
if (lean::obj_tag(x_111) == 0)
{
uint8 x_112; 
x_112 = !lean::is_exclusive(x_36);
if (x_112 == 0)
{
obj* x_113; obj* x_114; uint8 x_115; 
x_113 = lean::cnstr_get(x_36, 3);
lean::dec(x_113);
x_114 = lean::cnstr_get(x_36, 0);
lean::dec(x_114);
x_115 = 0;
lean::cnstr_set_scalar(x_36, sizeof(void*)*4, x_115);
lean::cnstr_set(x_1, 3, x_36);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_85);
return x_1;
}
else
{
obj* x_116; obj* x_117; uint8 x_118; obj* x_119; 
x_116 = lean::cnstr_get(x_36, 1);
x_117 = lean::cnstr_get(x_36, 2);
lean::inc(x_117);
lean::inc(x_116);
lean::dec(x_36);
x_118 = 0;
x_119 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_119, 0, x_37);
lean::cnstr_set(x_119, 1, x_116);
lean::cnstr_set(x_119, 2, x_117);
lean::cnstr_set(x_119, 3, x_111);
lean::cnstr_set_scalar(x_119, sizeof(void*)*4, x_118);
lean::cnstr_set(x_1, 3, x_119);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_85);
return x_1;
}
}
else
{
uint8 x_120; 
x_120 = lean::cnstr_get_scalar<uint8>(x_111, sizeof(void*)*4);
if (x_120 == 0)
{
uint8 x_121; 
lean::free_heap_obj(x_1);
x_121 = !lean::is_exclusive(x_36);
if (x_121 == 0)
{
obj* x_122; obj* x_123; uint8 x_124; 
x_122 = lean::cnstr_get(x_36, 3);
lean::dec(x_122);
x_123 = lean::cnstr_get(x_36, 0);
lean::dec(x_123);
x_124 = !lean::is_exclusive(x_111);
if (x_124 == 0)
{
obj* x_125; obj* x_126; obj* x_127; obj* x_128; uint8 x_129; 
x_125 = lean::cnstr_get(x_111, 0);
x_126 = lean::cnstr_get(x_111, 1);
x_127 = lean::cnstr_get(x_111, 2);
x_128 = lean::cnstr_get(x_111, 3);
lean::inc(x_37);
lean::cnstr_set(x_111, 3, x_37);
lean::cnstr_set(x_111, 2, x_30);
lean::cnstr_set(x_111, 1, x_29);
lean::cnstr_set(x_111, 0, x_28);
x_129 = !lean::is_exclusive(x_37);
if (x_129 == 0)
{
obj* x_130; obj* x_131; obj* x_132; obj* x_133; 
x_130 = lean::cnstr_get(x_37, 3);
lean::dec(x_130);
x_131 = lean::cnstr_get(x_37, 2);
lean::dec(x_131);
x_132 = lean::cnstr_get(x_37, 1);
lean::dec(x_132);
x_133 = lean::cnstr_get(x_37, 0);
lean::dec(x_133);
lean::cnstr_set_scalar(x_111, sizeof(void*)*4, x_85);
lean::cnstr_set(x_37, 3, x_128);
lean::cnstr_set(x_37, 2, x_127);
lean::cnstr_set(x_37, 1, x_126);
lean::cnstr_set(x_37, 0, x_125);
lean::cnstr_set(x_36, 3, x_37);
lean::cnstr_set(x_36, 0, x_111);
lean::cnstr_set_scalar(x_36, sizeof(void*)*4, x_120);
return x_36;
}
else
{
obj* x_134; 
lean::dec(x_37);
lean::cnstr_set_scalar(x_111, sizeof(void*)*4, x_85);
x_134 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_134, 0, x_125);
lean::cnstr_set(x_134, 1, x_126);
lean::cnstr_set(x_134, 2, x_127);
lean::cnstr_set(x_134, 3, x_128);
lean::cnstr_set_scalar(x_134, sizeof(void*)*4, x_85);
lean::cnstr_set(x_36, 3, x_134);
lean::cnstr_set(x_36, 0, x_111);
lean::cnstr_set_scalar(x_36, sizeof(void*)*4, x_120);
return x_36;
}
}
else
{
obj* x_135; obj* x_136; obj* x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_141; 
x_135 = lean::cnstr_get(x_111, 0);
x_136 = lean::cnstr_get(x_111, 1);
x_137 = lean::cnstr_get(x_111, 2);
x_138 = lean::cnstr_get(x_111, 3);
lean::inc(x_138);
lean::inc(x_137);
lean::inc(x_136);
lean::inc(x_135);
lean::dec(x_111);
lean::inc(x_37);
x_139 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_139, 0, x_28);
lean::cnstr_set(x_139, 1, x_29);
lean::cnstr_set(x_139, 2, x_30);
lean::cnstr_set(x_139, 3, x_37);
if (lean::is_exclusive(x_37)) {
 lean::cnstr_release(x_37, 0);
 lean::cnstr_release(x_37, 1);
 lean::cnstr_release(x_37, 2);
 lean::cnstr_release(x_37, 3);
 x_140 = x_37;
} else {
 lean::dec_ref(x_37);
 x_140 = lean::box(0);
}
lean::cnstr_set_scalar(x_139, sizeof(void*)*4, x_85);
if (lean::is_scalar(x_140)) {
 x_141 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_141 = x_140;
}
lean::cnstr_set(x_141, 0, x_135);
lean::cnstr_set(x_141, 1, x_136);
lean::cnstr_set(x_141, 2, x_137);
lean::cnstr_set(x_141, 3, x_138);
lean::cnstr_set_scalar(x_141, sizeof(void*)*4, x_85);
lean::cnstr_set(x_36, 3, x_141);
lean::cnstr_set(x_36, 0, x_139);
lean::cnstr_set_scalar(x_36, sizeof(void*)*4, x_120);
return x_36;
}
}
else
{
obj* x_142; obj* x_143; obj* x_144; obj* x_145; obj* x_146; obj* x_147; obj* x_148; obj* x_149; obj* x_150; obj* x_151; obj* x_152; 
x_142 = lean::cnstr_get(x_36, 1);
x_143 = lean::cnstr_get(x_36, 2);
lean::inc(x_143);
lean::inc(x_142);
lean::dec(x_36);
x_144 = lean::cnstr_get(x_111, 0);
lean::inc(x_144);
x_145 = lean::cnstr_get(x_111, 1);
lean::inc(x_145);
x_146 = lean::cnstr_get(x_111, 2);
lean::inc(x_146);
x_147 = lean::cnstr_get(x_111, 3);
lean::inc(x_147);
if (lean::is_exclusive(x_111)) {
 lean::cnstr_release(x_111, 0);
 lean::cnstr_release(x_111, 1);
 lean::cnstr_release(x_111, 2);
 lean::cnstr_release(x_111, 3);
 x_148 = x_111;
} else {
 lean::dec_ref(x_111);
 x_148 = lean::box(0);
}
lean::inc(x_37);
if (lean::is_scalar(x_148)) {
 x_149 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_149 = x_148;
}
lean::cnstr_set(x_149, 0, x_28);
lean::cnstr_set(x_149, 1, x_29);
lean::cnstr_set(x_149, 2, x_30);
lean::cnstr_set(x_149, 3, x_37);
if (lean::is_exclusive(x_37)) {
 lean::cnstr_release(x_37, 0);
 lean::cnstr_release(x_37, 1);
 lean::cnstr_release(x_37, 2);
 lean::cnstr_release(x_37, 3);
 x_150 = x_37;
} else {
 lean::dec_ref(x_37);
 x_150 = lean::box(0);
}
lean::cnstr_set_scalar(x_149, sizeof(void*)*4, x_85);
if (lean::is_scalar(x_150)) {
 x_151 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_151 = x_150;
}
lean::cnstr_set(x_151, 0, x_144);
lean::cnstr_set(x_151, 1, x_145);
lean::cnstr_set(x_151, 2, x_146);
lean::cnstr_set(x_151, 3, x_147);
lean::cnstr_set_scalar(x_151, sizeof(void*)*4, x_85);
x_152 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_152, 0, x_149);
lean::cnstr_set(x_152, 1, x_142);
lean::cnstr_set(x_152, 2, x_143);
lean::cnstr_set(x_152, 3, x_151);
lean::cnstr_set_scalar(x_152, sizeof(void*)*4, x_120);
return x_152;
}
}
else
{
uint8 x_153; 
x_153 = !lean::is_exclusive(x_36);
if (x_153 == 0)
{
obj* x_154; obj* x_155; uint8 x_156; 
x_154 = lean::cnstr_get(x_36, 3);
lean::dec(x_154);
x_155 = lean::cnstr_get(x_36, 0);
lean::dec(x_155);
x_156 = !lean::is_exclusive(x_37);
if (x_156 == 0)
{
uint8 x_157; 
lean::cnstr_set_scalar(x_37, sizeof(void*)*4, x_120);
x_157 = 0;
lean::cnstr_set_scalar(x_36, sizeof(void*)*4, x_157);
lean::cnstr_set(x_1, 3, x_36);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_120);
return x_1;
}
else
{
obj* x_158; obj* x_159; obj* x_160; obj* x_161; obj* x_162; uint8 x_163; 
x_158 = lean::cnstr_get(x_37, 0);
x_159 = lean::cnstr_get(x_37, 1);
x_160 = lean::cnstr_get(x_37, 2);
x_161 = lean::cnstr_get(x_37, 3);
lean::inc(x_161);
lean::inc(x_160);
lean::inc(x_159);
lean::inc(x_158);
lean::dec(x_37);
x_162 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_162, 0, x_158);
lean::cnstr_set(x_162, 1, x_159);
lean::cnstr_set(x_162, 2, x_160);
lean::cnstr_set(x_162, 3, x_161);
lean::cnstr_set_scalar(x_162, sizeof(void*)*4, x_120);
x_163 = 0;
lean::cnstr_set(x_36, 0, x_162);
lean::cnstr_set_scalar(x_36, sizeof(void*)*4, x_163);
lean::cnstr_set(x_1, 3, x_36);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_120);
return x_1;
}
}
else
{
obj* x_164; obj* x_165; obj* x_166; obj* x_167; obj* x_168; obj* x_169; obj* x_170; obj* x_171; uint8 x_172; obj* x_173; 
x_164 = lean::cnstr_get(x_36, 1);
x_165 = lean::cnstr_get(x_36, 2);
lean::inc(x_165);
lean::inc(x_164);
lean::dec(x_36);
x_166 = lean::cnstr_get(x_37, 0);
lean::inc(x_166);
x_167 = lean::cnstr_get(x_37, 1);
lean::inc(x_167);
x_168 = lean::cnstr_get(x_37, 2);
lean::inc(x_168);
x_169 = lean::cnstr_get(x_37, 3);
lean::inc(x_169);
if (lean::is_exclusive(x_37)) {
 lean::cnstr_release(x_37, 0);
 lean::cnstr_release(x_37, 1);
 lean::cnstr_release(x_37, 2);
 lean::cnstr_release(x_37, 3);
 x_170 = x_37;
} else {
 lean::dec_ref(x_37);
 x_170 = lean::box(0);
}
if (lean::is_scalar(x_170)) {
 x_171 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_171 = x_170;
}
lean::cnstr_set(x_171, 0, x_166);
lean::cnstr_set(x_171, 1, x_167);
lean::cnstr_set(x_171, 2, x_168);
lean::cnstr_set(x_171, 3, x_169);
lean::cnstr_set_scalar(x_171, sizeof(void*)*4, x_120);
x_172 = 0;
x_173 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_173, 0, x_171);
lean::cnstr_set(x_173, 1, x_164);
lean::cnstr_set(x_173, 2, x_165);
lean::cnstr_set(x_173, 3, x_111);
lean::cnstr_set_scalar(x_173, sizeof(void*)*4, x_172);
lean::cnstr_set(x_1, 3, x_173);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_120);
return x_1;
}
}
}
}
}
}
}
}
}
else
{
uint8 x_174; 
x_174 = l_RBNode_isRed___main___rarg(x_28);
if (x_174 == 0)
{
obj* x_175; 
x_175 = l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(x_28, x_2, x_3);
lean::cnstr_set(x_1, 0, x_175);
return x_1;
}
else
{
obj* x_176; 
x_176 = l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(x_28, x_2, x_3);
if (lean::obj_tag(x_176) == 0)
{
lean::free_heap_obj(x_1);
lean::dec(x_31);
lean::dec(x_30);
lean::dec(x_29);
return x_176;
}
else
{
obj* x_177; 
x_177 = lean::cnstr_get(x_176, 0);
lean::inc(x_177);
if (lean::obj_tag(x_177) == 0)
{
obj* x_178; 
x_178 = lean::cnstr_get(x_176, 3);
lean::inc(x_178);
if (lean::obj_tag(x_178) == 0)
{
uint8 x_179; 
x_179 = !lean::is_exclusive(x_176);
if (x_179 == 0)
{
obj* x_180; obj* x_181; uint8 x_182; uint8 x_183; 
x_180 = lean::cnstr_get(x_176, 3);
lean::dec(x_180);
x_181 = lean::cnstr_get(x_176, 0);
lean::dec(x_181);
x_182 = 0;
lean::cnstr_set(x_176, 0, x_178);
lean::cnstr_set_scalar(x_176, sizeof(void*)*4, x_182);
x_183 = 1;
lean::cnstr_set(x_1, 0, x_176);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_183);
return x_1;
}
else
{
obj* x_184; obj* x_185; uint8 x_186; obj* x_187; uint8 x_188; 
x_184 = lean::cnstr_get(x_176, 1);
x_185 = lean::cnstr_get(x_176, 2);
lean::inc(x_185);
lean::inc(x_184);
lean::dec(x_176);
x_186 = 0;
x_187 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_187, 0, x_178);
lean::cnstr_set(x_187, 1, x_184);
lean::cnstr_set(x_187, 2, x_185);
lean::cnstr_set(x_187, 3, x_178);
lean::cnstr_set_scalar(x_187, sizeof(void*)*4, x_186);
x_188 = 1;
lean::cnstr_set(x_1, 0, x_187);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_188);
return x_1;
}
}
else
{
uint8 x_189; 
x_189 = lean::cnstr_get_scalar<uint8>(x_178, sizeof(void*)*4);
if (x_189 == 0)
{
uint8 x_190; 
x_190 = !lean::is_exclusive(x_176);
if (x_190 == 0)
{
obj* x_191; obj* x_192; obj* x_193; obj* x_194; uint8 x_195; 
x_191 = lean::cnstr_get(x_176, 1);
x_192 = lean::cnstr_get(x_176, 2);
x_193 = lean::cnstr_get(x_176, 3);
lean::dec(x_193);
x_194 = lean::cnstr_get(x_176, 0);
lean::dec(x_194);
x_195 = !lean::is_exclusive(x_178);
if (x_195 == 0)
{
obj* x_196; obj* x_197; obj* x_198; obj* x_199; uint8 x_200; 
x_196 = lean::cnstr_get(x_178, 0);
x_197 = lean::cnstr_get(x_178, 1);
x_198 = lean::cnstr_get(x_178, 2);
x_199 = lean::cnstr_get(x_178, 3);
x_200 = 1;
lean::cnstr_set(x_178, 3, x_196);
lean::cnstr_set(x_178, 2, x_192);
lean::cnstr_set(x_178, 1, x_191);
lean::cnstr_set(x_178, 0, x_177);
lean::cnstr_set_scalar(x_178, sizeof(void*)*4, x_200);
lean::cnstr_set(x_176, 3, x_31);
lean::cnstr_set(x_176, 2, x_30);
lean::cnstr_set(x_176, 1, x_29);
lean::cnstr_set(x_176, 0, x_199);
lean::cnstr_set_scalar(x_176, sizeof(void*)*4, x_200);
lean::cnstr_set(x_1, 3, x_176);
lean::cnstr_set(x_1, 2, x_198);
lean::cnstr_set(x_1, 1, x_197);
lean::cnstr_set(x_1, 0, x_178);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_189);
return x_1;
}
else
{
obj* x_201; obj* x_202; obj* x_203; obj* x_204; uint8 x_205; obj* x_206; 
x_201 = lean::cnstr_get(x_178, 0);
x_202 = lean::cnstr_get(x_178, 1);
x_203 = lean::cnstr_get(x_178, 2);
x_204 = lean::cnstr_get(x_178, 3);
lean::inc(x_204);
lean::inc(x_203);
lean::inc(x_202);
lean::inc(x_201);
lean::dec(x_178);
x_205 = 1;
x_206 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_206, 0, x_177);
lean::cnstr_set(x_206, 1, x_191);
lean::cnstr_set(x_206, 2, x_192);
lean::cnstr_set(x_206, 3, x_201);
lean::cnstr_set_scalar(x_206, sizeof(void*)*4, x_205);
lean::cnstr_set(x_176, 3, x_31);
lean::cnstr_set(x_176, 2, x_30);
lean::cnstr_set(x_176, 1, x_29);
lean::cnstr_set(x_176, 0, x_204);
lean::cnstr_set_scalar(x_176, sizeof(void*)*4, x_205);
lean::cnstr_set(x_1, 3, x_176);
lean::cnstr_set(x_1, 2, x_203);
lean::cnstr_set(x_1, 1, x_202);
lean::cnstr_set(x_1, 0, x_206);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_189);
return x_1;
}
}
else
{
obj* x_207; obj* x_208; obj* x_209; obj* x_210; obj* x_211; obj* x_212; obj* x_213; uint8 x_214; obj* x_215; obj* x_216; 
x_207 = lean::cnstr_get(x_176, 1);
x_208 = lean::cnstr_get(x_176, 2);
lean::inc(x_208);
lean::inc(x_207);
lean::dec(x_176);
x_209 = lean::cnstr_get(x_178, 0);
lean::inc(x_209);
x_210 = lean::cnstr_get(x_178, 1);
lean::inc(x_210);
x_211 = lean::cnstr_get(x_178, 2);
lean::inc(x_211);
x_212 = lean::cnstr_get(x_178, 3);
lean::inc(x_212);
if (lean::is_exclusive(x_178)) {
 lean::cnstr_release(x_178, 0);
 lean::cnstr_release(x_178, 1);
 lean::cnstr_release(x_178, 2);
 lean::cnstr_release(x_178, 3);
 x_213 = x_178;
} else {
 lean::dec_ref(x_178);
 x_213 = lean::box(0);
}
x_214 = 1;
if (lean::is_scalar(x_213)) {
 x_215 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_215 = x_213;
}
lean::cnstr_set(x_215, 0, x_177);
lean::cnstr_set(x_215, 1, x_207);
lean::cnstr_set(x_215, 2, x_208);
lean::cnstr_set(x_215, 3, x_209);
lean::cnstr_set_scalar(x_215, sizeof(void*)*4, x_214);
x_216 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_216, 0, x_212);
lean::cnstr_set(x_216, 1, x_29);
lean::cnstr_set(x_216, 2, x_30);
lean::cnstr_set(x_216, 3, x_31);
lean::cnstr_set_scalar(x_216, sizeof(void*)*4, x_214);
lean::cnstr_set(x_1, 3, x_216);
lean::cnstr_set(x_1, 2, x_211);
lean::cnstr_set(x_1, 1, x_210);
lean::cnstr_set(x_1, 0, x_215);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_189);
return x_1;
}
}
else
{
uint8 x_217; 
x_217 = !lean::is_exclusive(x_176);
if (x_217 == 0)
{
obj* x_218; obj* x_219; uint8 x_220; 
x_218 = lean::cnstr_get(x_176, 3);
lean::dec(x_218);
x_219 = lean::cnstr_get(x_176, 0);
lean::dec(x_219);
x_220 = 0;
lean::cnstr_set_scalar(x_176, sizeof(void*)*4, x_220);
lean::cnstr_set(x_1, 0, x_176);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_189);
return x_1;
}
else
{
obj* x_221; obj* x_222; uint8 x_223; obj* x_224; 
x_221 = lean::cnstr_get(x_176, 1);
x_222 = lean::cnstr_get(x_176, 2);
lean::inc(x_222);
lean::inc(x_221);
lean::dec(x_176);
x_223 = 0;
x_224 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_224, 0, x_177);
lean::cnstr_set(x_224, 1, x_221);
lean::cnstr_set(x_224, 2, x_222);
lean::cnstr_set(x_224, 3, x_178);
lean::cnstr_set_scalar(x_224, sizeof(void*)*4, x_223);
lean::cnstr_set(x_1, 0, x_224);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_189);
return x_1;
}
}
}
}
else
{
uint8 x_225; 
x_225 = lean::cnstr_get_scalar<uint8>(x_177, sizeof(void*)*4);
if (x_225 == 0)
{
uint8 x_226; 
x_226 = !lean::is_exclusive(x_176);
if (x_226 == 0)
{
obj* x_227; obj* x_228; obj* x_229; obj* x_230; uint8 x_231; 
x_227 = lean::cnstr_get(x_176, 1);
x_228 = lean::cnstr_get(x_176, 2);
x_229 = lean::cnstr_get(x_176, 3);
x_230 = lean::cnstr_get(x_176, 0);
lean::dec(x_230);
x_231 = !lean::is_exclusive(x_177);
if (x_231 == 0)
{
uint8 x_232; 
x_232 = 1;
lean::cnstr_set_scalar(x_177, sizeof(void*)*4, x_232);
lean::cnstr_set(x_176, 3, x_31);
lean::cnstr_set(x_176, 2, x_30);
lean::cnstr_set(x_176, 1, x_29);
lean::cnstr_set(x_176, 0, x_229);
lean::cnstr_set_scalar(x_176, sizeof(void*)*4, x_232);
lean::cnstr_set(x_1, 3, x_176);
lean::cnstr_set(x_1, 2, x_228);
lean::cnstr_set(x_1, 1, x_227);
lean::cnstr_set(x_1, 0, x_177);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_225);
return x_1;
}
else
{
obj* x_233; obj* x_234; obj* x_235; obj* x_236; uint8 x_237; obj* x_238; 
x_233 = lean::cnstr_get(x_177, 0);
x_234 = lean::cnstr_get(x_177, 1);
x_235 = lean::cnstr_get(x_177, 2);
x_236 = lean::cnstr_get(x_177, 3);
lean::inc(x_236);
lean::inc(x_235);
lean::inc(x_234);
lean::inc(x_233);
lean::dec(x_177);
x_237 = 1;
x_238 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_238, 0, x_233);
lean::cnstr_set(x_238, 1, x_234);
lean::cnstr_set(x_238, 2, x_235);
lean::cnstr_set(x_238, 3, x_236);
lean::cnstr_set_scalar(x_238, sizeof(void*)*4, x_237);
lean::cnstr_set(x_176, 3, x_31);
lean::cnstr_set(x_176, 2, x_30);
lean::cnstr_set(x_176, 1, x_29);
lean::cnstr_set(x_176, 0, x_229);
lean::cnstr_set_scalar(x_176, sizeof(void*)*4, x_237);
lean::cnstr_set(x_1, 3, x_176);
lean::cnstr_set(x_1, 2, x_228);
lean::cnstr_set(x_1, 1, x_227);
lean::cnstr_set(x_1, 0, x_238);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_225);
return x_1;
}
}
else
{
obj* x_239; obj* x_240; obj* x_241; obj* x_242; obj* x_243; obj* x_244; obj* x_245; obj* x_246; uint8 x_247; obj* x_248; obj* x_249; 
x_239 = lean::cnstr_get(x_176, 1);
x_240 = lean::cnstr_get(x_176, 2);
x_241 = lean::cnstr_get(x_176, 3);
lean::inc(x_241);
lean::inc(x_240);
lean::inc(x_239);
lean::dec(x_176);
x_242 = lean::cnstr_get(x_177, 0);
lean::inc(x_242);
x_243 = lean::cnstr_get(x_177, 1);
lean::inc(x_243);
x_244 = lean::cnstr_get(x_177, 2);
lean::inc(x_244);
x_245 = lean::cnstr_get(x_177, 3);
lean::inc(x_245);
if (lean::is_exclusive(x_177)) {
 lean::cnstr_release(x_177, 0);
 lean::cnstr_release(x_177, 1);
 lean::cnstr_release(x_177, 2);
 lean::cnstr_release(x_177, 3);
 x_246 = x_177;
} else {
 lean::dec_ref(x_177);
 x_246 = lean::box(0);
}
x_247 = 1;
if (lean::is_scalar(x_246)) {
 x_248 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_248 = x_246;
}
lean::cnstr_set(x_248, 0, x_242);
lean::cnstr_set(x_248, 1, x_243);
lean::cnstr_set(x_248, 2, x_244);
lean::cnstr_set(x_248, 3, x_245);
lean::cnstr_set_scalar(x_248, sizeof(void*)*4, x_247);
x_249 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_249, 0, x_241);
lean::cnstr_set(x_249, 1, x_29);
lean::cnstr_set(x_249, 2, x_30);
lean::cnstr_set(x_249, 3, x_31);
lean::cnstr_set_scalar(x_249, sizeof(void*)*4, x_247);
lean::cnstr_set(x_1, 3, x_249);
lean::cnstr_set(x_1, 2, x_240);
lean::cnstr_set(x_1, 1, x_239);
lean::cnstr_set(x_1, 0, x_248);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_225);
return x_1;
}
}
else
{
obj* x_250; 
x_250 = lean::cnstr_get(x_176, 3);
lean::inc(x_250);
if (lean::obj_tag(x_250) == 0)
{
uint8 x_251; 
x_251 = !lean::is_exclusive(x_176);
if (x_251 == 0)
{
obj* x_252; obj* x_253; uint8 x_254; 
x_252 = lean::cnstr_get(x_176, 3);
lean::dec(x_252);
x_253 = lean::cnstr_get(x_176, 0);
lean::dec(x_253);
x_254 = 0;
lean::cnstr_set_scalar(x_176, sizeof(void*)*4, x_254);
lean::cnstr_set(x_1, 0, x_176);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_225);
return x_1;
}
else
{
obj* x_255; obj* x_256; uint8 x_257; obj* x_258; 
x_255 = lean::cnstr_get(x_176, 1);
x_256 = lean::cnstr_get(x_176, 2);
lean::inc(x_256);
lean::inc(x_255);
lean::dec(x_176);
x_257 = 0;
x_258 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_258, 0, x_177);
lean::cnstr_set(x_258, 1, x_255);
lean::cnstr_set(x_258, 2, x_256);
lean::cnstr_set(x_258, 3, x_250);
lean::cnstr_set_scalar(x_258, sizeof(void*)*4, x_257);
lean::cnstr_set(x_1, 0, x_258);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_225);
return x_1;
}
}
else
{
uint8 x_259; 
x_259 = lean::cnstr_get_scalar<uint8>(x_250, sizeof(void*)*4);
if (x_259 == 0)
{
uint8 x_260; 
lean::free_heap_obj(x_1);
x_260 = !lean::is_exclusive(x_176);
if (x_260 == 0)
{
obj* x_261; obj* x_262; obj* x_263; obj* x_264; uint8 x_265; 
x_261 = lean::cnstr_get(x_176, 1);
x_262 = lean::cnstr_get(x_176, 2);
x_263 = lean::cnstr_get(x_176, 3);
lean::dec(x_263);
x_264 = lean::cnstr_get(x_176, 0);
lean::dec(x_264);
x_265 = !lean::is_exclusive(x_250);
if (x_265 == 0)
{
obj* x_266; obj* x_267; obj* x_268; obj* x_269; uint8 x_270; 
x_266 = lean::cnstr_get(x_250, 0);
x_267 = lean::cnstr_get(x_250, 1);
x_268 = lean::cnstr_get(x_250, 2);
x_269 = lean::cnstr_get(x_250, 3);
lean::inc(x_177);
lean::cnstr_set(x_250, 3, x_266);
lean::cnstr_set(x_250, 2, x_262);
lean::cnstr_set(x_250, 1, x_261);
lean::cnstr_set(x_250, 0, x_177);
x_270 = !lean::is_exclusive(x_177);
if (x_270 == 0)
{
obj* x_271; obj* x_272; obj* x_273; obj* x_274; 
x_271 = lean::cnstr_get(x_177, 3);
lean::dec(x_271);
x_272 = lean::cnstr_get(x_177, 2);
lean::dec(x_272);
x_273 = lean::cnstr_get(x_177, 1);
lean::dec(x_273);
x_274 = lean::cnstr_get(x_177, 0);
lean::dec(x_274);
lean::cnstr_set_scalar(x_250, sizeof(void*)*4, x_225);
lean::cnstr_set(x_177, 3, x_31);
lean::cnstr_set(x_177, 2, x_30);
lean::cnstr_set(x_177, 1, x_29);
lean::cnstr_set(x_177, 0, x_269);
lean::cnstr_set(x_176, 3, x_177);
lean::cnstr_set(x_176, 2, x_268);
lean::cnstr_set(x_176, 1, x_267);
lean::cnstr_set(x_176, 0, x_250);
lean::cnstr_set_scalar(x_176, sizeof(void*)*4, x_259);
return x_176;
}
else
{
obj* x_275; 
lean::dec(x_177);
lean::cnstr_set_scalar(x_250, sizeof(void*)*4, x_225);
x_275 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_275, 0, x_269);
lean::cnstr_set(x_275, 1, x_29);
lean::cnstr_set(x_275, 2, x_30);
lean::cnstr_set(x_275, 3, x_31);
lean::cnstr_set_scalar(x_275, sizeof(void*)*4, x_225);
lean::cnstr_set(x_176, 3, x_275);
lean::cnstr_set(x_176, 2, x_268);
lean::cnstr_set(x_176, 1, x_267);
lean::cnstr_set(x_176, 0, x_250);
lean::cnstr_set_scalar(x_176, sizeof(void*)*4, x_259);
return x_176;
}
}
else
{
obj* x_276; obj* x_277; obj* x_278; obj* x_279; obj* x_280; obj* x_281; obj* x_282; 
x_276 = lean::cnstr_get(x_250, 0);
x_277 = lean::cnstr_get(x_250, 1);
x_278 = lean::cnstr_get(x_250, 2);
x_279 = lean::cnstr_get(x_250, 3);
lean::inc(x_279);
lean::inc(x_278);
lean::inc(x_277);
lean::inc(x_276);
lean::dec(x_250);
lean::inc(x_177);
x_280 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_280, 0, x_177);
lean::cnstr_set(x_280, 1, x_261);
lean::cnstr_set(x_280, 2, x_262);
lean::cnstr_set(x_280, 3, x_276);
if (lean::is_exclusive(x_177)) {
 lean::cnstr_release(x_177, 0);
 lean::cnstr_release(x_177, 1);
 lean::cnstr_release(x_177, 2);
 lean::cnstr_release(x_177, 3);
 x_281 = x_177;
} else {
 lean::dec_ref(x_177);
 x_281 = lean::box(0);
}
lean::cnstr_set_scalar(x_280, sizeof(void*)*4, x_225);
if (lean::is_scalar(x_281)) {
 x_282 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_282 = x_281;
}
lean::cnstr_set(x_282, 0, x_279);
lean::cnstr_set(x_282, 1, x_29);
lean::cnstr_set(x_282, 2, x_30);
lean::cnstr_set(x_282, 3, x_31);
lean::cnstr_set_scalar(x_282, sizeof(void*)*4, x_225);
lean::cnstr_set(x_176, 3, x_282);
lean::cnstr_set(x_176, 2, x_278);
lean::cnstr_set(x_176, 1, x_277);
lean::cnstr_set(x_176, 0, x_280);
lean::cnstr_set_scalar(x_176, sizeof(void*)*4, x_259);
return x_176;
}
}
else
{
obj* x_283; obj* x_284; obj* x_285; obj* x_286; obj* x_287; obj* x_288; obj* x_289; obj* x_290; obj* x_291; obj* x_292; obj* x_293; 
x_283 = lean::cnstr_get(x_176, 1);
x_284 = lean::cnstr_get(x_176, 2);
lean::inc(x_284);
lean::inc(x_283);
lean::dec(x_176);
x_285 = lean::cnstr_get(x_250, 0);
lean::inc(x_285);
x_286 = lean::cnstr_get(x_250, 1);
lean::inc(x_286);
x_287 = lean::cnstr_get(x_250, 2);
lean::inc(x_287);
x_288 = lean::cnstr_get(x_250, 3);
lean::inc(x_288);
if (lean::is_exclusive(x_250)) {
 lean::cnstr_release(x_250, 0);
 lean::cnstr_release(x_250, 1);
 lean::cnstr_release(x_250, 2);
 lean::cnstr_release(x_250, 3);
 x_289 = x_250;
} else {
 lean::dec_ref(x_250);
 x_289 = lean::box(0);
}
lean::inc(x_177);
if (lean::is_scalar(x_289)) {
 x_290 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_290 = x_289;
}
lean::cnstr_set(x_290, 0, x_177);
lean::cnstr_set(x_290, 1, x_283);
lean::cnstr_set(x_290, 2, x_284);
lean::cnstr_set(x_290, 3, x_285);
if (lean::is_exclusive(x_177)) {
 lean::cnstr_release(x_177, 0);
 lean::cnstr_release(x_177, 1);
 lean::cnstr_release(x_177, 2);
 lean::cnstr_release(x_177, 3);
 x_291 = x_177;
} else {
 lean::dec_ref(x_177);
 x_291 = lean::box(0);
}
lean::cnstr_set_scalar(x_290, sizeof(void*)*4, x_225);
if (lean::is_scalar(x_291)) {
 x_292 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_292 = x_291;
}
lean::cnstr_set(x_292, 0, x_288);
lean::cnstr_set(x_292, 1, x_29);
lean::cnstr_set(x_292, 2, x_30);
lean::cnstr_set(x_292, 3, x_31);
lean::cnstr_set_scalar(x_292, sizeof(void*)*4, x_225);
x_293 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_293, 0, x_290);
lean::cnstr_set(x_293, 1, x_286);
lean::cnstr_set(x_293, 2, x_287);
lean::cnstr_set(x_293, 3, x_292);
lean::cnstr_set_scalar(x_293, sizeof(void*)*4, x_259);
return x_293;
}
}
else
{
uint8 x_294; 
x_294 = !lean::is_exclusive(x_176);
if (x_294 == 0)
{
obj* x_295; obj* x_296; uint8 x_297; 
x_295 = lean::cnstr_get(x_176, 3);
lean::dec(x_295);
x_296 = lean::cnstr_get(x_176, 0);
lean::dec(x_296);
x_297 = !lean::is_exclusive(x_177);
if (x_297 == 0)
{
uint8 x_298; 
lean::cnstr_set_scalar(x_177, sizeof(void*)*4, x_259);
x_298 = 0;
lean::cnstr_set_scalar(x_176, sizeof(void*)*4, x_298);
lean::cnstr_set(x_1, 0, x_176);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_259);
return x_1;
}
else
{
obj* x_299; obj* x_300; obj* x_301; obj* x_302; obj* x_303; uint8 x_304; 
x_299 = lean::cnstr_get(x_177, 0);
x_300 = lean::cnstr_get(x_177, 1);
x_301 = lean::cnstr_get(x_177, 2);
x_302 = lean::cnstr_get(x_177, 3);
lean::inc(x_302);
lean::inc(x_301);
lean::inc(x_300);
lean::inc(x_299);
lean::dec(x_177);
x_303 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_303, 0, x_299);
lean::cnstr_set(x_303, 1, x_300);
lean::cnstr_set(x_303, 2, x_301);
lean::cnstr_set(x_303, 3, x_302);
lean::cnstr_set_scalar(x_303, sizeof(void*)*4, x_259);
x_304 = 0;
lean::cnstr_set(x_176, 0, x_303);
lean::cnstr_set_scalar(x_176, sizeof(void*)*4, x_304);
lean::cnstr_set(x_1, 0, x_176);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_259);
return x_1;
}
}
else
{
obj* x_305; obj* x_306; obj* x_307; obj* x_308; obj* x_309; obj* x_310; obj* x_311; obj* x_312; uint8 x_313; obj* x_314; 
x_305 = lean::cnstr_get(x_176, 1);
x_306 = lean::cnstr_get(x_176, 2);
lean::inc(x_306);
lean::inc(x_305);
lean::dec(x_176);
x_307 = lean::cnstr_get(x_177, 0);
lean::inc(x_307);
x_308 = lean::cnstr_get(x_177, 1);
lean::inc(x_308);
x_309 = lean::cnstr_get(x_177, 2);
lean::inc(x_309);
x_310 = lean::cnstr_get(x_177, 3);
lean::inc(x_310);
if (lean::is_exclusive(x_177)) {
 lean::cnstr_release(x_177, 0);
 lean::cnstr_release(x_177, 1);
 lean::cnstr_release(x_177, 2);
 lean::cnstr_release(x_177, 3);
 x_311 = x_177;
} else {
 lean::dec_ref(x_177);
 x_311 = lean::box(0);
}
if (lean::is_scalar(x_311)) {
 x_312 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_312 = x_311;
}
lean::cnstr_set(x_312, 0, x_307);
lean::cnstr_set(x_312, 1, x_308);
lean::cnstr_set(x_312, 2, x_309);
lean::cnstr_set(x_312, 3, x_310);
lean::cnstr_set_scalar(x_312, sizeof(void*)*4, x_259);
x_313 = 0;
x_314 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_314, 0, x_312);
lean::cnstr_set(x_314, 1, x_305);
lean::cnstr_set(x_314, 2, x_306);
lean::cnstr_set(x_314, 3, x_250);
lean::cnstr_set_scalar(x_314, sizeof(void*)*4, x_313);
lean::cnstr_set(x_1, 0, x_314);
lean::cnstr_set_scalar(x_1, sizeof(void*)*4, x_259);
return x_1;
}
}
}
}
}
}
}
}
}
else
{
obj* x_315; obj* x_316; obj* x_317; obj* x_318; uint8 x_319; 
x_315 = lean::cnstr_get(x_1, 0);
x_316 = lean::cnstr_get(x_1, 1);
x_317 = lean::cnstr_get(x_1, 2);
x_318 = lean::cnstr_get(x_1, 3);
lean::inc(x_318);
lean::inc(x_317);
lean::inc(x_316);
lean::inc(x_315);
lean::dec(x_1);
x_319 = l_Lean_Name_quickLt(x_2, x_316);
if (x_319 == 0)
{
uint8 x_320; 
x_320 = l_Lean_Name_quickLt(x_316, x_2);
if (x_320 == 0)
{
obj* x_321; 
lean::dec(x_317);
lean::dec(x_316);
x_321 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_321, 0, x_315);
lean::cnstr_set(x_321, 1, x_2);
lean::cnstr_set(x_321, 2, x_3);
lean::cnstr_set(x_321, 3, x_318);
lean::cnstr_set_scalar(x_321, sizeof(void*)*4, x_6);
return x_321;
}
else
{
uint8 x_322; 
x_322 = l_RBNode_isRed___main___rarg(x_318);
if (x_322 == 0)
{
obj* x_323; obj* x_324; 
x_323 = l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(x_318, x_2, x_3);
x_324 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_324, 0, x_315);
lean::cnstr_set(x_324, 1, x_316);
lean::cnstr_set(x_324, 2, x_317);
lean::cnstr_set(x_324, 3, x_323);
lean::cnstr_set_scalar(x_324, sizeof(void*)*4, x_6);
return x_324;
}
else
{
obj* x_325; 
x_325 = l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(x_318, x_2, x_3);
if (lean::obj_tag(x_325) == 0)
{
lean::dec(x_317);
lean::dec(x_316);
lean::dec(x_315);
return x_325;
}
else
{
obj* x_326; 
x_326 = lean::cnstr_get(x_325, 0);
lean::inc(x_326);
if (lean::obj_tag(x_326) == 0)
{
obj* x_327; 
x_327 = lean::cnstr_get(x_325, 3);
lean::inc(x_327);
if (lean::obj_tag(x_327) == 0)
{
obj* x_328; obj* x_329; obj* x_330; uint8 x_331; obj* x_332; uint8 x_333; obj* x_334; 
x_328 = lean::cnstr_get(x_325, 1);
lean::inc(x_328);
x_329 = lean::cnstr_get(x_325, 2);
lean::inc(x_329);
if (lean::is_exclusive(x_325)) {
 lean::cnstr_release(x_325, 0);
 lean::cnstr_release(x_325, 1);
 lean::cnstr_release(x_325, 2);
 lean::cnstr_release(x_325, 3);
 x_330 = x_325;
} else {
 lean::dec_ref(x_325);
 x_330 = lean::box(0);
}
x_331 = 0;
if (lean::is_scalar(x_330)) {
 x_332 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_332 = x_330;
}
lean::cnstr_set(x_332, 0, x_327);
lean::cnstr_set(x_332, 1, x_328);
lean::cnstr_set(x_332, 2, x_329);
lean::cnstr_set(x_332, 3, x_327);
lean::cnstr_set_scalar(x_332, sizeof(void*)*4, x_331);
x_333 = 1;
x_334 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_334, 0, x_315);
lean::cnstr_set(x_334, 1, x_316);
lean::cnstr_set(x_334, 2, x_317);
lean::cnstr_set(x_334, 3, x_332);
lean::cnstr_set_scalar(x_334, sizeof(void*)*4, x_333);
return x_334;
}
else
{
uint8 x_335; 
x_335 = lean::cnstr_get_scalar<uint8>(x_327, sizeof(void*)*4);
if (x_335 == 0)
{
obj* x_336; obj* x_337; obj* x_338; obj* x_339; obj* x_340; obj* x_341; obj* x_342; obj* x_343; uint8 x_344; obj* x_345; obj* x_346; obj* x_347; 
x_336 = lean::cnstr_get(x_325, 1);
lean::inc(x_336);
x_337 = lean::cnstr_get(x_325, 2);
lean::inc(x_337);
if (lean::is_exclusive(x_325)) {
 lean::cnstr_release(x_325, 0);
 lean::cnstr_release(x_325, 1);
 lean::cnstr_release(x_325, 2);
 lean::cnstr_release(x_325, 3);
 x_338 = x_325;
} else {
 lean::dec_ref(x_325);
 x_338 = lean::box(0);
}
x_339 = lean::cnstr_get(x_327, 0);
lean::inc(x_339);
x_340 = lean::cnstr_get(x_327, 1);
lean::inc(x_340);
x_341 = lean::cnstr_get(x_327, 2);
lean::inc(x_341);
x_342 = lean::cnstr_get(x_327, 3);
lean::inc(x_342);
if (lean::is_exclusive(x_327)) {
 lean::cnstr_release(x_327, 0);
 lean::cnstr_release(x_327, 1);
 lean::cnstr_release(x_327, 2);
 lean::cnstr_release(x_327, 3);
 x_343 = x_327;
} else {
 lean::dec_ref(x_327);
 x_343 = lean::box(0);
}
x_344 = 1;
if (lean::is_scalar(x_343)) {
 x_345 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_345 = x_343;
}
lean::cnstr_set(x_345, 0, x_315);
lean::cnstr_set(x_345, 1, x_316);
lean::cnstr_set(x_345, 2, x_317);
lean::cnstr_set(x_345, 3, x_326);
lean::cnstr_set_scalar(x_345, sizeof(void*)*4, x_344);
if (lean::is_scalar(x_338)) {
 x_346 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_346 = x_338;
}
lean::cnstr_set(x_346, 0, x_339);
lean::cnstr_set(x_346, 1, x_340);
lean::cnstr_set(x_346, 2, x_341);
lean::cnstr_set(x_346, 3, x_342);
lean::cnstr_set_scalar(x_346, sizeof(void*)*4, x_344);
x_347 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_347, 0, x_345);
lean::cnstr_set(x_347, 1, x_336);
lean::cnstr_set(x_347, 2, x_337);
lean::cnstr_set(x_347, 3, x_346);
lean::cnstr_set_scalar(x_347, sizeof(void*)*4, x_335);
return x_347;
}
else
{
obj* x_348; obj* x_349; obj* x_350; uint8 x_351; obj* x_352; obj* x_353; 
x_348 = lean::cnstr_get(x_325, 1);
lean::inc(x_348);
x_349 = lean::cnstr_get(x_325, 2);
lean::inc(x_349);
if (lean::is_exclusive(x_325)) {
 lean::cnstr_release(x_325, 0);
 lean::cnstr_release(x_325, 1);
 lean::cnstr_release(x_325, 2);
 lean::cnstr_release(x_325, 3);
 x_350 = x_325;
} else {
 lean::dec_ref(x_325);
 x_350 = lean::box(0);
}
x_351 = 0;
if (lean::is_scalar(x_350)) {
 x_352 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_352 = x_350;
}
lean::cnstr_set(x_352, 0, x_326);
lean::cnstr_set(x_352, 1, x_348);
lean::cnstr_set(x_352, 2, x_349);
lean::cnstr_set(x_352, 3, x_327);
lean::cnstr_set_scalar(x_352, sizeof(void*)*4, x_351);
x_353 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_353, 0, x_315);
lean::cnstr_set(x_353, 1, x_316);
lean::cnstr_set(x_353, 2, x_317);
lean::cnstr_set(x_353, 3, x_352);
lean::cnstr_set_scalar(x_353, sizeof(void*)*4, x_335);
return x_353;
}
}
}
else
{
uint8 x_354; 
x_354 = lean::cnstr_get_scalar<uint8>(x_326, sizeof(void*)*4);
if (x_354 == 0)
{
obj* x_355; obj* x_356; obj* x_357; obj* x_358; obj* x_359; obj* x_360; obj* x_361; obj* x_362; obj* x_363; uint8 x_364; obj* x_365; obj* x_366; obj* x_367; 
x_355 = lean::cnstr_get(x_325, 1);
lean::inc(x_355);
x_356 = lean::cnstr_get(x_325, 2);
lean::inc(x_356);
x_357 = lean::cnstr_get(x_325, 3);
lean::inc(x_357);
if (lean::is_exclusive(x_325)) {
 lean::cnstr_release(x_325, 0);
 lean::cnstr_release(x_325, 1);
 lean::cnstr_release(x_325, 2);
 lean::cnstr_release(x_325, 3);
 x_358 = x_325;
} else {
 lean::dec_ref(x_325);
 x_358 = lean::box(0);
}
x_359 = lean::cnstr_get(x_326, 0);
lean::inc(x_359);
x_360 = lean::cnstr_get(x_326, 1);
lean::inc(x_360);
x_361 = lean::cnstr_get(x_326, 2);
lean::inc(x_361);
x_362 = lean::cnstr_get(x_326, 3);
lean::inc(x_362);
if (lean::is_exclusive(x_326)) {
 lean::cnstr_release(x_326, 0);
 lean::cnstr_release(x_326, 1);
 lean::cnstr_release(x_326, 2);
 lean::cnstr_release(x_326, 3);
 x_363 = x_326;
} else {
 lean::dec_ref(x_326);
 x_363 = lean::box(0);
}
x_364 = 1;
if (lean::is_scalar(x_363)) {
 x_365 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_365 = x_363;
}
lean::cnstr_set(x_365, 0, x_315);
lean::cnstr_set(x_365, 1, x_316);
lean::cnstr_set(x_365, 2, x_317);
lean::cnstr_set(x_365, 3, x_359);
lean::cnstr_set_scalar(x_365, sizeof(void*)*4, x_364);
if (lean::is_scalar(x_358)) {
 x_366 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_366 = x_358;
}
lean::cnstr_set(x_366, 0, x_362);
lean::cnstr_set(x_366, 1, x_355);
lean::cnstr_set(x_366, 2, x_356);
lean::cnstr_set(x_366, 3, x_357);
lean::cnstr_set_scalar(x_366, sizeof(void*)*4, x_364);
x_367 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_367, 0, x_365);
lean::cnstr_set(x_367, 1, x_360);
lean::cnstr_set(x_367, 2, x_361);
lean::cnstr_set(x_367, 3, x_366);
lean::cnstr_set_scalar(x_367, sizeof(void*)*4, x_354);
return x_367;
}
else
{
obj* x_368; 
x_368 = lean::cnstr_get(x_325, 3);
lean::inc(x_368);
if (lean::obj_tag(x_368) == 0)
{
obj* x_369; obj* x_370; obj* x_371; uint8 x_372; obj* x_373; obj* x_374; 
x_369 = lean::cnstr_get(x_325, 1);
lean::inc(x_369);
x_370 = lean::cnstr_get(x_325, 2);
lean::inc(x_370);
if (lean::is_exclusive(x_325)) {
 lean::cnstr_release(x_325, 0);
 lean::cnstr_release(x_325, 1);
 lean::cnstr_release(x_325, 2);
 lean::cnstr_release(x_325, 3);
 x_371 = x_325;
} else {
 lean::dec_ref(x_325);
 x_371 = lean::box(0);
}
x_372 = 0;
if (lean::is_scalar(x_371)) {
 x_373 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_373 = x_371;
}
lean::cnstr_set(x_373, 0, x_326);
lean::cnstr_set(x_373, 1, x_369);
lean::cnstr_set(x_373, 2, x_370);
lean::cnstr_set(x_373, 3, x_368);
lean::cnstr_set_scalar(x_373, sizeof(void*)*4, x_372);
x_374 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_374, 0, x_315);
lean::cnstr_set(x_374, 1, x_316);
lean::cnstr_set(x_374, 2, x_317);
lean::cnstr_set(x_374, 3, x_373);
lean::cnstr_set_scalar(x_374, sizeof(void*)*4, x_354);
return x_374;
}
else
{
uint8 x_375; 
x_375 = lean::cnstr_get_scalar<uint8>(x_368, sizeof(void*)*4);
if (x_375 == 0)
{
obj* x_376; obj* x_377; obj* x_378; obj* x_379; obj* x_380; obj* x_381; obj* x_382; obj* x_383; obj* x_384; obj* x_385; obj* x_386; obj* x_387; 
x_376 = lean::cnstr_get(x_325, 1);
lean::inc(x_376);
x_377 = lean::cnstr_get(x_325, 2);
lean::inc(x_377);
if (lean::is_exclusive(x_325)) {
 lean::cnstr_release(x_325, 0);
 lean::cnstr_release(x_325, 1);
 lean::cnstr_release(x_325, 2);
 lean::cnstr_release(x_325, 3);
 x_378 = x_325;
} else {
 lean::dec_ref(x_325);
 x_378 = lean::box(0);
}
x_379 = lean::cnstr_get(x_368, 0);
lean::inc(x_379);
x_380 = lean::cnstr_get(x_368, 1);
lean::inc(x_380);
x_381 = lean::cnstr_get(x_368, 2);
lean::inc(x_381);
x_382 = lean::cnstr_get(x_368, 3);
lean::inc(x_382);
if (lean::is_exclusive(x_368)) {
 lean::cnstr_release(x_368, 0);
 lean::cnstr_release(x_368, 1);
 lean::cnstr_release(x_368, 2);
 lean::cnstr_release(x_368, 3);
 x_383 = x_368;
} else {
 lean::dec_ref(x_368);
 x_383 = lean::box(0);
}
lean::inc(x_326);
if (lean::is_scalar(x_383)) {
 x_384 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_384 = x_383;
}
lean::cnstr_set(x_384, 0, x_315);
lean::cnstr_set(x_384, 1, x_316);
lean::cnstr_set(x_384, 2, x_317);
lean::cnstr_set(x_384, 3, x_326);
if (lean::is_exclusive(x_326)) {
 lean::cnstr_release(x_326, 0);
 lean::cnstr_release(x_326, 1);
 lean::cnstr_release(x_326, 2);
 lean::cnstr_release(x_326, 3);
 x_385 = x_326;
} else {
 lean::dec_ref(x_326);
 x_385 = lean::box(0);
}
lean::cnstr_set_scalar(x_384, sizeof(void*)*4, x_354);
if (lean::is_scalar(x_385)) {
 x_386 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_386 = x_385;
}
lean::cnstr_set(x_386, 0, x_379);
lean::cnstr_set(x_386, 1, x_380);
lean::cnstr_set(x_386, 2, x_381);
lean::cnstr_set(x_386, 3, x_382);
lean::cnstr_set_scalar(x_386, sizeof(void*)*4, x_354);
if (lean::is_scalar(x_378)) {
 x_387 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_387 = x_378;
}
lean::cnstr_set(x_387, 0, x_384);
lean::cnstr_set(x_387, 1, x_376);
lean::cnstr_set(x_387, 2, x_377);
lean::cnstr_set(x_387, 3, x_386);
lean::cnstr_set_scalar(x_387, sizeof(void*)*4, x_375);
return x_387;
}
else
{
obj* x_388; obj* x_389; obj* x_390; obj* x_391; obj* x_392; obj* x_393; obj* x_394; obj* x_395; obj* x_396; uint8 x_397; obj* x_398; obj* x_399; 
x_388 = lean::cnstr_get(x_325, 1);
lean::inc(x_388);
x_389 = lean::cnstr_get(x_325, 2);
lean::inc(x_389);
if (lean::is_exclusive(x_325)) {
 lean::cnstr_release(x_325, 0);
 lean::cnstr_release(x_325, 1);
 lean::cnstr_release(x_325, 2);
 lean::cnstr_release(x_325, 3);
 x_390 = x_325;
} else {
 lean::dec_ref(x_325);
 x_390 = lean::box(0);
}
x_391 = lean::cnstr_get(x_326, 0);
lean::inc(x_391);
x_392 = lean::cnstr_get(x_326, 1);
lean::inc(x_392);
x_393 = lean::cnstr_get(x_326, 2);
lean::inc(x_393);
x_394 = lean::cnstr_get(x_326, 3);
lean::inc(x_394);
if (lean::is_exclusive(x_326)) {
 lean::cnstr_release(x_326, 0);
 lean::cnstr_release(x_326, 1);
 lean::cnstr_release(x_326, 2);
 lean::cnstr_release(x_326, 3);
 x_395 = x_326;
} else {
 lean::dec_ref(x_326);
 x_395 = lean::box(0);
}
if (lean::is_scalar(x_395)) {
 x_396 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_396 = x_395;
}
lean::cnstr_set(x_396, 0, x_391);
lean::cnstr_set(x_396, 1, x_392);
lean::cnstr_set(x_396, 2, x_393);
lean::cnstr_set(x_396, 3, x_394);
lean::cnstr_set_scalar(x_396, sizeof(void*)*4, x_375);
x_397 = 0;
if (lean::is_scalar(x_390)) {
 x_398 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_398 = x_390;
}
lean::cnstr_set(x_398, 0, x_396);
lean::cnstr_set(x_398, 1, x_388);
lean::cnstr_set(x_398, 2, x_389);
lean::cnstr_set(x_398, 3, x_368);
lean::cnstr_set_scalar(x_398, sizeof(void*)*4, x_397);
x_399 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_399, 0, x_315);
lean::cnstr_set(x_399, 1, x_316);
lean::cnstr_set(x_399, 2, x_317);
lean::cnstr_set(x_399, 3, x_398);
lean::cnstr_set_scalar(x_399, sizeof(void*)*4, x_375);
return x_399;
}
}
}
}
}
}
}
}
else
{
uint8 x_400; 
x_400 = l_RBNode_isRed___main___rarg(x_315);
if (x_400 == 0)
{
obj* x_401; obj* x_402; 
x_401 = l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(x_315, x_2, x_3);
x_402 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_402, 0, x_401);
lean::cnstr_set(x_402, 1, x_316);
lean::cnstr_set(x_402, 2, x_317);
lean::cnstr_set(x_402, 3, x_318);
lean::cnstr_set_scalar(x_402, sizeof(void*)*4, x_6);
return x_402;
}
else
{
obj* x_403; 
x_403 = l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(x_315, x_2, x_3);
if (lean::obj_tag(x_403) == 0)
{
lean::dec(x_318);
lean::dec(x_317);
lean::dec(x_316);
return x_403;
}
else
{
obj* x_404; 
x_404 = lean::cnstr_get(x_403, 0);
lean::inc(x_404);
if (lean::obj_tag(x_404) == 0)
{
obj* x_405; 
x_405 = lean::cnstr_get(x_403, 3);
lean::inc(x_405);
if (lean::obj_tag(x_405) == 0)
{
obj* x_406; obj* x_407; obj* x_408; uint8 x_409; obj* x_410; uint8 x_411; obj* x_412; 
x_406 = lean::cnstr_get(x_403, 1);
lean::inc(x_406);
x_407 = lean::cnstr_get(x_403, 2);
lean::inc(x_407);
if (lean::is_exclusive(x_403)) {
 lean::cnstr_release(x_403, 0);
 lean::cnstr_release(x_403, 1);
 lean::cnstr_release(x_403, 2);
 lean::cnstr_release(x_403, 3);
 x_408 = x_403;
} else {
 lean::dec_ref(x_403);
 x_408 = lean::box(0);
}
x_409 = 0;
if (lean::is_scalar(x_408)) {
 x_410 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_410 = x_408;
}
lean::cnstr_set(x_410, 0, x_405);
lean::cnstr_set(x_410, 1, x_406);
lean::cnstr_set(x_410, 2, x_407);
lean::cnstr_set(x_410, 3, x_405);
lean::cnstr_set_scalar(x_410, sizeof(void*)*4, x_409);
x_411 = 1;
x_412 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_412, 0, x_410);
lean::cnstr_set(x_412, 1, x_316);
lean::cnstr_set(x_412, 2, x_317);
lean::cnstr_set(x_412, 3, x_318);
lean::cnstr_set_scalar(x_412, sizeof(void*)*4, x_411);
return x_412;
}
else
{
uint8 x_413; 
x_413 = lean::cnstr_get_scalar<uint8>(x_405, sizeof(void*)*4);
if (x_413 == 0)
{
obj* x_414; obj* x_415; obj* x_416; obj* x_417; obj* x_418; obj* x_419; obj* x_420; obj* x_421; uint8 x_422; obj* x_423; obj* x_424; obj* x_425; 
x_414 = lean::cnstr_get(x_403, 1);
lean::inc(x_414);
x_415 = lean::cnstr_get(x_403, 2);
lean::inc(x_415);
if (lean::is_exclusive(x_403)) {
 lean::cnstr_release(x_403, 0);
 lean::cnstr_release(x_403, 1);
 lean::cnstr_release(x_403, 2);
 lean::cnstr_release(x_403, 3);
 x_416 = x_403;
} else {
 lean::dec_ref(x_403);
 x_416 = lean::box(0);
}
x_417 = lean::cnstr_get(x_405, 0);
lean::inc(x_417);
x_418 = lean::cnstr_get(x_405, 1);
lean::inc(x_418);
x_419 = lean::cnstr_get(x_405, 2);
lean::inc(x_419);
x_420 = lean::cnstr_get(x_405, 3);
lean::inc(x_420);
if (lean::is_exclusive(x_405)) {
 lean::cnstr_release(x_405, 0);
 lean::cnstr_release(x_405, 1);
 lean::cnstr_release(x_405, 2);
 lean::cnstr_release(x_405, 3);
 x_421 = x_405;
} else {
 lean::dec_ref(x_405);
 x_421 = lean::box(0);
}
x_422 = 1;
if (lean::is_scalar(x_421)) {
 x_423 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_423 = x_421;
}
lean::cnstr_set(x_423, 0, x_404);
lean::cnstr_set(x_423, 1, x_414);
lean::cnstr_set(x_423, 2, x_415);
lean::cnstr_set(x_423, 3, x_417);
lean::cnstr_set_scalar(x_423, sizeof(void*)*4, x_422);
if (lean::is_scalar(x_416)) {
 x_424 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_424 = x_416;
}
lean::cnstr_set(x_424, 0, x_420);
lean::cnstr_set(x_424, 1, x_316);
lean::cnstr_set(x_424, 2, x_317);
lean::cnstr_set(x_424, 3, x_318);
lean::cnstr_set_scalar(x_424, sizeof(void*)*4, x_422);
x_425 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_425, 0, x_423);
lean::cnstr_set(x_425, 1, x_418);
lean::cnstr_set(x_425, 2, x_419);
lean::cnstr_set(x_425, 3, x_424);
lean::cnstr_set_scalar(x_425, sizeof(void*)*4, x_413);
return x_425;
}
else
{
obj* x_426; obj* x_427; obj* x_428; uint8 x_429; obj* x_430; obj* x_431; 
x_426 = lean::cnstr_get(x_403, 1);
lean::inc(x_426);
x_427 = lean::cnstr_get(x_403, 2);
lean::inc(x_427);
if (lean::is_exclusive(x_403)) {
 lean::cnstr_release(x_403, 0);
 lean::cnstr_release(x_403, 1);
 lean::cnstr_release(x_403, 2);
 lean::cnstr_release(x_403, 3);
 x_428 = x_403;
} else {
 lean::dec_ref(x_403);
 x_428 = lean::box(0);
}
x_429 = 0;
if (lean::is_scalar(x_428)) {
 x_430 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_430 = x_428;
}
lean::cnstr_set(x_430, 0, x_404);
lean::cnstr_set(x_430, 1, x_426);
lean::cnstr_set(x_430, 2, x_427);
lean::cnstr_set(x_430, 3, x_405);
lean::cnstr_set_scalar(x_430, sizeof(void*)*4, x_429);
x_431 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_431, 0, x_430);
lean::cnstr_set(x_431, 1, x_316);
lean::cnstr_set(x_431, 2, x_317);
lean::cnstr_set(x_431, 3, x_318);
lean::cnstr_set_scalar(x_431, sizeof(void*)*4, x_413);
return x_431;
}
}
}
else
{
uint8 x_432; 
x_432 = lean::cnstr_get_scalar<uint8>(x_404, sizeof(void*)*4);
if (x_432 == 0)
{
obj* x_433; obj* x_434; obj* x_435; obj* x_436; obj* x_437; obj* x_438; obj* x_439; obj* x_440; obj* x_441; uint8 x_442; obj* x_443; obj* x_444; obj* x_445; 
x_433 = lean::cnstr_get(x_403, 1);
lean::inc(x_433);
x_434 = lean::cnstr_get(x_403, 2);
lean::inc(x_434);
x_435 = lean::cnstr_get(x_403, 3);
lean::inc(x_435);
if (lean::is_exclusive(x_403)) {
 lean::cnstr_release(x_403, 0);
 lean::cnstr_release(x_403, 1);
 lean::cnstr_release(x_403, 2);
 lean::cnstr_release(x_403, 3);
 x_436 = x_403;
} else {
 lean::dec_ref(x_403);
 x_436 = lean::box(0);
}
x_437 = lean::cnstr_get(x_404, 0);
lean::inc(x_437);
x_438 = lean::cnstr_get(x_404, 1);
lean::inc(x_438);
x_439 = lean::cnstr_get(x_404, 2);
lean::inc(x_439);
x_440 = lean::cnstr_get(x_404, 3);
lean::inc(x_440);
if (lean::is_exclusive(x_404)) {
 lean::cnstr_release(x_404, 0);
 lean::cnstr_release(x_404, 1);
 lean::cnstr_release(x_404, 2);
 lean::cnstr_release(x_404, 3);
 x_441 = x_404;
} else {
 lean::dec_ref(x_404);
 x_441 = lean::box(0);
}
x_442 = 1;
if (lean::is_scalar(x_441)) {
 x_443 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_443 = x_441;
}
lean::cnstr_set(x_443, 0, x_437);
lean::cnstr_set(x_443, 1, x_438);
lean::cnstr_set(x_443, 2, x_439);
lean::cnstr_set(x_443, 3, x_440);
lean::cnstr_set_scalar(x_443, sizeof(void*)*4, x_442);
if (lean::is_scalar(x_436)) {
 x_444 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_444 = x_436;
}
lean::cnstr_set(x_444, 0, x_435);
lean::cnstr_set(x_444, 1, x_316);
lean::cnstr_set(x_444, 2, x_317);
lean::cnstr_set(x_444, 3, x_318);
lean::cnstr_set_scalar(x_444, sizeof(void*)*4, x_442);
x_445 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_445, 0, x_443);
lean::cnstr_set(x_445, 1, x_433);
lean::cnstr_set(x_445, 2, x_434);
lean::cnstr_set(x_445, 3, x_444);
lean::cnstr_set_scalar(x_445, sizeof(void*)*4, x_432);
return x_445;
}
else
{
obj* x_446; 
x_446 = lean::cnstr_get(x_403, 3);
lean::inc(x_446);
if (lean::obj_tag(x_446) == 0)
{
obj* x_447; obj* x_448; obj* x_449; uint8 x_450; obj* x_451; obj* x_452; 
x_447 = lean::cnstr_get(x_403, 1);
lean::inc(x_447);
x_448 = lean::cnstr_get(x_403, 2);
lean::inc(x_448);
if (lean::is_exclusive(x_403)) {
 lean::cnstr_release(x_403, 0);
 lean::cnstr_release(x_403, 1);
 lean::cnstr_release(x_403, 2);
 lean::cnstr_release(x_403, 3);
 x_449 = x_403;
} else {
 lean::dec_ref(x_403);
 x_449 = lean::box(0);
}
x_450 = 0;
if (lean::is_scalar(x_449)) {
 x_451 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_451 = x_449;
}
lean::cnstr_set(x_451, 0, x_404);
lean::cnstr_set(x_451, 1, x_447);
lean::cnstr_set(x_451, 2, x_448);
lean::cnstr_set(x_451, 3, x_446);
lean::cnstr_set_scalar(x_451, sizeof(void*)*4, x_450);
x_452 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_452, 0, x_451);
lean::cnstr_set(x_452, 1, x_316);
lean::cnstr_set(x_452, 2, x_317);
lean::cnstr_set(x_452, 3, x_318);
lean::cnstr_set_scalar(x_452, sizeof(void*)*4, x_432);
return x_452;
}
else
{
uint8 x_453; 
x_453 = lean::cnstr_get_scalar<uint8>(x_446, sizeof(void*)*4);
if (x_453 == 0)
{
obj* x_454; obj* x_455; obj* x_456; obj* x_457; obj* x_458; obj* x_459; obj* x_460; obj* x_461; obj* x_462; obj* x_463; obj* x_464; obj* x_465; 
x_454 = lean::cnstr_get(x_403, 1);
lean::inc(x_454);
x_455 = lean::cnstr_get(x_403, 2);
lean::inc(x_455);
if (lean::is_exclusive(x_403)) {
 lean::cnstr_release(x_403, 0);
 lean::cnstr_release(x_403, 1);
 lean::cnstr_release(x_403, 2);
 lean::cnstr_release(x_403, 3);
 x_456 = x_403;
} else {
 lean::dec_ref(x_403);
 x_456 = lean::box(0);
}
x_457 = lean::cnstr_get(x_446, 0);
lean::inc(x_457);
x_458 = lean::cnstr_get(x_446, 1);
lean::inc(x_458);
x_459 = lean::cnstr_get(x_446, 2);
lean::inc(x_459);
x_460 = lean::cnstr_get(x_446, 3);
lean::inc(x_460);
if (lean::is_exclusive(x_446)) {
 lean::cnstr_release(x_446, 0);
 lean::cnstr_release(x_446, 1);
 lean::cnstr_release(x_446, 2);
 lean::cnstr_release(x_446, 3);
 x_461 = x_446;
} else {
 lean::dec_ref(x_446);
 x_461 = lean::box(0);
}
lean::inc(x_404);
if (lean::is_scalar(x_461)) {
 x_462 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_462 = x_461;
}
lean::cnstr_set(x_462, 0, x_404);
lean::cnstr_set(x_462, 1, x_454);
lean::cnstr_set(x_462, 2, x_455);
lean::cnstr_set(x_462, 3, x_457);
if (lean::is_exclusive(x_404)) {
 lean::cnstr_release(x_404, 0);
 lean::cnstr_release(x_404, 1);
 lean::cnstr_release(x_404, 2);
 lean::cnstr_release(x_404, 3);
 x_463 = x_404;
} else {
 lean::dec_ref(x_404);
 x_463 = lean::box(0);
}
lean::cnstr_set_scalar(x_462, sizeof(void*)*4, x_432);
if (lean::is_scalar(x_463)) {
 x_464 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_464 = x_463;
}
lean::cnstr_set(x_464, 0, x_460);
lean::cnstr_set(x_464, 1, x_316);
lean::cnstr_set(x_464, 2, x_317);
lean::cnstr_set(x_464, 3, x_318);
lean::cnstr_set_scalar(x_464, sizeof(void*)*4, x_432);
if (lean::is_scalar(x_456)) {
 x_465 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_465 = x_456;
}
lean::cnstr_set(x_465, 0, x_462);
lean::cnstr_set(x_465, 1, x_458);
lean::cnstr_set(x_465, 2, x_459);
lean::cnstr_set(x_465, 3, x_464);
lean::cnstr_set_scalar(x_465, sizeof(void*)*4, x_453);
return x_465;
}
else
{
obj* x_466; obj* x_467; obj* x_468; obj* x_469; obj* x_470; obj* x_471; obj* x_472; obj* x_473; obj* x_474; uint8 x_475; obj* x_476; obj* x_477; 
x_466 = lean::cnstr_get(x_403, 1);
lean::inc(x_466);
x_467 = lean::cnstr_get(x_403, 2);
lean::inc(x_467);
if (lean::is_exclusive(x_403)) {
 lean::cnstr_release(x_403, 0);
 lean::cnstr_release(x_403, 1);
 lean::cnstr_release(x_403, 2);
 lean::cnstr_release(x_403, 3);
 x_468 = x_403;
} else {
 lean::dec_ref(x_403);
 x_468 = lean::box(0);
}
x_469 = lean::cnstr_get(x_404, 0);
lean::inc(x_469);
x_470 = lean::cnstr_get(x_404, 1);
lean::inc(x_470);
x_471 = lean::cnstr_get(x_404, 2);
lean::inc(x_471);
x_472 = lean::cnstr_get(x_404, 3);
lean::inc(x_472);
if (lean::is_exclusive(x_404)) {
 lean::cnstr_release(x_404, 0);
 lean::cnstr_release(x_404, 1);
 lean::cnstr_release(x_404, 2);
 lean::cnstr_release(x_404, 3);
 x_473 = x_404;
} else {
 lean::dec_ref(x_404);
 x_473 = lean::box(0);
}
if (lean::is_scalar(x_473)) {
 x_474 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_474 = x_473;
}
lean::cnstr_set(x_474, 0, x_469);
lean::cnstr_set(x_474, 1, x_470);
lean::cnstr_set(x_474, 2, x_471);
lean::cnstr_set(x_474, 3, x_472);
lean::cnstr_set_scalar(x_474, sizeof(void*)*4, x_453);
x_475 = 0;
if (lean::is_scalar(x_468)) {
 x_476 = lean::alloc_cnstr(1, 4, 1);
} else {
 x_476 = x_468;
}
lean::cnstr_set(x_476, 0, x_474);
lean::cnstr_set(x_476, 1, x_466);
lean::cnstr_set(x_476, 2, x_467);
lean::cnstr_set(x_476, 3, x_446);
lean::cnstr_set_scalar(x_476, sizeof(void*)*4, x_475);
x_477 = lean::alloc_cnstr(1, 4, 1);
lean::cnstr_set(x_477, 0, x_476);
lean::cnstr_set(x_477, 1, x_316);
lean::cnstr_set(x_477, 2, x_317);
lean::cnstr_set(x_477, 3, x_318);
lean::cnstr_set_scalar(x_477, sizeof(void*)*4, x_453);
return x_477;
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_RBNode_insert___at_Lean_Elaborator_elaborators___spec__1(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
uint8 x_4; 
x_4 = l_RBNode_isRed___main___rarg(x_1);
if (x_4 == 0)
{
obj* x_5; 
x_5 = l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(x_1, x_2, x_3);
return x_5;
}
else
{
obj* x_6; obj* x_7; 
x_6 = l_RBNode_ins___main___at_Lean_Elaborator_elaborators___spec__2(x_1, x_2, x_3);
x_7 = l_RBNode_setBlack___main___rarg(x_6);
return x_7;
}
}
}
obj* l_List_foldl___main___at_Lean_Elaborator_elaborators___spec__3(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
return x_1;
}
else
{
obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_3 = lean::cnstr_get(x_2, 0);
lean::inc(x_3);
x_4 = lean::cnstr_get(x_2, 1);
lean::inc(x_4);
lean::dec(x_2);
x_5 = lean::cnstr_get(x_3, 0);
lean::inc(x_5);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
x_7 = l_RBNode_insert___at_Lean_Elaborator_elaborators___spec__1(x_1, x_5, x_6);
x_1 = x_7;
x_2 = x_4;
goto _start;
}
}
}
obj* _init_l_Lean_Elaborator_elaborators() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; 
x_1 = l_Lean_Parser_Module_header;
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_Module_header_elaborate___boxed), 4, 0);
x_3 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_3, 0, x_1);
lean::cnstr_set(x_3, 1, x_2);
x_4 = l_Lean_Parser_command_notation;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_notation_elaborate___boxed), 4, 0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = l_Lean_Parser_command_reserveNotation;
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_reserveNotation_elaborate___boxed), 4, 0);
x_9 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
x_10 = l_Lean_Parser_command_universe;
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_universe_elaborate___boxed), 4, 0);
x_12 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_Lean_Parser_noKind;
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_noKind_elaborate), 4, 0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set(x_15, 1, x_14);
x_16 = l_Lean_Parser_command_end;
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_end_elaborate___boxed), 4, 0);
x_18 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_17);
x_19 = l_Lean_Parser_command_section;
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_section_elaborate___boxed), 4, 0);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
x_22 = l_Lean_Parser_command_namespace;
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_namespace_elaborate___boxed), 4, 0);
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_22);
lean::cnstr_set(x_24, 1, x_23);
x_25 = l_Lean_Parser_command_variables;
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_variables_elaborate___boxed), 4, 0);
x_27 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_27, 0, x_25);
lean::cnstr_set(x_27, 1, x_26);
x_28 = l_Lean_Parser_command_include;
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_include_elaborate___boxed), 4, 0);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_28);
lean::cnstr_set(x_30, 1, x_29);
x_31 = l_Lean_Parser_command_declaration;
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_declaration_elaborate), 4, 0);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_31);
lean::cnstr_set(x_33, 1, x_32);
x_34 = l_Lean_Parser_command_attribute;
x_35 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_attribute_elaborate___boxed), 4, 0);
x_36 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_36, 0, x_34);
lean::cnstr_set(x_36, 1, x_35);
x_37 = l_Lean_Parser_command_open;
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_open_elaborate___boxed), 4, 0);
x_39 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_39, 0, x_37);
lean::cnstr_set(x_39, 1, x_38);
x_40 = l_Lean_Parser_command_export;
x_41 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_export_elaborate___boxed), 4, 0);
x_42 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_42, 0, x_40);
lean::cnstr_set(x_42, 1, x_41);
x_43 = l_Lean_Parser_command_check;
x_44 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_check_elaborate___boxed), 4, 0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_43);
lean::cnstr_set(x_45, 1, x_44);
x_46 = l_Lean_Parser_command_initQuot;
x_47 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_initQuot_elaborate___boxed), 4, 0);
x_48 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_48, 0, x_46);
lean::cnstr_set(x_48, 1, x_47);
x_49 = l_Lean_Parser_command_setOption;
x_50 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_setOption_elaborate___boxed), 4, 0);
x_51 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_51, 0, x_49);
lean::cnstr_set(x_51, 1, x_50);
x_52 = l_Lean_Parser_Module_eoi;
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_eoi_elaborate___boxed), 4, 0);
x_54 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_54, 0, x_52);
lean::cnstr_set(x_54, 1, x_53);
x_55 = lean::box(0);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_54);
lean::cnstr_set(x_56, 1, x_55);
x_57 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_57, 0, x_51);
lean::cnstr_set(x_57, 1, x_56);
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_48);
lean::cnstr_set(x_58, 1, x_57);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_45);
lean::cnstr_set(x_59, 1, x_58);
x_60 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_60, 0, x_42);
lean::cnstr_set(x_60, 1, x_59);
x_61 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_61, 0, x_39);
lean::cnstr_set(x_61, 1, x_60);
x_62 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_62, 0, x_36);
lean::cnstr_set(x_62, 1, x_61);
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_33);
lean::cnstr_set(x_63, 1, x_62);
x_64 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_64, 0, x_30);
lean::cnstr_set(x_64, 1, x_63);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_27);
lean::cnstr_set(x_65, 1, x_64);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_24);
lean::cnstr_set(x_66, 1, x_65);
x_67 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_67, 0, x_21);
lean::cnstr_set(x_67, 1, x_66);
x_68 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_68, 0, x_18);
lean::cnstr_set(x_68, 1, x_67);
x_69 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_69, 0, x_15);
lean::cnstr_set(x_69, 1, x_68);
x_70 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_70, 0, x_12);
lean::cnstr_set(x_70, 1, x_69);
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_9);
lean::cnstr_set(x_71, 1, x_70);
x_72 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_72, 0, x_6);
lean::cnstr_set(x_72, 1, x_71);
x_73 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_73, 0, x_3);
lean::cnstr_set(x_73, 1, x_72);
x_74 = lean::box(0);
x_75 = l_List_foldl___main___at_Lean_Elaborator_elaborators___spec__3(x_74, x_73);
return x_75;
}
}
uint8 l_List_decidableMem___main___at_Lean_Elaborator_isOpenNamespace___main___spec__1(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
uint8 x_3; 
x_3 = 0;
return x_3;
}
else
{
obj* x_4; obj* x_5; uint8 x_6; 
x_4 = lean::cnstr_get(x_2, 0);
x_5 = lean::cnstr_get(x_2, 1);
x_6 = lean_name_dec_eq(x_1, x_4);
if (x_6 == 0)
{
uint8 x_7; 
x_7 = l_List_decidableMem___main___at_Lean_Elaborator_isOpenNamespace___main___spec__1(x_1, x_5);
if (x_7 == 0)
{
uint8 x_8; 
x_8 = 0;
return x_8;
}
else
{
uint8 x_9; 
x_9 = 1;
return x_9;
}
}
else
{
uint8 x_10; 
x_10 = 1;
return x_10;
}
}
}
}
uint8 l_List_foldr___main___at_Lean_Elaborator_isOpenNamespace___main___spec__2(obj* x_1, uint8 x_2, obj* x_3) {
_start:
{
if (lean::obj_tag(x_3) == 0)
{
return x_2;
}
else
{
obj* x_4; obj* x_5; uint8 x_6; obj* x_7; obj* x_8; uint8 x_9; 
x_4 = lean::cnstr_get(x_3, 0);
x_5 = lean::cnstr_get(x_3, 1);
x_6 = l_List_foldr___main___at_Lean_Elaborator_isOpenNamespace___main___spec__2(x_1, x_2, x_5);
x_7 = lean::cnstr_get(x_4, 0);
x_8 = lean::cnstr_get(x_7, 2);
x_9 = lean_name_dec_eq(x_8, x_1);
if (x_9 == 0)
{
return x_6;
}
else
{
uint8 x_10; 
x_10 = 1;
return x_10;
}
}
}
}
uint8 l_Lean_Elaborator_isOpenNamespace___main(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; uint8 x_4; 
x_3 = lean::box(0);
x_4 = lean_name_dec_eq(x_2, x_3);
if (x_4 == 0)
{
obj* x_5; uint8 x_6; 
x_5 = lean::cnstr_get(x_1, 6);
x_6 = l_List_decidableMem___main___at_Lean_Elaborator_isOpenNamespace___main___spec__1(x_2, x_5);
if (x_6 == 0)
{
obj* x_7; uint8 x_8; uint8 x_9; 
x_7 = lean::cnstr_get(x_1, 7);
x_8 = 0;
x_9 = l_List_foldr___main___at_Lean_Elaborator_isOpenNamespace___main___spec__2(x_2, x_8, x_7);
if (x_9 == 0)
{
uint8 x_10; 
x_10 = 0;
return x_10;
}
else
{
uint8 x_11; 
x_11 = 1;
return x_11;
}
}
else
{
uint8 x_12; 
x_12 = 1;
return x_12;
}
}
else
{
uint8 x_13; 
x_13 = 1;
return x_13;
}
}
}
obj* l_List_decidableMem___main___at_Lean_Elaborator_isOpenNamespace___main___spec__1___boxed(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; obj* x_4; 
x_3 = l_List_decidableMem___main___at_Lean_Elaborator_isOpenNamespace___main___spec__1(x_1, x_2);
lean::dec(x_2);
lean::dec(x_1);
x_4 = lean::box(x_3);
return x_4;
}
}
obj* l_List_foldr___main___at_Lean_Elaborator_isOpenNamespace___main___spec__2___boxed(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
uint8 x_4; uint8 x_5; obj* x_6; 
x_4 = lean::unbox(x_2);
lean::dec(x_2);
x_5 = l_List_foldr___main___at_Lean_Elaborator_isOpenNamespace___main___spec__2(x_1, x_4, x_3);
lean::dec(x_3);
lean::dec(x_1);
x_6 = lean::box(x_5);
return x_6;
}
}
obj* l_Lean_Elaborator_isOpenNamespace___main___boxed(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; obj* x_4; 
x_3 = l_Lean_Elaborator_isOpenNamespace___main(x_1, x_2);
lean::dec(x_2);
lean::dec(x_1);
x_4 = lean::box(x_3);
return x_4;
}
}
uint8 l_Lean_Elaborator_isOpenNamespace(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; 
x_3 = l_Lean_Elaborator_isOpenNamespace___main(x_1, x_2);
return x_3;
}
}
obj* l_Lean_Elaborator_isOpenNamespace___boxed(obj* x_1, obj* x_2) {
_start:
{
uint8 x_3; obj* x_4; 
x_3 = l_Lean_Elaborator_isOpenNamespace(x_1, x_2);
lean::dec(x_2);
lean::dec(x_1);
x_4 = lean::box(x_3);
return x_4;
}
}
uint8 l_List_foldr___main___at_Lean_Elaborator_matchOpenSpec___spec__1(obj* x_1, uint8 x_2, obj* x_3) {
_start:
{
if (lean::obj_tag(x_3) == 0)
{
return x_2;
}
else
{
obj* x_4; obj* x_5; uint8 x_6; obj* x_7; uint8 x_8; 
x_4 = lean::cnstr_get(x_3, 0);
x_5 = lean::cnstr_get(x_3, 1);
x_6 = l_List_foldr___main___at_Lean_Elaborator_matchOpenSpec___spec__1(x_1, x_2, x_5);
x_7 = lean::cnstr_get(x_4, 2);
x_8 = lean_name_dec_eq(x_1, x_7);
if (x_8 == 0)
{
return x_6;
}
else
{
uint8 x_9; 
x_9 = 1;
return x_9;
}
}
}
}
obj* l_Lean_Elaborator_matchOpenSpec(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = lean::cnstr_get(x_2, 2);
lean::inc(x_3);
if (lean::obj_tag(x_3) == 0)
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_4 = lean::cnstr_get(x_2, 0);
lean::inc(x_4);
lean::dec(x_2);
x_5 = lean::cnstr_get(x_4, 2);
lean::inc(x_5);
lean::dec(x_4);
x_6 = l_Lean_Name_append___main(x_5, x_1);
lean::dec(x_5);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
uint8 x_8; 
x_8 = !lean::is_exclusive(x_3);
if (x_8 == 0)
{
obj* x_9; obj* x_10; obj* x_11; uint8 x_12; 
x_9 = lean::cnstr_get(x_3, 0);
x_10 = lean::cnstr_get(x_9, 1);
lean::inc(x_10);
x_11 = lean::cnstr_get(x_10, 2);
lean::inc(x_11);
lean::dec(x_10);
x_12 = lean_name_dec_eq(x_1, x_11);
lean::dec(x_11);
if (x_12 == 0)
{
obj* x_13; uint8 x_14; uint8 x_15; 
x_13 = lean::cnstr_get(x_9, 2);
lean::inc(x_13);
lean::dec(x_9);
x_14 = 0;
x_15 = l_List_foldr___main___at_Lean_Elaborator_matchOpenSpec___spec__1(x_1, x_14, x_13);
lean::dec(x_13);
if (x_15 == 0)
{
obj* x_16; 
lean::free_heap_obj(x_3);
lean::dec(x_2);
lean::dec(x_1);
x_16 = lean::box(0);
return x_16;
}
else
{
obj* x_17; obj* x_18; obj* x_19; 
x_17 = lean::cnstr_get(x_2, 0);
lean::inc(x_17);
lean::dec(x_2);
x_18 = lean::cnstr_get(x_17, 2);
lean::inc(x_18);
lean::dec(x_17);
x_19 = l_Lean_Name_append___main(x_18, x_1);
lean::dec(x_18);
lean::cnstr_set(x_3, 0, x_19);
return x_3;
}
}
else
{
obj* x_20; obj* x_21; obj* x_22; 
lean::dec(x_9);
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_21 = lean::cnstr_get(x_20, 2);
lean::inc(x_21);
lean::dec(x_20);
x_22 = l_Lean_Name_append___main(x_21, x_1);
lean::dec(x_21);
lean::cnstr_set(x_3, 0, x_22);
return x_3;
}
}
else
{
obj* x_23; obj* x_24; obj* x_25; uint8 x_26; 
x_23 = lean::cnstr_get(x_3, 0);
lean::inc(x_23);
lean::dec(x_3);
x_24 = lean::cnstr_get(x_23, 1);
lean::inc(x_24);
x_25 = lean::cnstr_get(x_24, 2);
lean::inc(x_25);
lean::dec(x_24);
x_26 = lean_name_dec_eq(x_1, x_25);
lean::dec(x_25);
if (x_26 == 0)
{
obj* x_27; uint8 x_28; uint8 x_29; 
x_27 = lean::cnstr_get(x_23, 2);
lean::inc(x_27);
lean::dec(x_23);
x_28 = 0;
x_29 = l_List_foldr___main___at_Lean_Elaborator_matchOpenSpec___spec__1(x_1, x_28, x_27);
lean::dec(x_27);
if (x_29 == 0)
{
obj* x_30; 
lean::dec(x_2);
lean::dec(x_1);
x_30 = lean::box(0);
return x_30;
}
else
{
obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_31 = lean::cnstr_get(x_2, 0);
lean::inc(x_31);
lean::dec(x_2);
x_32 = lean::cnstr_get(x_31, 2);
lean::inc(x_32);
lean::dec(x_31);
x_33 = l_Lean_Name_append___main(x_32, x_1);
lean::dec(x_32);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_33);
return x_34;
}
}
else
{
obj* x_35; obj* x_36; obj* x_37; obj* x_38; 
lean::dec(x_23);
x_35 = lean::cnstr_get(x_2, 0);
lean::inc(x_35);
lean::dec(x_2);
x_36 = lean::cnstr_get(x_35, 2);
lean::inc(x_36);
lean::dec(x_35);
x_37 = l_Lean_Name_append___main(x_36, x_1);
lean::dec(x_36);
x_38 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_38, 0, x_37);
return x_38;
}
}
}
}
}
obj* l_List_foldr___main___at_Lean_Elaborator_matchOpenSpec___spec__1___boxed(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
uint8 x_4; uint8 x_5; obj* x_6; 
x_4 = lean::unbox(x_2);
lean::dec(x_2);
x_5 = l_List_foldr___main___at_Lean_Elaborator_matchOpenSpec___spec__1(x_1, x_4, x_3);
lean::dec(x_3);
lean::dec(x_1);
x_6 = lean::box(x_5);
return x_6;
}
}
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__1(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
if (lean::obj_tag(x_3) == 0)
{
obj* x_5; 
lean::dec(x_1);
x_5 = l_List_reverse___rarg(x_4);
return x_5;
}
else
{
uint8 x_6; 
x_6 = !lean::is_exclusive(x_3);
if (x_6 == 0)
{
obj* x_7; obj* x_8; obj* x_9; obj* x_10; uint8 x_11; 
x_7 = lean::cnstr_get(x_3, 0);
x_8 = lean::cnstr_get(x_3, 1);
x_9 = lean::cnstr_get(x_2, 8);
lean::inc(x_1);
x_10 = l_Lean_Name_append___main(x_7, x_1);
x_11 = l_Lean_Environment_contains(x_9, x_10);
lean::dec(x_10);
if (x_11 == 0)
{
lean::free_heap_obj(x_3);
lean::dec(x_7);
x_3 = x_8;
goto _start;
}
else
{
lean::cnstr_set(x_3, 1, x_4);
{
obj* _tmp_2 = x_8;
obj* _tmp_3 = x_3;
x_3 = _tmp_2;
x_4 = _tmp_3;
}
goto _start;
}
}
else
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; uint8 x_18; 
x_14 = lean::cnstr_get(x_3, 0);
x_15 = lean::cnstr_get(x_3, 1);
lean::inc(x_15);
lean::inc(x_14);
lean::dec(x_3);
x_16 = lean::cnstr_get(x_2, 8);
lean::inc(x_1);
x_17 = l_Lean_Name_append___main(x_14, x_1);
x_18 = l_Lean_Environment_contains(x_16, x_17);
lean::dec(x_17);
if (x_18 == 0)
{
lean::dec(x_14);
x_3 = x_15;
goto _start;
}
else
{
obj* x_20; 
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_14);
lean::cnstr_set(x_20, 1, x_4);
x_3 = x_15;
x_4 = x_20;
goto _start;
}
}
}
}
}
obj* l_List_filterMap___main___at_Lean_Elaborator_resolveContext___main___spec__2(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = lean::box(0);
return x_3;
}
else
{
uint8 x_4; 
x_4 = !lean::is_exclusive(x_2);
if (x_4 == 0)
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = lean::cnstr_get(x_2, 0);
x_6 = lean::cnstr_get(x_2, 1);
lean::inc(x_1);
x_7 = l_Lean_Elaborator_matchOpenSpec(x_1, x_5);
if (lean::obj_tag(x_7) == 0)
{
lean::free_heap_obj(x_2);
x_2 = x_6;
goto _start;
}
else
{
obj* x_9; obj* x_10; 
x_9 = lean::cnstr_get(x_7, 0);
lean::inc(x_9);
lean::dec(x_7);
x_10 = l_List_filterMap___main___at_Lean_Elaborator_resolveContext___main___spec__2(x_1, x_6);
lean::cnstr_set(x_2, 1, x_10);
lean::cnstr_set(x_2, 0, x_9);
return x_2;
}
}
else
{
obj* x_11; obj* x_12; obj* x_13; 
x_11 = lean::cnstr_get(x_2, 0);
x_12 = lean::cnstr_get(x_2, 1);
lean::inc(x_12);
lean::inc(x_11);
lean::dec(x_2);
lean::inc(x_1);
x_13 = l_Lean_Elaborator_matchOpenSpec(x_1, x_11);
if (lean::obj_tag(x_13) == 0)
{
x_2 = x_12;
goto _start;
}
else
{
obj* x_15; obj* x_16; obj* x_17; 
x_15 = lean::cnstr_get(x_13, 0);
lean::inc(x_15);
lean::dec(x_13);
x_16 = l_List_filterMap___main___at_Lean_Elaborator_resolveContext___main___spec__2(x_1, x_12);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set(x_17, 1, x_16);
return x_17;
}
}
}
}
}
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__3(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_4; 
x_4 = l_List_reverse___rarg(x_3);
return x_4;
}
else
{
uint8 x_5; 
x_5 = !lean::is_exclusive(x_2);
if (x_5 == 0)
{
obj* x_6; obj* x_7; uint8 x_8; 
x_6 = lean::cnstr_get(x_2, 0);
x_7 = lean::cnstr_get(x_2, 1);
x_8 = l_Lean_Environment_contains(x_1, x_6);
if (x_8 == 0)
{
lean::free_heap_obj(x_2);
lean::dec(x_6);
x_2 = x_7;
goto _start;
}
else
{
lean::cnstr_set(x_2, 1, x_3);
{
obj* _tmp_1 = x_7;
obj* _tmp_2 = x_2;
x_2 = _tmp_1;
x_3 = _tmp_2;
}
goto _start;
}
}
else
{
obj* x_11; obj* x_12; uint8 x_13; 
x_11 = lean::cnstr_get(x_2, 0);
x_12 = lean::cnstr_get(x_2, 1);
lean::inc(x_12);
lean::inc(x_11);
lean::dec(x_2);
x_13 = l_Lean_Environment_contains(x_1, x_11);
if (x_13 == 0)
{
lean::dec(x_11);
x_2 = x_12;
goto _start;
}
else
{
obj* x_15; 
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_11);
lean::cnstr_set(x_15, 1, x_3);
x_2 = x_12;
x_3 = x_15;
goto _start;
}
}
}
}
}
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__4(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_4; 
x_4 = l_List_reverse___rarg(x_3);
return x_4;
}
else
{
uint8 x_5; 
x_5 = !lean::is_exclusive(x_2);
if (x_5 == 0)
{
obj* x_6; obj* x_7; obj* x_8; uint8 x_9; 
x_6 = lean::cnstr_get(x_2, 0);
x_7 = lean::cnstr_get(x_2, 1);
x_8 = lean::cnstr_get(x_6, 0);
lean::inc(x_8);
x_9 = l_Lean_Elaborator_isOpenNamespace___main(x_1, x_8);
lean::dec(x_8);
if (x_9 == 0)
{
lean::free_heap_obj(x_2);
lean::dec(x_6);
x_2 = x_7;
goto _start;
}
else
{
lean::cnstr_set(x_2, 1, x_3);
{
obj* _tmp_1 = x_7;
obj* _tmp_2 = x_2;
x_2 = _tmp_1;
x_3 = _tmp_2;
}
goto _start;
}
}
else
{
obj* x_12; obj* x_13; obj* x_14; uint8 x_15; 
x_12 = lean::cnstr_get(x_2, 0);
x_13 = lean::cnstr_get(x_2, 1);
lean::inc(x_13);
lean::inc(x_12);
lean::dec(x_2);
x_14 = lean::cnstr_get(x_12, 0);
lean::inc(x_14);
x_15 = l_Lean_Elaborator_isOpenNamespace___main(x_1, x_14);
lean::dec(x_14);
if (x_15 == 0)
{
lean::dec(x_12);
x_2 = x_13;
goto _start;
}
else
{
obj* x_17; 
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_12);
lean::cnstr_set(x_17, 1, x_3);
x_2 = x_13;
x_3 = x_17;
goto _start;
}
}
}
}
}
obj* l_List_filterMap___main___at_Lean_Elaborator_resolveContext___main___spec__5(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = lean::box(0);
return x_3;
}
else
{
uint8 x_4; 
x_4 = !lean::is_exclusive(x_2);
if (x_4 == 0)
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_2, 0);
x_6 = lean::cnstr_get(x_2, 1);
x_7 = lean::cnstr_get(x_5, 1);
lean::inc(x_7);
lean::dec(x_5);
lean::inc(x_1);
x_8 = l_Lean_Elaborator_matchOpenSpec(x_1, x_7);
if (lean::obj_tag(x_8) == 0)
{
lean::free_heap_obj(x_2);
x_2 = x_6;
goto _start;
}
else
{
obj* x_10; obj* x_11; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_11 = l_List_filterMap___main___at_Lean_Elaborator_resolveContext___main___spec__5(x_1, x_6);
lean::cnstr_set(x_2, 1, x_11);
lean::cnstr_set(x_2, 0, x_10);
return x_2;
}
}
else
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_12 = lean::cnstr_get(x_2, 0);
x_13 = lean::cnstr_get(x_2, 1);
lean::inc(x_13);
lean::inc(x_12);
lean::dec(x_2);
x_14 = lean::cnstr_get(x_12, 1);
lean::inc(x_14);
lean::dec(x_12);
lean::inc(x_1);
x_15 = l_Lean_Elaborator_matchOpenSpec(x_1, x_14);
if (lean::obj_tag(x_15) == 0)
{
x_2 = x_13;
goto _start;
}
else
{
obj* x_17; obj* x_18; obj* x_19; 
x_17 = lean::cnstr_get(x_15, 0);
lean::inc(x_17);
lean::dec(x_15);
x_18 = l_List_filterMap___main___at_Lean_Elaborator_resolveContext___main___spec__5(x_1, x_13);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_18);
return x_19;
}
}
}
}
}
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__6(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_4; 
x_4 = l_List_reverse___rarg(x_3);
return x_4;
}
else
{
uint8 x_5; 
x_5 = !lean::is_exclusive(x_2);
if (x_5 == 0)
{
obj* x_6; obj* x_7; uint8 x_8; 
x_6 = lean::cnstr_get(x_2, 0);
x_7 = lean::cnstr_get(x_2, 1);
x_8 = l_Lean_Environment_contains(x_1, x_6);
if (x_8 == 0)
{
lean::free_heap_obj(x_2);
lean::dec(x_6);
x_2 = x_7;
goto _start;
}
else
{
lean::cnstr_set(x_2, 1, x_3);
{
obj* _tmp_1 = x_7;
obj* _tmp_2 = x_2;
x_2 = _tmp_1;
x_3 = _tmp_2;
}
goto _start;
}
}
else
{
obj* x_11; obj* x_12; uint8 x_13; 
x_11 = lean::cnstr_get(x_2, 0);
x_12 = lean::cnstr_get(x_2, 1);
lean::inc(x_12);
lean::inc(x_11);
lean::dec(x_2);
x_13 = l_Lean_Environment_contains(x_1, x_11);
if (x_13 == 0)
{
lean::dec(x_11);
x_2 = x_12;
goto _start;
}
else
{
obj* x_15; 
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_11);
lean::cnstr_set(x_15, 1, x_3);
x_2 = x_12;
x_3 = x_15;
goto _start;
}
}
}
}
}
obj* _init_l_Lean_Elaborator_resolveContext___main___closed__1() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("_root_");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* l_Lean_Elaborator_resolveContext___main(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
lean::inc(x_4);
x_5 = l_Lean_Elaborator_currentScope(x_2, x_3, x_4);
if (lean::obj_tag(x_5) == 0)
{
uint8 x_6; 
lean::dec(x_4);
lean::dec(x_1);
x_6 = !lean::is_exclusive(x_5);
if (x_6 == 0)
{
return x_5;
}
else
{
obj* x_7; obj* x_8; 
x_7 = lean::cnstr_get(x_5, 0);
lean::inc(x_7);
lean::dec(x_5);
x_8 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
}
else
{
uint8 x_9; 
x_9 = !lean::is_exclusive(x_5);
if (x_9 == 0)
{
obj* x_10; uint8 x_11; 
x_10 = lean::cnstr_get(x_5, 0);
x_11 = !lean::is_exclusive(x_10);
if (x_11 == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_12 = lean::cnstr_get(x_10, 0);
x_13 = lean::cnstr_get(x_10, 1);
x_14 = lean::cnstr_get(x_12, 4);
lean::inc(x_14);
x_15 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
lean::inc(x_1);
x_16 = l_Lean_Elaborator_OrderedRBMap_find___rarg(x_15, x_14, x_1);
if (lean::obj_tag(x_16) == 0)
{
obj* x_17; obj* x_18; obj* x_19; 
x_17 = lean::cnstr_get(x_12, 6);
lean::inc(x_17);
x_18 = lean::box(0);
lean::inc(x_1);
x_19 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__1(x_1, x_4, x_17, x_18);
if (lean::obj_tag(x_19) == 0)
{
obj* x_20; obj* x_21; obj* x_22; obj* x_23; uint8 x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_20 = l_Lean_Elaborator_resolveContext___main___closed__1;
x_21 = lean::box(0);
lean::inc(x_1);
x_22 = l_Lean_Name_replacePrefix___main(x_1, x_20, x_21);
x_23 = lean::cnstr_get(x_4, 8);
lean::inc(x_23);
x_24 = l_Lean_Environment_contains(x_23, x_22);
x_25 = lean::cnstr_get(x_12, 7);
lean::inc(x_25);
lean::inc(x_1);
x_26 = l_List_filterMap___main___at_Lean_Elaborator_resolveContext___main___spec__2(x_1, x_25);
x_27 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__3(x_23, x_26, x_18);
x_28 = lean::cnstr_get(x_4, 3);
lean::inc(x_28);
lean::dec(x_4);
x_29 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__4(x_12, x_28, x_18);
lean::dec(x_12);
x_30 = l_List_filterMap___main___at_Lean_Elaborator_resolveContext___main___spec__5(x_1, x_29);
x_31 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__6(x_23, x_30, x_18);
lean::dec(x_23);
if (x_24 == 0)
{
obj* x_32; obj* x_33; 
lean::dec(x_22);
x_32 = l_List_append___rarg(x_19, x_27);
x_33 = l_List_append___rarg(x_32, x_31);
lean::cnstr_set(x_10, 0, x_33);
return x_5;
}
else
{
obj* x_34; obj* x_35; obj* x_36; 
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_22);
lean::cnstr_set(x_34, 1, x_19);
x_35 = l_List_append___rarg(x_34, x_27);
x_36 = l_List_append___rarg(x_35, x_31);
lean::cnstr_set(x_10, 0, x_36);
return x_5;
}
}
else
{
uint8 x_37; 
lean::dec(x_12);
lean::dec(x_4);
x_37 = !lean::is_exclusive(x_19);
if (x_37 == 0)
{
obj* x_38; obj* x_39; obj* x_40; 
x_38 = lean::cnstr_get(x_19, 0);
x_39 = lean::cnstr_get(x_19, 1);
lean::dec(x_39);
x_40 = l_Lean_Name_append___main(x_38, x_1);
lean::dec(x_38);
lean::cnstr_set(x_19, 1, x_18);
lean::cnstr_set(x_19, 0, x_40);
lean::cnstr_set(x_10, 0, x_19);
return x_5;
}
else
{
obj* x_41; obj* x_42; obj* x_43; 
x_41 = lean::cnstr_get(x_19, 0);
lean::inc(x_41);
lean::dec(x_19);
x_42 = l_Lean_Name_append___main(x_41, x_1);
lean::dec(x_41);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_18);
lean::cnstr_set(x_10, 0, x_43);
return x_5;
}
}
}
else
{
obj* x_44; uint8 x_45; 
lean::free_heap_obj(x_10);
lean::dec(x_12);
lean::dec(x_4);
lean::dec(x_1);
x_44 = lean::cnstr_get(x_16, 0);
lean::inc(x_44);
lean::dec(x_16);
x_45 = !lean::is_exclusive(x_44);
if (x_45 == 0)
{
obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; 
x_46 = lean::cnstr_get(x_44, 1);
x_47 = lean::cnstr_get(x_44, 0);
lean::dec(x_47);
x_48 = lean::cnstr_get(x_46, 0);
lean::inc(x_48);
lean::dec(x_46);
x_49 = lean::box(0);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_48);
lean::cnstr_set(x_50, 1, x_49);
lean::cnstr_set(x_44, 1, x_13);
lean::cnstr_set(x_44, 0, x_50);
lean::cnstr_set(x_5, 0, x_44);
return x_5;
}
else
{
obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; 
x_51 = lean::cnstr_get(x_44, 1);
lean::inc(x_51);
lean::dec(x_44);
x_52 = lean::cnstr_get(x_51, 0);
lean::inc(x_52);
lean::dec(x_51);
x_53 = lean::box(0);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_52);
lean::cnstr_set(x_54, 1, x_53);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_13);
lean::cnstr_set(x_5, 0, x_55);
return x_5;
}
}
}
else
{
obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; 
x_56 = lean::cnstr_get(x_10, 0);
x_57 = lean::cnstr_get(x_10, 1);
lean::inc(x_57);
lean::inc(x_56);
lean::dec(x_10);
x_58 = lean::cnstr_get(x_56, 4);
lean::inc(x_58);
x_59 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
lean::inc(x_1);
x_60 = l_Lean_Elaborator_OrderedRBMap_find___rarg(x_59, x_58, x_1);
if (lean::obj_tag(x_60) == 0)
{
obj* x_61; obj* x_62; obj* x_63; 
x_61 = lean::cnstr_get(x_56, 6);
lean::inc(x_61);
x_62 = lean::box(0);
lean::inc(x_1);
x_63 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__1(x_1, x_4, x_61, x_62);
if (lean::obj_tag(x_63) == 0)
{
obj* x_64; obj* x_65; obj* x_66; obj* x_67; uint8 x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; 
x_64 = l_Lean_Elaborator_resolveContext___main___closed__1;
x_65 = lean::box(0);
lean::inc(x_1);
x_66 = l_Lean_Name_replacePrefix___main(x_1, x_64, x_65);
x_67 = lean::cnstr_get(x_4, 8);
lean::inc(x_67);
x_68 = l_Lean_Environment_contains(x_67, x_66);
x_69 = lean::cnstr_get(x_56, 7);
lean::inc(x_69);
lean::inc(x_1);
x_70 = l_List_filterMap___main___at_Lean_Elaborator_resolveContext___main___spec__2(x_1, x_69);
x_71 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__3(x_67, x_70, x_62);
x_72 = lean::cnstr_get(x_4, 3);
lean::inc(x_72);
lean::dec(x_4);
x_73 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__4(x_56, x_72, x_62);
lean::dec(x_56);
x_74 = l_List_filterMap___main___at_Lean_Elaborator_resolveContext___main___spec__5(x_1, x_73);
x_75 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__6(x_67, x_74, x_62);
lean::dec(x_67);
if (x_68 == 0)
{
obj* x_76; obj* x_77; obj* x_78; 
lean::dec(x_66);
x_76 = l_List_append___rarg(x_63, x_71);
x_77 = l_List_append___rarg(x_76, x_75);
x_78 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_78, 0, x_77);
lean::cnstr_set(x_78, 1, x_57);
lean::cnstr_set(x_5, 0, x_78);
return x_5;
}
else
{
obj* x_79; obj* x_80; obj* x_81; obj* x_82; 
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_66);
lean::cnstr_set(x_79, 1, x_63);
x_80 = l_List_append___rarg(x_79, x_71);
x_81 = l_List_append___rarg(x_80, x_75);
x_82 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_82, 0, x_81);
lean::cnstr_set(x_82, 1, x_57);
lean::cnstr_set(x_5, 0, x_82);
return x_5;
}
}
else
{
obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; 
lean::dec(x_56);
lean::dec(x_4);
x_83 = lean::cnstr_get(x_63, 0);
lean::inc(x_83);
if (lean::is_exclusive(x_63)) {
 lean::cnstr_release(x_63, 0);
 lean::cnstr_release(x_63, 1);
 x_84 = x_63;
} else {
 lean::dec_ref(x_63);
 x_84 = lean::box(0);
}
x_85 = l_Lean_Name_append___main(x_83, x_1);
lean::dec(x_83);
if (lean::is_scalar(x_84)) {
 x_86 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_86 = x_84;
}
lean::cnstr_set(x_86, 0, x_85);
lean::cnstr_set(x_86, 1, x_62);
x_87 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_87, 0, x_86);
lean::cnstr_set(x_87, 1, x_57);
lean::cnstr_set(x_5, 0, x_87);
return x_5;
}
}
else
{
obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; 
lean::dec(x_56);
lean::dec(x_4);
lean::dec(x_1);
x_88 = lean::cnstr_get(x_60, 0);
lean::inc(x_88);
lean::dec(x_60);
x_89 = lean::cnstr_get(x_88, 1);
lean::inc(x_89);
if (lean::is_exclusive(x_88)) {
 lean::cnstr_release(x_88, 0);
 lean::cnstr_release(x_88, 1);
 x_90 = x_88;
} else {
 lean::dec_ref(x_88);
 x_90 = lean::box(0);
}
x_91 = lean::cnstr_get(x_89, 0);
lean::inc(x_91);
lean::dec(x_89);
x_92 = lean::box(0);
x_93 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_93, 0, x_91);
lean::cnstr_set(x_93, 1, x_92);
if (lean::is_scalar(x_90)) {
 x_94 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_94 = x_90;
}
lean::cnstr_set(x_94, 0, x_93);
lean::cnstr_set(x_94, 1, x_57);
lean::cnstr_set(x_5, 0, x_94);
return x_5;
}
}
}
else
{
obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; 
x_95 = lean::cnstr_get(x_5, 0);
lean::inc(x_95);
lean::dec(x_5);
x_96 = lean::cnstr_get(x_95, 0);
lean::inc(x_96);
x_97 = lean::cnstr_get(x_95, 1);
lean::inc(x_97);
if (lean::is_exclusive(x_95)) {
 lean::cnstr_release(x_95, 0);
 lean::cnstr_release(x_95, 1);
 x_98 = x_95;
} else {
 lean::dec_ref(x_95);
 x_98 = lean::box(0);
}
x_99 = lean::cnstr_get(x_96, 4);
lean::inc(x_99);
x_100 = l_Lean_SMap_insert___main___at_Lean_Environment_add___spec__1___closed__1;
lean::inc(x_1);
x_101 = l_Lean_Elaborator_OrderedRBMap_find___rarg(x_100, x_99, x_1);
if (lean::obj_tag(x_101) == 0)
{
obj* x_102; obj* x_103; obj* x_104; 
x_102 = lean::cnstr_get(x_96, 6);
lean::inc(x_102);
x_103 = lean::box(0);
lean::inc(x_1);
x_104 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__1(x_1, x_4, x_102, x_103);
if (lean::obj_tag(x_104) == 0)
{
obj* x_105; obj* x_106; obj* x_107; obj* x_108; uint8 x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; obj* x_115; obj* x_116; 
x_105 = l_Lean_Elaborator_resolveContext___main___closed__1;
x_106 = lean::box(0);
lean::inc(x_1);
x_107 = l_Lean_Name_replacePrefix___main(x_1, x_105, x_106);
x_108 = lean::cnstr_get(x_4, 8);
lean::inc(x_108);
x_109 = l_Lean_Environment_contains(x_108, x_107);
x_110 = lean::cnstr_get(x_96, 7);
lean::inc(x_110);
lean::inc(x_1);
x_111 = l_List_filterMap___main___at_Lean_Elaborator_resolveContext___main___spec__2(x_1, x_110);
x_112 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__3(x_108, x_111, x_103);
x_113 = lean::cnstr_get(x_4, 3);
lean::inc(x_113);
lean::dec(x_4);
x_114 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__4(x_96, x_113, x_103);
lean::dec(x_96);
x_115 = l_List_filterMap___main___at_Lean_Elaborator_resolveContext___main___spec__5(x_1, x_114);
x_116 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__6(x_108, x_115, x_103);
lean::dec(x_108);
if (x_109 == 0)
{
obj* x_117; obj* x_118; obj* x_119; obj* x_120; 
lean::dec(x_107);
x_117 = l_List_append___rarg(x_104, x_112);
x_118 = l_List_append___rarg(x_117, x_116);
if (lean::is_scalar(x_98)) {
 x_119 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_119 = x_98;
}
lean::cnstr_set(x_119, 0, x_118);
lean::cnstr_set(x_119, 1, x_97);
x_120 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_120, 0, x_119);
return x_120;
}
else
{
obj* x_121; obj* x_122; obj* x_123; obj* x_124; obj* x_125; 
x_121 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_121, 0, x_107);
lean::cnstr_set(x_121, 1, x_104);
x_122 = l_List_append___rarg(x_121, x_112);
x_123 = l_List_append___rarg(x_122, x_116);
if (lean::is_scalar(x_98)) {
 x_124 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_124 = x_98;
}
lean::cnstr_set(x_124, 0, x_123);
lean::cnstr_set(x_124, 1, x_97);
x_125 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_125, 0, x_124);
return x_125;
}
}
else
{
obj* x_126; obj* x_127; obj* x_128; obj* x_129; obj* x_130; obj* x_131; 
lean::dec(x_96);
lean::dec(x_4);
x_126 = lean::cnstr_get(x_104, 0);
lean::inc(x_126);
if (lean::is_exclusive(x_104)) {
 lean::cnstr_release(x_104, 0);
 lean::cnstr_release(x_104, 1);
 x_127 = x_104;
} else {
 lean::dec_ref(x_104);
 x_127 = lean::box(0);
}
x_128 = l_Lean_Name_append___main(x_126, x_1);
lean::dec(x_126);
if (lean::is_scalar(x_127)) {
 x_129 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_129 = x_127;
}
lean::cnstr_set(x_129, 0, x_128);
lean::cnstr_set(x_129, 1, x_103);
if (lean::is_scalar(x_98)) {
 x_130 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_130 = x_98;
}
lean::cnstr_set(x_130, 0, x_129);
lean::cnstr_set(x_130, 1, x_97);
x_131 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_131, 0, x_130);
return x_131;
}
}
else
{
obj* x_132; obj* x_133; obj* x_134; obj* x_135; obj* x_136; obj* x_137; obj* x_138; obj* x_139; 
lean::dec(x_98);
lean::dec(x_96);
lean::dec(x_4);
lean::dec(x_1);
x_132 = lean::cnstr_get(x_101, 0);
lean::inc(x_132);
lean::dec(x_101);
x_133 = lean::cnstr_get(x_132, 1);
lean::inc(x_133);
if (lean::is_exclusive(x_132)) {
 lean::cnstr_release(x_132, 0);
 lean::cnstr_release(x_132, 1);
 x_134 = x_132;
} else {
 lean::dec_ref(x_132);
 x_134 = lean::box(0);
}
x_135 = lean::cnstr_get(x_133, 0);
lean::inc(x_135);
lean::dec(x_133);
x_136 = lean::box(0);
x_137 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_137, 0, x_135);
lean::cnstr_set(x_137, 1, x_136);
if (lean::is_scalar(x_134)) {
 x_138 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_138 = x_134;
}
lean::cnstr_set(x_138, 0, x_137);
lean::cnstr_set(x_138, 1, x_97);
x_139 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_139, 0, x_138);
return x_139;
}
}
}
}
}
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__1___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__1(x_1, x_2, x_3, x_4);
lean::dec(x_2);
return x_5;
}
}
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__3___boxed(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__3(x_1, x_2, x_3);
lean::dec(x_1);
return x_4;
}
}
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__4___boxed(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__4(x_1, x_2, x_3);
lean::dec(x_1);
return x_4;
}
}
obj* l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__6___boxed(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = l_List_filterAux___main___at_Lean_Elaborator_resolveContext___main___spec__6(x_1, x_2, x_3);
lean::dec(x_1);
return x_4;
}
}
obj* l_Lean_Elaborator_resolveContext___main___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_resolveContext___main(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_resolveContext(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_resolveContext___main(x_1, x_2, x_3, x_4);
return x_5;
}
}
obj* l_Lean_Elaborator_resolveContext___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_resolveContext(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_preresolve___main___spec__1(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
else
{
uint8 x_8; 
x_8 = !lean::is_exclusive(x_1);
if (x_8 == 0)
{
obj* x_9; obj* x_10; obj* x_11; 
x_9 = lean::cnstr_get(x_1, 0);
x_10 = lean::cnstr_get(x_1, 1);
x_11 = l_Lean_Elaborator_preresolve___main(x_9, x_2, x_3, x_4);
if (lean::obj_tag(x_11) == 0)
{
uint8 x_12; 
lean::free_heap_obj(x_1);
lean::dec(x_10);
x_12 = !lean::is_exclusive(x_11);
if (x_12 == 0)
{
return x_11;
}
else
{
obj* x_13; obj* x_14; 
x_13 = lean::cnstr_get(x_11, 0);
lean::inc(x_13);
lean::dec(x_11);
x_14 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
}
else
{
obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
lean::dec(x_11);
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
x_17 = lean::cnstr_get(x_15, 1);
lean::inc(x_17);
lean::dec(x_15);
x_18 = l_List_mmap___main___at_Lean_Elaborator_preresolve___main___spec__1(x_10, x_2, x_3, x_17);
if (lean::obj_tag(x_18) == 0)
{
uint8 x_19; 
lean::dec(x_16);
lean::free_heap_obj(x_1);
x_19 = !lean::is_exclusive(x_18);
if (x_19 == 0)
{
return x_18;
}
else
{
obj* x_20; obj* x_21; 
x_20 = lean::cnstr_get(x_18, 0);
lean::inc(x_20);
lean::dec(x_18);
x_21 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_21, 0, x_20);
return x_21;
}
}
else
{
uint8 x_22; 
x_22 = !lean::is_exclusive(x_18);
if (x_22 == 0)
{
obj* x_23; uint8 x_24; 
x_23 = lean::cnstr_get(x_18, 0);
x_24 = !lean::is_exclusive(x_23);
if (x_24 == 0)
{
obj* x_25; 
x_25 = lean::cnstr_get(x_23, 0);
lean::cnstr_set(x_1, 1, x_25);
lean::cnstr_set(x_1, 0, x_16);
lean::cnstr_set(x_23, 0, x_1);
return x_18;
}
else
{
obj* x_26; obj* x_27; obj* x_28; 
x_26 = lean::cnstr_get(x_23, 0);
x_27 = lean::cnstr_get(x_23, 1);
lean::inc(x_27);
lean::inc(x_26);
lean::dec(x_23);
lean::cnstr_set(x_1, 1, x_26);
lean::cnstr_set(x_1, 0, x_16);
x_28 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_28, 0, x_1);
lean::cnstr_set(x_28, 1, x_27);
lean::cnstr_set(x_18, 0, x_28);
return x_18;
}
}
else
{
obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_29 = lean::cnstr_get(x_18, 0);
lean::inc(x_29);
lean::dec(x_18);
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
x_31 = lean::cnstr_get(x_29, 1);
lean::inc(x_31);
if (lean::is_exclusive(x_29)) {
 lean::cnstr_release(x_29, 0);
 lean::cnstr_release(x_29, 1);
 x_32 = x_29;
} else {
 lean::dec_ref(x_29);
 x_32 = lean::box(0);
}
lean::cnstr_set(x_1, 1, x_30);
lean::cnstr_set(x_1, 0, x_16);
if (lean::is_scalar(x_32)) {
 x_33 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_33 = x_32;
}
lean::cnstr_set(x_33, 0, x_1);
lean::cnstr_set(x_33, 1, x_31);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_33);
return x_34;
}
}
}
}
else
{
obj* x_35; obj* x_36; obj* x_37; 
x_35 = lean::cnstr_get(x_1, 0);
x_36 = lean::cnstr_get(x_1, 1);
lean::inc(x_36);
lean::inc(x_35);
lean::dec(x_1);
x_37 = l_Lean_Elaborator_preresolve___main(x_35, x_2, x_3, x_4);
if (lean::obj_tag(x_37) == 0)
{
obj* x_38; obj* x_39; obj* x_40; 
lean::dec(x_36);
x_38 = lean::cnstr_get(x_37, 0);
lean::inc(x_38);
if (lean::is_exclusive(x_37)) {
 lean::cnstr_release(x_37, 0);
 x_39 = x_37;
} else {
 lean::dec_ref(x_37);
 x_39 = lean::box(0);
}
if (lean::is_scalar(x_39)) {
 x_40 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_40 = x_39;
}
lean::cnstr_set(x_40, 0, x_38);
return x_40;
}
else
{
obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
x_41 = lean::cnstr_get(x_37, 0);
lean::inc(x_41);
lean::dec(x_37);
x_42 = lean::cnstr_get(x_41, 0);
lean::inc(x_42);
x_43 = lean::cnstr_get(x_41, 1);
lean::inc(x_43);
lean::dec(x_41);
x_44 = l_List_mmap___main___at_Lean_Elaborator_preresolve___main___spec__1(x_36, x_2, x_3, x_43);
if (lean::obj_tag(x_44) == 0)
{
obj* x_45; obj* x_46; obj* x_47; 
lean::dec(x_42);
x_45 = lean::cnstr_get(x_44, 0);
lean::inc(x_45);
if (lean::is_exclusive(x_44)) {
 lean::cnstr_release(x_44, 0);
 x_46 = x_44;
} else {
 lean::dec_ref(x_44);
 x_46 = lean::box(0);
}
if (lean::is_scalar(x_46)) {
 x_47 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_47 = x_46;
}
lean::cnstr_set(x_47, 0, x_45);
return x_47;
}
else
{
obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; 
x_48 = lean::cnstr_get(x_44, 0);
lean::inc(x_48);
if (lean::is_exclusive(x_44)) {
 lean::cnstr_release(x_44, 0);
 x_49 = x_44;
} else {
 lean::dec_ref(x_44);
 x_49 = lean::box(0);
}
x_50 = lean::cnstr_get(x_48, 0);
lean::inc(x_50);
x_51 = lean::cnstr_get(x_48, 1);
lean::inc(x_51);
if (lean::is_exclusive(x_48)) {
 lean::cnstr_release(x_48, 0);
 lean::cnstr_release(x_48, 1);
 x_52 = x_48;
} else {
 lean::dec_ref(x_48);
 x_52 = lean::box(0);
}
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_42);
lean::cnstr_set(x_53, 1, x_50);
if (lean::is_scalar(x_52)) {
 x_54 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_54 = x_52;
}
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_51);
if (lean::is_scalar(x_49)) {
 x_55 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_55 = x_49;
}
lean::cnstr_set(x_55, 0, x_54);
return x_55;
}
}
}
}
}
}
obj* l_Lean_Elaborator_preresolve___main(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_5; obj* x_6; 
x_5 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_5, 0, x_1);
lean::cnstr_set(x_5, 1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
case 1:
{
uint8 x_7; 
x_7 = !lean::is_exclusive(x_1);
if (x_7 == 0)
{
obj* x_8; obj* x_9; obj* x_10; 
x_8 = lean::cnstr_get(x_1, 0);
lean::inc(x_8);
x_9 = l_Lean_Elaborator_mangleIdent(x_8);
x_10 = l_Lean_Elaborator_resolveContext___main(x_9, x_2, x_3, x_4);
if (lean::obj_tag(x_10) == 0)
{
uint8 x_11; 
lean::free_heap_obj(x_1);
lean::dec(x_8);
x_11 = !lean::is_exclusive(x_10);
if (x_11 == 0)
{
return x_10;
}
else
{
obj* x_12; obj* x_13; 
x_12 = lean::cnstr_get(x_10, 0);
lean::inc(x_12);
lean::dec(x_10);
x_13 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
}
else
{
uint8 x_14; 
x_14 = !lean::is_exclusive(x_10);
if (x_14 == 0)
{
obj* x_15; uint8 x_16; 
x_15 = lean::cnstr_get(x_10, 0);
x_16 = !lean::is_exclusive(x_15);
if (x_16 == 0)
{
uint8 x_17; 
x_17 = !lean::is_exclusive(x_8);
if (x_17 == 0)
{
obj* x_18; obj* x_19; obj* x_20; 
x_18 = lean::cnstr_get(x_15, 0);
x_19 = lean::cnstr_get(x_8, 3);
x_20 = l_List_append___rarg(x_18, x_19);
lean::cnstr_set(x_8, 3, x_20);
lean::cnstr_set(x_15, 0, x_1);
return x_10;
}
else
{
obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_21 = lean::cnstr_get(x_15, 0);
x_22 = lean::cnstr_get(x_8, 0);
x_23 = lean::cnstr_get(x_8, 1);
x_24 = lean::cnstr_get(x_8, 2);
x_25 = lean::cnstr_get(x_8, 3);
x_26 = lean::cnstr_get(x_8, 4);
lean::inc(x_26);
lean::inc(x_25);
lean::inc(x_24);
lean::inc(x_23);
lean::inc(x_22);
lean::dec(x_8);
x_27 = l_List_append___rarg(x_21, x_25);
x_28 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_28, 0, x_22);
lean::cnstr_set(x_28, 1, x_23);
lean::cnstr_set(x_28, 2, x_24);
lean::cnstr_set(x_28, 3, x_27);
lean::cnstr_set(x_28, 4, x_26);
lean::cnstr_set(x_1, 0, x_28);
lean::cnstr_set(x_15, 0, x_1);
return x_10;
}
}
else
{
obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_29 = lean::cnstr_get(x_15, 0);
x_30 = lean::cnstr_get(x_15, 1);
lean::inc(x_30);
lean::inc(x_29);
lean::dec(x_15);
x_31 = lean::cnstr_get(x_8, 0);
lean::inc(x_31);
x_32 = lean::cnstr_get(x_8, 1);
lean::inc(x_32);
x_33 = lean::cnstr_get(x_8, 2);
lean::inc(x_33);
x_34 = lean::cnstr_get(x_8, 3);
lean::inc(x_34);
x_35 = lean::cnstr_get(x_8, 4);
lean::inc(x_35);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_release(x_8, 1);
 lean::cnstr_release(x_8, 2);
 lean::cnstr_release(x_8, 3);
 lean::cnstr_release(x_8, 4);
 x_36 = x_8;
} else {
 lean::dec_ref(x_8);
 x_36 = lean::box(0);
}
x_37 = l_List_append___rarg(x_29, x_34);
if (lean::is_scalar(x_36)) {
 x_38 = lean::alloc_cnstr(0, 5, 0);
} else {
 x_38 = x_36;
}
lean::cnstr_set(x_38, 0, x_31);
lean::cnstr_set(x_38, 1, x_32);
lean::cnstr_set(x_38, 2, x_33);
lean::cnstr_set(x_38, 3, x_37);
lean::cnstr_set(x_38, 4, x_35);
lean::cnstr_set(x_1, 0, x_38);
x_39 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_39, 0, x_1);
lean::cnstr_set(x_39, 1, x_30);
lean::cnstr_set(x_10, 0, x_39);
return x_10;
}
}
else
{
obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; 
x_40 = lean::cnstr_get(x_10, 0);
lean::inc(x_40);
lean::dec(x_10);
x_41 = lean::cnstr_get(x_40, 0);
lean::inc(x_41);
x_42 = lean::cnstr_get(x_40, 1);
lean::inc(x_42);
if (lean::is_exclusive(x_40)) {
 lean::cnstr_release(x_40, 0);
 lean::cnstr_release(x_40, 1);
 x_43 = x_40;
} else {
 lean::dec_ref(x_40);
 x_43 = lean::box(0);
}
x_44 = lean::cnstr_get(x_8, 0);
lean::inc(x_44);
x_45 = lean::cnstr_get(x_8, 1);
lean::inc(x_45);
x_46 = lean::cnstr_get(x_8, 2);
lean::inc(x_46);
x_47 = lean::cnstr_get(x_8, 3);
lean::inc(x_47);
x_48 = lean::cnstr_get(x_8, 4);
lean::inc(x_48);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_release(x_8, 1);
 lean::cnstr_release(x_8, 2);
 lean::cnstr_release(x_8, 3);
 lean::cnstr_release(x_8, 4);
 x_49 = x_8;
} else {
 lean::dec_ref(x_8);
 x_49 = lean::box(0);
}
x_50 = l_List_append___rarg(x_41, x_47);
if (lean::is_scalar(x_49)) {
 x_51 = lean::alloc_cnstr(0, 5, 0);
} else {
 x_51 = x_49;
}
lean::cnstr_set(x_51, 0, x_44);
lean::cnstr_set(x_51, 1, x_45);
lean::cnstr_set(x_51, 2, x_46);
lean::cnstr_set(x_51, 3, x_50);
lean::cnstr_set(x_51, 4, x_48);
lean::cnstr_set(x_1, 0, x_51);
if (lean::is_scalar(x_43)) {
 x_52 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_52 = x_43;
}
lean::cnstr_set(x_52, 0, x_1);
lean::cnstr_set(x_52, 1, x_42);
x_53 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_53, 0, x_52);
return x_53;
}
}
}
else
{
obj* x_54; obj* x_55; obj* x_56; 
x_54 = lean::cnstr_get(x_1, 0);
lean::inc(x_54);
lean::dec(x_1);
lean::inc(x_54);
x_55 = l_Lean_Elaborator_mangleIdent(x_54);
x_56 = l_Lean_Elaborator_resolveContext___main(x_55, x_2, x_3, x_4);
if (lean::obj_tag(x_56) == 0)
{
obj* x_57; obj* x_58; obj* x_59; 
lean::dec(x_54);
x_57 = lean::cnstr_get(x_56, 0);
lean::inc(x_57);
if (lean::is_exclusive(x_56)) {
 lean::cnstr_release(x_56, 0);
 x_58 = x_56;
} else {
 lean::dec_ref(x_56);
 x_58 = lean::box(0);
}
if (lean::is_scalar(x_58)) {
 x_59 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_59 = x_58;
}
lean::cnstr_set(x_59, 0, x_57);
return x_59;
}
else
{
obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; 
x_60 = lean::cnstr_get(x_56, 0);
lean::inc(x_60);
if (lean::is_exclusive(x_56)) {
 lean::cnstr_release(x_56, 0);
 x_61 = x_56;
} else {
 lean::dec_ref(x_56);
 x_61 = lean::box(0);
}
x_62 = lean::cnstr_get(x_60, 0);
lean::inc(x_62);
x_63 = lean::cnstr_get(x_60, 1);
lean::inc(x_63);
if (lean::is_exclusive(x_60)) {
 lean::cnstr_release(x_60, 0);
 lean::cnstr_release(x_60, 1);
 x_64 = x_60;
} else {
 lean::dec_ref(x_60);
 x_64 = lean::box(0);
}
x_65 = lean::cnstr_get(x_54, 0);
lean::inc(x_65);
x_66 = lean::cnstr_get(x_54, 1);
lean::inc(x_66);
x_67 = lean::cnstr_get(x_54, 2);
lean::inc(x_67);
x_68 = lean::cnstr_get(x_54, 3);
lean::inc(x_68);
x_69 = lean::cnstr_get(x_54, 4);
lean::inc(x_69);
if (lean::is_exclusive(x_54)) {
 lean::cnstr_release(x_54, 0);
 lean::cnstr_release(x_54, 1);
 lean::cnstr_release(x_54, 2);
 lean::cnstr_release(x_54, 3);
 lean::cnstr_release(x_54, 4);
 x_70 = x_54;
} else {
 lean::dec_ref(x_54);
 x_70 = lean::box(0);
}
x_71 = l_List_append___rarg(x_62, x_68);
if (lean::is_scalar(x_70)) {
 x_72 = lean::alloc_cnstr(0, 5, 0);
} else {
 x_72 = x_70;
}
lean::cnstr_set(x_72, 0, x_65);
lean::cnstr_set(x_72, 1, x_66);
lean::cnstr_set(x_72, 2, x_67);
lean::cnstr_set(x_72, 3, x_71);
lean::cnstr_set(x_72, 4, x_69);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
if (lean::is_scalar(x_64)) {
 x_74 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_74 = x_64;
}
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_63);
if (lean::is_scalar(x_61)) {
 x_75 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_75 = x_61;
}
lean::cnstr_set(x_75, 0, x_74);
return x_75;
}
}
}
case 2:
{
uint8 x_76; 
x_76 = !lean::is_exclusive(x_1);
if (x_76 == 0)
{
obj* x_77; uint8 x_78; 
x_77 = lean::cnstr_get(x_1, 0);
x_78 = !lean::is_exclusive(x_77);
if (x_78 == 0)
{
obj* x_79; obj* x_80; obj* x_81; obj* x_82; 
x_79 = lean::cnstr_get(x_77, 0);
x_80 = lean::cnstr_get(x_77, 1);
x_81 = lean::cnstr_get(x_77, 2);
x_82 = l_List_mmap___main___at_Lean_Elaborator_preresolve___main___spec__1(x_80, x_2, x_3, x_4);
if (lean::obj_tag(x_82) == 0)
{
uint8 x_83; 
lean::free_heap_obj(x_77);
lean::dec(x_81);
lean::dec(x_79);
lean::free_heap_obj(x_1);
x_83 = !lean::is_exclusive(x_82);
if (x_83 == 0)
{
return x_82;
}
else
{
obj* x_84; obj* x_85; 
x_84 = lean::cnstr_get(x_82, 0);
lean::inc(x_84);
lean::dec(x_82);
x_85 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_85, 0, x_84);
return x_85;
}
}
else
{
uint8 x_86; 
x_86 = !lean::is_exclusive(x_82);
if (x_86 == 0)
{
obj* x_87; uint8 x_88; 
x_87 = lean::cnstr_get(x_82, 0);
x_88 = !lean::is_exclusive(x_87);
if (x_88 == 0)
{
obj* x_89; 
x_89 = lean::cnstr_get(x_87, 0);
lean::cnstr_set(x_77, 1, x_89);
lean::cnstr_set(x_87, 0, x_1);
return x_82;
}
else
{
obj* x_90; obj* x_91; obj* x_92; 
x_90 = lean::cnstr_get(x_87, 0);
x_91 = lean::cnstr_get(x_87, 1);
lean::inc(x_91);
lean::inc(x_90);
lean::dec(x_87);
lean::cnstr_set(x_77, 1, x_90);
x_92 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_92, 0, x_1);
lean::cnstr_set(x_92, 1, x_91);
lean::cnstr_set(x_82, 0, x_92);
return x_82;
}
}
else
{
obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; 
x_93 = lean::cnstr_get(x_82, 0);
lean::inc(x_93);
lean::dec(x_82);
x_94 = lean::cnstr_get(x_93, 0);
lean::inc(x_94);
x_95 = lean::cnstr_get(x_93, 1);
lean::inc(x_95);
if (lean::is_exclusive(x_93)) {
 lean::cnstr_release(x_93, 0);
 lean::cnstr_release(x_93, 1);
 x_96 = x_93;
} else {
 lean::dec_ref(x_93);
 x_96 = lean::box(0);
}
lean::cnstr_set(x_77, 1, x_94);
if (lean::is_scalar(x_96)) {
 x_97 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_97 = x_96;
}
lean::cnstr_set(x_97, 0, x_1);
lean::cnstr_set(x_97, 1, x_95);
x_98 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_98, 0, x_97);
return x_98;
}
}
}
else
{
obj* x_99; obj* x_100; obj* x_101; obj* x_102; 
x_99 = lean::cnstr_get(x_77, 0);
x_100 = lean::cnstr_get(x_77, 1);
x_101 = lean::cnstr_get(x_77, 2);
lean::inc(x_101);
lean::inc(x_100);
lean::inc(x_99);
lean::dec(x_77);
x_102 = l_List_mmap___main___at_Lean_Elaborator_preresolve___main___spec__1(x_100, x_2, x_3, x_4);
if (lean::obj_tag(x_102) == 0)
{
obj* x_103; obj* x_104; obj* x_105; 
lean::dec(x_101);
lean::dec(x_99);
lean::free_heap_obj(x_1);
x_103 = lean::cnstr_get(x_102, 0);
lean::inc(x_103);
if (lean::is_exclusive(x_102)) {
 lean::cnstr_release(x_102, 0);
 x_104 = x_102;
} else {
 lean::dec_ref(x_102);
 x_104 = lean::box(0);
}
if (lean::is_scalar(x_104)) {
 x_105 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_105 = x_104;
}
lean::cnstr_set(x_105, 0, x_103);
return x_105;
}
else
{
obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; 
x_106 = lean::cnstr_get(x_102, 0);
lean::inc(x_106);
if (lean::is_exclusive(x_102)) {
 lean::cnstr_release(x_102, 0);
 x_107 = x_102;
} else {
 lean::dec_ref(x_102);
 x_107 = lean::box(0);
}
x_108 = lean::cnstr_get(x_106, 0);
lean::inc(x_108);
x_109 = lean::cnstr_get(x_106, 1);
lean::inc(x_109);
if (lean::is_exclusive(x_106)) {
 lean::cnstr_release(x_106, 0);
 lean::cnstr_release(x_106, 1);
 x_110 = x_106;
} else {
 lean::dec_ref(x_106);
 x_110 = lean::box(0);
}
x_111 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_111, 0, x_99);
lean::cnstr_set(x_111, 1, x_108);
lean::cnstr_set(x_111, 2, x_101);
lean::cnstr_set(x_1, 0, x_111);
if (lean::is_scalar(x_110)) {
 x_112 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_112 = x_110;
}
lean::cnstr_set(x_112, 0, x_1);
lean::cnstr_set(x_112, 1, x_109);
if (lean::is_scalar(x_107)) {
 x_113 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_113 = x_107;
}
lean::cnstr_set(x_113, 0, x_112);
return x_113;
}
}
}
else
{
obj* x_114; obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; 
x_114 = lean::cnstr_get(x_1, 0);
lean::inc(x_114);
lean::dec(x_1);
x_115 = lean::cnstr_get(x_114, 0);
lean::inc(x_115);
x_116 = lean::cnstr_get(x_114, 1);
lean::inc(x_116);
x_117 = lean::cnstr_get(x_114, 2);
lean::inc(x_117);
if (lean::is_exclusive(x_114)) {
 lean::cnstr_release(x_114, 0);
 lean::cnstr_release(x_114, 1);
 lean::cnstr_release(x_114, 2);
 x_118 = x_114;
} else {
 lean::dec_ref(x_114);
 x_118 = lean::box(0);
}
x_119 = l_List_mmap___main___at_Lean_Elaborator_preresolve___main___spec__1(x_116, x_2, x_3, x_4);
if (lean::obj_tag(x_119) == 0)
{
obj* x_120; obj* x_121; obj* x_122; 
lean::dec(x_118);
lean::dec(x_117);
lean::dec(x_115);
x_120 = lean::cnstr_get(x_119, 0);
lean::inc(x_120);
if (lean::is_exclusive(x_119)) {
 lean::cnstr_release(x_119, 0);
 x_121 = x_119;
} else {
 lean::dec_ref(x_119);
 x_121 = lean::box(0);
}
if (lean::is_scalar(x_121)) {
 x_122 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_122 = x_121;
}
lean::cnstr_set(x_122, 0, x_120);
return x_122;
}
else
{
obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; obj* x_129; obj* x_130; obj* x_131; 
x_123 = lean::cnstr_get(x_119, 0);
lean::inc(x_123);
if (lean::is_exclusive(x_119)) {
 lean::cnstr_release(x_119, 0);
 x_124 = x_119;
} else {
 lean::dec_ref(x_119);
 x_124 = lean::box(0);
}
x_125 = lean::cnstr_get(x_123, 0);
lean::inc(x_125);
x_126 = lean::cnstr_get(x_123, 1);
lean::inc(x_126);
if (lean::is_exclusive(x_123)) {
 lean::cnstr_release(x_123, 0);
 lean::cnstr_release(x_123, 1);
 x_127 = x_123;
} else {
 lean::dec_ref(x_123);
 x_127 = lean::box(0);
}
if (lean::is_scalar(x_118)) {
 x_128 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_128 = x_118;
}
lean::cnstr_set(x_128, 0, x_115);
lean::cnstr_set(x_128, 1, x_125);
lean::cnstr_set(x_128, 2, x_117);
x_129 = lean::alloc_cnstr(2, 1, 0);
lean::cnstr_set(x_129, 0, x_128);
if (lean::is_scalar(x_127)) {
 x_130 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_130 = x_127;
}
lean::cnstr_set(x_130, 0, x_129);
lean::cnstr_set(x_130, 1, x_126);
if (lean::is_scalar(x_124)) {
 x_131 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_131 = x_124;
}
lean::cnstr_set(x_131, 0, x_130);
return x_131;
}
}
}
default: 
{
obj* x_132; obj* x_133; 
x_132 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_132, 0, x_1);
lean::cnstr_set(x_132, 1, x_4);
x_133 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_133, 0, x_132);
return x_133;
}
}
}
}
obj* l_List_mmap___main___at_Lean_Elaborator_preresolve___main___spec__1___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_List_mmap___main___at_Lean_Elaborator_preresolve___main___spec__1(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_preresolve___main___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_preresolve___main(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Elaborator_preresolve(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_preresolve___main(x_1, x_2, x_3, x_4);
return x_5;
}
}
obj* l_Lean_Elaborator_preresolve___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Elaborator_preresolve(x_1, x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_5;
}
}
obj* _init_l_Lean_Elaborator_mkState___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("MODULE");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_mkState___closed__2() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = lean::box(0);
x_2 = lean::mk_string("MODULE");
x_3 = lean_name_mk_string(x_1, x_2);
return x_3;
}
}
obj* _init_l_Lean_Elaborator_mkState___closed__3() {
_start:
{
obj* x_1; obj* x_2; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Name_quickLt___boxed), 2, 0);
x_2 = l_Lean_Elaborator_OrderedRBMap_empty___rarg(x_1);
lean::dec(x_1);
return x_2;
}
}
obj* _init_l_Lean_Elaborator_mkState___closed__4() {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; uint32 x_6; obj* x_7; 
x_1 = lean::box(0);
x_2 = lean::mk_string("_ngen");
x_3 = lean_name_mk_string(x_1, x_2);
x_4 = lean::mk_string("fixme");
x_5 = lean_name_mk_string(x_3, x_4);
x_6 = 0;
x_7 = lean::alloc_cnstr(0, 1, 4);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set_scalar(x_7, sizeof(void*)*1, x_6);
return x_7;
}
}
obj* l_Lean_Elaborator_mkState(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_4 = lean::box(0);
x_5 = lean::box(0);
x_6 = l_Lean_Elaborator_mkState___closed__1;
x_7 = l_Lean_Elaborator_mkState___closed__2;
x_8 = l_Lean_Elaborator_mkState___closed__3;
x_9 = lean::alloc_cnstr(0, 9, 0);
lean::cnstr_set(x_9, 0, x_6);
lean::cnstr_set(x_9, 1, x_7);
lean::cnstr_set(x_9, 2, x_4);
lean::cnstr_set(x_9, 3, x_8);
lean::cnstr_set(x_9, 4, x_8);
lean::cnstr_set(x_9, 5, x_5);
lean::cnstr_set(x_9, 6, x_4);
lean::cnstr_set(x_9, 7, x_4);
lean::cnstr_set(x_9, 8, x_3);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_4);
x_11 = lean::cnstr_get(x_1, 0);
x_12 = lean::cnstr_get(x_1, 1);
x_13 = l_Lean_Expander_builtinTransformers;
lean::inc(x_11);
x_14 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_14, 0, x_11);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::mk_nat_obj(0u);
x_16 = l_Lean_MessageLog_empty;
x_17 = l_Lean_Elaborator_mkState___closed__4;
lean::inc(x_12);
x_18 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_18, 0, x_4);
lean::cnstr_set(x_18, 1, x_4);
lean::cnstr_set(x_18, 2, x_15);
lean::cnstr_set(x_18, 3, x_4);
lean::cnstr_set(x_18, 4, x_10);
lean::cnstr_set(x_18, 5, x_16);
lean::cnstr_set(x_18, 6, x_12);
lean::cnstr_set(x_18, 7, x_14);
lean::cnstr_set(x_18, 8, x_2);
lean::cnstr_set(x_18, 9, x_17);
lean::cnstr_set(x_18, 10, x_15);
return x_18;
}
}
obj* l_Lean_Elaborator_mkState___boxed(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = l_Lean_Elaborator_mkState(x_1, x_2, x_3);
lean::dec(x_1);
return x_4;
}
}
obj* l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__1___rarg(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_3, 0);
x_6 = lean::cnstr_get(x_5, 0);
x_7 = lean::cnstr_get(x_5, 2);
x_8 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_9; obj* x_10; uint8 x_11; obj* x_12; obj* x_13; obj* x_14; 
x_9 = lean::mk_nat_obj(0u);
x_10 = l_Lean_FileMap_toPosition(x_7, x_9);
x_11 = 2;
x_12 = l_String_splitAux___main___closed__1;
lean::inc(x_6);
x_13 = lean::alloc_cnstr(0, 5, 1);
lean::cnstr_set(x_13, 0, x_6);
lean::cnstr_set(x_13, 1, x_10);
lean::cnstr_set(x_13, 2, x_8);
lean::cnstr_set(x_13, 3, x_12);
lean::cnstr_set(x_13, 4, x_2);
lean::cnstr_set_scalar(x_13, sizeof(void*)*5, x_11);
x_14 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
else
{
obj* x_15; obj* x_16; 
x_15 = lean::cnstr_get(x_1, 0);
x_16 = l_Lean_Parser_Syntax_getPos(x_15);
if (lean::obj_tag(x_16) == 0)
{
obj* x_17; obj* x_18; uint8 x_19; obj* x_20; obj* x_21; obj* x_22; 
x_17 = lean::mk_nat_obj(0u);
x_18 = l_Lean_FileMap_toPosition(x_7, x_17);
x_19 = 2;
x_20 = l_String_splitAux___main___closed__1;
lean::inc(x_6);
x_21 = lean::alloc_cnstr(0, 5, 1);
lean::cnstr_set(x_21, 0, x_6);
lean::cnstr_set(x_21, 1, x_18);
lean::cnstr_set(x_21, 2, x_8);
lean::cnstr_set(x_21, 3, x_20);
lean::cnstr_set(x_21, 4, x_2);
lean::cnstr_set_scalar(x_21, sizeof(void*)*5, x_19);
x_22 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_22, 0, x_21);
return x_22;
}
else
{
obj* x_23; obj* x_24; uint8 x_25; obj* x_26; obj* x_27; obj* x_28; 
x_23 = lean::cnstr_get(x_16, 0);
lean::inc(x_23);
lean::dec(x_16);
x_24 = l_Lean_FileMap_toPosition(x_7, x_23);
x_25 = 2;
x_26 = l_String_splitAux___main___closed__1;
lean::inc(x_6);
x_27 = lean::alloc_cnstr(0, 5, 1);
lean::cnstr_set(x_27, 0, x_6);
lean::cnstr_set(x_27, 1, x_24);
lean::cnstr_set(x_27, 2, x_8);
lean::cnstr_set(x_27, 3, x_26);
lean::cnstr_set(x_27, 4, x_2);
lean::cnstr_set_scalar(x_27, sizeof(void*)*5, x_25);
x_28 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_28, 0, x_27);
return x_28;
}
}
}
}
obj* l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__1(obj* x_1) {
_start:
{
obj* x_2; 
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__1___rarg___boxed), 4, 0);
return x_2;
}
}
obj* l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__2___rarg(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
x_7 = lean::cnstr_get(x_6, 0);
x_8 = lean::cnstr_get(x_6, 2);
x_9 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_10; obj* x_11; uint8 x_12; obj* x_13; obj* x_14; obj* x_15; 
x_10 = lean::mk_nat_obj(0u);
x_11 = l_Lean_FileMap_toPosition(x_8, x_10);
x_12 = 2;
x_13 = l_String_splitAux___main___closed__1;
lean::inc(x_7);
x_14 = lean::alloc_cnstr(0, 5, 1);
lean::cnstr_set(x_14, 0, x_7);
lean::cnstr_set(x_14, 1, x_11);
lean::cnstr_set(x_14, 2, x_9);
lean::cnstr_set(x_14, 3, x_13);
lean::cnstr_set(x_14, 4, x_2);
lean::cnstr_set_scalar(x_14, sizeof(void*)*5, x_12);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_14);
return x_15;
}
else
{
obj* x_16; obj* x_17; 
x_16 = lean::cnstr_get(x_1, 0);
x_17 = l_Lean_Parser_Syntax_getPos(x_16);
if (lean::obj_tag(x_17) == 0)
{
obj* x_18; obj* x_19; uint8 x_20; obj* x_21; obj* x_22; obj* x_23; 
x_18 = lean::mk_nat_obj(0u);
x_19 = l_Lean_FileMap_toPosition(x_8, x_18);
x_20 = 2;
x_21 = l_String_splitAux___main___closed__1;
lean::inc(x_7);
x_22 = lean::alloc_cnstr(0, 5, 1);
lean::cnstr_set(x_22, 0, x_7);
lean::cnstr_set(x_22, 1, x_19);
lean::cnstr_set(x_22, 2, x_9);
lean::cnstr_set(x_22, 3, x_21);
lean::cnstr_set(x_22, 4, x_2);
lean::cnstr_set_scalar(x_22, sizeof(void*)*5, x_20);
x_23 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_23, 0, x_22);
return x_23;
}
else
{
obj* x_24; obj* x_25; uint8 x_26; obj* x_27; obj* x_28; obj* x_29; 
x_24 = lean::cnstr_get(x_17, 0);
lean::inc(x_24);
lean::dec(x_17);
x_25 = l_Lean_FileMap_toPosition(x_8, x_24);
x_26 = 2;
x_27 = l_String_splitAux___main___closed__1;
lean::inc(x_7);
x_28 = lean::alloc_cnstr(0, 5, 1);
lean::cnstr_set(x_28, 0, x_7);
lean::cnstr_set(x_28, 1, x_25);
lean::cnstr_set(x_28, 2, x_9);
lean::cnstr_set(x_28, 3, x_27);
lean::cnstr_set(x_28, 4, x_2);
lean::cnstr_set_scalar(x_28, sizeof(void*)*5, x_26);
x_29 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_29, 0, x_28);
return x_29;
}
}
}
}
obj* l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__2(obj* x_1) {
_start:
{
obj* x_2; 
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__2___rarg___boxed), 5, 0);
return x_2;
}
}
obj* l_RBNode_find___main___at_Lean_Elaborator_processCommand___spec__3(obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
x_3 = lean::box(0);
return x_3;
}
else
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; uint8 x_8; 
x_4 = lean::cnstr_get(x_1, 0);
x_5 = lean::cnstr_get(x_1, 1);
x_6 = lean::cnstr_get(x_1, 2);
x_7 = lean::cnstr_get(x_1, 3);
x_8 = l_Lean_Name_quickLt(x_2, x_5);
if (x_8 == 0)
{
uint8 x_9; 
x_9 = l_Lean_Name_quickLt(x_5, x_2);
if (x_9 == 0)
{
obj* x_10; 
lean::inc(x_6);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_6);
return x_10;
}
else
{
x_1 = x_7;
goto _start;
}
}
else
{
x_1 = x_4;
goto _start;
}
}
}
}
obj* _init_l_Lean_Elaborator_processCommand___lambda__1___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("not a command: ");
return x_1;
}
}
obj* _init_l_Lean_Elaborator_processCommand___lambda__1___closed__2() {
_start:
{
obj* x_1; 
x_1 = lean::mk_string("unknown command: ");
return x_1;
}
}
obj* l_Lean_Elaborator_processCommand___lambda__1(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
lean::inc(x_2);
x_5 = l_Lean_Parser_Syntax_asNode___main(x_2);
if (lean::obj_tag(x_5) == 0)
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
lean::inc(x_2);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_2);
x_7 = l_Lean_Parser_Syntax_format___main(x_2);
x_8 = l_Lean_Options_empty;
x_9 = l_Lean_Format_pretty(x_7, x_8);
x_10 = l_Lean_Elaborator_processCommand___lambda__1___closed__1;
x_11 = lean::string_append(x_10, x_9);
lean::dec(x_9);
x_12 = l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__2___rarg(x_6, x_11, x_1, x_3, x_4);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_1);
lean::dec(x_6);
return x_12;
}
else
{
uint8 x_13; 
x_13 = !lean::is_exclusive(x_5);
if (x_13 == 0)
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_14 = lean::cnstr_get(x_5, 0);
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_16 = l_Lean_Elaborator_elaborators;
x_17 = l_RBNode_find___main___at_Lean_Elaborator_processCommand___spec__3(x_16, x_15);
if (lean::obj_tag(x_17) == 0)
{
obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
lean::cnstr_set(x_5, 0, x_2);
x_18 = l_Lean_Name_toString___closed__1;
x_19 = l_Lean_Name_toStringWithSep___main(x_18, x_15);
x_20 = l_Lean_Elaborator_processCommand___lambda__1___closed__2;
x_21 = lean::string_append(x_20, x_19);
lean::dec(x_19);
x_22 = l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__2___rarg(x_5, x_21, x_1, x_3, x_4);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_1);
lean::dec(x_5);
return x_22;
}
else
{
obj* x_23; obj* x_24; 
lean::dec(x_15);
lean::free_heap_obj(x_5);
x_23 = lean::cnstr_get(x_17, 0);
lean::inc(x_23);
lean::dec(x_17);
x_24 = l_Lean_Elaborator_preresolve___main(x_2, x_1, x_3, x_4);
if (lean::obj_tag(x_24) == 0)
{
uint8 x_25; 
lean::dec(x_23);
lean::dec(x_3);
lean::dec(x_1);
x_25 = !lean::is_exclusive(x_24);
if (x_25 == 0)
{
return x_24;
}
else
{
obj* x_26; obj* x_27; 
x_26 = lean::cnstr_get(x_24, 0);
lean::inc(x_26);
lean::dec(x_24);
x_27 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_27, 0, x_26);
return x_27;
}
}
else
{
obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_28 = lean::cnstr_get(x_24, 0);
lean::inc(x_28);
lean::dec(x_24);
x_29 = lean::cnstr_get(x_28, 0);
lean::inc(x_29);
x_30 = lean::cnstr_get(x_28, 1);
lean::inc(x_30);
lean::dec(x_28);
x_31 = lean::apply_4(x_23, x_29, x_1, x_3, x_30);
return x_31;
}
}
}
else
{
obj* x_32; obj* x_33; obj* x_34; obj* x_35; 
x_32 = lean::cnstr_get(x_5, 0);
lean::inc(x_32);
lean::dec(x_5);
x_33 = lean::cnstr_get(x_32, 0);
lean::inc(x_33);
lean::dec(x_32);
x_34 = l_Lean_Elaborator_elaborators;
x_35 = l_RBNode_find___main___at_Lean_Elaborator_processCommand___spec__3(x_34, x_33);
if (lean::obj_tag(x_35) == 0)
{
obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; 
x_36 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_36, 0, x_2);
x_37 = l_Lean_Name_toString___closed__1;
x_38 = l_Lean_Name_toStringWithSep___main(x_37, x_33);
x_39 = l_Lean_Elaborator_processCommand___lambda__1___closed__2;
x_40 = lean::string_append(x_39, x_38);
lean::dec(x_38);
x_41 = l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__2___rarg(x_36, x_40, x_1, x_3, x_4);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_1);
lean::dec(x_36);
return x_41;
}
else
{
obj* x_42; obj* x_43; 
lean::dec(x_33);
x_42 = lean::cnstr_get(x_35, 0);
lean::inc(x_42);
lean::dec(x_35);
x_43 = l_Lean_Elaborator_preresolve___main(x_2, x_1, x_3, x_4);
if (lean::obj_tag(x_43) == 0)
{
obj* x_44; obj* x_45; obj* x_46; 
lean::dec(x_42);
lean::dec(x_3);
lean::dec(x_1);
x_44 = lean::cnstr_get(x_43, 0);
lean::inc(x_44);
if (lean::is_exclusive(x_43)) {
 lean::cnstr_release(x_43, 0);
 x_45 = x_43;
} else {
 lean::dec_ref(x_43);
 x_45 = lean::box(0);
}
if (lean::is_scalar(x_45)) {
 x_46 = lean::alloc_cnstr(0, 1, 0);
} else {
 x_46 = x_45;
}
lean::cnstr_set(x_46, 0, x_44);
return x_46;
}
else
{
obj* x_47; obj* x_48; obj* x_49; obj* x_50; 
x_47 = lean::cnstr_get(x_43, 0);
lean::inc(x_47);
lean::dec(x_43);
x_48 = lean::cnstr_get(x_47, 0);
lean::inc(x_48);
x_49 = lean::cnstr_get(x_47, 1);
lean::inc(x_49);
lean::dec(x_47);
x_50 = lean::apply_4(x_42, x_48, x_1, x_3, x_49);
return x_50;
}
}
}
}
}
}
obj* _init_l_Lean_Elaborator_processCommand___closed__1() {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Elaborator_processCommand___lambda__1), 4, 0);
return x_1;
}
}
obj* l_Lean_Elaborator_processCommand(obj* x_1, obj* x_2, obj* x_3) {
_start:
{
uint8 x_4; 
x_4 = !lean::is_exclusive(x_2);
if (x_4 == 0)
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_5 = lean::cnstr_get(x_2, 0);
x_6 = lean::cnstr_get(x_2, 1);
x_7 = lean::cnstr_get(x_2, 2);
x_8 = lean::cnstr_get(x_2, 3);
x_9 = lean::cnstr_get(x_2, 4);
x_10 = lean::cnstr_get(x_2, 6);
x_11 = lean::cnstr_get(x_2, 7);
x_12 = lean::cnstr_get(x_2, 8);
x_13 = lean::cnstr_get(x_2, 9);
x_14 = lean::cnstr_get(x_2, 10);
x_15 = lean::cnstr_get(x_2, 5);
lean::dec(x_15);
x_16 = l_Lean_MessageLog_empty;
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
lean::inc(x_8);
lean::inc(x_7);
lean::inc(x_6);
lean::inc(x_5);
lean::cnstr_set(x_2, 5, x_16);
x_17 = l_Lean_Elaborator_processCommand___closed__1;
x_18 = lean::fixpoint3(x_17, x_3, x_1, x_2);
if (lean::obj_tag(x_18) == 0)
{
obj* x_19; obj* x_20; obj* x_21; 
x_19 = lean::cnstr_get(x_18, 0);
lean::inc(x_19);
lean::dec(x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_16);
x_21 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_21, 0, x_5);
lean::cnstr_set(x_21, 1, x_6);
lean::cnstr_set(x_21, 2, x_7);
lean::cnstr_set(x_21, 3, x_8);
lean::cnstr_set(x_21, 4, x_9);
lean::cnstr_set(x_21, 5, x_20);
lean::cnstr_set(x_21, 6, x_10);
lean::cnstr_set(x_21, 7, x_11);
lean::cnstr_set(x_21, 8, x_12);
lean::cnstr_set(x_21, 9, x_13);
lean::cnstr_set(x_21, 10, x_14);
return x_21;
}
else
{
obj* x_22; obj* x_23; 
lean::dec(x_14);
lean::dec(x_13);
lean::dec(x_12);
lean::dec(x_11);
lean::dec(x_10);
lean::dec(x_9);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
x_22 = lean::cnstr_get(x_18, 0);
lean::inc(x_22);
lean::dec(x_18);
x_23 = lean::cnstr_get(x_22, 1);
lean::inc(x_23);
lean::dec(x_22);
return x_23;
}
}
else
{
obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; 
x_24 = lean::cnstr_get(x_2, 0);
x_25 = lean::cnstr_get(x_2, 1);
x_26 = lean::cnstr_get(x_2, 2);
x_27 = lean::cnstr_get(x_2, 3);
x_28 = lean::cnstr_get(x_2, 4);
x_29 = lean::cnstr_get(x_2, 6);
x_30 = lean::cnstr_get(x_2, 7);
x_31 = lean::cnstr_get(x_2, 8);
x_32 = lean::cnstr_get(x_2, 9);
x_33 = lean::cnstr_get(x_2, 10);
lean::inc(x_33);
lean::inc(x_32);
lean::inc(x_31);
lean::inc(x_30);
lean::inc(x_29);
lean::inc(x_28);
lean::inc(x_27);
lean::inc(x_26);
lean::inc(x_25);
lean::inc(x_24);
lean::dec(x_2);
x_34 = l_Lean_MessageLog_empty;
lean::inc(x_33);
lean::inc(x_32);
lean::inc(x_31);
lean::inc(x_30);
lean::inc(x_29);
lean::inc(x_28);
lean::inc(x_27);
lean::inc(x_26);
lean::inc(x_25);
lean::inc(x_24);
x_35 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_35, 0, x_24);
lean::cnstr_set(x_35, 1, x_25);
lean::cnstr_set(x_35, 2, x_26);
lean::cnstr_set(x_35, 3, x_27);
lean::cnstr_set(x_35, 4, x_28);
lean::cnstr_set(x_35, 5, x_34);
lean::cnstr_set(x_35, 6, x_29);
lean::cnstr_set(x_35, 7, x_30);
lean::cnstr_set(x_35, 8, x_31);
lean::cnstr_set(x_35, 9, x_32);
lean::cnstr_set(x_35, 10, x_33);
x_36 = l_Lean_Elaborator_processCommand___closed__1;
x_37 = lean::fixpoint3(x_36, x_3, x_1, x_35);
if (lean::obj_tag(x_37) == 0)
{
obj* x_38; obj* x_39; obj* x_40; 
x_38 = lean::cnstr_get(x_37, 0);
lean::inc(x_38);
lean::dec(x_37);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_34);
x_40 = lean::alloc_cnstr(0, 11, 0);
lean::cnstr_set(x_40, 0, x_24);
lean::cnstr_set(x_40, 1, x_25);
lean::cnstr_set(x_40, 2, x_26);
lean::cnstr_set(x_40, 3, x_27);
lean::cnstr_set(x_40, 4, x_28);
lean::cnstr_set(x_40, 5, x_39);
lean::cnstr_set(x_40, 6, x_29);
lean::cnstr_set(x_40, 7, x_30);
lean::cnstr_set(x_40, 8, x_31);
lean::cnstr_set(x_40, 9, x_32);
lean::cnstr_set(x_40, 10, x_33);
return x_40;
}
else
{
obj* x_41; obj* x_42; 
lean::dec(x_33);
lean::dec(x_32);
lean::dec(x_31);
lean::dec(x_30);
lean::dec(x_29);
lean::dec(x_28);
lean::dec(x_27);
lean::dec(x_26);
lean::dec(x_25);
lean::dec(x_24);
x_41 = lean::cnstr_get(x_37, 0);
lean::inc(x_41);
lean::dec(x_37);
x_42 = lean::cnstr_get(x_41, 1);
lean::inc(x_42);
lean::dec(x_41);
return x_42;
}
}
}
}
obj* l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__1___rarg___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__1___rarg(x_1, x_2, x_3, x_4);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_1);
return x_5;
}
}
obj* l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__2___rarg___boxed(obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_Lean_Expander_error___at_Lean_Elaborator_processCommand___spec__2___rarg(x_1, x_2, x_3, x_4, x_5);
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_1);
return x_6;
}
}
obj* l_RBNode_find___main___at_Lean_Elaborator_processCommand___spec__3___boxed(obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = l_RBNode_find___main___at_Lean_Elaborator_processCommand___spec__3(x_1, x_2);
lean::dec(x_2);
lean::dec(x_1);
return x_3;
}
}
obj* initialize_init_lean_parser_module(obj*);
obj* initialize_init_lean_expander(obj*);
obj* initialize_init_lean_expr(obj*);
obj* initialize_init_lean_options(obj*);
obj* initialize_init_lean_environment(obj*);
static bool _G_initialized = false;
obj* initialize_init_lean_elaborator(obj* w) {
if (_G_initialized) return w;
_G_initialized = true;
if (io_result_is_error(w)) return w;
w = initialize_init_lean_parser_module(w);
if (io_result_is_error(w)) return w;
w = initialize_init_lean_expander(w);
if (io_result_is_error(w)) return w;
w = initialize_init_lean_expr(w);
if (io_result_is_error(w)) return w;
w = initialize_init_lean_options(w);
if (io_result_is_error(w)) return w;
w = initialize_init_lean_environment(w);
if (io_result_is_error(w)) return w;
l_Lean_Elaborator_ElaboratorM_Monad = _init_l_Lean_Elaborator_ElaboratorM_Monad();
lean::mark_persistent(l_Lean_Elaborator_ElaboratorM_Monad);
l_Lean_Elaborator_ElaboratorM_Lean_Parser_MonadRec = _init_l_Lean_Elaborator_ElaboratorM_Lean_Parser_MonadRec();
lean::mark_persistent(l_Lean_Elaborator_ElaboratorM_Lean_Parser_MonadRec);
l_Lean_Elaborator_ElaboratorM_MonadReader = _init_l_Lean_Elaborator_ElaboratorM_MonadReader();
lean::mark_persistent(l_Lean_Elaborator_ElaboratorM_MonadReader);
l_Lean_Elaborator_ElaboratorM_MonadState = _init_l_Lean_Elaborator_ElaboratorM_MonadState();
lean::mark_persistent(l_Lean_Elaborator_ElaboratorM_MonadState);
l_Lean_Elaborator_ElaboratorM_MonadExcept = _init_l_Lean_Elaborator_ElaboratorM_MonadExcept();
lean::mark_persistent(l_Lean_Elaborator_ElaboratorM_MonadExcept);
l_Lean_Elaborator_elaboratorInh___closed__1 = _init_l_Lean_Elaborator_elaboratorInh___closed__1();
lean::mark_persistent(l_Lean_Elaborator_elaboratorInh___closed__1);
l_Lean_Elaborator_currentScope___closed__1 = _init_l_Lean_Elaborator_currentScope___closed__1();
lean::mark_persistent(l_Lean_Elaborator_currentScope___closed__1);
l_Lean_Elaborator_modifyCurrentScope___closed__1 = _init_l_Lean_Elaborator_modifyCurrentScope___closed__1();
lean::mark_persistent(l_Lean_Elaborator_modifyCurrentScope___closed__1);
l_Lean_Elaborator_levelGetAppArgs___main___closed__1 = _init_l_Lean_Elaborator_levelGetAppArgs___main___closed__1();
lean::mark_persistent(l_Lean_Elaborator_levelGetAppArgs___main___closed__1);
l_Lean_Elaborator_toLevel___main___closed__1 = _init_l_Lean_Elaborator_toLevel___main___closed__1();
lean::mark_persistent(l_Lean_Elaborator_toLevel___main___closed__1);
l_Lean_Elaborator_toLevel___main___closed__2 = _init_l_Lean_Elaborator_toLevel___main___closed__2();
lean::mark_persistent(l_Lean_Elaborator_toLevel___main___closed__2);
l_Lean_Elaborator_toLevel___main___closed__3 = _init_l_Lean_Elaborator_toLevel___main___closed__3();
lean::mark_persistent(l_Lean_Elaborator_toLevel___main___closed__3);
l_Lean_Elaborator_toLevel___main___closed__4 = _init_l_Lean_Elaborator_toLevel___main___closed__4();
lean::mark_persistent(l_Lean_Elaborator_toLevel___main___closed__4);
l_Lean_Elaborator_Expr_mkAnnotation___closed__1 = _init_l_Lean_Elaborator_Expr_mkAnnotation___closed__1();
lean::mark_persistent(l_Lean_Elaborator_Expr_mkAnnotation___closed__1);
l_Lean_Elaborator_dummy = _init_l_Lean_Elaborator_dummy();
lean::mark_persistent(l_Lean_Elaborator_dummy);
l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1___closed__1 = _init_l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1___closed__1();
lean::mark_persistent(l_List_map___main___at_Lean_Elaborator_mkEqns___spec__1___closed__1);
l_Lean_Elaborator_mkEqns___closed__1 = _init_l_Lean_Elaborator_mkEqns___closed__1();
lean::mark_persistent(l_Lean_Elaborator_mkEqns___closed__1);
l_Lean_Elaborator_mkEqns___closed__2 = _init_l_Lean_Elaborator_mkEqns___closed__2();
lean::mark_persistent(l_Lean_Elaborator_mkEqns___closed__2);
l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3___closed__1 = _init_l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3___closed__1();
lean::mark_persistent(l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__3___closed__1);
l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__1 = _init_l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__1();
lean::mark_persistent(l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__1);
l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2 = _init_l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2();
lean::mark_persistent(l_List_mmap___main___at_Lean_Elaborator_toPexpr___main___spec__6___closed__2);
l_Lean_Elaborator_toPexpr___main___closed__1 = _init_l_Lean_Elaborator_toPexpr___main___closed__1();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__1);
l_Lean_Elaborator_toPexpr___main___closed__2 = _init_l_Lean_Elaborator_toPexpr___main___closed__2();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__2);
l_Lean_Elaborator_toPexpr___main___closed__3 = _init_l_Lean_Elaborator_toPexpr___main___closed__3();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__3);
l_Lean_Elaborator_toPexpr___main___closed__4 = _init_l_Lean_Elaborator_toPexpr___main___closed__4();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__4);
l_Lean_Elaborator_toPexpr___main___closed__5 = _init_l_Lean_Elaborator_toPexpr___main___closed__5();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__5);
l_Lean_Elaborator_toPexpr___main___closed__6 = _init_l_Lean_Elaborator_toPexpr___main___closed__6();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__6);
l_Lean_Elaborator_toPexpr___main___closed__7 = _init_l_Lean_Elaborator_toPexpr___main___closed__7();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__7);
l_Lean_Elaborator_toPexpr___main___closed__8 = _init_l_Lean_Elaborator_toPexpr___main___closed__8();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__8);
l_Lean_Elaborator_toPexpr___main___closed__9 = _init_l_Lean_Elaborator_toPexpr___main___closed__9();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__9);
l_Lean_Elaborator_toPexpr___main___closed__10 = _init_l_Lean_Elaborator_toPexpr___main___closed__10();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__10);
l_Lean_Elaborator_toPexpr___main___closed__11 = _init_l_Lean_Elaborator_toPexpr___main___closed__11();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__11);
l_Lean_Elaborator_toPexpr___main___closed__12 = _init_l_Lean_Elaborator_toPexpr___main___closed__12();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__12);
l_Lean_Elaborator_toPexpr___main___closed__13 = _init_l_Lean_Elaborator_toPexpr___main___closed__13();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__13);
l_Lean_Elaborator_toPexpr___main___closed__14 = _init_l_Lean_Elaborator_toPexpr___main___closed__14();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__14);
l_Lean_Elaborator_toPexpr___main___closed__15 = _init_l_Lean_Elaborator_toPexpr___main___closed__15();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__15);
l_Lean_Elaborator_toPexpr___main___closed__16 = _init_l_Lean_Elaborator_toPexpr___main___closed__16();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__16);
l_Lean_Elaborator_toPexpr___main___closed__17 = _init_l_Lean_Elaborator_toPexpr___main___closed__17();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__17);
l_Lean_Elaborator_toPexpr___main___closed__18 = _init_l_Lean_Elaborator_toPexpr___main___closed__18();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__18);
l_Lean_Elaborator_toPexpr___main___closed__19 = _init_l_Lean_Elaborator_toPexpr___main___closed__19();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__19);
l_Lean_Elaborator_toPexpr___main___closed__20 = _init_l_Lean_Elaborator_toPexpr___main___closed__20();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__20);
l_Lean_Elaborator_toPexpr___main___closed__21 = _init_l_Lean_Elaborator_toPexpr___main___closed__21();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__21);
l_Lean_Elaborator_toPexpr___main___closed__22 = _init_l_Lean_Elaborator_toPexpr___main___closed__22();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__22);
l_Lean_Elaborator_toPexpr___main___closed__23 = _init_l_Lean_Elaborator_toPexpr___main___closed__23();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__23);
l_Lean_Elaborator_toPexpr___main___closed__24 = _init_l_Lean_Elaborator_toPexpr___main___closed__24();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__24);
l_Lean_Elaborator_toPexpr___main___closed__25 = _init_l_Lean_Elaborator_toPexpr___main___closed__25();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__25);
l_Lean_Elaborator_toPexpr___main___closed__26 = _init_l_Lean_Elaborator_toPexpr___main___closed__26();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__26);
l_Lean_Elaborator_toPexpr___main___closed__27 = _init_l_Lean_Elaborator_toPexpr___main___closed__27();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__27);
l_Lean_Elaborator_toPexpr___main___closed__28 = _init_l_Lean_Elaborator_toPexpr___main___closed__28();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__28);
l_Lean_Elaborator_toPexpr___main___closed__29 = _init_l_Lean_Elaborator_toPexpr___main___closed__29();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__29);
l_Lean_Elaborator_toPexpr___main___closed__30 = _init_l_Lean_Elaborator_toPexpr___main___closed__30();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__30);
l_Lean_Elaborator_toPexpr___main___closed__31 = _init_l_Lean_Elaborator_toPexpr___main___closed__31();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__31);
l_Lean_Elaborator_toPexpr___main___closed__32 = _init_l_Lean_Elaborator_toPexpr___main___closed__32();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__32);
l_Lean_Elaborator_toPexpr___main___closed__33 = _init_l_Lean_Elaborator_toPexpr___main___closed__33();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__33);
l_Lean_Elaborator_toPexpr___main___closed__34 = _init_l_Lean_Elaborator_toPexpr___main___closed__34();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__34);
l_Lean_Elaborator_toPexpr___main___closed__35 = _init_l_Lean_Elaborator_toPexpr___main___closed__35();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__35);
l_Lean_Elaborator_toPexpr___main___closed__36 = _init_l_Lean_Elaborator_toPexpr___main___closed__36();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__36);
l_Lean_Elaborator_toPexpr___main___closed__37 = _init_l_Lean_Elaborator_toPexpr___main___closed__37();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__37);
l_Lean_Elaborator_toPexpr___main___closed__38 = _init_l_Lean_Elaborator_toPexpr___main___closed__38();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__38);
l_Lean_Elaborator_toPexpr___main___closed__39 = _init_l_Lean_Elaborator_toPexpr___main___closed__39();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__39);
l_Lean_Elaborator_toPexpr___main___closed__40 = _init_l_Lean_Elaborator_toPexpr___main___closed__40();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__40);
l_Lean_Elaborator_toPexpr___main___closed__41 = _init_l_Lean_Elaborator_toPexpr___main___closed__41();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__41);
l_Lean_Elaborator_toPexpr___main___closed__42 = _init_l_Lean_Elaborator_toPexpr___main___closed__42();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__42);
l_Lean_Elaborator_toPexpr___main___closed__43 = _init_l_Lean_Elaborator_toPexpr___main___closed__43();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__43);
l_Lean_Elaborator_toPexpr___main___closed__44 = _init_l_Lean_Elaborator_toPexpr___main___closed__44();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__44);
l_Lean_Elaborator_toPexpr___main___closed__45 = _init_l_Lean_Elaborator_toPexpr___main___closed__45();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__45);
l_Lean_Elaborator_toPexpr___main___closed__46 = _init_l_Lean_Elaborator_toPexpr___main___closed__46();
lean::mark_persistent(l_Lean_Elaborator_toPexpr___main___closed__46);
l_Lean_Elaborator_declModifiersToPexpr___closed__1 = _init_l_Lean_Elaborator_declModifiersToPexpr___closed__1();
lean::mark_persistent(l_Lean_Elaborator_declModifiersToPexpr___closed__1);
l_Lean_Elaborator_declModifiersToPexpr___closed__2 = _init_l_Lean_Elaborator_declModifiersToPexpr___closed__2();
lean::mark_persistent(l_Lean_Elaborator_declModifiersToPexpr___closed__2);
l_Lean_Elaborator_declModifiersToPexpr___closed__3 = _init_l_Lean_Elaborator_declModifiersToPexpr___closed__3();
lean::mark_persistent(l_Lean_Elaborator_declModifiersToPexpr___closed__3);
l_Lean_Elaborator_declModifiersToPexpr___closed__4 = _init_l_Lean_Elaborator_declModifiersToPexpr___closed__4();
lean::mark_persistent(l_Lean_Elaborator_declModifiersToPexpr___closed__4);
l_Lean_Elaborator_declModifiersToPexpr___closed__5 = _init_l_Lean_Elaborator_declModifiersToPexpr___closed__5();
lean::mark_persistent(l_Lean_Elaborator_declModifiersToPexpr___closed__5);
l_Lean_Elaborator_declModifiersToPexpr___closed__6 = _init_l_Lean_Elaborator_declModifiersToPexpr___closed__6();
lean::mark_persistent(l_Lean_Elaborator_declModifiersToPexpr___closed__6);
l_Lean_Elaborator_declModifiersToPexpr___closed__7 = _init_l_Lean_Elaborator_declModifiersToPexpr___closed__7();
lean::mark_persistent(l_Lean_Elaborator_declModifiersToPexpr___closed__7);
l_Lean_Elaborator_elabDefLike___closed__1 = _init_l_Lean_Elaborator_elabDefLike___closed__1();
lean::mark_persistent(l_Lean_Elaborator_elabDefLike___closed__1);
l_Lean_Elaborator_elabDefLike___closed__2 = _init_l_Lean_Elaborator_elabDefLike___closed__2();
lean::mark_persistent(l_Lean_Elaborator_elabDefLike___closed__2);
l_Lean_Elaborator_inferModToPexpr___closed__1 = _init_l_Lean_Elaborator_inferModToPexpr___closed__1();
lean::mark_persistent(l_Lean_Elaborator_inferModToPexpr___closed__1);
l_Lean_Elaborator_inferModToPexpr___closed__2 = _init_l_Lean_Elaborator_inferModToPexpr___closed__2();
lean::mark_persistent(l_Lean_Elaborator_inferModToPexpr___closed__2);
l_Lean_Elaborator_inferModToPexpr___closed__3 = _init_l_Lean_Elaborator_inferModToPexpr___closed__3();
lean::mark_persistent(l_Lean_Elaborator_inferModToPexpr___closed__3);
l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2___closed__1 = _init_l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2___closed__1();
lean::mark_persistent(l_List_mmap___main___at_Lean_Elaborator_declaration_elaborate___spec__2___closed__1);
l_Lean_Elaborator_declaration_elaborate___lambda__3___closed__1 = _init_l_Lean_Elaborator_declaration_elaborate___lambda__3___closed__1();
lean::mark_persistent(l_Lean_Elaborator_declaration_elaborate___lambda__3___closed__1);
l_Lean_Elaborator_declaration_elaborate___lambda__3___closed__2 = _init_l_Lean_Elaborator_declaration_elaborate___lambda__3___closed__2();
lean::mark_persistent(l_Lean_Elaborator_declaration_elaborate___lambda__3___closed__2);
l_Lean_Elaborator_declaration_elaborate___closed__1 = _init_l_Lean_Elaborator_declaration_elaborate___closed__1();
lean::mark_persistent(l_Lean_Elaborator_declaration_elaborate___closed__1);
l_Lean_Elaborator_declaration_elaborate___closed__2 = _init_l_Lean_Elaborator_declaration_elaborate___closed__2();
lean::mark_persistent(l_Lean_Elaborator_declaration_elaborate___closed__2);
l_Lean_Elaborator_declaration_elaborate___closed__3 = _init_l_Lean_Elaborator_declaration_elaborate___closed__3();
lean::mark_persistent(l_Lean_Elaborator_declaration_elaborate___closed__3);
l_Lean_Elaborator_declaration_elaborate___closed__4 = _init_l_Lean_Elaborator_declaration_elaborate___closed__4();
lean::mark_persistent(l_Lean_Elaborator_declaration_elaborate___closed__4);
l_Lean_Elaborator_declaration_elaborate___closed__5 = _init_l_Lean_Elaborator_declaration_elaborate___closed__5();
lean::mark_persistent(l_Lean_Elaborator_declaration_elaborate___closed__5);
l_Lean_Elaborator_variables_elaborate___closed__1 = _init_l_Lean_Elaborator_variables_elaborate___closed__1();
lean::mark_persistent(l_Lean_Elaborator_variables_elaborate___closed__1);
l_Lean_Elaborator_variables_elaborate___closed__2 = _init_l_Lean_Elaborator_variables_elaborate___closed__2();
lean::mark_persistent(l_Lean_Elaborator_variables_elaborate___closed__2);
l_Lean_Elaborator_Module_header_elaborate___closed__1 = _init_l_Lean_Elaborator_Module_header_elaborate___closed__1();
lean::mark_persistent(l_Lean_Elaborator_Module_header_elaborate___closed__1);
l_List_mfoldl___main___at_Lean_Elaborator_CommandParserConfig_registerNotationTokens___spec__1___closed__1 = _init_l_List_mfoldl___main___at_Lean_Elaborator_CommandParserConfig_registerNotationTokens___spec__1___closed__1();
lean::mark_persistent(l_List_mfoldl___main___at_Lean_Elaborator_CommandParserConfig_registerNotationTokens___spec__1___closed__1);
l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__1 = _init_l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__1();
lean::mark_persistent(l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__1);
l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__2 = _init_l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__2();
lean::mark_persistent(l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__2);
l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__3 = _init_l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__3();
lean::mark_persistent(l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__3);
l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__4 = _init_l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__4();
lean::mark_persistent(l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__4);
l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__5 = _init_l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__5();
lean::mark_persistent(l_List_mmap___main___at_Lean_Elaborator_CommandParserConfig_registerNotationParser___spec__2___closed__5);
l_Lean_Elaborator_CommandParserConfig_registerNotationParser___closed__1 = _init_l_Lean_Elaborator_CommandParserConfig_registerNotationParser___closed__1();
lean::mark_persistent(l_Lean_Elaborator_CommandParserConfig_registerNotationParser___closed__1);
l_Lean_Elaborator_postprocessNotationSpec___closed__1 = _init_l_Lean_Elaborator_postprocessNotationSpec___closed__1();
lean::mark_persistent(l_Lean_Elaborator_postprocessNotationSpec___closed__1);
l_Lean_Elaborator_notation_elaborateAux___closed__1 = _init_l_Lean_Elaborator_notation_elaborateAux___closed__1();
lean::mark_persistent(l_Lean_Elaborator_notation_elaborateAux___closed__1);
l_Lean_Elaborator_mkNotationKind___rarg___closed__1 = _init_l_Lean_Elaborator_mkNotationKind___rarg___closed__1();
lean::mark_persistent(l_Lean_Elaborator_mkNotationKind___rarg___closed__1);
l_Lean_Elaborator_notation_elaborate___closed__1 = _init_l_Lean_Elaborator_notation_elaborate___closed__1();
lean::mark_persistent(l_Lean_Elaborator_notation_elaborate___closed__1);
l_Lean_Elaborator_notation_elaborate___closed__2 = _init_l_Lean_Elaborator_notation_elaborate___closed__2();
lean::mark_persistent(l_Lean_Elaborator_notation_elaborate___closed__2);
l_Lean_Elaborator_universe_elaborate___closed__1 = _init_l_Lean_Elaborator_universe_elaborate___closed__1();
lean::mark_persistent(l_Lean_Elaborator_universe_elaborate___closed__1);
l_Lean_Elaborator_universe_elaborate___closed__2 = _init_l_Lean_Elaborator_universe_elaborate___closed__2();
lean::mark_persistent(l_Lean_Elaborator_universe_elaborate___closed__2);
l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___closed__1 = _init_l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___closed__1();
lean::mark_persistent(l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___closed__1);
l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___closed__2 = _init_l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___closed__2();
lean::mark_persistent(l_List_mmap___main___at_Lean_Elaborator_attribute_elaborate___spec__1___closed__2);
l_Lean_Elaborator_attribute_elaborate___closed__1 = _init_l_Lean_Elaborator_attribute_elaborate___closed__1();
lean::mark_persistent(l_Lean_Elaborator_attribute_elaborate___closed__1);
l_Lean_Elaborator_attribute_elaborate___closed__2 = _init_l_Lean_Elaborator_attribute_elaborate___closed__2();
lean::mark_persistent(l_Lean_Elaborator_attribute_elaborate___closed__2);
l_Lean_Elaborator_check_elaborate___closed__1 = _init_l_Lean_Elaborator_check_elaborate___closed__1();
lean::mark_persistent(l_Lean_Elaborator_check_elaborate___closed__1);
l_Lean_Elaborator_initQuot_elaborate___closed__1 = _init_l_Lean_Elaborator_initQuot_elaborate___closed__1();
lean::mark_persistent(l_Lean_Elaborator_initQuot_elaborate___closed__1);
l_Lean_Elaborator_noKind_elaborate___closed__1 = _init_l_Lean_Elaborator_noKind_elaborate___closed__1();
lean::mark_persistent(l_Lean_Elaborator_noKind_elaborate___closed__1);
l_Lean_Elaborator_end_elaborate___closed__1 = _init_l_Lean_Elaborator_end_elaborate___closed__1();
lean::mark_persistent(l_Lean_Elaborator_end_elaborate___closed__1);
l_Lean_Elaborator_end_elaborate___closed__2 = _init_l_Lean_Elaborator_end_elaborate___closed__2();
lean::mark_persistent(l_Lean_Elaborator_end_elaborate___closed__2);
l_Lean_Elaborator_end_elaborate___closed__3 = _init_l_Lean_Elaborator_end_elaborate___closed__3();
lean::mark_persistent(l_Lean_Elaborator_end_elaborate___closed__3);
l_Lean_Elaborator_end_elaborate___closed__4 = _init_l_Lean_Elaborator_end_elaborate___closed__4();
lean::mark_persistent(l_Lean_Elaborator_end_elaborate___closed__4);
l_Lean_Elaborator_section_elaborate___closed__1 = _init_l_Lean_Elaborator_section_elaborate___closed__1();
lean::mark_persistent(l_Lean_Elaborator_section_elaborate___closed__1);
l_Lean_Elaborator_section_elaborate___closed__2 = _init_l_Lean_Elaborator_section_elaborate___closed__2();
lean::mark_persistent(l_Lean_Elaborator_section_elaborate___closed__2);
l_Lean_Elaborator_namespace_elaborate___closed__1 = _init_l_Lean_Elaborator_namespace_elaborate___closed__1();
lean::mark_persistent(l_Lean_Elaborator_namespace_elaborate___closed__1);
l_Lean_Elaborator_eoi_elaborate___closed__1 = _init_l_Lean_Elaborator_eoi_elaborate___closed__1();
lean::mark_persistent(l_Lean_Elaborator_eoi_elaborate___closed__1);
l_Lean_Elaborator_elaborators = _init_l_Lean_Elaborator_elaborators();
lean::mark_persistent(l_Lean_Elaborator_elaborators);
l_Lean_Elaborator_resolveContext___main___closed__1 = _init_l_Lean_Elaborator_resolveContext___main___closed__1();
lean::mark_persistent(l_Lean_Elaborator_resolveContext___main___closed__1);
l_Lean_Elaborator_mkState___closed__1 = _init_l_Lean_Elaborator_mkState___closed__1();
lean::mark_persistent(l_Lean_Elaborator_mkState___closed__1);
l_Lean_Elaborator_mkState___closed__2 = _init_l_Lean_Elaborator_mkState___closed__2();
lean::mark_persistent(l_Lean_Elaborator_mkState___closed__2);
l_Lean_Elaborator_mkState___closed__3 = _init_l_Lean_Elaborator_mkState___closed__3();
lean::mark_persistent(l_Lean_Elaborator_mkState___closed__3);
l_Lean_Elaborator_mkState___closed__4 = _init_l_Lean_Elaborator_mkState___closed__4();
lean::mark_persistent(l_Lean_Elaborator_mkState___closed__4);
l_Lean_Elaborator_processCommand___lambda__1___closed__1 = _init_l_Lean_Elaborator_processCommand___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Elaborator_processCommand___lambda__1___closed__1);
l_Lean_Elaborator_processCommand___lambda__1___closed__2 = _init_l_Lean_Elaborator_processCommand___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Elaborator_processCommand___lambda__1___closed__2);
l_Lean_Elaborator_processCommand___closed__1 = _init_l_Lean_Elaborator_processCommand___closed__1();
lean::mark_persistent(l_Lean_Elaborator_processCommand___closed__1);
return w;
}
