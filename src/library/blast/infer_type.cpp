/*
Copyright (c) 2015 Microsoft Corporation. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.

Author: Leonardo de Moura
*/
#include "util/interrupt.h"
#include "kernel/instantiate.h"
#include "kernel/abstract.h"
#include "library/blast/infer_type.h"
#include "library/blast/blast_context.h"
#include "library/blast/blast_exception.h"

namespace lean {
namespace blast {
static optional<expr> expand_macro(expr const & m) {
    lean_assert(is_macro(m));
    return macro_def(m).expand(m, ext_ctx());
}

static optional<expr> reduce_projection(expr const & e) {
    expr const & f = get_app_fn(e);
    if (!is_constant(f))
        return none_expr();
    projection_info const * info = get_projection_info(const_name(f));
    if (!info)
        return none_expr();
    buffer<expr> args;
    get_app_args(e, args);
    if (args.size() <= info->m_nparams)
        return none_expr();
    unsigned mkidx  = info->m_nparams;
    expr const & mk = args[mkidx];
    expr new_mk     = whnf(mk);
    expr const & new_mk_fn = get_app_fn(new_mk);
    if (!is_constant(new_mk_fn) || const_name(new_mk_fn) != info->m_constructor)
        return none_expr();
    buffer<expr> mk_args;
    get_app_args(new_mk, mk_args);
    unsigned i = info->m_nparams + info->m_i;
    if (i >= mk_args.size())
        none_expr();
    expr r = mk_args[i];
    r = blast::mk_app(r, args.size() - mkidx - 1, args.data() + mkidx + 1);
    return some_expr(r);
}

static optional<expr> norm_ext(expr const & e) {
    if (auto r = reduce_projection(e)) {
        return r;
    } else if (auto r = env().norm_ext()(e, ext_ctx())) {
        return some_expr(r->first);
    } else {
        return none_expr();
    }
}

static expr whnf_core(expr const & e) {
    check_system("whnf");

    switch (e.kind()) {
    case expr_kind::Var:  case expr_kind::Sort: case expr_kind::Meta: case expr_kind::Local:
    case expr_kind::Pi:   case expr_kind::Lambda:
        return e;
    case expr_kind::Constant:
        if (blast::is_reducible(const_name(e)))
            return whnf_core(instantiate_value_univ_params(env().get(const_name(e)), const_levels(e)));
        else
            return e;
    case expr_kind::Macro:
        if (auto m = expand_macro(e))
            return whnf_core(*m);
        else
            return e;
    case expr_kind::App: {
        buffer<expr> args;
        expr f0 = get_app_rev_args(e, args);
        expr f = whnf_core(f0);
        if (is_lambda(f)) {
            unsigned m = 1;
            unsigned num_args = args.size();
            while (is_lambda(binding_body(f)) && m < num_args) {
                f = binding_body(f);
                m++;
            }
            lean_assert(m <= num_args);
            return whnf_core(blast::mk_rev_app(instantiate(binding_body(f), m, args.data() + (num_args - m)),
                                               num_args - m, args.data()));
        } else {
            return f == f0 ? e : whnf_core(blast::mk_rev_app(f, args.size(), args.data()));
        }
    }}
    lean_unreachable();
}

expr whnf(expr const & e) {
    expr t = e;
    while (true) {
        expr t1 = whnf_core(t);
        if (auto new_t = norm_ext(t1)) {
            t  = *new_t;
        } else {
            return t1;
        }
    }
}

bool is_def_eq(expr const & e1, expr const & e2) {
    // TODO(Leo)
    return e1 == e2;
}

static expr infer_constant(expr const & e) {
    declaration d    = env().get(const_name(e));
    auto const & ps = d.get_univ_params();
    auto const & ls = const_levels(e);
    if (length(ps) != length(ls))
        throw blast_exception("infer type failed, incorrect number of universe levels", e);
    return instantiate_type_univ_params(d, ls);
}

static expr infer_macro(expr const & e) {
    auto def = macro_def(e);
    bool infer_only = true;
    // Remark: we are ignoring constraints generated by the macro definition.
    return def.check_type(e, ext_ctx(), infer_only).first;
}

static expr infer_lambda(expr e) {
    buffer<expr> es, ds, ls;
    while (is_lambda(e)) {
        es.push_back(e);
        ds.push_back(binding_domain(e));
        expr d = instantiate_rev(binding_domain(e), ls.size(), ls.data());
        expr l = blast::mk_local(mk_fresh_local_name(), binding_name(e), d, binding_info(e));
        ls.push_back(l);
        e = binding_body(e);
    }
    expr t = infer_type(instantiate_rev(e, ls.size(), ls.data()));
    expr r = abstract_locals(t, ls.size(), ls.data());
    unsigned i = es.size();
    while (i > 0) {
        --i;
        r = blast::mk_pi(binding_name(es[i]), ds[i], r, binding_info(es[i]));
    }
    return r;
}

/** \brief Make sure \c e is a sort, if it is not throw an exception using \c ref as a reference */
static void ensure_sort(expr const & e, expr const & ref) {
    // Remark: for simplicity reasons, we just fail if \c e is not a sort.
    if (!is_sort(e))
        throw blast_exception("infer type failed, sort expected", ref);
}

static expr infer_pi(expr const & e0) {
    buffer<expr>  ls;
    buffer<level> us;
    expr e = e0;
    while (is_pi(e)) {
        expr d      = instantiate_rev(binding_domain(e), ls.size(), ls.data());
        expr d_type = whnf(infer_type(d));
        ensure_sort(d_type, e0);
        us.push_back(sort_level(d_type));
        expr l  = blast::mk_local(mk_fresh_local_name(), binding_name(e), d, binding_info(e));
        ls.push_back(l);
        e = binding_body(e);
    }
    e = instantiate_rev(e, ls.size(), ls.data());
    expr e_type = whnf(infer_type(e));
    ensure_sort(e_type, e0);
    level r = sort_level(e_type);
    unsigned i = ls.size();
    bool imp = env().impredicative();
    while (i > 0) {
        --i;
        r = imp ? blast::mk_imax(us[i], r) : blast::mk_max(us[i], r);
    }
    return blast::mk_sort(r);
}

/** \brief Make sure \c e is a Pi-expression, if it is not throw an exception using \c ref as a reference */
static void ensure_pi(expr const & e, expr const & ref) {
    // Remark: for simplicity reasons, we just fail if \c e is not a Pi.
    if (!is_pi(e))
        throw blast_exception("infer type failed, Pi expected", ref);
}

static expr infer_app(expr const & e) {
    buffer<expr> args;
    expr const & f = get_app_args(e, args);
    expr f_type = infer_type(f);
    unsigned j        = 0;
    unsigned nargs    = args.size();
    for (unsigned i = 0; i < nargs; i++) {
        if (is_pi(f_type)) {
            f_type = binding_body(f_type);
        } else {
            f_type = whnf(instantiate_rev(f_type, i-j, args.data()+j));
            ensure_pi(f_type, e);
            f_type = binding_body(f_type);
            j = i;
        }
    }
    return instantiate_rev(f_type, nargs-j, args.data()+j);
}

expr infer_type(expr const & e) {
    lean_assert(!is_var(e));
    lean_assert(closed(e));
    check_system("infer_type");

    expr r;
    switch (e.kind()) {
    case expr_kind::Local:
        if (is_href(e)) {
            if (hypothesis const * h = state().get_main_branch().get(e)) {
                r = h->get_type();
            } else {
                throw blast_exception("infer type failed, unknown hypothesis", e);
            }
        } else {
            r = mlocal_type(e);
        }
        break;
    case expr_kind::Meta:
        r = mlocal_type(e);
        break;
    case expr_kind::Var:
        lean_unreachable();  // LCOV_EXCL_LINE
    case expr_kind::Sort:
        r = blast::mk_sort(blast::mk_succ(sort_level(e)));
        break;
    case expr_kind::Constant:
        r = infer_constant(e);
        break;
    case expr_kind::Macro:
        r = infer_macro(e);
        break;
    case expr_kind::Lambda:
        r = infer_lambda(e);
        break;
    case expr_kind::Pi:
        r = infer_pi(e);
        break;
    case expr_kind::App:
        r = infer_app(e);
        break;
    }
    // TODO(Leo): cache results if we have performance problems
    return r;
}
}}
