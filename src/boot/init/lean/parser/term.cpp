// Lean compiler output
// Module: init.lean.parser.term
// Imports: init.lean.parser.level init.lean.parser.notation init.lean.expr
#include "runtime/object.h"
#include "runtime/apply.h"
#include "runtime/io.h"
#include "kernel/builtin.h"
typedef lean::object obj;
#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-label"
#endif
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_let_parser(obj*, obj*, obj*, obj*, obj*);
extern obj* l_lean_parser_choice;
obj* l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_paren__content_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_binders__remainder_has__view_x_27;
obj* l_lean_parser_term_binder__default;
obj* l_lean_parser_term_opt__ident_parser___closed__1;
obj* l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_ident__univs;
obj* l_lean_parser_term_from_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_bracketed__binders_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_explicit_parser_lean_parser_has__view;
unsigned char l_lean_parser_syntax_is__of__kind___main(obj*, obj*);
obj* l_lean_parser_symbol_tokens___rarg(obj*, obj*);
obj* l_lean_parser_term_implicit__binder_has__view_x_27;
obj* l_lean_parser_term_binder__content_parser_lean_parser_has__view;
obj* l_lean_parser_term_struct__inst__field;
obj* l_lean_parser_term_assume__binders;
obj* l_lean_parser_term_assume__anonymous_has__view;
obj* l_lean_parser_term_struct__inst__with_has__view_x_27;
extern obj* l_lean_parser_raw_view___rarg___lambda__3___closed__1;
obj* l_lean_parser_term_struct__inst__type_has__view;
obj* l_lean_parser_term_inst__implicit__binder__content_has__view;
obj* l_lean_parser_term_inaccessible_parser___closed__1;
obj* l_lean_parser_term_bracketed__binder_parser_lean_parser_has__view;
obj* l_list_foldl___main___at_lean_parser_term_mk__app___spec__1(obj*, obj*);
obj* l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__view___spec__1___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_list_map___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__2(obj*);
obj* l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_term_app_parser_lean_parser_has__view;
obj* l_lean_parser_combinators_longest__match___at___private_4028176591__leading___spec__7(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__1(obj*);
obj* l_function_comp___rarg(obj*, obj*, obj*);
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
extern obj* l_lean_parser_curr__lbp___rarg___lambda__3___closed__1;
obj* l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser___spec__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_list_mfoldr___main___at___private_4028176591__leading___spec__10(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_let_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_monad__parsec_longest__match___at___private_1752552305__trailing___spec__7(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_pi_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_match;
obj* l_lean_parser_term_projection_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_opt__ident_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_let_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_mixed__binder;
obj* l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_subtype_parser___closed__1;
obj* l_lean_parser_term_type__spec_parser_lean_parser_has__view;
extern obj* l_lean_parser_number_has__view;
obj* l_lean_parser_term_binder__ident_parser___closed__1;
obj* l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1(obj*, obj*, unsigned char, obj*, obj*, obj*, obj*, obj*);
extern obj* l_lean_parser_basic__parser__m_monad;
obj* l_lean_parser_term_have_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_binder__content_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binders__ext_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_let__lhs_has__view_x_27___lambda__2(obj*);
obj* l___private_4028586963__sep__by__aux___main___at_lean_parser_term_paren_parser___spec__2___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_combinators_node_view___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_pi;
obj* l_lean_parser_monad__parsec_longest__match___at_lean_parser_term_bracketed__binder_parser___spec__3(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_anonymous__inaccessible_has__view_x_27;
obj* l_lean_parser_term_sort_has__view;
obj* l_lean_parser_term_sort_parser___closed__1;
obj* l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1;
extern obj* l_lean_parser_command_mixfix_kind_has__view_x_27___lambda__2___closed__1;
obj* l_lean_parser_term_assume__binders_has__view;
obj* l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_parsec__t_bind__mk__res___rarg(obj*, obj*);
obj* l_lean_parser_combinators_sep__by1_tokens___rarg(obj*, obj*);
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3(obj*);
obj* l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2;
extern obj* l_lean_parser_no__kind;
obj* l_lean_parser_term_match__equation_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_sort__app_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_anonymous__constructor_has__view;
obj* l_reader__t_orelse___at___private_1752552305__trailing___spec__11(obj*);
obj* l_lean_parser_term_typed_has__view;
obj* l_lean_parser_term_paren_parser___closed__1;
obj* l_lean_parser_term__parser_run(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_have_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_type__spec_has__view_x_27;
obj* l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1;
extern obj* l_lean_parser_basic__parser__m_lean_parser_monad__parsec;
obj* l_list_foldl___main___at___private_1752552305__trailing___spec__12(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_binders;
obj* l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_projection;
obj* l_list_mfoldl___main___at_lean_parser_term_sort__app_parser___spec__3(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1(obj*);
obj* l_string_trim(obj*);
obj* l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27;
obj* l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_binders_parser_lean_parser_has__view;
obj* l_lean_parser_term_assume__binders_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_simple__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_explicit_has__view_x_27___lambda__2(obj*);
extern obj* l_lean_parser_combinators_many___rarg___closed__1;
extern obj* l_lean_parser_curr__lbp___rarg___lambda__1___closed__1;
obj* l_lean_parser_term_binders_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_projection__spec_has__view_x_27;
obj* l_lean_parser_term_have__from_has__view;
obj* l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1(obj*);
obj* l___private_4028176591__leading(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_app_parser___closed__1;
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__2___rarg(obj*, obj*);
obj* l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser___spec__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_show_has__view;
obj* l_lean_parser_term_binder__default_parser___closed__1;
extern obj* l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__1;
obj* l_lean_parser_combinators_node___at_lean_parser_detail__ident__part_parser___spec__8(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_from_parser___closed__1;
extern obj* l_lean_parser_rec__t_run__parsec___rarg___lambda__1___closed__1;
obj* l_lean_parser_term_anonymous__inaccessible_has__view;
obj* l_lean_parser_term_bracketed__binders;
obj* l_lean_parser_term_struct__inst__source_has__view;
obj* l_lean_parser_combinators_any__of___at___private_1752552305__trailing___spec__10(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_explicit_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_arrow_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2___closed__1;
obj* l_lean_parser_monad__parsec_longest__match___at___private_4028176591__leading___spec__8(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_paren_parser_lean_parser_has__view;
obj* l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_binder__default__val;
obj* l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__2;
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__3___rarg(obj*, obj*);
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_term_binder_parser_lean_parser_has__view;
obj* l_lean_parser_term_match_has__view_x_27;
obj* l_lean_parser_term_binder__content_has__view_x_27;
obj* l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_get__leading(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_ident__univ__spec_has__view_x_27;
extern obj* l_lean_parser_indexed___rarg___lambda__1___closed__1;
obj* l_lean_parser_term_app_has__view;
obj* l___private_580269747__str__aux___main(obj*, obj*, obj*);
obj* l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_list_cons_tokens___rarg(obj*, obj*);
obj* l_lean_parser_term_explicit__modifier;
obj* l_lean_parser_syntax_as__node___main(obj*);
obj* l_lean_parser_term_if_has__view_x_27___lambda__1(obj*);
extern obj* l_lean_parser_basic__parser__m_alternative;
obj* l_lean_parser_term_paren__content;
obj* l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_trie_match__prefix___rarg(obj*, obj*);
obj* l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
obj* l___private_1752552305__trailing(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_paren_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__2(obj*);
obj* l___private_4028586963__sep__by__aux___main___at_lean_parser_term_paren_parser___spec__2(obj*, obj*, unsigned char, unsigned char, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
extern obj* l_lean_parser_basic__parser__m_monad__except;
obj* l_list_map___main___at_lean_parser_term_tuple_has__view_x_27___spec__2(obj*);
obj* l_lean_parser_term_binders__ext_parser_lean_parser_has__view;
obj* l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_inaccessible_parser_lean_parser_has__view;
obj* l_lean_parser_term_lambda_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_opt__ident_has__view_x_27;
obj* l_lean_parser_term_bracketed__binder;
obj* l_lean_parser_term_bracketed__binder_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_struct__inst__field_has__view_x_27;
obj* l_lean_parser_term_struct__inst_parser(obj*, obj*, obj*, obj*, obj*);
extern obj* l_lean_parser_level__parser_run___closed__1;
obj* l_lean_parser_term_if_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_substring_of__string(obj*);
obj* l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_let__lhs__id_has__view_x_27;
obj* l_lean_parser_term_match_has__view;
obj* l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__view;
obj* l_lean_parser_term_opt__ident_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binders_has__view_x_27___lambda__1(obj*);
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__2(obj*);
obj* l_lean_parser_term_assume_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_struct__inst__item_has__view;
obj* l_lean_parser_term_hole_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_binders_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_implicit__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_pi_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens;
obj* l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___closed__1;
obj* l_lean_parser_term_lambda_has__view;
obj* l_lean_parser_term_struct__inst_parser___lambda__2(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_parsec__t_lookahead___at___private_4028176591__leading___spec__9(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_lambda_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_if_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binder__default_has__view_x_27;
obj* l_lean_parser_term_paren_has__view_x_27;
obj* l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_have__proof;
extern obj* l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
obj* l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_simple__implicit__binder_has__view_x_27;
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_lambda_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_struct__inst__type;
obj* l_lean_parser_term_tuple_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_combinators_seq__right_view___rarg(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_sort__app_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_explicit_parser___closed__1;
obj* l_lean_parser_term_struct__inst_has__view_x_27;
obj* l_lean_parser_ident__univ__spec_parser_lean_parser_has__view;
obj* l_lean_parser_term_arrow;
obj* l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_let_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_monad__parsec_error___at_lean_parser_number_x_27___spec__12___rarg(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_simple__inst__implicit__binder;
obj* l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_match_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_inaccessible_has__view;
obj* l_lean_parser_term_binder__default_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_app_parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_struct__inst_parser___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_binder__content_has__view;
extern obj* l_lean_parser_number_has__view_x_27___lambda__1___closed__6;
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__2___rarg(obj*, obj*);
obj* l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_typed_has__view_x_27___lambda__2(obj*);
extern obj* l_lean_parser_command_notation__like_has__view;
obj* l_lean_parser_term_anonymous__inaccessible_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_type__spec_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__2(obj*);
obj* l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_indexed___at___private_1752552305__trailing___spec__1(obj*);
obj* l_lean_parser_term_explicit__binder;
obj* l_lean_parser_term_struct__inst__with_has__view;
obj* l_option_map___rarg(obj*, obj*);
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__2(obj*);
obj* l_lean_parser_term_have;
extern obj* l_lean_parser_trailing__term__parser__m_monad__except;
obj* l_lean_parser_ident__univs_parser_lean_parser_has__tokens;
obj* l_option_get___main___at_lean_parser_run___spec__2(obj*);
obj* l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_bracketed__binder_parser___closed__1;
obj* l_lean_parser_term_show_parser_lean_parser_has__view;
obj* l_lean_parser_term_arrow_parser_lean_parser_has__view;
obj* l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_opt__type_parser_lean_parser_has__view;
obj* l_lean_parser_term_arrow_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_inaccessible_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder_has__view_x_27___lambda__2(obj*);
obj* l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__4(obj*);
obj* l_lean_parser_combinators_sep__by_tokens___rarg(obj*, obj*);
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_anonymous__constructor_parser___closed__1;
obj* l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__view;
obj* l_lean_parser_term_opt__ident_parser___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_combinators_optional_view___rarg(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binders__types_has__view_x_27;
obj* l_lean_parser_term_opt__ident_has__view;
obj* l_lean_parser_term_sort_has__view_x_27___lambda__1(obj*);
extern obj* l_mjoin___rarg___closed__1;
obj* l_lean_parser_term_binder__ident_parser_lean_parser_has__view;
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_string__lit_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__2;
obj* l_lean_parser_term_subtype;
obj* l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_show_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_combinators_longest__match___at___private_1752552305__trailing___spec__6(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_simple__binder_view_to__binder__info___main(obj*);
obj* l_lean_parser_term_have__from;
obj* l_lean_parser_term_show_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_inst__implicit__binder__content;
obj* l_lean_parser_term_binders__types_has__view;
obj* l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_have__proof_has__view_x_27___lambda__2(obj*);
obj* l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__2___rarg(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4(obj*);
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__6;
obj* l_lean_parser_term_projection_parser___closed__1;
obj* l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_binder__default__tac_has__view;
obj* l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_arrow_parser___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_parsec__t_orelse__mk__res___rarg(obj*, obj*);
obj* l_lean_parser_term_assume_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_show;
obj* l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers___spec__1___rarg___closed__1;
obj* l_lean_parser_term_have__proof_has__view_x_27;
obj* l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_sorry_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_arrow_has__view;
obj* l_lean_parser_term_assume_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_have__term_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_binder_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_have__term_has__view_x_27;
obj* l_lean_parser_term_paren_parser_lean_parser_has__tokens;
obj* l_id___rarg(obj*);
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__4___rarg(obj*, obj*);
obj* l_lean_parser_term_binder;
obj* l_lean_parser_term_from_has__view;
extern obj* l_lean_parser_string__lit;
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_hole_has__view_x_27;
obj* l_lean_parser_term_from_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_strict__implicit__binder_has__view;
obj* l_lean_parser_ident__univs_parser_lean_parser_has__view;
obj* l_lean_parser_term_struct__inst_has__view;
obj* l_lean_parser_term_lambda;
obj* l_lean_parser_term_let__lhs_has__view_x_27;
obj* l_lean_parser_term_sorry_parser___closed__1;
obj* l_lean_parser_term_type__spec_parser___closed__1;
obj* l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__view___spec__1(obj*, obj*);
obj* l___private_1752552305__trailing___closed__1;
obj* l_lean_parser_term_inst__implicit__binder_has__view;
obj* l_lean_parser_command_notation__like_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__1___rarg(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_sort__app_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_binders__ext_has__view_x_27;
obj* l_lean_parser_term_sort_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_combinators_any__of___at_lean_parser_command_notation__spec_fold__action_parser___spec__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_sort__app_parser___closed__1;
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__5___rarg(obj*, obj*);
obj* l_lean_parser_term_pi_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_paren__content_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_token__map_of__list___main___rarg(obj*);
obj* l_lean_parser_term_binder__default__tac_has__view_x_27;
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
extern obj* l_lean_parser_trailing__term__parser__m_monad;
obj* l_lean_parser_term_binder__default__val_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_binder__default__tac;
obj* l_lean_parser_term_if_has__view_x_27___lambda__2(obj*);
obj* l_list_map___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__2(obj*);
obj* l_lean_parser_term_subtype_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1(obj*);
extern obj* l___private_1297690757__many1__aux___main___rarg___closed__1;
obj* l_lean_parser_monad__parsec_str__core___at_lean_parser_term_projection_parser___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_app_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_subtype_parser_lean_parser_has__tokens;
obj* l_lean_parser_ident__univs_has__view_x_27;
obj* l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_assume;
obj* l_lean_parser_term_binders__ext;
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27;
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_arrow_has__view_x_27;
obj* l_lean_parser_rec__t_run___at_lean_parser_term__parser_run___spec__7(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_paren;
obj* l_lean_parser_term_projection__spec;
obj* l_lean_parser_term_implicit__binder;
obj* l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__1(obj*);
obj* l_lean_parser_term_pi_has__view;
obj* l_lean_parser_term_explicit_has__view;
obj* l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_simple__binder;
obj* l_lean_parser_term_binder__content_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_inaccessible_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
obj* l_reader__t_orelse___at___private_1752552305__trailing___spec__11___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_ident__univs_has__view;
obj* l_lean_parser_parsec__t_lookahead___at___private_1752552305__trailing___spec__8(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__5(obj*);
obj* l_lean_parser_term_binder__default_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_have_parser___closed__1;
obj* l_lean_parser_term_explicit__modifier_has__view;
obj* l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_if_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_match_has__view_x_27___lambda__1(obj*);
extern obj* l_lean_parser_level__parser_run___closed__2;
obj* l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_builtin__leading__parsers;
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_sorry_has__view;
obj* l_lean_parser_term_explicit__binder_has__view_x_27;
obj* l_lean_parser_term_paren_has__view;
obj* l_lean_parser_term_binder_parser___closed__1;
obj* l_lean_parser_term_arrow_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_hole;
obj* l_lean_parser_monad__parsec_error___at___private_4089500695__finish__comment__block__aux___main___spec__1___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__5;
obj* l_lean_parser_term_paren__content_has__view;
obj* l_lean_parser_term_binders_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_sort__app_parser___lambda__1(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_opt__type_parser___closed__1;
obj* l_option_get__or__else___main___rarg(obj*, obj*);
obj* l_lean_parser_term_projection_parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_if_has__view_x_27;
obj* l_lean_parser_unicode__symbol_lean_parser_has__tokens___rarg(obj*, obj*, obj*);
obj* l_lean_parser_term_projection_has__view_x_27;
obj* l_lean_parser_term_let_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__2;
obj* l_lean_parser_term_have_has__view;
obj* l_lean_parser_term_explicit_has__view_x_27;
obj* l_lean_parser_ident__univ__spec_has__view;
obj* l_lean_parser_term_simple__binder_has__view_x_27;
obj* l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_mixed__binder_has__view_x_27;
obj* l_lean_parser_term_inst__implicit__binder__content_has__view_x_27;
obj* l_lean_parser_term_have__from_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_typed;
obj* l_lean_parser_term_sorry_parser_lean_parser_has__tokens;
obj* l_lean_parser_indexed___at___private_4028176591__leading___spec__1(obj*);
obj* l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27___lambda__1(obj*);
obj* l_list_map___main___at_lean_parser_term_match__equation_has__view_x_27___spec__1(obj*);
obj* l_lean_parser_term_tuple;
obj* l_lean_parser_term_pi_parser___closed__1;
obj* l_lean_parser_term_let__lhs_has__view;
obj* l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_let__lhs_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__2;
obj* l_list_map___main___at_lean_parser_term_bracketed__binder_parser___spec__2___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_parsec__t_try__mk__res___rarg(obj*);
obj* l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_explicit_has__view_x_27___lambda__1(obj*);
obj* l_reader__t_lift___at_lean_parser_term_sort__app_parser___spec__1___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_anonymous__constructor;
obj* l_lean_parser_term_binders_has__view;
obj* l_list_foldr___main___at___private_1752552305__trailing___spec__13(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_from_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_combinators_try_view___rarg(obj*, obj*, obj*, obj*);
obj* l_lean_parser_combinators_any__of___at_lean_parser_unicode__symbol___spec__2(obj*, obj*, obj*, obj*);
obj* l_list_mfoldr___main___at___private_1752552305__trailing___spec__9(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_app;
obj* l_lean_parser_term_builtin__trailing__parsers;
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_struct__inst__item;
obj* l_lean_parser_term_paren_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_if_has__view;
obj* l_lean_parser_term_explicit__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__5;
extern obj* l_lean_parser_term__parser__m_monad__except;
obj* l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_sort__app_parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser___spec__5___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_subtype_has__view;
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__5___rarg(obj*, obj*);
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_number_parser___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(obj*);
obj* l_lean_parser_term_app_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_assume_has__view_x_27;
obj* l_lean_parser_term_show_has__view_x_27___lambda__1(obj*);
extern obj* l_lean_name_to__string___closed__1;
obj* l_lean_parser_term_app_parser_lean_parser_has__tokens;
extern obj* l_lean_parser_level_trailing_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_typed_has__view_x_27;
obj* l_lean_parser_term_assume__anonymous;
obj* l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_from;
obj* l_lean_parser_term_bracketed__binders_parser___closed__1;
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_sort__app_parser_lean_parser_has__view;
obj* l_lean_parser_term_have__proof_has__view_x_27___lambda__1(obj*);
obj* l_list_enum__from___main___rarg(obj*, obj*);
obj* l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_arrow_parser___closed__1;
obj* l_lean_parser_combinators_many1___at_lean_parser_command_notation__spec_parser___spec__2(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_inaccessible_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_type__spec;
obj* l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_try__view___at_lean_parser_number_parser___spec__1(obj*);
obj* l_lean_parser_term_explicit__binder__content_has__view;
obj* l_lean_parser_term_show_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_sort__app_has__view;
obj* l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__3___rarg(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder__ident;
obj* l_lean_parser_term_inaccessible_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_number_parser___at_lean_parser_term_projection_parser___spec__3___rarg(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_have_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_strict__implicit__binder_has__view_x_27;
obj* l_lean_parser_term_binder_has__view_x_27;
obj* l_lean_parser_term_binder__ident_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_monad__parsec_observing___at_lean_parser_peek__token___spec__2(obj*, obj*, obj*);
obj* l_lean_parser_ident__univs_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_ident__univs_parser___closed__1;
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__6___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_assume_has__view;
extern obj* l_lean_parser_command_notation__like_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_bracketed__binder_has__view;
obj* l_lean_parser_term_if;
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_sort__app_has__view_x_27;
obj* l_lean_parser_term_if_parser_lean_parser_has__view;
obj* l_lean_parser_term_binder__default_parser_lean_parser_has__view;
obj* l_list_mfoldr___main___at_lean_parser_term_bracketed__binder_parser___spec__5(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_reader__t_lift___at_lean_parser_term_sort__app_parser___spec__1(obj*);
obj* l___private_3693562977__run__aux___main___rarg(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_binders__remainder_has__view;
obj* l_lean_parser_term_inst__implicit__named__binder_has__view_x_27;
obj* l_lean_parser_term_let_parser___closed__1;
obj* l_lean_parser_term_binders_has__view_x_27;
obj* l_lean_parser_term_let__lhs__id;
obj* l_lean_parser_term_paren__special_has__view;
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_sort_parser_lean_parser_has__view;
obj* l_lean_parser_term_from_parser_lean_parser_has__view;
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___lambda__1(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_simple__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_sort_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_parsec__t_lookahead___at_lean_parser_term_bracketed__binder_parser___spec__4(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_bracketed__binders_has__view_x_27;
obj* l_lean_parser_term_hole_parser___closed__1;
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__5;
obj* l_lean_parser_term_assume__anonymous_has__view_x_27;
obj* l_lean_parser_token__map__cons_tokens___rarg(obj*, obj*);
unsigned char l_string_is__empty(obj*);
obj* l_lean_parser_ident__univ__spec;
obj* l_lean_parser_term_binder__ident_has__view_x_27;
obj* l_lean_parser_term_binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_number_parser___at_lean_parser_term_projection_parser___spec__3(obj*, obj*);
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_ident__univs_parser___lambda__1(obj*, obj*, obj*, obj*);
obj* l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_pi_parser_lean_parser_has__view;
obj* l_lean_parser_term_mixed__binder_has__view;
obj* l_lean_parser_term_have__from_has__view_x_27___lambda__2(obj*);
extern obj* l_lean_parser_number_parser___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1___rarg___closed__1;
extern obj* l_lean_parser_finish__comment__block___closed__2;
obj* l_lean_parser_term_assume_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_match__equation_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_paren__special_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_have__term_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_inst__implicit__anonymous__binder;
obj* l_lean_parser_term_bracketed__binder_has__view_x_27;
obj* l_lean_parser_term_subtype_parser_lean_parser_has__view;
obj* l_lean_parser_level_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_tuple_has__view_x_27___lambda__1(obj*);
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__3___rarg(obj*, obj*);
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__4(obj*);
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_binder__default_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_binder__content;
obj* l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_anonymous__inaccessible_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_struct__inst_parser___closed__1;
obj* l_list_map___main___at_lean_parser_term_bracketed__binder_parser___spec__2(obj*);
extern obj* l_lean_parser_term__parser__m_lean_parser_monad__parsec;
obj* l_lean_parser_term_simple__strict__implicit__binder;
extern obj* l_lean_parser_level_leading_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_simple__binder_view_to__binder__info(obj*);
obj* l_lean_parser_term_have__term_has__view;
obj* l_lean_parser_term_binder__ident_has__view;
obj* l_lean_parser_term_simple__explicit__binder_has__view_x_27;
obj* l_lean_parser_term_paren__content_has__view_x_27;
obj* l_lean_parser_term_arrow_parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_subtype_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_lambda_parser_lean_parser_has__view;
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_tokens___rarg(obj*);
obj* l_lean_parser_term_paren__special;
obj* l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser___spec__1(obj*, obj*, unsigned char, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_struct__inst_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_explicit;
obj* l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers___spec__1___rarg(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_subtype_has__view_x_27;
obj* l_lean_parser_term_binders__ext_has__view;
obj* l_list_reverse___rarg(obj*);
obj* l_lean_parser_term_simple__binder_has__view;
obj* l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_token(obj*, obj*, obj*);
obj* l_lean_parser_term_binder__default_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_struct__inst_parser_lean_parser_has__view;
obj* l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_have_parser_lean_parser_has__view;
obj* l_lean_parser_syntax_mk__node(obj*, obj*);
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2(obj*);
obj* l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(obj*, obj*);
obj* l_lean_parser_term_explicit__modifier_has__view_x_27;
extern obj* l_string_join___closed__1;
obj* l_lean_parser_combinators_choice__aux___main___at_lean_parser_term_projection_parser___spec__4(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_opt__type_view__default;
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_type__spec_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_app_parser___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__2(obj*);
obj* l_lean_parser_term_binder__default__val_has__view_x_27;
obj* l_lean_parser_term_match_parser_lean_parser_has__view;
obj* l_lean_parser_term_binder__content_parser___closed__1;
obj* l_lean_parser_combinators_many1___at_lean_parser_ident__univ__spec_parser___spec__1(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_match__equation_has__view;
extern obj* l_lean_parser_number_has__view_x_27___lambda__2___closed__1;
obj* l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27;
obj* l_lean_parser_parsec__t_merge___rarg(obj*, obj*);
obj* l_lean_parser_term_builtin__trailing__parsers_lean_parser_has__tokens;
obj* l_lean_parser_term_subtype_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_inst__implicit__anonymous__binder_has__view;
obj* l_lean_parser_combinators_longest__choice___at_lean_parser_term_bracketed__binder_parser___spec__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binders__ext_parser_lean_parser_has__tokens;
obj* l_lean_parser_try__view___at_lean_parser_string__lit_parser___spec__1(obj*);
obj* l_lean_parser_term_sorry;
obj* l_lean_parser_term_arrow_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_match_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_let__lhs;
obj* l_lean_parser_term_simple__explicit__binder;
obj* l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__2;
extern obj* l_lean_parser_term__parser__m_alternative;
obj* l_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_hole_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_lean_parser_has__view;
obj* l_lean_parser_term_projection_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__6(obj*);
obj* l_lean_parser_term_simple__binder_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_simple__binder_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_mk__raw__res(obj*, obj*);
obj* l_lean_parser_term_lambda_parser___closed__1;
obj* l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser___spec__2(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_match__equation_has__view_x_27;
obj* l_lean_parser_term_anonymous__constructor_has__view_x_27;
obj* l_lean_parser_term_match__equation;
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__2(obj*);
obj* l_list_foldr___main___at___private_4028176591__leading___spec__6(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_inaccessible_has__view_x_27;
obj* l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_parsec__t_failure___at_lean_parser_token___spec__4___rarg(obj*, obj*);
obj* l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(obj*);
obj* l_lean_parser_term_sort_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__2;
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__3(obj*);
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__4(obj*);
obj* l_lean_parser_term_assume_parser_lean_parser_has__view;
obj* l_lean_parser_term_pi_has__view_x_27;
obj* l_lean_parser_term_projection_has__view;
obj* l_lean_parser_term_projection_parser___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_assume_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_binder_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__2;
obj* l_reader__t_orelse___at_lean_parser_command_notation__spec_fold__action_parser___spec__2___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_list_join___main___rarg(obj*);
obj* l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser___spec__5(obj*);
obj* l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_ident_parser___at_lean_parser_term_projection_parser___spec__2(obj*, obj*);
obj* l_lean_parser_term_let_has__view;
obj* l_lean_parser_indexed___at___private_1752552305__trailing___spec__1___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
extern obj* l_lean_parser_trailing__term__parser__m_lean_parser_monad__parsec;
obj* l_lean_parser_term_simple__binder_parser___closed__1;
extern obj* l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_opt__type_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_let_parser_lean_parser_has__view;
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__4___rarg(obj*, obj*);
obj* l_lean_parser_term_simple__binder_parser_lean_parser_has__view;
obj* l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__2(obj*);
extern obj* l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_typed_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_pratt__parser___at_lean_parser_term__parser_run___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__1(obj*);
obj* l_list_append___main___rarg(obj*, obj*);
obj* l_lean_parser_term_from_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_pratt__parser___at_lean_parser_level__parser_run___spec__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__5(obj*);
obj* l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_sorry_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_inst__implicit__named__binder;
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
obj* l_lean_parser_term_type__spec_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_assume__binders_has__view_x_27;
obj* l_lean_parser_term_bracketed__binders_parser_lean_parser_has__view;
obj* l_lean_parser_term_inst__implicit__binder;
obj* l_lean_parser_term_opt__ident_parser_lean_parser_has__view;
obj* l_lean_parser_term_hole_has__view;
obj* l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_opt__ident;
obj* l_lean_parser_symbol__core___at_lean_parser_unicode__symbol___spec__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_curr__lbp___at_lean_parser_term__parser_run___spec__4(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_mk__app(obj*, obj*);
obj* l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_unicode__symbol___at_lean_parser_term_arrow_parser___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_match_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1___closed__1;
extern obj* l_list_mfoldr___main___at_lean_parser_monad__parsec_longest__match___spec__2___rarg___closed__1;
obj* l_lean_parser_term_type__spec_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_projection_parser_lean_parser_has__view;
obj* l_lean_parser_term_lambda_has__view_x_27;
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4;
obj* l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_match_has__view_x_27___spec__2(obj*);
extern obj* l_lean_parser_combinators_any__of___rarg___closed__1;
obj* l_lean_parser_term_have_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_binders__types_has__view_x_27___lambda__1(obj*);
obj* l_list_map___main___rarg(obj*, obj*);
obj* l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_binder__ident_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binder__default__val_has__view;
obj* l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_let__lhs__id_has__view;
obj* l_lean_parser_term_struct__inst__field_has__view;
obj* l_lean_parser_term_match_parser___closed__1;
obj* l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__3(obj*);
obj* l___private_1055111885__trailing__loop___main___at_lean_parser_term__parser_run___spec__2(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_match_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_if_parser___closed__1;
obj* l_lean_parser_term_strict__implicit__binder;
extern obj* l_lean_parser_detail__ident_has__view_x_27___lambda__2___closed__1;
obj* l_lean_parser_term_paren_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_app_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_paren__special_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_struct__inst__type_has__view_x_27;
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__3(obj*);
obj* l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_implicit__binder_has__view;
obj* l_lean_parser_term_bracketed__binders_has__view;
extern obj* l_lean_parser_level_parser_lean_parser_has__tokens___closed__1;
obj* l_lean_parser_term_have__proof_has__view;
obj* l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_anonymous__constructor_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_simple__explicit__binder_has__view;
obj* l_lean_parser_term_have__term;
obj* l_lean_parser_term_simple__strict__implicit__binder_has__view;
obj* l_lean_parser_term_subtype_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_simple__inst__implicit__binder_has__view;
extern obj* l_lean_parser_number_has__view_x_27___lambda__2___closed__2;
obj* l_lean_parser_term_explicit__binder_has__view;
obj* l_lean_parser_term_projection_tokens;
obj* l_lean_parser_term_struct__inst;
obj* l_lean_parser_term_show_has__view_x_27;
obj* l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_mixed__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_with__trailing___rarg___lambda__1(obj*, obj*);
obj* l_lean_parser_term_tuple_has__view_x_27;
obj* l_lean_parser_term_pi_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1(obj*);
extern obj* l_lean_parser_number;
obj* l_lean_parser_term_have_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_explicit__binder__content_has__view_x_27;
obj* l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_level__parser_run(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__2(obj*);
extern obj* l_lean_parser_match__token___closed__2;
obj* l_lean_parser_indexed___at___private_4028176591__leading___spec__1___rarg(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_inaccessible_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_sort;
obj* l_lean_parser_term_projection__spec_has__view;
obj* l_lean_parser_term_struct__inst__source;
obj* l___private_1297690757__many1__aux___main___at_lean_parser_ident__univ__spec_parser___spec__2(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_ident__univ__spec_parser(obj*, obj*, obj*);
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_show_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_let;
obj* l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_explicit__binder__content;
obj* l_lean_parser_term_inst__implicit__named__binder_has__view;
obj* l_lean_parser_term_hole_parser_lean_parser_has__view;
obj* l_lean_parser_term_hole_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binders__types;
obj* l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_inst__implicit__binder_has__view_x_27;
obj* l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_tuple_has__view;
obj* l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_binders__ext_parser___closed__1;
obj* l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_struct__inst__with;
obj* l_lean_parser_term_sort__app;
extern obj* l_lean_parser_max__prec;
obj* l_lean_parser_term_binders_parser___closed__1;
obj* l_lean_parser_term_type__spec_has__view;
obj* l_lean_parser_term_lambda_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_inaccessible;
obj* l_lean_parser_term_lambda_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_sort__app_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_have_has__view_x_27;
obj* l_lean_parser_term_binder__default_has__view;
obj* l_lean_parser_term_app_has__view_x_27;
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_paren__special_has__view_x_27;
extern obj* l_lean_parser_term__parser__m_monad;
obj* l_lean_parser_term_anonymous__inaccessible;
extern obj* l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4___rarg___closed__1;
obj* l_lean_parser_term_assume_parser___closed__1;
obj* l_lean_parser_term_explicit_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_ident__univ__spec_parser___closed__1;
obj* l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__2(obj*);
obj* l___private_3693562977__run__aux___at_lean_parser_term__parser_run___spec__8(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_anonymous__inaccessible_parser___closed__1;
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_ident__univ__spec_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_monad__parsec_error___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__4___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_simple__implicit__binder;
obj* l_lean_parser_term_sort_has__view_x_27;
obj* l_lean_name_has__dec__eq___main(obj*, obj*);
obj* l_lean_parser_term_sorry_parser_lean_parser_has__view;
obj* l_lean_parser_term_binders__types_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_opt__type_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_match_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_struct__inst__item_has__view_x_27;
obj* l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__tokens;
extern obj* l_lean_parser_combinators_choice__aux___main___rarg___closed__1;
obj* l_lean_parser_term_bracketed__binders_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_ident_parser___at_lean_parser_term_projection_parser___spec__2___rarg(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__1;
extern obj* l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
obj* l_lean_parser_term_opt__ident_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_sort__app_parser_lean_parser_has__view___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_have__from_has__view_x_27;
obj* l_lean_parser_pratt__parser___at_lean_parser_term__parser_run___spec__1___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers___spec__1(obj*);
obj* l_lean_parser_term_lean_parser_has__tokens;
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_parsec__t_labels__mk__res___rarg(obj*, obj*);
obj* l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1(obj*);
extern obj* l_lean_parser_curr__lbp___rarg___lambda__3___closed__2;
obj* l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_struct__inst__source_has__view_x_27;
obj* l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_simple__implicit__binder_has__view;
obj* l_lean_parser_term_sorry_has__view_x_27;
obj* l_lean_parser_term_from_has__view_x_27;
obj* l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__2;
obj* l_string_quote(obj*);
obj* l_lean_parser_term_pi_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_dlist_singleton___rarg(obj*, obj*);
obj* l_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens;
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__1;
obj* l_lean_parser_term_let_has__view_x_27;
obj* l_lean_parser_term_binder_has__view;
obj* l_lean_parser_term_binders__remainder;
obj* l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_opt__ident_parser_lean_parser_has__tokens;
extern obj* l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_assume__binders_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__4;
extern obj* l_lean_parser_trailing__term__parser__m_alternative;
obj* l_lean_parser_term_show_parser___closed__1;
obj* _init_l_lean_parser_ident__univ__spec() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("ident_univ_spec");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_ident__univ__spec_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univ__spec_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__2;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
x_35 = lean::box(3);
x_32 = x_1;
x_33 = x_35;
goto lbl_34;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_1, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
lean::dec(x_1);
x_32 = x_38;
x_33 = x_36;
goto lbl_34;
}
lbl_34:
{
obj* x_41; 
x_41 = l_lean_parser_syntax_as__node___main(x_33);
if (lean::obj_tag(x_41) == 0)
{
lean::dec(x_41);
if (lean::obj_tag(x_32) == 0)
{
obj* x_44; obj* x_45; obj* x_47; 
lean::dec(x_32);
x_44 = lean::box(0);
x_45 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_45);
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_20);
lean::cnstr_set(x_47, 1, x_45);
lean::cnstr_set(x_47, 2, x_44);
return x_47;
}
else
{
obj* x_48; 
x_48 = lean::cnstr_get(x_32, 0);
lean::inc(x_48);
lean::dec(x_32);
switch (lean::obj_tag(x_48)) {
case 0:
{
obj* x_51; obj* x_54; obj* x_55; obj* x_57; 
x_51 = lean::cnstr_get(x_48, 0);
lean::inc(x_51);
lean::dec(x_48);
x_54 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_54, 0, x_51);
x_55 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_55);
x_57 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_57, 0, x_20);
lean::cnstr_set(x_57, 1, x_55);
lean::cnstr_set(x_57, 2, x_54);
return x_57;
}
case 1:
{
obj* x_59; obj* x_60; obj* x_62; 
lean::dec(x_48);
x_59 = lean::box(0);
x_60 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_60);
x_62 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_62, 0, x_20);
lean::cnstr_set(x_62, 1, x_60);
lean::cnstr_set(x_62, 2, x_59);
return x_62;
}
case 2:
{
obj* x_64; obj* x_65; obj* x_67; 
lean::dec(x_48);
x_64 = lean::box(0);
x_65 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_65);
x_67 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_67, 0, x_20);
lean::cnstr_set(x_67, 1, x_65);
lean::cnstr_set(x_67, 2, x_64);
return x_67;
}
default:
{
obj* x_69; obj* x_70; obj* x_72; 
lean::dec(x_48);
x_69 = lean::box(0);
x_70 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_70);
x_72 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_72, 0, x_20);
lean::cnstr_set(x_72, 1, x_70);
lean::cnstr_set(x_72, 2, x_69);
return x_72;
}
}
}
}
else
{
obj* x_73; obj* x_75; obj* x_76; obj* x_79; 
x_73 = lean::cnstr_get(x_41, 0);
lean::inc(x_73);
if (lean::is_shared(x_41)) {
 lean::dec(x_41);
 x_75 = lean::box(0);
} else {
 lean::cnstr_release(x_41, 0);
 x_75 = x_41;
}
x_76 = lean::cnstr_get(x_73, 1);
lean::inc(x_76);
lean::dec(x_73);
x_79 = l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__1(x_76);
if (lean::obj_tag(x_32) == 0)
{
obj* x_82; obj* x_83; 
lean::dec(x_75);
lean::dec(x_32);
x_82 = lean::box(0);
x_83 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_83, 0, x_20);
lean::cnstr_set(x_83, 1, x_79);
lean::cnstr_set(x_83, 2, x_82);
return x_83;
}
else
{
obj* x_84; 
x_84 = lean::cnstr_get(x_32, 0);
lean::inc(x_84);
lean::dec(x_32);
switch (lean::obj_tag(x_84)) {
case 0:
{
obj* x_87; obj* x_90; obj* x_91; 
x_87 = lean::cnstr_get(x_84, 0);
lean::inc(x_87);
lean::dec(x_84);
if (lean::is_scalar(x_75)) {
 x_90 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_90 = x_75;
}
lean::cnstr_set(x_90, 0, x_87);
x_91 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_91, 0, x_20);
lean::cnstr_set(x_91, 1, x_79);
lean::cnstr_set(x_91, 2, x_90);
return x_91;
}
case 1:
{
obj* x_94; obj* x_95; 
lean::dec(x_84);
lean::dec(x_75);
x_94 = lean::box(0);
x_95 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_95, 0, x_20);
lean::cnstr_set(x_95, 1, x_79);
lean::cnstr_set(x_95, 2, x_94);
return x_95;
}
case 2:
{
obj* x_98; obj* x_99; 
lean::dec(x_84);
lean::dec(x_75);
x_98 = lean::box(0);
x_99 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_99, 0, x_20);
lean::cnstr_set(x_99, 1, x_79);
lean::cnstr_set(x_99, 2, x_98);
return x_99;
}
default:
{
obj* x_102; obj* x_103; 
lean::dec(x_84);
lean::dec(x_75);
x_102 = lean::box(0);
x_103 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_103, 0, x_20);
lean::cnstr_set(x_103, 1, x_79);
lean::cnstr_set(x_103, 2, x_102);
return x_103;
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
return x_2;
}
}
obj* _init_l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_19:
{
obj* x_26; 
x_26 = l_lean_parser_syntax_as__node___main(x_18);
if (lean::obj_tag(x_26) == 0)
{
lean::dec(x_26);
if (lean::obj_tag(x_17) == 0)
{
obj* x_29; obj* x_30; obj* x_32; 
lean::dec(x_17);
x_29 = lean::box(0);
x_30 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_30);
x_32 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_32, 0, x_5);
lean::cnstr_set(x_32, 1, x_30);
lean::cnstr_set(x_32, 2, x_29);
return x_32;
}
else
{
obj* x_33; 
x_33 = lean::cnstr_get(x_17, 0);
lean::inc(x_33);
lean::dec(x_17);
switch (lean::obj_tag(x_33)) {
case 0:
{
obj* x_36; obj* x_39; obj* x_40; obj* x_42; 
x_36 = lean::cnstr_get(x_33, 0);
lean::inc(x_36);
lean::dec(x_33);
x_39 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_39, 0, x_36);
x_40 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_40);
x_42 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_42, 0, x_5);
lean::cnstr_set(x_42, 1, x_40);
lean::cnstr_set(x_42, 2, x_39);
return x_42;
}
case 1:
{
obj* x_44; obj* x_45; obj* x_47; 
lean::dec(x_33);
x_44 = lean::box(0);
x_45 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_45);
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_5);
lean::cnstr_set(x_47, 1, x_45);
lean::cnstr_set(x_47, 2, x_44);
return x_47;
}
case 2:
{
obj* x_49; obj* x_50; obj* x_52; 
lean::dec(x_33);
x_49 = lean::box(0);
x_50 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_50);
x_52 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_52, 0, x_5);
lean::cnstr_set(x_52, 1, x_50);
lean::cnstr_set(x_52, 2, x_49);
return x_52;
}
default:
{
obj* x_54; obj* x_55; obj* x_57; 
lean::dec(x_33);
x_54 = lean::box(0);
x_55 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_55);
x_57 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_57, 0, x_5);
lean::cnstr_set(x_57, 1, x_55);
lean::cnstr_set(x_57, 2, x_54);
return x_57;
}
}
}
}
else
{
obj* x_58; obj* x_60; obj* x_61; obj* x_64; 
x_58 = lean::cnstr_get(x_26, 0);
lean::inc(x_58);
if (lean::is_shared(x_26)) {
 lean::dec(x_26);
 x_60 = lean::box(0);
} else {
 lean::cnstr_release(x_26, 0);
 x_60 = x_26;
}
x_61 = lean::cnstr_get(x_58, 1);
lean::inc(x_61);
lean::dec(x_58);
x_64 = l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__1(x_61);
if (lean::obj_tag(x_17) == 0)
{
obj* x_67; obj* x_68; 
lean::dec(x_60);
lean::dec(x_17);
x_67 = lean::box(0);
x_68 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_68, 0, x_5);
lean::cnstr_set(x_68, 1, x_64);
lean::cnstr_set(x_68, 2, x_67);
return x_68;
}
else
{
obj* x_69; 
x_69 = lean::cnstr_get(x_17, 0);
lean::inc(x_69);
lean::dec(x_17);
switch (lean::obj_tag(x_69)) {
case 0:
{
obj* x_72; obj* x_75; obj* x_76; 
x_72 = lean::cnstr_get(x_69, 0);
lean::inc(x_72);
lean::dec(x_69);
if (lean::is_scalar(x_60)) {
 x_75 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_75 = x_60;
}
lean::cnstr_set(x_75, 0, x_72);
x_76 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_76, 0, x_5);
lean::cnstr_set(x_76, 1, x_64);
lean::cnstr_set(x_76, 2, x_75);
return x_76;
}
case 1:
{
obj* x_79; obj* x_80; 
lean::dec(x_69);
lean::dec(x_60);
x_79 = lean::box(0);
x_80 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_80, 0, x_5);
lean::cnstr_set(x_80, 1, x_64);
lean::cnstr_set(x_80, 2, x_79);
return x_80;
}
case 2:
{
obj* x_83; obj* x_84; 
lean::dec(x_69);
lean::dec(x_60);
x_83 = lean::box(0);
x_84 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_84, 0, x_5);
lean::cnstr_set(x_84, 1, x_64);
lean::cnstr_set(x_84, 2, x_83);
return x_84;
}
default:
{
obj* x_87; obj* x_88; 
lean::dec(x_69);
lean::dec(x_60);
x_87 = lean::box(0);
x_88 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_88, 0, x_5);
lean::cnstr_set(x_88, 1, x_64);
lean::cnstr_set(x_88, 2, x_87);
return x_88;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_ident__univ__spec_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_27; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_8);
x_10 = l_option_map___rarg(x_8, x_1);
x_11 = lean::box(3);
lean::inc(x_11);
x_13 = l_option_get__or__else___main___rarg(x_10, x_11);
x_14 = l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__2(x_3);
x_15 = l_lean_parser_no__kind;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
lean::inc(x_8);
x_19 = l_option_map___rarg(x_8, x_5);
x_20 = l_option_get__or__else___main___rarg(x_19, x_11);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_17);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_13);
lean::cnstr_set(x_24, 1, x_23);
x_25 = l_lean_parser_ident__univ__spec;
lean::inc(x_25);
x_27 = l_lean_parser_syntax_mk__node(x_25, x_24);
return x_27;
}
}
obj* l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_8; obj* x_9; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_7 = x_0;
}
x_8 = l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__1(x_5);
if (lean::is_scalar(x_7)) {
 x_9 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_9 = x_7;
}
lean::cnstr_set(x_9, 0, x_3);
lean::cnstr_set(x_9, 1, x_8);
return x_9;
}
}
}
obj* l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__2(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_8; obj* x_9; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_7 = x_0;
}
x_8 = l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__2(x_5);
if (lean::is_scalar(x_7)) {
 x_9 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_9 = x_7;
}
lean::cnstr_set(x_9, 0, x_3);
lean::cnstr_set(x_9, 1, x_8);
return x_9;
}
}
}
obj* _init_l_lean_parser_ident__univ__spec_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_ident__univ__spec_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_ident__univ__spec_parser(obj* x_0, obj* x_1, obj* x_2) {
_start:
{
obj* x_3; obj* x_4; obj* x_7; 
x_3 = l_lean_parser_ident__univ__spec;
x_4 = l_lean_parser_ident__univ__spec_parser___closed__1;
lean::inc(x_4);
lean::inc(x_3);
x_7 = l_lean_parser_combinators_node___at_lean_parser_detail__ident__part_parser___spec__8(x_3, x_4, x_0, x_1, x_2);
return x_7;
}
}
obj* _init_l_lean_parser_ident__univ__spec_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_0 = lean::mk_string(".{");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol___spec__1), 6, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
lean::inc(x_4);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_level_parser), 5, 1);
lean::closure_set(x_8, 0, x_4);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_level__parser_run), 4, 1);
lean::closure_set(x_9, 0, x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many1___at_lean_parser_ident__univ__spec_parser___spec__1), 4, 1);
lean::closure_set(x_10, 0, x_9);
x_11 = lean::mk_string("}");
x_12 = l_string_trim(x_11);
lean::inc(x_12);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_14, 0, x_12);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol___spec__1), 6, 3);
lean::closure_set(x_15, 0, x_12);
lean::closure_set(x_15, 1, x_4);
lean::closure_set(x_15, 2, x_14);
x_16 = lean::box(0);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_10);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_6);
lean::cnstr_set(x_19, 1, x_18);
return x_19;
}
}
obj* l___private_1297690757__many1__aux___main___at_lean_parser_ident__univ__spec_parser___spec__2(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; 
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::nat_dec_eq(x_2, x_6);
lean::dec(x_6);
if (lean::obj_tag(x_7) == 0)
{
obj* x_10; obj* x_11; obj* x_14; obj* x_15; obj* x_19; obj* x_20; obj* x_22; 
lean::dec(x_7);
x_10 = lean::mk_nat_obj(1u);
x_11 = lean::nat_sub(x_2, x_10);
lean::dec(x_10);
lean::dec(x_2);
lean::inc(x_3);
lean::inc(x_0);
x_19 = lean::apply_3(x_0, x_3, x_4, x_5);
x_20 = lean::cnstr_get(x_19, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_19, 1);
lean::inc(x_22);
lean::dec(x_19);
if (lean::obj_tag(x_20) == 0)
{
x_14 = x_20;
x_15 = x_22;
goto lbl_16;
}
else
{
obj* x_25; unsigned char x_27; obj* x_28; obj* x_29; obj* x_31; obj* x_33; obj* x_35; obj* x_38; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_46; obj* x_47; obj* x_48; 
x_25 = lean::cnstr_get(x_20, 0);
lean::inc(x_25);
x_27 = lean::cnstr_get_scalar<unsigned char>(x_20, sizeof(void*)*1);
if (lean::is_shared(x_20)) {
 lean::dec(x_20);
 x_28 = lean::box(0);
} else {
 lean::cnstr_release(x_20, 0);
 x_28 = x_20;
}
x_29 = lean::cnstr_get(x_25, 0);
lean::inc(x_29);
x_31 = lean::cnstr_get(x_25, 1);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_25, 2);
lean::inc(x_33);
x_35 = lean::cnstr_get(x_25, 3);
lean::inc(x_35);
lean::dec(x_25);
x_38 = l_option_get___main___at_lean_parser_run___spec__2(x_35);
lean::inc(x_1);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_38);
lean::cnstr_set(x_40, 1, x_1);
x_41 = lean::box(3);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_40);
x_43 = l_list_reverse___rarg(x_42);
x_44 = l_lean_parser_no__kind;
lean::inc(x_44);
x_46 = l_lean_parser_syntax_mk__node(x_44, x_43);
x_47 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_47, 0, x_46);
x_48 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_48, 0, x_29);
lean::cnstr_set(x_48, 1, x_31);
lean::cnstr_set(x_48, 2, x_33);
lean::cnstr_set(x_48, 3, x_47);
if (x_27 == 0)
{
unsigned char x_49; obj* x_50; obj* x_51; 
x_49 = 0;
if (lean::is_scalar(x_28)) {
 x_50 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_50 = x_28;
}
lean::cnstr_set(x_50, 0, x_48);
lean::cnstr_set_scalar(x_50, sizeof(void*)*1, x_49);
x_51 = x_50;
x_14 = x_51;
x_15 = x_22;
goto lbl_16;
}
else
{
obj* x_52; obj* x_53; 
if (lean::is_scalar(x_28)) {
 x_52 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_52 = x_28;
}
lean::cnstr_set(x_52, 0, x_48);
lean::cnstr_set_scalar(x_52, sizeof(void*)*1, x_27);
x_53 = x_52;
x_14 = x_53;
x_15 = x_22;
goto lbl_16;
}
}
lbl_16:
{
if (lean::obj_tag(x_14) == 0)
{
obj* x_54; obj* x_56; obj* x_58; obj* x_60; obj* x_61; obj* x_64; obj* x_65; obj* x_67; obj* x_69; 
x_54 = lean::cnstr_get(x_14, 0);
lean::inc(x_54);
x_56 = lean::cnstr_get(x_14, 1);
lean::inc(x_56);
x_58 = lean::cnstr_get(x_14, 2);
lean::inc(x_58);
if (lean::is_shared(x_14)) {
 lean::dec(x_14);
 x_60 = lean::box(0);
} else {
 lean::cnstr_release(x_14, 0);
 lean::cnstr_release(x_14, 1);
 lean::cnstr_release(x_14, 2);
 x_60 = x_14;
}
x_61 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_61, 0, x_54);
lean::cnstr_set(x_61, 1, x_1);
lean::inc(x_56);
lean::inc(x_61);
x_64 = l___private_1297690757__many1__aux___main___at_lean_parser_ident__univ__spec_parser___spec__2(x_0, x_61, x_11, x_3, x_56, x_15);
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
x_67 = lean::cnstr_get(x_64, 1);
lean::inc(x_67);
if (lean::is_shared(x_64)) {
 lean::dec(x_64);
 x_69 = lean::box(0);
} else {
 lean::cnstr_release(x_64, 0);
 lean::cnstr_release(x_64, 1);
 x_69 = x_64;
}
if (lean::obj_tag(x_65) == 0)
{
obj* x_73; obj* x_74; 
lean::dec(x_60);
lean::dec(x_61);
lean::dec(x_56);
x_73 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_58, x_65);
if (lean::is_scalar(x_69)) {
 x_74 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_74 = x_69;
}
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_67);
return x_74;
}
else
{
obj* x_75; unsigned char x_77; 
x_75 = lean::cnstr_get(x_65, 0);
lean::inc(x_75);
x_77 = lean::cnstr_get_scalar<unsigned char>(x_65, sizeof(void*)*1);
if (x_77 == 0)
{
obj* x_79; obj* x_80; obj* x_82; obj* x_83; obj* x_86; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; 
lean::dec(x_65);
x_79 = l_list_reverse___rarg(x_61);
x_80 = l_lean_parser_no__kind;
lean::inc(x_80);
x_82 = l_lean_parser_syntax_mk__node(x_80, x_79);
x_83 = lean::cnstr_get(x_75, 2);
lean::inc(x_83);
lean::dec(x_75);
x_86 = l_mjoin___rarg___closed__1;
lean::inc(x_86);
x_88 = lean::alloc_closure(reinterpret_cast<void*>(l_function_comp___rarg), 3, 2);
lean::closure_set(x_88, 0, x_83);
lean::closure_set(x_88, 1, x_86);
x_89 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_89, 0, x_88);
if (lean::is_scalar(x_60)) {
 x_90 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_90 = x_60;
}
lean::cnstr_set(x_90, 0, x_82);
lean::cnstr_set(x_90, 1, x_56);
lean::cnstr_set(x_90, 2, x_89);
x_91 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_58, x_90);
if (lean::is_scalar(x_69)) {
 x_92 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_92 = x_69;
}
lean::cnstr_set(x_92, 0, x_91);
lean::cnstr_set(x_92, 1, x_67);
return x_92;
}
else
{
obj* x_97; obj* x_98; 
lean::dec(x_60);
lean::dec(x_61);
lean::dec(x_56);
lean::dec(x_75);
x_97 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_58, x_65);
if (lean::is_scalar(x_69)) {
 x_98 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_98 = x_69;
}
lean::cnstr_set(x_98, 0, x_97);
lean::cnstr_set(x_98, 1, x_67);
return x_98;
}
}
}
else
{
obj* x_103; unsigned char x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; 
lean::dec(x_11);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_3);
x_103 = lean::cnstr_get(x_14, 0);
lean::inc(x_103);
x_105 = lean::cnstr_get_scalar<unsigned char>(x_14, sizeof(void*)*1);
if (lean::is_shared(x_14)) {
 lean::dec(x_14);
 x_106 = lean::box(0);
} else {
 lean::cnstr_release(x_14, 0);
 x_106 = x_14;
}
if (lean::is_scalar(x_106)) {
 x_107 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_107 = x_106;
}
lean::cnstr_set(x_107, 0, x_103);
lean::cnstr_set_scalar(x_107, sizeof(void*)*1, x_105);
x_108 = x_107;
x_109 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_109, 0, x_108);
lean::cnstr_set(x_109, 1, x_15);
return x_109;
}
}
}
else
{
obj* x_114; obj* x_115; obj* x_116; obj* x_120; 
lean::dec(x_7);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
x_114 = lean::box(0);
x_115 = l___private_1297690757__many1__aux___main___rarg___closed__1;
x_116 = l_mjoin___rarg___closed__1;
lean::inc(x_114);
lean::inc(x_116);
lean::inc(x_115);
x_120 = l_lean_parser_monad__parsec_error___at___private_4089500695__finish__comment__block__aux___main___spec__1___rarg(x_115, x_116, x_114, x_114, x_3, x_4, x_5);
return x_120;
}
}
}
obj* l_lean_parser_combinators_many1___at_lean_parser_ident__univ__spec_parser___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_10; obj* x_11; obj* x_13; obj* x_15; obj* x_16; obj* x_18; obj* x_19; 
x_4 = lean::string_iterator_remaining(x_2);
x_5 = lean::box(0);
x_6 = lean::mk_nat_obj(1u);
x_7 = lean::nat_add(x_4, x_6);
lean::dec(x_6);
lean::dec(x_4);
x_10 = l___private_1297690757__many1__aux___main___at_lean_parser_ident__univ__spec_parser___spec__2(x_0, x_5, x_7, x_1, x_2, x_3);
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
if (lean::is_shared(x_10)) {
 lean::dec(x_10);
 x_15 = lean::box(0);
} else {
 lean::cnstr_release(x_10, 0);
 lean::cnstr_release(x_10, 1);
 x_15 = x_10;
}
x_16 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_16);
x_18 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_11);
if (lean::is_scalar(x_15)) {
 x_19 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_19 = x_15;
}
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_13);
return x_19;
}
}
obj* _init_l_lean_parser_ident__univ__spec_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_32; 
x_0 = lean::mk_string(".{");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol___spec__1), 6, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
lean::inc(x_4);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_level_parser), 5, 1);
lean::closure_set(x_8, 0, x_4);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_level__parser_run), 4, 1);
lean::closure_set(x_9, 0, x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many1___at_lean_parser_ident__univ__spec_parser___spec__1), 4, 1);
lean::closure_set(x_10, 0, x_9);
x_11 = lean::mk_string("}");
x_12 = l_string_trim(x_11);
lean::inc(x_12);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_14, 0, x_12);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol___spec__1), 6, 3);
lean::closure_set(x_15, 0, x_12);
lean::closure_set(x_15, 1, x_4);
lean::closure_set(x_15, 2, x_14);
x_16 = lean::box(0);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_10);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_6);
lean::cnstr_set(x_19, 1, x_18);
x_20 = l_lean_parser_basic__parser__m_monad;
x_21 = l_lean_parser_basic__parser__m_monad__except;
x_22 = l_lean_parser_basic__parser__m_lean_parser_monad__parsec;
x_23 = l_lean_parser_basic__parser__m_alternative;
x_24 = l_lean_parser_ident__univ__spec;
x_25 = l_lean_parser_ident__univ__spec_has__view;
lean::inc(x_25);
lean::inc(x_24);
lean::inc(x_23);
lean::inc(x_22);
lean::inc(x_21);
lean::inc(x_20);
x_32 = l_lean_parser_combinators_node_view___rarg(x_20, x_21, x_22, x_23, x_24, x_19, x_25);
return x_32;
}
}
obj* _init_l_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_0 = lean::mk_string(".{");
x_1 = lean::mk_nat_obj(0u);
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = l_lean_parser_level_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_4);
x_6 = l_lean_parser_tokens___rarg(x_4);
x_7 = l_lean_parser_tokens___rarg(x_6);
x_8 = lean::mk_string("}");
x_9 = l_lean_parser_symbol_tokens___rarg(x_8, x_1);
x_10 = lean::box(0);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_9, x_10);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_7, x_11);
x_13 = l_lean_parser_list_cons_tokens___rarg(x_3, x_12);
x_14 = l_lean_parser_tokens___rarg(x_13);
return x_14;
}
}
obj* _init_l_lean_parser_ident__univs() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("ident_univs");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_ident__univs_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univs_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univs_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__5;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_23; 
lean::dec(x_2);
x_23 = lean::box(0);
x_20 = x_23;
goto lbl_21;
}
case 1:
{
obj* x_24; 
x_24 = lean::cnstr_get(x_2, 0);
lean::inc(x_24);
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_28; obj* x_29; 
lean::dec(x_1);
x_28 = lean::box(3);
x_29 = l_lean_parser_syntax_as__node___main(x_28);
if (lean::obj_tag(x_29) == 0)
{
obj* x_31; obj* x_33; 
lean::dec(x_29);
x_31 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
lean::inc(x_31);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_24);
lean::cnstr_set(x_33, 1, x_31);
return x_33;
}
else
{
obj* x_34; obj* x_36; obj* x_37; 
x_34 = lean::cnstr_get(x_29, 0);
lean::inc(x_34);
if (lean::is_shared(x_29)) {
 lean::dec(x_29);
 x_36 = lean::box(0);
} else {
 lean::cnstr_release(x_29, 0);
 x_36 = x_29;
}
x_37 = lean::cnstr_get(x_34, 1);
lean::inc(x_37);
lean::dec(x_34);
if (lean::obj_tag(x_37) == 0)
{
obj* x_42; obj* x_43; 
lean::dec(x_36);
lean::dec(x_37);
x_42 = lean::box(0);
x_43 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_43, 0, x_24);
lean::cnstr_set(x_43, 1, x_42);
return x_43;
}
else
{
obj* x_44; obj* x_46; 
x_44 = lean::cnstr_get(x_37, 0);
lean::inc(x_44);
x_46 = lean::cnstr_get(x_37, 1);
lean::inc(x_46);
lean::dec(x_37);
if (lean::obj_tag(x_46) == 0)
{
obj* x_50; obj* x_51; obj* x_53; obj* x_54; obj* x_55; 
lean::dec(x_46);
x_50 = l_lean_parser_ident__univ__spec_has__view;
x_51 = lean::cnstr_get(x_50, 0);
lean::inc(x_51);
x_53 = lean::apply_1(x_51, x_44);
if (lean::is_scalar(x_36)) {
 x_54 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_54 = x_36;
}
lean::cnstr_set(x_54, 0, x_53);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_24);
lean::cnstr_set(x_55, 1, x_54);
return x_55;
}
else
{
obj* x_59; obj* x_61; 
lean::dec(x_44);
lean::dec(x_46);
lean::dec(x_36);
x_59 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
lean::inc(x_59);
x_61 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_61, 0, x_24);
lean::cnstr_set(x_61, 1, x_59);
return x_61;
}
}
}
}
else
{
obj* x_62; obj* x_65; 
x_62 = lean::cnstr_get(x_1, 0);
lean::inc(x_62);
lean::dec(x_1);
x_65 = l_lean_parser_syntax_as__node___main(x_62);
if (lean::obj_tag(x_65) == 0)
{
obj* x_67; obj* x_69; 
lean::dec(x_65);
x_67 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
lean::inc(x_67);
x_69 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_69, 0, x_24);
lean::cnstr_set(x_69, 1, x_67);
return x_69;
}
else
{
obj* x_70; obj* x_72; obj* x_73; 
x_70 = lean::cnstr_get(x_65, 0);
lean::inc(x_70);
if (lean::is_shared(x_65)) {
 lean::dec(x_65);
 x_72 = lean::box(0);
} else {
 lean::cnstr_release(x_65, 0);
 x_72 = x_65;
}
x_73 = lean::cnstr_get(x_70, 1);
lean::inc(x_73);
lean::dec(x_70);
if (lean::obj_tag(x_73) == 0)
{
obj* x_78; obj* x_79; 
lean::dec(x_73);
lean::dec(x_72);
x_78 = lean::box(0);
x_79 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_79, 0, x_24);
lean::cnstr_set(x_79, 1, x_78);
return x_79;
}
else
{
obj* x_80; obj* x_82; 
x_80 = lean::cnstr_get(x_73, 0);
lean::inc(x_80);
x_82 = lean::cnstr_get(x_73, 1);
lean::inc(x_82);
lean::dec(x_73);
if (lean::obj_tag(x_82) == 0)
{
obj* x_86; obj* x_87; obj* x_89; obj* x_90; obj* x_91; 
lean::dec(x_82);
x_86 = l_lean_parser_ident__univ__spec_has__view;
x_87 = lean::cnstr_get(x_86, 0);
lean::inc(x_87);
x_89 = lean::apply_1(x_87, x_80);
if (lean::is_scalar(x_72)) {
 x_90 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_90 = x_72;
}
lean::cnstr_set(x_90, 0, x_89);
x_91 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_91, 0, x_24);
lean::cnstr_set(x_91, 1, x_90);
return x_91;
}
else
{
obj* x_95; obj* x_97; 
lean::dec(x_80);
lean::dec(x_72);
lean::dec(x_82);
x_95 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
lean::inc(x_95);
x_97 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_97, 0, x_24);
lean::cnstr_set(x_97, 1, x_95);
return x_97;
}
}
}
}
}
case 2:
{
obj* x_99; 
lean::dec(x_2);
x_99 = lean::box(0);
x_20 = x_99;
goto lbl_21;
}
default:
{
obj* x_101; 
lean::dec(x_2);
x_101 = lean::box(0);
x_20 = x_101;
goto lbl_21;
}
}
lbl_21:
{
lean::dec(x_20);
if (lean::obj_tag(x_1) == 0)
{
obj* x_104; 
lean::dec(x_1);
x_104 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__3;
lean::inc(x_104);
return x_104;
}
else
{
obj* x_106; obj* x_109; 
x_106 = lean::cnstr_get(x_1, 0);
lean::inc(x_106);
lean::dec(x_1);
x_109 = l_lean_parser_syntax_as__node___main(x_106);
if (lean::obj_tag(x_109) == 0)
{
obj* x_111; 
lean::dec(x_109);
x_111 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_111);
return x_111;
}
else
{
obj* x_113; obj* x_115; obj* x_116; 
x_113 = lean::cnstr_get(x_109, 0);
lean::inc(x_113);
if (lean::is_shared(x_109)) {
 lean::dec(x_109);
 x_115 = lean::box(0);
} else {
 lean::cnstr_release(x_109, 0);
 x_115 = x_109;
}
x_116 = lean::cnstr_get(x_113, 1);
lean::inc(x_116);
lean::dec(x_113);
if (lean::obj_tag(x_116) == 0)
{
obj* x_121; 
lean::dec(x_116);
lean::dec(x_115);
x_121 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2;
lean::inc(x_121);
return x_121;
}
else
{
obj* x_123; obj* x_125; 
x_123 = lean::cnstr_get(x_116, 0);
lean::inc(x_123);
x_125 = lean::cnstr_get(x_116, 1);
lean::inc(x_125);
lean::dec(x_116);
if (lean::obj_tag(x_125) == 0)
{
obj* x_129; obj* x_130; obj* x_132; obj* x_133; obj* x_134; obj* x_136; 
lean::dec(x_125);
x_129 = l_lean_parser_ident__univ__spec_has__view;
x_130 = lean::cnstr_get(x_129, 0);
lean::inc(x_130);
x_132 = lean::apply_1(x_130, x_123);
if (lean::is_scalar(x_115)) {
 x_133 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_133 = x_115;
}
lean::cnstr_set(x_133, 0, x_132);
x_134 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_134);
x_136 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_136, 0, x_134);
lean::cnstr_set(x_136, 1, x_133);
return x_136;
}
else
{
obj* x_140; 
lean::dec(x_125);
lean::dec(x_123);
lean::dec(x_115);
x_140 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_140);
return x_140;
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
lean::inc(x_0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_1);
lean::inc(x_0);
lean::inc(x_0);
x_8 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_8, 0, x_0);
lean::cnstr_set(x_8, 1, x_3);
lean::cnstr_set(x_8, 2, x_5);
lean::cnstr_set(x_8, 3, x_0);
lean::cnstr_set(x_8, 4, x_0);
x_9 = l_lean_parser_ident__univ__spec_has__view;
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
x_12 = lean::box(3);
x_13 = lean::apply_1(x_10, x_12);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_8);
lean::cnstr_set(x_15, 1, x_14);
return x_15;
}
}
obj* _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_5; obj* x_9; obj* x_10; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
lean::inc(x_0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_1);
lean::inc(x_0);
lean::inc(x_0);
lean::inc(x_0);
x_9 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_9, 0, x_0);
lean::cnstr_set(x_9, 1, x_3);
lean::cnstr_set(x_9, 2, x_5);
lean::cnstr_set(x_9, 3, x_0);
lean::cnstr_set(x_9, 4, x_0);
x_10 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_0);
return x_10;
}
}
obj* _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
if (lean::is_shared(x_1)) {
 lean::dec(x_1);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_1, 0);
 x_7 = x_1;
}
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; 
lean::dec(x_7);
lean::dec(x_8);
x_13 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2;
lean::inc(x_13);
return x_13;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_8, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
lean::dec(x_8);
if (lean::obj_tag(x_17) == 0)
{
obj* x_21; obj* x_22; obj* x_24; obj* x_25; obj* x_26; obj* x_28; 
lean::dec(x_17);
x_21 = l_lean_parser_ident__univ__spec_has__view;
x_22 = lean::cnstr_get(x_21, 0);
lean::inc(x_22);
x_24 = lean::apply_1(x_22, x_15);
if (lean::is_scalar(x_7)) {
 x_25 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_25 = x_7;
}
lean::cnstr_set(x_25, 0, x_24);
x_26 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_26);
x_28 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_28, 0, x_26);
lean::cnstr_set(x_28, 1, x_25);
return x_28;
}
else
{
obj* x_32; 
lean::dec(x_15);
lean::dec(x_17);
lean::dec(x_7);
x_32 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_32);
return x_32;
}
}
}
}
}
obj* _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_ident__univ__spec_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__5() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_8; 
lean::dec(x_1);
x_8 = lean::box(0);
x_5 = x_8;
goto lbl_6;
}
case 1:
{
obj* x_9; 
x_9 = lean::cnstr_get(x_1, 0);
lean::inc(x_9);
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_13; obj* x_14; 
lean::dec(x_0);
x_13 = lean::box(3);
x_14 = l_lean_parser_syntax_as__node___main(x_13);
if (lean::obj_tag(x_14) == 0)
{
obj* x_16; obj* x_18; 
lean::dec(x_14);
x_16 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
lean::inc(x_16);
x_18 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_18, 0, x_9);
lean::cnstr_set(x_18, 1, x_16);
return x_18;
}
else
{
obj* x_19; obj* x_21; obj* x_22; 
x_19 = lean::cnstr_get(x_14, 0);
lean::inc(x_19);
if (lean::is_shared(x_14)) {
 lean::dec(x_14);
 x_21 = lean::box(0);
} else {
 lean::cnstr_release(x_14, 0);
 x_21 = x_14;
}
x_22 = lean::cnstr_get(x_19, 1);
lean::inc(x_22);
lean::dec(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_27; obj* x_28; 
lean::dec(x_22);
lean::dec(x_21);
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_28, 0, x_9);
lean::cnstr_set(x_28, 1, x_27);
return x_28;
}
else
{
obj* x_29; obj* x_31; 
x_29 = lean::cnstr_get(x_22, 0);
lean::inc(x_29);
x_31 = lean::cnstr_get(x_22, 1);
lean::inc(x_31);
lean::dec(x_22);
if (lean::obj_tag(x_31) == 0)
{
obj* x_35; obj* x_36; obj* x_38; obj* x_39; obj* x_40; 
lean::dec(x_31);
x_35 = l_lean_parser_ident__univ__spec_has__view;
x_36 = lean::cnstr_get(x_35, 0);
lean::inc(x_36);
x_38 = lean::apply_1(x_36, x_29);
if (lean::is_scalar(x_21)) {
 x_39 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_39 = x_21;
}
lean::cnstr_set(x_39, 0, x_38);
x_40 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_40, 0, x_9);
lean::cnstr_set(x_40, 1, x_39);
return x_40;
}
else
{
obj* x_44; obj* x_46; 
lean::dec(x_21);
lean::dec(x_29);
lean::dec(x_31);
x_44 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
lean::inc(x_44);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_9);
lean::cnstr_set(x_46, 1, x_44);
return x_46;
}
}
}
}
else
{
obj* x_47; obj* x_50; 
x_47 = lean::cnstr_get(x_0, 0);
lean::inc(x_47);
lean::dec(x_0);
x_50 = l_lean_parser_syntax_as__node___main(x_47);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_54; 
lean::dec(x_50);
x_52 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
lean::inc(x_52);
x_54 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_54, 0, x_9);
lean::cnstr_set(x_54, 1, x_52);
return x_54;
}
else
{
obj* x_55; obj* x_57; obj* x_58; 
x_55 = lean::cnstr_get(x_50, 0);
lean::inc(x_55);
if (lean::is_shared(x_50)) {
 lean::dec(x_50);
 x_57 = lean::box(0);
} else {
 lean::cnstr_release(x_50, 0);
 x_57 = x_50;
}
x_58 = lean::cnstr_get(x_55, 1);
lean::inc(x_58);
lean::dec(x_55);
if (lean::obj_tag(x_58) == 0)
{
obj* x_63; obj* x_64; 
lean::dec(x_57);
lean::dec(x_58);
x_63 = lean::box(0);
x_64 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_64, 0, x_9);
lean::cnstr_set(x_64, 1, x_63);
return x_64;
}
else
{
obj* x_65; obj* x_67; 
x_65 = lean::cnstr_get(x_58, 0);
lean::inc(x_65);
x_67 = lean::cnstr_get(x_58, 1);
lean::inc(x_67);
lean::dec(x_58);
if (lean::obj_tag(x_67) == 0)
{
obj* x_71; obj* x_72; obj* x_74; obj* x_75; obj* x_76; 
lean::dec(x_67);
x_71 = l_lean_parser_ident__univ__spec_has__view;
x_72 = lean::cnstr_get(x_71, 0);
lean::inc(x_72);
x_74 = lean::apply_1(x_72, x_65);
if (lean::is_scalar(x_57)) {
 x_75 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_75 = x_57;
}
lean::cnstr_set(x_75, 0, x_74);
x_76 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_76, 0, x_9);
lean::cnstr_set(x_76, 1, x_75);
return x_76;
}
else
{
obj* x_80; obj* x_82; 
lean::dec(x_65);
lean::dec(x_67);
lean::dec(x_57);
x_80 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
lean::inc(x_80);
x_82 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_82, 0, x_9);
lean::cnstr_set(x_82, 1, x_80);
return x_82;
}
}
}
}
}
case 2:
{
obj* x_84; 
lean::dec(x_1);
x_84 = lean::box(0);
x_5 = x_84;
goto lbl_6;
}
default:
{
obj* x_86; 
lean::dec(x_1);
x_86 = lean::box(0);
x_5 = x_86;
goto lbl_6;
}
}
lbl_6:
{
lean::dec(x_5);
if (lean::obj_tag(x_0) == 0)
{
obj* x_89; 
lean::dec(x_0);
x_89 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__3;
lean::inc(x_89);
return x_89;
}
else
{
obj* x_91; obj* x_94; 
x_91 = lean::cnstr_get(x_0, 0);
lean::inc(x_91);
lean::dec(x_0);
x_94 = l_lean_parser_syntax_as__node___main(x_91);
if (lean::obj_tag(x_94) == 0)
{
obj* x_96; 
lean::dec(x_94);
x_96 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_96);
return x_96;
}
else
{
obj* x_98; obj* x_100; obj* x_101; 
x_98 = lean::cnstr_get(x_94, 0);
lean::inc(x_98);
if (lean::is_shared(x_94)) {
 lean::dec(x_94);
 x_100 = lean::box(0);
} else {
 lean::cnstr_release(x_94, 0);
 x_100 = x_94;
}
x_101 = lean::cnstr_get(x_98, 1);
lean::inc(x_101);
lean::dec(x_98);
if (lean::obj_tag(x_101) == 0)
{
obj* x_106; 
lean::dec(x_100);
lean::dec(x_101);
x_106 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2;
lean::inc(x_106);
return x_106;
}
else
{
obj* x_108; obj* x_110; 
x_108 = lean::cnstr_get(x_101, 0);
lean::inc(x_108);
x_110 = lean::cnstr_get(x_101, 1);
lean::inc(x_110);
lean::dec(x_101);
if (lean::obj_tag(x_110) == 0)
{
obj* x_114; obj* x_115; obj* x_117; obj* x_118; obj* x_119; obj* x_121; 
lean::dec(x_110);
x_114 = l_lean_parser_ident__univ__spec_has__view;
x_115 = lean::cnstr_get(x_114, 0);
lean::inc(x_115);
x_117 = lean::apply_1(x_115, x_108);
if (lean::is_scalar(x_100)) {
 x_118 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_118 = x_100;
}
lean::cnstr_set(x_118, 0, x_117);
x_119 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_119);
x_121 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_121, 0, x_119);
lean::cnstr_set(x_121, 1, x_118);
return x_121;
}
else
{
obj* x_125; 
lean::dec(x_100);
lean::dec(x_110);
lean::dec(x_108);
x_125 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_125);
return x_125;
}
}
}
}
}
}
}
}
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_1);
if (lean::obj_tag(x_3) == 0)
{
obj* x_8; obj* x_10; obj* x_11; obj* x_13; 
lean::dec(x_3);
x_8 = l_lean_parser_detail__ident_has__view_x_27___lambda__2___closed__1;
lean::inc(x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_6);
lean::cnstr_set(x_10, 1, x_8);
x_11 = l_lean_parser_ident__univs;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
return x_13;
}
else
{
obj* x_14; obj* x_17; obj* x_18; obj* x_19; obj* x_21; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_31; 
x_14 = lean::cnstr_get(x_3, 0);
lean::inc(x_14);
lean::dec(x_3);
x_17 = lean::box(0);
x_18 = l_lean_parser_ident__univ__spec_has__view;
x_19 = lean::cnstr_get(x_18, 1);
lean::inc(x_19);
x_21 = lean::apply_1(x_19, x_14);
lean::inc(x_17);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_21);
lean::cnstr_set(x_23, 1, x_17);
x_24 = l_lean_parser_no__kind;
lean::inc(x_24);
x_26 = l_lean_parser_syntax_mk__node(x_24, x_23);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_17);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_6);
lean::cnstr_set(x_28, 1, x_27);
x_29 = l_lean_parser_ident__univs;
lean::inc(x_29);
x_31 = l_lean_parser_syntax_mk__node(x_29, x_28);
return x_31;
}
}
}
obj* _init_l_lean_parser_ident__univs_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_ident__univs_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_ident__univs_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_ident__univs;
x_6 = l_lean_parser_ident__univs_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_ident__univs_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univs_parser___lambda__1), 4, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__3___rarg), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::box(0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
return x_6;
}
}
obj* l_lean_parser_ident__univs_parser___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
lean::dec(x_1);
x_5 = l_lean_parser_ident__univ__spec;
x_6 = l_lean_parser_ident__univ__spec_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_detail__ident__part_parser___spec__8(x_5, x_6, x_0, x_2, x_3);
return x_9;
}
}
obj* _init_l_lean_parser_ident__univs_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_19; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univs_parser___lambda__1), 4, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__3___rarg), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::box(0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = l_lean_parser_term__parser__m_monad;
x_8 = l_lean_parser_term__parser__m_monad__except;
x_9 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_10 = l_lean_parser_term__parser__m_alternative;
x_11 = l_lean_parser_ident__univs;
x_12 = l_lean_parser_ident__univs_has__view;
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
lean::inc(x_8);
lean::inc(x_7);
x_19 = l_lean_parser_combinators_node_view___rarg(x_7, x_8, x_9, x_10, x_11, x_6, x_12);
return x_19;
}
}
obj* _init_l_lean_parser_ident__univs_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = l_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens;
lean::inc(x_1);
x_3 = l_lean_parser_tokens___rarg(x_1);
x_4 = l_lean_parser_tokens___rarg(x_3);
lean::inc(x_0);
x_6 = l_lean_parser_list_cons_tokens___rarg(x_4, x_0);
x_7 = l_lean_parser_list_cons_tokens___rarg(x_0, x_6);
x_8 = l_lean_parser_tokens___rarg(x_7);
return x_8;
}
}
obj* l_lean_parser_term_get__leading(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_9; obj* x_11; obj* x_12; 
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_1);
x_9 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_9);
x_11 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_11, 0, x_0);
lean::cnstr_set(x_11, 1, x_4);
lean::cnstr_set(x_11, 2, x_9);
x_12 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_5);
return x_12;
}
}
obj* _init_l_lean_parser_term_lean_parser_has__tokens() {
_start:
{
obj* x_0; 
x_0 = lean::box(0);
return x_0;
}
}
obj* _init_l_lean_parser_term_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_id___rarg), 1, 0);
lean::inc(x_0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_0);
return x_2;
}
}
obj* _init_l_lean_parser_term_tuple() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("tuple");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_tuple_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_tuple_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_tuple_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_tuple_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__3;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; obj* x_22; obj* x_23; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_25; obj* x_28; 
x_25 = lean::cnstr_get(x_2, 0);
lean::inc(x_25);
lean::dec(x_2);
x_28 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_28, 0, x_25);
if (lean::obj_tag(x_1) == 0)
{
lean::dec(x_1);
x_20 = x_28;
goto lbl_21;
}
else
{
obj* x_30; 
x_30 = lean::cnstr_get(x_1, 0);
lean::inc(x_30);
lean::dec(x_1);
x_22 = x_28;
x_23 = x_30;
goto lbl_24;
}
}
case 1:
{
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
lean::dec(x_1);
x_35 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; 
x_37 = lean::cnstr_get(x_1, 0);
lean::inc(x_37);
lean::dec(x_1);
x_40 = lean::box(0);
x_22 = x_40;
x_23 = x_37;
goto lbl_24;
}
}
case 2:
{
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_43; 
lean::dec(x_1);
x_43 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2;
lean::inc(x_43);
return x_43;
}
else
{
obj* x_45; obj* x_48; 
x_45 = lean::cnstr_get(x_1, 0);
lean::inc(x_45);
lean::dec(x_1);
x_48 = lean::box(0);
x_22 = x_48;
x_23 = x_45;
goto lbl_24;
}
}
default:
{
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_51; 
lean::dec(x_1);
x_51 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2;
lean::inc(x_51);
return x_51;
}
else
{
obj* x_53; obj* x_56; 
x_53 = lean::cnstr_get(x_1, 0);
lean::inc(x_53);
lean::dec(x_1);
x_56 = lean::box(0);
x_22 = x_56;
x_23 = x_53;
goto lbl_24;
}
}
}
lbl_21:
{
obj* x_57; obj* x_58; 
x_57 = lean::box(3);
x_58 = l_lean_parser_syntax_as__node___main(x_57);
if (lean::obj_tag(x_58) == 0)
{
obj* x_60; obj* x_62; 
lean::dec(x_58);
x_60 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_60);
x_62 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_62, 0, x_20);
lean::cnstr_set(x_62, 1, x_60);
return x_62;
}
else
{
obj* x_63; obj* x_66; obj* x_69; obj* x_70; 
x_63 = lean::cnstr_get(x_58, 0);
lean::inc(x_63);
lean::dec(x_58);
x_66 = lean::cnstr_get(x_63, 1);
lean::inc(x_66);
lean::dec(x_63);
x_69 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_66);
x_70 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_70, 0, x_20);
lean::cnstr_set(x_70, 1, x_69);
return x_70;
}
}
lbl_24:
{
obj* x_71; 
x_71 = l_lean_parser_syntax_as__node___main(x_23);
if (lean::obj_tag(x_71) == 0)
{
obj* x_73; obj* x_75; 
lean::dec(x_71);
x_73 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_73);
x_75 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_75, 0, x_22);
lean::cnstr_set(x_75, 1, x_73);
return x_75;
}
else
{
obj* x_76; obj* x_79; obj* x_82; obj* x_83; 
x_76 = lean::cnstr_get(x_71, 0);
lean::inc(x_76);
lean::dec(x_71);
x_79 = lean::cnstr_get(x_76, 1);
lean::inc(x_79);
lean::dec(x_76);
x_82 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_79);
x_83 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_83, 0, x_22);
lean::cnstr_set(x_83, 1, x_82);
return x_83;
}
}
}
}
}
obj* _init_l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_1 = lean::box(3);
lean::inc(x_0);
x_3 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_3, 0, x_1);
lean::cnstr_set(x_3, 1, x_0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_0);
return x_4;
}
}
obj* _init_l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_2; 
x_2 = lean::box(0);
x_0 = x_2;
goto lbl_1;
lbl_1:
{
obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = l_lean_parser_syntax_as__node___main(x_3);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; obj* x_8; 
lean::dec(x_4);
x_6 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_0);
lean::cnstr_set(x_8, 1, x_6);
return x_8;
}
else
{
obj* x_9; obj* x_12; obj* x_15; obj* x_16; 
x_9 = lean::cnstr_get(x_4, 0);
lean::inc(x_9);
lean::dec(x_4);
x_12 = lean::cnstr_get(x_9, 1);
lean::inc(x_12);
lean::dec(x_9);
x_15 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_12);
x_16 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_16, 0, x_0);
lean::cnstr_set(x_16, 1, x_15);
return x_16;
}
}
}
}
obj* _init_l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_7; obj* x_8; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_10; obj* x_13; 
x_10 = lean::cnstr_get(x_1, 0);
lean::inc(x_10);
lean::dec(x_1);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_10);
if (lean::obj_tag(x_0) == 0)
{
lean::dec(x_0);
x_5 = x_13;
goto lbl_6;
}
else
{
obj* x_15; 
x_15 = lean::cnstr_get(x_0, 0);
lean::inc(x_15);
lean::dec(x_0);
x_7 = x_13;
x_8 = x_15;
goto lbl_9;
}
}
case 1:
{
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
lean::dec(x_0);
x_20 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2;
lean::inc(x_20);
return x_20;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_0, 0);
lean::inc(x_22);
lean::dec(x_0);
x_25 = lean::box(0);
x_7 = x_25;
x_8 = x_22;
goto lbl_9;
}
}
case 2:
{
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_28; 
lean::dec(x_0);
x_28 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2;
lean::inc(x_28);
return x_28;
}
else
{
obj* x_30; obj* x_33; 
x_30 = lean::cnstr_get(x_0, 0);
lean::inc(x_30);
lean::dec(x_0);
x_33 = lean::box(0);
x_7 = x_33;
x_8 = x_30;
goto lbl_9;
}
}
default:
{
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_36; 
lean::dec(x_0);
x_36 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2;
lean::inc(x_36);
return x_36;
}
else
{
obj* x_38; obj* x_41; 
x_38 = lean::cnstr_get(x_0, 0);
lean::inc(x_38);
lean::dec(x_0);
x_41 = lean::box(0);
x_7 = x_41;
x_8 = x_38;
goto lbl_9;
}
}
}
lbl_6:
{
obj* x_42; obj* x_43; 
x_42 = lean::box(3);
x_43 = l_lean_parser_syntax_as__node___main(x_42);
if (lean::obj_tag(x_43) == 0)
{
obj* x_45; obj* x_47; 
lean::dec(x_43);
x_45 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_45);
x_47 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_47, 0, x_5);
lean::cnstr_set(x_47, 1, x_45);
return x_47;
}
else
{
obj* x_48; obj* x_51; obj* x_54; obj* x_55; 
x_48 = lean::cnstr_get(x_43, 0);
lean::inc(x_48);
lean::dec(x_43);
x_51 = lean::cnstr_get(x_48, 1);
lean::inc(x_51);
lean::dec(x_48);
x_54 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_51);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_5);
lean::cnstr_set(x_55, 1, x_54);
return x_55;
}
}
lbl_9:
{
obj* x_56; 
x_56 = l_lean_parser_syntax_as__node___main(x_8);
if (lean::obj_tag(x_56) == 0)
{
obj* x_58; obj* x_60; 
lean::dec(x_56);
x_58 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_58);
x_60 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_60, 0, x_7);
lean::cnstr_set(x_60, 1, x_58);
return x_60;
}
else
{
obj* x_61; obj* x_64; obj* x_67; obj* x_68; 
x_61 = lean::cnstr_get(x_56, 0);
lean::inc(x_61);
lean::dec(x_56);
x_64 = lean::cnstr_get(x_61, 1);
lean::inc(x_64);
lean::dec(x_61);
x_67 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_64);
x_68 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_68, 0, x_7);
lean::cnstr_set(x_68, 1, x_67);
return x_68;
}
}
}
}
}
obj* l_lean_parser_term_tuple_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_21; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_6);
x_8 = l_option_map___rarg(x_6, x_1);
x_9 = lean::box(3);
x_10 = l_option_get__or__else___main___rarg(x_8, x_9);
x_11 = l_list_map___main___at_lean_parser_term_tuple_has__view_x_27___spec__2(x_3);
x_12 = l_list_join___main___rarg(x_11);
x_13 = l_lean_parser_no__kind;
lean::inc(x_13);
x_15 = l_lean_parser_syntax_mk__node(x_13, x_12);
x_16 = lean::box(0);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_10);
lean::cnstr_set(x_18, 1, x_17);
x_19 = l_lean_parser_term_tuple;
lean::inc(x_19);
x_21 = l_lean_parser_syntax_mk__node(x_19, x_18);
return x_21;
}
}
obj* l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_7 = x_0;
}
if (lean::obj_tag(x_5) == 0)
{
obj* x_9; obj* x_11; obj* x_12; 
lean::dec(x_5);
x_9 = lean::box(0);
lean::inc(x_9);
x_11 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_11, 0, x_3);
lean::cnstr_set(x_11, 1, x_9);
if (lean::is_scalar(x_7)) {
 x_12 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_12 = x_7;
}
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_9);
return x_12;
}
else
{
obj* x_13; obj* x_15; obj* x_18; 
x_13 = lean::cnstr_get(x_5, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_5, 1);
lean::inc(x_15);
lean::dec(x_5);
x_18 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_15);
switch (lean::obj_tag(x_13)) {
case 0:
{
obj* x_19; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_19 = lean::cnstr_get(x_13, 0);
lean::inc(x_19);
lean::dec(x_13);
x_22 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_22);
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_3);
lean::cnstr_set(x_24, 1, x_23);
if (lean::is_scalar(x_7)) {
 x_25 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_25 = x_7;
}
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_18);
return x_25;
}
case 1:
{
obj* x_27; obj* x_29; obj* x_30; 
lean::dec(x_13);
x_27 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_27);
x_29 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_29, 0, x_3);
lean::cnstr_set(x_29, 1, x_27);
if (lean::is_scalar(x_7)) {
 x_30 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_30 = x_7;
}
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_18);
return x_30;
}
case 2:
{
obj* x_32; obj* x_34; obj* x_35; 
lean::dec(x_13);
x_32 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_32);
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_3);
lean::cnstr_set(x_34, 1, x_32);
if (lean::is_scalar(x_7)) {
 x_35 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_35 = x_7;
}
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_18);
return x_35;
}
default:
{
obj* x_37; obj* x_39; obj* x_40; 
lean::dec(x_13);
x_37 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_37);
x_39 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_39, 0, x_3);
lean::cnstr_set(x_39, 1, x_37);
if (lean::is_scalar(x_7)) {
 x_40 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_40 = x_7;
}
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_18);
return x_40;
}
}
}
}
}
}
obj* l_list_map___main___at_lean_parser_term_tuple_has__view_x_27___spec__2(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_8; obj* x_10; obj* x_13; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_7 = x_0;
}
x_8 = lean::cnstr_get(x_3, 0);
lean::inc(x_8);
x_10 = lean::cnstr_get(x_3, 1);
lean::inc(x_10);
lean::dec(x_3);
x_13 = l_list_map___main___at_lean_parser_term_tuple_has__view_x_27___spec__2(x_5);
if (lean::obj_tag(x_10) == 0)
{
obj* x_15; obj* x_16; obj* x_17; 
lean::dec(x_10);
x_15 = lean::box(0);
if (lean::is_scalar(x_7)) {
 x_16 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_16 = x_7;
}
lean::cnstr_set(x_16, 0, x_8);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_13);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_18 = lean::cnstr_get(x_10, 0);
lean::inc(x_18);
lean::dec(x_10);
x_21 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_21);
x_23 = l_option_map___rarg(x_21, x_18);
x_24 = lean::box(3);
x_25 = l_option_get__or__else___main___rarg(x_23, x_24);
x_26 = lean::box(0);
if (lean::is_scalar(x_7)) {
 x_27 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_27 = x_7;
}
lean::cnstr_set(x_27, 0, x_25);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_8);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_13);
return x_29;
}
}
}
}
obj* _init_l_lean_parser_term_tuple_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_tuple_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_typed() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("typed");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_typed_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_typed_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_typed_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_typed_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
if (lean::is_shared(x_1)) {
 lean::dec(x_1);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_1, 0);
 x_7 = x_1;
}
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
lean::dec(x_7);
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; 
lean::dec(x_8);
x_13 = l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1;
lean::inc(x_13);
return x_13;
}
else
{
obj* x_15; obj* x_18; obj* x_19; 
x_15 = lean::cnstr_get(x_8, 0);
lean::inc(x_15);
lean::dec(x_8);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_15);
return x_19;
}
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_8, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_8, 1);
lean::inc(x_22);
lean::dec(x_8);
switch (lean::obj_tag(x_20)) {
case 0:
{
obj* x_25; obj* x_28; 
x_25 = lean::cnstr_get(x_20, 0);
lean::inc(x_25);
lean::dec(x_20);
if (lean::is_scalar(x_7)) {
 x_28 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_28 = x_7;
}
lean::cnstr_set(x_28, 0, x_25);
if (lean::obj_tag(x_22) == 0)
{
obj* x_30; obj* x_31; 
lean::dec(x_22);
x_30 = lean::box(3);
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_30);
return x_31;
}
else
{
obj* x_32; obj* x_35; 
x_32 = lean::cnstr_get(x_22, 0);
lean::inc(x_32);
lean::dec(x_22);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_28);
lean::cnstr_set(x_35, 1, x_32);
return x_35;
}
}
case 1:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_39; 
lean::dec(x_22);
x_39 = l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1;
lean::inc(x_39);
return x_39;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_22, 0);
lean::inc(x_41);
lean::dec(x_22);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
case 2:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_49; 
lean::dec(x_22);
x_49 = l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1;
lean::inc(x_49);
return x_49;
}
else
{
obj* x_51; obj* x_54; obj* x_55; 
x_51 = lean::cnstr_get(x_22, 0);
lean::inc(x_51);
lean::dec(x_22);
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_51);
return x_55;
}
}
default:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_59; 
lean::dec(x_22);
x_59 = l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1;
lean::inc(x_59);
return x_59;
}
else
{
obj* x_61; obj* x_64; obj* x_65; 
x_61 = lean::cnstr_get(x_22, 0);
lean::inc(x_61);
lean::dec(x_22);
x_64 = lean::box(0);
x_65 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_61);
return x_65;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_typed_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_6);
x_8 = l_option_map___rarg(x_6, x_1);
x_9 = lean::box(3);
x_10 = l_option_get__or__else___main___rarg(x_8, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_3);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_10);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_lean_parser_term_typed;
lean::inc(x_14);
x_16 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_16;
}
}
obj* _init_l_lean_parser_term_typed_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_typed_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_paren__special() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("paren_special");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_paren__special_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_paren__special_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_paren__special_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_paren__special_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__2;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; obj* x_91; obj* x_93; obj* x_94; 
lean::dec(x_86);
x_90 = l_lean_parser_term_typed_has__view;
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
x_93 = lean::apply_1(x_91, x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
else
{
obj* x_96; obj* x_97; obj* x_99; obj* x_100; 
lean::dec(x_86);
x_96 = l_lean_parser_term_tuple_has__view;
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
x_99 = lean::apply_1(x_97, x_1);
x_100 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_100, 0, x_99);
return x_100;
}
}
}
}
obj* _init_l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; obj* x_11; obj* x_13; obj* x_14; 
lean::dec(x_6);
x_10 = l_lean_parser_term_typed_has__view;
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_0);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
else
{
obj* x_16; obj* x_17; obj* x_19; obj* x_20; 
lean::dec(x_6);
x_16 = l_lean_parser_term_tuple_has__view;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::apply_1(x_17, x_0);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
}
}
obj* _init_l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("paren_special");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_paren__special_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_tuple_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
x_8 = lean::apply_1(x_6, x_2);
lean::inc(x_1);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_lean_parser_term_paren__special;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_33; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
x_21 = l_lean_parser_term_typed_has__view;
x_22 = lean::cnstr_get(x_21, 1);
lean::inc(x_22);
x_24 = lean::apply_1(x_22, x_18);
lean::inc(x_1);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_27);
x_29 = l_lean_parser_syntax_mk__node(x_27, x_26);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_1);
x_31 = l_lean_parser_term_paren__special;
lean::inc(x_31);
x_33 = l_lean_parser_syntax_mk__node(x_31, x_30);
return x_33;
}
}
}
obj* _init_l_lean_parser_term_paren__special_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_paren__special_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_paren__content() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("paren_content");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_paren__content_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_paren__content_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_paren__content_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_paren__content_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_21; obj* x_22; 
lean::dec(x_1);
x_21 = lean::box(3);
x_22 = l_lean_parser_syntax_as__node___main(x_21);
if (lean::obj_tag(x_22) == 0)
{
obj* x_24; obj* x_26; 
lean::dec(x_22);
x_24 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_24);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_2);
lean::cnstr_set(x_26, 1, x_24);
return x_26;
}
else
{
obj* x_27; obj* x_29; obj* x_30; 
x_27 = lean::cnstr_get(x_22, 0);
lean::inc(x_27);
if (lean::is_shared(x_22)) {
 lean::dec(x_22);
 x_29 = lean::box(0);
} else {
 lean::cnstr_release(x_22, 0);
 x_29 = x_22;
}
x_30 = lean::cnstr_get(x_27, 1);
lean::inc(x_30);
lean::dec(x_27);
if (lean::obj_tag(x_30) == 0)
{
obj* x_35; obj* x_36; 
lean::dec(x_29);
lean::dec(x_30);
x_35 = lean::box(0);
x_36 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_36, 0, x_2);
lean::cnstr_set(x_36, 1, x_35);
return x_36;
}
else
{
obj* x_37; obj* x_39; 
x_37 = lean::cnstr_get(x_30, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_30, 1);
lean::inc(x_39);
lean::dec(x_30);
if (lean::obj_tag(x_39) == 0)
{
obj* x_43; obj* x_44; obj* x_46; obj* x_47; obj* x_48; 
lean::dec(x_39);
x_43 = l_lean_parser_term_paren__special_has__view;
x_44 = lean::cnstr_get(x_43, 0);
lean::inc(x_44);
x_46 = lean::apply_1(x_44, x_37);
if (lean::is_scalar(x_29)) {
 x_47 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_47 = x_29;
}
lean::cnstr_set(x_47, 0, x_46);
x_48 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_48, 0, x_2);
lean::cnstr_set(x_48, 1, x_47);
return x_48;
}
else
{
obj* x_52; obj* x_54; 
lean::dec(x_29);
lean::dec(x_37);
lean::dec(x_39);
x_52 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_52);
x_54 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_54, 0, x_2);
lean::cnstr_set(x_54, 1, x_52);
return x_54;
}
}
}
}
else
{
obj* x_55; obj* x_58; 
x_55 = lean::cnstr_get(x_1, 0);
lean::inc(x_55);
lean::dec(x_1);
x_58 = l_lean_parser_syntax_as__node___main(x_55);
if (lean::obj_tag(x_58) == 0)
{
obj* x_60; obj* x_62; 
lean::dec(x_58);
x_60 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_60);
x_62 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_62, 0, x_2);
lean::cnstr_set(x_62, 1, x_60);
return x_62;
}
else
{
obj* x_63; obj* x_65; obj* x_66; 
x_63 = lean::cnstr_get(x_58, 0);
lean::inc(x_63);
if (lean::is_shared(x_58)) {
 lean::dec(x_58);
 x_65 = lean::box(0);
} else {
 lean::cnstr_release(x_58, 0);
 x_65 = x_58;
}
x_66 = lean::cnstr_get(x_63, 1);
lean::inc(x_66);
lean::dec(x_63);
if (lean::obj_tag(x_66) == 0)
{
obj* x_71; obj* x_72; 
lean::dec(x_65);
lean::dec(x_66);
x_71 = lean::box(0);
x_72 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_72, 0, x_2);
lean::cnstr_set(x_72, 1, x_71);
return x_72;
}
else
{
obj* x_73; obj* x_75; 
x_73 = lean::cnstr_get(x_66, 0);
lean::inc(x_73);
x_75 = lean::cnstr_get(x_66, 1);
lean::inc(x_75);
lean::dec(x_66);
if (lean::obj_tag(x_75) == 0)
{
obj* x_79; obj* x_80; obj* x_82; obj* x_83; obj* x_84; 
lean::dec(x_75);
x_79 = l_lean_parser_term_paren__special_has__view;
x_80 = lean::cnstr_get(x_79, 0);
lean::inc(x_80);
x_82 = lean::apply_1(x_80, x_73);
if (lean::is_scalar(x_65)) {
 x_83 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_83 = x_65;
}
lean::cnstr_set(x_83, 0, x_82);
x_84 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_84, 0, x_2);
lean::cnstr_set(x_84, 1, x_83);
return x_84;
}
else
{
obj* x_88; obj* x_90; 
lean::dec(x_73);
lean::dec(x_75);
lean::dec(x_65);
x_88 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_88);
x_90 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_90, 0, x_2);
lean::cnstr_set(x_90, 1, x_88);
return x_90;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_term_paren__special_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_6; obj* x_7; 
lean::dec(x_0);
x_6 = lean::box(3);
x_7 = l_lean_parser_syntax_as__node___main(x_6);
if (lean::obj_tag(x_7) == 0)
{
obj* x_9; obj* x_11; 
lean::dec(x_7);
x_9 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_9);
x_11 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_11, 0, x_1);
lean::cnstr_set(x_11, 1, x_9);
return x_11;
}
else
{
obj* x_12; obj* x_14; obj* x_15; 
x_12 = lean::cnstr_get(x_7, 0);
lean::inc(x_12);
if (lean::is_shared(x_7)) {
 lean::dec(x_7);
 x_14 = lean::box(0);
} else {
 lean::cnstr_release(x_7, 0);
 x_14 = x_7;
}
x_15 = lean::cnstr_get(x_12, 1);
lean::inc(x_15);
lean::dec(x_12);
if (lean::obj_tag(x_15) == 0)
{
obj* x_20; obj* x_21; 
lean::dec(x_14);
lean::dec(x_15);
x_20 = lean::box(0);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_1);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_24; 
x_22 = lean::cnstr_get(x_15, 0);
lean::inc(x_22);
x_24 = lean::cnstr_get(x_15, 1);
lean::inc(x_24);
lean::dec(x_15);
if (lean::obj_tag(x_24) == 0)
{
obj* x_28; obj* x_29; obj* x_31; obj* x_32; obj* x_33; 
lean::dec(x_24);
x_28 = l_lean_parser_term_paren__special_has__view;
x_29 = lean::cnstr_get(x_28, 0);
lean::inc(x_29);
x_31 = lean::apply_1(x_29, x_22);
if (lean::is_scalar(x_14)) {
 x_32 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_32 = x_14;
}
lean::cnstr_set(x_32, 0, x_31);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_1);
lean::cnstr_set(x_33, 1, x_32);
return x_33;
}
else
{
obj* x_37; obj* x_39; 
lean::dec(x_22);
lean::dec(x_14);
lean::dec(x_24);
x_37 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_37);
x_39 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_39, 0, x_1);
lean::cnstr_set(x_39, 1, x_37);
return x_39;
}
}
}
}
else
{
obj* x_40; obj* x_43; 
x_40 = lean::cnstr_get(x_0, 0);
lean::inc(x_40);
lean::dec(x_0);
x_43 = l_lean_parser_syntax_as__node___main(x_40);
if (lean::obj_tag(x_43) == 0)
{
obj* x_45; obj* x_47; 
lean::dec(x_43);
x_45 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_45);
x_47 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_47, 0, x_1);
lean::cnstr_set(x_47, 1, x_45);
return x_47;
}
else
{
obj* x_48; obj* x_50; obj* x_51; 
x_48 = lean::cnstr_get(x_43, 0);
lean::inc(x_48);
if (lean::is_shared(x_43)) {
 lean::dec(x_43);
 x_50 = lean::box(0);
} else {
 lean::cnstr_release(x_43, 0);
 x_50 = x_43;
}
x_51 = lean::cnstr_get(x_48, 1);
lean::inc(x_51);
lean::dec(x_48);
if (lean::obj_tag(x_51) == 0)
{
obj* x_56; obj* x_57; 
lean::dec(x_50);
lean::dec(x_51);
x_56 = lean::box(0);
x_57 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_57, 0, x_1);
lean::cnstr_set(x_57, 1, x_56);
return x_57;
}
else
{
obj* x_58; obj* x_60; 
x_58 = lean::cnstr_get(x_51, 0);
lean::inc(x_58);
x_60 = lean::cnstr_get(x_51, 1);
lean::inc(x_60);
lean::dec(x_51);
if (lean::obj_tag(x_60) == 0)
{
obj* x_64; obj* x_65; obj* x_67; obj* x_68; obj* x_69; 
lean::dec(x_60);
x_64 = l_lean_parser_term_paren__special_has__view;
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
x_67 = lean::apply_1(x_65, x_58);
if (lean::is_scalar(x_50)) {
 x_68 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_68 = x_50;
}
lean::cnstr_set(x_68, 0, x_67);
x_69 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_69, 0, x_1);
lean::cnstr_set(x_69, 1, x_68);
return x_69;
}
else
{
obj* x_73; obj* x_75; 
lean::dec(x_50);
lean::dec(x_58);
lean::dec(x_60);
x_73 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_73);
x_75 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_75, 0, x_1);
lean::cnstr_set(x_75, 1, x_73);
return x_75;
}
}
}
}
}
}
}
obj* l_lean_parser_term_paren__content_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
if (lean::obj_tag(x_3) == 0)
{
obj* x_7; obj* x_9; obj* x_10; obj* x_12; 
lean::dec(x_3);
x_7 = l_lean_parser_detail__ident_has__view_x_27___lambda__2___closed__1;
lean::inc(x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_1);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_lean_parser_term_paren__content;
lean::inc(x_10);
x_12 = l_lean_parser_syntax_mk__node(x_10, x_9);
return x_12;
}
else
{
obj* x_13; obj* x_16; obj* x_17; obj* x_18; obj* x_20; obj* x_22; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_30; 
x_13 = lean::cnstr_get(x_3, 0);
lean::inc(x_13);
lean::dec(x_3);
x_16 = lean::box(0);
x_17 = l_lean_parser_term_paren__special_has__view;
x_18 = lean::cnstr_get(x_17, 1);
lean::inc(x_18);
x_20 = lean::apply_1(x_18, x_13);
lean::inc(x_16);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_16);
x_23 = l_lean_parser_no__kind;
lean::inc(x_23);
x_25 = l_lean_parser_syntax_mk__node(x_23, x_22);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_16);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_1);
lean::cnstr_set(x_27, 1, x_26);
x_28 = l_lean_parser_term_paren__content;
lean::inc(x_28);
x_30 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_30;
}
}
}
obj* _init_l_lean_parser_term_paren__content_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_paren__content_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_paren() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("paren");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_paren_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_paren_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_paren_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_paren_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__2;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; obj* x_35; obj* x_36; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_38; 
x_38 = lean::box(3);
x_35 = x_1;
x_36 = x_38;
goto lbl_37;
}
else
{
obj* x_39; obj* x_41; 
x_39 = lean::cnstr_get(x_1, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_1, 1);
lean::inc(x_41);
lean::dec(x_1);
x_35 = x_41;
x_36 = x_39;
goto lbl_37;
}
lbl_34:
{
switch (lean::obj_tag(x_33)) {
case 0:
{
obj* x_44; obj* x_47; obj* x_48; 
x_44 = lean::cnstr_get(x_33, 0);
lean::inc(x_44);
lean::dec(x_33);
x_47 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_47, 0, x_44);
x_48 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_48, 0, x_20);
lean::cnstr_set(x_48, 1, x_32);
lean::cnstr_set(x_48, 2, x_47);
return x_48;
}
case 1:
{
obj* x_50; obj* x_51; 
lean::dec(x_33);
x_50 = lean::box(0);
x_51 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_51, 0, x_20);
lean::cnstr_set(x_51, 1, x_32);
lean::cnstr_set(x_51, 2, x_50);
return x_51;
}
case 2:
{
obj* x_53; obj* x_54; 
lean::dec(x_33);
x_53 = lean::box(0);
x_54 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_54, 0, x_20);
lean::cnstr_set(x_54, 1, x_32);
lean::cnstr_set(x_54, 2, x_53);
return x_54;
}
default:
{
obj* x_56; obj* x_57; 
lean::dec(x_33);
x_56 = lean::box(0);
x_57 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_57, 0, x_20);
lean::cnstr_set(x_57, 1, x_32);
lean::cnstr_set(x_57, 2, x_56);
return x_57;
}
}
}
lbl_37:
{
obj* x_58; 
x_58 = l_lean_parser_syntax_as__node___main(x_36);
if (lean::obj_tag(x_58) == 0)
{
lean::dec(x_58);
if (lean::obj_tag(x_35) == 0)
{
obj* x_61; obj* x_62; obj* x_64; 
lean::dec(x_35);
x_61 = lean::box(0);
x_62 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
lean::inc(x_62);
x_64 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_64, 0, x_20);
lean::cnstr_set(x_64, 1, x_62);
lean::cnstr_set(x_64, 2, x_61);
return x_64;
}
else
{
obj* x_65; obj* x_68; 
x_65 = lean::cnstr_get(x_35, 0);
lean::inc(x_65);
lean::dec(x_35);
x_68 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
x_32 = x_68;
x_33 = x_65;
goto lbl_34;
}
}
else
{
obj* x_70; obj* x_72; obj* x_73; 
x_70 = lean::cnstr_get(x_58, 0);
lean::inc(x_70);
if (lean::is_shared(x_58)) {
 lean::dec(x_58);
 x_72 = lean::box(0);
} else {
 lean::cnstr_release(x_58, 0);
 x_72 = x_58;
}
x_73 = lean::cnstr_get(x_70, 1);
lean::inc(x_73);
lean::dec(x_70);
if (lean::obj_tag(x_73) == 0)
{
obj* x_78; 
lean::dec(x_72);
lean::dec(x_73);
x_78 = lean::box(0);
if (lean::obj_tag(x_35) == 0)
{
obj* x_81; 
lean::dec(x_35);
lean::inc(x_78);
x_81 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_81, 0, x_20);
lean::cnstr_set(x_81, 1, x_78);
lean::cnstr_set(x_81, 2, x_78);
return x_81;
}
else
{
obj* x_82; 
x_82 = lean::cnstr_get(x_35, 0);
lean::inc(x_82);
lean::dec(x_35);
x_32 = x_78;
x_33 = x_82;
goto lbl_34;
}
}
else
{
obj* x_85; obj* x_87; 
x_85 = lean::cnstr_get(x_73, 0);
lean::inc(x_85);
x_87 = lean::cnstr_get(x_73, 1);
lean::inc(x_87);
lean::dec(x_73);
if (lean::obj_tag(x_87) == 0)
{
obj* x_91; obj* x_92; obj* x_94; obj* x_95; 
lean::dec(x_87);
x_91 = l_lean_parser_term_paren__content_has__view;
x_92 = lean::cnstr_get(x_91, 0);
lean::inc(x_92);
x_94 = lean::apply_1(x_92, x_85);
if (lean::is_scalar(x_72)) {
 x_95 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_95 = x_72;
}
lean::cnstr_set(x_95, 0, x_94);
if (lean::obj_tag(x_35) == 0)
{
obj* x_97; obj* x_98; 
lean::dec(x_35);
x_97 = lean::box(0);
x_98 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_98, 0, x_20);
lean::cnstr_set(x_98, 1, x_95);
lean::cnstr_set(x_98, 2, x_97);
return x_98;
}
else
{
obj* x_99; 
x_99 = lean::cnstr_get(x_35, 0);
lean::inc(x_99);
lean::dec(x_35);
x_32 = x_95;
x_33 = x_99;
goto lbl_34;
}
}
else
{
lean::dec(x_85);
lean::dec(x_87);
lean::dec(x_72);
if (lean::obj_tag(x_35) == 0)
{
obj* x_106; obj* x_107; obj* x_109; 
lean::dec(x_35);
x_106 = lean::box(0);
x_107 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
lean::inc(x_107);
x_109 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_109, 0, x_20);
lean::cnstr_set(x_109, 1, x_107);
lean::cnstr_set(x_109, 2, x_106);
return x_109;
}
else
{
obj* x_110; obj* x_113; 
x_110 = lean::cnstr_get(x_35, 0);
lean::inc(x_110);
lean::dec(x_35);
x_113 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
lean::inc(x_113);
x_32 = x_113;
x_33 = x_110;
goto lbl_34;
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_term_paren__content_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; obj* x_20; obj* x_21; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_23; 
x_23 = lean::box(3);
x_20 = x_0;
x_21 = x_23;
goto lbl_22;
}
else
{
obj* x_24; obj* x_26; 
x_24 = lean::cnstr_get(x_0, 0);
lean::inc(x_24);
x_26 = lean::cnstr_get(x_0, 1);
lean::inc(x_26);
lean::dec(x_0);
x_20 = x_26;
x_21 = x_24;
goto lbl_22;
}
lbl_19:
{
switch (lean::obj_tag(x_18)) {
case 0:
{
obj* x_29; obj* x_32; obj* x_33; 
x_29 = lean::cnstr_get(x_18, 0);
lean::inc(x_29);
lean::dec(x_18);
x_32 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_32, 0, x_29);
x_33 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_33, 0, x_5);
lean::cnstr_set(x_33, 1, x_17);
lean::cnstr_set(x_33, 2, x_32);
return x_33;
}
case 1:
{
obj* x_35; obj* x_36; 
lean::dec(x_18);
x_35 = lean::box(0);
x_36 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_36, 0, x_5);
lean::cnstr_set(x_36, 1, x_17);
lean::cnstr_set(x_36, 2, x_35);
return x_36;
}
case 2:
{
obj* x_38; obj* x_39; 
lean::dec(x_18);
x_38 = lean::box(0);
x_39 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_39, 0, x_5);
lean::cnstr_set(x_39, 1, x_17);
lean::cnstr_set(x_39, 2, x_38);
return x_39;
}
default:
{
obj* x_41; obj* x_42; 
lean::dec(x_18);
x_41 = lean::box(0);
x_42 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_42, 0, x_5);
lean::cnstr_set(x_42, 1, x_17);
lean::cnstr_set(x_42, 2, x_41);
return x_42;
}
}
}
lbl_22:
{
obj* x_43; 
x_43 = l_lean_parser_syntax_as__node___main(x_21);
if (lean::obj_tag(x_43) == 0)
{
lean::dec(x_43);
if (lean::obj_tag(x_20) == 0)
{
obj* x_46; obj* x_47; obj* x_49; 
lean::dec(x_20);
x_46 = lean::box(0);
x_47 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
x_49 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_49, 0, x_5);
lean::cnstr_set(x_49, 1, x_47);
lean::cnstr_set(x_49, 2, x_46);
return x_49;
}
else
{
obj* x_50; obj* x_53; 
x_50 = lean::cnstr_get(x_20, 0);
lean::inc(x_50);
lean::dec(x_20);
x_53 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
lean::inc(x_53);
x_17 = x_53;
x_18 = x_50;
goto lbl_19;
}
}
else
{
obj* x_55; obj* x_57; obj* x_58; 
x_55 = lean::cnstr_get(x_43, 0);
lean::inc(x_55);
if (lean::is_shared(x_43)) {
 lean::dec(x_43);
 x_57 = lean::box(0);
} else {
 lean::cnstr_release(x_43, 0);
 x_57 = x_43;
}
x_58 = lean::cnstr_get(x_55, 1);
lean::inc(x_58);
lean::dec(x_55);
if (lean::obj_tag(x_58) == 0)
{
obj* x_63; 
lean::dec(x_58);
lean::dec(x_57);
x_63 = lean::box(0);
if (lean::obj_tag(x_20) == 0)
{
obj* x_66; 
lean::dec(x_20);
lean::inc(x_63);
x_66 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_66, 0, x_5);
lean::cnstr_set(x_66, 1, x_63);
lean::cnstr_set(x_66, 2, x_63);
return x_66;
}
else
{
obj* x_67; 
x_67 = lean::cnstr_get(x_20, 0);
lean::inc(x_67);
lean::dec(x_20);
x_17 = x_63;
x_18 = x_67;
goto lbl_19;
}
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_58, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_58, 1);
lean::inc(x_72);
lean::dec(x_58);
if (lean::obj_tag(x_72) == 0)
{
obj* x_76; obj* x_77; obj* x_79; obj* x_80; 
lean::dec(x_72);
x_76 = l_lean_parser_term_paren__content_has__view;
x_77 = lean::cnstr_get(x_76, 0);
lean::inc(x_77);
x_79 = lean::apply_1(x_77, x_70);
if (lean::is_scalar(x_57)) {
 x_80 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_80 = x_57;
}
lean::cnstr_set(x_80, 0, x_79);
if (lean::obj_tag(x_20) == 0)
{
obj* x_82; obj* x_83; 
lean::dec(x_20);
x_82 = lean::box(0);
x_83 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_83, 0, x_5);
lean::cnstr_set(x_83, 1, x_80);
lean::cnstr_set(x_83, 2, x_82);
return x_83;
}
else
{
obj* x_84; 
x_84 = lean::cnstr_get(x_20, 0);
lean::inc(x_84);
lean::dec(x_20);
x_17 = x_80;
x_18 = x_84;
goto lbl_19;
}
}
else
{
lean::dec(x_57);
lean::dec(x_72);
lean::dec(x_70);
if (lean::obj_tag(x_20) == 0)
{
obj* x_91; obj* x_92; obj* x_94; 
lean::dec(x_20);
x_91 = lean::box(0);
x_92 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
lean::inc(x_92);
x_94 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_94, 0, x_5);
lean::cnstr_set(x_94, 1, x_92);
lean::cnstr_set(x_94, 2, x_91);
return x_94;
}
else
{
obj* x_95; obj* x_98; 
x_95 = lean::cnstr_get(x_20, 0);
lean::inc(x_95);
lean::dec(x_20);
x_98 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
lean::inc(x_98);
x_17 = x_98;
x_18 = x_95;
goto lbl_19;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_paren_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_19; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_8);
x_10 = l_option_map___rarg(x_8, x_1);
x_11 = lean::box(3);
lean::inc(x_11);
x_13 = l_option_get__or__else___main___rarg(x_10, x_11);
lean::inc(x_8);
x_15 = l_option_map___rarg(x_8, x_5);
x_16 = l_option_get__or__else___main___rarg(x_15, x_11);
x_17 = lean::box(0);
lean::inc(x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_16);
lean::cnstr_set(x_19, 1, x_17);
if (lean::obj_tag(x_3) == 0)
{
obj* x_22; obj* x_24; obj* x_25; obj* x_26; obj* x_28; 
lean::dec(x_17);
lean::dec(x_3);
x_22 = l_lean_parser_combinators_many___rarg___closed__1;
lean::inc(x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_22);
lean::cnstr_set(x_24, 1, x_19);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_13);
lean::cnstr_set(x_25, 1, x_24);
x_26 = l_lean_parser_term_paren;
lean::inc(x_26);
x_28 = l_lean_parser_syntax_mk__node(x_26, x_25);
return x_28;
}
else
{
obj* x_29; obj* x_32; obj* x_33; obj* x_35; obj* x_36; obj* x_37; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_44; 
x_29 = lean::cnstr_get(x_3, 0);
lean::inc(x_29);
lean::dec(x_3);
x_32 = l_lean_parser_term_paren__content_has__view;
x_33 = lean::cnstr_get(x_32, 1);
lean::inc(x_33);
x_35 = lean::apply_1(x_33, x_29);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_17);
x_37 = l_lean_parser_no__kind;
lean::inc(x_37);
x_39 = l_lean_parser_syntax_mk__node(x_37, x_36);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_19);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_13);
lean::cnstr_set(x_41, 1, x_40);
x_42 = l_lean_parser_term_paren;
lean::inc(x_42);
x_44 = l_lean_parser_syntax_mk__node(x_42, x_41);
return x_44;
}
}
}
obj* _init_l_lean_parser_term_paren_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_paren_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_paren_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_paren;
x_6 = l_lean_parser_term_paren_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_paren_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_15; unsigned char x_16; obj* x_17; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_27; obj* x_28; obj* x_29; obj* x_31; obj* x_33; obj* x_36; obj* x_37; obj* x_38; obj* x_40; obj* x_42; obj* x_43; obj* x_45; obj* x_47; obj* x_48; obj* x_50; obj* x_51; obj* x_53; obj* x_54; obj* x_55; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; 
x_0 = lean::mk_string("(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_nat_obj(0u);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::mk_string(", ");
x_11 = l_string_trim(x_10);
lean::inc(x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_13, 0, x_11);
lean::inc(x_7);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_15, 0, x_11);
lean::closure_set(x_15, 1, x_7);
lean::closure_set(x_15, 2, x_13);
x_16 = 0;
x_17 = lean::box(x_16);
lean::inc(x_15);
lean::inc(x_9);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser___spec__1___boxed), 8, 3);
lean::closure_set(x_20, 0, x_9);
lean::closure_set(x_20, 1, x_15);
lean::closure_set(x_20, 2, x_17);
x_21 = lean::box(0);
lean::inc(x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_20);
lean::cnstr_set(x_23, 1, x_21);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_15);
lean::cnstr_set(x_24, 1, x_23);
x_25 = l_lean_parser_term_tuple;
lean::inc(x_25);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_27, 0, x_25);
lean::closure_set(x_27, 1, x_24);
x_28 = lean::mk_string(" : ");
x_29 = l_string_trim(x_28);
lean::inc(x_29);
x_31 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_31, 0, x_29);
lean::inc(x_7);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_33, 0, x_29);
lean::closure_set(x_33, 1, x_7);
lean::closure_set(x_33, 2, x_31);
lean::inc(x_21);
lean::inc(x_9);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_9);
lean::cnstr_set(x_36, 1, x_21);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_33);
lean::cnstr_set(x_37, 1, x_36);
x_38 = l_lean_parser_term_typed;
lean::inc(x_38);
x_40 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_40, 0, x_38);
lean::closure_set(x_40, 1, x_37);
lean::inc(x_21);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_40);
lean::cnstr_set(x_42, 1, x_21);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_27);
lean::cnstr_set(x_43, 1, x_42);
lean::inc(x_7);
x_45 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_45, 0, x_43);
lean::closure_set(x_45, 1, x_7);
lean::inc(x_21);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_45);
lean::cnstr_set(x_47, 1, x_21);
x_48 = l_lean_parser_term_paren__special;
lean::inc(x_48);
x_50 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_50, 0, x_48);
lean::closure_set(x_50, 1, x_47);
x_51 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_51, 0, x_50);
lean::inc(x_21);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_51);
lean::cnstr_set(x_53, 1, x_21);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_9);
lean::cnstr_set(x_54, 1, x_53);
x_55 = l_lean_parser_term_paren__content;
lean::inc(x_55);
x_57 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_57, 0, x_55);
lean::closure_set(x_57, 1, x_54);
x_58 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_58, 0, x_57);
x_59 = lean::mk_string(")");
x_60 = l_string_trim(x_59);
lean::inc(x_60);
x_62 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_62, 0, x_60);
x_63 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_63, 0, x_60);
lean::closure_set(x_63, 1, x_7);
lean::closure_set(x_63, 2, x_62);
x_64 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_64, 0, x_63);
lean::cnstr_set(x_64, 1, x_21);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_58);
lean::cnstr_set(x_65, 1, x_64);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_6);
lean::cnstr_set(x_66, 1, x_65);
return x_66;
}
}
obj* l___private_4028586963__sep__by__aux___main___at_lean_parser_term_paren_parser___spec__2(obj* x_0, obj* x_1, unsigned char x_2, unsigned char x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9, obj* x_10) {
_start:
{
obj* x_11; obj* x_12; 
x_11 = lean::mk_nat_obj(0u);
x_12 = lean::nat_dec_eq(x_5, x_11);
lean::dec(x_11);
if (lean::obj_tag(x_12) == 0)
{
obj* x_15; obj* x_16; obj* x_19; obj* x_20; obj* x_22; obj* x_23; 
lean::dec(x_12);
x_15 = lean::mk_nat_obj(1u);
x_16 = lean::nat_sub(x_5, x_15);
lean::dec(x_15);
lean::dec(x_5);
if (x_3 == 0)
{
obj* x_29; obj* x_30; obj* x_32; 
lean::inc(x_8);
lean::inc(x_7);
lean::inc(x_6);
lean::inc(x_0);
x_29 = lean::apply_5(x_0, x_6, x_7, x_8, x_9, x_10);
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_29, 1);
lean::inc(x_32);
lean::dec(x_29);
if (lean::obj_tag(x_30) == 0)
{
obj* x_35; obj* x_37; obj* x_39; obj* x_41; obj* x_42; obj* x_43; obj* x_45; obj* x_46; 
x_35 = lean::cnstr_get(x_30, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_30, 1);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_30, 2);
lean::inc(x_39);
if (lean::is_shared(x_30)) {
 lean::dec(x_30);
 x_41 = lean::box(0);
} else {
 lean::cnstr_release(x_30, 0);
 lean::cnstr_release(x_30, 1);
 lean::cnstr_release(x_30, 2);
 x_41 = x_30;
}
x_42 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_42, 0, x_35);
x_43 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_43);
if (lean::is_scalar(x_41)) {
 x_45 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_45 = x_41;
}
lean::cnstr_set(x_45, 0, x_42);
lean::cnstr_set(x_45, 1, x_37);
lean::cnstr_set(x_45, 2, x_43);
x_46 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_39, x_45);
if (lean::obj_tag(x_46) == 0)
{
x_19 = x_46;
x_20 = x_32;
goto lbl_21;
}
else
{
obj* x_47; unsigned char x_49; obj* x_50; obj* x_51; obj* x_53; obj* x_55; obj* x_57; obj* x_60; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_68; obj* x_69; obj* x_70; 
x_47 = lean::cnstr_get(x_46, 0);
lean::inc(x_47);
x_49 = lean::cnstr_get_scalar<unsigned char>(x_46, sizeof(void*)*1);
if (lean::is_shared(x_46)) {
 lean::dec(x_46);
 x_50 = lean::box(0);
} else {
 lean::cnstr_release(x_46, 0);
 x_50 = x_46;
}
x_51 = lean::cnstr_get(x_47, 0);
lean::inc(x_51);
x_53 = lean::cnstr_get(x_47, 1);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_47, 2);
lean::inc(x_55);
x_57 = lean::cnstr_get(x_47, 3);
lean::inc(x_57);
lean::dec(x_47);
x_60 = l_option_get___main___at_lean_parser_run___spec__2(x_57);
lean::inc(x_4);
x_62 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_62, 0, x_60);
lean::cnstr_set(x_62, 1, x_4);
x_63 = lean::box(3);
x_64 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_64, 0, x_63);
lean::cnstr_set(x_64, 1, x_62);
x_65 = l_list_reverse___rarg(x_64);
x_66 = l_lean_parser_no__kind;
lean::inc(x_66);
x_68 = l_lean_parser_syntax_mk__node(x_66, x_65);
x_69 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_69, 0, x_68);
x_70 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_70, 0, x_51);
lean::cnstr_set(x_70, 1, x_53);
lean::cnstr_set(x_70, 2, x_55);
lean::cnstr_set(x_70, 3, x_69);
if (x_49 == 0)
{
unsigned char x_71; obj* x_72; obj* x_73; 
x_71 = 0;
if (lean::is_scalar(x_50)) {
 x_72 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_72 = x_50;
}
lean::cnstr_set(x_72, 0, x_70);
lean::cnstr_set_scalar(x_72, sizeof(void*)*1, x_71);
x_73 = x_72;
x_19 = x_73;
x_20 = x_32;
goto lbl_21;
}
else
{
obj* x_74; obj* x_75; 
if (lean::is_scalar(x_50)) {
 x_74 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_74 = x_50;
}
lean::cnstr_set(x_74, 0, x_70);
lean::cnstr_set_scalar(x_74, sizeof(void*)*1, x_49);
x_75 = x_74;
x_19 = x_75;
x_20 = x_32;
goto lbl_21;
}
}
}
else
{
obj* x_76; unsigned char x_78; obj* x_79; obj* x_80; obj* x_82; obj* x_84; obj* x_86; obj* x_89; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_97; obj* x_98; obj* x_99; 
x_76 = lean::cnstr_get(x_30, 0);
lean::inc(x_76);
x_78 = lean::cnstr_get_scalar<unsigned char>(x_30, sizeof(void*)*1);
if (lean::is_shared(x_30)) {
 lean::dec(x_30);
 x_79 = lean::box(0);
} else {
 lean::cnstr_release(x_30, 0);
 x_79 = x_30;
}
x_80 = lean::cnstr_get(x_76, 0);
lean::inc(x_80);
x_82 = lean::cnstr_get(x_76, 1);
lean::inc(x_82);
x_84 = lean::cnstr_get(x_76, 2);
lean::inc(x_84);
x_86 = lean::cnstr_get(x_76, 3);
lean::inc(x_86);
lean::dec(x_76);
x_89 = l_option_get___main___at_lean_parser_run___spec__2(x_86);
lean::inc(x_4);
x_91 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_91, 0, x_89);
lean::cnstr_set(x_91, 1, x_4);
x_92 = lean::box(3);
x_93 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_93, 0, x_92);
lean::cnstr_set(x_93, 1, x_91);
x_94 = l_list_reverse___rarg(x_93);
x_95 = l_lean_parser_no__kind;
lean::inc(x_95);
x_97 = l_lean_parser_syntax_mk__node(x_95, x_94);
x_98 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_98, 0, x_97);
x_99 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_99, 0, x_80);
lean::cnstr_set(x_99, 1, x_82);
lean::cnstr_set(x_99, 2, x_84);
lean::cnstr_set(x_99, 3, x_98);
if (x_78 == 0)
{
unsigned char x_100; obj* x_101; obj* x_102; 
x_100 = 0;
if (lean::is_scalar(x_79)) {
 x_101 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_101 = x_79;
}
lean::cnstr_set(x_101, 0, x_99);
lean::cnstr_set_scalar(x_101, sizeof(void*)*1, x_100);
x_102 = x_101;
x_19 = x_102;
x_20 = x_32;
goto lbl_21;
}
else
{
obj* x_103; obj* x_104; 
if (lean::is_scalar(x_79)) {
 x_103 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_103 = x_79;
}
lean::cnstr_set(x_103, 0, x_99);
lean::cnstr_set_scalar(x_103, sizeof(void*)*1, x_78);
x_104 = x_103;
x_19 = x_104;
x_20 = x_32;
goto lbl_21;
}
}
}
else
{
obj* x_110; obj* x_111; obj* x_113; obj* x_116; 
lean::inc(x_9);
lean::inc(x_8);
lean::inc(x_7);
lean::inc(x_6);
lean::inc(x_0);
x_110 = lean::apply_5(x_0, x_6, x_7, x_8, x_9, x_10);
x_111 = lean::cnstr_get(x_110, 0);
lean::inc(x_111);
x_113 = lean::cnstr_get(x_110, 1);
lean::inc(x_113);
lean::dec(x_110);
x_116 = lean::box(0);
if (lean::obj_tag(x_111) == 0)
{
obj* x_117; obj* x_119; obj* x_121; obj* x_123; obj* x_124; obj* x_125; obj* x_127; obj* x_128; 
x_117 = lean::cnstr_get(x_111, 0);
lean::inc(x_117);
x_119 = lean::cnstr_get(x_111, 1);
lean::inc(x_119);
x_121 = lean::cnstr_get(x_111, 2);
lean::inc(x_121);
if (lean::is_shared(x_111)) {
 lean::dec(x_111);
 x_123 = lean::box(0);
} else {
 lean::cnstr_release(x_111, 0);
 lean::cnstr_release(x_111, 1);
 lean::cnstr_release(x_111, 2);
 x_123 = x_111;
}
x_124 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_124, 0, x_117);
x_125 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_125);
if (lean::is_scalar(x_123)) {
 x_127 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_127 = x_123;
}
lean::cnstr_set(x_127, 0, x_124);
lean::cnstr_set(x_127, 1, x_119);
lean::cnstr_set(x_127, 2, x_125);
x_128 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_121, x_127);
if (lean::obj_tag(x_128) == 0)
{
lean::dec(x_116);
lean::dec(x_9);
x_22 = x_128;
x_23 = x_113;
goto lbl_24;
}
else
{
obj* x_131; unsigned char x_133; 
x_131 = lean::cnstr_get(x_128, 0);
lean::inc(x_131);
x_133 = lean::cnstr_get_scalar<unsigned char>(x_128, sizeof(void*)*1);
if (x_133 == 0)
{
obj* x_135; obj* x_138; obj* x_140; obj* x_141; obj* x_142; 
lean::dec(x_128);
x_135 = lean::cnstr_get(x_131, 2);
lean::inc(x_135);
lean::dec(x_131);
x_138 = l_mjoin___rarg___closed__1;
lean::inc(x_138);
x_140 = lean::alloc_closure(reinterpret_cast<void*>(l_function_comp___rarg), 3, 2);
lean::closure_set(x_140, 0, x_135);
lean::closure_set(x_140, 1, x_138);
x_141 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_141, 0, x_140);
x_142 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_142, 0, x_116);
lean::cnstr_set(x_142, 1, x_9);
lean::cnstr_set(x_142, 2, x_141);
x_22 = x_142;
x_23 = x_113;
goto lbl_24;
}
else
{
lean::dec(x_116);
lean::dec(x_131);
lean::dec(x_9);
x_22 = x_128;
x_23 = x_113;
goto lbl_24;
}
}
}
else
{
obj* x_146; unsigned char x_148; obj* x_149; 
x_146 = lean::cnstr_get(x_111, 0);
lean::inc(x_146);
x_148 = lean::cnstr_get_scalar<unsigned char>(x_111, sizeof(void*)*1);
if (lean::is_shared(x_111)) {
 lean::dec(x_111);
 x_149 = lean::box(0);
} else {
 lean::cnstr_release(x_111, 0);
 x_149 = x_111;
}
if (x_148 == 0)
{
obj* x_151; obj* x_154; obj* x_156; obj* x_157; obj* x_158; 
lean::dec(x_149);
x_151 = lean::cnstr_get(x_146, 2);
lean::inc(x_151);
lean::dec(x_146);
x_154 = l_mjoin___rarg___closed__1;
lean::inc(x_154);
x_156 = lean::alloc_closure(reinterpret_cast<void*>(l_function_comp___rarg), 3, 2);
lean::closure_set(x_156, 0, x_151);
lean::closure_set(x_156, 1, x_154);
x_157 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_157, 0, x_156);
x_158 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_158, 0, x_116);
lean::cnstr_set(x_158, 1, x_9);
lean::cnstr_set(x_158, 2, x_157);
x_22 = x_158;
x_23 = x_113;
goto lbl_24;
}
else
{
obj* x_161; obj* x_162; 
lean::dec(x_116);
lean::dec(x_9);
if (lean::is_scalar(x_149)) {
 x_161 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_161 = x_149;
}
lean::cnstr_set(x_161, 0, x_146);
lean::cnstr_set_scalar(x_161, sizeof(void*)*1, x_148);
x_162 = x_161;
x_22 = x_162;
x_23 = x_113;
goto lbl_24;
}
}
}
lbl_21:
{
if (lean::obj_tag(x_19) == 0)
{
obj* x_163; obj* x_165; obj* x_167; obj* x_169; 
x_163 = lean::cnstr_get(x_19, 0);
lean::inc(x_163);
x_165 = lean::cnstr_get(x_19, 1);
lean::inc(x_165);
x_167 = lean::cnstr_get(x_19, 2);
lean::inc(x_167);
if (lean::is_shared(x_19)) {
 lean::dec(x_19);
 x_169 = lean::box(0);
} else {
 lean::cnstr_release(x_19, 0);
 lean::cnstr_release(x_19, 1);
 lean::cnstr_release(x_19, 2);
 x_169 = x_19;
}
if (lean::obj_tag(x_163) == 0)
{
obj* x_177; obj* x_178; obj* x_180; obj* x_181; obj* x_183; obj* x_184; obj* x_185; 
lean::dec(x_163);
lean::dec(x_8);
lean::dec(x_6);
lean::dec(x_7);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_16);
x_177 = l_list_reverse___rarg(x_4);
x_178 = l_lean_parser_no__kind;
lean::inc(x_178);
x_180 = l_lean_parser_syntax_mk__node(x_178, x_177);
x_181 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_181);
if (lean::is_scalar(x_169)) {
 x_183 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_183 = x_169;
}
lean::cnstr_set(x_183, 0, x_180);
lean::cnstr_set(x_183, 1, x_165);
lean::cnstr_set(x_183, 2, x_181);
x_184 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_167, x_183);
x_185 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_185, 0, x_184);
lean::cnstr_set(x_185, 1, x_20);
return x_185;
}
else
{
obj* x_186; obj* x_188; obj* x_189; obj* x_190; obj* x_197; obj* x_198; obj* x_200; obj* x_203; obj* x_204; 
x_186 = lean::cnstr_get(x_163, 0);
lean::inc(x_186);
if (lean::is_shared(x_163)) {
 lean::dec(x_163);
 x_188 = lean::box(0);
} else {
 lean::cnstr_release(x_163, 0);
 x_188 = x_163;
}
lean::inc(x_165);
lean::inc(x_8);
lean::inc(x_7);
lean::inc(x_6);
lean::inc(x_1);
x_197 = lean::apply_5(x_1, x_6, x_7, x_8, x_165, x_20);
x_198 = lean::cnstr_get(x_197, 0);
lean::inc(x_198);
x_200 = lean::cnstr_get(x_197, 1);
lean::inc(x_200);
lean::dec(x_197);
x_203 = lean::box(0);
x_204 = l_lean_parser_parsec__t_try__mk__res___rarg(x_198);
if (lean::obj_tag(x_204) == 0)
{
obj* x_205; obj* x_207; obj* x_209; obj* x_211; obj* x_212; obj* x_213; obj* x_215; obj* x_216; 
x_205 = lean::cnstr_get(x_204, 0);
lean::inc(x_205);
x_207 = lean::cnstr_get(x_204, 1);
lean::inc(x_207);
x_209 = lean::cnstr_get(x_204, 2);
lean::inc(x_209);
if (lean::is_shared(x_204)) {
 lean::dec(x_204);
 x_211 = lean::box(0);
} else {
 lean::cnstr_release(x_204, 0);
 lean::cnstr_release(x_204, 1);
 lean::cnstr_release(x_204, 2);
 x_211 = x_204;
}
if (lean::is_scalar(x_188)) {
 x_212 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_212 = x_188;
}
lean::cnstr_set(x_212, 0, x_205);
x_213 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_213);
if (lean::is_scalar(x_211)) {
 x_215 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_215 = x_211;
}
lean::cnstr_set(x_215, 0, x_212);
lean::cnstr_set(x_215, 1, x_207);
lean::cnstr_set(x_215, 2, x_213);
x_216 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_209, x_215);
if (lean::obj_tag(x_216) == 0)
{
lean::dec(x_165);
lean::dec(x_203);
x_189 = x_216;
x_190 = x_200;
goto lbl_191;
}
else
{
obj* x_219; unsigned char x_221; 
x_219 = lean::cnstr_get(x_216, 0);
lean::inc(x_219);
x_221 = lean::cnstr_get_scalar<unsigned char>(x_216, sizeof(void*)*1);
if (x_221 == 0)
{
obj* x_223; obj* x_226; obj* x_228; obj* x_229; obj* x_230; 
lean::dec(x_216);
x_223 = lean::cnstr_get(x_219, 2);
lean::inc(x_223);
lean::dec(x_219);
x_226 = l_mjoin___rarg___closed__1;
lean::inc(x_226);
x_228 = lean::alloc_closure(reinterpret_cast<void*>(l_function_comp___rarg), 3, 2);
lean::closure_set(x_228, 0, x_223);
lean::closure_set(x_228, 1, x_226);
x_229 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_229, 0, x_228);
x_230 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_230, 0, x_203);
lean::cnstr_set(x_230, 1, x_165);
lean::cnstr_set(x_230, 2, x_229);
x_189 = x_230;
x_190 = x_200;
goto lbl_191;
}
else
{
lean::dec(x_165);
lean::dec(x_203);
lean::dec(x_219);
x_189 = x_216;
x_190 = x_200;
goto lbl_191;
}
}
}
else
{
obj* x_234; unsigned char x_236; obj* x_237; 
x_234 = lean::cnstr_get(x_204, 0);
lean::inc(x_234);
x_236 = lean::cnstr_get_scalar<unsigned char>(x_204, sizeof(void*)*1);
if (lean::is_shared(x_204)) {
 lean::dec(x_204);
 x_237 = lean::box(0);
} else {
 lean::cnstr_release(x_204, 0);
 x_237 = x_204;
}
if (x_236 == 0)
{
obj* x_239; obj* x_242; obj* x_244; obj* x_245; obj* x_246; 
lean::dec(x_237);
x_239 = lean::cnstr_get(x_234, 2);
lean::inc(x_239);
lean::dec(x_234);
x_242 = l_mjoin___rarg___closed__1;
lean::inc(x_242);
x_244 = lean::alloc_closure(reinterpret_cast<void*>(l_function_comp___rarg), 3, 2);
lean::closure_set(x_244, 0, x_239);
lean::closure_set(x_244, 1, x_242);
if (lean::is_scalar(x_188)) {
 x_245 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_245 = x_188;
}
lean::cnstr_set(x_245, 0, x_244);
x_246 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_246, 0, x_203);
lean::cnstr_set(x_246, 1, x_165);
lean::cnstr_set(x_246, 2, x_245);
x_189 = x_246;
x_190 = x_200;
goto lbl_191;
}
else
{
obj* x_250; obj* x_251; 
lean::dec(x_165);
lean::dec(x_203);
lean::dec(x_188);
if (lean::is_scalar(x_237)) {
 x_250 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_250 = x_237;
}
lean::cnstr_set(x_250, 0, x_234);
lean::cnstr_set_scalar(x_250, sizeof(void*)*1, x_236);
x_251 = x_250;
x_189 = x_251;
x_190 = x_200;
goto lbl_191;
}
}
lbl_191:
{
if (lean::obj_tag(x_189) == 0)
{
obj* x_252; obj* x_254; obj* x_256; 
x_252 = lean::cnstr_get(x_189, 0);
lean::inc(x_252);
x_254 = lean::cnstr_get(x_189, 1);
lean::inc(x_254);
x_256 = lean::cnstr_get(x_189, 2);
lean::inc(x_256);
lean::dec(x_189);
if (lean::obj_tag(x_252) == 0)
{
obj* x_266; obj* x_267; obj* x_268; obj* x_270; obj* x_271; obj* x_273; obj* x_274; obj* x_275; obj* x_276; 
lean::dec(x_8);
lean::dec(x_6);
lean::dec(x_7);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_16);
lean::dec(x_252);
x_266 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_266, 0, x_186);
lean::cnstr_set(x_266, 1, x_4);
x_267 = l_list_reverse___rarg(x_266);
x_268 = l_lean_parser_no__kind;
lean::inc(x_268);
x_270 = l_lean_parser_syntax_mk__node(x_268, x_267);
x_271 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_271);
if (lean::is_scalar(x_169)) {
 x_273 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_273 = x_169;
}
lean::cnstr_set(x_273, 0, x_270);
lean::cnstr_set(x_273, 1, x_254);
lean::cnstr_set(x_273, 2, x_271);
x_274 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_256, x_273);
x_275 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_167, x_274);
x_276 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_276, 0, x_275);
lean::cnstr_set(x_276, 1, x_190);
return x_276;
}
else
{
obj* x_278; obj* x_281; obj* x_282; obj* x_283; obj* x_284; obj* x_286; obj* x_288; obj* x_289; obj* x_290; obj* x_291; 
lean::dec(x_169);
x_278 = lean::cnstr_get(x_252, 0);
lean::inc(x_278);
lean::dec(x_252);
x_281 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_281, 0, x_186);
lean::cnstr_set(x_281, 1, x_4);
x_282 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_282, 0, x_278);
lean::cnstr_set(x_282, 1, x_281);
x_283 = l___private_4028586963__sep__by__aux___main___at_lean_parser_term_paren_parser___spec__2(x_0, x_1, x_2, x_2, x_282, x_16, x_6, x_7, x_8, x_254, x_190);
x_284 = lean::cnstr_get(x_283, 0);
lean::inc(x_284);
x_286 = lean::cnstr_get(x_283, 1);
lean::inc(x_286);
if (lean::is_shared(x_283)) {
 lean::dec(x_283);
 x_288 = lean::box(0);
} else {
 lean::cnstr_release(x_283, 0);
 lean::cnstr_release(x_283, 1);
 x_288 = x_283;
}
x_289 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_256, x_284);
x_290 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_167, x_289);
if (lean::is_scalar(x_288)) {
 x_291 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_291 = x_288;
}
lean::cnstr_set(x_291, 0, x_290);
lean::cnstr_set(x_291, 1, x_286);
return x_291;
}
}
else
{
obj* x_301; unsigned char x_303; obj* x_304; obj* x_305; obj* x_306; obj* x_307; obj* x_308; 
lean::dec(x_169);
lean::dec(x_8);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_7);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_16);
lean::dec(x_186);
x_301 = lean::cnstr_get(x_189, 0);
lean::inc(x_301);
x_303 = lean::cnstr_get_scalar<unsigned char>(x_189, sizeof(void*)*1);
if (lean::is_shared(x_189)) {
 lean::dec(x_189);
 x_304 = lean::box(0);
} else {
 lean::cnstr_release(x_189, 0);
 x_304 = x_189;
}
if (lean::is_scalar(x_304)) {
 x_305 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_305 = x_304;
}
lean::cnstr_set(x_305, 0, x_301);
lean::cnstr_set_scalar(x_305, sizeof(void*)*1, x_303);
x_306 = x_305;
x_307 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_167, x_306);
x_308 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_308, 0, x_307);
lean::cnstr_set(x_308, 1, x_190);
return x_308;
}
}
}
}
else
{
obj* x_316; unsigned char x_318; obj* x_319; obj* x_320; obj* x_321; obj* x_322; 
lean::dec(x_8);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_7);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_16);
x_316 = lean::cnstr_get(x_19, 0);
lean::inc(x_316);
x_318 = lean::cnstr_get_scalar<unsigned char>(x_19, sizeof(void*)*1);
if (lean::is_shared(x_19)) {
 lean::dec(x_19);
 x_319 = lean::box(0);
} else {
 lean::cnstr_release(x_19, 0);
 x_319 = x_19;
}
if (lean::is_scalar(x_319)) {
 x_320 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_320 = x_319;
}
lean::cnstr_set(x_320, 0, x_316);
lean::cnstr_set_scalar(x_320, sizeof(void*)*1, x_318);
x_321 = x_320;
x_322 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_322, 0, x_321);
lean::cnstr_set(x_322, 1, x_20);
return x_322;
}
}
lbl_24:
{
if (lean::obj_tag(x_22) == 0)
{
x_19 = x_22;
x_20 = x_23;
goto lbl_21;
}
else
{
obj* x_323; unsigned char x_325; obj* x_326; obj* x_327; obj* x_329; obj* x_331; obj* x_333; obj* x_336; obj* x_338; obj* x_339; obj* x_340; obj* x_341; obj* x_342; obj* x_344; obj* x_345; obj* x_346; 
x_323 = lean::cnstr_get(x_22, 0);
lean::inc(x_323);
x_325 = lean::cnstr_get_scalar<unsigned char>(x_22, sizeof(void*)*1);
if (lean::is_shared(x_22)) {
 lean::dec(x_22);
 x_326 = lean::box(0);
} else {
 lean::cnstr_release(x_22, 0);
 x_326 = x_22;
}
x_327 = lean::cnstr_get(x_323, 0);
lean::inc(x_327);
x_329 = lean::cnstr_get(x_323, 1);
lean::inc(x_329);
x_331 = lean::cnstr_get(x_323, 2);
lean::inc(x_331);
x_333 = lean::cnstr_get(x_323, 3);
lean::inc(x_333);
lean::dec(x_323);
x_336 = l_option_get___main___at_lean_parser_run___spec__2(x_333);
lean::inc(x_4);
x_338 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_338, 0, x_336);
lean::cnstr_set(x_338, 1, x_4);
x_339 = lean::box(3);
x_340 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_340, 0, x_339);
lean::cnstr_set(x_340, 1, x_338);
x_341 = l_list_reverse___rarg(x_340);
x_342 = l_lean_parser_no__kind;
lean::inc(x_342);
x_344 = l_lean_parser_syntax_mk__node(x_342, x_341);
x_345 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_345, 0, x_344);
x_346 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_346, 0, x_327);
lean::cnstr_set(x_346, 1, x_329);
lean::cnstr_set(x_346, 2, x_331);
lean::cnstr_set(x_346, 3, x_345);
if (x_325 == 0)
{
unsigned char x_347; obj* x_348; obj* x_349; 
x_347 = 0;
if (lean::is_scalar(x_326)) {
 x_348 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_348 = x_326;
}
lean::cnstr_set(x_348, 0, x_346);
lean::cnstr_set_scalar(x_348, sizeof(void*)*1, x_347);
x_349 = x_348;
x_19 = x_349;
x_20 = x_23;
goto lbl_21;
}
else
{
obj* x_350; obj* x_351; 
if (lean::is_scalar(x_326)) {
 x_350 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_350 = x_326;
}
lean::cnstr_set(x_350, 0, x_346);
lean::cnstr_set_scalar(x_350, sizeof(void*)*1, x_325);
x_351 = x_350;
x_19 = x_351;
x_20 = x_23;
goto lbl_21;
}
}
}
}
else
{
obj* x_357; obj* x_358; obj* x_359; obj* x_363; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_12);
x_357 = lean::box(0);
x_358 = l___private_1297690757__many1__aux___main___rarg___closed__1;
x_359 = l_mjoin___rarg___closed__1;
lean::inc(x_357);
lean::inc(x_359);
lean::inc(x_358);
x_363 = l_lean_parser_monad__parsec_error___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__4___rarg(x_358, x_359, x_357, x_357, x_6, x_7, x_8, x_9, x_10);
return x_363;
}
}
}
obj* l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser___spec__1(obj* x_0, obj* x_1, unsigned char x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; unsigned char x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_23; obj* x_24; 
x_8 = lean::string_iterator_remaining(x_6);
x_9 = lean::box(0);
x_10 = lean::mk_nat_obj(1u);
x_11 = lean::nat_add(x_8, x_10);
lean::dec(x_10);
lean::dec(x_8);
x_14 = 1;
x_15 = l___private_4028586963__sep__by__aux___main___at_lean_parser_term_paren_parser___spec__2(x_0, x_1, x_2, x_14, x_9, x_11, x_3, x_4, x_5, x_6, x_7);
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_15, 1);
lean::inc(x_18);
if (lean::is_shared(x_15)) {
 lean::dec(x_15);
 x_20 = lean::box(0);
} else {
 lean::cnstr_release(x_15, 0);
 lean::cnstr_release(x_15, 1);
 x_20 = x_15;
}
x_21 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_21);
x_23 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_16);
if (lean::is_scalar(x_20)) {
 x_24 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_24 = x_20;
}
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_18);
return x_24;
}
}
obj* l___private_4028586963__sep__by__aux___main___at_lean_parser_term_paren_parser___spec__2___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9, obj* x_10) {
_start:
{
unsigned char x_11; unsigned char x_12; obj* x_13; 
x_11 = lean::unbox(x_2);
x_12 = lean::unbox(x_3);
x_13 = l___private_4028586963__sep__by__aux___main___at_lean_parser_term_paren_parser___spec__2(x_0, x_1, x_11, x_12, x_4, x_5, x_6, x_7, x_8, x_9, x_10);
return x_13;
}
}
obj* l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser___spec__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
unsigned char x_8; obj* x_9; 
x_8 = lean::unbox(x_2);
x_9 = l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser___spec__1(x_0, x_1, x_8, x_3, x_4, x_5, x_6, x_7);
return x_9;
}
}
obj* _init_l_lean_parser_term_paren_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_15; unsigned char x_16; obj* x_17; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_27; obj* x_28; obj* x_29; obj* x_31; obj* x_33; obj* x_36; obj* x_37; obj* x_38; obj* x_40; obj* x_42; obj* x_43; obj* x_45; obj* x_47; obj* x_48; obj* x_50; obj* x_51; obj* x_53; obj* x_54; obj* x_55; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_79; 
x_0 = lean::mk_string("(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_nat_obj(0u);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::mk_string(", ");
x_11 = l_string_trim(x_10);
lean::inc(x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_13, 0, x_11);
lean::inc(x_7);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_15, 0, x_11);
lean::closure_set(x_15, 1, x_7);
lean::closure_set(x_15, 2, x_13);
x_16 = 0;
x_17 = lean::box(x_16);
lean::inc(x_15);
lean::inc(x_9);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser___spec__1___boxed), 8, 3);
lean::closure_set(x_20, 0, x_9);
lean::closure_set(x_20, 1, x_15);
lean::closure_set(x_20, 2, x_17);
x_21 = lean::box(0);
lean::inc(x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_20);
lean::cnstr_set(x_23, 1, x_21);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_15);
lean::cnstr_set(x_24, 1, x_23);
x_25 = l_lean_parser_term_tuple;
lean::inc(x_25);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_27, 0, x_25);
lean::closure_set(x_27, 1, x_24);
x_28 = lean::mk_string(" : ");
x_29 = l_string_trim(x_28);
lean::inc(x_29);
x_31 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_31, 0, x_29);
lean::inc(x_7);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_33, 0, x_29);
lean::closure_set(x_33, 1, x_7);
lean::closure_set(x_33, 2, x_31);
lean::inc(x_21);
lean::inc(x_9);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_9);
lean::cnstr_set(x_36, 1, x_21);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_33);
lean::cnstr_set(x_37, 1, x_36);
x_38 = l_lean_parser_term_typed;
lean::inc(x_38);
x_40 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_40, 0, x_38);
lean::closure_set(x_40, 1, x_37);
lean::inc(x_21);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_40);
lean::cnstr_set(x_42, 1, x_21);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_27);
lean::cnstr_set(x_43, 1, x_42);
lean::inc(x_7);
x_45 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_45, 0, x_43);
lean::closure_set(x_45, 1, x_7);
lean::inc(x_21);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_45);
lean::cnstr_set(x_47, 1, x_21);
x_48 = l_lean_parser_term_paren__special;
lean::inc(x_48);
x_50 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_50, 0, x_48);
lean::closure_set(x_50, 1, x_47);
x_51 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_51, 0, x_50);
lean::inc(x_21);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_51);
lean::cnstr_set(x_53, 1, x_21);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_9);
lean::cnstr_set(x_54, 1, x_53);
x_55 = l_lean_parser_term_paren__content;
lean::inc(x_55);
x_57 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_57, 0, x_55);
lean::closure_set(x_57, 1, x_54);
x_58 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_58, 0, x_57);
x_59 = lean::mk_string(")");
x_60 = l_string_trim(x_59);
lean::inc(x_60);
x_62 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_62, 0, x_60);
x_63 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_63, 0, x_60);
lean::closure_set(x_63, 1, x_7);
lean::closure_set(x_63, 2, x_62);
x_64 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_64, 0, x_63);
lean::cnstr_set(x_64, 1, x_21);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_58);
lean::cnstr_set(x_65, 1, x_64);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_6);
lean::cnstr_set(x_66, 1, x_65);
x_67 = l_lean_parser_term__parser__m_monad;
x_68 = l_lean_parser_term__parser__m_monad__except;
x_69 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_70 = l_lean_parser_term__parser__m_alternative;
x_71 = l_lean_parser_term_paren;
x_72 = l_lean_parser_term_paren_has__view;
lean::inc(x_72);
lean::inc(x_71);
lean::inc(x_70);
lean::inc(x_69);
lean::inc(x_68);
lean::inc(x_67);
x_79 = l_lean_parser_combinators_node_view___rarg(x_67, x_68, x_69, x_70, x_71, x_66, x_72);
return x_79;
}
}
obj* _init_l_lean_parser_term_paren_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_22; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_28; obj* x_30; obj* x_31; obj* x_32; obj* x_34; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
x_0 = lean::mk_string("(");
x_1 = l_lean_parser_max__prec;
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::mk_string(", ");
x_5 = lean::mk_nat_obj(0u);
lean::inc(x_5);
x_7 = l_lean_parser_symbol_tokens___rarg(x_4, x_5);
x_8 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_7);
lean::inc(x_8);
x_11 = l_lean_parser_combinators_sep__by_tokens___rarg(x_8, x_7);
x_12 = lean::box(0);
lean::inc(x_12);
x_14 = l_lean_parser_list_cons_tokens___rarg(x_11, x_12);
x_15 = l_lean_parser_list_cons_tokens___rarg(x_7, x_14);
x_16 = l_lean_parser_tokens___rarg(x_15);
x_17 = lean::mk_string(" : ");
lean::inc(x_5);
x_19 = l_lean_parser_symbol_tokens___rarg(x_17, x_5);
lean::inc(x_12);
lean::inc(x_8);
x_22 = l_lean_parser_list_cons_tokens___rarg(x_8, x_12);
x_23 = l_lean_parser_list_cons_tokens___rarg(x_19, x_22);
x_24 = l_lean_parser_tokens___rarg(x_23);
lean::inc(x_12);
x_26 = l_lean_parser_list_cons_tokens___rarg(x_24, x_12);
x_27 = l_lean_parser_list_cons_tokens___rarg(x_16, x_26);
x_28 = l_lean_parser_tokens___rarg(x_27);
lean::inc(x_12);
x_30 = l_lean_parser_list_cons_tokens___rarg(x_28, x_12);
x_31 = l_lean_parser_tokens___rarg(x_30);
x_32 = l_lean_parser_tokens___rarg(x_31);
lean::inc(x_12);
x_34 = l_lean_parser_list_cons_tokens___rarg(x_32, x_12);
lean::inc(x_8);
x_36 = l_lean_parser_list_cons_tokens___rarg(x_8, x_34);
x_37 = l_lean_parser_tokens___rarg(x_36);
x_38 = l_lean_parser_tokens___rarg(x_37);
x_39 = lean::mk_string(")");
x_40 = l_lean_parser_symbol_tokens___rarg(x_39, x_5);
x_41 = l_lean_parser_list_cons_tokens___rarg(x_40, x_12);
x_42 = l_lean_parser_list_cons_tokens___rarg(x_38, x_41);
x_43 = l_lean_parser_list_cons_tokens___rarg(x_3, x_42);
x_44 = l_lean_parser_tokens___rarg(x_43);
return x_44;
}
}
obj* _init_l_lean_parser_term_hole() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("hole");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_hole_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_string__lit_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_hole_has__view_x_27___lambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_hole_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; 
x_1 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_1);
x_3 = l_option_map___rarg(x_1, x_0);
x_4 = lean::box(3);
x_5 = l_option_get__or__else___main___rarg(x_3, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = l_lean_parser_term_hole;
lean::inc(x_8);
x_10 = l_lean_parser_syntax_mk__node(x_8, x_7);
return x_10;
}
}
obj* _init_l_lean_parser_term_hole_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_hole_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_hole_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_hole;
x_6 = l_lean_parser_term_hole_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_hole_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::mk_string("_");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_hole_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_21; 
x_0 = lean::mk_string("_");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_lean_parser_term__parser__m_monad;
x_10 = l_lean_parser_term__parser__m_monad__except;
x_11 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_12 = l_lean_parser_term__parser__m_alternative;
x_13 = l_lean_parser_term_hole;
x_14 = l_lean_parser_term_hole_has__view;
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
x_21 = l_lean_parser_combinators_node_view___rarg(x_9, x_10, x_11, x_12, x_13, x_8, x_14);
return x_21;
}
}
obj* _init_l_lean_parser_term_hole_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::mk_string("_");
x_1 = l_lean_parser_max__prec;
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::box(0);
x_5 = l_lean_parser_list_cons_tokens___rarg(x_3, x_4);
x_6 = l_lean_parser_tokens___rarg(x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_sort() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("sort");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_sort_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_sort_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__4;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
lean::dec(x_86);
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_90; obj* x_93; obj* x_94; 
x_90 = lean::cnstr_get(x_1, 0);
lean::inc(x_90);
lean::dec(x_1);
x_93 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_93, 0, x_90);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
case 1:
{
obj* x_96; 
lean::dec(x_1);
x_96 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1;
lean::inc(x_96);
return x_96;
}
case 2:
{
obj* x_99; 
lean::dec(x_1);
x_99 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1;
lean::inc(x_99);
return x_99;
}
default:
{
obj* x_102; 
lean::dec(x_1);
x_102 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1;
lean::inc(x_102);
return x_102;
}
}
}
else
{
lean::dec(x_86);
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_105; obj* x_108; obj* x_109; 
x_105 = lean::cnstr_get(x_1, 0);
lean::inc(x_105);
lean::dec(x_1);
x_108 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_108, 0, x_105);
x_109 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_109, 0, x_108);
return x_109;
}
case 1:
{
obj* x_111; 
lean::dec(x_1);
x_111 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2;
lean::inc(x_111);
return x_111;
}
case 2:
{
obj* x_114; 
lean::dec(x_1);
x_114 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2;
lean::inc(x_114);
return x_114;
}
default:
{
obj* x_117; 
lean::dec(x_1);
x_117 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2;
lean::inc(x_117);
return x_117;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(0);
x_1 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(0);
x_1 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
lean::dec(x_6);
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_10; obj* x_13; obj* x_14; 
x_10 = lean::cnstr_get(x_0, 0);
lean::inc(x_10);
lean::dec(x_0);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_10);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
case 1:
{
obj* x_16; 
lean::dec(x_0);
x_16 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1;
lean::inc(x_16);
return x_16;
}
case 2:
{
obj* x_19; 
lean::dec(x_0);
x_19 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1;
lean::inc(x_19);
return x_19;
}
default:
{
obj* x_22; 
lean::dec(x_0);
x_22 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1;
lean::inc(x_22);
return x_22;
}
}
}
else
{
lean::dec(x_6);
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_25; obj* x_28; obj* x_29; 
x_25 = lean::cnstr_get(x_0, 0);
lean::inc(x_25);
lean::dec(x_0);
x_28 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_28, 0, x_25);
x_29 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_29, 0, x_28);
return x_29;
}
case 1:
{
obj* x_31; 
lean::dec(x_0);
x_31 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2;
lean::inc(x_31);
return x_31;
}
case 2:
{
obj* x_34; 
lean::dec(x_0);
x_34 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2;
lean::inc(x_34);
return x_34;
}
default:
{
obj* x_37; 
lean::dec(x_0);
x_37 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2;
lean::inc(x_37);
return x_37;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("sort");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_sort_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_18; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_5);
x_7 = l_option_map___rarg(x_5, x_2);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
lean::inc(x_1);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_9);
lean::cnstr_set(x_11, 1, x_1);
x_12 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_12);
x_14 = l_lean_parser_syntax_mk__node(x_12, x_11);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_1);
x_16 = l_lean_parser_term_sort;
lean::inc(x_16);
x_18 = l_lean_parser_syntax_mk__node(x_16, x_15);
return x_18;
}
else
{
obj* x_19; obj* x_22; obj* x_24; obj* x_25; obj* x_26; obj* x_28; obj* x_29; obj* x_31; obj* x_32; obj* x_33; obj* x_35; 
x_19 = lean::cnstr_get(x_0, 0);
lean::inc(x_19);
lean::dec(x_0);
x_22 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_22);
x_24 = l_option_map___rarg(x_22, x_19);
x_25 = lean::box(3);
x_26 = l_option_get__or__else___main___rarg(x_24, x_25);
lean::inc(x_1);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_26);
lean::cnstr_set(x_28, 1, x_1);
x_29 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_29);
x_31 = l_lean_parser_syntax_mk__node(x_29, x_28);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_1);
x_33 = l_lean_parser_term_sort;
lean::inc(x_33);
x_35 = l_lean_parser_syntax_mk__node(x_33, x_32);
return x_35;
}
}
}
obj* _init_l_lean_parser_term_sort_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_sort_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_sort_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_sort;
x_6 = l_lean_parser_term_sort_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_sort_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_0 = lean::mk_string("Sort");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_string("Type");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
lean::inc(x_4);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_12, 0, x_8);
lean::closure_set(x_12, 1, x_4);
lean::closure_set(x_12, 2, x_10);
x_13 = lean::box(0);
lean::inc(x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_12);
lean::cnstr_set(x_15, 1, x_13);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_6);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::mk_nat_obj(0u);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_18, 0, x_16);
lean::closure_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_13);
return x_19;
}
}
obj* _init_l_lean_parser_term_sort_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_32; 
x_0 = lean::mk_string("Sort");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_string("Type");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
lean::inc(x_4);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_12, 0, x_8);
lean::closure_set(x_12, 1, x_4);
lean::closure_set(x_12, 2, x_10);
x_13 = lean::box(0);
lean::inc(x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_12);
lean::cnstr_set(x_15, 1, x_13);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_6);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::mk_nat_obj(0u);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_18, 0, x_16);
lean::closure_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_13);
x_20 = l_lean_parser_term__parser__m_monad;
x_21 = l_lean_parser_term__parser__m_monad__except;
x_22 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_23 = l_lean_parser_term__parser__m_alternative;
x_24 = l_lean_parser_term_sort;
x_25 = l_lean_parser_term_sort_has__view;
lean::inc(x_25);
lean::inc(x_24);
lean::inc(x_23);
lean::inc(x_22);
lean::inc(x_21);
lean::inc(x_20);
x_32 = l_lean_parser_combinators_node_view___rarg(x_20, x_21, x_22, x_23, x_24, x_19, x_25);
return x_32;
}
}
obj* _init_l_lean_parser_term_sort_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_0 = lean::mk_string("Sort");
x_1 = l_lean_parser_max__prec;
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::mk_string("Type");
lean::inc(x_1);
x_6 = l_lean_parser_symbol_tokens___rarg(x_4, x_1);
x_7 = lean::box(0);
lean::inc(x_7);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_6, x_7);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_3, x_9);
x_11 = l_lean_parser_tokens___rarg(x_10);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_11, x_7);
x_13 = l_lean_parser_tokens___rarg(x_12);
return x_13;
}
}
obj* _init_l_lean_parser_term_type__spec() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("type_spec");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_type__spec_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_type__spec_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_type__spec_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_type__spec_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
if (lean::is_shared(x_1)) {
 lean::dec(x_1);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_1, 0);
 x_7 = x_1;
}
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
lean::dec(x_7);
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; 
lean::dec(x_8);
x_13 = l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_13);
return x_13;
}
else
{
obj* x_15; obj* x_18; obj* x_19; 
x_15 = lean::cnstr_get(x_8, 0);
lean::inc(x_15);
lean::dec(x_8);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_15);
return x_19;
}
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_8, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_8, 1);
lean::inc(x_22);
lean::dec(x_8);
switch (lean::obj_tag(x_20)) {
case 0:
{
obj* x_25; obj* x_28; 
x_25 = lean::cnstr_get(x_20, 0);
lean::inc(x_25);
lean::dec(x_20);
if (lean::is_scalar(x_7)) {
 x_28 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_28 = x_7;
}
lean::cnstr_set(x_28, 0, x_25);
if (lean::obj_tag(x_22) == 0)
{
obj* x_30; obj* x_31; 
lean::dec(x_22);
x_30 = lean::box(3);
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_30);
return x_31;
}
else
{
obj* x_32; obj* x_35; 
x_32 = lean::cnstr_get(x_22, 0);
lean::inc(x_32);
lean::dec(x_22);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_28);
lean::cnstr_set(x_35, 1, x_32);
return x_35;
}
}
case 1:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_39; 
lean::dec(x_22);
x_39 = l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_39);
return x_39;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_22, 0);
lean::inc(x_41);
lean::dec(x_22);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
case 2:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_49; 
lean::dec(x_22);
x_49 = l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_49);
return x_49;
}
else
{
obj* x_51; obj* x_54; obj* x_55; 
x_51 = lean::cnstr_get(x_22, 0);
lean::inc(x_51);
lean::dec(x_22);
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_51);
return x_55;
}
}
default:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_59; 
lean::dec(x_22);
x_59 = l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_59);
return x_59;
}
else
{
obj* x_61; obj* x_64; obj* x_65; 
x_61 = lean::cnstr_get(x_22, 0);
lean::inc(x_61);
lean::dec(x_22);
x_64 = lean::box(0);
x_65 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_61);
return x_65;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_type__spec_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_6);
x_8 = l_option_map___rarg(x_6, x_1);
x_9 = lean::box(3);
x_10 = l_option_get__or__else___main___rarg(x_8, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_3);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_10);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_lean_parser_term_type__spec;
lean::inc(x_14);
x_16 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_16;
}
}
obj* _init_l_lean_parser_term_type__spec_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_type__spec_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_type__spec_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_type__spec;
x_6 = l_lean_parser_term_type__spec_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_type__spec_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_0 = lean::mk_string(" : ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_7, 0, x_4);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_6);
lean::cnstr_set(x_10, 1, x_9);
return x_10;
}
}
obj* _init_l_lean_parser_term_type__spec_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_23; 
x_0 = lean::mk_string(" : ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_7, 0, x_4);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_6);
lean::cnstr_set(x_10, 1, x_9);
x_11 = l_lean_parser_term__parser__m_monad;
x_12 = l_lean_parser_term__parser__m_monad__except;
x_13 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_14 = l_lean_parser_term__parser__m_alternative;
x_15 = l_lean_parser_term_type__spec;
x_16 = l_lean_parser_term_type__spec_has__view;
lean::inc(x_16);
lean::inc(x_15);
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
x_23 = l_lean_parser_combinators_node_view___rarg(x_11, x_12, x_13, x_14, x_15, x_10, x_16);
return x_23;
}
}
obj* _init_l_lean_parser_term_type__spec_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::mk_string(" : ");
x_1 = lean::mk_nat_obj(0u);
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::box(0);
x_4 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_4);
x_6 = l_lean_parser_list_cons_tokens___rarg(x_4, x_3);
x_7 = l_lean_parser_list_cons_tokens___rarg(x_2, x_6);
x_8 = l_lean_parser_tokens___rarg(x_7);
return x_8;
}
}
obj* l_lean_parser_term_opt__type_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_7; 
x_5 = l_lean_parser_term_opt__type_parser___closed__1;
lean::inc(x_5);
x_7 = l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7(x_5, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_opt__type_parser___closed__1() {
_start:
{
obj* x_0; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_type__spec_parser), 5, 0);
return x_0;
}
}
obj* _init_l_lean_parser_term_opt__type_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_11; 
x_0 = l_lean_parser_term__parser__m_monad;
x_1 = l_lean_parser_term__parser__m_monad__except;
x_2 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_3 = l_lean_parser_term__parser__m_alternative;
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_type__spec_parser), 5, 0);
x_5 = l_lean_parser_term_type__spec_parser_lean_parser_has__view;
lean::inc(x_5);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
lean::inc(x_0);
x_11 = l_lean_parser_combinators_optional_view___rarg(x_0, x_1, x_2, x_3, x_4, x_5);
return x_11;
}
}
obj* _init_l_lean_parser_term_opt__type_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_2; 
x_0 = l_lean_parser_term_type__spec_parser_lean_parser_has__tokens;
lean::inc(x_0);
x_2 = l_lean_parser_tokens___rarg(x_0);
return x_2;
}
}
obj* _init_l_lean_parser_term_opt__type_view__default() {
_start:
{
obj* x_0; 
x_0 = lean::box(0);
return x_0;
}
}
obj* _init_l_lean_parser_term_binder__ident() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binder_ident");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder__ident_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__ident_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__ident_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__4;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; obj* x_91; obj* x_93; obj* x_94; 
lean::dec(x_86);
x_90 = l_lean_parser_term_hole_has__view;
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
x_93 = lean::apply_1(x_91, x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
else
{
lean::dec(x_86);
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_97; 
lean::dec(x_1);
x_97 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2;
lean::inc(x_97);
return x_97;
}
case 1:
{
obj* x_99; obj* x_102; 
x_99 = lean::cnstr_get(x_1, 0);
lean::inc(x_99);
lean::dec(x_1);
x_102 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_102, 0, x_99);
return x_102;
}
case 2:
{
obj* x_104; 
lean::dec(x_1);
x_104 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2;
lean::inc(x_104);
return x_104;
}
default:
{
obj* x_107; 
lean::dec(x_1);
x_107 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2;
lean::inc(x_107);
return x_107;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
lean::inc(x_0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_1);
lean::inc(x_0);
lean::inc(x_0);
x_8 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_8, 0, x_0);
lean::cnstr_set(x_8, 1, x_3);
lean::cnstr_set(x_8, 2, x_5);
lean::cnstr_set(x_8, 3, x_0);
lean::cnstr_set(x_8, 4, x_0);
x_9 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_9, 0, x_8);
return x_9;
}
}
obj* _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__1;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; obj* x_11; obj* x_13; obj* x_14; 
lean::dec(x_6);
x_10 = l_lean_parser_term_hole_has__view;
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_0);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
else
{
lean::dec(x_6);
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_17; 
lean::dec(x_0);
x_17 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2;
lean::inc(x_17);
return x_17;
}
case 1:
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_0, 0);
lean::inc(x_19);
lean::dec(x_0);
x_22 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
return x_22;
}
case 2:
{
obj* x_24; 
lean::dec(x_0);
x_24 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2;
lean::inc(x_24);
return x_24;
}
default:
{
obj* x_27; 
lean::dec(x_0);
x_27 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2;
lean::inc(x_27);
return x_27;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binder_ident");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_14; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_2);
lean::inc(x_1);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_1);
x_8 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_8);
x_10 = l_lean_parser_syntax_mk__node(x_8, x_7);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_10);
lean::cnstr_set(x_11, 1, x_1);
x_12 = l_lean_parser_term_binder__ident;
lean::inc(x_12);
x_14 = l_lean_parser_syntax_mk__node(x_12, x_11);
return x_14;
}
else
{
obj* x_15; obj* x_18; obj* x_19; obj* x_21; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_28; obj* x_30; 
x_15 = lean::cnstr_get(x_0, 0);
lean::inc(x_15);
lean::dec(x_0);
x_18 = l_lean_parser_term_hole_has__view;
x_19 = lean::cnstr_get(x_18, 1);
lean::inc(x_19);
x_21 = lean::apply_1(x_19, x_15);
lean::inc(x_1);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_21);
lean::cnstr_set(x_23, 1, x_1);
x_24 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_24);
x_26 = l_lean_parser_syntax_mk__node(x_24, x_23);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_lean_parser_term_binder__ident;
lean::inc(x_28);
x_30 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_30;
}
}
}
obj* _init_l_lean_parser_term_binder__ident_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binder__ident_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_binder__ident_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_binder__ident;
x_6 = l_lean_parser_term_binder__ident_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_binder__ident_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_hole_parser), 5, 0);
lean::inc(x_0);
x_3 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_3, 0, x_1);
lean::cnstr_set(x_3, 1, x_0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_4);
lean::cnstr_set(x_5, 1, x_3);
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_7, 0, x_5);
lean::closure_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_0);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder__ident_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_21; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_hole_parser), 5, 0);
lean::inc(x_0);
x_3 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_3, 0, x_1);
lean::cnstr_set(x_3, 1, x_0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_4);
lean::cnstr_set(x_5, 1, x_3);
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_7, 0, x_5);
lean::closure_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_0);
x_9 = l_lean_parser_term__parser__m_monad;
x_10 = l_lean_parser_term__parser__m_monad__except;
x_11 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_12 = l_lean_parser_term__parser__m_alternative;
x_13 = l_lean_parser_term_binder__ident;
x_14 = l_lean_parser_term_binder__ident_has__view;
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
x_21 = l_lean_parser_combinators_node_view___rarg(x_9, x_10, x_11, x_12, x_13, x_8, x_14);
return x_21;
}
}
obj* _init_l_lean_parser_term_binder__ident_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::box(0);
x_1 = l_lean_parser_term_hole_parser_lean_parser_has__tokens;
lean::inc(x_0);
lean::inc(x_1);
x_4 = l_lean_parser_list_cons_tokens___rarg(x_1, x_0);
lean::inc(x_0);
x_6 = l_lean_parser_list_cons_tokens___rarg(x_0, x_4);
x_7 = l_lean_parser_tokens___rarg(x_6);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_7, x_0);
x_9 = l_lean_parser_tokens___rarg(x_8);
return x_9;
}
}
obj* _init_l_lean_parser_term_binder__default__val() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binder_default_val");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder__default__val_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default__val_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
if (lean::is_shared(x_1)) {
 lean::dec(x_1);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_1, 0);
 x_7 = x_1;
}
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
lean::dec(x_7);
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; 
lean::dec(x_8);
x_13 = l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1;
lean::inc(x_13);
return x_13;
}
else
{
obj* x_15; obj* x_18; obj* x_19; 
x_15 = lean::cnstr_get(x_8, 0);
lean::inc(x_15);
lean::dec(x_8);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_15);
return x_19;
}
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_8, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_8, 1);
lean::inc(x_22);
lean::dec(x_8);
switch (lean::obj_tag(x_20)) {
case 0:
{
obj* x_25; obj* x_28; 
x_25 = lean::cnstr_get(x_20, 0);
lean::inc(x_25);
lean::dec(x_20);
if (lean::is_scalar(x_7)) {
 x_28 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_28 = x_7;
}
lean::cnstr_set(x_28, 0, x_25);
if (lean::obj_tag(x_22) == 0)
{
obj* x_30; obj* x_31; 
lean::dec(x_22);
x_30 = lean::box(3);
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_30);
return x_31;
}
else
{
obj* x_32; obj* x_35; 
x_32 = lean::cnstr_get(x_22, 0);
lean::inc(x_32);
lean::dec(x_22);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_28);
lean::cnstr_set(x_35, 1, x_32);
return x_35;
}
}
case 1:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_39; 
lean::dec(x_22);
x_39 = l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1;
lean::inc(x_39);
return x_39;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_22, 0);
lean::inc(x_41);
lean::dec(x_22);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
case 2:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_49; 
lean::dec(x_22);
x_49 = l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1;
lean::inc(x_49);
return x_49;
}
else
{
obj* x_51; obj* x_54; obj* x_55; 
x_51 = lean::cnstr_get(x_22, 0);
lean::inc(x_51);
lean::dec(x_22);
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_51);
return x_55;
}
}
default:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_59; 
lean::dec(x_22);
x_59 = l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1;
lean::inc(x_59);
return x_59;
}
else
{
obj* x_61; obj* x_64; obj* x_65; 
x_61 = lean::cnstr_get(x_22, 0);
lean::inc(x_61);
lean::dec(x_22);
x_64 = lean::box(0);
x_65 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_61);
return x_65;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binder__default__val_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_6);
x_8 = l_option_map___rarg(x_6, x_1);
x_9 = lean::box(3);
x_10 = l_option_get__or__else___main___rarg(x_8, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_3);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_10);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_lean_parser_term_binder__default__val;
lean::inc(x_14);
x_16 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_16;
}
}
obj* _init_l_lean_parser_term_binder__default__val_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binder__default__val_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_binder__default__tac() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binder_default_tac");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder__default__tac_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
if (lean::is_shared(x_1)) {
 lean::dec(x_1);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_1, 0);
 x_7 = x_1;
}
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
lean::dec(x_7);
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; 
lean::dec(x_8);
x_13 = l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1;
lean::inc(x_13);
return x_13;
}
else
{
obj* x_15; obj* x_18; obj* x_19; 
x_15 = lean::cnstr_get(x_8, 0);
lean::inc(x_15);
lean::dec(x_8);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_15);
return x_19;
}
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_8, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_8, 1);
lean::inc(x_22);
lean::dec(x_8);
switch (lean::obj_tag(x_20)) {
case 0:
{
obj* x_25; obj* x_28; 
x_25 = lean::cnstr_get(x_20, 0);
lean::inc(x_25);
lean::dec(x_20);
if (lean::is_scalar(x_7)) {
 x_28 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_28 = x_7;
}
lean::cnstr_set(x_28, 0, x_25);
if (lean::obj_tag(x_22) == 0)
{
obj* x_30; obj* x_31; 
lean::dec(x_22);
x_30 = lean::box(3);
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_30);
return x_31;
}
else
{
obj* x_32; obj* x_35; 
x_32 = lean::cnstr_get(x_22, 0);
lean::inc(x_32);
lean::dec(x_22);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_28);
lean::cnstr_set(x_35, 1, x_32);
return x_35;
}
}
case 1:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_39; 
lean::dec(x_22);
x_39 = l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1;
lean::inc(x_39);
return x_39;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_22, 0);
lean::inc(x_41);
lean::dec(x_22);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
case 2:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_49; 
lean::dec(x_22);
x_49 = l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1;
lean::inc(x_49);
return x_49;
}
else
{
obj* x_51; obj* x_54; obj* x_55; 
x_51 = lean::cnstr_get(x_22, 0);
lean::inc(x_51);
lean::dec(x_22);
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_51);
return x_55;
}
}
default:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_59; 
lean::dec(x_22);
x_59 = l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1;
lean::inc(x_59);
return x_59;
}
else
{
obj* x_61; obj* x_64; obj* x_65; 
x_61 = lean::cnstr_get(x_22, 0);
lean::inc(x_61);
lean::dec(x_22);
x_64 = lean::box(0);
x_65 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_61);
return x_65;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_6);
x_8 = l_option_map___rarg(x_6, x_1);
x_9 = lean::box(3);
x_10 = l_option_get__or__else___main___rarg(x_8, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_3);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_10);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_lean_parser_term_binder__default__tac;
lean::inc(x_14);
x_16 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_16;
}
}
obj* _init_l_lean_parser_term_binder__default__tac_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binder__default__tac_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_binder__default() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binder_default");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder__default_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binder__default_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__2;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; obj* x_91; obj* x_93; obj* x_94; 
lean::dec(x_86);
x_90 = l_lean_parser_term_binder__default__tac_has__view;
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
x_93 = lean::apply_1(x_91, x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
else
{
obj* x_96; obj* x_97; obj* x_99; obj* x_100; 
lean::dec(x_86);
x_96 = l_lean_parser_term_binder__default__val_has__view;
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
x_99 = lean::apply_1(x_97, x_1);
x_100 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_100, 0, x_99);
return x_100;
}
}
}
}
obj* _init_l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; obj* x_11; obj* x_13; obj* x_14; 
lean::dec(x_6);
x_10 = l_lean_parser_term_binder__default__tac_has__view;
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_0);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
else
{
obj* x_16; obj* x_17; obj* x_19; obj* x_20; 
lean::dec(x_6);
x_16 = l_lean_parser_term_binder__default__val_has__view;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::apply_1(x_17, x_0);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
}
}
obj* _init_l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binder_default");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_binder__default_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_binder__default__val_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
x_8 = lean::apply_1(x_6, x_2);
lean::inc(x_1);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_lean_parser_term_binder__default;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_33; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
x_21 = l_lean_parser_term_binder__default__tac_has__view;
x_22 = lean::cnstr_get(x_21, 1);
lean::inc(x_22);
x_24 = lean::apply_1(x_22, x_18);
lean::inc(x_1);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_27);
x_29 = l_lean_parser_syntax_mk__node(x_27, x_26);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_1);
x_31 = l_lean_parser_term_binder__default;
lean::inc(x_31);
x_33 = l_lean_parser_syntax_mk__node(x_31, x_30);
return x_33;
}
}
}
obj* _init_l_lean_parser_term_binder__default_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binder__default_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_binder__default_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_binder__default;
x_6 = l_lean_parser_term_binder__default_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_binder__default_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_8; obj* x_9; obj* x_11; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_20; obj* x_22; obj* x_23; obj* x_24; obj* x_26; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_0 = lean::mk_string(":=");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
lean::inc(x_4);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_8, 0, x_4);
x_9 = lean::box(0);
lean::inc(x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_8);
lean::cnstr_set(x_11, 1, x_9);
lean::inc(x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_6);
lean::cnstr_set(x_13, 1, x_11);
x_14 = l_lean_parser_term_binder__default__val;
lean::inc(x_14);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_16, 0, x_14);
lean::closure_set(x_16, 1, x_13);
x_17 = lean::mk_string(".");
x_18 = l_string_trim(x_17);
lean::inc(x_18);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_20, 0, x_18);
lean::inc(x_4);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_22, 0, x_18);
lean::closure_set(x_22, 1, x_4);
lean::closure_set(x_22, 2, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_11);
x_24 = l_lean_parser_term_binder__default__tac;
lean::inc(x_24);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_26, 0, x_24);
lean::closure_set(x_26, 1, x_23);
lean::inc(x_9);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_26);
lean::cnstr_set(x_28, 1, x_9);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_16);
lean::cnstr_set(x_29, 1, x_28);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_30, 0, x_29);
lean::closure_set(x_30, 1, x_4);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_9);
return x_31;
}
}
obj* _init_l_lean_parser_term_binder__default_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_8; obj* x_9; obj* x_11; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_20; obj* x_22; obj* x_23; obj* x_24; obj* x_26; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_44; 
x_0 = lean::mk_string(":=");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
lean::inc(x_4);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_8, 0, x_4);
x_9 = lean::box(0);
lean::inc(x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_8);
lean::cnstr_set(x_11, 1, x_9);
lean::inc(x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_6);
lean::cnstr_set(x_13, 1, x_11);
x_14 = l_lean_parser_term_binder__default__val;
lean::inc(x_14);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_16, 0, x_14);
lean::closure_set(x_16, 1, x_13);
x_17 = lean::mk_string(".");
x_18 = l_string_trim(x_17);
lean::inc(x_18);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_20, 0, x_18);
lean::inc(x_4);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_22, 0, x_18);
lean::closure_set(x_22, 1, x_4);
lean::closure_set(x_22, 2, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_11);
x_24 = l_lean_parser_term_binder__default__tac;
lean::inc(x_24);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_26, 0, x_24);
lean::closure_set(x_26, 1, x_23);
lean::inc(x_9);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_26);
lean::cnstr_set(x_28, 1, x_9);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_16);
lean::cnstr_set(x_29, 1, x_28);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_30, 0, x_29);
lean::closure_set(x_30, 1, x_4);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_9);
x_32 = l_lean_parser_term__parser__m_monad;
x_33 = l_lean_parser_term__parser__m_monad__except;
x_34 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_35 = l_lean_parser_term__parser__m_alternative;
x_36 = l_lean_parser_term_binder__default;
x_37 = l_lean_parser_term_binder__default_has__view;
lean::inc(x_37);
lean::inc(x_36);
lean::inc(x_35);
lean::inc(x_34);
lean::inc(x_33);
lean::inc(x_32);
x_44 = l_lean_parser_combinators_node_view___rarg(x_32, x_33, x_34, x_35, x_36, x_31, x_37);
return x_44;
}
}
obj* _init_l_lean_parser_term_binder__default_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
x_0 = lean::mk_string(":=");
x_1 = lean::mk_nat_obj(0u);
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::box(0);
x_5 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_4);
lean::inc(x_5);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_5, x_4);
lean::inc(x_8);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_3, x_8);
x_11 = l_lean_parser_tokens___rarg(x_10);
x_12 = lean::mk_string(".");
x_13 = l_lean_parser_symbol_tokens___rarg(x_12, x_1);
x_14 = l_lean_parser_list_cons_tokens___rarg(x_13, x_8);
x_15 = l_lean_parser_tokens___rarg(x_14);
lean::inc(x_4);
x_17 = l_lean_parser_list_cons_tokens___rarg(x_15, x_4);
x_18 = l_lean_parser_list_cons_tokens___rarg(x_11, x_17);
x_19 = l_lean_parser_tokens___rarg(x_18);
x_20 = l_lean_parser_list_cons_tokens___rarg(x_19, x_4);
x_21 = l_lean_parser_tokens___rarg(x_20);
return x_21;
}
}
obj* _init_l_lean_parser_term_binder__content() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binder_content");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__content_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__content_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__5;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; obj* x_22; 
x_22 = l_lean_parser_syntax_as__node___main(x_2);
if (lean::obj_tag(x_22) == 0)
{
obj* x_24; 
lean::dec(x_22);
x_24 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3;
lean::inc(x_24);
x_20 = x_24;
goto lbl_21;
}
else
{
obj* x_26; obj* x_29; obj* x_32; obj* x_34; 
x_26 = lean::cnstr_get(x_22, 0);
lean::inc(x_26);
lean::dec(x_22);
x_29 = lean::cnstr_get(x_26, 1);
lean::inc(x_29);
lean::dec(x_26);
x_32 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4;
lean::inc(x_32);
x_34 = l_list_map___main___rarg(x_32, x_29);
x_20 = x_34;
goto lbl_21;
}
lbl_21:
{
obj* x_35; obj* x_37; obj* x_38; obj* x_40; obj* x_41; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_43; 
x_43 = lean::box(3);
x_40 = x_1;
x_41 = x_43;
goto lbl_42;
}
else
{
obj* x_44; obj* x_46; 
x_44 = lean::cnstr_get(x_1, 0);
lean::inc(x_44);
x_46 = lean::cnstr_get(x_1, 1);
lean::inc(x_46);
lean::dec(x_1);
x_40 = x_46;
x_41 = x_44;
goto lbl_42;
}
lbl_36:
{
obj* x_49; obj* x_50; 
x_49 = lean::box(3);
x_50 = l_lean_parser_syntax_as__node___main(x_49);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_54; 
lean::dec(x_50);
x_52 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_52);
x_54 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_54, 0, x_20);
lean::cnstr_set(x_54, 1, x_35);
lean::cnstr_set(x_54, 2, x_52);
return x_54;
}
else
{
obj* x_55; obj* x_57; obj* x_58; 
x_55 = lean::cnstr_get(x_50, 0);
lean::inc(x_55);
if (lean::is_shared(x_50)) {
 lean::dec(x_50);
 x_57 = lean::box(0);
} else {
 lean::cnstr_release(x_50, 0);
 x_57 = x_50;
}
x_58 = lean::cnstr_get(x_55, 1);
lean::inc(x_58);
lean::dec(x_55);
if (lean::obj_tag(x_58) == 0)
{
obj* x_63; obj* x_64; 
lean::dec(x_58);
lean::dec(x_57);
x_63 = lean::box(0);
x_64 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_64, 0, x_20);
lean::cnstr_set(x_64, 1, x_35);
lean::cnstr_set(x_64, 2, x_63);
return x_64;
}
else
{
obj* x_65; obj* x_67; 
x_65 = lean::cnstr_get(x_58, 0);
lean::inc(x_65);
x_67 = lean::cnstr_get(x_58, 1);
lean::inc(x_67);
lean::dec(x_58);
if (lean::obj_tag(x_67) == 0)
{
obj* x_71; obj* x_72; obj* x_74; obj* x_75; obj* x_76; 
lean::dec(x_67);
x_71 = l_lean_parser_term_binder__default_has__view;
x_72 = lean::cnstr_get(x_71, 0);
lean::inc(x_72);
x_74 = lean::apply_1(x_72, x_65);
if (lean::is_scalar(x_57)) {
 x_75 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_75 = x_57;
}
lean::cnstr_set(x_75, 0, x_74);
x_76 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_76, 0, x_20);
lean::cnstr_set(x_76, 1, x_35);
lean::cnstr_set(x_76, 2, x_75);
return x_76;
}
else
{
obj* x_80; obj* x_82; 
lean::dec(x_65);
lean::dec(x_57);
lean::dec(x_67);
x_80 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_80);
x_82 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_82, 0, x_20);
lean::cnstr_set(x_82, 1, x_35);
lean::cnstr_set(x_82, 2, x_80);
return x_82;
}
}
}
}
lbl_39:
{
obj* x_83; 
x_83 = l_lean_parser_syntax_as__node___main(x_38);
if (lean::obj_tag(x_83) == 0)
{
obj* x_85; obj* x_87; 
lean::dec(x_83);
x_85 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_85);
x_87 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_87, 0, x_20);
lean::cnstr_set(x_87, 1, x_37);
lean::cnstr_set(x_87, 2, x_85);
return x_87;
}
else
{
obj* x_88; obj* x_90; obj* x_91; 
x_88 = lean::cnstr_get(x_83, 0);
lean::inc(x_88);
if (lean::is_shared(x_83)) {
 lean::dec(x_83);
 x_90 = lean::box(0);
} else {
 lean::cnstr_release(x_83, 0);
 x_90 = x_83;
}
x_91 = lean::cnstr_get(x_88, 1);
lean::inc(x_91);
lean::dec(x_88);
if (lean::obj_tag(x_91) == 0)
{
obj* x_96; obj* x_97; 
lean::dec(x_90);
lean::dec(x_91);
x_96 = lean::box(0);
x_97 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_97, 0, x_20);
lean::cnstr_set(x_97, 1, x_37);
lean::cnstr_set(x_97, 2, x_96);
return x_97;
}
else
{
obj* x_98; obj* x_100; 
x_98 = lean::cnstr_get(x_91, 0);
lean::inc(x_98);
x_100 = lean::cnstr_get(x_91, 1);
lean::inc(x_100);
lean::dec(x_91);
if (lean::obj_tag(x_100) == 0)
{
obj* x_104; obj* x_105; obj* x_107; obj* x_108; obj* x_109; 
lean::dec(x_100);
x_104 = l_lean_parser_term_binder__default_has__view;
x_105 = lean::cnstr_get(x_104, 0);
lean::inc(x_105);
x_107 = lean::apply_1(x_105, x_98);
if (lean::is_scalar(x_90)) {
 x_108 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_108 = x_90;
}
lean::cnstr_set(x_108, 0, x_107);
x_109 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_109, 0, x_20);
lean::cnstr_set(x_109, 1, x_37);
lean::cnstr_set(x_109, 2, x_108);
return x_109;
}
else
{
obj* x_113; obj* x_115; 
lean::dec(x_90);
lean::dec(x_100);
lean::dec(x_98);
x_113 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_113);
x_115 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_115, 0, x_20);
lean::cnstr_set(x_115, 1, x_37);
lean::cnstr_set(x_115, 2, x_113);
return x_115;
}
}
}
}
lbl_42:
{
obj* x_116; 
x_116 = l_lean_parser_syntax_as__node___main(x_41);
if (lean::obj_tag(x_116) == 0)
{
lean::dec(x_116);
if (lean::obj_tag(x_40) == 0)
{
obj* x_119; 
lean::dec(x_40);
x_119 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_119);
x_35 = x_119;
goto lbl_36;
}
else
{
obj* x_121; obj* x_124; 
x_121 = lean::cnstr_get(x_40, 0);
lean::inc(x_121);
lean::dec(x_40);
x_124 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_124);
x_37 = x_124;
x_38 = x_121;
goto lbl_39;
}
}
else
{
obj* x_126; obj* x_128; obj* x_129; 
x_126 = lean::cnstr_get(x_116, 0);
lean::inc(x_126);
if (lean::is_shared(x_116)) {
 lean::dec(x_116);
 x_128 = lean::box(0);
} else {
 lean::cnstr_release(x_116, 0);
 x_128 = x_116;
}
x_129 = lean::cnstr_get(x_126, 1);
lean::inc(x_129);
lean::dec(x_126);
if (lean::obj_tag(x_129) == 0)
{
obj* x_134; 
lean::dec(x_128);
lean::dec(x_129);
x_134 = lean::box(0);
if (lean::obj_tag(x_40) == 0)
{
lean::dec(x_40);
x_35 = x_134;
goto lbl_36;
}
else
{
obj* x_136; 
x_136 = lean::cnstr_get(x_40, 0);
lean::inc(x_136);
lean::dec(x_40);
x_37 = x_134;
x_38 = x_136;
goto lbl_39;
}
}
else
{
obj* x_139; obj* x_141; 
x_139 = lean::cnstr_get(x_129, 0);
lean::inc(x_139);
x_141 = lean::cnstr_get(x_129, 1);
lean::inc(x_141);
lean::dec(x_129);
if (lean::obj_tag(x_141) == 0)
{
obj* x_145; obj* x_146; obj* x_148; obj* x_149; 
lean::dec(x_141);
x_145 = l_lean_parser_term_type__spec_has__view;
x_146 = lean::cnstr_get(x_145, 0);
lean::inc(x_146);
x_148 = lean::apply_1(x_146, x_139);
if (lean::is_scalar(x_128)) {
 x_149 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_149 = x_128;
}
lean::cnstr_set(x_149, 0, x_148);
if (lean::obj_tag(x_40) == 0)
{
lean::dec(x_40);
x_35 = x_149;
goto lbl_36;
}
else
{
obj* x_151; 
x_151 = lean::cnstr_get(x_40, 0);
lean::inc(x_151);
lean::dec(x_40);
x_37 = x_149;
x_38 = x_151;
goto lbl_39;
}
}
else
{
lean::dec(x_139);
lean::dec(x_128);
lean::dec(x_141);
if (lean::obj_tag(x_40) == 0)
{
obj* x_158; 
lean::dec(x_40);
x_158 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_158);
x_35 = x_158;
goto lbl_36;
}
else
{
obj* x_160; obj* x_163; 
x_160 = lean::cnstr_get(x_40, 0);
lean::inc(x_160);
lean::dec(x_40);
x_163 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_163);
x_37 = x_163;
x_38 = x_160;
goto lbl_39;
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_term_binder__default_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_term_type__spec_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_lean_parser_term_binder__ident_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_binder__ident_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
return x_1;
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__5() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_7; 
x_7 = l_lean_parser_syntax_as__node___main(x_1);
if (lean::obj_tag(x_7) == 0)
{
obj* x_9; 
lean::dec(x_7);
x_9 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3;
lean::inc(x_9);
x_5 = x_9;
goto lbl_6;
}
else
{
obj* x_11; obj* x_14; obj* x_17; obj* x_19; 
x_11 = lean::cnstr_get(x_7, 0);
lean::inc(x_11);
lean::dec(x_7);
x_14 = lean::cnstr_get(x_11, 1);
lean::inc(x_14);
lean::dec(x_11);
x_17 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4;
lean::inc(x_17);
x_19 = l_list_map___main___rarg(x_17, x_14);
x_5 = x_19;
goto lbl_6;
}
lbl_6:
{
obj* x_20; obj* x_22; obj* x_23; obj* x_25; obj* x_26; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_28; 
x_28 = lean::box(3);
x_25 = x_0;
x_26 = x_28;
goto lbl_27;
}
else
{
obj* x_29; obj* x_31; 
x_29 = lean::cnstr_get(x_0, 0);
lean::inc(x_29);
x_31 = lean::cnstr_get(x_0, 1);
lean::inc(x_31);
lean::dec(x_0);
x_25 = x_31;
x_26 = x_29;
goto lbl_27;
}
lbl_21:
{
obj* x_34; obj* x_35; 
x_34 = lean::box(3);
x_35 = l_lean_parser_syntax_as__node___main(x_34);
if (lean::obj_tag(x_35) == 0)
{
obj* x_37; obj* x_39; 
lean::dec(x_35);
x_37 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_37);
x_39 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_39, 0, x_5);
lean::cnstr_set(x_39, 1, x_20);
lean::cnstr_set(x_39, 2, x_37);
return x_39;
}
else
{
obj* x_40; obj* x_42; obj* x_43; 
x_40 = lean::cnstr_get(x_35, 0);
lean::inc(x_40);
if (lean::is_shared(x_35)) {
 lean::dec(x_35);
 x_42 = lean::box(0);
} else {
 lean::cnstr_release(x_35, 0);
 x_42 = x_35;
}
x_43 = lean::cnstr_get(x_40, 1);
lean::inc(x_43);
lean::dec(x_40);
if (lean::obj_tag(x_43) == 0)
{
obj* x_48; obj* x_49; 
lean::dec(x_42);
lean::dec(x_43);
x_48 = lean::box(0);
x_49 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_49, 0, x_5);
lean::cnstr_set(x_49, 1, x_20);
lean::cnstr_set(x_49, 2, x_48);
return x_49;
}
else
{
obj* x_50; obj* x_52; 
x_50 = lean::cnstr_get(x_43, 0);
lean::inc(x_50);
x_52 = lean::cnstr_get(x_43, 1);
lean::inc(x_52);
lean::dec(x_43);
if (lean::obj_tag(x_52) == 0)
{
obj* x_56; obj* x_57; obj* x_59; obj* x_60; obj* x_61; 
lean::dec(x_52);
x_56 = l_lean_parser_term_binder__default_has__view;
x_57 = lean::cnstr_get(x_56, 0);
lean::inc(x_57);
x_59 = lean::apply_1(x_57, x_50);
if (lean::is_scalar(x_42)) {
 x_60 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_60 = x_42;
}
lean::cnstr_set(x_60, 0, x_59);
x_61 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_61, 0, x_5);
lean::cnstr_set(x_61, 1, x_20);
lean::cnstr_set(x_61, 2, x_60);
return x_61;
}
else
{
obj* x_65; obj* x_67; 
lean::dec(x_42);
lean::dec(x_52);
lean::dec(x_50);
x_65 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_65);
x_67 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_67, 0, x_5);
lean::cnstr_set(x_67, 1, x_20);
lean::cnstr_set(x_67, 2, x_65);
return x_67;
}
}
}
}
lbl_24:
{
obj* x_68; 
x_68 = l_lean_parser_syntax_as__node___main(x_23);
if (lean::obj_tag(x_68) == 0)
{
obj* x_70; obj* x_72; 
lean::dec(x_68);
x_70 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_70);
x_72 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_72, 0, x_5);
lean::cnstr_set(x_72, 1, x_22);
lean::cnstr_set(x_72, 2, x_70);
return x_72;
}
else
{
obj* x_73; obj* x_75; obj* x_76; 
x_73 = lean::cnstr_get(x_68, 0);
lean::inc(x_73);
if (lean::is_shared(x_68)) {
 lean::dec(x_68);
 x_75 = lean::box(0);
} else {
 lean::cnstr_release(x_68, 0);
 x_75 = x_68;
}
x_76 = lean::cnstr_get(x_73, 1);
lean::inc(x_76);
lean::dec(x_73);
if (lean::obj_tag(x_76) == 0)
{
obj* x_81; obj* x_82; 
lean::dec(x_75);
lean::dec(x_76);
x_81 = lean::box(0);
x_82 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_82, 0, x_5);
lean::cnstr_set(x_82, 1, x_22);
lean::cnstr_set(x_82, 2, x_81);
return x_82;
}
else
{
obj* x_83; obj* x_85; 
x_83 = lean::cnstr_get(x_76, 0);
lean::inc(x_83);
x_85 = lean::cnstr_get(x_76, 1);
lean::inc(x_85);
lean::dec(x_76);
if (lean::obj_tag(x_85) == 0)
{
obj* x_89; obj* x_90; obj* x_92; obj* x_93; obj* x_94; 
lean::dec(x_85);
x_89 = l_lean_parser_term_binder__default_has__view;
x_90 = lean::cnstr_get(x_89, 0);
lean::inc(x_90);
x_92 = lean::apply_1(x_90, x_83);
if (lean::is_scalar(x_75)) {
 x_93 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_93 = x_75;
}
lean::cnstr_set(x_93, 0, x_92);
x_94 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_94, 0, x_5);
lean::cnstr_set(x_94, 1, x_22);
lean::cnstr_set(x_94, 2, x_93);
return x_94;
}
else
{
obj* x_98; obj* x_100; 
lean::dec(x_83);
lean::dec(x_75);
lean::dec(x_85);
x_98 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_98);
x_100 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_100, 0, x_5);
lean::cnstr_set(x_100, 1, x_22);
lean::cnstr_set(x_100, 2, x_98);
return x_100;
}
}
}
}
lbl_27:
{
obj* x_101; 
x_101 = l_lean_parser_syntax_as__node___main(x_26);
if (lean::obj_tag(x_101) == 0)
{
lean::dec(x_101);
if (lean::obj_tag(x_25) == 0)
{
obj* x_104; 
lean::dec(x_25);
x_104 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_104);
x_20 = x_104;
goto lbl_21;
}
else
{
obj* x_106; obj* x_109; 
x_106 = lean::cnstr_get(x_25, 0);
lean::inc(x_106);
lean::dec(x_25);
x_109 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_109);
x_22 = x_109;
x_23 = x_106;
goto lbl_24;
}
}
else
{
obj* x_111; obj* x_113; obj* x_114; 
x_111 = lean::cnstr_get(x_101, 0);
lean::inc(x_111);
if (lean::is_shared(x_101)) {
 lean::dec(x_101);
 x_113 = lean::box(0);
} else {
 lean::cnstr_release(x_101, 0);
 x_113 = x_101;
}
x_114 = lean::cnstr_get(x_111, 1);
lean::inc(x_114);
lean::dec(x_111);
if (lean::obj_tag(x_114) == 0)
{
obj* x_119; 
lean::dec(x_113);
lean::dec(x_114);
x_119 = lean::box(0);
if (lean::obj_tag(x_25) == 0)
{
lean::dec(x_25);
x_20 = x_119;
goto lbl_21;
}
else
{
obj* x_121; 
x_121 = lean::cnstr_get(x_25, 0);
lean::inc(x_121);
lean::dec(x_25);
x_22 = x_119;
x_23 = x_121;
goto lbl_24;
}
}
else
{
obj* x_124; obj* x_126; 
x_124 = lean::cnstr_get(x_114, 0);
lean::inc(x_124);
x_126 = lean::cnstr_get(x_114, 1);
lean::inc(x_126);
lean::dec(x_114);
if (lean::obj_tag(x_126) == 0)
{
obj* x_130; obj* x_131; obj* x_133; obj* x_134; 
lean::dec(x_126);
x_130 = l_lean_parser_term_type__spec_has__view;
x_131 = lean::cnstr_get(x_130, 0);
lean::inc(x_131);
x_133 = lean::apply_1(x_131, x_124);
if (lean::is_scalar(x_113)) {
 x_134 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_134 = x_113;
}
lean::cnstr_set(x_134, 0, x_133);
if (lean::obj_tag(x_25) == 0)
{
lean::dec(x_25);
x_20 = x_134;
goto lbl_21;
}
else
{
obj* x_136; 
x_136 = lean::cnstr_get(x_25, 0);
lean::inc(x_136);
lean::dec(x_25);
x_22 = x_134;
x_23 = x_136;
goto lbl_24;
}
}
else
{
lean::dec(x_113);
lean::dec(x_124);
lean::dec(x_126);
if (lean::obj_tag(x_25) == 0)
{
obj* x_143; 
lean::dec(x_25);
x_143 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_143);
x_20 = x_143;
goto lbl_21;
}
else
{
obj* x_145; obj* x_148; 
x_145 = lean::cnstr_get(x_25, 0);
lean::inc(x_145);
lean::dec(x_25);
x_148 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_148);
x_22 = x_148;
x_23 = x_145;
goto lbl_24;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__1;
lean::inc(x_8);
x_10 = l_list_map___main___rarg(x_8, x_1);
x_11 = l_lean_parser_no__kind;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::box(0);
if (lean::obj_tag(x_3) == 0)
{
lean::dec(x_3);
if (lean::obj_tag(x_5) == 0)
{
obj* x_18; obj* x_20; obj* x_21; obj* x_23; 
lean::dec(x_14);
lean::dec(x_5);
x_18 = l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__2;
lean::inc(x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_13);
lean::cnstr_set(x_20, 1, x_18);
x_21 = l_lean_parser_term_binder__content;
lean::inc(x_21);
x_23 = l_lean_parser_syntax_mk__node(x_21, x_20);
return x_23;
}
else
{
obj* x_24; obj* x_27; obj* x_28; obj* x_30; obj* x_32; obj* x_34; obj* x_35; obj* x_36; obj* x_38; obj* x_39; obj* x_40; obj* x_42; 
x_24 = lean::cnstr_get(x_5, 0);
lean::inc(x_24);
lean::dec(x_5);
x_27 = l_lean_parser_term_binder__default_has__view;
x_28 = lean::cnstr_get(x_27, 1);
lean::inc(x_28);
x_30 = lean::apply_1(x_28, x_24);
lean::inc(x_14);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_30);
lean::cnstr_set(x_32, 1, x_14);
lean::inc(x_11);
x_34 = l_lean_parser_syntax_mk__node(x_11, x_32);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_14);
x_36 = l_lean_parser_combinators_many___rarg___closed__1;
lean::inc(x_36);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_36);
lean::cnstr_set(x_38, 1, x_35);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_13);
lean::cnstr_set(x_39, 1, x_38);
x_40 = l_lean_parser_term_binder__content;
lean::inc(x_40);
x_42 = l_lean_parser_syntax_mk__node(x_40, x_39);
return x_42;
}
}
else
{
obj* x_43; obj* x_46; obj* x_47; obj* x_49; obj* x_51; obj* x_53; 
x_43 = lean::cnstr_get(x_3, 0);
lean::inc(x_43);
lean::dec(x_3);
x_46 = l_lean_parser_term_type__spec_has__view;
x_47 = lean::cnstr_get(x_46, 1);
lean::inc(x_47);
x_49 = lean::apply_1(x_47, x_43);
lean::inc(x_14);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_49);
lean::cnstr_set(x_51, 1, x_14);
lean::inc(x_11);
x_53 = l_lean_parser_syntax_mk__node(x_11, x_51);
if (lean::obj_tag(x_5) == 0)
{
obj* x_56; obj* x_58; obj* x_59; obj* x_60; obj* x_62; 
lean::dec(x_14);
lean::dec(x_5);
x_56 = l_lean_parser_detail__ident_has__view_x_27___lambda__2___closed__1;
lean::inc(x_56);
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_53);
lean::cnstr_set(x_58, 1, x_56);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_13);
lean::cnstr_set(x_59, 1, x_58);
x_60 = l_lean_parser_term_binder__content;
lean::inc(x_60);
x_62 = l_lean_parser_syntax_mk__node(x_60, x_59);
return x_62;
}
else
{
obj* x_63; obj* x_66; obj* x_67; obj* x_69; obj* x_71; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_79; 
x_63 = lean::cnstr_get(x_5, 0);
lean::inc(x_63);
lean::dec(x_5);
x_66 = l_lean_parser_term_binder__default_has__view;
x_67 = lean::cnstr_get(x_66, 1);
lean::inc(x_67);
x_69 = lean::apply_1(x_67, x_63);
lean::inc(x_14);
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_69);
lean::cnstr_set(x_71, 1, x_14);
lean::inc(x_11);
x_73 = l_lean_parser_syntax_mk__node(x_11, x_71);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_14);
x_75 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_75, 0, x_53);
lean::cnstr_set(x_75, 1, x_74);
x_76 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_76, 0, x_13);
lean::cnstr_set(x_76, 1, x_75);
x_77 = l_lean_parser_term_binder__content;
lean::inc(x_77);
x_79 = l_lean_parser_syntax_mk__node(x_77, x_76);
return x_79;
}
}
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_binder__ident_has__view;
x_1 = lean::cnstr_get(x_0, 1);
lean::inc(x_1);
return x_1;
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = l_lean_parser_no__kind;
lean::inc(x_0);
lean::inc(x_1);
x_4 = l_lean_parser_syntax_mk__node(x_1, x_0);
lean::inc(x_4);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_4);
lean::cnstr_set(x_7, 1, x_6);
return x_7;
}
}
obj* _init_l_lean_parser_term_binder__content_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binder__content_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_binder__content_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_binder__content;
x_6 = l_lean_parser_term_binder__content_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_binder__content_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__ident_parser), 5, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many1___at_lean_parser_command_notation__spec_parser___spec__2), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default_parser), 5, 0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_3, 0, x_2);
x_4 = lean::box(0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_3);
lean::cnstr_set(x_5, 1, x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_1);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder__content_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_21; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__ident_parser), 5, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many1___at_lean_parser_command_notation__spec_parser___spec__2), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default_parser), 5, 0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_3, 0, x_2);
x_4 = lean::box(0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_3);
lean::cnstr_set(x_5, 1, x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_1);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_lean_parser_term__parser__m_monad;
x_10 = l_lean_parser_term__parser__m_monad__except;
x_11 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_12 = l_lean_parser_term__parser__m_alternative;
x_13 = l_lean_parser_term_binder__content;
x_14 = l_lean_parser_term_binder__content_has__view;
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
x_21 = l_lean_parser_combinators_node_view___rarg(x_9, x_10, x_11, x_12, x_13, x_8, x_14);
return x_21;
}
}
obj* _init_l_lean_parser_term_binder__content_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; 
x_0 = l_lean_parser_term_binder__ident_parser_lean_parser_has__tokens;
lean::inc(x_0);
x_2 = l_lean_parser_tokens___rarg(x_0);
x_3 = l_lean_parser_term_binder__default_parser_lean_parser_has__tokens;
lean::inc(x_3);
x_5 = l_lean_parser_tokens___rarg(x_3);
x_6 = lean::box(0);
x_7 = l_lean_parser_list_cons_tokens___rarg(x_5, x_6);
x_8 = l_lean_parser_term_opt__type_parser_lean_parser_has__tokens;
lean::inc(x_8);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_8, x_7);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_2, x_10);
x_12 = l_lean_parser_tokens___rarg(x_11);
return x_12;
}
}
obj* _init_l_lean_parser_term_simple__explicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("simple_explicit_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_simple__explicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
x_35 = lean::box(3);
x_32 = x_1;
x_33 = x_35;
goto lbl_34;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_1, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
lean::dec(x_1);
x_32 = x_38;
x_33 = x_36;
goto lbl_34;
}
lbl_34:
{
obj* x_41; 
switch (lean::obj_tag(x_33)) {
case 0:
{
obj* x_44; 
lean::dec(x_33);
x_44 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_44);
x_41 = x_44;
goto lbl_42;
}
case 1:
{
obj* x_46; 
x_46 = lean::cnstr_get(x_33, 0);
lean::inc(x_46);
lean::dec(x_33);
x_41 = x_46;
goto lbl_42;
}
case 2:
{
obj* x_50; 
lean::dec(x_33);
x_50 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_50);
x_41 = x_50;
goto lbl_42;
}
default:
{
obj* x_53; 
lean::dec(x_33);
x_53 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_53);
x_41 = x_53;
goto lbl_42;
}
}
lbl_42:
{
obj* x_55; obj* x_56; obj* x_57; obj* x_59; obj* x_60; 
if (lean::obj_tag(x_32) == 0)
{
obj* x_62; 
x_62 = lean::box(3);
x_59 = x_32;
x_60 = x_62;
goto lbl_61;
}
else
{
obj* x_63; obj* x_65; 
x_63 = lean::cnstr_get(x_32, 0);
lean::inc(x_63);
x_65 = lean::cnstr_get(x_32, 1);
lean::inc(x_65);
lean::dec(x_32);
x_59 = x_65;
x_60 = x_63;
goto lbl_61;
}
lbl_58:
{
if (lean::obj_tag(x_57) == 0)
{
obj* x_69; obj* x_70; 
lean::dec(x_57);
x_69 = lean::box(0);
x_70 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_70, 0, x_20);
lean::cnstr_set(x_70, 1, x_41);
lean::cnstr_set(x_70, 2, x_55);
lean::cnstr_set(x_70, 3, x_56);
lean::cnstr_set(x_70, 4, x_69);
return x_70;
}
else
{
obj* x_71; 
x_71 = lean::cnstr_get(x_57, 0);
lean::inc(x_71);
lean::dec(x_57);
switch (lean::obj_tag(x_71)) {
case 0:
{
obj* x_74; obj* x_77; obj* x_78; 
x_74 = lean::cnstr_get(x_71, 0);
lean::inc(x_74);
lean::dec(x_71);
x_77 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_77, 0, x_74);
x_78 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_78, 0, x_20);
lean::cnstr_set(x_78, 1, x_41);
lean::cnstr_set(x_78, 2, x_55);
lean::cnstr_set(x_78, 3, x_56);
lean::cnstr_set(x_78, 4, x_77);
return x_78;
}
case 1:
{
obj* x_80; obj* x_81; 
lean::dec(x_71);
x_80 = lean::box(0);
x_81 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_81, 0, x_20);
lean::cnstr_set(x_81, 1, x_41);
lean::cnstr_set(x_81, 2, x_55);
lean::cnstr_set(x_81, 3, x_56);
lean::cnstr_set(x_81, 4, x_80);
return x_81;
}
case 2:
{
obj* x_83; obj* x_84; 
lean::dec(x_71);
x_83 = lean::box(0);
x_84 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_84, 0, x_20);
lean::cnstr_set(x_84, 1, x_41);
lean::cnstr_set(x_84, 2, x_55);
lean::cnstr_set(x_84, 3, x_56);
lean::cnstr_set(x_84, 4, x_83);
return x_84;
}
default:
{
obj* x_86; obj* x_87; 
lean::dec(x_71);
x_86 = lean::box(0);
x_87 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_87, 0, x_20);
lean::cnstr_set(x_87, 1, x_41);
lean::cnstr_set(x_87, 2, x_55);
lean::cnstr_set(x_87, 3, x_56);
lean::cnstr_set(x_87, 4, x_86);
return x_87;
}
}
}
}
lbl_61:
{
obj* x_88; 
switch (lean::obj_tag(x_60)) {
case 0:
{
obj* x_90; obj* x_93; 
x_90 = lean::cnstr_get(x_60, 0);
lean::inc(x_90);
lean::dec(x_60);
x_93 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_93, 0, x_90);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_93;
goto lbl_89;
}
else
{
obj* x_94; obj* x_96; 
x_94 = lean::cnstr_get(x_59, 0);
lean::inc(x_94);
x_96 = lean::cnstr_get(x_59, 1);
lean::inc(x_96);
lean::dec(x_59);
x_55 = x_93;
x_56 = x_94;
x_57 = x_96;
goto lbl_58;
}
}
case 1:
{
obj* x_100; 
lean::dec(x_60);
x_100 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_100;
goto lbl_89;
}
else
{
obj* x_101; obj* x_103; 
x_101 = lean::cnstr_get(x_59, 0);
lean::inc(x_101);
x_103 = lean::cnstr_get(x_59, 1);
lean::inc(x_103);
lean::dec(x_59);
x_55 = x_100;
x_56 = x_101;
x_57 = x_103;
goto lbl_58;
}
}
case 2:
{
obj* x_107; 
lean::dec(x_60);
x_107 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_107;
goto lbl_89;
}
else
{
obj* x_108; obj* x_110; 
x_108 = lean::cnstr_get(x_59, 0);
lean::inc(x_108);
x_110 = lean::cnstr_get(x_59, 1);
lean::inc(x_110);
lean::dec(x_59);
x_55 = x_107;
x_56 = x_108;
x_57 = x_110;
goto lbl_58;
}
}
default:
{
obj* x_114; 
lean::dec(x_60);
x_114 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_114;
goto lbl_89;
}
else
{
obj* x_115; obj* x_117; 
x_115 = lean::cnstr_get(x_59, 0);
lean::inc(x_115);
x_117 = lean::cnstr_get(x_59, 1);
lean::inc(x_117);
lean::dec(x_59);
x_55 = x_114;
x_56 = x_115;
x_57 = x_117;
goto lbl_58;
}
}
}
lbl_89:
{
if (lean::obj_tag(x_59) == 0)
{
obj* x_121; obj* x_122; obj* x_123; 
lean::dec(x_59);
x_121 = lean::box(0);
x_122 = lean::box(3);
x_123 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_123, 0, x_20);
lean::cnstr_set(x_123, 1, x_41);
lean::cnstr_set(x_123, 2, x_88);
lean::cnstr_set(x_123, 3, x_122);
lean::cnstr_set(x_123, 4, x_121);
return x_123;
}
else
{
obj* x_124; 
x_124 = lean::cnstr_get(x_59, 0);
lean::inc(x_124);
lean::dec(x_59);
switch (lean::obj_tag(x_124)) {
case 0:
{
obj* x_127; obj* x_130; obj* x_131; obj* x_132; 
x_127 = lean::cnstr_get(x_124, 0);
lean::inc(x_127);
lean::dec(x_124);
x_130 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_130, 0, x_127);
x_131 = lean::box(3);
x_132 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_132, 0, x_20);
lean::cnstr_set(x_132, 1, x_41);
lean::cnstr_set(x_132, 2, x_88);
lean::cnstr_set(x_132, 3, x_131);
lean::cnstr_set(x_132, 4, x_130);
return x_132;
}
case 1:
{
obj* x_134; obj* x_135; obj* x_136; 
lean::dec(x_124);
x_134 = lean::box(0);
x_135 = lean::box(3);
x_136 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_136, 0, x_20);
lean::cnstr_set(x_136, 1, x_41);
lean::cnstr_set(x_136, 2, x_88);
lean::cnstr_set(x_136, 3, x_135);
lean::cnstr_set(x_136, 4, x_134);
return x_136;
}
case 2:
{
obj* x_138; obj* x_139; obj* x_140; 
lean::dec(x_124);
x_138 = lean::box(0);
x_139 = lean::box(3);
x_140 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_140, 0, x_20);
lean::cnstr_set(x_140, 1, x_41);
lean::cnstr_set(x_140, 2, x_88);
lean::cnstr_set(x_140, 3, x_139);
lean::cnstr_set(x_140, 4, x_138);
return x_140;
}
default:
{
obj* x_142; obj* x_143; obj* x_144; 
lean::dec(x_124);
x_142 = lean::box(0);
x_143 = lean::box(3);
x_144 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_144, 0, x_20);
lean::cnstr_set(x_144, 1, x_41);
lean::cnstr_set(x_144, 2, x_88);
lean::cnstr_set(x_144, 3, x_143);
lean::cnstr_set(x_144, 4, x_142);
return x_144;
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_19:
{
obj* x_26; 
switch (lean::obj_tag(x_18)) {
case 0:
{
obj* x_29; 
lean::dec(x_18);
x_29 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_29);
x_26 = x_29;
goto lbl_27;
}
case 1:
{
obj* x_31; 
x_31 = lean::cnstr_get(x_18, 0);
lean::inc(x_31);
lean::dec(x_18);
x_26 = x_31;
goto lbl_27;
}
case 2:
{
obj* x_35; 
lean::dec(x_18);
x_35 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_35);
x_26 = x_35;
goto lbl_27;
}
default:
{
obj* x_38; 
lean::dec(x_18);
x_38 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_38);
x_26 = x_38;
goto lbl_27;
}
}
lbl_27:
{
obj* x_40; obj* x_41; obj* x_42; obj* x_44; obj* x_45; 
if (lean::obj_tag(x_17) == 0)
{
obj* x_47; 
x_47 = lean::box(3);
x_44 = x_17;
x_45 = x_47;
goto lbl_46;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_17, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_17, 1);
lean::inc(x_50);
lean::dec(x_17);
x_44 = x_50;
x_45 = x_48;
goto lbl_46;
}
lbl_43:
{
if (lean::obj_tag(x_42) == 0)
{
obj* x_54; obj* x_55; 
lean::dec(x_42);
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_55, 0, x_5);
lean::cnstr_set(x_55, 1, x_26);
lean::cnstr_set(x_55, 2, x_40);
lean::cnstr_set(x_55, 3, x_41);
lean::cnstr_set(x_55, 4, x_54);
return x_55;
}
else
{
obj* x_56; 
x_56 = lean::cnstr_get(x_42, 0);
lean::inc(x_56);
lean::dec(x_42);
switch (lean::obj_tag(x_56)) {
case 0:
{
obj* x_59; obj* x_62; obj* x_63; 
x_59 = lean::cnstr_get(x_56, 0);
lean::inc(x_59);
lean::dec(x_56);
x_62 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_62, 0, x_59);
x_63 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_63, 0, x_5);
lean::cnstr_set(x_63, 1, x_26);
lean::cnstr_set(x_63, 2, x_40);
lean::cnstr_set(x_63, 3, x_41);
lean::cnstr_set(x_63, 4, x_62);
return x_63;
}
case 1:
{
obj* x_65; obj* x_66; 
lean::dec(x_56);
x_65 = lean::box(0);
x_66 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_66, 0, x_5);
lean::cnstr_set(x_66, 1, x_26);
lean::cnstr_set(x_66, 2, x_40);
lean::cnstr_set(x_66, 3, x_41);
lean::cnstr_set(x_66, 4, x_65);
return x_66;
}
case 2:
{
obj* x_68; obj* x_69; 
lean::dec(x_56);
x_68 = lean::box(0);
x_69 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_69, 0, x_5);
lean::cnstr_set(x_69, 1, x_26);
lean::cnstr_set(x_69, 2, x_40);
lean::cnstr_set(x_69, 3, x_41);
lean::cnstr_set(x_69, 4, x_68);
return x_69;
}
default:
{
obj* x_71; obj* x_72; 
lean::dec(x_56);
x_71 = lean::box(0);
x_72 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_72, 0, x_5);
lean::cnstr_set(x_72, 1, x_26);
lean::cnstr_set(x_72, 2, x_40);
lean::cnstr_set(x_72, 3, x_41);
lean::cnstr_set(x_72, 4, x_71);
return x_72;
}
}
}
}
lbl_46:
{
obj* x_73; 
switch (lean::obj_tag(x_45)) {
case 0:
{
obj* x_75; obj* x_78; 
x_75 = lean::cnstr_get(x_45, 0);
lean::inc(x_75);
lean::dec(x_45);
x_78 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_78, 0, x_75);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_78;
goto lbl_74;
}
else
{
obj* x_79; obj* x_81; 
x_79 = lean::cnstr_get(x_44, 0);
lean::inc(x_79);
x_81 = lean::cnstr_get(x_44, 1);
lean::inc(x_81);
lean::dec(x_44);
x_40 = x_78;
x_41 = x_79;
x_42 = x_81;
goto lbl_43;
}
}
case 1:
{
obj* x_85; 
lean::dec(x_45);
x_85 = lean::box(0);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_85;
goto lbl_74;
}
else
{
obj* x_86; obj* x_88; 
x_86 = lean::cnstr_get(x_44, 0);
lean::inc(x_86);
x_88 = lean::cnstr_get(x_44, 1);
lean::inc(x_88);
lean::dec(x_44);
x_40 = x_85;
x_41 = x_86;
x_42 = x_88;
goto lbl_43;
}
}
case 2:
{
obj* x_92; 
lean::dec(x_45);
x_92 = lean::box(0);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_92;
goto lbl_74;
}
else
{
obj* x_93; obj* x_95; 
x_93 = lean::cnstr_get(x_44, 0);
lean::inc(x_93);
x_95 = lean::cnstr_get(x_44, 1);
lean::inc(x_95);
lean::dec(x_44);
x_40 = x_92;
x_41 = x_93;
x_42 = x_95;
goto lbl_43;
}
}
default:
{
obj* x_99; 
lean::dec(x_45);
x_99 = lean::box(0);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_99;
goto lbl_74;
}
else
{
obj* x_100; obj* x_102; 
x_100 = lean::cnstr_get(x_44, 0);
lean::inc(x_100);
x_102 = lean::cnstr_get(x_44, 1);
lean::inc(x_102);
lean::dec(x_44);
x_40 = x_99;
x_41 = x_100;
x_42 = x_102;
goto lbl_43;
}
}
}
lbl_74:
{
if (lean::obj_tag(x_44) == 0)
{
obj* x_106; obj* x_107; obj* x_108; 
lean::dec(x_44);
x_106 = lean::box(0);
x_107 = lean::box(3);
x_108 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_108, 0, x_5);
lean::cnstr_set(x_108, 1, x_26);
lean::cnstr_set(x_108, 2, x_73);
lean::cnstr_set(x_108, 3, x_107);
lean::cnstr_set(x_108, 4, x_106);
return x_108;
}
else
{
obj* x_109; 
x_109 = lean::cnstr_get(x_44, 0);
lean::inc(x_109);
lean::dec(x_44);
switch (lean::obj_tag(x_109)) {
case 0:
{
obj* x_112; obj* x_115; obj* x_116; obj* x_117; 
x_112 = lean::cnstr_get(x_109, 0);
lean::inc(x_112);
lean::dec(x_109);
x_115 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_115, 0, x_112);
x_116 = lean::box(3);
x_117 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_117, 0, x_5);
lean::cnstr_set(x_117, 1, x_26);
lean::cnstr_set(x_117, 2, x_73);
lean::cnstr_set(x_117, 3, x_116);
lean::cnstr_set(x_117, 4, x_115);
return x_117;
}
case 1:
{
obj* x_119; obj* x_120; obj* x_121; 
lean::dec(x_109);
x_119 = lean::box(0);
x_120 = lean::box(3);
x_121 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_121, 0, x_5);
lean::cnstr_set(x_121, 1, x_26);
lean::cnstr_set(x_121, 2, x_73);
lean::cnstr_set(x_121, 3, x_120);
lean::cnstr_set(x_121, 4, x_119);
return x_121;
}
case 2:
{
obj* x_123; obj* x_124; obj* x_125; 
lean::dec(x_109);
x_123 = lean::box(0);
x_124 = lean::box(3);
x_125 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_125, 0, x_5);
lean::cnstr_set(x_125, 1, x_26);
lean::cnstr_set(x_125, 2, x_73);
lean::cnstr_set(x_125, 3, x_124);
lean::cnstr_set(x_125, 4, x_123);
return x_125;
}
default:
{
obj* x_127; obj* x_128; obj* x_129; 
lean::dec(x_109);
x_127 = lean::box(0);
x_128 = lean::box(3);
x_129 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_129, 0, x_5);
lean::cnstr_set(x_129, 1, x_26);
lean::cnstr_set(x_129, 2, x_73);
lean::cnstr_set(x_129, 3, x_128);
lean::cnstr_set(x_129, 4, x_127);
return x_129;
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_14; obj* x_15; obj* x_17; obj* x_18; obj* x_20; obj* x_22; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_34; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_12);
x_14 = l_option_map___rarg(x_12, x_1);
x_15 = lean::box(3);
lean::inc(x_15);
x_17 = l_option_get__or__else___main___rarg(x_14, x_15);
x_18 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_18, 0, x_3);
lean::inc(x_12);
x_20 = l_option_map___rarg(x_12, x_5);
lean::inc(x_15);
x_22 = l_option_get__or__else___main___rarg(x_20, x_15);
lean::inc(x_12);
x_24 = l_option_map___rarg(x_12, x_9);
x_25 = l_option_get__or__else___main___rarg(x_24, x_15);
x_26 = lean::box(0);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_25);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_7);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_22);
lean::cnstr_set(x_29, 1, x_28);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_18);
lean::cnstr_set(x_30, 1, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_17);
lean::cnstr_set(x_31, 1, x_30);
x_32 = l_lean_parser_term_simple__explicit__binder;
lean::inc(x_32);
x_34 = l_lean_parser_syntax_mk__node(x_32, x_31);
return x_34;
}
}
obj* _init_l_lean_parser_term_simple__explicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_simple__explicit__binder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_simple__implicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("simple_implicit_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_simple__implicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
x_35 = lean::box(3);
x_32 = x_1;
x_33 = x_35;
goto lbl_34;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_1, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
lean::dec(x_1);
x_32 = x_38;
x_33 = x_36;
goto lbl_34;
}
lbl_34:
{
obj* x_41; 
switch (lean::obj_tag(x_33)) {
case 0:
{
obj* x_44; 
lean::dec(x_33);
x_44 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_44);
x_41 = x_44;
goto lbl_42;
}
case 1:
{
obj* x_46; 
x_46 = lean::cnstr_get(x_33, 0);
lean::inc(x_46);
lean::dec(x_33);
x_41 = x_46;
goto lbl_42;
}
case 2:
{
obj* x_50; 
lean::dec(x_33);
x_50 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_50);
x_41 = x_50;
goto lbl_42;
}
default:
{
obj* x_53; 
lean::dec(x_33);
x_53 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_53);
x_41 = x_53;
goto lbl_42;
}
}
lbl_42:
{
obj* x_55; obj* x_56; obj* x_57; obj* x_59; obj* x_60; 
if (lean::obj_tag(x_32) == 0)
{
obj* x_62; 
x_62 = lean::box(3);
x_59 = x_32;
x_60 = x_62;
goto lbl_61;
}
else
{
obj* x_63; obj* x_65; 
x_63 = lean::cnstr_get(x_32, 0);
lean::inc(x_63);
x_65 = lean::cnstr_get(x_32, 1);
lean::inc(x_65);
lean::dec(x_32);
x_59 = x_65;
x_60 = x_63;
goto lbl_61;
}
lbl_58:
{
if (lean::obj_tag(x_57) == 0)
{
obj* x_69; obj* x_70; 
lean::dec(x_57);
x_69 = lean::box(0);
x_70 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_70, 0, x_20);
lean::cnstr_set(x_70, 1, x_41);
lean::cnstr_set(x_70, 2, x_55);
lean::cnstr_set(x_70, 3, x_56);
lean::cnstr_set(x_70, 4, x_69);
return x_70;
}
else
{
obj* x_71; 
x_71 = lean::cnstr_get(x_57, 0);
lean::inc(x_71);
lean::dec(x_57);
switch (lean::obj_tag(x_71)) {
case 0:
{
obj* x_74; obj* x_77; obj* x_78; 
x_74 = lean::cnstr_get(x_71, 0);
lean::inc(x_74);
lean::dec(x_71);
x_77 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_77, 0, x_74);
x_78 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_78, 0, x_20);
lean::cnstr_set(x_78, 1, x_41);
lean::cnstr_set(x_78, 2, x_55);
lean::cnstr_set(x_78, 3, x_56);
lean::cnstr_set(x_78, 4, x_77);
return x_78;
}
case 1:
{
obj* x_80; obj* x_81; 
lean::dec(x_71);
x_80 = lean::box(0);
x_81 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_81, 0, x_20);
lean::cnstr_set(x_81, 1, x_41);
lean::cnstr_set(x_81, 2, x_55);
lean::cnstr_set(x_81, 3, x_56);
lean::cnstr_set(x_81, 4, x_80);
return x_81;
}
case 2:
{
obj* x_83; obj* x_84; 
lean::dec(x_71);
x_83 = lean::box(0);
x_84 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_84, 0, x_20);
lean::cnstr_set(x_84, 1, x_41);
lean::cnstr_set(x_84, 2, x_55);
lean::cnstr_set(x_84, 3, x_56);
lean::cnstr_set(x_84, 4, x_83);
return x_84;
}
default:
{
obj* x_86; obj* x_87; 
lean::dec(x_71);
x_86 = lean::box(0);
x_87 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_87, 0, x_20);
lean::cnstr_set(x_87, 1, x_41);
lean::cnstr_set(x_87, 2, x_55);
lean::cnstr_set(x_87, 3, x_56);
lean::cnstr_set(x_87, 4, x_86);
return x_87;
}
}
}
}
lbl_61:
{
obj* x_88; 
switch (lean::obj_tag(x_60)) {
case 0:
{
obj* x_90; obj* x_93; 
x_90 = lean::cnstr_get(x_60, 0);
lean::inc(x_90);
lean::dec(x_60);
x_93 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_93, 0, x_90);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_93;
goto lbl_89;
}
else
{
obj* x_94; obj* x_96; 
x_94 = lean::cnstr_get(x_59, 0);
lean::inc(x_94);
x_96 = lean::cnstr_get(x_59, 1);
lean::inc(x_96);
lean::dec(x_59);
x_55 = x_93;
x_56 = x_94;
x_57 = x_96;
goto lbl_58;
}
}
case 1:
{
obj* x_100; 
lean::dec(x_60);
x_100 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_100;
goto lbl_89;
}
else
{
obj* x_101; obj* x_103; 
x_101 = lean::cnstr_get(x_59, 0);
lean::inc(x_101);
x_103 = lean::cnstr_get(x_59, 1);
lean::inc(x_103);
lean::dec(x_59);
x_55 = x_100;
x_56 = x_101;
x_57 = x_103;
goto lbl_58;
}
}
case 2:
{
obj* x_107; 
lean::dec(x_60);
x_107 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_107;
goto lbl_89;
}
else
{
obj* x_108; obj* x_110; 
x_108 = lean::cnstr_get(x_59, 0);
lean::inc(x_108);
x_110 = lean::cnstr_get(x_59, 1);
lean::inc(x_110);
lean::dec(x_59);
x_55 = x_107;
x_56 = x_108;
x_57 = x_110;
goto lbl_58;
}
}
default:
{
obj* x_114; 
lean::dec(x_60);
x_114 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_114;
goto lbl_89;
}
else
{
obj* x_115; obj* x_117; 
x_115 = lean::cnstr_get(x_59, 0);
lean::inc(x_115);
x_117 = lean::cnstr_get(x_59, 1);
lean::inc(x_117);
lean::dec(x_59);
x_55 = x_114;
x_56 = x_115;
x_57 = x_117;
goto lbl_58;
}
}
}
lbl_89:
{
if (lean::obj_tag(x_59) == 0)
{
obj* x_121; obj* x_122; obj* x_123; 
lean::dec(x_59);
x_121 = lean::box(0);
x_122 = lean::box(3);
x_123 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_123, 0, x_20);
lean::cnstr_set(x_123, 1, x_41);
lean::cnstr_set(x_123, 2, x_88);
lean::cnstr_set(x_123, 3, x_122);
lean::cnstr_set(x_123, 4, x_121);
return x_123;
}
else
{
obj* x_124; 
x_124 = lean::cnstr_get(x_59, 0);
lean::inc(x_124);
lean::dec(x_59);
switch (lean::obj_tag(x_124)) {
case 0:
{
obj* x_127; obj* x_130; obj* x_131; obj* x_132; 
x_127 = lean::cnstr_get(x_124, 0);
lean::inc(x_127);
lean::dec(x_124);
x_130 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_130, 0, x_127);
x_131 = lean::box(3);
x_132 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_132, 0, x_20);
lean::cnstr_set(x_132, 1, x_41);
lean::cnstr_set(x_132, 2, x_88);
lean::cnstr_set(x_132, 3, x_131);
lean::cnstr_set(x_132, 4, x_130);
return x_132;
}
case 1:
{
obj* x_134; obj* x_135; obj* x_136; 
lean::dec(x_124);
x_134 = lean::box(0);
x_135 = lean::box(3);
x_136 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_136, 0, x_20);
lean::cnstr_set(x_136, 1, x_41);
lean::cnstr_set(x_136, 2, x_88);
lean::cnstr_set(x_136, 3, x_135);
lean::cnstr_set(x_136, 4, x_134);
return x_136;
}
case 2:
{
obj* x_138; obj* x_139; obj* x_140; 
lean::dec(x_124);
x_138 = lean::box(0);
x_139 = lean::box(3);
x_140 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_140, 0, x_20);
lean::cnstr_set(x_140, 1, x_41);
lean::cnstr_set(x_140, 2, x_88);
lean::cnstr_set(x_140, 3, x_139);
lean::cnstr_set(x_140, 4, x_138);
return x_140;
}
default:
{
obj* x_142; obj* x_143; obj* x_144; 
lean::dec(x_124);
x_142 = lean::box(0);
x_143 = lean::box(3);
x_144 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_144, 0, x_20);
lean::cnstr_set(x_144, 1, x_41);
lean::cnstr_set(x_144, 2, x_88);
lean::cnstr_set(x_144, 3, x_143);
lean::cnstr_set(x_144, 4, x_142);
return x_144;
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_19:
{
obj* x_26; 
switch (lean::obj_tag(x_18)) {
case 0:
{
obj* x_29; 
lean::dec(x_18);
x_29 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_29);
x_26 = x_29;
goto lbl_27;
}
case 1:
{
obj* x_31; 
x_31 = lean::cnstr_get(x_18, 0);
lean::inc(x_31);
lean::dec(x_18);
x_26 = x_31;
goto lbl_27;
}
case 2:
{
obj* x_35; 
lean::dec(x_18);
x_35 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_35);
x_26 = x_35;
goto lbl_27;
}
default:
{
obj* x_38; 
lean::dec(x_18);
x_38 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_38);
x_26 = x_38;
goto lbl_27;
}
}
lbl_27:
{
obj* x_40; obj* x_41; obj* x_42; obj* x_44; obj* x_45; 
if (lean::obj_tag(x_17) == 0)
{
obj* x_47; 
x_47 = lean::box(3);
x_44 = x_17;
x_45 = x_47;
goto lbl_46;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_17, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_17, 1);
lean::inc(x_50);
lean::dec(x_17);
x_44 = x_50;
x_45 = x_48;
goto lbl_46;
}
lbl_43:
{
if (lean::obj_tag(x_42) == 0)
{
obj* x_54; obj* x_55; 
lean::dec(x_42);
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_55, 0, x_5);
lean::cnstr_set(x_55, 1, x_26);
lean::cnstr_set(x_55, 2, x_40);
lean::cnstr_set(x_55, 3, x_41);
lean::cnstr_set(x_55, 4, x_54);
return x_55;
}
else
{
obj* x_56; 
x_56 = lean::cnstr_get(x_42, 0);
lean::inc(x_56);
lean::dec(x_42);
switch (lean::obj_tag(x_56)) {
case 0:
{
obj* x_59; obj* x_62; obj* x_63; 
x_59 = lean::cnstr_get(x_56, 0);
lean::inc(x_59);
lean::dec(x_56);
x_62 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_62, 0, x_59);
x_63 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_63, 0, x_5);
lean::cnstr_set(x_63, 1, x_26);
lean::cnstr_set(x_63, 2, x_40);
lean::cnstr_set(x_63, 3, x_41);
lean::cnstr_set(x_63, 4, x_62);
return x_63;
}
case 1:
{
obj* x_65; obj* x_66; 
lean::dec(x_56);
x_65 = lean::box(0);
x_66 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_66, 0, x_5);
lean::cnstr_set(x_66, 1, x_26);
lean::cnstr_set(x_66, 2, x_40);
lean::cnstr_set(x_66, 3, x_41);
lean::cnstr_set(x_66, 4, x_65);
return x_66;
}
case 2:
{
obj* x_68; obj* x_69; 
lean::dec(x_56);
x_68 = lean::box(0);
x_69 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_69, 0, x_5);
lean::cnstr_set(x_69, 1, x_26);
lean::cnstr_set(x_69, 2, x_40);
lean::cnstr_set(x_69, 3, x_41);
lean::cnstr_set(x_69, 4, x_68);
return x_69;
}
default:
{
obj* x_71; obj* x_72; 
lean::dec(x_56);
x_71 = lean::box(0);
x_72 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_72, 0, x_5);
lean::cnstr_set(x_72, 1, x_26);
lean::cnstr_set(x_72, 2, x_40);
lean::cnstr_set(x_72, 3, x_41);
lean::cnstr_set(x_72, 4, x_71);
return x_72;
}
}
}
}
lbl_46:
{
obj* x_73; 
switch (lean::obj_tag(x_45)) {
case 0:
{
obj* x_75; obj* x_78; 
x_75 = lean::cnstr_get(x_45, 0);
lean::inc(x_75);
lean::dec(x_45);
x_78 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_78, 0, x_75);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_78;
goto lbl_74;
}
else
{
obj* x_79; obj* x_81; 
x_79 = lean::cnstr_get(x_44, 0);
lean::inc(x_79);
x_81 = lean::cnstr_get(x_44, 1);
lean::inc(x_81);
lean::dec(x_44);
x_40 = x_78;
x_41 = x_79;
x_42 = x_81;
goto lbl_43;
}
}
case 1:
{
obj* x_85; 
lean::dec(x_45);
x_85 = lean::box(0);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_85;
goto lbl_74;
}
else
{
obj* x_86; obj* x_88; 
x_86 = lean::cnstr_get(x_44, 0);
lean::inc(x_86);
x_88 = lean::cnstr_get(x_44, 1);
lean::inc(x_88);
lean::dec(x_44);
x_40 = x_85;
x_41 = x_86;
x_42 = x_88;
goto lbl_43;
}
}
case 2:
{
obj* x_92; 
lean::dec(x_45);
x_92 = lean::box(0);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_92;
goto lbl_74;
}
else
{
obj* x_93; obj* x_95; 
x_93 = lean::cnstr_get(x_44, 0);
lean::inc(x_93);
x_95 = lean::cnstr_get(x_44, 1);
lean::inc(x_95);
lean::dec(x_44);
x_40 = x_92;
x_41 = x_93;
x_42 = x_95;
goto lbl_43;
}
}
default:
{
obj* x_99; 
lean::dec(x_45);
x_99 = lean::box(0);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_99;
goto lbl_74;
}
else
{
obj* x_100; obj* x_102; 
x_100 = lean::cnstr_get(x_44, 0);
lean::inc(x_100);
x_102 = lean::cnstr_get(x_44, 1);
lean::inc(x_102);
lean::dec(x_44);
x_40 = x_99;
x_41 = x_100;
x_42 = x_102;
goto lbl_43;
}
}
}
lbl_74:
{
if (lean::obj_tag(x_44) == 0)
{
obj* x_106; obj* x_107; obj* x_108; 
lean::dec(x_44);
x_106 = lean::box(0);
x_107 = lean::box(3);
x_108 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_108, 0, x_5);
lean::cnstr_set(x_108, 1, x_26);
lean::cnstr_set(x_108, 2, x_73);
lean::cnstr_set(x_108, 3, x_107);
lean::cnstr_set(x_108, 4, x_106);
return x_108;
}
else
{
obj* x_109; 
x_109 = lean::cnstr_get(x_44, 0);
lean::inc(x_109);
lean::dec(x_44);
switch (lean::obj_tag(x_109)) {
case 0:
{
obj* x_112; obj* x_115; obj* x_116; obj* x_117; 
x_112 = lean::cnstr_get(x_109, 0);
lean::inc(x_112);
lean::dec(x_109);
x_115 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_115, 0, x_112);
x_116 = lean::box(3);
x_117 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_117, 0, x_5);
lean::cnstr_set(x_117, 1, x_26);
lean::cnstr_set(x_117, 2, x_73);
lean::cnstr_set(x_117, 3, x_116);
lean::cnstr_set(x_117, 4, x_115);
return x_117;
}
case 1:
{
obj* x_119; obj* x_120; obj* x_121; 
lean::dec(x_109);
x_119 = lean::box(0);
x_120 = lean::box(3);
x_121 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_121, 0, x_5);
lean::cnstr_set(x_121, 1, x_26);
lean::cnstr_set(x_121, 2, x_73);
lean::cnstr_set(x_121, 3, x_120);
lean::cnstr_set(x_121, 4, x_119);
return x_121;
}
case 2:
{
obj* x_123; obj* x_124; obj* x_125; 
lean::dec(x_109);
x_123 = lean::box(0);
x_124 = lean::box(3);
x_125 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_125, 0, x_5);
lean::cnstr_set(x_125, 1, x_26);
lean::cnstr_set(x_125, 2, x_73);
lean::cnstr_set(x_125, 3, x_124);
lean::cnstr_set(x_125, 4, x_123);
return x_125;
}
default:
{
obj* x_127; obj* x_128; obj* x_129; 
lean::dec(x_109);
x_127 = lean::box(0);
x_128 = lean::box(3);
x_129 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_129, 0, x_5);
lean::cnstr_set(x_129, 1, x_26);
lean::cnstr_set(x_129, 2, x_73);
lean::cnstr_set(x_129, 3, x_128);
lean::cnstr_set(x_129, 4, x_127);
return x_129;
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_14; obj* x_15; obj* x_17; obj* x_18; obj* x_20; obj* x_22; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_34; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_12);
x_14 = l_option_map___rarg(x_12, x_1);
x_15 = lean::box(3);
lean::inc(x_15);
x_17 = l_option_get__or__else___main___rarg(x_14, x_15);
x_18 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_18, 0, x_3);
lean::inc(x_12);
x_20 = l_option_map___rarg(x_12, x_5);
lean::inc(x_15);
x_22 = l_option_get__or__else___main___rarg(x_20, x_15);
lean::inc(x_12);
x_24 = l_option_map___rarg(x_12, x_9);
x_25 = l_option_get__or__else___main___rarg(x_24, x_15);
x_26 = lean::box(0);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_25);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_7);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_22);
lean::cnstr_set(x_29, 1, x_28);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_18);
lean::cnstr_set(x_30, 1, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_17);
lean::cnstr_set(x_31, 1, x_30);
x_32 = l_lean_parser_term_simple__implicit__binder;
lean::inc(x_32);
x_34 = l_lean_parser_syntax_mk__node(x_32, x_31);
return x_34;
}
}
obj* _init_l_lean_parser_term_simple__implicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_simple__implicit__binder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_simple__strict__implicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("simple_strict_implicit_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
x_35 = lean::box(3);
x_32 = x_1;
x_33 = x_35;
goto lbl_34;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_1, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
lean::dec(x_1);
x_32 = x_38;
x_33 = x_36;
goto lbl_34;
}
lbl_34:
{
obj* x_41; 
switch (lean::obj_tag(x_33)) {
case 0:
{
obj* x_44; 
lean::dec(x_33);
x_44 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_44);
x_41 = x_44;
goto lbl_42;
}
case 1:
{
obj* x_46; 
x_46 = lean::cnstr_get(x_33, 0);
lean::inc(x_46);
lean::dec(x_33);
x_41 = x_46;
goto lbl_42;
}
case 2:
{
obj* x_50; 
lean::dec(x_33);
x_50 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_50);
x_41 = x_50;
goto lbl_42;
}
default:
{
obj* x_53; 
lean::dec(x_33);
x_53 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_53);
x_41 = x_53;
goto lbl_42;
}
}
lbl_42:
{
obj* x_55; obj* x_56; obj* x_57; obj* x_59; obj* x_60; 
if (lean::obj_tag(x_32) == 0)
{
obj* x_62; 
x_62 = lean::box(3);
x_59 = x_32;
x_60 = x_62;
goto lbl_61;
}
else
{
obj* x_63; obj* x_65; 
x_63 = lean::cnstr_get(x_32, 0);
lean::inc(x_63);
x_65 = lean::cnstr_get(x_32, 1);
lean::inc(x_65);
lean::dec(x_32);
x_59 = x_65;
x_60 = x_63;
goto lbl_61;
}
lbl_58:
{
if (lean::obj_tag(x_57) == 0)
{
obj* x_69; obj* x_70; 
lean::dec(x_57);
x_69 = lean::box(0);
x_70 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_70, 0, x_20);
lean::cnstr_set(x_70, 1, x_41);
lean::cnstr_set(x_70, 2, x_55);
lean::cnstr_set(x_70, 3, x_56);
lean::cnstr_set(x_70, 4, x_69);
return x_70;
}
else
{
obj* x_71; 
x_71 = lean::cnstr_get(x_57, 0);
lean::inc(x_71);
lean::dec(x_57);
switch (lean::obj_tag(x_71)) {
case 0:
{
obj* x_74; obj* x_77; obj* x_78; 
x_74 = lean::cnstr_get(x_71, 0);
lean::inc(x_74);
lean::dec(x_71);
x_77 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_77, 0, x_74);
x_78 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_78, 0, x_20);
lean::cnstr_set(x_78, 1, x_41);
lean::cnstr_set(x_78, 2, x_55);
lean::cnstr_set(x_78, 3, x_56);
lean::cnstr_set(x_78, 4, x_77);
return x_78;
}
case 1:
{
obj* x_80; obj* x_81; 
lean::dec(x_71);
x_80 = lean::box(0);
x_81 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_81, 0, x_20);
lean::cnstr_set(x_81, 1, x_41);
lean::cnstr_set(x_81, 2, x_55);
lean::cnstr_set(x_81, 3, x_56);
lean::cnstr_set(x_81, 4, x_80);
return x_81;
}
case 2:
{
obj* x_83; obj* x_84; 
lean::dec(x_71);
x_83 = lean::box(0);
x_84 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_84, 0, x_20);
lean::cnstr_set(x_84, 1, x_41);
lean::cnstr_set(x_84, 2, x_55);
lean::cnstr_set(x_84, 3, x_56);
lean::cnstr_set(x_84, 4, x_83);
return x_84;
}
default:
{
obj* x_86; obj* x_87; 
lean::dec(x_71);
x_86 = lean::box(0);
x_87 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_87, 0, x_20);
lean::cnstr_set(x_87, 1, x_41);
lean::cnstr_set(x_87, 2, x_55);
lean::cnstr_set(x_87, 3, x_56);
lean::cnstr_set(x_87, 4, x_86);
return x_87;
}
}
}
}
lbl_61:
{
obj* x_88; 
switch (lean::obj_tag(x_60)) {
case 0:
{
obj* x_90; obj* x_93; 
x_90 = lean::cnstr_get(x_60, 0);
lean::inc(x_90);
lean::dec(x_60);
x_93 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_93, 0, x_90);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_93;
goto lbl_89;
}
else
{
obj* x_94; obj* x_96; 
x_94 = lean::cnstr_get(x_59, 0);
lean::inc(x_94);
x_96 = lean::cnstr_get(x_59, 1);
lean::inc(x_96);
lean::dec(x_59);
x_55 = x_93;
x_56 = x_94;
x_57 = x_96;
goto lbl_58;
}
}
case 1:
{
obj* x_100; 
lean::dec(x_60);
x_100 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_100;
goto lbl_89;
}
else
{
obj* x_101; obj* x_103; 
x_101 = lean::cnstr_get(x_59, 0);
lean::inc(x_101);
x_103 = lean::cnstr_get(x_59, 1);
lean::inc(x_103);
lean::dec(x_59);
x_55 = x_100;
x_56 = x_101;
x_57 = x_103;
goto lbl_58;
}
}
case 2:
{
obj* x_107; 
lean::dec(x_60);
x_107 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_107;
goto lbl_89;
}
else
{
obj* x_108; obj* x_110; 
x_108 = lean::cnstr_get(x_59, 0);
lean::inc(x_108);
x_110 = lean::cnstr_get(x_59, 1);
lean::inc(x_110);
lean::dec(x_59);
x_55 = x_107;
x_56 = x_108;
x_57 = x_110;
goto lbl_58;
}
}
default:
{
obj* x_114; 
lean::dec(x_60);
x_114 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_114;
goto lbl_89;
}
else
{
obj* x_115; obj* x_117; 
x_115 = lean::cnstr_get(x_59, 0);
lean::inc(x_115);
x_117 = lean::cnstr_get(x_59, 1);
lean::inc(x_117);
lean::dec(x_59);
x_55 = x_114;
x_56 = x_115;
x_57 = x_117;
goto lbl_58;
}
}
}
lbl_89:
{
if (lean::obj_tag(x_59) == 0)
{
obj* x_121; obj* x_122; obj* x_123; 
lean::dec(x_59);
x_121 = lean::box(0);
x_122 = lean::box(3);
x_123 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_123, 0, x_20);
lean::cnstr_set(x_123, 1, x_41);
lean::cnstr_set(x_123, 2, x_88);
lean::cnstr_set(x_123, 3, x_122);
lean::cnstr_set(x_123, 4, x_121);
return x_123;
}
else
{
obj* x_124; 
x_124 = lean::cnstr_get(x_59, 0);
lean::inc(x_124);
lean::dec(x_59);
switch (lean::obj_tag(x_124)) {
case 0:
{
obj* x_127; obj* x_130; obj* x_131; obj* x_132; 
x_127 = lean::cnstr_get(x_124, 0);
lean::inc(x_127);
lean::dec(x_124);
x_130 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_130, 0, x_127);
x_131 = lean::box(3);
x_132 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_132, 0, x_20);
lean::cnstr_set(x_132, 1, x_41);
lean::cnstr_set(x_132, 2, x_88);
lean::cnstr_set(x_132, 3, x_131);
lean::cnstr_set(x_132, 4, x_130);
return x_132;
}
case 1:
{
obj* x_134; obj* x_135; obj* x_136; 
lean::dec(x_124);
x_134 = lean::box(0);
x_135 = lean::box(3);
x_136 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_136, 0, x_20);
lean::cnstr_set(x_136, 1, x_41);
lean::cnstr_set(x_136, 2, x_88);
lean::cnstr_set(x_136, 3, x_135);
lean::cnstr_set(x_136, 4, x_134);
return x_136;
}
case 2:
{
obj* x_138; obj* x_139; obj* x_140; 
lean::dec(x_124);
x_138 = lean::box(0);
x_139 = lean::box(3);
x_140 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_140, 0, x_20);
lean::cnstr_set(x_140, 1, x_41);
lean::cnstr_set(x_140, 2, x_88);
lean::cnstr_set(x_140, 3, x_139);
lean::cnstr_set(x_140, 4, x_138);
return x_140;
}
default:
{
obj* x_142; obj* x_143; obj* x_144; 
lean::dec(x_124);
x_142 = lean::box(0);
x_143 = lean::box(3);
x_144 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_144, 0, x_20);
lean::cnstr_set(x_144, 1, x_41);
lean::cnstr_set(x_144, 2, x_88);
lean::cnstr_set(x_144, 3, x_143);
lean::cnstr_set(x_144, 4, x_142);
return x_144;
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_19:
{
obj* x_26; 
switch (lean::obj_tag(x_18)) {
case 0:
{
obj* x_29; 
lean::dec(x_18);
x_29 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_29);
x_26 = x_29;
goto lbl_27;
}
case 1:
{
obj* x_31; 
x_31 = lean::cnstr_get(x_18, 0);
lean::inc(x_31);
lean::dec(x_18);
x_26 = x_31;
goto lbl_27;
}
case 2:
{
obj* x_35; 
lean::dec(x_18);
x_35 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_35);
x_26 = x_35;
goto lbl_27;
}
default:
{
obj* x_38; 
lean::dec(x_18);
x_38 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_38);
x_26 = x_38;
goto lbl_27;
}
}
lbl_27:
{
obj* x_40; obj* x_41; obj* x_42; obj* x_44; obj* x_45; 
if (lean::obj_tag(x_17) == 0)
{
obj* x_47; 
x_47 = lean::box(3);
x_44 = x_17;
x_45 = x_47;
goto lbl_46;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_17, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_17, 1);
lean::inc(x_50);
lean::dec(x_17);
x_44 = x_50;
x_45 = x_48;
goto lbl_46;
}
lbl_43:
{
if (lean::obj_tag(x_42) == 0)
{
obj* x_54; obj* x_55; 
lean::dec(x_42);
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_55, 0, x_5);
lean::cnstr_set(x_55, 1, x_26);
lean::cnstr_set(x_55, 2, x_40);
lean::cnstr_set(x_55, 3, x_41);
lean::cnstr_set(x_55, 4, x_54);
return x_55;
}
else
{
obj* x_56; 
x_56 = lean::cnstr_get(x_42, 0);
lean::inc(x_56);
lean::dec(x_42);
switch (lean::obj_tag(x_56)) {
case 0:
{
obj* x_59; obj* x_62; obj* x_63; 
x_59 = lean::cnstr_get(x_56, 0);
lean::inc(x_59);
lean::dec(x_56);
x_62 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_62, 0, x_59);
x_63 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_63, 0, x_5);
lean::cnstr_set(x_63, 1, x_26);
lean::cnstr_set(x_63, 2, x_40);
lean::cnstr_set(x_63, 3, x_41);
lean::cnstr_set(x_63, 4, x_62);
return x_63;
}
case 1:
{
obj* x_65; obj* x_66; 
lean::dec(x_56);
x_65 = lean::box(0);
x_66 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_66, 0, x_5);
lean::cnstr_set(x_66, 1, x_26);
lean::cnstr_set(x_66, 2, x_40);
lean::cnstr_set(x_66, 3, x_41);
lean::cnstr_set(x_66, 4, x_65);
return x_66;
}
case 2:
{
obj* x_68; obj* x_69; 
lean::dec(x_56);
x_68 = lean::box(0);
x_69 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_69, 0, x_5);
lean::cnstr_set(x_69, 1, x_26);
lean::cnstr_set(x_69, 2, x_40);
lean::cnstr_set(x_69, 3, x_41);
lean::cnstr_set(x_69, 4, x_68);
return x_69;
}
default:
{
obj* x_71; obj* x_72; 
lean::dec(x_56);
x_71 = lean::box(0);
x_72 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_72, 0, x_5);
lean::cnstr_set(x_72, 1, x_26);
lean::cnstr_set(x_72, 2, x_40);
lean::cnstr_set(x_72, 3, x_41);
lean::cnstr_set(x_72, 4, x_71);
return x_72;
}
}
}
}
lbl_46:
{
obj* x_73; 
switch (lean::obj_tag(x_45)) {
case 0:
{
obj* x_75; obj* x_78; 
x_75 = lean::cnstr_get(x_45, 0);
lean::inc(x_75);
lean::dec(x_45);
x_78 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_78, 0, x_75);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_78;
goto lbl_74;
}
else
{
obj* x_79; obj* x_81; 
x_79 = lean::cnstr_get(x_44, 0);
lean::inc(x_79);
x_81 = lean::cnstr_get(x_44, 1);
lean::inc(x_81);
lean::dec(x_44);
x_40 = x_78;
x_41 = x_79;
x_42 = x_81;
goto lbl_43;
}
}
case 1:
{
obj* x_85; 
lean::dec(x_45);
x_85 = lean::box(0);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_85;
goto lbl_74;
}
else
{
obj* x_86; obj* x_88; 
x_86 = lean::cnstr_get(x_44, 0);
lean::inc(x_86);
x_88 = lean::cnstr_get(x_44, 1);
lean::inc(x_88);
lean::dec(x_44);
x_40 = x_85;
x_41 = x_86;
x_42 = x_88;
goto lbl_43;
}
}
case 2:
{
obj* x_92; 
lean::dec(x_45);
x_92 = lean::box(0);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_92;
goto lbl_74;
}
else
{
obj* x_93; obj* x_95; 
x_93 = lean::cnstr_get(x_44, 0);
lean::inc(x_93);
x_95 = lean::cnstr_get(x_44, 1);
lean::inc(x_95);
lean::dec(x_44);
x_40 = x_92;
x_41 = x_93;
x_42 = x_95;
goto lbl_43;
}
}
default:
{
obj* x_99; 
lean::dec(x_45);
x_99 = lean::box(0);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_99;
goto lbl_74;
}
else
{
obj* x_100; obj* x_102; 
x_100 = lean::cnstr_get(x_44, 0);
lean::inc(x_100);
x_102 = lean::cnstr_get(x_44, 1);
lean::inc(x_102);
lean::dec(x_44);
x_40 = x_99;
x_41 = x_100;
x_42 = x_102;
goto lbl_43;
}
}
}
lbl_74:
{
if (lean::obj_tag(x_44) == 0)
{
obj* x_106; obj* x_107; obj* x_108; 
lean::dec(x_44);
x_106 = lean::box(0);
x_107 = lean::box(3);
x_108 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_108, 0, x_5);
lean::cnstr_set(x_108, 1, x_26);
lean::cnstr_set(x_108, 2, x_73);
lean::cnstr_set(x_108, 3, x_107);
lean::cnstr_set(x_108, 4, x_106);
return x_108;
}
else
{
obj* x_109; 
x_109 = lean::cnstr_get(x_44, 0);
lean::inc(x_109);
lean::dec(x_44);
switch (lean::obj_tag(x_109)) {
case 0:
{
obj* x_112; obj* x_115; obj* x_116; obj* x_117; 
x_112 = lean::cnstr_get(x_109, 0);
lean::inc(x_112);
lean::dec(x_109);
x_115 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_115, 0, x_112);
x_116 = lean::box(3);
x_117 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_117, 0, x_5);
lean::cnstr_set(x_117, 1, x_26);
lean::cnstr_set(x_117, 2, x_73);
lean::cnstr_set(x_117, 3, x_116);
lean::cnstr_set(x_117, 4, x_115);
return x_117;
}
case 1:
{
obj* x_119; obj* x_120; obj* x_121; 
lean::dec(x_109);
x_119 = lean::box(0);
x_120 = lean::box(3);
x_121 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_121, 0, x_5);
lean::cnstr_set(x_121, 1, x_26);
lean::cnstr_set(x_121, 2, x_73);
lean::cnstr_set(x_121, 3, x_120);
lean::cnstr_set(x_121, 4, x_119);
return x_121;
}
case 2:
{
obj* x_123; obj* x_124; obj* x_125; 
lean::dec(x_109);
x_123 = lean::box(0);
x_124 = lean::box(3);
x_125 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_125, 0, x_5);
lean::cnstr_set(x_125, 1, x_26);
lean::cnstr_set(x_125, 2, x_73);
lean::cnstr_set(x_125, 3, x_124);
lean::cnstr_set(x_125, 4, x_123);
return x_125;
}
default:
{
obj* x_127; obj* x_128; obj* x_129; 
lean::dec(x_109);
x_127 = lean::box(0);
x_128 = lean::box(3);
x_129 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_129, 0, x_5);
lean::cnstr_set(x_129, 1, x_26);
lean::cnstr_set(x_129, 2, x_73);
lean::cnstr_set(x_129, 3, x_128);
lean::cnstr_set(x_129, 4, x_127);
return x_129;
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_14; obj* x_15; obj* x_17; obj* x_18; obj* x_20; obj* x_22; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_34; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_12);
x_14 = l_option_map___rarg(x_12, x_1);
x_15 = lean::box(3);
lean::inc(x_15);
x_17 = l_option_get__or__else___main___rarg(x_14, x_15);
x_18 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_18, 0, x_3);
lean::inc(x_12);
x_20 = l_option_map___rarg(x_12, x_5);
lean::inc(x_15);
x_22 = l_option_get__or__else___main___rarg(x_20, x_15);
lean::inc(x_12);
x_24 = l_option_map___rarg(x_12, x_9);
x_25 = l_option_get__or__else___main___rarg(x_24, x_15);
x_26 = lean::box(0);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_25);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_7);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_22);
lean::cnstr_set(x_29, 1, x_28);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_18);
lean::cnstr_set(x_30, 1, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_17);
lean::cnstr_set(x_31, 1, x_30);
x_32 = l_lean_parser_term_simple__strict__implicit__binder;
lean::inc(x_32);
x_34 = l_lean_parser_syntax_mk__node(x_32, x_31);
return x_34;
}
}
obj* _init_l_lean_parser_term_simple__strict__implicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_simple__inst__implicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("simple_inst_implicit_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
x_35 = lean::box(3);
x_32 = x_1;
x_33 = x_35;
goto lbl_34;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_1, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
lean::dec(x_1);
x_32 = x_38;
x_33 = x_36;
goto lbl_34;
}
lbl_34:
{
obj* x_41; 
switch (lean::obj_tag(x_33)) {
case 0:
{
obj* x_44; 
lean::dec(x_33);
x_44 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_44);
x_41 = x_44;
goto lbl_42;
}
case 1:
{
obj* x_46; 
x_46 = lean::cnstr_get(x_33, 0);
lean::inc(x_46);
lean::dec(x_33);
x_41 = x_46;
goto lbl_42;
}
case 2:
{
obj* x_50; 
lean::dec(x_33);
x_50 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_50);
x_41 = x_50;
goto lbl_42;
}
default:
{
obj* x_53; 
lean::dec(x_33);
x_53 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_53);
x_41 = x_53;
goto lbl_42;
}
}
lbl_42:
{
obj* x_55; obj* x_56; obj* x_57; obj* x_59; obj* x_60; 
if (lean::obj_tag(x_32) == 0)
{
obj* x_62; 
x_62 = lean::box(3);
x_59 = x_32;
x_60 = x_62;
goto lbl_61;
}
else
{
obj* x_63; obj* x_65; 
x_63 = lean::cnstr_get(x_32, 0);
lean::inc(x_63);
x_65 = lean::cnstr_get(x_32, 1);
lean::inc(x_65);
lean::dec(x_32);
x_59 = x_65;
x_60 = x_63;
goto lbl_61;
}
lbl_58:
{
if (lean::obj_tag(x_57) == 0)
{
obj* x_69; obj* x_70; 
lean::dec(x_57);
x_69 = lean::box(0);
x_70 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_70, 0, x_20);
lean::cnstr_set(x_70, 1, x_41);
lean::cnstr_set(x_70, 2, x_55);
lean::cnstr_set(x_70, 3, x_56);
lean::cnstr_set(x_70, 4, x_69);
return x_70;
}
else
{
obj* x_71; 
x_71 = lean::cnstr_get(x_57, 0);
lean::inc(x_71);
lean::dec(x_57);
switch (lean::obj_tag(x_71)) {
case 0:
{
obj* x_74; obj* x_77; obj* x_78; 
x_74 = lean::cnstr_get(x_71, 0);
lean::inc(x_74);
lean::dec(x_71);
x_77 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_77, 0, x_74);
x_78 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_78, 0, x_20);
lean::cnstr_set(x_78, 1, x_41);
lean::cnstr_set(x_78, 2, x_55);
lean::cnstr_set(x_78, 3, x_56);
lean::cnstr_set(x_78, 4, x_77);
return x_78;
}
case 1:
{
obj* x_80; obj* x_81; 
lean::dec(x_71);
x_80 = lean::box(0);
x_81 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_81, 0, x_20);
lean::cnstr_set(x_81, 1, x_41);
lean::cnstr_set(x_81, 2, x_55);
lean::cnstr_set(x_81, 3, x_56);
lean::cnstr_set(x_81, 4, x_80);
return x_81;
}
case 2:
{
obj* x_83; obj* x_84; 
lean::dec(x_71);
x_83 = lean::box(0);
x_84 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_84, 0, x_20);
lean::cnstr_set(x_84, 1, x_41);
lean::cnstr_set(x_84, 2, x_55);
lean::cnstr_set(x_84, 3, x_56);
lean::cnstr_set(x_84, 4, x_83);
return x_84;
}
default:
{
obj* x_86; obj* x_87; 
lean::dec(x_71);
x_86 = lean::box(0);
x_87 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_87, 0, x_20);
lean::cnstr_set(x_87, 1, x_41);
lean::cnstr_set(x_87, 2, x_55);
lean::cnstr_set(x_87, 3, x_56);
lean::cnstr_set(x_87, 4, x_86);
return x_87;
}
}
}
}
lbl_61:
{
obj* x_88; 
switch (lean::obj_tag(x_60)) {
case 0:
{
obj* x_90; obj* x_93; 
x_90 = lean::cnstr_get(x_60, 0);
lean::inc(x_90);
lean::dec(x_60);
x_93 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_93, 0, x_90);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_93;
goto lbl_89;
}
else
{
obj* x_94; obj* x_96; 
x_94 = lean::cnstr_get(x_59, 0);
lean::inc(x_94);
x_96 = lean::cnstr_get(x_59, 1);
lean::inc(x_96);
lean::dec(x_59);
x_55 = x_93;
x_56 = x_94;
x_57 = x_96;
goto lbl_58;
}
}
case 1:
{
obj* x_100; 
lean::dec(x_60);
x_100 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_100;
goto lbl_89;
}
else
{
obj* x_101; obj* x_103; 
x_101 = lean::cnstr_get(x_59, 0);
lean::inc(x_101);
x_103 = lean::cnstr_get(x_59, 1);
lean::inc(x_103);
lean::dec(x_59);
x_55 = x_100;
x_56 = x_101;
x_57 = x_103;
goto lbl_58;
}
}
case 2:
{
obj* x_107; 
lean::dec(x_60);
x_107 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_107;
goto lbl_89;
}
else
{
obj* x_108; obj* x_110; 
x_108 = lean::cnstr_get(x_59, 0);
lean::inc(x_108);
x_110 = lean::cnstr_get(x_59, 1);
lean::inc(x_110);
lean::dec(x_59);
x_55 = x_107;
x_56 = x_108;
x_57 = x_110;
goto lbl_58;
}
}
default:
{
obj* x_114; 
lean::dec(x_60);
x_114 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
x_88 = x_114;
goto lbl_89;
}
else
{
obj* x_115; obj* x_117; 
x_115 = lean::cnstr_get(x_59, 0);
lean::inc(x_115);
x_117 = lean::cnstr_get(x_59, 1);
lean::inc(x_117);
lean::dec(x_59);
x_55 = x_114;
x_56 = x_115;
x_57 = x_117;
goto lbl_58;
}
}
}
lbl_89:
{
if (lean::obj_tag(x_59) == 0)
{
obj* x_121; obj* x_122; obj* x_123; 
lean::dec(x_59);
x_121 = lean::box(0);
x_122 = lean::box(3);
x_123 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_123, 0, x_20);
lean::cnstr_set(x_123, 1, x_41);
lean::cnstr_set(x_123, 2, x_88);
lean::cnstr_set(x_123, 3, x_122);
lean::cnstr_set(x_123, 4, x_121);
return x_123;
}
else
{
obj* x_124; 
x_124 = lean::cnstr_get(x_59, 0);
lean::inc(x_124);
lean::dec(x_59);
switch (lean::obj_tag(x_124)) {
case 0:
{
obj* x_127; obj* x_130; obj* x_131; obj* x_132; 
x_127 = lean::cnstr_get(x_124, 0);
lean::inc(x_127);
lean::dec(x_124);
x_130 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_130, 0, x_127);
x_131 = lean::box(3);
x_132 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_132, 0, x_20);
lean::cnstr_set(x_132, 1, x_41);
lean::cnstr_set(x_132, 2, x_88);
lean::cnstr_set(x_132, 3, x_131);
lean::cnstr_set(x_132, 4, x_130);
return x_132;
}
case 1:
{
obj* x_134; obj* x_135; obj* x_136; 
lean::dec(x_124);
x_134 = lean::box(0);
x_135 = lean::box(3);
x_136 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_136, 0, x_20);
lean::cnstr_set(x_136, 1, x_41);
lean::cnstr_set(x_136, 2, x_88);
lean::cnstr_set(x_136, 3, x_135);
lean::cnstr_set(x_136, 4, x_134);
return x_136;
}
case 2:
{
obj* x_138; obj* x_139; obj* x_140; 
lean::dec(x_124);
x_138 = lean::box(0);
x_139 = lean::box(3);
x_140 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_140, 0, x_20);
lean::cnstr_set(x_140, 1, x_41);
lean::cnstr_set(x_140, 2, x_88);
lean::cnstr_set(x_140, 3, x_139);
lean::cnstr_set(x_140, 4, x_138);
return x_140;
}
default:
{
obj* x_142; obj* x_143; obj* x_144; 
lean::dec(x_124);
x_142 = lean::box(0);
x_143 = lean::box(3);
x_144 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_144, 0, x_20);
lean::cnstr_set(x_144, 1, x_41);
lean::cnstr_set(x_144, 2, x_88);
lean::cnstr_set(x_144, 3, x_143);
lean::cnstr_set(x_144, 4, x_142);
return x_144;
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_19:
{
obj* x_26; 
switch (lean::obj_tag(x_18)) {
case 0:
{
obj* x_29; 
lean::dec(x_18);
x_29 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_29);
x_26 = x_29;
goto lbl_27;
}
case 1:
{
obj* x_31; 
x_31 = lean::cnstr_get(x_18, 0);
lean::inc(x_31);
lean::dec(x_18);
x_26 = x_31;
goto lbl_27;
}
case 2:
{
obj* x_35; 
lean::dec(x_18);
x_35 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_35);
x_26 = x_35;
goto lbl_27;
}
default:
{
obj* x_38; 
lean::dec(x_18);
x_38 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_38);
x_26 = x_38;
goto lbl_27;
}
}
lbl_27:
{
obj* x_40; obj* x_41; obj* x_42; obj* x_44; obj* x_45; 
if (lean::obj_tag(x_17) == 0)
{
obj* x_47; 
x_47 = lean::box(3);
x_44 = x_17;
x_45 = x_47;
goto lbl_46;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_17, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_17, 1);
lean::inc(x_50);
lean::dec(x_17);
x_44 = x_50;
x_45 = x_48;
goto lbl_46;
}
lbl_43:
{
if (lean::obj_tag(x_42) == 0)
{
obj* x_54; obj* x_55; 
lean::dec(x_42);
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_55, 0, x_5);
lean::cnstr_set(x_55, 1, x_26);
lean::cnstr_set(x_55, 2, x_40);
lean::cnstr_set(x_55, 3, x_41);
lean::cnstr_set(x_55, 4, x_54);
return x_55;
}
else
{
obj* x_56; 
x_56 = lean::cnstr_get(x_42, 0);
lean::inc(x_56);
lean::dec(x_42);
switch (lean::obj_tag(x_56)) {
case 0:
{
obj* x_59; obj* x_62; obj* x_63; 
x_59 = lean::cnstr_get(x_56, 0);
lean::inc(x_59);
lean::dec(x_56);
x_62 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_62, 0, x_59);
x_63 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_63, 0, x_5);
lean::cnstr_set(x_63, 1, x_26);
lean::cnstr_set(x_63, 2, x_40);
lean::cnstr_set(x_63, 3, x_41);
lean::cnstr_set(x_63, 4, x_62);
return x_63;
}
case 1:
{
obj* x_65; obj* x_66; 
lean::dec(x_56);
x_65 = lean::box(0);
x_66 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_66, 0, x_5);
lean::cnstr_set(x_66, 1, x_26);
lean::cnstr_set(x_66, 2, x_40);
lean::cnstr_set(x_66, 3, x_41);
lean::cnstr_set(x_66, 4, x_65);
return x_66;
}
case 2:
{
obj* x_68; obj* x_69; 
lean::dec(x_56);
x_68 = lean::box(0);
x_69 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_69, 0, x_5);
lean::cnstr_set(x_69, 1, x_26);
lean::cnstr_set(x_69, 2, x_40);
lean::cnstr_set(x_69, 3, x_41);
lean::cnstr_set(x_69, 4, x_68);
return x_69;
}
default:
{
obj* x_71; obj* x_72; 
lean::dec(x_56);
x_71 = lean::box(0);
x_72 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_72, 0, x_5);
lean::cnstr_set(x_72, 1, x_26);
lean::cnstr_set(x_72, 2, x_40);
lean::cnstr_set(x_72, 3, x_41);
lean::cnstr_set(x_72, 4, x_71);
return x_72;
}
}
}
}
lbl_46:
{
obj* x_73; 
switch (lean::obj_tag(x_45)) {
case 0:
{
obj* x_75; obj* x_78; 
x_75 = lean::cnstr_get(x_45, 0);
lean::inc(x_75);
lean::dec(x_45);
x_78 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_78, 0, x_75);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_78;
goto lbl_74;
}
else
{
obj* x_79; obj* x_81; 
x_79 = lean::cnstr_get(x_44, 0);
lean::inc(x_79);
x_81 = lean::cnstr_get(x_44, 1);
lean::inc(x_81);
lean::dec(x_44);
x_40 = x_78;
x_41 = x_79;
x_42 = x_81;
goto lbl_43;
}
}
case 1:
{
obj* x_85; 
lean::dec(x_45);
x_85 = lean::box(0);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_85;
goto lbl_74;
}
else
{
obj* x_86; obj* x_88; 
x_86 = lean::cnstr_get(x_44, 0);
lean::inc(x_86);
x_88 = lean::cnstr_get(x_44, 1);
lean::inc(x_88);
lean::dec(x_44);
x_40 = x_85;
x_41 = x_86;
x_42 = x_88;
goto lbl_43;
}
}
case 2:
{
obj* x_92; 
lean::dec(x_45);
x_92 = lean::box(0);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_92;
goto lbl_74;
}
else
{
obj* x_93; obj* x_95; 
x_93 = lean::cnstr_get(x_44, 0);
lean::inc(x_93);
x_95 = lean::cnstr_get(x_44, 1);
lean::inc(x_95);
lean::dec(x_44);
x_40 = x_92;
x_41 = x_93;
x_42 = x_95;
goto lbl_43;
}
}
default:
{
obj* x_99; 
lean::dec(x_45);
x_99 = lean::box(0);
if (lean::obj_tag(x_44) == 0)
{
x_73 = x_99;
goto lbl_74;
}
else
{
obj* x_100; obj* x_102; 
x_100 = lean::cnstr_get(x_44, 0);
lean::inc(x_100);
x_102 = lean::cnstr_get(x_44, 1);
lean::inc(x_102);
lean::dec(x_44);
x_40 = x_99;
x_41 = x_100;
x_42 = x_102;
goto lbl_43;
}
}
}
lbl_74:
{
if (lean::obj_tag(x_44) == 0)
{
obj* x_106; obj* x_107; obj* x_108; 
lean::dec(x_44);
x_106 = lean::box(0);
x_107 = lean::box(3);
x_108 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_108, 0, x_5);
lean::cnstr_set(x_108, 1, x_26);
lean::cnstr_set(x_108, 2, x_73);
lean::cnstr_set(x_108, 3, x_107);
lean::cnstr_set(x_108, 4, x_106);
return x_108;
}
else
{
obj* x_109; 
x_109 = lean::cnstr_get(x_44, 0);
lean::inc(x_109);
lean::dec(x_44);
switch (lean::obj_tag(x_109)) {
case 0:
{
obj* x_112; obj* x_115; obj* x_116; obj* x_117; 
x_112 = lean::cnstr_get(x_109, 0);
lean::inc(x_112);
lean::dec(x_109);
x_115 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_115, 0, x_112);
x_116 = lean::box(3);
x_117 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_117, 0, x_5);
lean::cnstr_set(x_117, 1, x_26);
lean::cnstr_set(x_117, 2, x_73);
lean::cnstr_set(x_117, 3, x_116);
lean::cnstr_set(x_117, 4, x_115);
return x_117;
}
case 1:
{
obj* x_119; obj* x_120; obj* x_121; 
lean::dec(x_109);
x_119 = lean::box(0);
x_120 = lean::box(3);
x_121 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_121, 0, x_5);
lean::cnstr_set(x_121, 1, x_26);
lean::cnstr_set(x_121, 2, x_73);
lean::cnstr_set(x_121, 3, x_120);
lean::cnstr_set(x_121, 4, x_119);
return x_121;
}
case 2:
{
obj* x_123; obj* x_124; obj* x_125; 
lean::dec(x_109);
x_123 = lean::box(0);
x_124 = lean::box(3);
x_125 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_125, 0, x_5);
lean::cnstr_set(x_125, 1, x_26);
lean::cnstr_set(x_125, 2, x_73);
lean::cnstr_set(x_125, 3, x_124);
lean::cnstr_set(x_125, 4, x_123);
return x_125;
}
default:
{
obj* x_127; obj* x_128; obj* x_129; 
lean::dec(x_109);
x_127 = lean::box(0);
x_128 = lean::box(3);
x_129 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_129, 0, x_5);
lean::cnstr_set(x_129, 1, x_26);
lean::cnstr_set(x_129, 2, x_73);
lean::cnstr_set(x_129, 3, x_128);
lean::cnstr_set(x_129, 4, x_127);
return x_129;
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_14; obj* x_15; obj* x_17; obj* x_18; obj* x_20; obj* x_22; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_34; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_12);
x_14 = l_option_map___rarg(x_12, x_1);
x_15 = lean::box(3);
lean::inc(x_15);
x_17 = l_option_get__or__else___main___rarg(x_14, x_15);
x_18 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_18, 0, x_3);
lean::inc(x_12);
x_20 = l_option_map___rarg(x_12, x_5);
lean::inc(x_15);
x_22 = l_option_get__or__else___main___rarg(x_20, x_15);
lean::inc(x_12);
x_24 = l_option_map___rarg(x_12, x_9);
x_25 = l_option_get__or__else___main___rarg(x_24, x_15);
x_26 = lean::box(0);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_25);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_7);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_22);
lean::cnstr_set(x_29, 1, x_28);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_18);
lean::cnstr_set(x_30, 1, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_17);
lean::cnstr_set(x_31, 1, x_30);
x_32 = l_lean_parser_term_simple__inst__implicit__binder;
lean::inc(x_32);
x_34 = l_lean_parser_syntax_mk__node(x_32, x_31);
return x_34;
}
}
obj* _init_l_lean_parser_term_simple__inst__implicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_simple__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("simple_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_simple__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_simple__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__2;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
if (lean::obj_tag(x_86) == 0)
{
obj* x_89; obj* x_90; 
lean::dec(x_86);
x_89 = lean::mk_nat_obj(1u);
x_90 = lean::nat_dec_eq(x_2, x_89);
lean::dec(x_89);
if (lean::obj_tag(x_90) == 0)
{
obj* x_93; obj* x_94; 
lean::dec(x_90);
x_93 = lean::mk_nat_obj(2u);
x_94 = lean::nat_dec_eq(x_2, x_93);
lean::dec(x_93);
lean::dec(x_2);
if (lean::obj_tag(x_94) == 0)
{
obj* x_98; obj* x_99; obj* x_101; obj* x_102; 
lean::dec(x_94);
x_98 = l_lean_parser_term_simple__inst__implicit__binder_has__view;
x_99 = lean::cnstr_get(x_98, 0);
lean::inc(x_99);
x_101 = lean::apply_1(x_99, x_1);
x_102 = lean::alloc_cnstr(3, 1, 0);
lean::cnstr_set(x_102, 0, x_101);
return x_102;
}
else
{
obj* x_104; obj* x_105; obj* x_107; obj* x_108; 
lean::dec(x_94);
x_104 = l_lean_parser_term_simple__strict__implicit__binder_has__view;
x_105 = lean::cnstr_get(x_104, 0);
lean::inc(x_105);
x_107 = lean::apply_1(x_105, x_1);
x_108 = lean::alloc_cnstr(2, 1, 0);
lean::cnstr_set(x_108, 0, x_107);
return x_108;
}
}
else
{
obj* x_111; obj* x_112; obj* x_114; obj* x_115; 
lean::dec(x_90);
lean::dec(x_2);
x_111 = l_lean_parser_term_simple__implicit__binder_has__view;
x_112 = lean::cnstr_get(x_111, 0);
lean::inc(x_112);
x_114 = lean::apply_1(x_112, x_1);
x_115 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_115, 0, x_114);
return x_115;
}
}
else
{
obj* x_118; obj* x_119; obj* x_121; obj* x_122; 
lean::dec(x_86);
lean::dec(x_2);
x_118 = l_lean_parser_term_simple__explicit__binder_has__view;
x_119 = lean::cnstr_get(x_118, 0);
lean::inc(x_119);
x_121 = lean::apply_1(x_119, x_1);
x_122 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_122, 0, x_121);
return x_122;
}
}
}
}
obj* _init_l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
if (lean::obj_tag(x_6) == 0)
{
obj* x_9; obj* x_10; 
lean::dec(x_6);
x_9 = lean::mk_nat_obj(1u);
x_10 = lean::nat_dec_eq(x_1, x_9);
lean::dec(x_9);
if (lean::obj_tag(x_10) == 0)
{
obj* x_13; obj* x_14; 
lean::dec(x_10);
x_13 = lean::mk_nat_obj(2u);
x_14 = lean::nat_dec_eq(x_1, x_13);
lean::dec(x_13);
lean::dec(x_1);
if (lean::obj_tag(x_14) == 0)
{
obj* x_18; obj* x_19; obj* x_21; obj* x_22; 
lean::dec(x_14);
x_18 = l_lean_parser_term_simple__inst__implicit__binder_has__view;
x_19 = lean::cnstr_get(x_18, 0);
lean::inc(x_19);
x_21 = lean::apply_1(x_19, x_0);
x_22 = lean::alloc_cnstr(3, 1, 0);
lean::cnstr_set(x_22, 0, x_21);
return x_22;
}
else
{
obj* x_24; obj* x_25; obj* x_27; obj* x_28; 
lean::dec(x_14);
x_24 = l_lean_parser_term_simple__strict__implicit__binder_has__view;
x_25 = lean::cnstr_get(x_24, 0);
lean::inc(x_25);
x_27 = lean::apply_1(x_25, x_0);
x_28 = lean::alloc_cnstr(2, 1, 0);
lean::cnstr_set(x_28, 0, x_27);
return x_28;
}
}
else
{
obj* x_31; obj* x_32; obj* x_34; obj* x_35; 
lean::dec(x_10);
lean::dec(x_1);
x_31 = l_lean_parser_term_simple__implicit__binder_has__view;
x_32 = lean::cnstr_get(x_31, 0);
lean::inc(x_32);
x_34 = lean::apply_1(x_32, x_0);
x_35 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_35, 0, x_34);
return x_35;
}
}
else
{
obj* x_38; obj* x_39; obj* x_41; obj* x_42; 
lean::dec(x_1);
lean::dec(x_6);
x_38 = l_lean_parser_term_simple__explicit__binder_has__view;
x_39 = lean::cnstr_get(x_38, 0);
lean::inc(x_39);
x_41 = lean::apply_1(x_39, x_0);
x_42 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_42, 0, x_41);
return x_42;
}
}
}
}
obj* _init_l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("simple_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_simple__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_2; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_simple__explicit__binder_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
x_8 = lean::apply_1(x_6, x_2);
lean::inc(x_1);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_lean_parser_term_simple__binder;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
case 1:
{
obj* x_18; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_33; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
x_21 = l_lean_parser_term_simple__implicit__binder_has__view;
x_22 = lean::cnstr_get(x_21, 1);
lean::inc(x_22);
x_24 = lean::apply_1(x_22, x_18);
lean::inc(x_1);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_27);
x_29 = l_lean_parser_syntax_mk__node(x_27, x_26);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_1);
x_31 = l_lean_parser_term_simple__binder;
lean::inc(x_31);
x_33 = l_lean_parser_syntax_mk__node(x_31, x_30);
return x_33;
}
case 2:
{
obj* x_34; obj* x_37; obj* x_38; obj* x_40; obj* x_42; obj* x_43; obj* x_45; obj* x_46; obj* x_47; obj* x_49; 
x_34 = lean::cnstr_get(x_0, 0);
lean::inc(x_34);
lean::dec(x_0);
x_37 = l_lean_parser_term_simple__strict__implicit__binder_has__view;
x_38 = lean::cnstr_get(x_37, 1);
lean::inc(x_38);
x_40 = lean::apply_1(x_38, x_34);
lean::inc(x_1);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_40);
lean::cnstr_set(x_42, 1, x_1);
x_43 = l_lean_parser_number_has__view_x_27___lambda__2___closed__1;
lean::inc(x_43);
x_45 = l_lean_parser_syntax_mk__node(x_43, x_42);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_1);
x_47 = l_lean_parser_term_simple__binder;
lean::inc(x_47);
x_49 = l_lean_parser_syntax_mk__node(x_47, x_46);
return x_49;
}
default:
{
obj* x_50; obj* x_53; obj* x_54; obj* x_56; obj* x_58; obj* x_59; obj* x_61; obj* x_62; obj* x_63; obj* x_65; 
x_50 = lean::cnstr_get(x_0, 0);
lean::inc(x_50);
lean::dec(x_0);
x_53 = l_lean_parser_term_simple__inst__implicit__binder_has__view;
x_54 = lean::cnstr_get(x_53, 1);
lean::inc(x_54);
x_56 = lean::apply_1(x_54, x_50);
lean::inc(x_1);
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_56);
lean::cnstr_set(x_58, 1, x_1);
x_59 = l_lean_parser_number_has__view_x_27___lambda__2___closed__2;
lean::inc(x_59);
x_61 = l_lean_parser_syntax_mk__node(x_59, x_58);
x_62 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_62, 0, x_61);
lean::cnstr_set(x_62, 1, x_1);
x_63 = l_lean_parser_term_simple__binder;
lean::inc(x_63);
x_65 = l_lean_parser_syntax_mk__node(x_63, x_62);
return x_65;
}
}
}
}
obj* _init_l_lean_parser_term_simple__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_simple__binder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_simple__binder_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_simple__binder;
x_6 = l_lean_parser_term_simple__binder_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_simple__binder_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_23; obj* x_25; obj* x_27; obj* x_28; obj* x_30; obj* x_31; obj* x_32; obj* x_34; obj* x_35; obj* x_36; obj* x_38; obj* x_40; obj* x_41; obj* x_42; obj* x_44; obj* x_46; obj* x_48; obj* x_50; obj* x_52; obj* x_54; obj* x_55; obj* x_56; obj* x_58; obj* x_59; obj* x_60; obj* x_62; obj* x_64; obj* x_65; obj* x_66; obj* x_68; obj* x_70; obj* x_72; obj* x_74; obj* x_76; obj* x_78; obj* x_79; obj* x_80; obj* x_82; obj* x_83; obj* x_84; obj* x_86; obj* x_88; obj* x_89; obj* x_90; obj* x_92; obj* x_94; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_103; obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; 
x_0 = lean::mk_string("(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_string(" : ");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
lean::inc(x_4);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_12, 0, x_8);
lean::closure_set(x_12, 1, x_4);
lean::closure_set(x_12, 2, x_10);
lean::inc(x_4);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_14, 0, x_4);
x_15 = lean::mk_string(")");
x_16 = l_string_trim(x_15);
lean::inc(x_16);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_18, 0, x_16);
lean::inc(x_4);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_20, 0, x_16);
lean::closure_set(x_20, 1, x_4);
lean::closure_set(x_20, 2, x_18);
x_21 = lean::box(0);
lean::inc(x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_20);
lean::cnstr_set(x_23, 1, x_21);
lean::inc(x_14);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_14);
lean::cnstr_set(x_25, 1, x_23);
lean::inc(x_12);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_12);
lean::cnstr_set(x_27, 1, x_25);
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
lean::inc(x_28);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_28);
lean::cnstr_set(x_30, 1, x_27);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_6);
lean::cnstr_set(x_31, 1, x_30);
x_32 = l_lean_parser_term_simple__explicit__binder;
lean::inc(x_32);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_34, 0, x_32);
lean::closure_set(x_34, 1, x_31);
x_35 = lean::mk_string("{");
x_36 = l_string_trim(x_35);
lean::inc(x_36);
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_38, 0, x_36);
lean::inc(x_4);
x_40 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_40, 0, x_36);
lean::closure_set(x_40, 1, x_4);
lean::closure_set(x_40, 2, x_38);
x_41 = lean::mk_string("}");
x_42 = l_string_trim(x_41);
lean::inc(x_42);
x_44 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_44, 0, x_42);
lean::inc(x_4);
x_46 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_46, 0, x_42);
lean::closure_set(x_46, 1, x_4);
lean::closure_set(x_46, 2, x_44);
lean::inc(x_21);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_46);
lean::cnstr_set(x_48, 1, x_21);
lean::inc(x_14);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_14);
lean::cnstr_set(x_50, 1, x_48);
lean::inc(x_12);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_12);
lean::cnstr_set(x_52, 1, x_50);
lean::inc(x_28);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_28);
lean::cnstr_set(x_54, 1, x_52);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_40);
lean::cnstr_set(x_55, 1, x_54);
x_56 = l_lean_parser_term_simple__implicit__binder;
lean::inc(x_56);
x_58 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_58, 0, x_56);
lean::closure_set(x_58, 1, x_55);
x_59 = lean::mk_string("\xe2\xa6\x83");
x_60 = l_string_trim(x_59);
lean::inc(x_60);
x_62 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_62, 0, x_60);
lean::inc(x_4);
x_64 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_64, 0, x_60);
lean::closure_set(x_64, 1, x_4);
lean::closure_set(x_64, 2, x_62);
x_65 = lean::mk_string("\xe2\xa6\x84");
x_66 = l_string_trim(x_65);
lean::inc(x_66);
x_68 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_68, 0, x_66);
lean::inc(x_4);
x_70 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_70, 0, x_66);
lean::closure_set(x_70, 1, x_4);
lean::closure_set(x_70, 2, x_68);
lean::inc(x_21);
x_72 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_72, 0, x_70);
lean::cnstr_set(x_72, 1, x_21);
lean::inc(x_14);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_14);
lean::cnstr_set(x_74, 1, x_72);
lean::inc(x_12);
x_76 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_76, 0, x_12);
lean::cnstr_set(x_76, 1, x_74);
lean::inc(x_28);
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_28);
lean::cnstr_set(x_78, 1, x_76);
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_64);
lean::cnstr_set(x_79, 1, x_78);
x_80 = l_lean_parser_term_simple__strict__implicit__binder;
lean::inc(x_80);
x_82 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_82, 0, x_80);
lean::closure_set(x_82, 1, x_79);
x_83 = lean::mk_string("[");
x_84 = l_string_trim(x_83);
lean::inc(x_84);
x_86 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_86, 0, x_84);
lean::inc(x_4);
x_88 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_88, 0, x_84);
lean::closure_set(x_88, 1, x_4);
lean::closure_set(x_88, 2, x_86);
x_89 = lean::mk_string("]");
x_90 = l_string_trim(x_89);
lean::inc(x_90);
x_92 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_92, 0, x_90);
lean::inc(x_4);
x_94 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_94, 0, x_90);
lean::closure_set(x_94, 1, x_4);
lean::closure_set(x_94, 2, x_92);
lean::inc(x_21);
x_96 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_96, 0, x_94);
lean::cnstr_set(x_96, 1, x_21);
x_97 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_97, 0, x_14);
lean::cnstr_set(x_97, 1, x_96);
x_98 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_98, 0, x_12);
lean::cnstr_set(x_98, 1, x_97);
x_99 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_99, 0, x_28);
lean::cnstr_set(x_99, 1, x_98);
x_100 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_100, 0, x_88);
lean::cnstr_set(x_100, 1, x_99);
x_101 = l_lean_parser_term_simple__inst__implicit__binder;
lean::inc(x_101);
x_103 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_103, 0, x_101);
lean::closure_set(x_103, 1, x_100);
lean::inc(x_21);
x_105 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_105, 0, x_103);
lean::cnstr_set(x_105, 1, x_21);
x_106 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_106, 0, x_82);
lean::cnstr_set(x_106, 1, x_105);
x_107 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_107, 0, x_58);
lean::cnstr_set(x_107, 1, x_106);
x_108 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_108, 0, x_34);
lean::cnstr_set(x_108, 1, x_107);
x_109 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_109, 0, x_108);
lean::closure_set(x_109, 1, x_4);
x_110 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_110, 0, x_109);
lean::cnstr_set(x_110, 1, x_21);
return x_110;
}
}
obj* _init_l_lean_parser_term_simple__binder_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_23; obj* x_25; obj* x_27; obj* x_28; obj* x_30; obj* x_31; obj* x_32; obj* x_34; obj* x_35; obj* x_36; obj* x_38; obj* x_40; obj* x_41; obj* x_42; obj* x_44; obj* x_46; obj* x_48; obj* x_50; obj* x_52; obj* x_54; obj* x_55; obj* x_56; obj* x_58; obj* x_59; obj* x_60; obj* x_62; obj* x_64; obj* x_65; obj* x_66; obj* x_68; obj* x_70; obj* x_72; obj* x_74; obj* x_76; obj* x_78; obj* x_79; obj* x_80; obj* x_82; obj* x_83; obj* x_84; obj* x_86; obj* x_88; obj* x_89; obj* x_90; obj* x_92; obj* x_94; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_103; obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; obj* x_115; obj* x_116; obj* x_123; 
x_0 = lean::mk_string("(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_string(" : ");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
lean::inc(x_4);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_12, 0, x_8);
lean::closure_set(x_12, 1, x_4);
lean::closure_set(x_12, 2, x_10);
lean::inc(x_4);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_14, 0, x_4);
x_15 = lean::mk_string(")");
x_16 = l_string_trim(x_15);
lean::inc(x_16);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_18, 0, x_16);
lean::inc(x_4);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_20, 0, x_16);
lean::closure_set(x_20, 1, x_4);
lean::closure_set(x_20, 2, x_18);
x_21 = lean::box(0);
lean::inc(x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_20);
lean::cnstr_set(x_23, 1, x_21);
lean::inc(x_14);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_14);
lean::cnstr_set(x_25, 1, x_23);
lean::inc(x_12);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_12);
lean::cnstr_set(x_27, 1, x_25);
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
lean::inc(x_28);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_28);
lean::cnstr_set(x_30, 1, x_27);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_6);
lean::cnstr_set(x_31, 1, x_30);
x_32 = l_lean_parser_term_simple__explicit__binder;
lean::inc(x_32);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_34, 0, x_32);
lean::closure_set(x_34, 1, x_31);
x_35 = lean::mk_string("{");
x_36 = l_string_trim(x_35);
lean::inc(x_36);
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_38, 0, x_36);
lean::inc(x_4);
x_40 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_40, 0, x_36);
lean::closure_set(x_40, 1, x_4);
lean::closure_set(x_40, 2, x_38);
x_41 = lean::mk_string("}");
x_42 = l_string_trim(x_41);
lean::inc(x_42);
x_44 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_44, 0, x_42);
lean::inc(x_4);
x_46 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_46, 0, x_42);
lean::closure_set(x_46, 1, x_4);
lean::closure_set(x_46, 2, x_44);
lean::inc(x_21);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_46);
lean::cnstr_set(x_48, 1, x_21);
lean::inc(x_14);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_14);
lean::cnstr_set(x_50, 1, x_48);
lean::inc(x_12);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_12);
lean::cnstr_set(x_52, 1, x_50);
lean::inc(x_28);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_28);
lean::cnstr_set(x_54, 1, x_52);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_40);
lean::cnstr_set(x_55, 1, x_54);
x_56 = l_lean_parser_term_simple__implicit__binder;
lean::inc(x_56);
x_58 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_58, 0, x_56);
lean::closure_set(x_58, 1, x_55);
x_59 = lean::mk_string("\xe2\xa6\x83");
x_60 = l_string_trim(x_59);
lean::inc(x_60);
x_62 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_62, 0, x_60);
lean::inc(x_4);
x_64 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_64, 0, x_60);
lean::closure_set(x_64, 1, x_4);
lean::closure_set(x_64, 2, x_62);
x_65 = lean::mk_string("\xe2\xa6\x84");
x_66 = l_string_trim(x_65);
lean::inc(x_66);
x_68 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_68, 0, x_66);
lean::inc(x_4);
x_70 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_70, 0, x_66);
lean::closure_set(x_70, 1, x_4);
lean::closure_set(x_70, 2, x_68);
lean::inc(x_21);
x_72 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_72, 0, x_70);
lean::cnstr_set(x_72, 1, x_21);
lean::inc(x_14);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_14);
lean::cnstr_set(x_74, 1, x_72);
lean::inc(x_12);
x_76 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_76, 0, x_12);
lean::cnstr_set(x_76, 1, x_74);
lean::inc(x_28);
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_28);
lean::cnstr_set(x_78, 1, x_76);
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_64);
lean::cnstr_set(x_79, 1, x_78);
x_80 = l_lean_parser_term_simple__strict__implicit__binder;
lean::inc(x_80);
x_82 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_82, 0, x_80);
lean::closure_set(x_82, 1, x_79);
x_83 = lean::mk_string("[");
x_84 = l_string_trim(x_83);
lean::inc(x_84);
x_86 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_86, 0, x_84);
lean::inc(x_4);
x_88 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_88, 0, x_84);
lean::closure_set(x_88, 1, x_4);
lean::closure_set(x_88, 2, x_86);
x_89 = lean::mk_string("]");
x_90 = l_string_trim(x_89);
lean::inc(x_90);
x_92 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_92, 0, x_90);
lean::inc(x_4);
x_94 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_94, 0, x_90);
lean::closure_set(x_94, 1, x_4);
lean::closure_set(x_94, 2, x_92);
lean::inc(x_21);
x_96 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_96, 0, x_94);
lean::cnstr_set(x_96, 1, x_21);
x_97 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_97, 0, x_14);
lean::cnstr_set(x_97, 1, x_96);
x_98 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_98, 0, x_12);
lean::cnstr_set(x_98, 1, x_97);
x_99 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_99, 0, x_28);
lean::cnstr_set(x_99, 1, x_98);
x_100 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_100, 0, x_88);
lean::cnstr_set(x_100, 1, x_99);
x_101 = l_lean_parser_term_simple__inst__implicit__binder;
lean::inc(x_101);
x_103 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_103, 0, x_101);
lean::closure_set(x_103, 1, x_100);
lean::inc(x_21);
x_105 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_105, 0, x_103);
lean::cnstr_set(x_105, 1, x_21);
x_106 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_106, 0, x_82);
lean::cnstr_set(x_106, 1, x_105);
x_107 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_107, 0, x_58);
lean::cnstr_set(x_107, 1, x_106);
x_108 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_108, 0, x_34);
lean::cnstr_set(x_108, 1, x_107);
x_109 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_109, 0, x_108);
lean::closure_set(x_109, 1, x_4);
x_110 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_110, 0, x_109);
lean::cnstr_set(x_110, 1, x_21);
x_111 = l_lean_parser_term__parser__m_monad;
x_112 = l_lean_parser_term__parser__m_monad__except;
x_113 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_114 = l_lean_parser_term__parser__m_alternative;
x_115 = l_lean_parser_term_simple__binder;
x_116 = l_lean_parser_term_simple__binder_has__view;
lean::inc(x_116);
lean::inc(x_115);
lean::inc(x_114);
lean::inc(x_113);
lean::inc(x_112);
lean::inc(x_111);
x_123 = l_lean_parser_combinators_node_view___rarg(x_111, x_112, x_113, x_114, x_115, x_110, x_116);
return x_123;
}
}
obj* _init_l_lean_parser_term_simple__binder_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_24; obj* x_25; obj* x_27; obj* x_29; obj* x_31; obj* x_33; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_40; obj* x_41; obj* x_43; obj* x_45; obj* x_47; obj* x_49; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_56; obj* x_57; obj* x_58; obj* x_60; obj* x_62; obj* x_63; obj* x_65; obj* x_66; obj* x_67; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; 
x_0 = lean::mk_string("(");
x_1 = lean::mk_nat_obj(0u);
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::box(0);
x_5 = lean::mk_string(" : ");
lean::inc(x_1);
x_7 = l_lean_parser_symbol_tokens___rarg(x_5, x_1);
x_8 = lean::mk_string(")");
lean::inc(x_1);
x_10 = l_lean_parser_symbol_tokens___rarg(x_8, x_1);
lean::inc(x_4);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_10, x_4);
x_13 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_13);
x_15 = l_lean_parser_list_cons_tokens___rarg(x_13, x_12);
lean::inc(x_7);
x_17 = l_lean_parser_list_cons_tokens___rarg(x_7, x_15);
lean::inc(x_4);
x_19 = l_lean_parser_list_cons_tokens___rarg(x_4, x_17);
x_20 = l_lean_parser_list_cons_tokens___rarg(x_3, x_19);
x_21 = l_lean_parser_tokens___rarg(x_20);
x_22 = lean::mk_string("{");
lean::inc(x_1);
x_24 = l_lean_parser_symbol_tokens___rarg(x_22, x_1);
x_25 = lean::mk_string("}");
lean::inc(x_1);
x_27 = l_lean_parser_symbol_tokens___rarg(x_25, x_1);
lean::inc(x_4);
x_29 = l_lean_parser_list_cons_tokens___rarg(x_27, x_4);
lean::inc(x_13);
x_31 = l_lean_parser_list_cons_tokens___rarg(x_13, x_29);
lean::inc(x_7);
x_33 = l_lean_parser_list_cons_tokens___rarg(x_7, x_31);
lean::inc(x_4);
x_35 = l_lean_parser_list_cons_tokens___rarg(x_4, x_33);
x_36 = l_lean_parser_list_cons_tokens___rarg(x_24, x_35);
x_37 = l_lean_parser_tokens___rarg(x_36);
x_38 = lean::mk_string("\xe2\xa6\x83");
lean::inc(x_1);
x_40 = l_lean_parser_symbol_tokens___rarg(x_38, x_1);
x_41 = lean::mk_string("\xe2\xa6\x84");
lean::inc(x_1);
x_43 = l_lean_parser_symbol_tokens___rarg(x_41, x_1);
lean::inc(x_4);
x_45 = l_lean_parser_list_cons_tokens___rarg(x_43, x_4);
lean::inc(x_13);
x_47 = l_lean_parser_list_cons_tokens___rarg(x_13, x_45);
lean::inc(x_7);
x_49 = l_lean_parser_list_cons_tokens___rarg(x_7, x_47);
lean::inc(x_4);
x_51 = l_lean_parser_list_cons_tokens___rarg(x_4, x_49);
x_52 = l_lean_parser_list_cons_tokens___rarg(x_40, x_51);
x_53 = l_lean_parser_tokens___rarg(x_52);
x_54 = lean::mk_string("[");
lean::inc(x_1);
x_56 = l_lean_parser_symbol_tokens___rarg(x_54, x_1);
x_57 = lean::mk_string("]");
x_58 = l_lean_parser_symbol_tokens___rarg(x_57, x_1);
lean::inc(x_4);
x_60 = l_lean_parser_list_cons_tokens___rarg(x_58, x_4);
lean::inc(x_13);
x_62 = l_lean_parser_list_cons_tokens___rarg(x_13, x_60);
x_63 = l_lean_parser_list_cons_tokens___rarg(x_7, x_62);
lean::inc(x_4);
x_65 = l_lean_parser_list_cons_tokens___rarg(x_4, x_63);
x_66 = l_lean_parser_list_cons_tokens___rarg(x_56, x_65);
x_67 = l_lean_parser_tokens___rarg(x_66);
lean::inc(x_4);
x_69 = l_lean_parser_list_cons_tokens___rarg(x_67, x_4);
x_70 = l_lean_parser_list_cons_tokens___rarg(x_53, x_69);
x_71 = l_lean_parser_list_cons_tokens___rarg(x_37, x_70);
x_72 = l_lean_parser_list_cons_tokens___rarg(x_21, x_71);
x_73 = l_lean_parser_tokens___rarg(x_72);
x_74 = l_lean_parser_list_cons_tokens___rarg(x_73, x_4);
x_75 = l_lean_parser_tokens___rarg(x_74);
return x_75;
}
}
obj* l_lean_parser_term_simple__binder_view_to__binder__info___main(obj* x_0) {
_start:
{
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_1; obj* x_4; obj* x_6; obj* x_9; unsigned char x_10; obj* x_11; obj* x_12; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::cnstr_get(x_1, 1);
lean::inc(x_4);
x_6 = lean::cnstr_get(x_1, 3);
lean::inc(x_6);
lean::dec(x_1);
x_9 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_9, 0, x_4);
lean::cnstr_set(x_9, 1, x_6);
x_10 = 0;
x_11 = lean::box(x_10);
x_12 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_9);
return x_12;
}
case 1:
{
obj* x_13; obj* x_16; obj* x_18; obj* x_21; unsigned char x_22; obj* x_23; obj* x_24; 
x_13 = lean::cnstr_get(x_0, 0);
lean::inc(x_13);
lean::dec(x_0);
x_16 = lean::cnstr_get(x_13, 1);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_13, 3);
lean::inc(x_18);
lean::dec(x_13);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_16);
lean::cnstr_set(x_21, 1, x_18);
x_22 = 1;
x_23 = lean::box(x_22);
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_21);
return x_24;
}
case 2:
{
obj* x_25; obj* x_28; obj* x_30; obj* x_33; unsigned char x_34; obj* x_35; obj* x_36; 
x_25 = lean::cnstr_get(x_0, 0);
lean::inc(x_25);
lean::dec(x_0);
x_28 = lean::cnstr_get(x_25, 1);
lean::inc(x_28);
x_30 = lean::cnstr_get(x_25, 3);
lean::inc(x_30);
lean::dec(x_25);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_28);
lean::cnstr_set(x_33, 1, x_30);
x_34 = 2;
x_35 = lean::box(x_34);
x_36 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_33);
return x_36;
}
default:
{
obj* x_37; obj* x_40; obj* x_42; obj* x_45; unsigned char x_46; obj* x_47; obj* x_48; 
x_37 = lean::cnstr_get(x_0, 0);
lean::inc(x_37);
lean::dec(x_0);
x_40 = lean::cnstr_get(x_37, 1);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 3);
lean::inc(x_42);
lean::dec(x_37);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_40);
lean::cnstr_set(x_45, 1, x_42);
x_46 = 3;
x_47 = lean::box(x_46);
x_48 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_48, 0, x_47);
lean::cnstr_set(x_48, 1, x_45);
return x_48;
}
}
}
}
obj* l_lean_parser_term_simple__binder_view_to__binder__info(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_term_simple__binder_view_to__binder__info___main(x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_anonymous__constructor() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("anonymous_constructor");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_anonymous__constructor_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
x_35 = lean::box(3);
x_32 = x_1;
x_33 = x_35;
goto lbl_34;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_1, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
lean::dec(x_1);
x_32 = x_38;
x_33 = x_36;
goto lbl_34;
}
lbl_34:
{
obj* x_41; 
x_41 = l_lean_parser_syntax_as__node___main(x_33);
if (lean::obj_tag(x_41) == 0)
{
obj* x_43; 
lean::dec(x_41);
x_43 = lean::box(0);
if (lean::obj_tag(x_32) == 0)
{
obj* x_45; obj* x_47; 
lean::dec(x_32);
x_45 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_45);
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_20);
lean::cnstr_set(x_47, 1, x_45);
lean::cnstr_set(x_47, 2, x_43);
return x_47;
}
else
{
obj* x_48; 
x_48 = lean::cnstr_get(x_32, 0);
lean::inc(x_48);
lean::dec(x_32);
switch (lean::obj_tag(x_48)) {
case 0:
{
obj* x_52; obj* x_55; obj* x_56; obj* x_58; 
lean::dec(x_43);
x_52 = lean::cnstr_get(x_48, 0);
lean::inc(x_52);
lean::dec(x_48);
x_55 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_55, 0, x_52);
x_56 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_56);
x_58 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_58, 0, x_20);
lean::cnstr_set(x_58, 1, x_56);
lean::cnstr_set(x_58, 2, x_55);
return x_58;
}
case 1:
{
obj* x_60; obj* x_62; 
lean::dec(x_48);
x_60 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_60);
x_62 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_62, 0, x_20);
lean::cnstr_set(x_62, 1, x_60);
lean::cnstr_set(x_62, 2, x_43);
return x_62;
}
case 2:
{
obj* x_64; obj* x_66; 
lean::dec(x_48);
x_64 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_64);
x_66 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_66, 0, x_20);
lean::cnstr_set(x_66, 1, x_64);
lean::cnstr_set(x_66, 2, x_43);
return x_66;
}
default:
{
obj* x_68; obj* x_70; 
lean::dec(x_48);
x_68 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
x_70 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_70, 0, x_20);
lean::cnstr_set(x_70, 1, x_68);
lean::cnstr_set(x_70, 2, x_43);
return x_70;
}
}
}
}
else
{
obj* x_71; obj* x_73; obj* x_74; obj* x_77; 
x_71 = lean::cnstr_get(x_41, 0);
lean::inc(x_71);
if (lean::is_shared(x_41)) {
 lean::dec(x_41);
 x_73 = lean::box(0);
} else {
 lean::cnstr_release(x_41, 0);
 x_73 = x_41;
}
x_74 = lean::cnstr_get(x_71, 1);
lean::inc(x_74);
lean::dec(x_71);
x_77 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__1(x_74);
if (lean::obj_tag(x_32) == 0)
{
obj* x_80; obj* x_81; 
lean::dec(x_73);
lean::dec(x_32);
x_80 = lean::box(0);
x_81 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_81, 0, x_20);
lean::cnstr_set(x_81, 1, x_77);
lean::cnstr_set(x_81, 2, x_80);
return x_81;
}
else
{
obj* x_82; 
x_82 = lean::cnstr_get(x_32, 0);
lean::inc(x_82);
lean::dec(x_32);
switch (lean::obj_tag(x_82)) {
case 0:
{
obj* x_85; obj* x_88; obj* x_89; 
x_85 = lean::cnstr_get(x_82, 0);
lean::inc(x_85);
lean::dec(x_82);
if (lean::is_scalar(x_73)) {
 x_88 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_88 = x_73;
}
lean::cnstr_set(x_88, 0, x_85);
x_89 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_89, 0, x_20);
lean::cnstr_set(x_89, 1, x_77);
lean::cnstr_set(x_89, 2, x_88);
return x_89;
}
case 1:
{
obj* x_92; obj* x_93; 
lean::dec(x_82);
lean::dec(x_73);
x_92 = lean::box(0);
x_93 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_93, 0, x_20);
lean::cnstr_set(x_93, 1, x_77);
lean::cnstr_set(x_93, 2, x_92);
return x_93;
}
case 2:
{
obj* x_96; obj* x_97; 
lean::dec(x_82);
lean::dec(x_73);
x_96 = lean::box(0);
x_97 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_97, 0, x_20);
lean::cnstr_set(x_97, 1, x_77);
lean::cnstr_set(x_97, 2, x_96);
return x_97;
}
default:
{
obj* x_100; obj* x_101; 
lean::dec(x_82);
lean::dec(x_73);
x_100 = lean::box(0);
x_101 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_101, 0, x_20);
lean::cnstr_set(x_101, 1, x_77);
lean::cnstr_set(x_101, 2, x_100);
return x_101;
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_19:
{
obj* x_26; 
x_26 = l_lean_parser_syntax_as__node___main(x_18);
if (lean::obj_tag(x_26) == 0)
{
obj* x_28; 
lean::dec(x_26);
x_28 = lean::box(0);
if (lean::obj_tag(x_17) == 0)
{
obj* x_30; obj* x_32; 
lean::dec(x_17);
x_30 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_30);
x_32 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_32, 0, x_5);
lean::cnstr_set(x_32, 1, x_30);
lean::cnstr_set(x_32, 2, x_28);
return x_32;
}
else
{
obj* x_33; 
x_33 = lean::cnstr_get(x_17, 0);
lean::inc(x_33);
lean::dec(x_17);
switch (lean::obj_tag(x_33)) {
case 0:
{
obj* x_37; obj* x_40; obj* x_41; obj* x_43; 
lean::dec(x_28);
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_40, 0, x_37);
x_41 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_41);
x_43 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_43, 0, x_5);
lean::cnstr_set(x_43, 1, x_41);
lean::cnstr_set(x_43, 2, x_40);
return x_43;
}
case 1:
{
obj* x_45; obj* x_47; 
lean::dec(x_33);
x_45 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_45);
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_5);
lean::cnstr_set(x_47, 1, x_45);
lean::cnstr_set(x_47, 2, x_28);
return x_47;
}
case 2:
{
obj* x_49; obj* x_51; 
lean::dec(x_33);
x_49 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_49);
x_51 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_51, 0, x_5);
lean::cnstr_set(x_51, 1, x_49);
lean::cnstr_set(x_51, 2, x_28);
return x_51;
}
default:
{
obj* x_53; obj* x_55; 
lean::dec(x_33);
x_53 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_53);
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_5);
lean::cnstr_set(x_55, 1, x_53);
lean::cnstr_set(x_55, 2, x_28);
return x_55;
}
}
}
}
else
{
obj* x_56; obj* x_58; obj* x_59; obj* x_62; 
x_56 = lean::cnstr_get(x_26, 0);
lean::inc(x_56);
if (lean::is_shared(x_26)) {
 lean::dec(x_26);
 x_58 = lean::box(0);
} else {
 lean::cnstr_release(x_26, 0);
 x_58 = x_26;
}
x_59 = lean::cnstr_get(x_56, 1);
lean::inc(x_59);
lean::dec(x_56);
x_62 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__1(x_59);
if (lean::obj_tag(x_17) == 0)
{
obj* x_65; obj* x_66; 
lean::dec(x_58);
lean::dec(x_17);
x_65 = lean::box(0);
x_66 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_66, 0, x_5);
lean::cnstr_set(x_66, 1, x_62);
lean::cnstr_set(x_66, 2, x_65);
return x_66;
}
else
{
obj* x_67; 
x_67 = lean::cnstr_get(x_17, 0);
lean::inc(x_67);
lean::dec(x_17);
switch (lean::obj_tag(x_67)) {
case 0:
{
obj* x_70; obj* x_73; obj* x_74; 
x_70 = lean::cnstr_get(x_67, 0);
lean::inc(x_70);
lean::dec(x_67);
if (lean::is_scalar(x_58)) {
 x_73 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_73 = x_58;
}
lean::cnstr_set(x_73, 0, x_70);
x_74 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_74, 0, x_5);
lean::cnstr_set(x_74, 1, x_62);
lean::cnstr_set(x_74, 2, x_73);
return x_74;
}
case 1:
{
obj* x_77; obj* x_78; 
lean::dec(x_67);
lean::dec(x_58);
x_77 = lean::box(0);
x_78 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_78, 0, x_5);
lean::cnstr_set(x_78, 1, x_62);
lean::cnstr_set(x_78, 2, x_77);
return x_78;
}
case 2:
{
obj* x_81; obj* x_82; 
lean::dec(x_67);
lean::dec(x_58);
x_81 = lean::box(0);
x_82 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_82, 0, x_5);
lean::cnstr_set(x_82, 1, x_62);
lean::cnstr_set(x_82, 2, x_81);
return x_82;
}
default:
{
obj* x_85; obj* x_86; 
lean::dec(x_67);
lean::dec(x_58);
x_85 = lean::box(0);
x_86 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_86, 0, x_5);
lean::cnstr_set(x_86, 1, x_62);
lean::cnstr_set(x_86, 2, x_85);
return x_86;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_28; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_8);
x_10 = l_option_map___rarg(x_8, x_1);
x_11 = lean::box(3);
lean::inc(x_11);
x_13 = l_option_get__or__else___main___rarg(x_10, x_11);
x_14 = l_list_map___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__2(x_3);
x_15 = l_list_join___main___rarg(x_14);
x_16 = l_lean_parser_no__kind;
lean::inc(x_16);
x_18 = l_lean_parser_syntax_mk__node(x_16, x_15);
lean::inc(x_8);
x_20 = l_option_map___rarg(x_8, x_5);
x_21 = l_option_get__or__else___main___rarg(x_20, x_11);
x_22 = lean::box(0);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_21);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_18);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_13);
lean::cnstr_set(x_25, 1, x_24);
x_26 = l_lean_parser_term_anonymous__constructor;
lean::inc(x_26);
x_28 = l_lean_parser_syntax_mk__node(x_26, x_25);
return x_28;
}
}
obj* l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_7 = x_0;
}
if (lean::obj_tag(x_5) == 0)
{
obj* x_9; obj* x_11; obj* x_12; 
lean::dec(x_5);
x_9 = lean::box(0);
lean::inc(x_9);
x_11 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_11, 0, x_3);
lean::cnstr_set(x_11, 1, x_9);
if (lean::is_scalar(x_7)) {
 x_12 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_12 = x_7;
}
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_9);
return x_12;
}
else
{
obj* x_13; obj* x_15; obj* x_18; 
x_13 = lean::cnstr_get(x_5, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_5, 1);
lean::inc(x_15);
lean::dec(x_5);
x_18 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__1(x_15);
switch (lean::obj_tag(x_13)) {
case 0:
{
obj* x_19; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_19 = lean::cnstr_get(x_13, 0);
lean::inc(x_19);
lean::dec(x_13);
x_22 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_22);
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_3);
lean::cnstr_set(x_24, 1, x_23);
if (lean::is_scalar(x_7)) {
 x_25 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_25 = x_7;
}
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_18);
return x_25;
}
case 1:
{
obj* x_27; obj* x_29; obj* x_30; 
lean::dec(x_13);
x_27 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_27);
x_29 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_29, 0, x_3);
lean::cnstr_set(x_29, 1, x_27);
if (lean::is_scalar(x_7)) {
 x_30 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_30 = x_7;
}
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_18);
return x_30;
}
case 2:
{
obj* x_32; obj* x_34; obj* x_35; 
lean::dec(x_13);
x_32 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_32);
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_3);
lean::cnstr_set(x_34, 1, x_32);
if (lean::is_scalar(x_7)) {
 x_35 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_35 = x_7;
}
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_18);
return x_35;
}
default:
{
obj* x_37; obj* x_39; obj* x_40; 
lean::dec(x_13);
x_37 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_37);
x_39 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_39, 0, x_3);
lean::cnstr_set(x_39, 1, x_37);
if (lean::is_scalar(x_7)) {
 x_40 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_40 = x_7;
}
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_18);
return x_40;
}
}
}
}
}
}
obj* l_list_map___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__2(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_8; obj* x_10; obj* x_13; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_7 = x_0;
}
x_8 = lean::cnstr_get(x_3, 0);
lean::inc(x_8);
x_10 = lean::cnstr_get(x_3, 1);
lean::inc(x_10);
lean::dec(x_3);
x_13 = l_list_map___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__2(x_5);
if (lean::obj_tag(x_10) == 0)
{
obj* x_15; obj* x_16; obj* x_17; 
lean::dec(x_10);
x_15 = lean::box(0);
if (lean::is_scalar(x_7)) {
 x_16 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_16 = x_7;
}
lean::cnstr_set(x_16, 0, x_8);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_13);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_18 = lean::cnstr_get(x_10, 0);
lean::inc(x_18);
lean::dec(x_10);
x_21 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_21);
x_23 = l_option_map___rarg(x_21, x_18);
x_24 = lean::box(3);
x_25 = l_option_get__or__else___main___rarg(x_23, x_24);
x_26 = lean::box(0);
if (lean::is_scalar(x_7)) {
 x_27 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_27 = x_7;
}
lean::cnstr_set(x_27, 0, x_25);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_8);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_13);
return x_29;
}
}
}
}
obj* _init_l_lean_parser_term_anonymous__constructor_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_anonymous__constructor_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_anonymous__constructor_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_anonymous__constructor;
x_6 = l_lean_parser_term_anonymous__constructor_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_anonymous__constructor_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_15; unsigned char x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_0 = lean::mk_string("\xe2\x9f\xa8");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_nat_obj(0u);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::mk_string(",");
x_11 = l_string_trim(x_10);
lean::inc(x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_13, 0, x_11);
lean::inc(x_7);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_15, 0, x_11);
lean::closure_set(x_15, 1, x_7);
lean::closure_set(x_15, 2, x_13);
x_16 = 1;
x_17 = lean::box(x_16);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser___spec__1___boxed), 8, 3);
lean::closure_set(x_18, 0, x_9);
lean::closure_set(x_18, 1, x_15);
lean::closure_set(x_18, 2, x_17);
x_19 = lean::mk_string("\xe2\x9f\xa9");
x_20 = l_string_trim(x_19);
lean::inc(x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_22, 0, x_20);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_23, 0, x_20);
lean::closure_set(x_23, 1, x_7);
lean::closure_set(x_23, 2, x_22);
x_24 = lean::box(0);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_23);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_18);
lean::cnstr_set(x_26, 1, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_6);
lean::cnstr_set(x_27, 1, x_26);
return x_27;
}
}
obj* _init_l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_15; unsigned char x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_40; 
x_0 = lean::mk_string("\xe2\x9f\xa8");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_nat_obj(0u);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::mk_string(",");
x_11 = l_string_trim(x_10);
lean::inc(x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_13, 0, x_11);
lean::inc(x_7);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_15, 0, x_11);
lean::closure_set(x_15, 1, x_7);
lean::closure_set(x_15, 2, x_13);
x_16 = 1;
x_17 = lean::box(x_16);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser___spec__1___boxed), 8, 3);
lean::closure_set(x_18, 0, x_9);
lean::closure_set(x_18, 1, x_15);
lean::closure_set(x_18, 2, x_17);
x_19 = lean::mk_string("\xe2\x9f\xa9");
x_20 = l_string_trim(x_19);
lean::inc(x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_22, 0, x_20);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_23, 0, x_20);
lean::closure_set(x_23, 1, x_7);
lean::closure_set(x_23, 2, x_22);
x_24 = lean::box(0);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_23);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_18);
lean::cnstr_set(x_26, 1, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_6);
lean::cnstr_set(x_27, 1, x_26);
x_28 = l_lean_parser_term__parser__m_monad;
x_29 = l_lean_parser_term__parser__m_monad__except;
x_30 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_31 = l_lean_parser_term__parser__m_alternative;
x_32 = l_lean_parser_term_anonymous__constructor;
x_33 = l_lean_parser_term_anonymous__constructor_has__view;
lean::inc(x_33);
lean::inc(x_32);
lean::inc(x_31);
lean::inc(x_30);
lean::inc(x_29);
lean::inc(x_28);
x_40 = l_lean_parser_combinators_node_view___rarg(x_28, x_29, x_30, x_31, x_32, x_27, x_33);
return x_40;
}
}
obj* _init_l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_0 = lean::mk_string("\xe2\x9f\xa8");
x_1 = l_lean_parser_max__prec;
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::mk_string(",");
x_5 = lean::mk_nat_obj(0u);
lean::inc(x_5);
x_7 = l_lean_parser_symbol_tokens___rarg(x_4, x_5);
x_8 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_8);
x_10 = l_lean_parser_combinators_sep__by_tokens___rarg(x_8, x_7);
x_11 = lean::mk_string("\xe2\x9f\xa9");
x_12 = l_lean_parser_symbol_tokens___rarg(x_11, x_5);
x_13 = lean::box(0);
x_14 = l_lean_parser_list_cons_tokens___rarg(x_12, x_13);
x_15 = l_lean_parser_list_cons_tokens___rarg(x_10, x_14);
x_16 = l_lean_parser_list_cons_tokens___rarg(x_3, x_15);
x_17 = l_lean_parser_tokens___rarg(x_16);
return x_17;
}
}
obj* _init_l_lean_parser_term_explicit__binder__content() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("explicit_binder_content");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_explicit__binder__content_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; obj* x_91; obj* x_93; obj* x_94; 
lean::dec(x_86);
x_90 = l_lean_parser_term_binder__content_has__view;
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
x_93 = lean::apply_1(x_91, x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
else
{
obj* x_96; obj* x_97; obj* x_99; obj* x_100; 
lean::dec(x_86);
x_96 = l_lean_parser_command_notation__like_has__view;
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
x_99 = lean::apply_1(x_97, x_1);
x_100 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_100, 0, x_99);
return x_100;
}
}
}
}
obj* _init_l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; obj* x_11; obj* x_13; obj* x_14; 
lean::dec(x_6);
x_10 = l_lean_parser_term_binder__content_has__view;
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_0);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
else
{
obj* x_16; obj* x_17; obj* x_19; obj* x_20; 
lean::dec(x_6);
x_16 = l_lean_parser_command_notation__like_has__view;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::apply_1(x_17, x_0);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
}
}
obj* _init_l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("explicit_binder_content");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_command_notation__like_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
x_8 = lean::apply_1(x_6, x_2);
lean::inc(x_1);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_lean_parser_term_explicit__binder__content;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_33; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
x_21 = l_lean_parser_term_binder__content_has__view;
x_22 = lean::cnstr_get(x_21, 1);
lean::inc(x_22);
x_24 = lean::apply_1(x_22, x_18);
lean::inc(x_1);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_27);
x_29 = l_lean_parser_syntax_mk__node(x_27, x_26);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_1);
x_31 = l_lean_parser_term_explicit__binder__content;
lean::inc(x_31);
x_33 = l_lean_parser_syntax_mk__node(x_31, x_30);
return x_33;
}
}
}
obj* _init_l_lean_parser_term_explicit__binder__content_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_explicit__binder__content_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_explicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("explicit_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_explicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_10; 
lean::dec(x_8);
x_10 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__2;
lean::inc(x_10);
return x_10;
}
else
{
obj* x_12; obj* x_15; 
x_12 = lean::cnstr_get(x_8, 0);
lean::inc(x_12);
lean::dec(x_8);
x_15 = lean::cnstr_get(x_12, 1);
lean::inc(x_15);
lean::dec(x_12);
if (lean::obj_tag(x_15) == 0)
{
obj* x_18; 
x_18 = lean::box(3);
x_5 = x_15;
x_6 = x_18;
goto lbl_7;
}
else
{
obj* x_19; obj* x_21; 
x_19 = lean::cnstr_get(x_15, 0);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_15, 1);
lean::inc(x_21);
lean::dec(x_15);
x_5 = x_21;
x_6 = x_19;
goto lbl_7;
}
}
lbl_4:
{
obj* x_24; obj* x_25; obj* x_27; 
x_24 = l_lean_parser_term_explicit__binder__content_has__view;
x_25 = lean::cnstr_get(x_24, 0);
lean::inc(x_25);
x_27 = lean::apply_1(x_25, x_2);
if (lean::obj_tag(x_3) == 0)
{
obj* x_29; obj* x_30; 
lean::dec(x_3);
x_29 = lean::box(0);
x_30 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_30, 0, x_1);
lean::cnstr_set(x_30, 1, x_27);
lean::cnstr_set(x_30, 2, x_29);
return x_30;
}
else
{
obj* x_31; 
x_31 = lean::cnstr_get(x_3, 0);
lean::inc(x_31);
lean::dec(x_3);
switch (lean::obj_tag(x_31)) {
case 0:
{
obj* x_34; obj* x_37; obj* x_38; 
x_34 = lean::cnstr_get(x_31, 0);
lean::inc(x_34);
lean::dec(x_31);
x_37 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_37, 0, x_34);
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_1);
lean::cnstr_set(x_38, 1, x_27);
lean::cnstr_set(x_38, 2, x_37);
return x_38;
}
case 1:
{
obj* x_40; obj* x_41; 
lean::dec(x_31);
x_40 = lean::box(0);
x_41 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_41, 0, x_1);
lean::cnstr_set(x_41, 1, x_27);
lean::cnstr_set(x_41, 2, x_40);
return x_41;
}
case 2:
{
obj* x_43; obj* x_44; 
lean::dec(x_31);
x_43 = lean::box(0);
x_44 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_44, 0, x_1);
lean::cnstr_set(x_44, 1, x_27);
lean::cnstr_set(x_44, 2, x_43);
return x_44;
}
default:
{
obj* x_46; obj* x_47; 
lean::dec(x_31);
x_46 = lean::box(0);
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_1);
lean::cnstr_set(x_47, 1, x_27);
lean::cnstr_set(x_47, 2, x_46);
return x_47;
}
}
}
}
lbl_7:
{
obj* x_48; 
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_50; obj* x_53; 
x_50 = lean::cnstr_get(x_6, 0);
lean::inc(x_50);
lean::dec(x_6);
x_53 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_53, 0, x_50);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_53;
goto lbl_49;
}
else
{
obj* x_54; obj* x_56; 
x_54 = lean::cnstr_get(x_5, 0);
lean::inc(x_54);
x_56 = lean::cnstr_get(x_5, 1);
lean::inc(x_56);
lean::dec(x_5);
x_1 = x_53;
x_2 = x_54;
x_3 = x_56;
goto lbl_4;
}
}
case 1:
{
obj* x_60; 
lean::dec(x_6);
x_60 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_60;
goto lbl_49;
}
else
{
obj* x_61; obj* x_63; 
x_61 = lean::cnstr_get(x_5, 0);
lean::inc(x_61);
x_63 = lean::cnstr_get(x_5, 1);
lean::inc(x_63);
lean::dec(x_5);
x_1 = x_60;
x_2 = x_61;
x_3 = x_63;
goto lbl_4;
}
}
case 2:
{
obj* x_67; 
lean::dec(x_6);
x_67 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_67;
goto lbl_49;
}
else
{
obj* x_68; obj* x_70; 
x_68 = lean::cnstr_get(x_5, 0);
lean::inc(x_68);
x_70 = lean::cnstr_get(x_5, 1);
lean::inc(x_70);
lean::dec(x_5);
x_1 = x_67;
x_2 = x_68;
x_3 = x_70;
goto lbl_4;
}
}
default:
{
obj* x_74; 
lean::dec(x_6);
x_74 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_74;
goto lbl_49;
}
else
{
obj* x_75; obj* x_77; 
x_75 = lean::cnstr_get(x_5, 0);
lean::inc(x_75);
x_77 = lean::cnstr_get(x_5, 1);
lean::inc(x_77);
lean::dec(x_5);
x_1 = x_74;
x_2 = x_75;
x_3 = x_77;
goto lbl_4;
}
}
}
lbl_49:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_81; obj* x_82; obj* x_84; 
lean::dec(x_5);
x_81 = lean::box(0);
x_82 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_82);
x_84 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_84, 0, x_48);
lean::cnstr_set(x_84, 1, x_82);
lean::cnstr_set(x_84, 2, x_81);
return x_84;
}
else
{
obj* x_85; 
x_85 = lean::cnstr_get(x_5, 0);
lean::inc(x_85);
lean::dec(x_5);
switch (lean::obj_tag(x_85)) {
case 0:
{
obj* x_88; obj* x_91; obj* x_92; obj* x_94; 
x_88 = lean::cnstr_get(x_85, 0);
lean::inc(x_88);
lean::dec(x_85);
x_91 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_91, 0, x_88);
x_92 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_92);
x_94 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_94, 0, x_48);
lean::cnstr_set(x_94, 1, x_92);
lean::cnstr_set(x_94, 2, x_91);
return x_94;
}
case 1:
{
obj* x_96; obj* x_97; obj* x_99; 
lean::dec(x_85);
x_96 = lean::box(0);
x_97 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_97);
x_99 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_99, 0, x_48);
lean::cnstr_set(x_99, 1, x_97);
lean::cnstr_set(x_99, 2, x_96);
return x_99;
}
case 2:
{
obj* x_101; obj* x_102; obj* x_104; 
lean::dec(x_85);
x_101 = lean::box(0);
x_102 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_102);
x_104 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_104, 0, x_48);
lean::cnstr_set(x_104, 1, x_102);
lean::cnstr_set(x_104, 2, x_101);
return x_104;
}
default:
{
obj* x_106; obj* x_107; obj* x_109; 
lean::dec(x_85);
x_106 = lean::box(0);
x_107 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_107);
x_109 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_109, 0, x_48);
lean::cnstr_set(x_109, 1, x_107);
lean::cnstr_set(x_109, 2, x_106);
return x_109;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_0 = l_lean_parser_term_explicit__binder__content_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
return x_4;
}
}
obj* _init_l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_7 = lean::box(0);
x_8 = lean::box(3);
x_4 = x_7;
x_5 = x_8;
goto lbl_6;
lbl_3:
{
obj* x_9; obj* x_10; obj* x_12; 
x_9 = l_lean_parser_term_explicit__binder__content_has__view;
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
x_12 = lean::apply_1(x_10, x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_14; obj* x_15; 
lean::dec(x_2);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_15, 0, x_0);
lean::cnstr_set(x_15, 1, x_12);
lean::cnstr_set(x_15, 2, x_14);
return x_15;
}
else
{
obj* x_16; 
x_16 = lean::cnstr_get(x_2, 0);
lean::inc(x_16);
lean::dec(x_2);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_19; obj* x_22; obj* x_23; 
x_19 = lean::cnstr_get(x_16, 0);
lean::inc(x_19);
lean::dec(x_16);
x_22 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
x_23 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_23, 0, x_0);
lean::cnstr_set(x_23, 1, x_12);
lean::cnstr_set(x_23, 2, x_22);
return x_23;
}
case 1:
{
obj* x_25; obj* x_26; 
lean::dec(x_16);
x_25 = lean::box(0);
x_26 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_26, 0, x_0);
lean::cnstr_set(x_26, 1, x_12);
lean::cnstr_set(x_26, 2, x_25);
return x_26;
}
case 2:
{
obj* x_28; obj* x_29; 
lean::dec(x_16);
x_28 = lean::box(0);
x_29 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_29, 0, x_0);
lean::cnstr_set(x_29, 1, x_12);
lean::cnstr_set(x_29, 2, x_28);
return x_29;
}
default:
{
obj* x_31; obj* x_32; 
lean::dec(x_16);
x_31 = lean::box(0);
x_32 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_32, 0, x_0);
lean::cnstr_set(x_32, 1, x_12);
lean::cnstr_set(x_32, 2, x_31);
return x_32;
}
}
}
}
lbl_6:
{
obj* x_33; 
switch (lean::obj_tag(x_5)) {
case 0:
{
obj* x_35; obj* x_38; 
x_35 = lean::cnstr_get(x_5, 0);
lean::inc(x_35);
lean::dec(x_5);
x_38 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_38, 0, x_35);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_38;
goto lbl_34;
}
else
{
obj* x_39; obj* x_41; 
x_39 = lean::cnstr_get(x_4, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_4, 1);
lean::inc(x_41);
lean::dec(x_4);
x_0 = x_38;
x_1 = x_39;
x_2 = x_41;
goto lbl_3;
}
}
case 1:
{
obj* x_45; 
lean::dec(x_5);
x_45 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_45;
goto lbl_34;
}
else
{
obj* x_46; obj* x_48; 
x_46 = lean::cnstr_get(x_4, 0);
lean::inc(x_46);
x_48 = lean::cnstr_get(x_4, 1);
lean::inc(x_48);
lean::dec(x_4);
x_0 = x_45;
x_1 = x_46;
x_2 = x_48;
goto lbl_3;
}
}
case 2:
{
obj* x_52; 
lean::dec(x_5);
x_52 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_52;
goto lbl_34;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_4, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_4, 1);
lean::inc(x_55);
lean::dec(x_4);
x_0 = x_52;
x_1 = x_53;
x_2 = x_55;
goto lbl_3;
}
}
default:
{
obj* x_59; 
lean::dec(x_5);
x_59 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_59;
goto lbl_34;
}
else
{
obj* x_60; obj* x_62; 
x_60 = lean::cnstr_get(x_4, 0);
lean::inc(x_60);
x_62 = lean::cnstr_get(x_4, 1);
lean::inc(x_62);
lean::dec(x_4);
x_0 = x_59;
x_1 = x_60;
x_2 = x_62;
goto lbl_3;
}
}
}
lbl_34:
{
if (lean::obj_tag(x_4) == 0)
{
obj* x_66; obj* x_67; obj* x_69; 
lean::dec(x_4);
x_66 = lean::box(0);
x_67 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_67);
x_69 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_69, 0, x_33);
lean::cnstr_set(x_69, 1, x_67);
lean::cnstr_set(x_69, 2, x_66);
return x_69;
}
else
{
obj* x_70; 
x_70 = lean::cnstr_get(x_4, 0);
lean::inc(x_70);
lean::dec(x_4);
switch (lean::obj_tag(x_70)) {
case 0:
{
obj* x_73; obj* x_76; obj* x_77; obj* x_79; 
x_73 = lean::cnstr_get(x_70, 0);
lean::inc(x_73);
lean::dec(x_70);
x_76 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_76, 0, x_73);
x_77 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_77);
x_79 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_79, 0, x_33);
lean::cnstr_set(x_79, 1, x_77);
lean::cnstr_set(x_79, 2, x_76);
return x_79;
}
case 1:
{
obj* x_81; obj* x_82; obj* x_84; 
lean::dec(x_70);
x_81 = lean::box(0);
x_82 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_82);
x_84 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_84, 0, x_33);
lean::cnstr_set(x_84, 1, x_82);
lean::cnstr_set(x_84, 2, x_81);
return x_84;
}
case 2:
{
obj* x_86; obj* x_87; obj* x_89; 
lean::dec(x_70);
x_86 = lean::box(0);
x_87 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_87);
x_89 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_89, 0, x_33);
lean::cnstr_set(x_89, 1, x_87);
lean::cnstr_set(x_89, 2, x_86);
return x_89;
}
default:
{
obj* x_91; obj* x_92; obj* x_94; 
lean::dec(x_70);
x_91 = lean::box(0);
x_92 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_92);
x_94 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_94, 0, x_33);
lean::cnstr_set(x_94, 1, x_92);
lean::cnstr_set(x_94, 2, x_91);
return x_94;
}
}
}
}
}
}
}
obj* l_lean_parser_term_explicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_27; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_8);
x_10 = l_option_map___rarg(x_8, x_1);
x_11 = lean::box(3);
lean::inc(x_11);
x_13 = l_option_get__or__else___main___rarg(x_10, x_11);
x_14 = l_lean_parser_term_explicit__binder__content_has__view;
x_15 = lean::cnstr_get(x_14, 1);
lean::inc(x_15);
x_17 = lean::apply_1(x_15, x_3);
lean::inc(x_8);
x_19 = l_option_map___rarg(x_8, x_5);
x_20 = l_option_get__or__else___main___rarg(x_19, x_11);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_17);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_13);
lean::cnstr_set(x_24, 1, x_23);
x_25 = l_lean_parser_term_explicit__binder;
lean::inc(x_25);
x_27 = l_lean_parser_syntax_mk__node(x_25, x_24);
return x_27;
}
}
obj* _init_l_lean_parser_term_explicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_explicit__binder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_implicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("implicit_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_implicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_implicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_10; 
lean::dec(x_8);
x_10 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__2;
lean::inc(x_10);
return x_10;
}
else
{
obj* x_12; obj* x_15; 
x_12 = lean::cnstr_get(x_8, 0);
lean::inc(x_12);
lean::dec(x_8);
x_15 = lean::cnstr_get(x_12, 1);
lean::inc(x_15);
lean::dec(x_12);
if (lean::obj_tag(x_15) == 0)
{
obj* x_18; 
x_18 = lean::box(3);
x_5 = x_15;
x_6 = x_18;
goto lbl_7;
}
else
{
obj* x_19; obj* x_21; 
x_19 = lean::cnstr_get(x_15, 0);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_15, 1);
lean::inc(x_21);
lean::dec(x_15);
x_5 = x_21;
x_6 = x_19;
goto lbl_7;
}
}
lbl_4:
{
obj* x_24; obj* x_25; obj* x_27; 
x_24 = l_lean_parser_term_binder__content_has__view;
x_25 = lean::cnstr_get(x_24, 0);
lean::inc(x_25);
x_27 = lean::apply_1(x_25, x_2);
if (lean::obj_tag(x_3) == 0)
{
obj* x_29; obj* x_30; 
lean::dec(x_3);
x_29 = lean::box(0);
x_30 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_30, 0, x_1);
lean::cnstr_set(x_30, 1, x_27);
lean::cnstr_set(x_30, 2, x_29);
return x_30;
}
else
{
obj* x_31; 
x_31 = lean::cnstr_get(x_3, 0);
lean::inc(x_31);
lean::dec(x_3);
switch (lean::obj_tag(x_31)) {
case 0:
{
obj* x_34; obj* x_37; obj* x_38; 
x_34 = lean::cnstr_get(x_31, 0);
lean::inc(x_34);
lean::dec(x_31);
x_37 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_37, 0, x_34);
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_1);
lean::cnstr_set(x_38, 1, x_27);
lean::cnstr_set(x_38, 2, x_37);
return x_38;
}
case 1:
{
obj* x_40; obj* x_41; 
lean::dec(x_31);
x_40 = lean::box(0);
x_41 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_41, 0, x_1);
lean::cnstr_set(x_41, 1, x_27);
lean::cnstr_set(x_41, 2, x_40);
return x_41;
}
case 2:
{
obj* x_43; obj* x_44; 
lean::dec(x_31);
x_43 = lean::box(0);
x_44 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_44, 0, x_1);
lean::cnstr_set(x_44, 1, x_27);
lean::cnstr_set(x_44, 2, x_43);
return x_44;
}
default:
{
obj* x_46; obj* x_47; 
lean::dec(x_31);
x_46 = lean::box(0);
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_1);
lean::cnstr_set(x_47, 1, x_27);
lean::cnstr_set(x_47, 2, x_46);
return x_47;
}
}
}
}
lbl_7:
{
obj* x_48; 
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_50; obj* x_53; 
x_50 = lean::cnstr_get(x_6, 0);
lean::inc(x_50);
lean::dec(x_6);
x_53 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_53, 0, x_50);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_53;
goto lbl_49;
}
else
{
obj* x_54; obj* x_56; 
x_54 = lean::cnstr_get(x_5, 0);
lean::inc(x_54);
x_56 = lean::cnstr_get(x_5, 1);
lean::inc(x_56);
lean::dec(x_5);
x_1 = x_53;
x_2 = x_54;
x_3 = x_56;
goto lbl_4;
}
}
case 1:
{
obj* x_60; 
lean::dec(x_6);
x_60 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_60;
goto lbl_49;
}
else
{
obj* x_61; obj* x_63; 
x_61 = lean::cnstr_get(x_5, 0);
lean::inc(x_61);
x_63 = lean::cnstr_get(x_5, 1);
lean::inc(x_63);
lean::dec(x_5);
x_1 = x_60;
x_2 = x_61;
x_3 = x_63;
goto lbl_4;
}
}
case 2:
{
obj* x_67; 
lean::dec(x_6);
x_67 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_67;
goto lbl_49;
}
else
{
obj* x_68; obj* x_70; 
x_68 = lean::cnstr_get(x_5, 0);
lean::inc(x_68);
x_70 = lean::cnstr_get(x_5, 1);
lean::inc(x_70);
lean::dec(x_5);
x_1 = x_67;
x_2 = x_68;
x_3 = x_70;
goto lbl_4;
}
}
default:
{
obj* x_74; 
lean::dec(x_6);
x_74 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_74;
goto lbl_49;
}
else
{
obj* x_75; obj* x_77; 
x_75 = lean::cnstr_get(x_5, 0);
lean::inc(x_75);
x_77 = lean::cnstr_get(x_5, 1);
lean::inc(x_77);
lean::dec(x_5);
x_1 = x_74;
x_2 = x_75;
x_3 = x_77;
goto lbl_4;
}
}
}
lbl_49:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_81; obj* x_82; obj* x_84; 
lean::dec(x_5);
x_81 = lean::box(0);
x_82 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_82);
x_84 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_84, 0, x_48);
lean::cnstr_set(x_84, 1, x_82);
lean::cnstr_set(x_84, 2, x_81);
return x_84;
}
else
{
obj* x_85; 
x_85 = lean::cnstr_get(x_5, 0);
lean::inc(x_85);
lean::dec(x_5);
switch (lean::obj_tag(x_85)) {
case 0:
{
obj* x_88; obj* x_91; obj* x_92; obj* x_94; 
x_88 = lean::cnstr_get(x_85, 0);
lean::inc(x_88);
lean::dec(x_85);
x_91 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_91, 0, x_88);
x_92 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_92);
x_94 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_94, 0, x_48);
lean::cnstr_set(x_94, 1, x_92);
lean::cnstr_set(x_94, 2, x_91);
return x_94;
}
case 1:
{
obj* x_96; obj* x_97; obj* x_99; 
lean::dec(x_85);
x_96 = lean::box(0);
x_97 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_97);
x_99 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_99, 0, x_48);
lean::cnstr_set(x_99, 1, x_97);
lean::cnstr_set(x_99, 2, x_96);
return x_99;
}
case 2:
{
obj* x_101; obj* x_102; obj* x_104; 
lean::dec(x_85);
x_101 = lean::box(0);
x_102 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_102);
x_104 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_104, 0, x_48);
lean::cnstr_set(x_104, 1, x_102);
lean::cnstr_set(x_104, 2, x_101);
return x_104;
}
default:
{
obj* x_106; obj* x_107; obj* x_109; 
lean::dec(x_85);
x_106 = lean::box(0);
x_107 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_107);
x_109 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_109, 0, x_48);
lean::cnstr_set(x_109, 1, x_107);
lean::cnstr_set(x_109, 2, x_106);
return x_109;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_0 = l_lean_parser_term_binder__content_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
return x_4;
}
}
obj* _init_l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_7 = lean::box(0);
x_8 = lean::box(3);
x_4 = x_7;
x_5 = x_8;
goto lbl_6;
lbl_3:
{
obj* x_9; obj* x_10; obj* x_12; 
x_9 = l_lean_parser_term_binder__content_has__view;
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
x_12 = lean::apply_1(x_10, x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_14; obj* x_15; 
lean::dec(x_2);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_15, 0, x_0);
lean::cnstr_set(x_15, 1, x_12);
lean::cnstr_set(x_15, 2, x_14);
return x_15;
}
else
{
obj* x_16; 
x_16 = lean::cnstr_get(x_2, 0);
lean::inc(x_16);
lean::dec(x_2);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_19; obj* x_22; obj* x_23; 
x_19 = lean::cnstr_get(x_16, 0);
lean::inc(x_19);
lean::dec(x_16);
x_22 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
x_23 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_23, 0, x_0);
lean::cnstr_set(x_23, 1, x_12);
lean::cnstr_set(x_23, 2, x_22);
return x_23;
}
case 1:
{
obj* x_25; obj* x_26; 
lean::dec(x_16);
x_25 = lean::box(0);
x_26 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_26, 0, x_0);
lean::cnstr_set(x_26, 1, x_12);
lean::cnstr_set(x_26, 2, x_25);
return x_26;
}
case 2:
{
obj* x_28; obj* x_29; 
lean::dec(x_16);
x_28 = lean::box(0);
x_29 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_29, 0, x_0);
lean::cnstr_set(x_29, 1, x_12);
lean::cnstr_set(x_29, 2, x_28);
return x_29;
}
default:
{
obj* x_31; obj* x_32; 
lean::dec(x_16);
x_31 = lean::box(0);
x_32 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_32, 0, x_0);
lean::cnstr_set(x_32, 1, x_12);
lean::cnstr_set(x_32, 2, x_31);
return x_32;
}
}
}
}
lbl_6:
{
obj* x_33; 
switch (lean::obj_tag(x_5)) {
case 0:
{
obj* x_35; obj* x_38; 
x_35 = lean::cnstr_get(x_5, 0);
lean::inc(x_35);
lean::dec(x_5);
x_38 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_38, 0, x_35);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_38;
goto lbl_34;
}
else
{
obj* x_39; obj* x_41; 
x_39 = lean::cnstr_get(x_4, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_4, 1);
lean::inc(x_41);
lean::dec(x_4);
x_0 = x_38;
x_1 = x_39;
x_2 = x_41;
goto lbl_3;
}
}
case 1:
{
obj* x_45; 
lean::dec(x_5);
x_45 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_45;
goto lbl_34;
}
else
{
obj* x_46; obj* x_48; 
x_46 = lean::cnstr_get(x_4, 0);
lean::inc(x_46);
x_48 = lean::cnstr_get(x_4, 1);
lean::inc(x_48);
lean::dec(x_4);
x_0 = x_45;
x_1 = x_46;
x_2 = x_48;
goto lbl_3;
}
}
case 2:
{
obj* x_52; 
lean::dec(x_5);
x_52 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_52;
goto lbl_34;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_4, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_4, 1);
lean::inc(x_55);
lean::dec(x_4);
x_0 = x_52;
x_1 = x_53;
x_2 = x_55;
goto lbl_3;
}
}
default:
{
obj* x_59; 
lean::dec(x_5);
x_59 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_59;
goto lbl_34;
}
else
{
obj* x_60; obj* x_62; 
x_60 = lean::cnstr_get(x_4, 0);
lean::inc(x_60);
x_62 = lean::cnstr_get(x_4, 1);
lean::inc(x_62);
lean::dec(x_4);
x_0 = x_59;
x_1 = x_60;
x_2 = x_62;
goto lbl_3;
}
}
}
lbl_34:
{
if (lean::obj_tag(x_4) == 0)
{
obj* x_66; obj* x_67; obj* x_69; 
lean::dec(x_4);
x_66 = lean::box(0);
x_67 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_67);
x_69 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_69, 0, x_33);
lean::cnstr_set(x_69, 1, x_67);
lean::cnstr_set(x_69, 2, x_66);
return x_69;
}
else
{
obj* x_70; 
x_70 = lean::cnstr_get(x_4, 0);
lean::inc(x_70);
lean::dec(x_4);
switch (lean::obj_tag(x_70)) {
case 0:
{
obj* x_73; obj* x_76; obj* x_77; obj* x_79; 
x_73 = lean::cnstr_get(x_70, 0);
lean::inc(x_73);
lean::dec(x_70);
x_76 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_76, 0, x_73);
x_77 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_77);
x_79 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_79, 0, x_33);
lean::cnstr_set(x_79, 1, x_77);
lean::cnstr_set(x_79, 2, x_76);
return x_79;
}
case 1:
{
obj* x_81; obj* x_82; obj* x_84; 
lean::dec(x_70);
x_81 = lean::box(0);
x_82 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_82);
x_84 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_84, 0, x_33);
lean::cnstr_set(x_84, 1, x_82);
lean::cnstr_set(x_84, 2, x_81);
return x_84;
}
case 2:
{
obj* x_86; obj* x_87; obj* x_89; 
lean::dec(x_70);
x_86 = lean::box(0);
x_87 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_87);
x_89 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_89, 0, x_33);
lean::cnstr_set(x_89, 1, x_87);
lean::cnstr_set(x_89, 2, x_86);
return x_89;
}
default:
{
obj* x_91; obj* x_92; obj* x_94; 
lean::dec(x_70);
x_91 = lean::box(0);
x_92 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_92);
x_94 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_94, 0, x_33);
lean::cnstr_set(x_94, 1, x_92);
lean::cnstr_set(x_94, 2, x_91);
return x_94;
}
}
}
}
}
}
}
obj* l_lean_parser_term_implicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_27; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_8);
x_10 = l_option_map___rarg(x_8, x_1);
x_11 = lean::box(3);
lean::inc(x_11);
x_13 = l_option_get__or__else___main___rarg(x_10, x_11);
x_14 = l_lean_parser_term_binder__content_has__view;
x_15 = lean::cnstr_get(x_14, 1);
lean::inc(x_15);
x_17 = lean::apply_1(x_15, x_3);
lean::inc(x_8);
x_19 = l_option_map___rarg(x_8, x_5);
x_20 = l_option_get__or__else___main___rarg(x_19, x_11);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_17);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_13);
lean::cnstr_set(x_24, 1, x_23);
x_25 = l_lean_parser_term_implicit__binder;
lean::inc(x_25);
x_27 = l_lean_parser_syntax_mk__node(x_25, x_24);
return x_27;
}
}
obj* _init_l_lean_parser_term_implicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_implicit__binder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_strict__implicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("strict_implicit_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_strict__implicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_10; 
lean::dec(x_8);
x_10 = l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_10);
return x_10;
}
else
{
obj* x_12; obj* x_15; 
x_12 = lean::cnstr_get(x_8, 0);
lean::inc(x_12);
lean::dec(x_8);
x_15 = lean::cnstr_get(x_12, 1);
lean::inc(x_15);
lean::dec(x_12);
if (lean::obj_tag(x_15) == 0)
{
obj* x_18; 
x_18 = lean::box(3);
x_5 = x_15;
x_6 = x_18;
goto lbl_7;
}
else
{
obj* x_19; obj* x_21; 
x_19 = lean::cnstr_get(x_15, 0);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_15, 1);
lean::inc(x_21);
lean::dec(x_15);
x_5 = x_21;
x_6 = x_19;
goto lbl_7;
}
}
lbl_4:
{
obj* x_24; obj* x_25; obj* x_27; 
x_24 = l_lean_parser_term_binder__content_has__view;
x_25 = lean::cnstr_get(x_24, 0);
lean::inc(x_25);
x_27 = lean::apply_1(x_25, x_2);
if (lean::obj_tag(x_3) == 0)
{
obj* x_29; obj* x_30; 
lean::dec(x_3);
x_29 = lean::box(0);
x_30 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_30, 0, x_1);
lean::cnstr_set(x_30, 1, x_27);
lean::cnstr_set(x_30, 2, x_29);
return x_30;
}
else
{
obj* x_31; 
x_31 = lean::cnstr_get(x_3, 0);
lean::inc(x_31);
lean::dec(x_3);
switch (lean::obj_tag(x_31)) {
case 0:
{
obj* x_34; obj* x_37; obj* x_38; 
x_34 = lean::cnstr_get(x_31, 0);
lean::inc(x_34);
lean::dec(x_31);
x_37 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_37, 0, x_34);
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_1);
lean::cnstr_set(x_38, 1, x_27);
lean::cnstr_set(x_38, 2, x_37);
return x_38;
}
case 1:
{
obj* x_40; obj* x_41; 
lean::dec(x_31);
x_40 = lean::box(0);
x_41 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_41, 0, x_1);
lean::cnstr_set(x_41, 1, x_27);
lean::cnstr_set(x_41, 2, x_40);
return x_41;
}
case 2:
{
obj* x_43; obj* x_44; 
lean::dec(x_31);
x_43 = lean::box(0);
x_44 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_44, 0, x_1);
lean::cnstr_set(x_44, 1, x_27);
lean::cnstr_set(x_44, 2, x_43);
return x_44;
}
default:
{
obj* x_46; obj* x_47; 
lean::dec(x_31);
x_46 = lean::box(0);
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_1);
lean::cnstr_set(x_47, 1, x_27);
lean::cnstr_set(x_47, 2, x_46);
return x_47;
}
}
}
}
lbl_7:
{
obj* x_48; 
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_50; obj* x_53; 
x_50 = lean::cnstr_get(x_6, 0);
lean::inc(x_50);
lean::dec(x_6);
x_53 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_53, 0, x_50);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_53;
goto lbl_49;
}
else
{
obj* x_54; obj* x_56; 
x_54 = lean::cnstr_get(x_5, 0);
lean::inc(x_54);
x_56 = lean::cnstr_get(x_5, 1);
lean::inc(x_56);
lean::dec(x_5);
x_1 = x_53;
x_2 = x_54;
x_3 = x_56;
goto lbl_4;
}
}
case 1:
{
obj* x_60; 
lean::dec(x_6);
x_60 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_60;
goto lbl_49;
}
else
{
obj* x_61; obj* x_63; 
x_61 = lean::cnstr_get(x_5, 0);
lean::inc(x_61);
x_63 = lean::cnstr_get(x_5, 1);
lean::inc(x_63);
lean::dec(x_5);
x_1 = x_60;
x_2 = x_61;
x_3 = x_63;
goto lbl_4;
}
}
case 2:
{
obj* x_67; 
lean::dec(x_6);
x_67 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_67;
goto lbl_49;
}
else
{
obj* x_68; obj* x_70; 
x_68 = lean::cnstr_get(x_5, 0);
lean::inc(x_68);
x_70 = lean::cnstr_get(x_5, 1);
lean::inc(x_70);
lean::dec(x_5);
x_1 = x_67;
x_2 = x_68;
x_3 = x_70;
goto lbl_4;
}
}
default:
{
obj* x_74; 
lean::dec(x_6);
x_74 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_74;
goto lbl_49;
}
else
{
obj* x_75; obj* x_77; 
x_75 = lean::cnstr_get(x_5, 0);
lean::inc(x_75);
x_77 = lean::cnstr_get(x_5, 1);
lean::inc(x_77);
lean::dec(x_5);
x_1 = x_74;
x_2 = x_75;
x_3 = x_77;
goto lbl_4;
}
}
}
lbl_49:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_81; obj* x_82; obj* x_84; 
lean::dec(x_5);
x_81 = lean::box(0);
x_82 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_82);
x_84 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_84, 0, x_48);
lean::cnstr_set(x_84, 1, x_82);
lean::cnstr_set(x_84, 2, x_81);
return x_84;
}
else
{
obj* x_85; 
x_85 = lean::cnstr_get(x_5, 0);
lean::inc(x_85);
lean::dec(x_5);
switch (lean::obj_tag(x_85)) {
case 0:
{
obj* x_88; obj* x_91; obj* x_92; obj* x_94; 
x_88 = lean::cnstr_get(x_85, 0);
lean::inc(x_88);
lean::dec(x_85);
x_91 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_91, 0, x_88);
x_92 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_92);
x_94 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_94, 0, x_48);
lean::cnstr_set(x_94, 1, x_92);
lean::cnstr_set(x_94, 2, x_91);
return x_94;
}
case 1:
{
obj* x_96; obj* x_97; obj* x_99; 
lean::dec(x_85);
x_96 = lean::box(0);
x_97 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_97);
x_99 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_99, 0, x_48);
lean::cnstr_set(x_99, 1, x_97);
lean::cnstr_set(x_99, 2, x_96);
return x_99;
}
case 2:
{
obj* x_101; obj* x_102; obj* x_104; 
lean::dec(x_85);
x_101 = lean::box(0);
x_102 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_102);
x_104 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_104, 0, x_48);
lean::cnstr_set(x_104, 1, x_102);
lean::cnstr_set(x_104, 2, x_101);
return x_104;
}
default:
{
obj* x_106; obj* x_107; obj* x_109; 
lean::dec(x_85);
x_106 = lean::box(0);
x_107 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_107);
x_109 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_109, 0, x_48);
lean::cnstr_set(x_109, 1, x_107);
lean::cnstr_set(x_109, 2, x_106);
return x_109;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_7 = lean::box(0);
x_8 = lean::box(3);
x_4 = x_7;
x_5 = x_8;
goto lbl_6;
lbl_3:
{
obj* x_9; obj* x_10; obj* x_12; 
x_9 = l_lean_parser_term_binder__content_has__view;
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
x_12 = lean::apply_1(x_10, x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_14; obj* x_15; 
lean::dec(x_2);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_15, 0, x_0);
lean::cnstr_set(x_15, 1, x_12);
lean::cnstr_set(x_15, 2, x_14);
return x_15;
}
else
{
obj* x_16; 
x_16 = lean::cnstr_get(x_2, 0);
lean::inc(x_16);
lean::dec(x_2);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_19; obj* x_22; obj* x_23; 
x_19 = lean::cnstr_get(x_16, 0);
lean::inc(x_19);
lean::dec(x_16);
x_22 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
x_23 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_23, 0, x_0);
lean::cnstr_set(x_23, 1, x_12);
lean::cnstr_set(x_23, 2, x_22);
return x_23;
}
case 1:
{
obj* x_25; obj* x_26; 
lean::dec(x_16);
x_25 = lean::box(0);
x_26 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_26, 0, x_0);
lean::cnstr_set(x_26, 1, x_12);
lean::cnstr_set(x_26, 2, x_25);
return x_26;
}
case 2:
{
obj* x_28; obj* x_29; 
lean::dec(x_16);
x_28 = lean::box(0);
x_29 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_29, 0, x_0);
lean::cnstr_set(x_29, 1, x_12);
lean::cnstr_set(x_29, 2, x_28);
return x_29;
}
default:
{
obj* x_31; obj* x_32; 
lean::dec(x_16);
x_31 = lean::box(0);
x_32 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_32, 0, x_0);
lean::cnstr_set(x_32, 1, x_12);
lean::cnstr_set(x_32, 2, x_31);
return x_32;
}
}
}
}
lbl_6:
{
obj* x_33; 
switch (lean::obj_tag(x_5)) {
case 0:
{
obj* x_35; obj* x_38; 
x_35 = lean::cnstr_get(x_5, 0);
lean::inc(x_35);
lean::dec(x_5);
x_38 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_38, 0, x_35);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_38;
goto lbl_34;
}
else
{
obj* x_39; obj* x_41; 
x_39 = lean::cnstr_get(x_4, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_4, 1);
lean::inc(x_41);
lean::dec(x_4);
x_0 = x_38;
x_1 = x_39;
x_2 = x_41;
goto lbl_3;
}
}
case 1:
{
obj* x_45; 
lean::dec(x_5);
x_45 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_45;
goto lbl_34;
}
else
{
obj* x_46; obj* x_48; 
x_46 = lean::cnstr_get(x_4, 0);
lean::inc(x_46);
x_48 = lean::cnstr_get(x_4, 1);
lean::inc(x_48);
lean::dec(x_4);
x_0 = x_45;
x_1 = x_46;
x_2 = x_48;
goto lbl_3;
}
}
case 2:
{
obj* x_52; 
lean::dec(x_5);
x_52 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_52;
goto lbl_34;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_4, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_4, 1);
lean::inc(x_55);
lean::dec(x_4);
x_0 = x_52;
x_1 = x_53;
x_2 = x_55;
goto lbl_3;
}
}
default:
{
obj* x_59; 
lean::dec(x_5);
x_59 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_59;
goto lbl_34;
}
else
{
obj* x_60; obj* x_62; 
x_60 = lean::cnstr_get(x_4, 0);
lean::inc(x_60);
x_62 = lean::cnstr_get(x_4, 1);
lean::inc(x_62);
lean::dec(x_4);
x_0 = x_59;
x_1 = x_60;
x_2 = x_62;
goto lbl_3;
}
}
}
lbl_34:
{
if (lean::obj_tag(x_4) == 0)
{
obj* x_66; obj* x_67; obj* x_69; 
lean::dec(x_4);
x_66 = lean::box(0);
x_67 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_67);
x_69 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_69, 0, x_33);
lean::cnstr_set(x_69, 1, x_67);
lean::cnstr_set(x_69, 2, x_66);
return x_69;
}
else
{
obj* x_70; 
x_70 = lean::cnstr_get(x_4, 0);
lean::inc(x_70);
lean::dec(x_4);
switch (lean::obj_tag(x_70)) {
case 0:
{
obj* x_73; obj* x_76; obj* x_77; obj* x_79; 
x_73 = lean::cnstr_get(x_70, 0);
lean::inc(x_73);
lean::dec(x_70);
x_76 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_76, 0, x_73);
x_77 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_77);
x_79 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_79, 0, x_33);
lean::cnstr_set(x_79, 1, x_77);
lean::cnstr_set(x_79, 2, x_76);
return x_79;
}
case 1:
{
obj* x_81; obj* x_82; obj* x_84; 
lean::dec(x_70);
x_81 = lean::box(0);
x_82 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_82);
x_84 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_84, 0, x_33);
lean::cnstr_set(x_84, 1, x_82);
lean::cnstr_set(x_84, 2, x_81);
return x_84;
}
case 2:
{
obj* x_86; obj* x_87; obj* x_89; 
lean::dec(x_70);
x_86 = lean::box(0);
x_87 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_87);
x_89 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_89, 0, x_33);
lean::cnstr_set(x_89, 1, x_87);
lean::cnstr_set(x_89, 2, x_86);
return x_89;
}
default:
{
obj* x_91; obj* x_92; obj* x_94; 
lean::dec(x_70);
x_91 = lean::box(0);
x_92 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_92);
x_94 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_94, 0, x_33);
lean::cnstr_set(x_94, 1, x_92);
lean::cnstr_set(x_94, 2, x_91);
return x_94;
}
}
}
}
}
}
}
obj* l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_27; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_8);
x_10 = l_option_map___rarg(x_8, x_1);
x_11 = lean::box(3);
lean::inc(x_11);
x_13 = l_option_get__or__else___main___rarg(x_10, x_11);
x_14 = l_lean_parser_term_binder__content_has__view;
x_15 = lean::cnstr_get(x_14, 1);
lean::inc(x_15);
x_17 = lean::apply_1(x_15, x_3);
lean::inc(x_8);
x_19 = l_option_map___rarg(x_8, x_5);
x_20 = l_option_get__or__else___main___rarg(x_19, x_11);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_17);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_13);
lean::cnstr_set(x_24, 1, x_23);
x_25 = l_lean_parser_term_strict__implicit__binder;
lean::inc(x_25);
x_27 = l_lean_parser_syntax_mk__node(x_25, x_24);
return x_27;
}
}
obj* _init_l_lean_parser_term_strict__implicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_strict__implicit__binder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_inst__implicit__named__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("inst_implicit_named_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_inst__implicit__named__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__2;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_23; 
lean::dec(x_2);
x_23 = lean::box(0);
x_20 = x_23;
goto lbl_21;
}
case 1:
{
obj* x_24; 
x_24 = lean::cnstr_get(x_2, 0);
lean::inc(x_24);
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_27; 
x_27 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_29; obj* x_30; 
lean::dec(x_1);
x_29 = lean::box(3);
x_30 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_30, 0, x_24);
lean::cnstr_set(x_30, 1, x_27);
lean::cnstr_set(x_30, 2, x_29);
return x_30;
}
else
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
lean::dec(x_1);
x_34 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_34, 0, x_24);
lean::cnstr_set(x_34, 1, x_27);
lean::cnstr_set(x_34, 2, x_31);
return x_34;
}
}
else
{
obj* x_35; obj* x_37; 
x_35 = lean::cnstr_get(x_1, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_1, 1);
lean::inc(x_37);
lean::dec(x_1);
switch (lean::obj_tag(x_35)) {
case 0:
{
obj* x_40; obj* x_43; 
x_40 = lean::cnstr_get(x_35, 0);
lean::inc(x_40);
lean::dec(x_35);
x_43 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_43, 0, x_40);
if (lean::obj_tag(x_37) == 0)
{
obj* x_45; obj* x_46; 
lean::dec(x_37);
x_45 = lean::box(3);
x_46 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_46, 0, x_24);
lean::cnstr_set(x_46, 1, x_43);
lean::cnstr_set(x_46, 2, x_45);
return x_46;
}
else
{
obj* x_47; obj* x_50; 
x_47 = lean::cnstr_get(x_37, 0);
lean::inc(x_47);
lean::dec(x_37);
x_50 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_50, 0, x_24);
lean::cnstr_set(x_50, 1, x_43);
lean::cnstr_set(x_50, 2, x_47);
return x_50;
}
}
case 1:
{
obj* x_52; 
lean::dec(x_35);
x_52 = lean::box(0);
if (lean::obj_tag(x_37) == 0)
{
obj* x_54; obj* x_55; 
lean::dec(x_37);
x_54 = lean::box(3);
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_24);
lean::cnstr_set(x_55, 1, x_52);
lean::cnstr_set(x_55, 2, x_54);
return x_55;
}
else
{
obj* x_56; obj* x_59; 
x_56 = lean::cnstr_get(x_37, 0);
lean::inc(x_56);
lean::dec(x_37);
x_59 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_59, 0, x_24);
lean::cnstr_set(x_59, 1, x_52);
lean::cnstr_set(x_59, 2, x_56);
return x_59;
}
}
case 2:
{
obj* x_61; 
lean::dec(x_35);
x_61 = lean::box(0);
if (lean::obj_tag(x_37) == 0)
{
obj* x_63; obj* x_64; 
lean::dec(x_37);
x_63 = lean::box(3);
x_64 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_64, 0, x_24);
lean::cnstr_set(x_64, 1, x_61);
lean::cnstr_set(x_64, 2, x_63);
return x_64;
}
else
{
obj* x_65; obj* x_68; 
x_65 = lean::cnstr_get(x_37, 0);
lean::inc(x_65);
lean::dec(x_37);
x_68 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_68, 0, x_24);
lean::cnstr_set(x_68, 1, x_61);
lean::cnstr_set(x_68, 2, x_65);
return x_68;
}
}
default:
{
obj* x_70; 
lean::dec(x_35);
x_70 = lean::box(0);
if (lean::obj_tag(x_37) == 0)
{
obj* x_72; obj* x_73; 
lean::dec(x_37);
x_72 = lean::box(3);
x_73 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_73, 0, x_24);
lean::cnstr_set(x_73, 1, x_70);
lean::cnstr_set(x_73, 2, x_72);
return x_73;
}
else
{
obj* x_74; obj* x_77; 
x_74 = lean::cnstr_get(x_37, 0);
lean::inc(x_74);
lean::dec(x_37);
x_77 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_77, 0, x_24);
lean::cnstr_set(x_77, 1, x_70);
lean::cnstr_set(x_77, 2, x_74);
return x_77;
}
}
}
}
}
case 2:
{
obj* x_79; 
lean::dec(x_2);
x_79 = lean::box(0);
x_20 = x_79;
goto lbl_21;
}
default:
{
obj* x_81; 
lean::dec(x_2);
x_81 = lean::box(0);
x_20 = x_81;
goto lbl_21;
}
}
lbl_21:
{
obj* x_83; 
lean::dec(x_20);
x_83 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_86; 
lean::dec(x_83);
lean::dec(x_1);
x_86 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_86);
return x_86;
}
else
{
obj* x_88; obj* x_91; obj* x_93; 
x_88 = lean::cnstr_get(x_1, 0);
lean::inc(x_88);
lean::dec(x_1);
x_91 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_91);
x_93 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_93, 0, x_91);
lean::cnstr_set(x_93, 1, x_83);
lean::cnstr_set(x_93, 2, x_88);
return x_93;
}
}
else
{
obj* x_94; obj* x_96; 
x_94 = lean::cnstr_get(x_1, 0);
lean::inc(x_94);
x_96 = lean::cnstr_get(x_1, 1);
lean::inc(x_96);
lean::dec(x_1);
switch (lean::obj_tag(x_94)) {
case 0:
{
obj* x_100; obj* x_103; 
lean::dec(x_83);
x_100 = lean::cnstr_get(x_94, 0);
lean::inc(x_100);
lean::dec(x_94);
x_103 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_103, 0, x_100);
if (lean::obj_tag(x_96) == 0)
{
obj* x_105; obj* x_106; obj* x_108; 
lean::dec(x_96);
x_105 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_106 = lean::box(3);
lean::inc(x_105);
x_108 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_108, 0, x_105);
lean::cnstr_set(x_108, 1, x_103);
lean::cnstr_set(x_108, 2, x_106);
return x_108;
}
else
{
obj* x_109; obj* x_112; obj* x_114; 
x_109 = lean::cnstr_get(x_96, 0);
lean::inc(x_109);
lean::dec(x_96);
x_112 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_112);
x_114 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_114, 0, x_112);
lean::cnstr_set(x_114, 1, x_103);
lean::cnstr_set(x_114, 2, x_109);
return x_114;
}
}
case 1:
{
lean::dec(x_94);
if (lean::obj_tag(x_96) == 0)
{
obj* x_118; 
lean::dec(x_83);
lean::dec(x_96);
x_118 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_118);
return x_118;
}
else
{
obj* x_120; obj* x_123; obj* x_125; 
x_120 = lean::cnstr_get(x_96, 0);
lean::inc(x_120);
lean::dec(x_96);
x_123 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_123);
x_125 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_125, 0, x_123);
lean::cnstr_set(x_125, 1, x_83);
lean::cnstr_set(x_125, 2, x_120);
return x_125;
}
}
case 2:
{
lean::dec(x_94);
if (lean::obj_tag(x_96) == 0)
{
obj* x_129; 
lean::dec(x_83);
lean::dec(x_96);
x_129 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_129);
return x_129;
}
else
{
obj* x_131; obj* x_134; obj* x_136; 
x_131 = lean::cnstr_get(x_96, 0);
lean::inc(x_131);
lean::dec(x_96);
x_134 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_134);
x_136 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_136, 0, x_134);
lean::cnstr_set(x_136, 1, x_83);
lean::cnstr_set(x_136, 2, x_131);
return x_136;
}
}
default:
{
lean::dec(x_94);
if (lean::obj_tag(x_96) == 0)
{
obj* x_140; 
lean::dec(x_83);
lean::dec(x_96);
x_140 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_140);
return x_140;
}
else
{
obj* x_142; obj* x_145; obj* x_147; 
x_142 = lean::cnstr_get(x_96, 0);
lean::inc(x_142);
lean::dec(x_96);
x_145 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_145);
x_147 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_147, 0, x_145);
lean::cnstr_set(x_147, 1, x_83);
lean::cnstr_set(x_147, 2, x_142);
return x_147;
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_5; obj* x_9; obj* x_10; obj* x_11; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
lean::inc(x_0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_1);
lean::inc(x_0);
lean::inc(x_0);
lean::inc(x_0);
x_9 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_9, 0, x_0);
lean::cnstr_set(x_9, 1, x_3);
lean::cnstr_set(x_9, 2, x_5);
lean::cnstr_set(x_9, 3, x_0);
lean::cnstr_set(x_9, 4, x_0);
x_10 = lean::box(3);
x_11 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_11, 0, x_9);
lean::cnstr_set(x_11, 1, x_0);
lean::cnstr_set(x_11, 2, x_10);
return x_11;
}
}
obj* _init_l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_8; 
lean::dec(x_1);
x_8 = lean::box(0);
x_5 = x_8;
goto lbl_6;
}
case 1:
{
obj* x_9; 
x_9 = lean::cnstr_get(x_1, 0);
lean::inc(x_9);
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_12; 
x_12 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_14; obj* x_15; 
lean::dec(x_0);
x_14 = lean::box(3);
x_15 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_15, 0, x_9);
lean::cnstr_set(x_15, 1, x_12);
lean::cnstr_set(x_15, 2, x_14);
return x_15;
}
else
{
obj* x_16; obj* x_19; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_19, 0, x_9);
lean::cnstr_set(x_19, 1, x_12);
lean::cnstr_set(x_19, 2, x_16);
return x_19;
}
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_0, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_0, 1);
lean::inc(x_22);
lean::dec(x_0);
switch (lean::obj_tag(x_20)) {
case 0:
{
obj* x_25; obj* x_28; 
x_25 = lean::cnstr_get(x_20, 0);
lean::inc(x_25);
lean::dec(x_20);
x_28 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_28, 0, x_25);
if (lean::obj_tag(x_22) == 0)
{
obj* x_30; obj* x_31; 
lean::dec(x_22);
x_30 = lean::box(3);
x_31 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_31, 0, x_9);
lean::cnstr_set(x_31, 1, x_28);
lean::cnstr_set(x_31, 2, x_30);
return x_31;
}
else
{
obj* x_32; obj* x_35; 
x_32 = lean::cnstr_get(x_22, 0);
lean::inc(x_32);
lean::dec(x_22);
x_35 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_35, 0, x_9);
lean::cnstr_set(x_35, 1, x_28);
lean::cnstr_set(x_35, 2, x_32);
return x_35;
}
}
case 1:
{
obj* x_37; 
lean::dec(x_20);
x_37 = lean::box(0);
if (lean::obj_tag(x_22) == 0)
{
obj* x_39; obj* x_40; 
lean::dec(x_22);
x_39 = lean::box(3);
x_40 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_40, 0, x_9);
lean::cnstr_set(x_40, 1, x_37);
lean::cnstr_set(x_40, 2, x_39);
return x_40;
}
else
{
obj* x_41; obj* x_44; 
x_41 = lean::cnstr_get(x_22, 0);
lean::inc(x_41);
lean::dec(x_22);
x_44 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_44, 0, x_9);
lean::cnstr_set(x_44, 1, x_37);
lean::cnstr_set(x_44, 2, x_41);
return x_44;
}
}
case 2:
{
obj* x_46; 
lean::dec(x_20);
x_46 = lean::box(0);
if (lean::obj_tag(x_22) == 0)
{
obj* x_48; obj* x_49; 
lean::dec(x_22);
x_48 = lean::box(3);
x_49 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_49, 0, x_9);
lean::cnstr_set(x_49, 1, x_46);
lean::cnstr_set(x_49, 2, x_48);
return x_49;
}
else
{
obj* x_50; obj* x_53; 
x_50 = lean::cnstr_get(x_22, 0);
lean::inc(x_50);
lean::dec(x_22);
x_53 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_53, 0, x_9);
lean::cnstr_set(x_53, 1, x_46);
lean::cnstr_set(x_53, 2, x_50);
return x_53;
}
}
default:
{
obj* x_55; 
lean::dec(x_20);
x_55 = lean::box(0);
if (lean::obj_tag(x_22) == 0)
{
obj* x_57; obj* x_58; 
lean::dec(x_22);
x_57 = lean::box(3);
x_58 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_58, 0, x_9);
lean::cnstr_set(x_58, 1, x_55);
lean::cnstr_set(x_58, 2, x_57);
return x_58;
}
else
{
obj* x_59; obj* x_62; 
x_59 = lean::cnstr_get(x_22, 0);
lean::inc(x_59);
lean::dec(x_22);
x_62 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_62, 0, x_9);
lean::cnstr_set(x_62, 1, x_55);
lean::cnstr_set(x_62, 2, x_59);
return x_62;
}
}
}
}
}
case 2:
{
obj* x_64; 
lean::dec(x_1);
x_64 = lean::box(0);
x_5 = x_64;
goto lbl_6;
}
default:
{
obj* x_66; 
lean::dec(x_1);
x_66 = lean::box(0);
x_5 = x_66;
goto lbl_6;
}
}
lbl_6:
{
obj* x_68; 
lean::dec(x_5);
x_68 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_71; 
lean::dec(x_68);
lean::dec(x_0);
x_71 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_71);
return x_71;
}
else
{
obj* x_73; obj* x_76; obj* x_78; 
x_73 = lean::cnstr_get(x_0, 0);
lean::inc(x_73);
lean::dec(x_0);
x_76 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_76);
x_78 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_78, 0, x_76);
lean::cnstr_set(x_78, 1, x_68);
lean::cnstr_set(x_78, 2, x_73);
return x_78;
}
}
else
{
obj* x_79; obj* x_81; 
x_79 = lean::cnstr_get(x_0, 0);
lean::inc(x_79);
x_81 = lean::cnstr_get(x_0, 1);
lean::inc(x_81);
lean::dec(x_0);
switch (lean::obj_tag(x_79)) {
case 0:
{
obj* x_85; obj* x_88; 
lean::dec(x_68);
x_85 = lean::cnstr_get(x_79, 0);
lean::inc(x_85);
lean::dec(x_79);
x_88 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_88, 0, x_85);
if (lean::obj_tag(x_81) == 0)
{
obj* x_90; obj* x_91; obj* x_93; 
lean::dec(x_81);
x_90 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_91 = lean::box(3);
lean::inc(x_90);
x_93 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_93, 0, x_90);
lean::cnstr_set(x_93, 1, x_88);
lean::cnstr_set(x_93, 2, x_91);
return x_93;
}
else
{
obj* x_94; obj* x_97; obj* x_99; 
x_94 = lean::cnstr_get(x_81, 0);
lean::inc(x_94);
lean::dec(x_81);
x_97 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_97);
x_99 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_99, 0, x_97);
lean::cnstr_set(x_99, 1, x_88);
lean::cnstr_set(x_99, 2, x_94);
return x_99;
}
}
case 1:
{
lean::dec(x_79);
if (lean::obj_tag(x_81) == 0)
{
obj* x_103; 
lean::dec(x_81);
lean::dec(x_68);
x_103 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_103);
return x_103;
}
else
{
obj* x_105; obj* x_108; obj* x_110; 
x_105 = lean::cnstr_get(x_81, 0);
lean::inc(x_105);
lean::dec(x_81);
x_108 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_108);
x_110 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_110, 0, x_108);
lean::cnstr_set(x_110, 1, x_68);
lean::cnstr_set(x_110, 2, x_105);
return x_110;
}
}
case 2:
{
lean::dec(x_79);
if (lean::obj_tag(x_81) == 0)
{
obj* x_114; 
lean::dec(x_81);
lean::dec(x_68);
x_114 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_114);
return x_114;
}
else
{
obj* x_116; obj* x_119; obj* x_121; 
x_116 = lean::cnstr_get(x_81, 0);
lean::inc(x_116);
lean::dec(x_81);
x_119 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_119);
x_121 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_121, 0, x_119);
lean::cnstr_set(x_121, 1, x_68);
lean::cnstr_set(x_121, 2, x_116);
return x_121;
}
}
default:
{
lean::dec(x_79);
if (lean::obj_tag(x_81) == 0)
{
obj* x_125; 
lean::dec(x_81);
lean::dec(x_68);
x_125 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_125);
return x_125;
}
else
{
obj* x_127; obj* x_130; obj* x_132; 
x_127 = lean::cnstr_get(x_81, 0);
lean::inc(x_127);
lean::dec(x_81);
x_130 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_130);
x_132 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_132, 0, x_130);
lean::cnstr_set(x_132, 1, x_68);
lean::cnstr_set(x_132, 2, x_127);
return x_132;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_20; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_1);
x_9 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_9);
x_11 = l_option_map___rarg(x_9, x_3);
x_12 = lean::box(3);
x_13 = l_option_get__or__else___main___rarg(x_11, x_12);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_5);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_13);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_8);
lean::cnstr_set(x_17, 1, x_16);
x_18 = l_lean_parser_term_inst__implicit__named__binder;
lean::inc(x_18);
x_20 = l_lean_parser_syntax_mk__node(x_18, x_17);
return x_20;
}
}
obj* _init_l_lean_parser_term_inst__implicit__named__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_inst__implicit__anonymous__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("inst_implicit_anonymous_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = lean::box(3);
return x_3;
}
else
{
obj* x_4; obj* x_7; 
x_4 = lean::cnstr_get(x_1, 0);
lean::inc(x_4);
lean::dec(x_1);
x_7 = lean::cnstr_get(x_4, 1);
lean::inc(x_7);
lean::dec(x_4);
if (lean::obj_tag(x_7) == 0)
{
obj* x_11; 
lean::dec(x_7);
x_11 = lean::box(3);
return x_11;
}
else
{
obj* x_12; 
x_12 = lean::cnstr_get(x_7, 0);
lean::inc(x_12);
lean::dec(x_7);
return x_12;
}
}
}
}
obj* l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; 
x_1 = lean::box(0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = l_lean_parser_term_inst__implicit__anonymous__binder;
lean::inc(x_3);
x_5 = l_lean_parser_syntax_mk__node(x_3, x_2);
return x_5;
}
}
obj* _init_l_lean_parser_term_inst__implicit__anonymous__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder__content() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("inst_implicit_binder_content");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder__content_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; obj* x_91; obj* x_93; obj* x_94; 
lean::dec(x_86);
x_90 = l_lean_parser_term_inst__implicit__anonymous__binder_has__view;
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
x_93 = lean::apply_1(x_91, x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
else
{
obj* x_96; obj* x_97; obj* x_99; obj* x_100; 
lean::dec(x_86);
x_96 = l_lean_parser_term_inst__implicit__named__binder_has__view;
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
x_99 = lean::apply_1(x_97, x_1);
x_100 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_100, 0, x_99);
return x_100;
}
}
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; obj* x_11; obj* x_13; obj* x_14; 
lean::dec(x_6);
x_10 = l_lean_parser_term_inst__implicit__anonymous__binder_has__view;
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_0);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
else
{
obj* x_16; obj* x_17; obj* x_19; obj* x_20; 
lean::dec(x_6);
x_16 = l_lean_parser_term_inst__implicit__named__binder_has__view;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::apply_1(x_17, x_0);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("inst_implicit_binder_content");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_inst__implicit__named__binder_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
x_8 = lean::apply_1(x_6, x_2);
lean::inc(x_1);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_lean_parser_term_inst__implicit__binder__content;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_33; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
x_21 = l_lean_parser_term_inst__implicit__anonymous__binder_has__view;
x_22 = lean::cnstr_get(x_21, 1);
lean::inc(x_22);
x_24 = lean::apply_1(x_22, x_18);
lean::inc(x_1);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_27);
x_29 = l_lean_parser_syntax_mk__node(x_27, x_26);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_1);
x_31 = l_lean_parser_term_inst__implicit__binder__content;
lean::inc(x_31);
x_33 = l_lean_parser_syntax_mk__node(x_31, x_30);
return x_33;
}
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder__content_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("inst_implicit_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_10; 
lean::dec(x_8);
x_10 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__2;
lean::inc(x_10);
return x_10;
}
else
{
obj* x_12; obj* x_15; 
x_12 = lean::cnstr_get(x_8, 0);
lean::inc(x_12);
lean::dec(x_8);
x_15 = lean::cnstr_get(x_12, 1);
lean::inc(x_15);
lean::dec(x_12);
if (lean::obj_tag(x_15) == 0)
{
obj* x_18; 
x_18 = lean::box(3);
x_5 = x_15;
x_6 = x_18;
goto lbl_7;
}
else
{
obj* x_19; obj* x_21; 
x_19 = lean::cnstr_get(x_15, 0);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_15, 1);
lean::inc(x_21);
lean::dec(x_15);
x_5 = x_21;
x_6 = x_19;
goto lbl_7;
}
}
lbl_4:
{
obj* x_24; obj* x_25; obj* x_27; 
x_24 = l_lean_parser_term_inst__implicit__binder__content_has__view;
x_25 = lean::cnstr_get(x_24, 0);
lean::inc(x_25);
x_27 = lean::apply_1(x_25, x_2);
if (lean::obj_tag(x_3) == 0)
{
obj* x_29; obj* x_30; 
lean::dec(x_3);
x_29 = lean::box(0);
x_30 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_30, 0, x_1);
lean::cnstr_set(x_30, 1, x_27);
lean::cnstr_set(x_30, 2, x_29);
return x_30;
}
else
{
obj* x_31; 
x_31 = lean::cnstr_get(x_3, 0);
lean::inc(x_31);
lean::dec(x_3);
switch (lean::obj_tag(x_31)) {
case 0:
{
obj* x_34; obj* x_37; obj* x_38; 
x_34 = lean::cnstr_get(x_31, 0);
lean::inc(x_34);
lean::dec(x_31);
x_37 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_37, 0, x_34);
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_1);
lean::cnstr_set(x_38, 1, x_27);
lean::cnstr_set(x_38, 2, x_37);
return x_38;
}
case 1:
{
obj* x_40; obj* x_41; 
lean::dec(x_31);
x_40 = lean::box(0);
x_41 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_41, 0, x_1);
lean::cnstr_set(x_41, 1, x_27);
lean::cnstr_set(x_41, 2, x_40);
return x_41;
}
case 2:
{
obj* x_43; obj* x_44; 
lean::dec(x_31);
x_43 = lean::box(0);
x_44 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_44, 0, x_1);
lean::cnstr_set(x_44, 1, x_27);
lean::cnstr_set(x_44, 2, x_43);
return x_44;
}
default:
{
obj* x_46; obj* x_47; 
lean::dec(x_31);
x_46 = lean::box(0);
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_1);
lean::cnstr_set(x_47, 1, x_27);
lean::cnstr_set(x_47, 2, x_46);
return x_47;
}
}
}
}
lbl_7:
{
obj* x_48; 
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_50; obj* x_53; 
x_50 = lean::cnstr_get(x_6, 0);
lean::inc(x_50);
lean::dec(x_6);
x_53 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_53, 0, x_50);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_53;
goto lbl_49;
}
else
{
obj* x_54; obj* x_56; 
x_54 = lean::cnstr_get(x_5, 0);
lean::inc(x_54);
x_56 = lean::cnstr_get(x_5, 1);
lean::inc(x_56);
lean::dec(x_5);
x_1 = x_53;
x_2 = x_54;
x_3 = x_56;
goto lbl_4;
}
}
case 1:
{
obj* x_60; 
lean::dec(x_6);
x_60 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_60;
goto lbl_49;
}
else
{
obj* x_61; obj* x_63; 
x_61 = lean::cnstr_get(x_5, 0);
lean::inc(x_61);
x_63 = lean::cnstr_get(x_5, 1);
lean::inc(x_63);
lean::dec(x_5);
x_1 = x_60;
x_2 = x_61;
x_3 = x_63;
goto lbl_4;
}
}
case 2:
{
obj* x_67; 
lean::dec(x_6);
x_67 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_67;
goto lbl_49;
}
else
{
obj* x_68; obj* x_70; 
x_68 = lean::cnstr_get(x_5, 0);
lean::inc(x_68);
x_70 = lean::cnstr_get(x_5, 1);
lean::inc(x_70);
lean::dec(x_5);
x_1 = x_67;
x_2 = x_68;
x_3 = x_70;
goto lbl_4;
}
}
default:
{
obj* x_74; 
lean::dec(x_6);
x_74 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_48 = x_74;
goto lbl_49;
}
else
{
obj* x_75; obj* x_77; 
x_75 = lean::cnstr_get(x_5, 0);
lean::inc(x_75);
x_77 = lean::cnstr_get(x_5, 1);
lean::inc(x_77);
lean::dec(x_5);
x_1 = x_74;
x_2 = x_75;
x_3 = x_77;
goto lbl_4;
}
}
}
lbl_49:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_81; obj* x_82; obj* x_84; 
lean::dec(x_5);
x_81 = lean::box(0);
x_82 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_82);
x_84 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_84, 0, x_48);
lean::cnstr_set(x_84, 1, x_82);
lean::cnstr_set(x_84, 2, x_81);
return x_84;
}
else
{
obj* x_85; 
x_85 = lean::cnstr_get(x_5, 0);
lean::inc(x_85);
lean::dec(x_5);
switch (lean::obj_tag(x_85)) {
case 0:
{
obj* x_88; obj* x_91; obj* x_92; obj* x_94; 
x_88 = lean::cnstr_get(x_85, 0);
lean::inc(x_88);
lean::dec(x_85);
x_91 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_91, 0, x_88);
x_92 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_92);
x_94 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_94, 0, x_48);
lean::cnstr_set(x_94, 1, x_92);
lean::cnstr_set(x_94, 2, x_91);
return x_94;
}
case 1:
{
obj* x_96; obj* x_97; obj* x_99; 
lean::dec(x_85);
x_96 = lean::box(0);
x_97 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_97);
x_99 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_99, 0, x_48);
lean::cnstr_set(x_99, 1, x_97);
lean::cnstr_set(x_99, 2, x_96);
return x_99;
}
case 2:
{
obj* x_101; obj* x_102; obj* x_104; 
lean::dec(x_85);
x_101 = lean::box(0);
x_102 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_102);
x_104 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_104, 0, x_48);
lean::cnstr_set(x_104, 1, x_102);
lean::cnstr_set(x_104, 2, x_101);
return x_104;
}
default:
{
obj* x_106; obj* x_107; obj* x_109; 
lean::dec(x_85);
x_106 = lean::box(0);
x_107 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_107);
x_109 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_109, 0, x_48);
lean::cnstr_set(x_109, 1, x_107);
lean::cnstr_set(x_109, 2, x_106);
return x_109;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_0 = l_lean_parser_term_inst__implicit__binder__content_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
return x_4;
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_7 = lean::box(0);
x_8 = lean::box(3);
x_4 = x_7;
x_5 = x_8;
goto lbl_6;
lbl_3:
{
obj* x_9; obj* x_10; obj* x_12; 
x_9 = l_lean_parser_term_inst__implicit__binder__content_has__view;
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
x_12 = lean::apply_1(x_10, x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_14; obj* x_15; 
lean::dec(x_2);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_15, 0, x_0);
lean::cnstr_set(x_15, 1, x_12);
lean::cnstr_set(x_15, 2, x_14);
return x_15;
}
else
{
obj* x_16; 
x_16 = lean::cnstr_get(x_2, 0);
lean::inc(x_16);
lean::dec(x_2);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_19; obj* x_22; obj* x_23; 
x_19 = lean::cnstr_get(x_16, 0);
lean::inc(x_19);
lean::dec(x_16);
x_22 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
x_23 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_23, 0, x_0);
lean::cnstr_set(x_23, 1, x_12);
lean::cnstr_set(x_23, 2, x_22);
return x_23;
}
case 1:
{
obj* x_25; obj* x_26; 
lean::dec(x_16);
x_25 = lean::box(0);
x_26 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_26, 0, x_0);
lean::cnstr_set(x_26, 1, x_12);
lean::cnstr_set(x_26, 2, x_25);
return x_26;
}
case 2:
{
obj* x_28; obj* x_29; 
lean::dec(x_16);
x_28 = lean::box(0);
x_29 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_29, 0, x_0);
lean::cnstr_set(x_29, 1, x_12);
lean::cnstr_set(x_29, 2, x_28);
return x_29;
}
default:
{
obj* x_31; obj* x_32; 
lean::dec(x_16);
x_31 = lean::box(0);
x_32 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_32, 0, x_0);
lean::cnstr_set(x_32, 1, x_12);
lean::cnstr_set(x_32, 2, x_31);
return x_32;
}
}
}
}
lbl_6:
{
obj* x_33; 
switch (lean::obj_tag(x_5)) {
case 0:
{
obj* x_35; obj* x_38; 
x_35 = lean::cnstr_get(x_5, 0);
lean::inc(x_35);
lean::dec(x_5);
x_38 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_38, 0, x_35);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_38;
goto lbl_34;
}
else
{
obj* x_39; obj* x_41; 
x_39 = lean::cnstr_get(x_4, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_4, 1);
lean::inc(x_41);
lean::dec(x_4);
x_0 = x_38;
x_1 = x_39;
x_2 = x_41;
goto lbl_3;
}
}
case 1:
{
obj* x_45; 
lean::dec(x_5);
x_45 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_45;
goto lbl_34;
}
else
{
obj* x_46; obj* x_48; 
x_46 = lean::cnstr_get(x_4, 0);
lean::inc(x_46);
x_48 = lean::cnstr_get(x_4, 1);
lean::inc(x_48);
lean::dec(x_4);
x_0 = x_45;
x_1 = x_46;
x_2 = x_48;
goto lbl_3;
}
}
case 2:
{
obj* x_52; 
lean::dec(x_5);
x_52 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_52;
goto lbl_34;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_4, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_4, 1);
lean::inc(x_55);
lean::dec(x_4);
x_0 = x_52;
x_1 = x_53;
x_2 = x_55;
goto lbl_3;
}
}
default:
{
obj* x_59; 
lean::dec(x_5);
x_59 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_33 = x_59;
goto lbl_34;
}
else
{
obj* x_60; obj* x_62; 
x_60 = lean::cnstr_get(x_4, 0);
lean::inc(x_60);
x_62 = lean::cnstr_get(x_4, 1);
lean::inc(x_62);
lean::dec(x_4);
x_0 = x_59;
x_1 = x_60;
x_2 = x_62;
goto lbl_3;
}
}
}
lbl_34:
{
if (lean::obj_tag(x_4) == 0)
{
obj* x_66; obj* x_67; obj* x_69; 
lean::dec(x_4);
x_66 = lean::box(0);
x_67 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_67);
x_69 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_69, 0, x_33);
lean::cnstr_set(x_69, 1, x_67);
lean::cnstr_set(x_69, 2, x_66);
return x_69;
}
else
{
obj* x_70; 
x_70 = lean::cnstr_get(x_4, 0);
lean::inc(x_70);
lean::dec(x_4);
switch (lean::obj_tag(x_70)) {
case 0:
{
obj* x_73; obj* x_76; obj* x_77; obj* x_79; 
x_73 = lean::cnstr_get(x_70, 0);
lean::inc(x_73);
lean::dec(x_70);
x_76 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_76, 0, x_73);
x_77 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_77);
x_79 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_79, 0, x_33);
lean::cnstr_set(x_79, 1, x_77);
lean::cnstr_set(x_79, 2, x_76);
return x_79;
}
case 1:
{
obj* x_81; obj* x_82; obj* x_84; 
lean::dec(x_70);
x_81 = lean::box(0);
x_82 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_82);
x_84 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_84, 0, x_33);
lean::cnstr_set(x_84, 1, x_82);
lean::cnstr_set(x_84, 2, x_81);
return x_84;
}
case 2:
{
obj* x_86; obj* x_87; obj* x_89; 
lean::dec(x_70);
x_86 = lean::box(0);
x_87 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_87);
x_89 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_89, 0, x_33);
lean::cnstr_set(x_89, 1, x_87);
lean::cnstr_set(x_89, 2, x_86);
return x_89;
}
default:
{
obj* x_91; obj* x_92; obj* x_94; 
lean::dec(x_70);
x_91 = lean::box(0);
x_92 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_92);
x_94 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_94, 0, x_33);
lean::cnstr_set(x_94, 1, x_92);
lean::cnstr_set(x_94, 2, x_91);
return x_94;
}
}
}
}
}
}
}
obj* l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_27; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_8);
x_10 = l_option_map___rarg(x_8, x_1);
x_11 = lean::box(3);
lean::inc(x_11);
x_13 = l_option_get__or__else___main___rarg(x_10, x_11);
x_14 = l_lean_parser_term_inst__implicit__binder__content_has__view;
x_15 = lean::cnstr_get(x_14, 1);
lean::inc(x_15);
x_17 = lean::apply_1(x_15, x_3);
lean::inc(x_8);
x_19 = l_option_map___rarg(x_8, x_5);
x_20 = l_option_get__or__else___main___rarg(x_19, x_11);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_17);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_13);
lean::cnstr_set(x_24, 1, x_23);
x_25 = l_lean_parser_term_inst__implicit__binder;
lean::inc(x_25);
x_27 = l_lean_parser_syntax_mk__node(x_25, x_24);
return x_27;
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_inst__implicit__binder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_bracketed__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("bracketed_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_bracketed__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__2;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
if (lean::obj_tag(x_86) == 0)
{
obj* x_89; obj* x_90; 
lean::dec(x_86);
x_89 = lean::mk_nat_obj(1u);
x_90 = lean::nat_dec_eq(x_2, x_89);
lean::dec(x_89);
if (lean::obj_tag(x_90) == 0)
{
obj* x_93; obj* x_94; 
lean::dec(x_90);
x_93 = lean::mk_nat_obj(2u);
x_94 = lean::nat_dec_eq(x_2, x_93);
lean::dec(x_93);
if (lean::obj_tag(x_94) == 0)
{
obj* x_97; obj* x_98; 
lean::dec(x_94);
x_97 = lean::mk_nat_obj(3u);
x_98 = lean::nat_dec_eq(x_2, x_97);
lean::dec(x_97);
lean::dec(x_2);
if (lean::obj_tag(x_98) == 0)
{
obj* x_102; obj* x_103; obj* x_105; obj* x_106; 
lean::dec(x_98);
x_102 = l_lean_parser_term_anonymous__constructor_has__view;
x_103 = lean::cnstr_get(x_102, 0);
lean::inc(x_103);
x_105 = lean::apply_1(x_103, x_1);
x_106 = lean::alloc_cnstr(4, 1, 0);
lean::cnstr_set(x_106, 0, x_105);
return x_106;
}
else
{
obj* x_108; obj* x_109; obj* x_111; obj* x_112; 
lean::dec(x_98);
x_108 = l_lean_parser_term_inst__implicit__binder_has__view;
x_109 = lean::cnstr_get(x_108, 0);
lean::inc(x_109);
x_111 = lean::apply_1(x_109, x_1);
x_112 = lean::alloc_cnstr(3, 1, 0);
lean::cnstr_set(x_112, 0, x_111);
return x_112;
}
}
else
{
obj* x_115; obj* x_116; obj* x_118; obj* x_119; 
lean::dec(x_94);
lean::dec(x_2);
x_115 = l_lean_parser_term_strict__implicit__binder_has__view;
x_116 = lean::cnstr_get(x_115, 0);
lean::inc(x_116);
x_118 = lean::apply_1(x_116, x_1);
x_119 = lean::alloc_cnstr(2, 1, 0);
lean::cnstr_set(x_119, 0, x_118);
return x_119;
}
}
else
{
obj* x_122; obj* x_123; obj* x_125; obj* x_126; 
lean::dec(x_90);
lean::dec(x_2);
x_122 = l_lean_parser_term_implicit__binder_has__view;
x_123 = lean::cnstr_get(x_122, 0);
lean::inc(x_123);
x_125 = lean::apply_1(x_123, x_1);
x_126 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_126, 0, x_125);
return x_126;
}
}
else
{
obj* x_129; obj* x_130; obj* x_132; obj* x_133; 
lean::dec(x_86);
lean::dec(x_2);
x_129 = l_lean_parser_term_explicit__binder_has__view;
x_130 = lean::cnstr_get(x_129, 0);
lean::inc(x_130);
x_132 = lean::apply_1(x_130, x_1);
x_133 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_133, 0, x_132);
return x_133;
}
}
}
}
obj* _init_l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
if (lean::obj_tag(x_6) == 0)
{
obj* x_9; obj* x_10; 
lean::dec(x_6);
x_9 = lean::mk_nat_obj(1u);
x_10 = lean::nat_dec_eq(x_1, x_9);
lean::dec(x_9);
if (lean::obj_tag(x_10) == 0)
{
obj* x_13; obj* x_14; 
lean::dec(x_10);
x_13 = lean::mk_nat_obj(2u);
x_14 = lean::nat_dec_eq(x_1, x_13);
lean::dec(x_13);
if (lean::obj_tag(x_14) == 0)
{
obj* x_17; obj* x_18; 
lean::dec(x_14);
x_17 = lean::mk_nat_obj(3u);
x_18 = lean::nat_dec_eq(x_1, x_17);
lean::dec(x_17);
lean::dec(x_1);
if (lean::obj_tag(x_18) == 0)
{
obj* x_22; obj* x_23; obj* x_25; obj* x_26; 
lean::dec(x_18);
x_22 = l_lean_parser_term_anonymous__constructor_has__view;
x_23 = lean::cnstr_get(x_22, 0);
lean::inc(x_23);
x_25 = lean::apply_1(x_23, x_0);
x_26 = lean::alloc_cnstr(4, 1, 0);
lean::cnstr_set(x_26, 0, x_25);
return x_26;
}
else
{
obj* x_28; obj* x_29; obj* x_31; obj* x_32; 
lean::dec(x_18);
x_28 = l_lean_parser_term_inst__implicit__binder_has__view;
x_29 = lean::cnstr_get(x_28, 0);
lean::inc(x_29);
x_31 = lean::apply_1(x_29, x_0);
x_32 = lean::alloc_cnstr(3, 1, 0);
lean::cnstr_set(x_32, 0, x_31);
return x_32;
}
}
else
{
obj* x_35; obj* x_36; obj* x_38; obj* x_39; 
lean::dec(x_14);
lean::dec(x_1);
x_35 = l_lean_parser_term_strict__implicit__binder_has__view;
x_36 = lean::cnstr_get(x_35, 0);
lean::inc(x_36);
x_38 = lean::apply_1(x_36, x_0);
x_39 = lean::alloc_cnstr(2, 1, 0);
lean::cnstr_set(x_39, 0, x_38);
return x_39;
}
}
else
{
obj* x_42; obj* x_43; obj* x_45; obj* x_46; 
lean::dec(x_10);
lean::dec(x_1);
x_42 = l_lean_parser_term_implicit__binder_has__view;
x_43 = lean::cnstr_get(x_42, 0);
lean::inc(x_43);
x_45 = lean::apply_1(x_43, x_0);
x_46 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_46, 0, x_45);
return x_46;
}
}
else
{
obj* x_49; obj* x_50; obj* x_52; obj* x_53; 
lean::dec(x_1);
lean::dec(x_6);
x_49 = l_lean_parser_term_explicit__binder_has__view;
x_50 = lean::cnstr_get(x_49, 0);
lean::inc(x_50);
x_52 = lean::apply_1(x_50, x_0);
x_53 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_53, 0, x_52);
return x_53;
}
}
}
}
obj* _init_l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("bracketed_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_2; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_explicit__binder_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
x_8 = lean::apply_1(x_6, x_2);
lean::inc(x_1);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_lean_parser_term_bracketed__binder;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
case 1:
{
obj* x_18; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_33; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
x_21 = l_lean_parser_term_implicit__binder_has__view;
x_22 = lean::cnstr_get(x_21, 1);
lean::inc(x_22);
x_24 = lean::apply_1(x_22, x_18);
lean::inc(x_1);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_27);
x_29 = l_lean_parser_syntax_mk__node(x_27, x_26);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_1);
x_31 = l_lean_parser_term_bracketed__binder;
lean::inc(x_31);
x_33 = l_lean_parser_syntax_mk__node(x_31, x_30);
return x_33;
}
case 2:
{
obj* x_34; obj* x_37; obj* x_38; obj* x_40; obj* x_42; obj* x_43; obj* x_45; obj* x_46; obj* x_47; obj* x_49; 
x_34 = lean::cnstr_get(x_0, 0);
lean::inc(x_34);
lean::dec(x_0);
x_37 = l_lean_parser_term_strict__implicit__binder_has__view;
x_38 = lean::cnstr_get(x_37, 1);
lean::inc(x_38);
x_40 = lean::apply_1(x_38, x_34);
lean::inc(x_1);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_40);
lean::cnstr_set(x_42, 1, x_1);
x_43 = l_lean_parser_number_has__view_x_27___lambda__2___closed__1;
lean::inc(x_43);
x_45 = l_lean_parser_syntax_mk__node(x_43, x_42);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_1);
x_47 = l_lean_parser_term_bracketed__binder;
lean::inc(x_47);
x_49 = l_lean_parser_syntax_mk__node(x_47, x_46);
return x_49;
}
case 3:
{
obj* x_50; obj* x_53; obj* x_54; obj* x_56; obj* x_58; obj* x_59; obj* x_61; obj* x_62; obj* x_63; obj* x_65; 
x_50 = lean::cnstr_get(x_0, 0);
lean::inc(x_50);
lean::dec(x_0);
x_53 = l_lean_parser_term_inst__implicit__binder_has__view;
x_54 = lean::cnstr_get(x_53, 1);
lean::inc(x_54);
x_56 = lean::apply_1(x_54, x_50);
lean::inc(x_1);
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_56);
lean::cnstr_set(x_58, 1, x_1);
x_59 = l_lean_parser_number_has__view_x_27___lambda__2___closed__2;
lean::inc(x_59);
x_61 = l_lean_parser_syntax_mk__node(x_59, x_58);
x_62 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_62, 0, x_61);
lean::cnstr_set(x_62, 1, x_1);
x_63 = l_lean_parser_term_bracketed__binder;
lean::inc(x_63);
x_65 = l_lean_parser_syntax_mk__node(x_63, x_62);
return x_65;
}
default:
{
obj* x_66; obj* x_69; obj* x_70; obj* x_72; obj* x_74; obj* x_75; obj* x_77; obj* x_78; obj* x_79; obj* x_81; 
x_66 = lean::cnstr_get(x_0, 0);
lean::inc(x_66);
lean::dec(x_0);
x_69 = l_lean_parser_term_anonymous__constructor_has__view;
x_70 = lean::cnstr_get(x_69, 1);
lean::inc(x_70);
x_72 = lean::apply_1(x_70, x_66);
lean::inc(x_1);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_72);
lean::cnstr_set(x_74, 1, x_1);
x_75 = l_lean_parser_command_mixfix_kind_has__view_x_27___lambda__2___closed__1;
lean::inc(x_75);
x_77 = l_lean_parser_syntax_mk__node(x_75, x_74);
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_77);
lean::cnstr_set(x_78, 1, x_1);
x_79 = l_lean_parser_term_bracketed__binder;
lean::inc(x_79);
x_81 = l_lean_parser_syntax_mk__node(x_79, x_78);
return x_81;
}
}
}
}
obj* _init_l_lean_parser_term_bracketed__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_bracketed__binder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_bracketed__binder_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_bracketed__binder;
x_6 = l_lean_parser_term_bracketed__binder_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_bracketed__binder_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_15; obj* x_17; obj* x_18; obj* x_20; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_35; obj* x_37; obj* x_39; obj* x_40; obj* x_41; obj* x_43; obj* x_45; obj* x_47; obj* x_49; obj* x_50; obj* x_51; obj* x_53; obj* x_54; obj* x_55; obj* x_57; obj* x_59; obj* x_60; obj* x_61; obj* x_63; obj* x_65; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_72; obj* x_73; obj* x_74; obj* x_76; obj* x_78; obj* x_79; obj* x_80; obj* x_82; obj* x_84; obj* x_86; obj* x_88; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_95; obj* x_96; obj* x_98; obj* x_100; obj* x_101; obj* x_102; obj* x_104; obj* x_105; obj* x_107; obj* x_108; obj* x_109; obj* x_111; obj* x_113; obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_120; obj* x_121; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; obj* x_129; 
x_0 = lean::mk_string("(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::box(0);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__content_parser), 5, 0);
lean::inc(x_7);
lean::inc(x_8);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_8);
lean::cnstr_set(x_11, 1, x_7);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_command_notation__like_parser), 5, 0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_11);
lean::inc(x_4);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_15, 0, x_13);
lean::closure_set(x_15, 1, x_4);
lean::inc(x_7);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set(x_17, 1, x_7);
x_18 = l_lean_parser_term_explicit__binder__content;
lean::inc(x_18);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_20, 0, x_18);
lean::closure_set(x_20, 1, x_17);
x_21 = lean::mk_string(")");
x_22 = l_string_trim(x_21);
lean::inc(x_22);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_24, 0, x_22);
lean::inc(x_4);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_26, 0, x_22);
lean::closure_set(x_26, 1, x_4);
lean::closure_set(x_26, 2, x_24);
lean::inc(x_7);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_26);
lean::cnstr_set(x_28, 1, x_7);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_20);
lean::cnstr_set(x_29, 1, x_28);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_6);
lean::cnstr_set(x_30, 1, x_29);
x_31 = l_lean_parser_term_explicit__binder;
lean::inc(x_31);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_33, 0, x_31);
lean::closure_set(x_33, 1, x_30);
x_34 = lean::mk_string("{");
x_35 = l_string_trim(x_34);
lean::inc(x_35);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_37, 0, x_35);
lean::inc(x_4);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_39, 0, x_35);
lean::closure_set(x_39, 1, x_4);
lean::closure_set(x_39, 2, x_37);
x_40 = lean::mk_string("}");
x_41 = l_string_trim(x_40);
lean::inc(x_41);
x_43 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_43, 0, x_41);
lean::inc(x_4);
x_45 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_45, 0, x_41);
lean::closure_set(x_45, 1, x_4);
lean::closure_set(x_45, 2, x_43);
lean::inc(x_7);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_45);
lean::cnstr_set(x_47, 1, x_7);
lean::inc(x_8);
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_8);
lean::cnstr_set(x_49, 1, x_47);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_39);
lean::cnstr_set(x_50, 1, x_49);
x_51 = l_lean_parser_term_implicit__binder;
lean::inc(x_51);
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_53, 0, x_51);
lean::closure_set(x_53, 1, x_50);
x_54 = lean::mk_string("\xe2\xa6\x83");
x_55 = l_string_trim(x_54);
lean::inc(x_55);
x_57 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_57, 0, x_55);
lean::inc(x_4);
x_59 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_59, 0, x_55);
lean::closure_set(x_59, 1, x_4);
lean::closure_set(x_59, 2, x_57);
x_60 = lean::mk_string("\xe2\xa6\x84");
x_61 = l_string_trim(x_60);
lean::inc(x_61);
x_63 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_63, 0, x_61);
lean::inc(x_4);
x_65 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_65, 0, x_61);
lean::closure_set(x_65, 1, x_4);
lean::closure_set(x_65, 2, x_63);
lean::inc(x_7);
x_67 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_67, 0, x_65);
lean::cnstr_set(x_67, 1, x_7);
x_68 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_68, 0, x_8);
lean::cnstr_set(x_68, 1, x_67);
x_69 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_69, 0, x_59);
lean::cnstr_set(x_69, 1, x_68);
x_70 = l_lean_parser_term_strict__implicit__binder;
lean::inc(x_70);
x_72 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_72, 0, x_70);
lean::closure_set(x_72, 1, x_69);
x_73 = lean::mk_string("[");
x_74 = l_string_trim(x_73);
lean::inc(x_74);
x_76 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_76, 0, x_74);
lean::inc(x_4);
x_78 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_78, 0, x_74);
lean::closure_set(x_78, 1, x_4);
lean::closure_set(x_78, 2, x_76);
x_79 = lean::mk_string(" : ");
x_80 = l_string_trim(x_79);
lean::inc(x_80);
x_82 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_82, 0, x_80);
lean::inc(x_4);
x_84 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_84, 0, x_80);
lean::closure_set(x_84, 1, x_4);
lean::closure_set(x_84, 2, x_82);
lean::inc(x_4);
x_86 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_86, 0, x_4);
lean::inc(x_7);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_86);
lean::cnstr_set(x_88, 1, x_7);
lean::inc(x_88);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_84);
lean::cnstr_set(x_90, 1, x_88);
x_91 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
x_92 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_92, 0, x_91);
lean::cnstr_set(x_92, 1, x_90);
x_93 = l_lean_parser_term_inst__implicit__named__binder;
lean::inc(x_93);
x_95 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_95, 0, x_93);
lean::closure_set(x_95, 1, x_92);
x_96 = l_lean_parser_term_inst__implicit__anonymous__binder;
lean::inc(x_96);
x_98 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_98, 0, x_96);
lean::closure_set(x_98, 1, x_88);
lean::inc(x_7);
x_100 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_100, 0, x_98);
lean::cnstr_set(x_100, 1, x_7);
x_101 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_101, 0, x_95);
lean::cnstr_set(x_101, 1, x_100);
x_102 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_longest__choice___at_lean_parser_term_bracketed__binder_parser___spec__1), 6, 1);
lean::closure_set(x_102, 0, x_101);
lean::inc(x_7);
x_104 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_104, 0, x_102);
lean::cnstr_set(x_104, 1, x_7);
x_105 = l_lean_parser_term_inst__implicit__binder__content;
lean::inc(x_105);
x_107 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_107, 0, x_105);
lean::closure_set(x_107, 1, x_104);
x_108 = lean::mk_string("]");
x_109 = l_string_trim(x_108);
lean::inc(x_109);
x_111 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_111, 0, x_109);
lean::inc(x_4);
x_113 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_113, 0, x_109);
lean::closure_set(x_113, 1, x_4);
lean::closure_set(x_113, 2, x_111);
lean::inc(x_7);
x_115 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_115, 0, x_113);
lean::cnstr_set(x_115, 1, x_7);
x_116 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_116, 0, x_107);
lean::cnstr_set(x_116, 1, x_115);
x_117 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_117, 0, x_78);
lean::cnstr_set(x_117, 1, x_116);
x_118 = l_lean_parser_term_inst__implicit__binder;
lean::inc(x_118);
x_120 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_120, 0, x_118);
lean::closure_set(x_120, 1, x_117);
x_121 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_anonymous__constructor_parser), 5, 0);
lean::inc(x_7);
x_123 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_123, 0, x_121);
lean::cnstr_set(x_123, 1, x_7);
x_124 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_124, 0, x_120);
lean::cnstr_set(x_124, 1, x_123);
x_125 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_125, 0, x_72);
lean::cnstr_set(x_125, 1, x_124);
x_126 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_126, 0, x_53);
lean::cnstr_set(x_126, 1, x_125);
x_127 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_127, 0, x_33);
lean::cnstr_set(x_127, 1, x_126);
x_128 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_128, 0, x_127);
lean::closure_set(x_128, 1, x_4);
x_129 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_129, 0, x_128);
lean::cnstr_set(x_129, 1, x_7);
return x_129;
}
}
obj* l_list_map___main___at_lean_parser_term_bracketed__binder_parser___spec__2(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_7 = x_0;
}
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_list_map___main___at_lean_parser_term_bracketed__binder_parser___spec__2___lambda__1), 6, 1);
lean::closure_set(x_8, 0, x_3);
x_9 = l_list_map___main___at_lean_parser_term_bracketed__binder_parser___spec__2(x_5);
if (lean::is_scalar(x_7)) {
 x_10 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_10 = x_7;
}
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_9);
return x_10;
}
}
}
obj* l_list_map___main___at_lean_parser_term_bracketed__binder_parser___spec__2___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_14; 
x_6 = lean::cnstr_get(x_0, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_0, 1);
lean::inc(x_8);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_10 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_10 = x_0;
}
x_11 = lean::apply_5(x_8, x_1, x_2, x_3, x_4, x_5);
x_12 = lean::cnstr_get(x_11, 0);
lean::inc(x_12);
x_14 = lean::cnstr_get(x_11, 1);
lean::inc(x_14);
lean::dec(x_11);
if (lean::obj_tag(x_12) == 0)
{
obj* x_17; obj* x_19; obj* x_21; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_31; obj* x_32; obj* x_33; 
x_17 = lean::cnstr_get(x_12, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_12, 1);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_12, 2);
lean::inc(x_21);
if (lean::is_shared(x_12)) {
 lean::dec(x_12);
 x_23 = lean::box(0);
} else {
 lean::cnstr_release(x_12, 0);
 lean::cnstr_release(x_12, 1);
 lean::cnstr_release(x_12, 2);
 x_23 = x_12;
}
x_24 = lean::box(0);
lean::inc(x_24);
x_26 = lean::alloc_cnstr(2, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_6);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_17);
lean::cnstr_set(x_27, 1, x_24);
x_28 = l_lean_parser_syntax_mk__node(x_26, x_27);
x_29 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_29);
if (lean::is_scalar(x_23)) {
 x_31 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_31 = x_23;
}
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_19);
lean::cnstr_set(x_31, 2, x_29);
x_32 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_31);
if (lean::is_scalar(x_10)) {
 x_33 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_33 = x_10;
}
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_14);
return x_33;
}
else
{
obj* x_35; unsigned char x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; 
lean::dec(x_6);
x_35 = lean::cnstr_get(x_12, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get_scalar<unsigned char>(x_12, sizeof(void*)*1);
if (lean::is_shared(x_12)) {
 lean::dec(x_12);
 x_38 = lean::box(0);
} else {
 lean::cnstr_release(x_12, 0);
 x_38 = x_12;
}
if (lean::is_scalar(x_38)) {
 x_39 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_39 = x_38;
}
lean::cnstr_set(x_39, 0, x_35);
lean::cnstr_set_scalar(x_39, sizeof(void*)*1, x_37);
x_40 = x_39;
if (lean::is_scalar(x_10)) {
 x_41 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_41 = x_10;
}
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_14);
return x_41;
}
}
}
obj* l_lean_parser_parsec__t_lookahead___at_lean_parser_term_bracketed__binder_parser___spec__4(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_15; obj* x_16; obj* x_18; 
lean::inc(x_6);
x_15 = lean::apply_5(x_1, x_3, x_4, x_5, x_6, x_7);
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_15, 1);
lean::inc(x_18);
lean::dec(x_15);
if (lean::obj_tag(x_16) == 0)
{
obj* x_21; obj* x_23; obj* x_25; obj* x_27; obj* x_28; 
x_21 = lean::cnstr_get(x_16, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_16, 1);
lean::inc(x_23);
x_25 = lean::cnstr_get(x_16, 2);
lean::inc(x_25);
if (lean::is_shared(x_16)) {
 lean::dec(x_16);
 x_27 = lean::box(0);
} else {
 lean::cnstr_release(x_16, 0);
 lean::cnstr_release(x_16, 1);
 lean::cnstr_release(x_16, 2);
 x_27 = x_16;
}
if (lean::obj_tag(x_2) == 0)
{
obj* x_30; obj* x_32; obj* x_34; 
x_30 = lean::cnstr_get(x_2, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_2, 1);
lean::inc(x_32);
x_34 = lean::cnstr_get(x_2, 2);
lean::inc(x_34);
if (lean::obj_tag(x_34) == 0)
{
obj* x_37; obj* x_38; obj* x_40; 
lean::dec(x_27);
x_37 = lean::string_iterator_offset(x_23);
x_38 = lean::string_iterator_offset(x_32);
lean::dec(x_32);
x_40 = lean::nat_dec_lt(x_37, x_38);
if (lean::obj_tag(x_40) == 0)
{
obj* x_42; 
lean::dec(x_40);
x_42 = lean::nat_dec_lt(x_38, x_37);
lean::dec(x_37);
lean::dec(x_38);
if (lean::obj_tag(x_42) == 0)
{
obj* x_46; obj* x_48; obj* x_49; obj* x_51; obj* x_52; 
lean::dec(x_42);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_21);
lean::cnstr_set(x_46, 1, x_30);
lean::inc(x_23);
x_48 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_48, 0, x_46);
lean::cnstr_set(x_48, 1, x_23);
lean::cnstr_set(x_48, 2, x_34);
x_49 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_49);
x_51 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_51, 0, x_48);
lean::cnstr_set(x_51, 1, x_23);
lean::cnstr_set(x_51, 2, x_49);
x_52 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_51);
x_11 = x_52;
x_12 = x_18;
goto lbl_13;
}
else
{
obj* x_55; obj* x_56; obj* x_58; obj* x_59; obj* x_61; obj* x_62; 
lean::dec(x_42);
lean::dec(x_30);
x_55 = lean::box(0);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_21);
lean::cnstr_set(x_56, 1, x_55);
lean::inc(x_23);
x_58 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_58, 0, x_56);
lean::cnstr_set(x_58, 1, x_23);
lean::cnstr_set(x_58, 2, x_34);
x_59 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_59);
x_61 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_61, 0, x_58);
lean::cnstr_set(x_61, 1, x_23);
lean::cnstr_set(x_61, 2, x_59);
x_62 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_61);
x_11 = x_62;
x_12 = x_18;
goto lbl_13;
}
}
else
{
obj* x_69; obj* x_72; obj* x_73; 
lean::dec(x_21);
lean::dec(x_34);
lean::dec(x_37);
lean::dec(x_38);
lean::dec(x_40);
lean::dec(x_30);
x_69 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_69);
lean::inc(x_2);
x_72 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_72, 0, x_2);
lean::cnstr_set(x_72, 1, x_23);
lean::cnstr_set(x_72, 2, x_69);
x_73 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_72);
x_11 = x_73;
x_12 = x_18;
goto lbl_13;
}
}
else
{
obj* x_77; 
lean::dec(x_34);
lean::dec(x_30);
lean::dec(x_32);
x_77 = lean::box(0);
x_28 = x_77;
goto lbl_29;
}
}
else
{
obj* x_78; 
x_78 = lean::box(0);
x_28 = x_78;
goto lbl_29;
}
lbl_29:
{
obj* x_80; obj* x_82; obj* x_84; obj* x_85; obj* x_87; obj* x_88; 
lean::dec(x_28);
x_80 = lean::box(0);
lean::inc(x_80);
x_82 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_82, 0, x_21);
lean::cnstr_set(x_82, 1, x_80);
lean::inc(x_23);
if (lean::is_scalar(x_27)) {
 x_84 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_84 = x_27;
}
lean::cnstr_set(x_84, 0, x_82);
lean::cnstr_set(x_84, 1, x_23);
lean::cnstr_set(x_84, 2, x_80);
x_85 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_85);
x_87 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_87, 0, x_84);
lean::cnstr_set(x_87, 1, x_23);
lean::cnstr_set(x_87, 2, x_85);
x_88 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_87);
x_11 = x_88;
x_12 = x_18;
goto lbl_13;
}
}
else
{
obj* x_89; unsigned char x_91; obj* x_92; obj* x_93; obj* x_94; 
x_89 = lean::cnstr_get(x_16, 0);
lean::inc(x_89);
x_91 = lean::cnstr_get_scalar<unsigned char>(x_16, sizeof(void*)*1);
if (lean::is_shared(x_16)) {
 lean::dec(x_16);
 x_92 = lean::box(0);
} else {
 lean::cnstr_release(x_16, 0);
 x_92 = x_16;
}
if (lean::is_scalar(x_92)) {
 x_93 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_93 = x_92;
}
lean::cnstr_set(x_93, 0, x_89);
lean::cnstr_set_scalar(x_93, sizeof(void*)*1, x_91);
x_94 = x_93;
x_11 = x_94;
x_12 = x_18;
goto lbl_13;
}
lbl_10:
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_95; obj* x_97; obj* x_98; obj* x_100; obj* x_101; 
x_95 = lean::cnstr_get(x_8, 0);
lean::inc(x_95);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_97 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_release(x_8, 1);
 lean::cnstr_release(x_8, 2);
 x_97 = x_8;
}
x_98 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_98);
if (lean::is_scalar(x_97)) {
 x_100 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_100 = x_97;
}
lean::cnstr_set(x_100, 0, x_95);
lean::cnstr_set(x_100, 1, x_6);
lean::cnstr_set(x_100, 2, x_98);
x_101 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_101, 0, x_100);
lean::cnstr_set(x_101, 1, x_9);
return x_101;
}
else
{
obj* x_103; 
lean::dec(x_6);
x_103 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_103, 0, x_8);
lean::cnstr_set(x_103, 1, x_9);
return x_103;
}
}
lbl_13:
{
if (lean::obj_tag(x_11) == 0)
{
lean::dec(x_0);
lean::dec(x_2);
x_8 = x_11;
x_9 = x_12;
goto lbl_10;
}
else
{
obj* x_106; obj* x_108; obj* x_109; 
x_106 = lean::cnstr_get(x_11, 0);
lean::inc(x_106);
if (lean::is_shared(x_11)) {
 lean::dec(x_11);
 x_108 = lean::box(0);
} else {
 lean::cnstr_release(x_11, 0);
 x_108 = x_11;
}
x_109 = lean::cnstr_get(x_106, 0);
lean::inc(x_109);
if (lean::obj_tag(x_2) == 0)
{
obj* x_114; obj* x_116; 
lean::dec(x_106);
lean::dec(x_108);
lean::dec(x_0);
x_114 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_114);
x_116 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_116, 0, x_2);
lean::cnstr_set(x_116, 1, x_109);
lean::cnstr_set(x_116, 2, x_114);
x_8 = x_116;
x_9 = x_12;
goto lbl_10;
}
else
{
obj* x_117; obj* x_119; obj* x_120; obj* x_122; obj* x_124; 
x_117 = lean::cnstr_get(x_2, 0);
lean::inc(x_117);
x_119 = lean::string_iterator_offset(x_109);
x_120 = lean::cnstr_get(x_117, 0);
lean::inc(x_120);
x_122 = lean::string_iterator_offset(x_120);
lean::dec(x_120);
x_124 = lean::nat_dec_lt(x_119, x_122);
if (lean::obj_tag(x_124) == 0)
{
obj* x_127; 
lean::dec(x_124);
lean::dec(x_2);
x_127 = lean::nat_dec_lt(x_122, x_119);
lean::dec(x_122);
if (lean::obj_tag(x_127) == 0)
{
obj* x_130; obj* x_131; obj* x_133; 
lean::dec(x_127);
x_130 = l_lean_parser_parsec__t_merge___rarg(x_106, x_117);
x_131 = lean::string_iterator_offset(x_0);
lean::dec(x_0);
x_133 = lean::nat_dec_lt(x_131, x_119);
lean::dec(x_119);
lean::dec(x_131);
if (lean::obj_tag(x_133) == 0)
{
unsigned char x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_142; 
lean::dec(x_133);
x_137 = 0;
if (lean::is_scalar(x_108)) {
 x_138 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_138 = x_108;
}
lean::cnstr_set(x_138, 0, x_130);
lean::cnstr_set_scalar(x_138, sizeof(void*)*1, x_137);
x_139 = x_138;
x_140 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_140);
x_142 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_142, 0, x_139);
lean::cnstr_set(x_142, 1, x_109);
lean::cnstr_set(x_142, 2, x_140);
x_8 = x_142;
x_9 = x_12;
goto lbl_10;
}
else
{
unsigned char x_144; obj* x_145; obj* x_146; obj* x_147; obj* x_149; 
lean::dec(x_133);
x_144 = 1;
if (lean::is_scalar(x_108)) {
 x_145 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_145 = x_108;
}
lean::cnstr_set(x_145, 0, x_130);
lean::cnstr_set_scalar(x_145, sizeof(void*)*1, x_144);
x_146 = x_145;
x_147 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_147);
x_149 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_149, 0, x_146);
lean::cnstr_set(x_149, 1, x_109);
lean::cnstr_set(x_149, 2, x_147);
x_8 = x_149;
x_9 = x_12;
goto lbl_10;
}
}
else
{
unsigned char x_154; obj* x_155; obj* x_156; obj* x_157; obj* x_159; 
lean::dec(x_119);
lean::dec(x_117);
lean::dec(x_127);
lean::dec(x_0);
x_154 = 1;
if (lean::is_scalar(x_108)) {
 x_155 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_155 = x_108;
}
lean::cnstr_set(x_155, 0, x_106);
lean::cnstr_set_scalar(x_155, sizeof(void*)*1, x_154);
x_156 = x_155;
x_157 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_157);
x_159 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_159, 0, x_156);
lean::cnstr_set(x_159, 1, x_109);
lean::cnstr_set(x_159, 2, x_157);
x_8 = x_159;
x_9 = x_12;
goto lbl_10;
}
}
else
{
obj* x_167; obj* x_169; 
lean::dec(x_106);
lean::dec(x_119);
lean::dec(x_124);
lean::dec(x_122);
lean::dec(x_117);
lean::dec(x_108);
lean::dec(x_0);
x_167 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_167);
x_169 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_169, 0, x_2);
lean::cnstr_set(x_169, 1, x_109);
lean::cnstr_set(x_169, 2, x_167);
x_8 = x_169;
x_9 = x_12;
goto lbl_10;
}
}
}
}
}
}
obj* l_list_mfoldr___main___at_lean_parser_term_bracketed__binder_parser___spec__5(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_11; obj* x_12; obj* x_13; obj* x_17; obj* x_18; obj* x_20; obj* x_21; 
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_11 = lean::box(0);
x_12 = l_list_mfoldr___main___at_lean_parser_monad__parsec_longest__match___spec__2___rarg___closed__1;
x_13 = l_mjoin___rarg___closed__1;
lean::inc(x_11);
lean::inc(x_13);
lean::inc(x_12);
x_17 = l_lean_parser_monad__parsec_error___at_lean_parser_number_x_27___spec__12___rarg(x_12, x_13, x_11, x_11, x_0);
x_18 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_18);
x_20 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_20, 0, x_17);
lean::cnstr_set(x_20, 1, x_5);
lean::cnstr_set(x_20, 2, x_18);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_6);
return x_21;
}
else
{
obj* x_22; obj* x_24; obj* x_31; obj* x_32; obj* x_34; obj* x_36; 
x_22 = lean::cnstr_get(x_1, 0);
lean::inc(x_22);
x_24 = lean::cnstr_get(x_1, 1);
lean::inc(x_24);
lean::dec(x_1);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_0);
x_31 = l_list_mfoldr___main___at_lean_parser_term_bracketed__binder_parser___spec__5(x_0, x_24, x_2, x_3, x_4, x_5, x_6);
x_32 = lean::cnstr_get(x_31, 0);
lean::inc(x_32);
x_34 = lean::cnstr_get(x_31, 1);
lean::inc(x_34);
if (lean::is_shared(x_31)) {
 lean::dec(x_31);
 x_36 = lean::box(0);
} else {
 lean::cnstr_release(x_31, 0);
 lean::cnstr_release(x_31, 1);
 x_36 = x_31;
}
if (lean::obj_tag(x_32) == 0)
{
obj* x_37; obj* x_39; obj* x_41; obj* x_44; obj* x_45; obj* x_47; obj* x_50; obj* x_51; 
x_37 = lean::cnstr_get(x_32, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_32, 1);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_32, 2);
lean::inc(x_41);
lean::dec(x_32);
x_44 = l_lean_parser_parsec__t_lookahead___at_lean_parser_term_bracketed__binder_parser___spec__4(x_0, x_22, x_37, x_2, x_3, x_4, x_39, x_34);
x_45 = lean::cnstr_get(x_44, 0);
lean::inc(x_45);
x_47 = lean::cnstr_get(x_44, 1);
lean::inc(x_47);
lean::dec(x_44);
x_50 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_41, x_45);
if (lean::is_scalar(x_36)) {
 x_51 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_51 = x_36;
}
lean::cnstr_set(x_51, 0, x_50);
lean::cnstr_set(x_51, 1, x_47);
return x_51;
}
else
{
obj* x_57; unsigned char x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; 
lean::dec(x_4);
lean::dec(x_0);
lean::dec(x_2);
lean::dec(x_3);
lean::dec(x_22);
x_57 = lean::cnstr_get(x_32, 0);
lean::inc(x_57);
x_59 = lean::cnstr_get_scalar<unsigned char>(x_32, sizeof(void*)*1);
if (lean::is_shared(x_32)) {
 lean::dec(x_32);
 x_60 = lean::box(0);
} else {
 lean::cnstr_release(x_32, 0);
 x_60 = x_32;
}
if (lean::is_scalar(x_60)) {
 x_61 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_61 = x_60;
}
lean::cnstr_set(x_61, 0, x_57);
lean::cnstr_set_scalar(x_61, sizeof(void*)*1, x_59);
x_62 = x_61;
if (lean::is_scalar(x_36)) {
 x_63 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_63 = x_36;
}
lean::cnstr_set(x_63, 0, x_62);
lean::cnstr_set(x_63, 1, x_34);
return x_63;
}
}
}
}
obj* l_lean_parser_monad__parsec_longest__match___at_lean_parser_term_bracketed__binder_parser___spec__3(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_15; 
x_6 = lean::mk_nat_obj(0u);
x_7 = l_list_enum__from___main___rarg(x_6, x_0);
x_8 = l_list_map___main___at_lean_parser_term_bracketed__binder_parser___spec__2(x_7);
lean::inc(x_4);
x_10 = l_list_mfoldr___main___at_lean_parser_term_bracketed__binder_parser___spec__5(x_4, x_8, x_1, x_2, x_3, x_4, x_5);
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
if (lean::is_shared(x_10)) {
 lean::dec(x_10);
 x_15 = lean::box(0);
} else {
 lean::cnstr_release(x_10, 0);
 lean::cnstr_release(x_10, 1);
 x_15 = x_10;
}
if (lean::obj_tag(x_11) == 0)
{
obj* x_16; obj* x_18; obj* x_21; obj* x_22; obj* x_24; obj* x_25; 
x_16 = lean::cnstr_get(x_11, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_11, 2);
lean::inc(x_18);
lean::dec(x_11);
x_21 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_18, x_16);
x_22 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_22);
x_24 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_22, x_21);
if (lean::is_scalar(x_15)) {
 x_25 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_25 = x_15;
}
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_13);
return x_25;
}
else
{
obj* x_26; unsigned char x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_34; obj* x_35; 
x_26 = lean::cnstr_get(x_11, 0);
lean::inc(x_26);
x_28 = lean::cnstr_get_scalar<unsigned char>(x_11, sizeof(void*)*1);
if (lean::is_shared(x_11)) {
 lean::dec(x_11);
 x_29 = lean::box(0);
} else {
 lean::cnstr_release(x_11, 0);
 x_29 = x_11;
}
if (lean::is_scalar(x_29)) {
 x_30 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_30 = x_29;
}
lean::cnstr_set(x_30, 0, x_26);
lean::cnstr_set_scalar(x_30, sizeof(void*)*1, x_28);
x_31 = x_30;
x_32 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_32);
x_34 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_32, x_31);
if (lean::is_scalar(x_15)) {
 x_35 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_35 = x_15;
}
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_13);
return x_35;
}
}
}
obj* l_lean_parser_combinators_longest__choice___at_lean_parser_term_bracketed__binder_parser___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_9; obj* x_10; obj* x_12; obj* x_14; 
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_9 = l_lean_parser_monad__parsec_longest__match___at_lean_parser_term_bracketed__binder_parser___spec__3(x_0, x_1, x_2, x_3, x_4, x_5);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
x_12 = lean::cnstr_get(x_9, 1);
lean::inc(x_12);
if (lean::is_shared(x_9)) {
 lean::dec(x_9);
 x_14 = lean::box(0);
} else {
 lean::cnstr_release(x_9, 0);
 lean::cnstr_release(x_9, 1);
 x_14 = x_9;
}
if (lean::obj_tag(x_10) == 0)
{
obj* x_15; obj* x_17; obj* x_19; obj* x_21; 
x_15 = lean::cnstr_get(x_10, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_10, 1);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_10, 2);
lean::inc(x_19);
if (lean::is_shared(x_10)) {
 lean::dec(x_10);
 x_21 = lean::box(0);
} else {
 lean::cnstr_release(x_10, 0);
 lean::cnstr_release(x_10, 1);
 lean::cnstr_release(x_10, 2);
 x_21 = x_10;
}
if (lean::obj_tag(x_15) == 0)
{
obj* x_24; obj* x_25; obj* x_26; obj* x_30; obj* x_31; obj* x_33; obj* x_36; obj* x_37; 
lean::dec(x_15);
lean::dec(x_21);
x_24 = lean::box(0);
x_25 = l___private_1297690757__many1__aux___main___rarg___closed__1;
x_26 = l_mjoin___rarg___closed__1;
lean::inc(x_24);
lean::inc(x_26);
lean::inc(x_25);
x_30 = l_lean_parser_monad__parsec_error___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__4___rarg(x_25, x_26, x_24, x_24, x_1, x_2, x_3, x_17, x_12);
x_31 = lean::cnstr_get(x_30, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_30, 1);
lean::inc(x_33);
lean::dec(x_30);
x_36 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_31);
if (lean::is_scalar(x_14)) {
 x_37 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_37 = x_14;
}
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_33);
return x_37;
}
else
{
obj* x_41; obj* x_44; obj* x_46; obj* x_47; obj* x_48; 
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_41 = lean::cnstr_get(x_15, 0);
lean::inc(x_41);
lean::dec(x_15);
x_44 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_44);
if (lean::is_scalar(x_21)) {
 x_46 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_46 = x_21;
}
lean::cnstr_set(x_46, 0, x_41);
lean::cnstr_set(x_46, 1, x_17);
lean::cnstr_set(x_46, 2, x_44);
x_47 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_46);
if (lean::is_scalar(x_14)) {
 x_48 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_48 = x_14;
}
lean::cnstr_set(x_48, 0, x_47);
lean::cnstr_set(x_48, 1, x_12);
return x_48;
}
}
else
{
obj* x_52; unsigned char x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; 
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_52 = lean::cnstr_get(x_10, 0);
lean::inc(x_52);
x_54 = lean::cnstr_get_scalar<unsigned char>(x_10, sizeof(void*)*1);
if (lean::is_shared(x_10)) {
 lean::dec(x_10);
 x_55 = lean::box(0);
} else {
 lean::cnstr_release(x_10, 0);
 x_55 = x_10;
}
if (lean::is_scalar(x_55)) {
 x_56 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_56 = x_55;
}
lean::cnstr_set(x_56, 0, x_52);
lean::cnstr_set_scalar(x_56, sizeof(void*)*1, x_54);
x_57 = x_56;
if (lean::is_scalar(x_14)) {
 x_58 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_58 = x_14;
}
lean::cnstr_set(x_58, 0, x_57);
lean::cnstr_set(x_58, 1, x_12);
return x_58;
}
}
}
obj* _init_l_lean_parser_term_bracketed__binder_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_15; obj* x_17; obj* x_18; obj* x_20; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_35; obj* x_37; obj* x_39; obj* x_40; obj* x_41; obj* x_43; obj* x_45; obj* x_47; obj* x_49; obj* x_50; obj* x_51; obj* x_53; obj* x_54; obj* x_55; obj* x_57; obj* x_59; obj* x_60; obj* x_61; obj* x_63; obj* x_65; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_72; obj* x_73; obj* x_74; obj* x_76; obj* x_78; obj* x_79; obj* x_80; obj* x_82; obj* x_84; obj* x_86; obj* x_88; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_95; obj* x_96; obj* x_98; obj* x_100; obj* x_101; obj* x_102; obj* x_104; obj* x_105; obj* x_107; obj* x_108; obj* x_109; obj* x_111; obj* x_113; obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_120; obj* x_121; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; obj* x_129; obj* x_130; obj* x_131; obj* x_132; obj* x_133; obj* x_134; obj* x_135; obj* x_142; 
x_0 = lean::mk_string("(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::box(0);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__content_parser), 5, 0);
lean::inc(x_7);
lean::inc(x_8);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_8);
lean::cnstr_set(x_11, 1, x_7);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_command_notation__like_parser), 5, 0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_11);
lean::inc(x_4);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_15, 0, x_13);
lean::closure_set(x_15, 1, x_4);
lean::inc(x_7);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set(x_17, 1, x_7);
x_18 = l_lean_parser_term_explicit__binder__content;
lean::inc(x_18);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_20, 0, x_18);
lean::closure_set(x_20, 1, x_17);
x_21 = lean::mk_string(")");
x_22 = l_string_trim(x_21);
lean::inc(x_22);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_24, 0, x_22);
lean::inc(x_4);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_26, 0, x_22);
lean::closure_set(x_26, 1, x_4);
lean::closure_set(x_26, 2, x_24);
lean::inc(x_7);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_26);
lean::cnstr_set(x_28, 1, x_7);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_20);
lean::cnstr_set(x_29, 1, x_28);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_6);
lean::cnstr_set(x_30, 1, x_29);
x_31 = l_lean_parser_term_explicit__binder;
lean::inc(x_31);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_33, 0, x_31);
lean::closure_set(x_33, 1, x_30);
x_34 = lean::mk_string("{");
x_35 = l_string_trim(x_34);
lean::inc(x_35);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_37, 0, x_35);
lean::inc(x_4);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_39, 0, x_35);
lean::closure_set(x_39, 1, x_4);
lean::closure_set(x_39, 2, x_37);
x_40 = lean::mk_string("}");
x_41 = l_string_trim(x_40);
lean::inc(x_41);
x_43 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_43, 0, x_41);
lean::inc(x_4);
x_45 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_45, 0, x_41);
lean::closure_set(x_45, 1, x_4);
lean::closure_set(x_45, 2, x_43);
lean::inc(x_7);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_45);
lean::cnstr_set(x_47, 1, x_7);
lean::inc(x_8);
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_8);
lean::cnstr_set(x_49, 1, x_47);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_39);
lean::cnstr_set(x_50, 1, x_49);
x_51 = l_lean_parser_term_implicit__binder;
lean::inc(x_51);
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_53, 0, x_51);
lean::closure_set(x_53, 1, x_50);
x_54 = lean::mk_string("\xe2\xa6\x83");
x_55 = l_string_trim(x_54);
lean::inc(x_55);
x_57 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_57, 0, x_55);
lean::inc(x_4);
x_59 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_59, 0, x_55);
lean::closure_set(x_59, 1, x_4);
lean::closure_set(x_59, 2, x_57);
x_60 = lean::mk_string("\xe2\xa6\x84");
x_61 = l_string_trim(x_60);
lean::inc(x_61);
x_63 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_63, 0, x_61);
lean::inc(x_4);
x_65 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_65, 0, x_61);
lean::closure_set(x_65, 1, x_4);
lean::closure_set(x_65, 2, x_63);
lean::inc(x_7);
x_67 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_67, 0, x_65);
lean::cnstr_set(x_67, 1, x_7);
x_68 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_68, 0, x_8);
lean::cnstr_set(x_68, 1, x_67);
x_69 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_69, 0, x_59);
lean::cnstr_set(x_69, 1, x_68);
x_70 = l_lean_parser_term_strict__implicit__binder;
lean::inc(x_70);
x_72 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_72, 0, x_70);
lean::closure_set(x_72, 1, x_69);
x_73 = lean::mk_string("[");
x_74 = l_string_trim(x_73);
lean::inc(x_74);
x_76 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_76, 0, x_74);
lean::inc(x_4);
x_78 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_78, 0, x_74);
lean::closure_set(x_78, 1, x_4);
lean::closure_set(x_78, 2, x_76);
x_79 = lean::mk_string(" : ");
x_80 = l_string_trim(x_79);
lean::inc(x_80);
x_82 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_82, 0, x_80);
lean::inc(x_4);
x_84 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_84, 0, x_80);
lean::closure_set(x_84, 1, x_4);
lean::closure_set(x_84, 2, x_82);
lean::inc(x_4);
x_86 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_86, 0, x_4);
lean::inc(x_7);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_86);
lean::cnstr_set(x_88, 1, x_7);
lean::inc(x_88);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_84);
lean::cnstr_set(x_90, 1, x_88);
x_91 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
x_92 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_92, 0, x_91);
lean::cnstr_set(x_92, 1, x_90);
x_93 = l_lean_parser_term_inst__implicit__named__binder;
lean::inc(x_93);
x_95 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_95, 0, x_93);
lean::closure_set(x_95, 1, x_92);
x_96 = l_lean_parser_term_inst__implicit__anonymous__binder;
lean::inc(x_96);
x_98 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_98, 0, x_96);
lean::closure_set(x_98, 1, x_88);
lean::inc(x_7);
x_100 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_100, 0, x_98);
lean::cnstr_set(x_100, 1, x_7);
x_101 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_101, 0, x_95);
lean::cnstr_set(x_101, 1, x_100);
x_102 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_longest__choice___at_lean_parser_term_bracketed__binder_parser___spec__1), 6, 1);
lean::closure_set(x_102, 0, x_101);
lean::inc(x_7);
x_104 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_104, 0, x_102);
lean::cnstr_set(x_104, 1, x_7);
x_105 = l_lean_parser_term_inst__implicit__binder__content;
lean::inc(x_105);
x_107 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_107, 0, x_105);
lean::closure_set(x_107, 1, x_104);
x_108 = lean::mk_string("]");
x_109 = l_string_trim(x_108);
lean::inc(x_109);
x_111 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_111, 0, x_109);
lean::inc(x_4);
x_113 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_113, 0, x_109);
lean::closure_set(x_113, 1, x_4);
lean::closure_set(x_113, 2, x_111);
lean::inc(x_7);
x_115 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_115, 0, x_113);
lean::cnstr_set(x_115, 1, x_7);
x_116 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_116, 0, x_107);
lean::cnstr_set(x_116, 1, x_115);
x_117 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_117, 0, x_78);
lean::cnstr_set(x_117, 1, x_116);
x_118 = l_lean_parser_term_inst__implicit__binder;
lean::inc(x_118);
x_120 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_120, 0, x_118);
lean::closure_set(x_120, 1, x_117);
x_121 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_anonymous__constructor_parser), 5, 0);
lean::inc(x_7);
x_123 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_123, 0, x_121);
lean::cnstr_set(x_123, 1, x_7);
x_124 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_124, 0, x_120);
lean::cnstr_set(x_124, 1, x_123);
x_125 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_125, 0, x_72);
lean::cnstr_set(x_125, 1, x_124);
x_126 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_126, 0, x_53);
lean::cnstr_set(x_126, 1, x_125);
x_127 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_127, 0, x_33);
lean::cnstr_set(x_127, 1, x_126);
x_128 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_128, 0, x_127);
lean::closure_set(x_128, 1, x_4);
x_129 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_129, 0, x_128);
lean::cnstr_set(x_129, 1, x_7);
x_130 = l_lean_parser_term__parser__m_monad;
x_131 = l_lean_parser_term__parser__m_monad__except;
x_132 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_133 = l_lean_parser_term__parser__m_alternative;
x_134 = l_lean_parser_term_bracketed__binder;
x_135 = l_lean_parser_term_bracketed__binder_has__view;
lean::inc(x_135);
lean::inc(x_134);
lean::inc(x_133);
lean::inc(x_132);
lean::inc(x_131);
lean::inc(x_130);
x_142 = l_lean_parser_combinators_node_view___rarg(x_130, x_131, x_132, x_133, x_134, x_129, x_135);
return x_142;
}
}
obj* _init_l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_31; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_38; obj* x_39; obj* x_41; obj* x_43; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_50; obj* x_51; obj* x_53; obj* x_54; obj* x_57; obj* x_59; obj* x_61; obj* x_62; obj* x_63; obj* x_65; obj* x_66; obj* x_67; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; 
x_0 = lean::mk_string("(");
x_1 = lean::mk_nat_obj(0u);
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::box(0);
x_5 = l_lean_parser_term_binder__content_parser_lean_parser_has__tokens;
lean::inc(x_4);
lean::inc(x_5);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_5, x_4);
x_9 = l_lean_parser_command_notation__like_parser_lean_parser_has__tokens;
lean::inc(x_9);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_9, x_8);
x_12 = l_lean_parser_tokens___rarg(x_11);
lean::inc(x_4);
x_14 = l_lean_parser_list_cons_tokens___rarg(x_12, x_4);
x_15 = l_lean_parser_tokens___rarg(x_14);
x_16 = lean::mk_string(")");
lean::inc(x_1);
x_18 = l_lean_parser_symbol_tokens___rarg(x_16, x_1);
lean::inc(x_4);
x_20 = l_lean_parser_list_cons_tokens___rarg(x_18, x_4);
x_21 = l_lean_parser_list_cons_tokens___rarg(x_15, x_20);
x_22 = l_lean_parser_list_cons_tokens___rarg(x_3, x_21);
x_23 = l_lean_parser_tokens___rarg(x_22);
x_24 = lean::mk_string("{");
lean::inc(x_1);
x_26 = l_lean_parser_symbol_tokens___rarg(x_24, x_1);
x_27 = lean::mk_string("}");
lean::inc(x_1);
x_29 = l_lean_parser_symbol_tokens___rarg(x_27, x_1);
lean::inc(x_4);
x_31 = l_lean_parser_list_cons_tokens___rarg(x_29, x_4);
lean::inc(x_5);
x_33 = l_lean_parser_list_cons_tokens___rarg(x_5, x_31);
x_34 = l_lean_parser_list_cons_tokens___rarg(x_26, x_33);
x_35 = l_lean_parser_tokens___rarg(x_34);
x_36 = lean::mk_string("\xe2\xa6\x83");
lean::inc(x_1);
x_38 = l_lean_parser_symbol_tokens___rarg(x_36, x_1);
x_39 = lean::mk_string("\xe2\xa6\x84");
lean::inc(x_1);
x_41 = l_lean_parser_symbol_tokens___rarg(x_39, x_1);
lean::inc(x_4);
x_43 = l_lean_parser_list_cons_tokens___rarg(x_41, x_4);
lean::inc(x_5);
x_45 = l_lean_parser_list_cons_tokens___rarg(x_5, x_43);
x_46 = l_lean_parser_list_cons_tokens___rarg(x_38, x_45);
x_47 = l_lean_parser_tokens___rarg(x_46);
x_48 = lean::mk_string("[");
lean::inc(x_1);
x_50 = l_lean_parser_symbol_tokens___rarg(x_48, x_1);
x_51 = lean::mk_string(" : ");
lean::inc(x_1);
x_53 = l_lean_parser_symbol_tokens___rarg(x_51, x_1);
x_54 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_4);
lean::inc(x_54);
x_57 = l_lean_parser_list_cons_tokens___rarg(x_54, x_4);
lean::inc(x_57);
x_59 = l_lean_parser_list_cons_tokens___rarg(x_53, x_57);
lean::inc(x_4);
x_61 = l_lean_parser_list_cons_tokens___rarg(x_4, x_59);
x_62 = l_lean_parser_tokens___rarg(x_61);
x_63 = l_lean_parser_tokens___rarg(x_57);
lean::inc(x_4);
x_65 = l_lean_parser_list_cons_tokens___rarg(x_63, x_4);
x_66 = l_lean_parser_list_cons_tokens___rarg(x_62, x_65);
x_67 = l_lean_parser_tokens___rarg(x_66);
lean::inc(x_4);
x_69 = l_lean_parser_list_cons_tokens___rarg(x_67, x_4);
x_70 = l_lean_parser_tokens___rarg(x_69);
x_71 = lean::mk_string("]");
x_72 = l_lean_parser_symbol_tokens___rarg(x_71, x_1);
lean::inc(x_4);
x_74 = l_lean_parser_list_cons_tokens___rarg(x_72, x_4);
x_75 = l_lean_parser_list_cons_tokens___rarg(x_70, x_74);
x_76 = l_lean_parser_list_cons_tokens___rarg(x_50, x_75);
x_77 = l_lean_parser_tokens___rarg(x_76);
x_78 = l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__tokens;
lean::inc(x_4);
lean::inc(x_78);
x_81 = l_lean_parser_list_cons_tokens___rarg(x_78, x_4);
x_82 = l_lean_parser_list_cons_tokens___rarg(x_77, x_81);
x_83 = l_lean_parser_list_cons_tokens___rarg(x_47, x_82);
x_84 = l_lean_parser_list_cons_tokens___rarg(x_35, x_83);
x_85 = l_lean_parser_list_cons_tokens___rarg(x_23, x_84);
x_86 = l_lean_parser_tokens___rarg(x_85);
x_87 = l_lean_parser_list_cons_tokens___rarg(x_86, x_4);
x_88 = l_lean_parser_tokens___rarg(x_87);
return x_88;
}
}
obj* _init_l_lean_parser_term_binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__2;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; obj* x_91; obj* x_93; obj* x_94; 
lean::dec(x_86);
x_90 = l_lean_parser_term_binder__content_has__view;
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
x_93 = lean::apply_1(x_91, x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
else
{
obj* x_96; obj* x_97; obj* x_99; obj* x_100; 
lean::dec(x_86);
x_96 = l_lean_parser_term_bracketed__binder_has__view;
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
x_99 = lean::apply_1(x_97, x_1);
x_100 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_100, 0, x_99);
return x_100;
}
}
}
}
obj* _init_l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; obj* x_11; obj* x_13; obj* x_14; 
lean::dec(x_6);
x_10 = l_lean_parser_term_binder__content_has__view;
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_0);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
else
{
obj* x_16; obj* x_17; obj* x_19; obj* x_20; 
lean::dec(x_6);
x_16 = l_lean_parser_term_bracketed__binder_has__view;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::apply_1(x_17, x_0);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
}
}
obj* _init_l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_bracketed__binder_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
x_8 = lean::apply_1(x_6, x_2);
lean::inc(x_1);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_lean_parser_term_binder;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_33; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
x_21 = l_lean_parser_term_binder__content_has__view;
x_22 = lean::cnstr_get(x_21, 1);
lean::inc(x_22);
x_24 = lean::apply_1(x_22, x_18);
lean::inc(x_1);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_27);
x_29 = l_lean_parser_syntax_mk__node(x_27, x_26);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_1);
x_31 = l_lean_parser_term_binder;
lean::inc(x_31);
x_33 = l_lean_parser_syntax_mk__node(x_31, x_30);
return x_33;
}
}
}
obj* _init_l_lean_parser_term_binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_binder_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_binder;
x_6 = l_lean_parser_term_binder_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_binder_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__content_parser), 5, 0);
lean::inc(x_0);
x_3 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_3, 0, x_1);
lean::cnstr_set(x_3, 1, x_0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_4);
lean::cnstr_set(x_5, 1, x_3);
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_7, 0, x_5);
lean::closure_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_0);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_21; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__content_parser), 5, 0);
lean::inc(x_0);
x_3 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_3, 0, x_1);
lean::cnstr_set(x_3, 1, x_0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_4);
lean::cnstr_set(x_5, 1, x_3);
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_7, 0, x_5);
lean::closure_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_0);
x_9 = l_lean_parser_term__parser__m_monad;
x_10 = l_lean_parser_term__parser__m_monad__except;
x_11 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_12 = l_lean_parser_term__parser__m_alternative;
x_13 = l_lean_parser_term_binder;
x_14 = l_lean_parser_term_binder_has__view;
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
x_21 = l_lean_parser_combinators_node_view___rarg(x_9, x_10, x_11, x_12, x_13, x_8, x_14);
return x_21;
}
}
obj* _init_l_lean_parser_term_binder_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_0 = lean::box(0);
x_1 = l_lean_parser_term_binder__content_parser_lean_parser_has__tokens;
lean::inc(x_0);
lean::inc(x_1);
x_4 = l_lean_parser_list_cons_tokens___rarg(x_1, x_0);
x_5 = l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens;
lean::inc(x_5);
x_7 = l_lean_parser_list_cons_tokens___rarg(x_5, x_4);
x_8 = l_lean_parser_tokens___rarg(x_7);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_8, x_0);
x_10 = l_lean_parser_tokens___rarg(x_9);
return x_10;
}
}
obj* _init_l_lean_parser_term_binders__types() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binders_types");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binders__types_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__types_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__types_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binders__types_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
if (lean::is_shared(x_1)) {
 lean::dec(x_1);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_1, 0);
 x_7 = x_1;
}
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
lean::dec(x_7);
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; 
lean::dec(x_8);
x_13 = l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1;
lean::inc(x_13);
return x_13;
}
else
{
obj* x_15; obj* x_18; obj* x_19; 
x_15 = lean::cnstr_get(x_8, 0);
lean::inc(x_15);
lean::dec(x_8);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_15);
return x_19;
}
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_8, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_8, 1);
lean::inc(x_22);
lean::dec(x_8);
switch (lean::obj_tag(x_20)) {
case 0:
{
obj* x_25; obj* x_28; 
x_25 = lean::cnstr_get(x_20, 0);
lean::inc(x_25);
lean::dec(x_20);
if (lean::is_scalar(x_7)) {
 x_28 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_28 = x_7;
}
lean::cnstr_set(x_28, 0, x_25);
if (lean::obj_tag(x_22) == 0)
{
obj* x_30; obj* x_31; 
lean::dec(x_22);
x_30 = lean::box(3);
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_30);
return x_31;
}
else
{
obj* x_32; obj* x_35; 
x_32 = lean::cnstr_get(x_22, 0);
lean::inc(x_32);
lean::dec(x_22);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_28);
lean::cnstr_set(x_35, 1, x_32);
return x_35;
}
}
case 1:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_39; 
lean::dec(x_22);
x_39 = l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1;
lean::inc(x_39);
return x_39;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_22, 0);
lean::inc(x_41);
lean::dec(x_22);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
case 2:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_49; 
lean::dec(x_22);
x_49 = l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1;
lean::inc(x_49);
return x_49;
}
else
{
obj* x_51; obj* x_54; obj* x_55; 
x_51 = lean::cnstr_get(x_22, 0);
lean::inc(x_51);
lean::dec(x_22);
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_51);
return x_55;
}
}
default:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_59; 
lean::dec(x_22);
x_59 = l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1;
lean::inc(x_59);
return x_59;
}
else
{
obj* x_61; obj* x_64; obj* x_65; 
x_61 = lean::cnstr_get(x_22, 0);
lean::inc(x_61);
lean::dec(x_22);
x_64 = lean::box(0);
x_65 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_61);
return x_65;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binders__types_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_6);
x_8 = l_option_map___rarg(x_6, x_1);
x_9 = lean::box(3);
x_10 = l_option_get__or__else___main___rarg(x_8, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_3);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_10);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_lean_parser_term_binders__types;
lean::inc(x_14);
x_16 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_16;
}
}
obj* _init_l_lean_parser_term_binders__types_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binders__types_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_mixed__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("mixed_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_mixed__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_mixed__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__2;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; obj* x_91; obj* x_93; obj* x_94; 
lean::dec(x_86);
x_90 = l_lean_parser_term_binder__ident_has__view;
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
x_93 = lean::apply_1(x_91, x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
else
{
obj* x_96; obj* x_97; obj* x_99; obj* x_100; 
lean::dec(x_86);
x_96 = l_lean_parser_term_bracketed__binder_has__view;
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
x_99 = lean::apply_1(x_97, x_1);
x_100 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_100, 0, x_99);
return x_100;
}
}
}
}
obj* _init_l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; obj* x_11; obj* x_13; obj* x_14; 
lean::dec(x_6);
x_10 = l_lean_parser_term_binder__ident_has__view;
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_0);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
else
{
obj* x_16; obj* x_17; obj* x_19; obj* x_20; 
lean::dec(x_6);
x_16 = l_lean_parser_term_bracketed__binder_has__view;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::apply_1(x_17, x_0);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
}
}
obj* _init_l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("mixed_binder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_mixed__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_bracketed__binder_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
x_8 = lean::apply_1(x_6, x_2);
lean::inc(x_1);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_lean_parser_term_mixed__binder;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_33; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
x_21 = l_lean_parser_term_binder__ident_has__view;
x_22 = lean::cnstr_get(x_21, 1);
lean::inc(x_22);
x_24 = lean::apply_1(x_22, x_18);
lean::inc(x_1);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_27);
x_29 = l_lean_parser_syntax_mk__node(x_27, x_26);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_1);
x_31 = l_lean_parser_term_mixed__binder;
lean::inc(x_31);
x_33 = l_lean_parser_syntax_mk__node(x_31, x_30);
return x_33;
}
}
}
obj* _init_l_lean_parser_term_mixed__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_mixed__binder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_binders__remainder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binders_remainder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binders__remainder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__4;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; 
lean::dec(x_86);
x_90 = l_lean_parser_syntax_as__node___main(x_1);
if (lean::obj_tag(x_90) == 0)
{
obj* x_92; 
lean::dec(x_90);
x_92 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_92);
return x_92;
}
else
{
obj* x_94; obj* x_97; obj* x_100; obj* x_102; obj* x_103; 
x_94 = lean::cnstr_get(x_90, 0);
lean::inc(x_94);
lean::dec(x_90);
x_97 = lean::cnstr_get(x_94, 1);
lean::inc(x_97);
lean::dec(x_94);
x_100 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__2;
lean::inc(x_100);
x_102 = l_list_map___main___rarg(x_100, x_97);
x_103 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_103, 0, x_102);
return x_103;
}
}
else
{
obj* x_105; obj* x_106; obj* x_108; obj* x_109; 
lean::dec(x_86);
x_105 = l_lean_parser_term_binders__types_has__view;
x_106 = lean::cnstr_get(x_105, 0);
lean::inc(x_106);
x_108 = lean::apply_1(x_106, x_1);
x_109 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_109, 0, x_108);
return x_109;
}
}
}
}
obj* _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = l_lean_parser_term_mixed__binder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
}
obj* _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_mixed__binder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
return x_1;
}
}
obj* _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_6);
x_10 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_10) == 0)
{
obj* x_12; 
lean::dec(x_10);
x_12 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__1;
lean::inc(x_12);
return x_12;
}
else
{
obj* x_14; obj* x_17; obj* x_20; obj* x_22; obj* x_23; 
x_14 = lean::cnstr_get(x_10, 0);
lean::inc(x_14);
lean::dec(x_10);
x_17 = lean::cnstr_get(x_14, 1);
lean::inc(x_17);
lean::dec(x_14);
x_20 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__2;
lean::inc(x_20);
x_22 = l_list_map___main___rarg(x_20, x_17);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_22);
return x_23;
}
}
else
{
obj* x_25; obj* x_26; obj* x_28; obj* x_29; 
lean::dec(x_6);
x_25 = l_lean_parser_term_binders__types_has__view;
x_26 = lean::cnstr_get(x_25, 0);
lean::inc(x_26);
x_28 = lean::apply_1(x_26, x_0);
x_29 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_29, 0, x_28);
return x_29;
}
}
}
}
obj* _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binders_remainder");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_binders__types_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
x_8 = lean::apply_1(x_6, x_2);
lean::inc(x_1);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_lean_parser_term_binders__remainder;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_23; obj* x_24; obj* x_26; obj* x_28; obj* x_29; obj* x_31; obj* x_32; obj* x_33; obj* x_35; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
x_21 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2___closed__1;
lean::inc(x_21);
x_23 = l_list_map___main___rarg(x_21, x_18);
x_24 = l_lean_parser_no__kind;
lean::inc(x_24);
x_26 = l_lean_parser_syntax_mk__node(x_24, x_23);
lean::inc(x_1);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_26);
lean::cnstr_set(x_28, 1, x_1);
x_29 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_29);
x_31 = l_lean_parser_syntax_mk__node(x_29, x_28);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_1);
x_33 = l_lean_parser_term_binders__remainder;
lean::inc(x_33);
x_35 = l_lean_parser_syntax_mk__node(x_33, x_32);
return x_35;
}
}
}
obj* _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_mixed__binder_has__view;
x_1 = lean::cnstr_get(x_0, 1);
lean::inc(x_1);
return x_1;
}
}
obj* _init_l_lean_parser_term_binders__remainder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binders__remainder_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_binders__ext() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binders_ext");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binders__ext_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__ext_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__ext_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__5;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
x_20 = l_lean_parser_syntax_as__node___main(x_2);
if (lean::obj_tag(x_20) == 0)
{
lean::dec(x_20);
if (lean::obj_tag(x_1) == 0)
{
obj* x_23; 
lean::dec(x_1);
x_23 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__3;
lean::inc(x_23);
return x_23;
}
else
{
obj* x_25; obj* x_28; 
x_25 = lean::cnstr_get(x_1, 0);
lean::inc(x_25);
lean::dec(x_1);
x_28 = l_lean_parser_syntax_as__node___main(x_25);
if (lean::obj_tag(x_28) == 0)
{
obj* x_30; 
lean::dec(x_28);
x_30 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1;
lean::inc(x_30);
return x_30;
}
else
{
obj* x_32; obj* x_34; obj* x_35; 
x_32 = lean::cnstr_get(x_28, 0);
lean::inc(x_32);
if (lean::is_shared(x_28)) {
 lean::dec(x_28);
 x_34 = lean::box(0);
} else {
 lean::cnstr_release(x_28, 0);
 x_34 = x_28;
}
x_35 = lean::cnstr_get(x_32, 1);
lean::inc(x_35);
lean::dec(x_32);
if (lean::obj_tag(x_35) == 0)
{
obj* x_40; 
lean::dec(x_34);
lean::dec(x_35);
x_40 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2;
lean::inc(x_40);
return x_40;
}
else
{
obj* x_42; obj* x_44; 
x_42 = lean::cnstr_get(x_35, 0);
lean::inc(x_42);
x_44 = lean::cnstr_get(x_35, 1);
lean::inc(x_44);
lean::dec(x_35);
if (lean::obj_tag(x_44) == 0)
{
obj* x_48; obj* x_49; obj* x_51; obj* x_52; obj* x_53; obj* x_55; 
lean::dec(x_44);
x_48 = l_lean_parser_term_binders__remainder_has__view;
x_49 = lean::cnstr_get(x_48, 0);
lean::inc(x_49);
x_51 = lean::apply_1(x_49, x_42);
if (lean::is_scalar(x_34)) {
 x_52 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_52 = x_34;
}
lean::cnstr_set(x_52, 0, x_51);
x_53 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3;
lean::inc(x_53);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_53);
lean::cnstr_set(x_55, 1, x_52);
return x_55;
}
else
{
obj* x_59; 
lean::dec(x_44);
lean::dec(x_42);
lean::dec(x_34);
x_59 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1;
lean::inc(x_59);
return x_59;
}
}
}
}
}
else
{
obj* x_61; obj* x_63; obj* x_64; obj* x_67; obj* x_69; 
x_61 = lean::cnstr_get(x_20, 0);
lean::inc(x_61);
if (lean::is_shared(x_20)) {
 lean::dec(x_20);
 x_63 = lean::box(0);
} else {
 lean::cnstr_release(x_20, 0);
 x_63 = x_20;
}
x_64 = lean::cnstr_get(x_61, 1);
lean::inc(x_64);
lean::dec(x_61);
x_67 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4;
lean::inc(x_67);
x_69 = l_list_map___main___rarg(x_67, x_64);
if (lean::obj_tag(x_1) == 0)
{
obj* x_71; obj* x_72; 
lean::dec(x_1);
x_71 = lean::box(3);
x_72 = l_lean_parser_syntax_as__node___main(x_71);
if (lean::obj_tag(x_72) == 0)
{
obj* x_75; obj* x_77; 
lean::dec(x_72);
lean::dec(x_63);
x_75 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
lean::inc(x_75);
x_77 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_77, 0, x_69);
lean::cnstr_set(x_77, 1, x_75);
return x_77;
}
else
{
obj* x_78; obj* x_81; 
x_78 = lean::cnstr_get(x_72, 0);
lean::inc(x_78);
lean::dec(x_72);
x_81 = lean::cnstr_get(x_78, 1);
lean::inc(x_81);
lean::dec(x_78);
if (lean::obj_tag(x_81) == 0)
{
obj* x_86; obj* x_87; 
lean::dec(x_81);
lean::dec(x_63);
x_86 = lean::box(0);
x_87 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_87, 0, x_69);
lean::cnstr_set(x_87, 1, x_86);
return x_87;
}
else
{
obj* x_88; obj* x_90; 
x_88 = lean::cnstr_get(x_81, 0);
lean::inc(x_88);
x_90 = lean::cnstr_get(x_81, 1);
lean::inc(x_90);
lean::dec(x_81);
if (lean::obj_tag(x_90) == 0)
{
obj* x_94; obj* x_95; obj* x_97; obj* x_98; obj* x_99; 
lean::dec(x_90);
x_94 = l_lean_parser_term_binders__remainder_has__view;
x_95 = lean::cnstr_get(x_94, 0);
lean::inc(x_95);
x_97 = lean::apply_1(x_95, x_88);
if (lean::is_scalar(x_63)) {
 x_98 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_98 = x_63;
}
lean::cnstr_set(x_98, 0, x_97);
x_99 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_99, 0, x_69);
lean::cnstr_set(x_99, 1, x_98);
return x_99;
}
else
{
obj* x_103; obj* x_105; 
lean::dec(x_88);
lean::dec(x_90);
lean::dec(x_63);
x_103 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
lean::inc(x_103);
x_105 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_105, 0, x_69);
lean::cnstr_set(x_105, 1, x_103);
return x_105;
}
}
}
}
else
{
obj* x_106; obj* x_109; 
x_106 = lean::cnstr_get(x_1, 0);
lean::inc(x_106);
lean::dec(x_1);
x_109 = l_lean_parser_syntax_as__node___main(x_106);
if (lean::obj_tag(x_109) == 0)
{
obj* x_112; obj* x_114; 
lean::dec(x_109);
lean::dec(x_63);
x_112 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
lean::inc(x_112);
x_114 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_114, 0, x_69);
lean::cnstr_set(x_114, 1, x_112);
return x_114;
}
else
{
obj* x_115; obj* x_118; 
x_115 = lean::cnstr_get(x_109, 0);
lean::inc(x_115);
lean::dec(x_109);
x_118 = lean::cnstr_get(x_115, 1);
lean::inc(x_118);
lean::dec(x_115);
if (lean::obj_tag(x_118) == 0)
{
obj* x_123; obj* x_124; 
lean::dec(x_118);
lean::dec(x_63);
x_123 = lean::box(0);
x_124 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_124, 0, x_69);
lean::cnstr_set(x_124, 1, x_123);
return x_124;
}
else
{
obj* x_125; obj* x_127; 
x_125 = lean::cnstr_get(x_118, 0);
lean::inc(x_125);
x_127 = lean::cnstr_get(x_118, 1);
lean::inc(x_127);
lean::dec(x_118);
if (lean::obj_tag(x_127) == 0)
{
obj* x_131; obj* x_132; obj* x_134; obj* x_135; obj* x_136; 
lean::dec(x_127);
x_131 = l_lean_parser_term_binders__remainder_has__view;
x_132 = lean::cnstr_get(x_131, 0);
lean::inc(x_132);
x_134 = lean::apply_1(x_132, x_125);
if (lean::is_scalar(x_63)) {
 x_135 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_135 = x_63;
}
lean::cnstr_set(x_135, 0, x_134);
x_136 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_136, 0, x_69);
lean::cnstr_set(x_136, 1, x_135);
return x_136;
}
else
{
obj* x_140; obj* x_142; 
lean::dec(x_125);
lean::dec(x_127);
lean::dec(x_63);
x_140 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
lean::inc(x_140);
x_142 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_142, 0, x_69);
lean::cnstr_set(x_142, 1, x_140);
return x_142;
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; 
x_0 = l_lean_parser_term_binder__ident_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
lean::inc(x_3);
x_5 = lean::apply_1(x_1, x_3);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = l_lean_parser_term_binders__remainder_has__view;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
x_11 = lean::apply_1(x_9, x_3);
x_12 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_12, 0, x_11);
x_13 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_13, 0, x_7);
lean::cnstr_set(x_13, 1, x_12);
return x_13;
}
}
obj* _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_0 = l_lean_parser_term_binder__ident_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::box(0);
lean::inc(x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_4);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_5);
return x_8;
}
}
obj* _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
if (lean::is_shared(x_1)) {
 lean::dec(x_1);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_1, 0);
 x_7 = x_1;
}
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; 
lean::dec(x_7);
lean::dec(x_8);
x_13 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2;
lean::inc(x_13);
return x_13;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_8, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
lean::dec(x_8);
if (lean::obj_tag(x_17) == 0)
{
obj* x_21; obj* x_22; obj* x_24; obj* x_25; obj* x_26; obj* x_28; 
lean::dec(x_17);
x_21 = l_lean_parser_term_binders__remainder_has__view;
x_22 = lean::cnstr_get(x_21, 0);
lean::inc(x_22);
x_24 = lean::apply_1(x_22, x_15);
if (lean::is_scalar(x_7)) {
 x_25 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_25 = x_7;
}
lean::cnstr_set(x_25, 0, x_24);
x_26 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3;
lean::inc(x_26);
x_28 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_28, 0, x_26);
lean::cnstr_set(x_28, 1, x_25);
return x_28;
}
else
{
obj* x_32; 
lean::dec(x_15);
lean::dec(x_17);
lean::dec(x_7);
x_32 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1;
lean::inc(x_32);
return x_32;
}
}
}
}
}
obj* _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_term_binders__remainder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__5() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
x_5 = l_lean_parser_syntax_as__node___main(x_1);
if (lean::obj_tag(x_5) == 0)
{
lean::dec(x_5);
if (lean::obj_tag(x_0) == 0)
{
obj* x_8; 
lean::dec(x_0);
x_8 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__3;
lean::inc(x_8);
return x_8;
}
else
{
obj* x_10; obj* x_13; 
x_10 = lean::cnstr_get(x_0, 0);
lean::inc(x_10);
lean::dec(x_0);
x_13 = l_lean_parser_syntax_as__node___main(x_10);
if (lean::obj_tag(x_13) == 0)
{
obj* x_15; 
lean::dec(x_13);
x_15 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1;
lean::inc(x_15);
return x_15;
}
else
{
obj* x_17; obj* x_19; obj* x_20; 
x_17 = lean::cnstr_get(x_13, 0);
lean::inc(x_17);
if (lean::is_shared(x_13)) {
 lean::dec(x_13);
 x_19 = lean::box(0);
} else {
 lean::cnstr_release(x_13, 0);
 x_19 = x_13;
}
x_20 = lean::cnstr_get(x_17, 1);
lean::inc(x_20);
lean::dec(x_17);
if (lean::obj_tag(x_20) == 0)
{
obj* x_25; 
lean::dec(x_19);
lean::dec(x_20);
x_25 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_20, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_20, 1);
lean::inc(x_29);
lean::dec(x_20);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; obj* x_34; obj* x_36; obj* x_37; obj* x_38; obj* x_40; 
lean::dec(x_29);
x_33 = l_lean_parser_term_binders__remainder_has__view;
x_34 = lean::cnstr_get(x_33, 0);
lean::inc(x_34);
x_36 = lean::apply_1(x_34, x_27);
if (lean::is_scalar(x_19)) {
 x_37 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_37 = x_19;
}
lean::cnstr_set(x_37, 0, x_36);
x_38 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3;
lean::inc(x_38);
x_40 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_40, 0, x_38);
lean::cnstr_set(x_40, 1, x_37);
return x_40;
}
else
{
obj* x_44; 
lean::dec(x_19);
lean::dec(x_27);
lean::dec(x_29);
x_44 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1;
lean::inc(x_44);
return x_44;
}
}
}
}
}
else
{
obj* x_46; obj* x_48; obj* x_49; obj* x_52; obj* x_54; 
x_46 = lean::cnstr_get(x_5, 0);
lean::inc(x_46);
if (lean::is_shared(x_5)) {
 lean::dec(x_5);
 x_48 = lean::box(0);
} else {
 lean::cnstr_release(x_5, 0);
 x_48 = x_5;
}
x_49 = lean::cnstr_get(x_46, 1);
lean::inc(x_49);
lean::dec(x_46);
x_52 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4;
lean::inc(x_52);
x_54 = l_list_map___main___rarg(x_52, x_49);
if (lean::obj_tag(x_0) == 0)
{
obj* x_56; obj* x_57; 
lean::dec(x_0);
x_56 = lean::box(3);
x_57 = l_lean_parser_syntax_as__node___main(x_56);
if (lean::obj_tag(x_57) == 0)
{
obj* x_60; obj* x_62; 
lean::dec(x_48);
lean::dec(x_57);
x_60 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
lean::inc(x_60);
x_62 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_62, 0, x_54);
lean::cnstr_set(x_62, 1, x_60);
return x_62;
}
else
{
obj* x_63; obj* x_66; 
x_63 = lean::cnstr_get(x_57, 0);
lean::inc(x_63);
lean::dec(x_57);
x_66 = lean::cnstr_get(x_63, 1);
lean::inc(x_66);
lean::dec(x_63);
if (lean::obj_tag(x_66) == 0)
{
obj* x_71; obj* x_72; 
lean::dec(x_48);
lean::dec(x_66);
x_71 = lean::box(0);
x_72 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_72, 0, x_54);
lean::cnstr_set(x_72, 1, x_71);
return x_72;
}
else
{
obj* x_73; obj* x_75; 
x_73 = lean::cnstr_get(x_66, 0);
lean::inc(x_73);
x_75 = lean::cnstr_get(x_66, 1);
lean::inc(x_75);
lean::dec(x_66);
if (lean::obj_tag(x_75) == 0)
{
obj* x_79; obj* x_80; obj* x_82; obj* x_83; obj* x_84; 
lean::dec(x_75);
x_79 = l_lean_parser_term_binders__remainder_has__view;
x_80 = lean::cnstr_get(x_79, 0);
lean::inc(x_80);
x_82 = lean::apply_1(x_80, x_73);
if (lean::is_scalar(x_48)) {
 x_83 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_83 = x_48;
}
lean::cnstr_set(x_83, 0, x_82);
x_84 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_84, 0, x_54);
lean::cnstr_set(x_84, 1, x_83);
return x_84;
}
else
{
obj* x_88; obj* x_90; 
lean::dec(x_48);
lean::dec(x_75);
lean::dec(x_73);
x_88 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
lean::inc(x_88);
x_90 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_90, 0, x_54);
lean::cnstr_set(x_90, 1, x_88);
return x_90;
}
}
}
}
else
{
obj* x_91; obj* x_94; 
x_91 = lean::cnstr_get(x_0, 0);
lean::inc(x_91);
lean::dec(x_0);
x_94 = l_lean_parser_syntax_as__node___main(x_91);
if (lean::obj_tag(x_94) == 0)
{
obj* x_97; obj* x_99; 
lean::dec(x_94);
lean::dec(x_48);
x_97 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
lean::inc(x_97);
x_99 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_99, 0, x_54);
lean::cnstr_set(x_99, 1, x_97);
return x_99;
}
else
{
obj* x_100; obj* x_103; 
x_100 = lean::cnstr_get(x_94, 0);
lean::inc(x_100);
lean::dec(x_94);
x_103 = lean::cnstr_get(x_100, 1);
lean::inc(x_103);
lean::dec(x_100);
if (lean::obj_tag(x_103) == 0)
{
obj* x_108; obj* x_109; 
lean::dec(x_103);
lean::dec(x_48);
x_108 = lean::box(0);
x_109 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_109, 0, x_54);
lean::cnstr_set(x_109, 1, x_108);
return x_109;
}
else
{
obj* x_110; obj* x_112; 
x_110 = lean::cnstr_get(x_103, 0);
lean::inc(x_110);
x_112 = lean::cnstr_get(x_103, 1);
lean::inc(x_112);
lean::dec(x_103);
if (lean::obj_tag(x_112) == 0)
{
obj* x_116; obj* x_117; obj* x_119; obj* x_120; obj* x_121; 
lean::dec(x_112);
x_116 = l_lean_parser_term_binders__remainder_has__view;
x_117 = lean::cnstr_get(x_116, 0);
lean::inc(x_117);
x_119 = lean::apply_1(x_117, x_110);
if (lean::is_scalar(x_48)) {
 x_120 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_120 = x_48;
}
lean::cnstr_set(x_120, 0, x_119);
x_121 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_121, 0, x_54);
lean::cnstr_set(x_121, 1, x_120);
return x_121;
}
else
{
obj* x_125; obj* x_127; 
lean::dec(x_112);
lean::dec(x_48);
lean::dec(x_110);
x_125 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
lean::inc(x_125);
x_127 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_127, 0, x_54);
lean::cnstr_set(x_127, 1, x_125);
return x_127;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_8; obj* x_9; obj* x_11; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__1;
lean::inc(x_6);
x_8 = l_list_map___main___rarg(x_6, x_1);
x_9 = l_lean_parser_no__kind;
lean::inc(x_9);
x_11 = l_lean_parser_syntax_mk__node(x_9, x_8);
if (lean::obj_tag(x_3) == 0)
{
obj* x_13; obj* x_15; obj* x_16; obj* x_18; 
lean::dec(x_3);
x_13 = l_lean_parser_detail__ident_has__view_x_27___lambda__2___closed__1;
lean::inc(x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_11);
lean::cnstr_set(x_15, 1, x_13);
x_16 = l_lean_parser_term_binders__ext;
lean::inc(x_16);
x_18 = l_lean_parser_syntax_mk__node(x_16, x_15);
return x_18;
}
else
{
obj* x_19; obj* x_22; obj* x_23; obj* x_24; obj* x_26; obj* x_28; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_35; 
x_19 = lean::cnstr_get(x_3, 0);
lean::inc(x_19);
lean::dec(x_3);
x_22 = lean::box(0);
x_23 = l_lean_parser_term_binders__remainder_has__view;
x_24 = lean::cnstr_get(x_23, 1);
lean::inc(x_24);
x_26 = lean::apply_1(x_24, x_19);
lean::inc(x_22);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_26);
lean::cnstr_set(x_28, 1, x_22);
lean::inc(x_9);
x_30 = l_lean_parser_syntax_mk__node(x_9, x_28);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_22);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_11);
lean::cnstr_set(x_32, 1, x_31);
x_33 = l_lean_parser_term_binders__ext;
lean::inc(x_33);
x_35 = l_lean_parser_syntax_mk__node(x_33, x_32);
return x_35;
}
}
}
obj* _init_l_lean_parser_term_binders__ext_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binders__ext_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_binders__ext_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_binders__ext;
x_6 = l_lean_parser_term_binders__ext_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_binders__ext_parser___closed__1() {
_start:
{
obj* x_0; obj* x_2; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_32; obj* x_33; obj* x_34; obj* x_36; obj* x_37; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__ident_parser), 5, 0);
lean::inc(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser___spec__1), 6, 1);
lean::closure_set(x_2, 0, x_0);
x_3 = lean::mk_string(":");
x_4 = l_string_trim(x_3);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::mk_nat_obj(0u);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_9, 0, x_4);
lean::closure_set(x_9, 1, x_7);
lean::closure_set(x_9, 2, x_6);
lean::inc(x_7);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_11, 0, x_7);
x_12 = lean::box(0);
lean::inc(x_12);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_11);
lean::cnstr_set(x_14, 1, x_12);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_9);
lean::cnstr_set(x_15, 1, x_14);
x_16 = l_lean_parser_term_binders__types;
lean::inc(x_16);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_18, 0, x_16);
lean::closure_set(x_18, 1, x_15);
lean::inc(x_12);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_0);
lean::cnstr_set(x_20, 1, x_12);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_20);
lean::inc(x_7);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_24, 0, x_22);
lean::closure_set(x_24, 1, x_7);
lean::inc(x_12);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_12);
x_27 = l_lean_parser_term_mixed__binder;
lean::inc(x_27);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_29, 0, x_27);
lean::closure_set(x_29, 1, x_26);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many1___at_lean_parser_command_notation__spec_parser___spec__2), 6, 1);
lean::closure_set(x_30, 0, x_29);
lean::inc(x_12);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_30);
lean::cnstr_set(x_32, 1, x_12);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_18);
lean::cnstr_set(x_33, 1, x_32);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_34, 0, x_33);
lean::closure_set(x_34, 1, x_7);
lean::inc(x_12);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_34);
lean::cnstr_set(x_36, 1, x_12);
x_37 = l_lean_parser_term_binders__remainder;
lean::inc(x_37);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_39, 0, x_37);
lean::closure_set(x_39, 1, x_36);
x_40 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_40, 0, x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_12);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_2);
lean::cnstr_set(x_42, 1, x_41);
return x_42;
}
}
obj* _init_l_lean_parser_term_binders__ext_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_2; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_32; obj* x_33; obj* x_34; obj* x_36; obj* x_37; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_55; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__ident_parser), 5, 0);
lean::inc(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser___spec__1), 6, 1);
lean::closure_set(x_2, 0, x_0);
x_3 = lean::mk_string(":");
x_4 = l_string_trim(x_3);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::mk_nat_obj(0u);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_9, 0, x_4);
lean::closure_set(x_9, 1, x_7);
lean::closure_set(x_9, 2, x_6);
lean::inc(x_7);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_11, 0, x_7);
x_12 = lean::box(0);
lean::inc(x_12);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_11);
lean::cnstr_set(x_14, 1, x_12);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_9);
lean::cnstr_set(x_15, 1, x_14);
x_16 = l_lean_parser_term_binders__types;
lean::inc(x_16);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_18, 0, x_16);
lean::closure_set(x_18, 1, x_15);
lean::inc(x_12);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_0);
lean::cnstr_set(x_20, 1, x_12);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_20);
lean::inc(x_7);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_24, 0, x_22);
lean::closure_set(x_24, 1, x_7);
lean::inc(x_12);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_12);
x_27 = l_lean_parser_term_mixed__binder;
lean::inc(x_27);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_29, 0, x_27);
lean::closure_set(x_29, 1, x_26);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many1___at_lean_parser_command_notation__spec_parser___spec__2), 6, 1);
lean::closure_set(x_30, 0, x_29);
lean::inc(x_12);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_30);
lean::cnstr_set(x_32, 1, x_12);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_18);
lean::cnstr_set(x_33, 1, x_32);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_34, 0, x_33);
lean::closure_set(x_34, 1, x_7);
lean::inc(x_12);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_34);
lean::cnstr_set(x_36, 1, x_12);
x_37 = l_lean_parser_term_binders__remainder;
lean::inc(x_37);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_39, 0, x_37);
lean::closure_set(x_39, 1, x_36);
x_40 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_40, 0, x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_12);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_2);
lean::cnstr_set(x_42, 1, x_41);
x_43 = l_lean_parser_term__parser__m_monad;
x_44 = l_lean_parser_term__parser__m_monad__except;
x_45 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_46 = l_lean_parser_term__parser__m_alternative;
x_47 = l_lean_parser_term_binders__ext;
x_48 = l_lean_parser_term_binders__ext_has__view;
lean::inc(x_48);
lean::inc(x_47);
lean::inc(x_46);
lean::inc(x_45);
lean::inc(x_44);
lean::inc(x_43);
x_55 = l_lean_parser_combinators_node_view___rarg(x_43, x_44, x_45, x_46, x_47, x_42, x_48);
return x_55;
}
}
obj* _init_l_lean_parser_term_binders__ext_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_10; obj* x_11; obj* x_12; obj* x_15; obj* x_16; obj* x_18; obj* x_19; obj* x_21; obj* x_22; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_0 = l_lean_parser_term_binder__ident_parser_lean_parser_has__tokens;
lean::inc(x_0);
x_2 = l_lean_parser_tokens___rarg(x_0);
x_3 = lean::mk_string(":");
x_4 = lean::mk_nat_obj(0u);
x_5 = l_lean_parser_symbol_tokens___rarg(x_3, x_4);
x_6 = lean::box(0);
x_7 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_6);
lean::inc(x_7);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_7, x_6);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_5, x_10);
x_12 = l_lean_parser_tokens___rarg(x_11);
lean::inc(x_6);
lean::inc(x_0);
x_15 = l_lean_parser_list_cons_tokens___rarg(x_0, x_6);
x_16 = l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens;
lean::inc(x_16);
x_18 = l_lean_parser_list_cons_tokens___rarg(x_16, x_15);
x_19 = l_lean_parser_tokens___rarg(x_18);
lean::inc(x_6);
x_21 = l_lean_parser_list_cons_tokens___rarg(x_19, x_6);
x_22 = l_lean_parser_tokens___rarg(x_21);
x_23 = l_lean_parser_tokens___rarg(x_22);
lean::inc(x_6);
x_25 = l_lean_parser_list_cons_tokens___rarg(x_23, x_6);
x_26 = l_lean_parser_list_cons_tokens___rarg(x_12, x_25);
x_27 = l_lean_parser_tokens___rarg(x_26);
lean::inc(x_6);
x_29 = l_lean_parser_list_cons_tokens___rarg(x_27, x_6);
x_30 = l_lean_parser_tokens___rarg(x_29);
x_31 = l_lean_parser_tokens___rarg(x_30);
x_32 = l_lean_parser_list_cons_tokens___rarg(x_31, x_6);
x_33 = l_lean_parser_list_cons_tokens___rarg(x_2, x_32);
x_34 = l_lean_parser_tokens___rarg(x_33);
return x_34;
}
}
obj* _init_l_lean_parser_term_binders() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binders");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binders_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binders_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__2;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; obj* x_91; obj* x_93; obj* x_94; 
lean::dec(x_86);
x_90 = l_lean_parser_term_simple__binder_has__view;
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
x_93 = lean::apply_1(x_91, x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
else
{
obj* x_96; obj* x_97; obj* x_99; obj* x_100; 
lean::dec(x_86);
x_96 = l_lean_parser_term_binders__ext_has__view;
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
x_99 = lean::apply_1(x_97, x_1);
x_100 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_100, 0, x_99);
return x_100;
}
}
}
}
obj* _init_l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; obj* x_11; obj* x_13; obj* x_14; 
lean::dec(x_6);
x_10 = l_lean_parser_term_simple__binder_has__view;
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_0);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
else
{
obj* x_16; obj* x_17; obj* x_19; obj* x_20; 
lean::dec(x_6);
x_16 = l_lean_parser_term_binders__ext_has__view;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::apply_1(x_17, x_0);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
}
}
obj* _init_l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("binders");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_binders_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_binders__ext_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
x_8 = lean::apply_1(x_6, x_2);
lean::inc(x_1);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_lean_parser_term_binders;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_33; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
x_21 = l_lean_parser_term_simple__binder_has__view;
x_22 = lean::cnstr_get(x_21, 1);
lean::inc(x_22);
x_24 = lean::apply_1(x_22, x_18);
lean::inc(x_1);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_27);
x_29 = l_lean_parser_syntax_mk__node(x_27, x_26);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_1);
x_31 = l_lean_parser_term_binders;
lean::inc(x_31);
x_33 = l_lean_parser_syntax_mk__node(x_31, x_30);
return x_33;
}
}
}
obj* _init_l_lean_parser_term_binders_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binders_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_binders_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_binders;
x_6 = l_lean_parser_term_binders_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_binders_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__binder_parser), 5, 0);
lean::inc(x_0);
x_3 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_3, 0, x_1);
lean::cnstr_set(x_3, 1, x_0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__ext_parser), 5, 0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_4);
lean::cnstr_set(x_5, 1, x_3);
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_7, 0, x_5);
lean::closure_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_0);
return x_8;
}
}
obj* _init_l_lean_parser_term_binders_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_21; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__binder_parser), 5, 0);
lean::inc(x_0);
x_3 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_3, 0, x_1);
lean::cnstr_set(x_3, 1, x_0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__ext_parser), 5, 0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_4);
lean::cnstr_set(x_5, 1, x_3);
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_7, 0, x_5);
lean::closure_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_0);
x_9 = l_lean_parser_term__parser__m_monad;
x_10 = l_lean_parser_term__parser__m_monad__except;
x_11 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_12 = l_lean_parser_term__parser__m_alternative;
x_13 = l_lean_parser_term_binders;
x_14 = l_lean_parser_term_binders_has__view;
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
x_21 = l_lean_parser_combinators_node_view___rarg(x_9, x_10, x_11, x_12, x_13, x_8, x_14);
return x_21;
}
}
obj* _init_l_lean_parser_term_binders_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_0 = lean::box(0);
x_1 = l_lean_parser_term_simple__binder_parser_lean_parser_has__tokens;
lean::inc(x_0);
lean::inc(x_1);
x_4 = l_lean_parser_list_cons_tokens___rarg(x_1, x_0);
x_5 = l_lean_parser_term_binders__ext_parser_lean_parser_has__tokens;
lean::inc(x_5);
x_7 = l_lean_parser_list_cons_tokens___rarg(x_5, x_4);
x_8 = l_lean_parser_tokens___rarg(x_7);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_8, x_0);
x_10 = l_lean_parser_tokens___rarg(x_9);
return x_10;
}
}
obj* _init_l_lean_parser_term_bracketed__binders() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("bracketed_binders");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__6;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; 
lean::dec(x_86);
x_90 = l_lean_parser_syntax_as__node___main(x_1);
if (lean::obj_tag(x_90) == 0)
{
obj* x_92; 
lean::dec(x_90);
x_92 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_92);
return x_92;
}
else
{
obj* x_94; obj* x_97; obj* x_100; obj* x_102; obj* x_103; 
x_94 = lean::cnstr_get(x_90, 0);
lean::inc(x_94);
lean::dec(x_90);
x_97 = lean::cnstr_get(x_94, 1);
lean::inc(x_97);
lean::dec(x_94);
x_100 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__2;
lean::inc(x_100);
x_102 = l_list_map___main___rarg(x_100, x_97);
x_103 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_103, 0, x_102);
return x_103;
}
}
else
{
obj* x_105; 
lean::dec(x_86);
x_105 = l_lean_parser_syntax_as__node___main(x_1);
if (lean::obj_tag(x_105) == 0)
{
obj* x_107; 
lean::dec(x_105);
x_107 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__3;
lean::inc(x_107);
return x_107;
}
else
{
obj* x_109; obj* x_112; obj* x_115; obj* x_117; obj* x_118; 
x_109 = lean::cnstr_get(x_105, 0);
lean::inc(x_109);
lean::dec(x_105);
x_112 = lean::cnstr_get(x_109, 1);
lean::inc(x_112);
lean::dec(x_109);
x_115 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4;
lean::inc(x_115);
x_117 = l_list_map___main___rarg(x_115, x_112);
x_118 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_118, 0, x_117);
return x_118;
}
}
}
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = l_lean_parser_term_simple__binder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_simple__binder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
return x_1;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = l_lean_parser_term_bracketed__binder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_bracketed__binder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
return x_1;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_6);
x_10 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_10) == 0)
{
obj* x_12; 
lean::dec(x_10);
x_12 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_12);
return x_12;
}
else
{
obj* x_14; obj* x_17; obj* x_20; obj* x_22; obj* x_23; 
x_14 = lean::cnstr_get(x_10, 0);
lean::inc(x_14);
lean::dec(x_10);
x_17 = lean::cnstr_get(x_14, 1);
lean::inc(x_17);
lean::dec(x_14);
x_20 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__2;
lean::inc(x_20);
x_22 = l_list_map___main___rarg(x_20, x_17);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_22);
return x_23;
}
}
else
{
obj* x_25; 
lean::dec(x_6);
x_25 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_25) == 0)
{
obj* x_27; 
lean::dec(x_25);
x_27 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__3;
lean::inc(x_27);
return x_27;
}
else
{
obj* x_29; obj* x_32; obj* x_35; obj* x_37; obj* x_38; 
x_29 = lean::cnstr_get(x_25, 0);
lean::inc(x_29);
lean::dec(x_25);
x_32 = lean::cnstr_get(x_29, 1);
lean::inc(x_32);
lean::dec(x_29);
x_35 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4;
lean::inc(x_35);
x_37 = l_list_map___main___rarg(x_35, x_32);
x_38 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_38, 0, x_37);
return x_38;
}
}
}
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__6() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("bracketed_binders");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_19; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__1;
lean::inc(x_5);
x_7 = l_list_map___main___rarg(x_5, x_2);
x_8 = l_lean_parser_no__kind;
lean::inc(x_8);
x_10 = l_lean_parser_syntax_mk__node(x_8, x_7);
lean::inc(x_1);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_1);
x_13 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_13);
x_15 = l_lean_parser_syntax_mk__node(x_13, x_12);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_1);
x_17 = l_lean_parser_term_bracketed__binders;
lean::inc(x_17);
x_19 = l_lean_parser_syntax_mk__node(x_17, x_16);
return x_19;
}
else
{
obj* x_20; obj* x_23; obj* x_25; obj* x_26; obj* x_28; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_35; obj* x_37; 
x_20 = lean::cnstr_get(x_0, 0);
lean::inc(x_20);
lean::dec(x_0);
x_23 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__2;
lean::inc(x_23);
x_25 = l_list_map___main___rarg(x_23, x_20);
x_26 = l_lean_parser_no__kind;
lean::inc(x_26);
x_28 = l_lean_parser_syntax_mk__node(x_26, x_25);
lean::inc(x_1);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_28);
lean::cnstr_set(x_30, 1, x_1);
x_31 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_31);
x_33 = l_lean_parser_syntax_mk__node(x_31, x_30);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_1);
x_35 = l_lean_parser_term_bracketed__binders;
lean::inc(x_35);
x_37 = l_lean_parser_syntax_mk__node(x_35, x_34);
return x_37;
}
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_bracketed__binder_has__view;
x_1 = lean::cnstr_get(x_0, 1);
lean::inc(x_1);
return x_1;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_simple__binder_has__view;
x_1 = lean::cnstr_get(x_0, 1);
lean::inc(x_1);
return x_1;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_bracketed__binders_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_bracketed__binders_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_bracketed__binders;
x_6 = l_lean_parser_term_bracketed__binders_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser___spec__1), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__binder_parser), 5, 0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser___spec__1), 6, 1);
lean::closure_set(x_3, 0, x_2);
x_4 = lean::box(0);
lean::inc(x_4);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_3);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_1);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::mk_nat_obj(0u);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_9, 0, x_7);
lean::closure_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_4);
return x_10;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_23; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser___spec__1), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__binder_parser), 5, 0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser___spec__1), 6, 1);
lean::closure_set(x_3, 0, x_2);
x_4 = lean::box(0);
lean::inc(x_4);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_3);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_1);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::mk_nat_obj(0u);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_9, 0, x_7);
lean::closure_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_4);
x_11 = l_lean_parser_term__parser__m_monad;
x_12 = l_lean_parser_term__parser__m_monad__except;
x_13 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_14 = l_lean_parser_term__parser__m_alternative;
x_15 = l_lean_parser_term_bracketed__binders;
x_16 = l_lean_parser_term_bracketed__binders_has__view;
lean::inc(x_16);
lean::inc(x_15);
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
x_23 = l_lean_parser_combinators_node_view___rarg(x_11, x_12, x_13, x_14, x_15, x_10, x_16);
return x_23;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_0 = l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens;
lean::inc(x_0);
x_2 = l_lean_parser_tokens___rarg(x_0);
x_3 = l_lean_parser_term_simple__binder_parser_lean_parser_has__tokens;
lean::inc(x_3);
x_5 = l_lean_parser_tokens___rarg(x_3);
x_6 = lean::box(0);
lean::inc(x_6);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_5, x_6);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_2, x_8);
x_10 = l_lean_parser_tokens___rarg(x_9);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_10, x_6);
x_12 = l_lean_parser_tokens___rarg(x_11);
return x_12;
}
}
obj* _init_l_lean_parser_term_lambda() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("lambda");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_lambda_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_lambda_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_lambda_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_lambda_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_lambda_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; obj* x_21; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_23; 
x_23 = lean::box(3);
x_20 = x_1;
x_21 = x_23;
goto lbl_22;
}
else
{
obj* x_24; obj* x_26; 
x_24 = lean::cnstr_get(x_1, 0);
lean::inc(x_24);
x_26 = lean::cnstr_get(x_1, 1);
lean::inc(x_26);
lean::dec(x_1);
x_20 = x_26;
x_21 = x_24;
goto lbl_22;
}
lbl_22:
{
obj* x_29; obj* x_30; obj* x_32; 
x_29 = l_lean_parser_term_binders_has__view;
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
x_32 = lean::apply_1(x_30, x_21);
if (lean::obj_tag(x_20) == 0)
{
obj* x_33; 
x_33 = lean::box(0);
if (lean::obj_tag(x_20) == 0)
{
obj* x_35; obj* x_36; 
lean::dec(x_20);
x_35 = lean::box(3);
x_36 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_36, 0, x_2);
lean::cnstr_set(x_36, 1, x_32);
lean::cnstr_set(x_36, 2, x_33);
lean::cnstr_set(x_36, 3, x_35);
return x_36;
}
else
{
obj* x_37; obj* x_40; 
x_37 = lean::cnstr_get(x_20, 0);
lean::inc(x_37);
lean::dec(x_20);
x_40 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_40, 0, x_2);
lean::cnstr_set(x_40, 1, x_32);
lean::cnstr_set(x_40, 2, x_33);
lean::cnstr_set(x_40, 3, x_37);
return x_40;
}
}
else
{
obj* x_41; obj* x_43; 
x_41 = lean::cnstr_get(x_20, 0);
lean::inc(x_41);
x_43 = lean::cnstr_get(x_20, 1);
lean::inc(x_43);
lean::dec(x_20);
switch (lean::obj_tag(x_41)) {
case 0:
{
obj* x_46; obj* x_49; 
x_46 = lean::cnstr_get(x_41, 0);
lean::inc(x_46);
lean::dec(x_41);
x_49 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_49, 0, x_46);
if (lean::obj_tag(x_43) == 0)
{
obj* x_51; obj* x_52; 
lean::dec(x_43);
x_51 = lean::box(3);
x_52 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_52, 0, x_2);
lean::cnstr_set(x_52, 1, x_32);
lean::cnstr_set(x_52, 2, x_49);
lean::cnstr_set(x_52, 3, x_51);
return x_52;
}
else
{
obj* x_53; obj* x_56; 
x_53 = lean::cnstr_get(x_43, 0);
lean::inc(x_53);
lean::dec(x_43);
x_56 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_56, 0, x_2);
lean::cnstr_set(x_56, 1, x_32);
lean::cnstr_set(x_56, 2, x_49);
lean::cnstr_set(x_56, 3, x_53);
return x_56;
}
}
case 1:
{
obj* x_58; 
lean::dec(x_41);
x_58 = lean::box(0);
if (lean::obj_tag(x_43) == 0)
{
obj* x_60; obj* x_61; 
lean::dec(x_43);
x_60 = lean::box(3);
x_61 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_61, 0, x_2);
lean::cnstr_set(x_61, 1, x_32);
lean::cnstr_set(x_61, 2, x_58);
lean::cnstr_set(x_61, 3, x_60);
return x_61;
}
else
{
obj* x_62; obj* x_65; 
x_62 = lean::cnstr_get(x_43, 0);
lean::inc(x_62);
lean::dec(x_43);
x_65 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_65, 0, x_2);
lean::cnstr_set(x_65, 1, x_32);
lean::cnstr_set(x_65, 2, x_58);
lean::cnstr_set(x_65, 3, x_62);
return x_65;
}
}
case 2:
{
obj* x_67; 
lean::dec(x_41);
x_67 = lean::box(0);
if (lean::obj_tag(x_43) == 0)
{
obj* x_69; obj* x_70; 
lean::dec(x_43);
x_69 = lean::box(3);
x_70 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_70, 0, x_2);
lean::cnstr_set(x_70, 1, x_32);
lean::cnstr_set(x_70, 2, x_67);
lean::cnstr_set(x_70, 3, x_69);
return x_70;
}
else
{
obj* x_71; obj* x_74; 
x_71 = lean::cnstr_get(x_43, 0);
lean::inc(x_71);
lean::dec(x_43);
x_74 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_74, 0, x_2);
lean::cnstr_set(x_74, 1, x_32);
lean::cnstr_set(x_74, 2, x_67);
lean::cnstr_set(x_74, 3, x_71);
return x_74;
}
}
default:
{
obj* x_76; 
lean::dec(x_41);
x_76 = lean::box(0);
if (lean::obj_tag(x_43) == 0)
{
obj* x_78; obj* x_79; 
lean::dec(x_43);
x_78 = lean::box(3);
x_79 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_79, 0, x_2);
lean::cnstr_set(x_79, 1, x_32);
lean::cnstr_set(x_79, 2, x_76);
lean::cnstr_set(x_79, 3, x_78);
return x_79;
}
else
{
obj* x_80; obj* x_83; 
x_80 = lean::cnstr_get(x_43, 0);
lean::inc(x_80);
lean::dec(x_43);
x_83 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_83, 0, x_2);
lean::cnstr_set(x_83, 1, x_32);
lean::cnstr_set(x_83, 2, x_76);
lean::cnstr_set(x_83, 3, x_80);
return x_83;
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_lambda_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_8; 
x_8 = lean::box(3);
x_5 = x_0;
x_6 = x_8;
goto lbl_7;
}
else
{
obj* x_9; obj* x_11; 
x_9 = lean::cnstr_get(x_0, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 1);
lean::inc(x_11);
lean::dec(x_0);
x_5 = x_11;
x_6 = x_9;
goto lbl_7;
}
lbl_7:
{
obj* x_14; obj* x_15; obj* x_17; 
x_14 = l_lean_parser_term_binders_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
x_17 = lean::apply_1(x_15, x_6);
if (lean::obj_tag(x_5) == 0)
{
obj* x_18; 
x_18 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
obj* x_20; obj* x_21; 
lean::dec(x_5);
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_21, 0, x_1);
lean::cnstr_set(x_21, 1, x_17);
lean::cnstr_set(x_21, 2, x_18);
lean::cnstr_set(x_21, 3, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_5, 0);
lean::inc(x_22);
lean::dec(x_5);
x_25 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_25, 0, x_1);
lean::cnstr_set(x_25, 1, x_17);
lean::cnstr_set(x_25, 2, x_18);
lean::cnstr_set(x_25, 3, x_22);
return x_25;
}
}
else
{
obj* x_26; obj* x_28; 
x_26 = lean::cnstr_get(x_5, 0);
lean::inc(x_26);
x_28 = lean::cnstr_get(x_5, 1);
lean::inc(x_28);
lean::dec(x_5);
switch (lean::obj_tag(x_26)) {
case 0:
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_26, 0);
lean::inc(x_31);
lean::dec(x_26);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_31);
if (lean::obj_tag(x_28) == 0)
{
obj* x_36; obj* x_37; 
lean::dec(x_28);
x_36 = lean::box(3);
x_37 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_37, 0, x_1);
lean::cnstr_set(x_37, 1, x_17);
lean::cnstr_set(x_37, 2, x_34);
lean::cnstr_set(x_37, 3, x_36);
return x_37;
}
else
{
obj* x_38; obj* x_41; 
x_38 = lean::cnstr_get(x_28, 0);
lean::inc(x_38);
lean::dec(x_28);
x_41 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_41, 0, x_1);
lean::cnstr_set(x_41, 1, x_17);
lean::cnstr_set(x_41, 2, x_34);
lean::cnstr_set(x_41, 3, x_38);
return x_41;
}
}
case 1:
{
obj* x_43; 
lean::dec(x_26);
x_43 = lean::box(0);
if (lean::obj_tag(x_28) == 0)
{
obj* x_45; obj* x_46; 
lean::dec(x_28);
x_45 = lean::box(3);
x_46 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_46, 0, x_1);
lean::cnstr_set(x_46, 1, x_17);
lean::cnstr_set(x_46, 2, x_43);
lean::cnstr_set(x_46, 3, x_45);
return x_46;
}
else
{
obj* x_47; obj* x_50; 
x_47 = lean::cnstr_get(x_28, 0);
lean::inc(x_47);
lean::dec(x_28);
x_50 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_50, 0, x_1);
lean::cnstr_set(x_50, 1, x_17);
lean::cnstr_set(x_50, 2, x_43);
lean::cnstr_set(x_50, 3, x_47);
return x_50;
}
}
case 2:
{
obj* x_52; 
lean::dec(x_26);
x_52 = lean::box(0);
if (lean::obj_tag(x_28) == 0)
{
obj* x_54; obj* x_55; 
lean::dec(x_28);
x_54 = lean::box(3);
x_55 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_55, 0, x_1);
lean::cnstr_set(x_55, 1, x_17);
lean::cnstr_set(x_55, 2, x_52);
lean::cnstr_set(x_55, 3, x_54);
return x_55;
}
else
{
obj* x_56; obj* x_59; 
x_56 = lean::cnstr_get(x_28, 0);
lean::inc(x_56);
lean::dec(x_28);
x_59 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_59, 0, x_1);
lean::cnstr_set(x_59, 1, x_17);
lean::cnstr_set(x_59, 2, x_52);
lean::cnstr_set(x_59, 3, x_56);
return x_59;
}
}
default:
{
obj* x_61; 
lean::dec(x_26);
x_61 = lean::box(0);
if (lean::obj_tag(x_28) == 0)
{
obj* x_63; obj* x_64; 
lean::dec(x_28);
x_63 = lean::box(3);
x_64 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_64, 0, x_1);
lean::cnstr_set(x_64, 1, x_17);
lean::cnstr_set(x_64, 2, x_61);
lean::cnstr_set(x_64, 3, x_63);
return x_64;
}
else
{
obj* x_65; obj* x_68; 
x_65 = lean::cnstr_get(x_28, 0);
lean::inc(x_65);
lean::dec(x_28);
x_68 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_68, 0, x_1);
lean::cnstr_set(x_68, 1, x_17);
lean::cnstr_set(x_68, 2, x_61);
lean::cnstr_set(x_68, 3, x_65);
return x_68;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_lambda_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_26; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
lean::dec(x_0);
x_10 = l_lean_parser_term_binders_has__view;
x_11 = lean::cnstr_get(x_10, 1);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_3);
x_14 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_14);
x_16 = l_option_map___rarg(x_14, x_5);
x_17 = lean::box(3);
x_18 = l_option_get__or__else___main___rarg(x_16, x_17);
x_19 = lean::box(0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_7);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_18);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_13);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_1);
lean::cnstr_set(x_23, 1, x_22);
x_24 = l_lean_parser_term_lambda;
lean::inc(x_24);
x_26 = l_lean_parser_syntax_mk__node(x_24, x_23);
return x_26;
}
}
obj* _init_l_lean_parser_term_lambda_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_lambda_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_lambda_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_lambda;
x_6 = l_lean_parser_term_lambda_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_lambda_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_0 = lean::mk_string("\xce\xbb");
x_1 = lean::mk_string("fun");
x_2 = l_lean_parser_max__prec;
lean::inc(x_2);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser___spec__1), 8, 3);
lean::closure_set(x_4, 0, x_0);
lean::closure_set(x_4, 1, x_1);
lean::closure_set(x_4, 2, x_2);
x_5 = lean::mk_string(",");
x_6 = l_string_trim(x_5);
lean::inc(x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_8, 0, x_6);
x_9 = lean::mk_nat_obj(0u);
lean::inc(x_9);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_6);
lean::closure_set(x_11, 1, x_9);
lean::closure_set(x_11, 2, x_8);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_12, 0, x_9);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_11);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_parser), 5, 0);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_15);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_4);
lean::cnstr_set(x_18, 1, x_17);
return x_18;
}
}
obj* l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_10; obj* x_12; obj* x_14; obj* x_15; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
lean::dec(x_5);
lean::dec(x_3);
x_10 = l_string_trim(x_0);
lean::inc(x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_12, 0, x_10);
lean::inc(x_2);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol___spec__1), 6, 3);
lean::closure_set(x_14, 0, x_10);
lean::closure_set(x_14, 1, x_2);
lean::closure_set(x_14, 2, x_12);
x_15 = l_string_trim(x_1);
lean::inc(x_15);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_17, 0, x_15);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol___spec__1), 6, 3);
lean::closure_set(x_18, 0, x_15);
lean::closure_set(x_18, 1, x_2);
lean::closure_set(x_18, 2, x_17);
x_19 = lean::box(0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_18);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_14);
lean::cnstr_set(x_21, 1, x_20);
x_22 = l_lean_parser_combinators_any__of___at_lean_parser_unicode__symbol___spec__2(x_21, x_4, x_6, x_7);
return x_22;
}
}
obj* _init_l_lean_parser_term_lambda_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_31; 
x_0 = lean::mk_string("\xce\xbb");
x_1 = lean::mk_string("fun");
x_2 = l_lean_parser_max__prec;
lean::inc(x_2);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser___spec__1), 8, 3);
lean::closure_set(x_4, 0, x_0);
lean::closure_set(x_4, 1, x_1);
lean::closure_set(x_4, 2, x_2);
x_5 = lean::mk_string(",");
x_6 = l_string_trim(x_5);
lean::inc(x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_8, 0, x_6);
x_9 = lean::mk_nat_obj(0u);
lean::inc(x_9);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_6);
lean::closure_set(x_11, 1, x_9);
lean::closure_set(x_11, 2, x_8);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_12, 0, x_9);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_11);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_parser), 5, 0);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_15);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_4);
lean::cnstr_set(x_18, 1, x_17);
x_19 = l_lean_parser_term__parser__m_monad;
x_20 = l_lean_parser_term__parser__m_monad__except;
x_21 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_22 = l_lean_parser_term__parser__m_alternative;
x_23 = l_lean_parser_term_lambda;
x_24 = l_lean_parser_term_lambda_has__view;
lean::inc(x_24);
lean::inc(x_23);
lean::inc(x_22);
lean::inc(x_21);
lean::inc(x_20);
lean::inc(x_19);
x_31 = l_lean_parser_combinators_node_view___rarg(x_19, x_20, x_21, x_22, x_23, x_18, x_24);
return x_31;
}
}
obj* _init_l_lean_parser_term_lambda_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; 
x_0 = lean::mk_string("\xce\xbb");
x_1 = lean::mk_string("fun");
x_2 = l_lean_parser_max__prec;
lean::inc(x_2);
x_4 = l_lean_parser_unicode__symbol_lean_parser_has__tokens___rarg(x_0, x_1, x_2);
x_5 = lean::mk_string(",");
x_6 = lean::mk_nat_obj(0u);
x_7 = l_lean_parser_symbol_tokens___rarg(x_5, x_6);
x_8 = lean::box(0);
x_9 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_9);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_9, x_8);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_7, x_11);
x_13 = l_lean_parser_term_binders_parser_lean_parser_has__tokens;
lean::inc(x_13);
x_15 = l_lean_parser_list_cons_tokens___rarg(x_13, x_12);
x_16 = l_lean_parser_list_cons_tokens___rarg(x_4, x_15);
x_17 = l_lean_parser_tokens___rarg(x_16);
return x_17;
}
}
obj* _init_l_lean_parser_term_assume__anonymous() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("assume_anonymous");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_assume__anonymous_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
if (lean::is_shared(x_1)) {
 lean::dec(x_1);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_1, 0);
 x_7 = x_1;
}
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
lean::dec(x_7);
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; 
lean::dec(x_8);
x_13 = l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1;
lean::inc(x_13);
return x_13;
}
else
{
obj* x_15; obj* x_18; obj* x_19; 
x_15 = lean::cnstr_get(x_8, 0);
lean::inc(x_15);
lean::dec(x_8);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_15);
return x_19;
}
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_8, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_8, 1);
lean::inc(x_22);
lean::dec(x_8);
switch (lean::obj_tag(x_20)) {
case 0:
{
obj* x_25; obj* x_28; 
x_25 = lean::cnstr_get(x_20, 0);
lean::inc(x_25);
lean::dec(x_20);
if (lean::is_scalar(x_7)) {
 x_28 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_28 = x_7;
}
lean::cnstr_set(x_28, 0, x_25);
if (lean::obj_tag(x_22) == 0)
{
obj* x_30; obj* x_31; 
lean::dec(x_22);
x_30 = lean::box(3);
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_30);
return x_31;
}
else
{
obj* x_32; obj* x_35; 
x_32 = lean::cnstr_get(x_22, 0);
lean::inc(x_32);
lean::dec(x_22);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_28);
lean::cnstr_set(x_35, 1, x_32);
return x_35;
}
}
case 1:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_39; 
lean::dec(x_22);
x_39 = l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1;
lean::inc(x_39);
return x_39;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_22, 0);
lean::inc(x_41);
lean::dec(x_22);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
case 2:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_49; 
lean::dec(x_22);
x_49 = l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1;
lean::inc(x_49);
return x_49;
}
else
{
obj* x_51; obj* x_54; obj* x_55; 
x_51 = lean::cnstr_get(x_22, 0);
lean::inc(x_51);
lean::dec(x_22);
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_51);
return x_55;
}
}
default:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_59; 
lean::dec(x_22);
x_59 = l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1;
lean::inc(x_59);
return x_59;
}
else
{
obj* x_61; obj* x_64; obj* x_65; 
x_61 = lean::cnstr_get(x_22, 0);
lean::inc(x_61);
lean::dec(x_22);
x_64 = lean::box(0);
x_65 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_61);
return x_65;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_6);
x_8 = l_option_map___rarg(x_6, x_1);
x_9 = lean::box(3);
x_10 = l_option_get__or__else___main___rarg(x_8, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_3);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_10);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_lean_parser_term_assume__anonymous;
lean::inc(x_14);
x_16 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_16;
}
}
obj* _init_l_lean_parser_term_assume__anonymous_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_assume__anonymous_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_assume__binders() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("assume_binders");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_assume__binders_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_assume__binders_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_assume__binders_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_assume__binders_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__2;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; obj* x_91; obj* x_93; obj* x_94; 
lean::dec(x_86);
x_90 = l_lean_parser_term_binders_has__view;
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
x_93 = lean::apply_1(x_91, x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
else
{
obj* x_96; obj* x_97; obj* x_99; obj* x_100; 
lean::dec(x_86);
x_96 = l_lean_parser_term_assume__anonymous_has__view;
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
x_99 = lean::apply_1(x_97, x_1);
x_100 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_100, 0, x_99);
return x_100;
}
}
}
}
obj* _init_l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; obj* x_11; obj* x_13; obj* x_14; 
lean::dec(x_6);
x_10 = l_lean_parser_term_binders_has__view;
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_0);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
else
{
obj* x_16; obj* x_17; obj* x_19; obj* x_20; 
lean::dec(x_6);
x_16 = l_lean_parser_term_assume__anonymous_has__view;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::apply_1(x_17, x_0);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
}
}
obj* _init_l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("assume_binders");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_assume__binders_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_assume__anonymous_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
x_8 = lean::apply_1(x_6, x_2);
lean::inc(x_1);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_lean_parser_term_assume__binders;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_33; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
x_21 = l_lean_parser_term_binders_has__view;
x_22 = lean::cnstr_get(x_21, 1);
lean::inc(x_22);
x_24 = lean::apply_1(x_22, x_18);
lean::inc(x_1);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_27);
x_29 = l_lean_parser_syntax_mk__node(x_27, x_26);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_1);
x_31 = l_lean_parser_term_assume__binders;
lean::inc(x_31);
x_33 = l_lean_parser_syntax_mk__node(x_31, x_30);
return x_33;
}
}
}
obj* _init_l_lean_parser_term_assume__binders_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_assume__binders_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_assume() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("assume");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_assume_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_assume_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_assume_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_assume_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_assume_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
x_35 = lean::box(3);
x_32 = x_1;
x_33 = x_35;
goto lbl_34;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_1, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
lean::dec(x_1);
x_32 = x_38;
x_33 = x_36;
goto lbl_34;
}
lbl_34:
{
obj* x_41; obj* x_42; obj* x_44; 
x_41 = l_lean_parser_term_assume__binders_has__view;
x_42 = lean::cnstr_get(x_41, 0);
lean::inc(x_42);
x_44 = lean::apply_1(x_42, x_33);
if (lean::obj_tag(x_32) == 0)
{
obj* x_45; 
x_45 = lean::box(0);
if (lean::obj_tag(x_32) == 0)
{
obj* x_47; obj* x_48; 
lean::dec(x_32);
x_47 = lean::box(3);
x_48 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_48, 0, x_20);
lean::cnstr_set(x_48, 1, x_44);
lean::cnstr_set(x_48, 2, x_45);
lean::cnstr_set(x_48, 3, x_47);
return x_48;
}
else
{
obj* x_49; obj* x_52; 
x_49 = lean::cnstr_get(x_32, 0);
lean::inc(x_49);
lean::dec(x_32);
x_52 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_52, 0, x_20);
lean::cnstr_set(x_52, 1, x_44);
lean::cnstr_set(x_52, 2, x_45);
lean::cnstr_set(x_52, 3, x_49);
return x_52;
}
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
switch (lean::obj_tag(x_53)) {
case 0:
{
obj* x_58; obj* x_61; 
x_58 = lean::cnstr_get(x_53, 0);
lean::inc(x_58);
lean::dec(x_53);
x_61 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_61, 0, x_58);
if (lean::obj_tag(x_55) == 0)
{
obj* x_63; obj* x_64; 
lean::dec(x_55);
x_63 = lean::box(3);
x_64 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_64, 0, x_20);
lean::cnstr_set(x_64, 1, x_44);
lean::cnstr_set(x_64, 2, x_61);
lean::cnstr_set(x_64, 3, x_63);
return x_64;
}
else
{
obj* x_65; obj* x_68; 
x_65 = lean::cnstr_get(x_55, 0);
lean::inc(x_65);
lean::dec(x_55);
x_68 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_68, 0, x_20);
lean::cnstr_set(x_68, 1, x_44);
lean::cnstr_set(x_68, 2, x_61);
lean::cnstr_set(x_68, 3, x_65);
return x_68;
}
}
case 1:
{
obj* x_70; 
lean::dec(x_53);
x_70 = lean::box(0);
if (lean::obj_tag(x_55) == 0)
{
obj* x_72; obj* x_73; 
lean::dec(x_55);
x_72 = lean::box(3);
x_73 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_73, 0, x_20);
lean::cnstr_set(x_73, 1, x_44);
lean::cnstr_set(x_73, 2, x_70);
lean::cnstr_set(x_73, 3, x_72);
return x_73;
}
else
{
obj* x_74; obj* x_77; 
x_74 = lean::cnstr_get(x_55, 0);
lean::inc(x_74);
lean::dec(x_55);
x_77 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_77, 0, x_20);
lean::cnstr_set(x_77, 1, x_44);
lean::cnstr_set(x_77, 2, x_70);
lean::cnstr_set(x_77, 3, x_74);
return x_77;
}
}
case 2:
{
obj* x_79; 
lean::dec(x_53);
x_79 = lean::box(0);
if (lean::obj_tag(x_55) == 0)
{
obj* x_81; obj* x_82; 
lean::dec(x_55);
x_81 = lean::box(3);
x_82 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_82, 0, x_20);
lean::cnstr_set(x_82, 1, x_44);
lean::cnstr_set(x_82, 2, x_79);
lean::cnstr_set(x_82, 3, x_81);
return x_82;
}
else
{
obj* x_83; obj* x_86; 
x_83 = lean::cnstr_get(x_55, 0);
lean::inc(x_83);
lean::dec(x_55);
x_86 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_86, 0, x_20);
lean::cnstr_set(x_86, 1, x_44);
lean::cnstr_set(x_86, 2, x_79);
lean::cnstr_set(x_86, 3, x_83);
return x_86;
}
}
default:
{
obj* x_88; 
lean::dec(x_53);
x_88 = lean::box(0);
if (lean::obj_tag(x_55) == 0)
{
obj* x_90; obj* x_91; 
lean::dec(x_55);
x_90 = lean::box(3);
x_91 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_91, 0, x_20);
lean::cnstr_set(x_91, 1, x_44);
lean::cnstr_set(x_91, 2, x_88);
lean::cnstr_set(x_91, 3, x_90);
return x_91;
}
else
{
obj* x_92; obj* x_95; 
x_92 = lean::cnstr_get(x_55, 0);
lean::inc(x_92);
lean::dec(x_55);
x_95 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_95, 0, x_20);
lean::cnstr_set(x_95, 1, x_44);
lean::cnstr_set(x_95, 2, x_88);
lean::cnstr_set(x_95, 3, x_92);
return x_95;
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_assume_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_19:
{
obj* x_26; obj* x_27; obj* x_29; 
x_26 = l_lean_parser_term_assume__binders_has__view;
x_27 = lean::cnstr_get(x_26, 0);
lean::inc(x_27);
x_29 = lean::apply_1(x_27, x_18);
if (lean::obj_tag(x_17) == 0)
{
obj* x_30; 
x_30 = lean::box(0);
if (lean::obj_tag(x_17) == 0)
{
obj* x_32; obj* x_33; 
lean::dec(x_17);
x_32 = lean::box(3);
x_33 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_33, 0, x_5);
lean::cnstr_set(x_33, 1, x_29);
lean::cnstr_set(x_33, 2, x_30);
lean::cnstr_set(x_33, 3, x_32);
return x_33;
}
else
{
obj* x_34; obj* x_37; 
x_34 = lean::cnstr_get(x_17, 0);
lean::inc(x_34);
lean::dec(x_17);
x_37 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_37, 0, x_5);
lean::cnstr_set(x_37, 1, x_29);
lean::cnstr_set(x_37, 2, x_30);
lean::cnstr_set(x_37, 3, x_34);
return x_37;
}
}
else
{
obj* x_38; obj* x_40; 
x_38 = lean::cnstr_get(x_17, 0);
lean::inc(x_38);
x_40 = lean::cnstr_get(x_17, 1);
lean::inc(x_40);
lean::dec(x_17);
switch (lean::obj_tag(x_38)) {
case 0:
{
obj* x_43; obj* x_46; 
x_43 = lean::cnstr_get(x_38, 0);
lean::inc(x_43);
lean::dec(x_38);
x_46 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_46, 0, x_43);
if (lean::obj_tag(x_40) == 0)
{
obj* x_48; obj* x_49; 
lean::dec(x_40);
x_48 = lean::box(3);
x_49 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_49, 0, x_5);
lean::cnstr_set(x_49, 1, x_29);
lean::cnstr_set(x_49, 2, x_46);
lean::cnstr_set(x_49, 3, x_48);
return x_49;
}
else
{
obj* x_50; obj* x_53; 
x_50 = lean::cnstr_get(x_40, 0);
lean::inc(x_50);
lean::dec(x_40);
x_53 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_53, 0, x_5);
lean::cnstr_set(x_53, 1, x_29);
lean::cnstr_set(x_53, 2, x_46);
lean::cnstr_set(x_53, 3, x_50);
return x_53;
}
}
case 1:
{
obj* x_55; 
lean::dec(x_38);
x_55 = lean::box(0);
if (lean::obj_tag(x_40) == 0)
{
obj* x_57; obj* x_58; 
lean::dec(x_40);
x_57 = lean::box(3);
x_58 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_58, 0, x_5);
lean::cnstr_set(x_58, 1, x_29);
lean::cnstr_set(x_58, 2, x_55);
lean::cnstr_set(x_58, 3, x_57);
return x_58;
}
else
{
obj* x_59; obj* x_62; 
x_59 = lean::cnstr_get(x_40, 0);
lean::inc(x_59);
lean::dec(x_40);
x_62 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_62, 0, x_5);
lean::cnstr_set(x_62, 1, x_29);
lean::cnstr_set(x_62, 2, x_55);
lean::cnstr_set(x_62, 3, x_59);
return x_62;
}
}
case 2:
{
obj* x_64; 
lean::dec(x_38);
x_64 = lean::box(0);
if (lean::obj_tag(x_40) == 0)
{
obj* x_66; obj* x_67; 
lean::dec(x_40);
x_66 = lean::box(3);
x_67 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_67, 0, x_5);
lean::cnstr_set(x_67, 1, x_29);
lean::cnstr_set(x_67, 2, x_64);
lean::cnstr_set(x_67, 3, x_66);
return x_67;
}
else
{
obj* x_68; obj* x_71; 
x_68 = lean::cnstr_get(x_40, 0);
lean::inc(x_68);
lean::dec(x_40);
x_71 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_71, 0, x_5);
lean::cnstr_set(x_71, 1, x_29);
lean::cnstr_set(x_71, 2, x_64);
lean::cnstr_set(x_71, 3, x_68);
return x_71;
}
}
default:
{
obj* x_73; 
lean::dec(x_38);
x_73 = lean::box(0);
if (lean::obj_tag(x_40) == 0)
{
obj* x_75; obj* x_76; 
lean::dec(x_40);
x_75 = lean::box(3);
x_76 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_76, 0, x_5);
lean::cnstr_set(x_76, 1, x_29);
lean::cnstr_set(x_76, 2, x_73);
lean::cnstr_set(x_76, 3, x_75);
return x_76;
}
else
{
obj* x_77; obj* x_80; 
x_77 = lean::cnstr_get(x_40, 0);
lean::inc(x_77);
lean::dec(x_40);
x_80 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_80, 0, x_5);
lean::cnstr_set(x_80, 1, x_29);
lean::cnstr_set(x_80, 2, x_73);
lean::cnstr_set(x_80, 3, x_77);
return x_80;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_assume_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_30; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
lean::dec(x_0);
x_10 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_10);
x_12 = l_option_map___rarg(x_10, x_1);
x_13 = lean::box(3);
lean::inc(x_13);
x_15 = l_option_get__or__else___main___rarg(x_12, x_13);
x_16 = l_lean_parser_term_assume__binders_has__view;
x_17 = lean::cnstr_get(x_16, 1);
lean::inc(x_17);
x_19 = lean::apply_1(x_17, x_3);
lean::inc(x_10);
x_21 = l_option_map___rarg(x_10, x_5);
x_22 = l_option_get__or__else___main___rarg(x_21, x_13);
x_23 = lean::box(0);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_7);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_22);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_19);
lean::cnstr_set(x_26, 1, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_15);
lean::cnstr_set(x_27, 1, x_26);
x_28 = l_lean_parser_term_assume;
lean::inc(x_28);
x_30 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_30;
}
}
obj* _init_l_lean_parser_term_assume_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_assume_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_assume_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_assume;
x_6 = l_lean_parser_term_assume_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_assume_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_35; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; 
x_0 = lean::mk_string("assume ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_string(": ");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::mk_nat_obj(0u);
lean::inc(x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_13, 0, x_8);
lean::closure_set(x_13, 1, x_11);
lean::closure_set(x_13, 2, x_10);
lean::inc(x_11);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_15, 0, x_11);
x_16 = lean::box(0);
lean::inc(x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_15);
lean::cnstr_set(x_18, 1, x_16);
lean::inc(x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_13);
lean::cnstr_set(x_20, 1, x_18);
x_21 = l_lean_parser_term_assume__anonymous;
lean::inc(x_21);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_23, 0, x_21);
lean::closure_set(x_23, 1, x_20);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_parser), 5, 0);
lean::inc(x_16);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_16);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_23);
lean::cnstr_set(x_27, 1, x_26);
lean::inc(x_11);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_29, 0, x_27);
lean::closure_set(x_29, 1, x_11);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_16);
x_31 = l_lean_parser_term_assume__binders;
lean::inc(x_31);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_33, 0, x_31);
lean::closure_set(x_33, 1, x_30);
x_34 = lean::mk_string(", ");
x_35 = l_string_trim(x_34);
lean::inc(x_35);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_37, 0, x_35);
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_38, 0, x_35);
lean::closure_set(x_38, 1, x_11);
lean::closure_set(x_38, 2, x_37);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_18);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_33);
lean::cnstr_set(x_40, 1, x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_6);
lean::cnstr_set(x_41, 1, x_40);
return x_41;
}
}
obj* _init_l_lean_parser_term_assume_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_35; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_54; 
x_0 = lean::mk_string("assume ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_string(": ");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::mk_nat_obj(0u);
lean::inc(x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_13, 0, x_8);
lean::closure_set(x_13, 1, x_11);
lean::closure_set(x_13, 2, x_10);
lean::inc(x_11);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_15, 0, x_11);
x_16 = lean::box(0);
lean::inc(x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_15);
lean::cnstr_set(x_18, 1, x_16);
lean::inc(x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_13);
lean::cnstr_set(x_20, 1, x_18);
x_21 = l_lean_parser_term_assume__anonymous;
lean::inc(x_21);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_23, 0, x_21);
lean::closure_set(x_23, 1, x_20);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_parser), 5, 0);
lean::inc(x_16);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_16);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_23);
lean::cnstr_set(x_27, 1, x_26);
lean::inc(x_11);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_29, 0, x_27);
lean::closure_set(x_29, 1, x_11);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_16);
x_31 = l_lean_parser_term_assume__binders;
lean::inc(x_31);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_33, 0, x_31);
lean::closure_set(x_33, 1, x_30);
x_34 = lean::mk_string(", ");
x_35 = l_string_trim(x_34);
lean::inc(x_35);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_37, 0, x_35);
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_38, 0, x_35);
lean::closure_set(x_38, 1, x_11);
lean::closure_set(x_38, 2, x_37);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_18);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_33);
lean::cnstr_set(x_40, 1, x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_6);
lean::cnstr_set(x_41, 1, x_40);
x_42 = l_lean_parser_term__parser__m_monad;
x_43 = l_lean_parser_term__parser__m_monad__except;
x_44 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_45 = l_lean_parser_term__parser__m_alternative;
x_46 = l_lean_parser_term_assume;
x_47 = l_lean_parser_term_assume_has__view;
lean::inc(x_47);
lean::inc(x_46);
lean::inc(x_45);
lean::inc(x_44);
lean::inc(x_43);
lean::inc(x_42);
x_54 = l_lean_parser_combinators_node_view___rarg(x_42, x_43, x_44, x_45, x_46, x_41, x_47);
return x_54;
}
}
obj* _init_l_lean_parser_term_assume_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_7; obj* x_8; obj* x_9; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_0 = lean::mk_string("assume ");
x_1 = l_lean_parser_max__prec;
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::mk_string(": ");
x_5 = lean::mk_nat_obj(0u);
lean::inc(x_5);
x_7 = l_lean_parser_symbol_tokens___rarg(x_4, x_5);
x_8 = lean::box(0);
x_9 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_8);
lean::inc(x_9);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_9, x_8);
lean::inc(x_12);
x_14 = l_lean_parser_list_cons_tokens___rarg(x_7, x_12);
x_15 = l_lean_parser_tokens___rarg(x_14);
x_16 = l_lean_parser_term_binders_parser_lean_parser_has__tokens;
lean::inc(x_8);
lean::inc(x_16);
x_19 = l_lean_parser_list_cons_tokens___rarg(x_16, x_8);
x_20 = l_lean_parser_list_cons_tokens___rarg(x_15, x_19);
x_21 = l_lean_parser_tokens___rarg(x_20);
x_22 = l_lean_parser_list_cons_tokens___rarg(x_21, x_8);
x_23 = l_lean_parser_tokens___rarg(x_22);
x_24 = lean::mk_string(", ");
x_25 = l_lean_parser_symbol_tokens___rarg(x_24, x_5);
x_26 = l_lean_parser_list_cons_tokens___rarg(x_25, x_12);
x_27 = l_lean_parser_list_cons_tokens___rarg(x_23, x_26);
x_28 = l_lean_parser_list_cons_tokens___rarg(x_3, x_27);
x_29 = l_lean_parser_tokens___rarg(x_28);
return x_29;
}
}
obj* _init_l_lean_parser_term_pi() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("pi");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_pi_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_pi_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_pi_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_pi_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_pi_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; obj* x_21; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_23; 
x_23 = lean::box(3);
x_20 = x_1;
x_21 = x_23;
goto lbl_22;
}
else
{
obj* x_24; obj* x_26; 
x_24 = lean::cnstr_get(x_1, 0);
lean::inc(x_24);
x_26 = lean::cnstr_get(x_1, 1);
lean::inc(x_26);
lean::dec(x_1);
x_20 = x_26;
x_21 = x_24;
goto lbl_22;
}
lbl_22:
{
obj* x_29; obj* x_30; obj* x_32; 
x_29 = l_lean_parser_term_binders_has__view;
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
x_32 = lean::apply_1(x_30, x_21);
if (lean::obj_tag(x_20) == 0)
{
obj* x_33; 
x_33 = lean::box(0);
if (lean::obj_tag(x_20) == 0)
{
obj* x_35; obj* x_36; 
lean::dec(x_20);
x_35 = lean::box(3);
x_36 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_36, 0, x_2);
lean::cnstr_set(x_36, 1, x_32);
lean::cnstr_set(x_36, 2, x_33);
lean::cnstr_set(x_36, 3, x_35);
return x_36;
}
else
{
obj* x_37; obj* x_40; 
x_37 = lean::cnstr_get(x_20, 0);
lean::inc(x_37);
lean::dec(x_20);
x_40 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_40, 0, x_2);
lean::cnstr_set(x_40, 1, x_32);
lean::cnstr_set(x_40, 2, x_33);
lean::cnstr_set(x_40, 3, x_37);
return x_40;
}
}
else
{
obj* x_41; obj* x_43; 
x_41 = lean::cnstr_get(x_20, 0);
lean::inc(x_41);
x_43 = lean::cnstr_get(x_20, 1);
lean::inc(x_43);
lean::dec(x_20);
switch (lean::obj_tag(x_41)) {
case 0:
{
obj* x_46; obj* x_49; 
x_46 = lean::cnstr_get(x_41, 0);
lean::inc(x_46);
lean::dec(x_41);
x_49 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_49, 0, x_46);
if (lean::obj_tag(x_43) == 0)
{
obj* x_51; obj* x_52; 
lean::dec(x_43);
x_51 = lean::box(3);
x_52 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_52, 0, x_2);
lean::cnstr_set(x_52, 1, x_32);
lean::cnstr_set(x_52, 2, x_49);
lean::cnstr_set(x_52, 3, x_51);
return x_52;
}
else
{
obj* x_53; obj* x_56; 
x_53 = lean::cnstr_get(x_43, 0);
lean::inc(x_53);
lean::dec(x_43);
x_56 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_56, 0, x_2);
lean::cnstr_set(x_56, 1, x_32);
lean::cnstr_set(x_56, 2, x_49);
lean::cnstr_set(x_56, 3, x_53);
return x_56;
}
}
case 1:
{
obj* x_58; 
lean::dec(x_41);
x_58 = lean::box(0);
if (lean::obj_tag(x_43) == 0)
{
obj* x_60; obj* x_61; 
lean::dec(x_43);
x_60 = lean::box(3);
x_61 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_61, 0, x_2);
lean::cnstr_set(x_61, 1, x_32);
lean::cnstr_set(x_61, 2, x_58);
lean::cnstr_set(x_61, 3, x_60);
return x_61;
}
else
{
obj* x_62; obj* x_65; 
x_62 = lean::cnstr_get(x_43, 0);
lean::inc(x_62);
lean::dec(x_43);
x_65 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_65, 0, x_2);
lean::cnstr_set(x_65, 1, x_32);
lean::cnstr_set(x_65, 2, x_58);
lean::cnstr_set(x_65, 3, x_62);
return x_65;
}
}
case 2:
{
obj* x_67; 
lean::dec(x_41);
x_67 = lean::box(0);
if (lean::obj_tag(x_43) == 0)
{
obj* x_69; obj* x_70; 
lean::dec(x_43);
x_69 = lean::box(3);
x_70 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_70, 0, x_2);
lean::cnstr_set(x_70, 1, x_32);
lean::cnstr_set(x_70, 2, x_67);
lean::cnstr_set(x_70, 3, x_69);
return x_70;
}
else
{
obj* x_71; obj* x_74; 
x_71 = lean::cnstr_get(x_43, 0);
lean::inc(x_71);
lean::dec(x_43);
x_74 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_74, 0, x_2);
lean::cnstr_set(x_74, 1, x_32);
lean::cnstr_set(x_74, 2, x_67);
lean::cnstr_set(x_74, 3, x_71);
return x_74;
}
}
default:
{
obj* x_76; 
lean::dec(x_41);
x_76 = lean::box(0);
if (lean::obj_tag(x_43) == 0)
{
obj* x_78; obj* x_79; 
lean::dec(x_43);
x_78 = lean::box(3);
x_79 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_79, 0, x_2);
lean::cnstr_set(x_79, 1, x_32);
lean::cnstr_set(x_79, 2, x_76);
lean::cnstr_set(x_79, 3, x_78);
return x_79;
}
else
{
obj* x_80; obj* x_83; 
x_80 = lean::cnstr_get(x_43, 0);
lean::inc(x_80);
lean::dec(x_43);
x_83 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_83, 0, x_2);
lean::cnstr_set(x_83, 1, x_32);
lean::cnstr_set(x_83, 2, x_76);
lean::cnstr_set(x_83, 3, x_80);
return x_83;
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_pi_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_8; 
x_8 = lean::box(3);
x_5 = x_0;
x_6 = x_8;
goto lbl_7;
}
else
{
obj* x_9; obj* x_11; 
x_9 = lean::cnstr_get(x_0, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 1);
lean::inc(x_11);
lean::dec(x_0);
x_5 = x_11;
x_6 = x_9;
goto lbl_7;
}
lbl_7:
{
obj* x_14; obj* x_15; obj* x_17; 
x_14 = l_lean_parser_term_binders_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
x_17 = lean::apply_1(x_15, x_6);
if (lean::obj_tag(x_5) == 0)
{
obj* x_18; 
x_18 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
obj* x_20; obj* x_21; 
lean::dec(x_5);
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_21, 0, x_1);
lean::cnstr_set(x_21, 1, x_17);
lean::cnstr_set(x_21, 2, x_18);
lean::cnstr_set(x_21, 3, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_5, 0);
lean::inc(x_22);
lean::dec(x_5);
x_25 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_25, 0, x_1);
lean::cnstr_set(x_25, 1, x_17);
lean::cnstr_set(x_25, 2, x_18);
lean::cnstr_set(x_25, 3, x_22);
return x_25;
}
}
else
{
obj* x_26; obj* x_28; 
x_26 = lean::cnstr_get(x_5, 0);
lean::inc(x_26);
x_28 = lean::cnstr_get(x_5, 1);
lean::inc(x_28);
lean::dec(x_5);
switch (lean::obj_tag(x_26)) {
case 0:
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_26, 0);
lean::inc(x_31);
lean::dec(x_26);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_31);
if (lean::obj_tag(x_28) == 0)
{
obj* x_36; obj* x_37; 
lean::dec(x_28);
x_36 = lean::box(3);
x_37 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_37, 0, x_1);
lean::cnstr_set(x_37, 1, x_17);
lean::cnstr_set(x_37, 2, x_34);
lean::cnstr_set(x_37, 3, x_36);
return x_37;
}
else
{
obj* x_38; obj* x_41; 
x_38 = lean::cnstr_get(x_28, 0);
lean::inc(x_38);
lean::dec(x_28);
x_41 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_41, 0, x_1);
lean::cnstr_set(x_41, 1, x_17);
lean::cnstr_set(x_41, 2, x_34);
lean::cnstr_set(x_41, 3, x_38);
return x_41;
}
}
case 1:
{
obj* x_43; 
lean::dec(x_26);
x_43 = lean::box(0);
if (lean::obj_tag(x_28) == 0)
{
obj* x_45; obj* x_46; 
lean::dec(x_28);
x_45 = lean::box(3);
x_46 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_46, 0, x_1);
lean::cnstr_set(x_46, 1, x_17);
lean::cnstr_set(x_46, 2, x_43);
lean::cnstr_set(x_46, 3, x_45);
return x_46;
}
else
{
obj* x_47; obj* x_50; 
x_47 = lean::cnstr_get(x_28, 0);
lean::inc(x_47);
lean::dec(x_28);
x_50 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_50, 0, x_1);
lean::cnstr_set(x_50, 1, x_17);
lean::cnstr_set(x_50, 2, x_43);
lean::cnstr_set(x_50, 3, x_47);
return x_50;
}
}
case 2:
{
obj* x_52; 
lean::dec(x_26);
x_52 = lean::box(0);
if (lean::obj_tag(x_28) == 0)
{
obj* x_54; obj* x_55; 
lean::dec(x_28);
x_54 = lean::box(3);
x_55 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_55, 0, x_1);
lean::cnstr_set(x_55, 1, x_17);
lean::cnstr_set(x_55, 2, x_52);
lean::cnstr_set(x_55, 3, x_54);
return x_55;
}
else
{
obj* x_56; obj* x_59; 
x_56 = lean::cnstr_get(x_28, 0);
lean::inc(x_56);
lean::dec(x_28);
x_59 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_59, 0, x_1);
lean::cnstr_set(x_59, 1, x_17);
lean::cnstr_set(x_59, 2, x_52);
lean::cnstr_set(x_59, 3, x_56);
return x_59;
}
}
default:
{
obj* x_61; 
lean::dec(x_26);
x_61 = lean::box(0);
if (lean::obj_tag(x_28) == 0)
{
obj* x_63; obj* x_64; 
lean::dec(x_28);
x_63 = lean::box(3);
x_64 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_64, 0, x_1);
lean::cnstr_set(x_64, 1, x_17);
lean::cnstr_set(x_64, 2, x_61);
lean::cnstr_set(x_64, 3, x_63);
return x_64;
}
else
{
obj* x_65; obj* x_68; 
x_65 = lean::cnstr_get(x_28, 0);
lean::inc(x_65);
lean::dec(x_28);
x_68 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_68, 0, x_1);
lean::cnstr_set(x_68, 1, x_17);
lean::cnstr_set(x_68, 2, x_61);
lean::cnstr_set(x_68, 3, x_65);
return x_68;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_pi_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_26; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
lean::dec(x_0);
x_10 = l_lean_parser_term_binders_has__view;
x_11 = lean::cnstr_get(x_10, 1);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_3);
x_14 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_14);
x_16 = l_option_map___rarg(x_14, x_5);
x_17 = lean::box(3);
x_18 = l_option_get__or__else___main___rarg(x_16, x_17);
x_19 = lean::box(0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_7);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_18);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_13);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_1);
lean::cnstr_set(x_23, 1, x_22);
x_24 = l_lean_parser_term_pi;
lean::inc(x_24);
x_26 = l_lean_parser_syntax_mk__node(x_24, x_23);
return x_26;
}
}
obj* _init_l_lean_parser_term_pi_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_pi_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_pi_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_pi;
x_6 = l_lean_parser_term_pi_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_pi_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_17; obj* x_18; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_0 = lean::mk_string("\xce\xa0");
x_1 = lean::mk_string("Pi");
x_2 = l_lean_parser_max__prec;
lean::inc(x_2);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser___spec__1), 8, 3);
lean::closure_set(x_4, 0, x_0);
lean::closure_set(x_4, 1, x_1);
lean::closure_set(x_4, 2, x_2);
x_5 = lean::mk_string("\xe2\x88\x80");
x_6 = lean::mk_string("forall");
lean::inc(x_2);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser___spec__1), 8, 3);
lean::closure_set(x_8, 0, x_5);
lean::closure_set(x_8, 1, x_6);
lean::closure_set(x_8, 2, x_2);
x_9 = lean::box(0);
lean::inc(x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_8);
lean::cnstr_set(x_11, 1, x_9);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_4);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_any__of___at_lean_parser_command_notation__spec_fold__action_parser___spec__1), 6, 1);
lean::closure_set(x_13, 0, x_12);
x_14 = lean::mk_string(",");
x_15 = l_string_trim(x_14);
lean::inc(x_15);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_17, 0, x_15);
x_18 = lean::mk_nat_obj(0u);
lean::inc(x_18);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_20, 0, x_15);
lean::closure_set(x_20, 1, x_18);
lean::closure_set(x_20, 2, x_17);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_21, 0, x_18);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_9);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_20);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_parser), 5, 0);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_23);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_13);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
}
obj* _init_l_lean_parser_term_pi_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_17; obj* x_18; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_39; 
x_0 = lean::mk_string("\xce\xa0");
x_1 = lean::mk_string("Pi");
x_2 = l_lean_parser_max__prec;
lean::inc(x_2);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser___spec__1), 8, 3);
lean::closure_set(x_4, 0, x_0);
lean::closure_set(x_4, 1, x_1);
lean::closure_set(x_4, 2, x_2);
x_5 = lean::mk_string("\xe2\x88\x80");
x_6 = lean::mk_string("forall");
lean::inc(x_2);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser___spec__1), 8, 3);
lean::closure_set(x_8, 0, x_5);
lean::closure_set(x_8, 1, x_6);
lean::closure_set(x_8, 2, x_2);
x_9 = lean::box(0);
lean::inc(x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_8);
lean::cnstr_set(x_11, 1, x_9);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_4);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_any__of___at_lean_parser_command_notation__spec_fold__action_parser___spec__1), 6, 1);
lean::closure_set(x_13, 0, x_12);
x_14 = lean::mk_string(",");
x_15 = l_string_trim(x_14);
lean::inc(x_15);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_17, 0, x_15);
x_18 = lean::mk_nat_obj(0u);
lean::inc(x_18);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_20, 0, x_15);
lean::closure_set(x_20, 1, x_18);
lean::closure_set(x_20, 2, x_17);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_21, 0, x_18);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_9);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_20);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_parser), 5, 0);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_23);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_13);
lean::cnstr_set(x_26, 1, x_25);
x_27 = l_lean_parser_term__parser__m_monad;
x_28 = l_lean_parser_term__parser__m_monad__except;
x_29 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_30 = l_lean_parser_term__parser__m_alternative;
x_31 = l_lean_parser_term_pi;
x_32 = l_lean_parser_term_pi_has__view;
lean::inc(x_32);
lean::inc(x_31);
lean::inc(x_30);
lean::inc(x_29);
lean::inc(x_28);
lean::inc(x_27);
x_39 = l_lean_parser_combinators_node_view___rarg(x_27, x_28, x_29, x_30, x_31, x_26, x_32);
return x_39;
}
}
obj* _init_l_lean_parser_term_pi_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; 
x_0 = lean::mk_string("\xce\xa0");
x_1 = lean::mk_string("Pi");
x_2 = l_lean_parser_max__prec;
lean::inc(x_2);
x_4 = l_lean_parser_unicode__symbol_lean_parser_has__tokens___rarg(x_0, x_1, x_2);
x_5 = lean::mk_string("\xe2\x88\x80");
x_6 = lean::mk_string("forall");
lean::inc(x_2);
x_8 = l_lean_parser_unicode__symbol_lean_parser_has__tokens___rarg(x_5, x_6, x_2);
x_9 = lean::box(0);
lean::inc(x_9);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_8, x_9);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_4, x_11);
x_13 = l_lean_parser_tokens___rarg(x_12);
x_14 = lean::mk_string(",");
x_15 = lean::mk_nat_obj(0u);
x_16 = l_lean_parser_symbol_tokens___rarg(x_14, x_15);
x_17 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_17);
x_19 = l_lean_parser_list_cons_tokens___rarg(x_17, x_9);
x_20 = l_lean_parser_list_cons_tokens___rarg(x_16, x_19);
x_21 = l_lean_parser_term_binders_parser_lean_parser_has__tokens;
lean::inc(x_21);
x_23 = l_lean_parser_list_cons_tokens___rarg(x_21, x_20);
x_24 = l_lean_parser_list_cons_tokens___rarg(x_13, x_23);
x_25 = l_lean_parser_tokens___rarg(x_24);
return x_25;
}
}
obj* _init_l_lean_parser_term_explicit__modifier() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("explicit_modifier");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_explicit__modifier_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__4;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
lean::dec(x_86);
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_90; obj* x_93; obj* x_94; 
x_90 = lean::cnstr_get(x_1, 0);
lean::inc(x_90);
lean::dec(x_1);
x_93 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_93, 0, x_90);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
case 1:
{
obj* x_96; 
lean::dec(x_1);
x_96 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1;
lean::inc(x_96);
return x_96;
}
case 2:
{
obj* x_99; 
lean::dec(x_1);
x_99 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1;
lean::inc(x_99);
return x_99;
}
default:
{
obj* x_102; 
lean::dec(x_1);
x_102 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1;
lean::inc(x_102);
return x_102;
}
}
}
else
{
lean::dec(x_86);
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_105; obj* x_108; obj* x_109; 
x_105 = lean::cnstr_get(x_1, 0);
lean::inc(x_105);
lean::dec(x_1);
x_108 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_108, 0, x_105);
x_109 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_109, 0, x_108);
return x_109;
}
case 1:
{
obj* x_111; 
lean::dec(x_1);
x_111 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2;
lean::inc(x_111);
return x_111;
}
case 2:
{
obj* x_114; 
lean::dec(x_1);
x_114 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2;
lean::inc(x_114);
return x_114;
}
default:
{
obj* x_117; 
lean::dec(x_1);
x_117 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2;
lean::inc(x_117);
return x_117;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(0);
x_1 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(0);
x_1 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
lean::dec(x_6);
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_10; obj* x_13; obj* x_14; 
x_10 = lean::cnstr_get(x_0, 0);
lean::inc(x_10);
lean::dec(x_0);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_10);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
case 1:
{
obj* x_16; 
lean::dec(x_0);
x_16 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1;
lean::inc(x_16);
return x_16;
}
case 2:
{
obj* x_19; 
lean::dec(x_0);
x_19 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1;
lean::inc(x_19);
return x_19;
}
default:
{
obj* x_22; 
lean::dec(x_0);
x_22 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1;
lean::inc(x_22);
return x_22;
}
}
}
else
{
lean::dec(x_6);
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_25; obj* x_28; obj* x_29; 
x_25 = lean::cnstr_get(x_0, 0);
lean::inc(x_25);
lean::dec(x_0);
x_28 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_28, 0, x_25);
x_29 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_29, 0, x_28);
return x_29;
}
case 1:
{
obj* x_31; 
lean::dec(x_0);
x_31 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2;
lean::inc(x_31);
return x_31;
}
case 2:
{
obj* x_34; 
lean::dec(x_0);
x_34 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2;
lean::inc(x_34);
return x_34;
}
default:
{
obj* x_37; 
lean::dec(x_0);
x_37 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2;
lean::inc(x_37);
return x_37;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("explicit_modifier");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_18; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_5);
x_7 = l_option_map___rarg(x_5, x_2);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
lean::inc(x_1);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_9);
lean::cnstr_set(x_11, 1, x_1);
x_12 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_12);
x_14 = l_lean_parser_syntax_mk__node(x_12, x_11);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_1);
x_16 = l_lean_parser_term_explicit__modifier;
lean::inc(x_16);
x_18 = l_lean_parser_syntax_mk__node(x_16, x_15);
return x_18;
}
else
{
obj* x_19; obj* x_22; obj* x_24; obj* x_25; obj* x_26; obj* x_28; obj* x_29; obj* x_31; obj* x_32; obj* x_33; obj* x_35; 
x_19 = lean::cnstr_get(x_0, 0);
lean::inc(x_19);
lean::dec(x_0);
x_22 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_22);
x_24 = l_option_map___rarg(x_22, x_19);
x_25 = lean::box(3);
x_26 = l_option_get__or__else___main___rarg(x_24, x_25);
lean::inc(x_1);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_26);
lean::cnstr_set(x_28, 1, x_1);
x_29 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_29);
x_31 = l_lean_parser_syntax_mk__node(x_29, x_28);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_1);
x_33 = l_lean_parser_term_explicit__modifier;
lean::inc(x_33);
x_35 = l_lean_parser_syntax_mk__node(x_33, x_32);
return x_35;
}
}
}
obj* _init_l_lean_parser_term_explicit__modifier_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_explicit__modifier_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_explicit() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("explicit");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_explicit_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_explicit_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
lean::dec(x_1);
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_12; 
lean::dec(x_8);
x_12 = l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__1;
lean::inc(x_12);
return x_12;
}
else
{
obj* x_14; obj* x_17; obj* x_18; obj* x_20; obj* x_21; obj* x_23; 
x_14 = lean::cnstr_get(x_8, 0);
lean::inc(x_14);
lean::dec(x_8);
x_17 = l_lean_parser_ident__univs_has__view;
x_18 = lean::cnstr_get(x_17, 0);
lean::inc(x_18);
x_20 = lean::apply_1(x_18, x_14);
x_21 = l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__2;
lean::inc(x_21);
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_21);
lean::cnstr_set(x_23, 1, x_20);
return x_23;
}
}
else
{
obj* x_24; obj* x_26; obj* x_29; obj* x_30; obj* x_32; 
x_24 = lean::cnstr_get(x_8, 0);
lean::inc(x_24);
x_26 = lean::cnstr_get(x_8, 1);
lean::inc(x_26);
lean::dec(x_8);
x_29 = l_lean_parser_term_explicit__modifier_has__view;
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
x_32 = lean::apply_1(x_30, x_24);
if (lean::obj_tag(x_26) == 0)
{
obj* x_34; obj* x_36; 
lean::dec(x_26);
x_34 = l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__3;
lean::inc(x_34);
x_36 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_36, 0, x_32);
lean::cnstr_set(x_36, 1, x_34);
return x_36;
}
else
{
obj* x_37; obj* x_40; obj* x_41; obj* x_43; obj* x_44; 
x_37 = lean::cnstr_get(x_26, 0);
lean::inc(x_37);
lean::dec(x_26);
x_40 = l_lean_parser_ident__univs_has__view;
x_41 = lean::cnstr_get(x_40, 0);
lean::inc(x_41);
x_43 = lean::apply_1(x_41, x_37);
x_44 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_44, 0, x_32);
lean::cnstr_set(x_44, 1, x_43);
return x_44;
}
}
}
}
}
obj* _init_l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; 
x_0 = l_lean_parser_term_explicit__modifier_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
lean::inc(x_3);
x_5 = lean::apply_1(x_1, x_3);
x_6 = l_lean_parser_ident__univs_has__view;
x_7 = lean::cnstr_get(x_6, 0);
lean::inc(x_7);
x_9 = lean::apply_1(x_7, x_3);
x_10 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_10, 0, x_5);
lean::cnstr_set(x_10, 1, x_9);
return x_10;
}
}
obj* _init_l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_0 = l_lean_parser_term_explicit__modifier_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
return x_4;
}
}
obj* _init_l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_0 = l_lean_parser_ident__univs_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
return x_4;
}
}
obj* l_lean_parser_term_explicit_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_19; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_term_explicit__modifier_has__view;
x_7 = lean::cnstr_get(x_6, 1);
lean::inc(x_7);
x_9 = lean::apply_1(x_7, x_1);
x_10 = l_lean_parser_ident__univs_has__view;
x_11 = lean::cnstr_get(x_10, 1);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_3);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_9);
lean::cnstr_set(x_16, 1, x_15);
x_17 = l_lean_parser_term_explicit;
lean::inc(x_17);
x_19 = l_lean_parser_syntax_mk__node(x_17, x_16);
return x_19;
}
}
obj* _init_l_lean_parser_term_explicit_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_explicit_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_explicit_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_explicit;
x_6 = l_lean_parser_term_explicit_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_explicit_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_0 = lean::mk_string("@");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_string("@@");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
lean::inc(x_4);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_12, 0, x_8);
lean::closure_set(x_12, 1, x_4);
lean::closure_set(x_12, 2, x_10);
x_13 = lean::box(0);
lean::inc(x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_12);
lean::cnstr_set(x_15, 1, x_13);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_6);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::mk_nat_obj(0u);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_18, 0, x_16);
lean::closure_set(x_18, 1, x_17);
lean::inc(x_13);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_18);
lean::cnstr_set(x_20, 1, x_13);
x_21 = l_lean_parser_term_explicit__modifier;
lean::inc(x_21);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_23, 0, x_21);
lean::closure_set(x_23, 1, x_20);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univs_parser), 5, 0);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_13);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_23);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
}
obj* _init_l_lean_parser_term_explicit_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_39; 
x_0 = lean::mk_string("@");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_string("@@");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
lean::inc(x_4);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_12, 0, x_8);
lean::closure_set(x_12, 1, x_4);
lean::closure_set(x_12, 2, x_10);
x_13 = lean::box(0);
lean::inc(x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_12);
lean::cnstr_set(x_15, 1, x_13);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_6);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::mk_nat_obj(0u);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_18, 0, x_16);
lean::closure_set(x_18, 1, x_17);
lean::inc(x_13);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_18);
lean::cnstr_set(x_20, 1, x_13);
x_21 = l_lean_parser_term_explicit__modifier;
lean::inc(x_21);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_23, 0, x_21);
lean::closure_set(x_23, 1, x_20);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univs_parser), 5, 0);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_13);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_23);
lean::cnstr_set(x_26, 1, x_25);
x_27 = l_lean_parser_term__parser__m_monad;
x_28 = l_lean_parser_term__parser__m_monad__except;
x_29 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_30 = l_lean_parser_term__parser__m_alternative;
x_31 = l_lean_parser_term_explicit;
x_32 = l_lean_parser_term_explicit_has__view;
lean::inc(x_32);
lean::inc(x_31);
lean::inc(x_30);
lean::inc(x_29);
lean::inc(x_28);
lean::inc(x_27);
x_39 = l_lean_parser_combinators_node_view___rarg(x_27, x_28, x_29, x_30, x_31, x_26, x_32);
return x_39;
}
}
obj* _init_l_lean_parser_term_explicit_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; obj* x_18; obj* x_19; 
x_0 = lean::mk_string("@");
x_1 = l_lean_parser_max__prec;
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::mk_string("@@");
lean::inc(x_1);
x_6 = l_lean_parser_symbol_tokens___rarg(x_4, x_1);
x_7 = lean::box(0);
lean::inc(x_7);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_6, x_7);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_3, x_9);
x_11 = l_lean_parser_tokens___rarg(x_10);
lean::inc(x_7);
x_13 = l_lean_parser_list_cons_tokens___rarg(x_11, x_7);
x_14 = l_lean_parser_tokens___rarg(x_13);
x_15 = l_lean_parser_ident__univs_parser_lean_parser_has__tokens;
lean::inc(x_15);
x_17 = l_lean_parser_list_cons_tokens___rarg(x_15, x_7);
x_18 = l_lean_parser_list_cons_tokens___rarg(x_14, x_17);
x_19 = l_lean_parser_tokens___rarg(x_18);
return x_19;
}
}
obj* _init_l_lean_parser_term_from() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("from");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_from_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_from_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_from_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_from_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
if (lean::is_shared(x_1)) {
 lean::dec(x_1);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_1, 0);
 x_7 = x_1;
}
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
lean::dec(x_7);
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; 
lean::dec(x_8);
x_13 = l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_13);
return x_13;
}
else
{
obj* x_15; obj* x_18; obj* x_19; 
x_15 = lean::cnstr_get(x_8, 0);
lean::inc(x_15);
lean::dec(x_8);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_15);
return x_19;
}
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_8, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_8, 1);
lean::inc(x_22);
lean::dec(x_8);
switch (lean::obj_tag(x_20)) {
case 0:
{
obj* x_25; obj* x_28; 
x_25 = lean::cnstr_get(x_20, 0);
lean::inc(x_25);
lean::dec(x_20);
if (lean::is_scalar(x_7)) {
 x_28 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_28 = x_7;
}
lean::cnstr_set(x_28, 0, x_25);
if (lean::obj_tag(x_22) == 0)
{
obj* x_30; obj* x_31; 
lean::dec(x_22);
x_30 = lean::box(3);
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_30);
return x_31;
}
else
{
obj* x_32; obj* x_35; 
x_32 = lean::cnstr_get(x_22, 0);
lean::inc(x_32);
lean::dec(x_22);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_28);
lean::cnstr_set(x_35, 1, x_32);
return x_35;
}
}
case 1:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_39; 
lean::dec(x_22);
x_39 = l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_39);
return x_39;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_22, 0);
lean::inc(x_41);
lean::dec(x_22);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
case 2:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_49; 
lean::dec(x_22);
x_49 = l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_49);
return x_49;
}
else
{
obj* x_51; obj* x_54; obj* x_55; 
x_51 = lean::cnstr_get(x_22, 0);
lean::inc(x_51);
lean::dec(x_22);
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_51);
return x_55;
}
}
default:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_59; 
lean::dec(x_22);
x_59 = l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_59);
return x_59;
}
else
{
obj* x_61; obj* x_64; obj* x_65; 
x_61 = lean::cnstr_get(x_22, 0);
lean::inc(x_61);
lean::dec(x_22);
x_64 = lean::box(0);
x_65 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_61);
return x_65;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_from_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_6);
x_8 = l_option_map___rarg(x_6, x_1);
x_9 = lean::box(3);
x_10 = l_option_get__or__else___main___rarg(x_8, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_3);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_10);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_lean_parser_term_from;
lean::inc(x_14);
x_16 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_16;
}
}
obj* _init_l_lean_parser_term_from_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_from_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_from_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_from;
x_6 = l_lean_parser_term_from_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_from_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_0 = lean::mk_string("from ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_7, 0, x_4);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_6);
lean::cnstr_set(x_10, 1, x_9);
return x_10;
}
}
obj* _init_l_lean_parser_term_from_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_23; 
x_0 = lean::mk_string("from ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_7, 0, x_4);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_6);
lean::cnstr_set(x_10, 1, x_9);
x_11 = l_lean_parser_term__parser__m_monad;
x_12 = l_lean_parser_term__parser__m_monad__except;
x_13 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_14 = l_lean_parser_term__parser__m_alternative;
x_15 = l_lean_parser_term_from;
x_16 = l_lean_parser_term_from_has__view;
lean::inc(x_16);
lean::inc(x_15);
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
x_23 = l_lean_parser_combinators_node_view___rarg(x_11, x_12, x_13, x_14, x_15, x_10, x_16);
return x_23;
}
}
obj* _init_l_lean_parser_term_from_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::mk_string("from ");
x_1 = lean::mk_nat_obj(0u);
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::box(0);
x_4 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_4);
x_6 = l_lean_parser_list_cons_tokens___rarg(x_4, x_3);
x_7 = l_lean_parser_list_cons_tokens___rarg(x_2, x_6);
x_8 = l_lean_parser_tokens___rarg(x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_let__lhs__id() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("let_lhs_id");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_let__lhs__id_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__2;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_23; 
lean::dec(x_2);
x_23 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_23);
x_20 = x_23;
goto lbl_21;
}
case 1:
{
obj* x_25; 
x_25 = lean::cnstr_get(x_2, 0);
lean::inc(x_25);
lean::dec(x_2);
x_20 = x_25;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_29);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_32; 
lean::dec(x_2);
x_32 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_32);
x_20 = x_32;
goto lbl_21;
}
}
lbl_21:
{
obj* x_34; obj* x_35; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_37; 
x_37 = lean::box(3);
x_34 = x_1;
x_35 = x_37;
goto lbl_36;
}
else
{
obj* x_38; obj* x_40; 
x_38 = lean::cnstr_get(x_1, 0);
lean::inc(x_38);
x_40 = lean::cnstr_get(x_1, 1);
lean::inc(x_40);
lean::dec(x_1);
x_34 = x_40;
x_35 = x_38;
goto lbl_36;
}
lbl_36:
{
obj* x_43; 
x_43 = l_lean_parser_syntax_as__node___main(x_35);
if (lean::obj_tag(x_43) == 0)
{
lean::dec(x_43);
if (lean::obj_tag(x_34) == 0)
{
obj* x_46; obj* x_47; 
lean::dec(x_34);
x_46 = lean::box(3);
x_47 = l_lean_parser_syntax_as__node___main(x_46);
if (lean::obj_tag(x_47) == 0)
{
obj* x_49; obj* x_50; obj* x_53; 
lean::dec(x_47);
x_49 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_50 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_50);
lean::inc(x_49);
x_53 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_53, 0, x_20);
lean::cnstr_set(x_53, 1, x_49);
lean::cnstr_set(x_53, 2, x_50);
return x_53;
}
else
{
obj* x_54; obj* x_56; obj* x_57; 
x_54 = lean::cnstr_get(x_47, 0);
lean::inc(x_54);
if (lean::is_shared(x_47)) {
 lean::dec(x_47);
 x_56 = lean::box(0);
} else {
 lean::cnstr_release(x_47, 0);
 x_56 = x_47;
}
x_57 = lean::cnstr_get(x_54, 1);
lean::inc(x_57);
lean::dec(x_54);
if (lean::obj_tag(x_57) == 0)
{
obj* x_62; obj* x_63; obj* x_65; 
lean::dec(x_56);
lean::dec(x_57);
x_62 = lean::box(0);
x_63 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
lean::inc(x_63);
x_65 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_65, 0, x_20);
lean::cnstr_set(x_65, 1, x_63);
lean::cnstr_set(x_65, 2, x_62);
return x_65;
}
else
{
obj* x_66; obj* x_68; 
x_66 = lean::cnstr_get(x_57, 0);
lean::inc(x_66);
x_68 = lean::cnstr_get(x_57, 1);
lean::inc(x_68);
lean::dec(x_57);
if (lean::obj_tag(x_68) == 0)
{
obj* x_72; obj* x_73; obj* x_75; obj* x_76; obj* x_77; obj* x_79; 
lean::dec(x_68);
x_72 = l_lean_parser_term_type__spec_has__view;
x_73 = lean::cnstr_get(x_72, 0);
lean::inc(x_73);
x_75 = lean::apply_1(x_73, x_66);
if (lean::is_scalar(x_56)) {
 x_76 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_76 = x_56;
}
lean::cnstr_set(x_76, 0, x_75);
x_77 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
lean::inc(x_77);
x_79 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_79, 0, x_20);
lean::cnstr_set(x_79, 1, x_77);
lean::cnstr_set(x_79, 2, x_76);
return x_79;
}
else
{
obj* x_83; obj* x_84; obj* x_87; 
lean::dec(x_66);
lean::dec(x_68);
lean::dec(x_56);
x_83 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_84 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_84);
lean::inc(x_83);
x_87 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_87, 0, x_20);
lean::cnstr_set(x_87, 1, x_83);
lean::cnstr_set(x_87, 2, x_84);
return x_87;
}
}
}
}
else
{
obj* x_88; obj* x_91; 
x_88 = lean::cnstr_get(x_34, 0);
lean::inc(x_88);
lean::dec(x_34);
x_91 = l_lean_parser_syntax_as__node___main(x_88);
if (lean::obj_tag(x_91) == 0)
{
obj* x_93; obj* x_94; obj* x_97; 
lean::dec(x_91);
x_93 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_94 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_94);
lean::inc(x_93);
x_97 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_97, 0, x_20);
lean::cnstr_set(x_97, 1, x_93);
lean::cnstr_set(x_97, 2, x_94);
return x_97;
}
else
{
obj* x_98; obj* x_100; obj* x_101; 
x_98 = lean::cnstr_get(x_91, 0);
lean::inc(x_98);
if (lean::is_shared(x_91)) {
 lean::dec(x_91);
 x_100 = lean::box(0);
} else {
 lean::cnstr_release(x_91, 0);
 x_100 = x_91;
}
x_101 = lean::cnstr_get(x_98, 1);
lean::inc(x_101);
lean::dec(x_98);
if (lean::obj_tag(x_101) == 0)
{
obj* x_106; obj* x_107; obj* x_109; 
lean::dec(x_101);
lean::dec(x_100);
x_106 = lean::box(0);
x_107 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
lean::inc(x_107);
x_109 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_109, 0, x_20);
lean::cnstr_set(x_109, 1, x_107);
lean::cnstr_set(x_109, 2, x_106);
return x_109;
}
else
{
obj* x_110; obj* x_112; 
x_110 = lean::cnstr_get(x_101, 0);
lean::inc(x_110);
x_112 = lean::cnstr_get(x_101, 1);
lean::inc(x_112);
lean::dec(x_101);
if (lean::obj_tag(x_112) == 0)
{
obj* x_116; obj* x_117; obj* x_119; obj* x_120; obj* x_121; obj* x_123; 
lean::dec(x_112);
x_116 = l_lean_parser_term_type__spec_has__view;
x_117 = lean::cnstr_get(x_116, 0);
lean::inc(x_117);
x_119 = lean::apply_1(x_117, x_110);
if (lean::is_scalar(x_100)) {
 x_120 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_120 = x_100;
}
lean::cnstr_set(x_120, 0, x_119);
x_121 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
lean::inc(x_121);
x_123 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_123, 0, x_20);
lean::cnstr_set(x_123, 1, x_121);
lean::cnstr_set(x_123, 2, x_120);
return x_123;
}
else
{
obj* x_127; obj* x_128; obj* x_131; 
lean::dec(x_110);
lean::dec(x_100);
lean::dec(x_112);
x_127 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_128 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_128);
lean::inc(x_127);
x_131 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_131, 0, x_20);
lean::cnstr_set(x_131, 1, x_127);
lean::cnstr_set(x_131, 2, x_128);
return x_131;
}
}
}
}
}
else
{
obj* x_132; obj* x_134; obj* x_135; obj* x_138; obj* x_140; 
x_132 = lean::cnstr_get(x_43, 0);
lean::inc(x_132);
if (lean::is_shared(x_43)) {
 lean::dec(x_43);
 x_134 = lean::box(0);
} else {
 lean::cnstr_release(x_43, 0);
 x_134 = x_43;
}
x_135 = lean::cnstr_get(x_132, 1);
lean::inc(x_135);
lean::dec(x_132);
x_138 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4;
lean::inc(x_138);
x_140 = l_list_map___main___rarg(x_138, x_135);
if (lean::obj_tag(x_34) == 0)
{
obj* x_142; obj* x_143; 
lean::dec(x_34);
x_142 = lean::box(3);
x_143 = l_lean_parser_syntax_as__node___main(x_142);
if (lean::obj_tag(x_143) == 0)
{
obj* x_146; obj* x_148; 
lean::dec(x_143);
lean::dec(x_134);
x_146 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_146);
x_148 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_148, 0, x_20);
lean::cnstr_set(x_148, 1, x_140);
lean::cnstr_set(x_148, 2, x_146);
return x_148;
}
else
{
obj* x_149; obj* x_152; 
x_149 = lean::cnstr_get(x_143, 0);
lean::inc(x_149);
lean::dec(x_143);
x_152 = lean::cnstr_get(x_149, 1);
lean::inc(x_152);
lean::dec(x_149);
if (lean::obj_tag(x_152) == 0)
{
obj* x_157; obj* x_158; 
lean::dec(x_152);
lean::dec(x_134);
x_157 = lean::box(0);
x_158 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_158, 0, x_20);
lean::cnstr_set(x_158, 1, x_140);
lean::cnstr_set(x_158, 2, x_157);
return x_158;
}
else
{
obj* x_159; obj* x_161; 
x_159 = lean::cnstr_get(x_152, 0);
lean::inc(x_159);
x_161 = lean::cnstr_get(x_152, 1);
lean::inc(x_161);
lean::dec(x_152);
if (lean::obj_tag(x_161) == 0)
{
obj* x_165; obj* x_166; obj* x_168; obj* x_169; obj* x_170; 
lean::dec(x_161);
x_165 = l_lean_parser_term_type__spec_has__view;
x_166 = lean::cnstr_get(x_165, 0);
lean::inc(x_166);
x_168 = lean::apply_1(x_166, x_159);
if (lean::is_scalar(x_134)) {
 x_169 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_169 = x_134;
}
lean::cnstr_set(x_169, 0, x_168);
x_170 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_170, 0, x_20);
lean::cnstr_set(x_170, 1, x_140);
lean::cnstr_set(x_170, 2, x_169);
return x_170;
}
else
{
obj* x_174; obj* x_176; 
lean::dec(x_161);
lean::dec(x_159);
lean::dec(x_134);
x_174 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_174);
x_176 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_176, 0, x_20);
lean::cnstr_set(x_176, 1, x_140);
lean::cnstr_set(x_176, 2, x_174);
return x_176;
}
}
}
}
else
{
obj* x_177; obj* x_180; 
x_177 = lean::cnstr_get(x_34, 0);
lean::inc(x_177);
lean::dec(x_34);
x_180 = l_lean_parser_syntax_as__node___main(x_177);
if (lean::obj_tag(x_180) == 0)
{
obj* x_183; obj* x_185; 
lean::dec(x_180);
lean::dec(x_134);
x_183 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_183);
x_185 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_185, 0, x_20);
lean::cnstr_set(x_185, 1, x_140);
lean::cnstr_set(x_185, 2, x_183);
return x_185;
}
else
{
obj* x_186; obj* x_189; 
x_186 = lean::cnstr_get(x_180, 0);
lean::inc(x_186);
lean::dec(x_180);
x_189 = lean::cnstr_get(x_186, 1);
lean::inc(x_189);
lean::dec(x_186);
if (lean::obj_tag(x_189) == 0)
{
obj* x_194; obj* x_195; 
lean::dec(x_189);
lean::dec(x_134);
x_194 = lean::box(0);
x_195 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_195, 0, x_20);
lean::cnstr_set(x_195, 1, x_140);
lean::cnstr_set(x_195, 2, x_194);
return x_195;
}
else
{
obj* x_196; obj* x_198; 
x_196 = lean::cnstr_get(x_189, 0);
lean::inc(x_196);
x_198 = lean::cnstr_get(x_189, 1);
lean::inc(x_198);
lean::dec(x_189);
if (lean::obj_tag(x_198) == 0)
{
obj* x_202; obj* x_203; obj* x_205; obj* x_206; obj* x_207; 
lean::dec(x_198);
x_202 = l_lean_parser_term_type__spec_has__view;
x_203 = lean::cnstr_get(x_202, 0);
lean::inc(x_203);
x_205 = lean::apply_1(x_203, x_196);
if (lean::is_scalar(x_134)) {
 x_206 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_206 = x_134;
}
lean::cnstr_set(x_206, 0, x_205);
x_207 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_207, 0, x_20);
lean::cnstr_set(x_207, 1, x_140);
lean::cnstr_set(x_207, 2, x_206);
return x_207;
}
else
{
obj* x_211; obj* x_213; 
lean::dec(x_198);
lean::dec(x_196);
lean::dec(x_134);
x_211 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_211);
x_213 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_213, 0, x_20);
lean::cnstr_set(x_213, 1, x_140);
lean::cnstr_set(x_213, 2, x_211);
return x_213;
}
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_lean_parser_term_bracketed__binder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_8; 
lean::dec(x_1);
x_8 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_8);
x_5 = x_8;
goto lbl_6;
}
case 1:
{
obj* x_10; 
x_10 = lean::cnstr_get(x_1, 0);
lean::inc(x_10);
lean::dec(x_1);
x_5 = x_10;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_14);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_17; 
lean::dec(x_1);
x_17 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_17);
x_5 = x_17;
goto lbl_6;
}
}
lbl_6:
{
obj* x_19; obj* x_20; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_22; 
x_22 = lean::box(3);
x_19 = x_0;
x_20 = x_22;
goto lbl_21;
}
else
{
obj* x_23; obj* x_25; 
x_23 = lean::cnstr_get(x_0, 0);
lean::inc(x_23);
x_25 = lean::cnstr_get(x_0, 1);
lean::inc(x_25);
lean::dec(x_0);
x_19 = x_25;
x_20 = x_23;
goto lbl_21;
}
lbl_21:
{
obj* x_28; 
x_28 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_28) == 0)
{
lean::dec(x_28);
if (lean::obj_tag(x_19) == 0)
{
obj* x_31; obj* x_32; 
lean::dec(x_19);
x_31 = lean::box(3);
x_32 = l_lean_parser_syntax_as__node___main(x_31);
if (lean::obj_tag(x_32) == 0)
{
obj* x_34; obj* x_35; obj* x_38; 
lean::dec(x_32);
x_34 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_35 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_35);
lean::inc(x_34);
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_5);
lean::cnstr_set(x_38, 1, x_34);
lean::cnstr_set(x_38, 2, x_35);
return x_38;
}
else
{
obj* x_39; obj* x_41; obj* x_42; 
x_39 = lean::cnstr_get(x_32, 0);
lean::inc(x_39);
if (lean::is_shared(x_32)) {
 lean::dec(x_32);
 x_41 = lean::box(0);
} else {
 lean::cnstr_release(x_32, 0);
 x_41 = x_32;
}
x_42 = lean::cnstr_get(x_39, 1);
lean::inc(x_42);
lean::dec(x_39);
if (lean::obj_tag(x_42) == 0)
{
obj* x_47; obj* x_48; obj* x_50; 
lean::dec(x_41);
lean::dec(x_42);
x_47 = lean::box(0);
x_48 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
lean::inc(x_48);
x_50 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_50, 0, x_5);
lean::cnstr_set(x_50, 1, x_48);
lean::cnstr_set(x_50, 2, x_47);
return x_50;
}
else
{
obj* x_51; obj* x_53; 
x_51 = lean::cnstr_get(x_42, 0);
lean::inc(x_51);
x_53 = lean::cnstr_get(x_42, 1);
lean::inc(x_53);
lean::dec(x_42);
if (lean::obj_tag(x_53) == 0)
{
obj* x_57; obj* x_58; obj* x_60; obj* x_61; obj* x_62; obj* x_64; 
lean::dec(x_53);
x_57 = l_lean_parser_term_type__spec_has__view;
x_58 = lean::cnstr_get(x_57, 0);
lean::inc(x_58);
x_60 = lean::apply_1(x_58, x_51);
if (lean::is_scalar(x_41)) {
 x_61 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_61 = x_41;
}
lean::cnstr_set(x_61, 0, x_60);
x_62 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
lean::inc(x_62);
x_64 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_64, 0, x_5);
lean::cnstr_set(x_64, 1, x_62);
lean::cnstr_set(x_64, 2, x_61);
return x_64;
}
else
{
obj* x_68; obj* x_69; obj* x_72; 
lean::dec(x_41);
lean::dec(x_51);
lean::dec(x_53);
x_68 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_69 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_69);
lean::inc(x_68);
x_72 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_72, 0, x_5);
lean::cnstr_set(x_72, 1, x_68);
lean::cnstr_set(x_72, 2, x_69);
return x_72;
}
}
}
}
else
{
obj* x_73; obj* x_76; 
x_73 = lean::cnstr_get(x_19, 0);
lean::inc(x_73);
lean::dec(x_19);
x_76 = l_lean_parser_syntax_as__node___main(x_73);
if (lean::obj_tag(x_76) == 0)
{
obj* x_78; obj* x_79; obj* x_82; 
lean::dec(x_76);
x_78 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_79 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_79);
lean::inc(x_78);
x_82 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_82, 0, x_5);
lean::cnstr_set(x_82, 1, x_78);
lean::cnstr_set(x_82, 2, x_79);
return x_82;
}
else
{
obj* x_83; obj* x_85; obj* x_86; 
x_83 = lean::cnstr_get(x_76, 0);
lean::inc(x_83);
if (lean::is_shared(x_76)) {
 lean::dec(x_76);
 x_85 = lean::box(0);
} else {
 lean::cnstr_release(x_76, 0);
 x_85 = x_76;
}
x_86 = lean::cnstr_get(x_83, 1);
lean::inc(x_86);
lean::dec(x_83);
if (lean::obj_tag(x_86) == 0)
{
obj* x_91; obj* x_92; obj* x_94; 
lean::dec(x_86);
lean::dec(x_85);
x_91 = lean::box(0);
x_92 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
lean::inc(x_92);
x_94 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_94, 0, x_5);
lean::cnstr_set(x_94, 1, x_92);
lean::cnstr_set(x_94, 2, x_91);
return x_94;
}
else
{
obj* x_95; obj* x_97; 
x_95 = lean::cnstr_get(x_86, 0);
lean::inc(x_95);
x_97 = lean::cnstr_get(x_86, 1);
lean::inc(x_97);
lean::dec(x_86);
if (lean::obj_tag(x_97) == 0)
{
obj* x_101; obj* x_102; obj* x_104; obj* x_105; obj* x_106; obj* x_108; 
lean::dec(x_97);
x_101 = l_lean_parser_term_type__spec_has__view;
x_102 = lean::cnstr_get(x_101, 0);
lean::inc(x_102);
x_104 = lean::apply_1(x_102, x_95);
if (lean::is_scalar(x_85)) {
 x_105 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_105 = x_85;
}
lean::cnstr_set(x_105, 0, x_104);
x_106 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
lean::inc(x_106);
x_108 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_108, 0, x_5);
lean::cnstr_set(x_108, 1, x_106);
lean::cnstr_set(x_108, 2, x_105);
return x_108;
}
else
{
obj* x_112; obj* x_113; obj* x_116; 
lean::dec(x_95);
lean::dec(x_85);
lean::dec(x_97);
x_112 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_113 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_113);
lean::inc(x_112);
x_116 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_116, 0, x_5);
lean::cnstr_set(x_116, 1, x_112);
lean::cnstr_set(x_116, 2, x_113);
return x_116;
}
}
}
}
}
else
{
obj* x_117; obj* x_119; obj* x_120; obj* x_123; obj* x_125; 
x_117 = lean::cnstr_get(x_28, 0);
lean::inc(x_117);
if (lean::is_shared(x_28)) {
 lean::dec(x_28);
 x_119 = lean::box(0);
} else {
 lean::cnstr_release(x_28, 0);
 x_119 = x_28;
}
x_120 = lean::cnstr_get(x_117, 1);
lean::inc(x_120);
lean::dec(x_117);
x_123 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4;
lean::inc(x_123);
x_125 = l_list_map___main___rarg(x_123, x_120);
if (lean::obj_tag(x_19) == 0)
{
obj* x_127; obj* x_128; 
lean::dec(x_19);
x_127 = lean::box(3);
x_128 = l_lean_parser_syntax_as__node___main(x_127);
if (lean::obj_tag(x_128) == 0)
{
obj* x_131; obj* x_133; 
lean::dec(x_119);
lean::dec(x_128);
x_131 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_131);
x_133 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_133, 0, x_5);
lean::cnstr_set(x_133, 1, x_125);
lean::cnstr_set(x_133, 2, x_131);
return x_133;
}
else
{
obj* x_134; obj* x_137; 
x_134 = lean::cnstr_get(x_128, 0);
lean::inc(x_134);
lean::dec(x_128);
x_137 = lean::cnstr_get(x_134, 1);
lean::inc(x_137);
lean::dec(x_134);
if (lean::obj_tag(x_137) == 0)
{
obj* x_142; obj* x_143; 
lean::dec(x_119);
lean::dec(x_137);
x_142 = lean::box(0);
x_143 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_143, 0, x_5);
lean::cnstr_set(x_143, 1, x_125);
lean::cnstr_set(x_143, 2, x_142);
return x_143;
}
else
{
obj* x_144; obj* x_146; 
x_144 = lean::cnstr_get(x_137, 0);
lean::inc(x_144);
x_146 = lean::cnstr_get(x_137, 1);
lean::inc(x_146);
lean::dec(x_137);
if (lean::obj_tag(x_146) == 0)
{
obj* x_150; obj* x_151; obj* x_153; obj* x_154; obj* x_155; 
lean::dec(x_146);
x_150 = l_lean_parser_term_type__spec_has__view;
x_151 = lean::cnstr_get(x_150, 0);
lean::inc(x_151);
x_153 = lean::apply_1(x_151, x_144);
if (lean::is_scalar(x_119)) {
 x_154 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_154 = x_119;
}
lean::cnstr_set(x_154, 0, x_153);
x_155 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_155, 0, x_5);
lean::cnstr_set(x_155, 1, x_125);
lean::cnstr_set(x_155, 2, x_154);
return x_155;
}
else
{
obj* x_159; obj* x_161; 
lean::dec(x_119);
lean::dec(x_146);
lean::dec(x_144);
x_159 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_159);
x_161 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_161, 0, x_5);
lean::cnstr_set(x_161, 1, x_125);
lean::cnstr_set(x_161, 2, x_159);
return x_161;
}
}
}
}
else
{
obj* x_162; obj* x_165; 
x_162 = lean::cnstr_get(x_19, 0);
lean::inc(x_162);
lean::dec(x_19);
x_165 = l_lean_parser_syntax_as__node___main(x_162);
if (lean::obj_tag(x_165) == 0)
{
obj* x_168; obj* x_170; 
lean::dec(x_165);
lean::dec(x_119);
x_168 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_168);
x_170 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_170, 0, x_5);
lean::cnstr_set(x_170, 1, x_125);
lean::cnstr_set(x_170, 2, x_168);
return x_170;
}
else
{
obj* x_171; obj* x_174; 
x_171 = lean::cnstr_get(x_165, 0);
lean::inc(x_171);
lean::dec(x_165);
x_174 = lean::cnstr_get(x_171, 1);
lean::inc(x_174);
lean::dec(x_171);
if (lean::obj_tag(x_174) == 0)
{
obj* x_179; obj* x_180; 
lean::dec(x_119);
lean::dec(x_174);
x_179 = lean::box(0);
x_180 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_180, 0, x_5);
lean::cnstr_set(x_180, 1, x_125);
lean::cnstr_set(x_180, 2, x_179);
return x_180;
}
else
{
obj* x_181; obj* x_183; 
x_181 = lean::cnstr_get(x_174, 0);
lean::inc(x_181);
x_183 = lean::cnstr_get(x_174, 1);
lean::inc(x_183);
lean::dec(x_174);
if (lean::obj_tag(x_183) == 0)
{
obj* x_187; obj* x_188; obj* x_190; obj* x_191; obj* x_192; 
lean::dec(x_183);
x_187 = l_lean_parser_term_type__spec_has__view;
x_188 = lean::cnstr_get(x_187, 0);
lean::inc(x_188);
x_190 = lean::apply_1(x_188, x_181);
if (lean::is_scalar(x_119)) {
 x_191 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_191 = x_119;
}
lean::cnstr_set(x_191, 0, x_190);
x_192 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_192, 0, x_5);
lean::cnstr_set(x_192, 1, x_125);
lean::cnstr_set(x_192, 2, x_191);
return x_192;
}
else
{
obj* x_196; obj* x_198; 
lean::dec(x_119);
lean::dec(x_183);
lean::dec(x_181);
x_196 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_196);
x_198 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_198, 0, x_5);
lean::cnstr_set(x_198, 1, x_125);
lean::cnstr_set(x_198, 2, x_196);
return x_198;
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_1);
x_9 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__1;
lean::inc(x_9);
x_11 = l_list_map___main___rarg(x_9, x_3);
x_12 = l_lean_parser_no__kind;
lean::inc(x_12);
x_14 = l_lean_parser_syntax_mk__node(x_12, x_11);
if (lean::obj_tag(x_5) == 0)
{
obj* x_16; obj* x_18; obj* x_19; obj* x_20; obj* x_22; 
lean::dec(x_5);
x_16 = l_lean_parser_detail__ident_has__view_x_27___lambda__2___closed__1;
lean::inc(x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_14);
lean::cnstr_set(x_18, 1, x_16);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_8);
lean::cnstr_set(x_19, 1, x_18);
x_20 = l_lean_parser_term_let__lhs__id;
lean::inc(x_20);
x_22 = l_lean_parser_syntax_mk__node(x_20, x_19);
return x_22;
}
else
{
obj* x_23; obj* x_26; obj* x_27; obj* x_28; obj* x_30; obj* x_32; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_40; 
x_23 = lean::cnstr_get(x_5, 0);
lean::inc(x_23);
lean::dec(x_5);
x_26 = lean::box(0);
x_27 = l_lean_parser_term_type__spec_has__view;
x_28 = lean::cnstr_get(x_27, 1);
lean::inc(x_28);
x_30 = lean::apply_1(x_28, x_23);
lean::inc(x_26);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_30);
lean::cnstr_set(x_32, 1, x_26);
lean::inc(x_12);
x_34 = l_lean_parser_syntax_mk__node(x_12, x_32);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_26);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_14);
lean::cnstr_set(x_36, 1, x_35);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_8);
lean::cnstr_set(x_37, 1, x_36);
x_38 = l_lean_parser_term_let__lhs__id;
lean::inc(x_38);
x_40 = l_lean_parser_syntax_mk__node(x_38, x_37);
return x_40;
}
}
}
obj* _init_l_lean_parser_term_let__lhs__id_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_let__lhs__id_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_let__lhs() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("let_lhs");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_let__lhs_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_let__lhs_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_let__lhs_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_let__lhs_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__2;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; 
lean::dec(x_86);
x_90 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_90, 0, x_1);
return x_90;
}
else
{
obj* x_92; obj* x_93; obj* x_95; obj* x_96; 
lean::dec(x_86);
x_92 = l_lean_parser_term_let__lhs__id_has__view;
x_93 = lean::cnstr_get(x_92, 0);
lean::inc(x_93);
x_95 = lean::apply_1(x_93, x_1);
x_96 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_96, 0, x_95);
return x_96;
}
}
}
}
obj* _init_l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_6);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_0);
return x_10;
}
else
{
obj* x_12; obj* x_13; obj* x_15; obj* x_16; 
lean::dec(x_6);
x_12 = l_lean_parser_term_let__lhs__id_has__view;
x_13 = lean::cnstr_get(x_12, 0);
lean::inc(x_13);
x_15 = lean::apply_1(x_13, x_0);
x_16 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_16, 0, x_15);
return x_16;
}
}
}
}
obj* _init_l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("let_lhs");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_let__lhs_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_let__lhs__id_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
x_8 = lean::apply_1(x_6, x_2);
lean::inc(x_1);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_lean_parser_term_let__lhs;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
else
{
obj* x_18; obj* x_22; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_29; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
lean::inc(x_1);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_18);
lean::cnstr_set(x_22, 1, x_1);
x_23 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_23);
x_25 = l_lean_parser_syntax_mk__node(x_23, x_22);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_lean_parser_term_let__lhs;
lean::inc(x_27);
x_29 = l_lean_parser_syntax_mk__node(x_27, x_26);
return x_29;
}
}
}
obj* _init_l_lean_parser_term_let__lhs_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_let__lhs_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_let() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("let");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_let_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_let_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_let_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_let_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_let_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
x_35 = lean::box(3);
x_32 = x_1;
x_33 = x_35;
goto lbl_34;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_1, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
lean::dec(x_1);
x_32 = x_38;
x_33 = x_36;
goto lbl_34;
}
lbl_34:
{
obj* x_41; obj* x_42; obj* x_44; obj* x_45; obj* x_46; 
x_41 = l_lean_parser_term_let__lhs_has__view;
x_42 = lean::cnstr_get(x_41, 0);
lean::inc(x_42);
x_44 = lean::apply_1(x_42, x_33);
if (lean::obj_tag(x_32) == 0)
{
obj* x_48; 
x_48 = lean::box(3);
x_45 = x_32;
x_46 = x_48;
goto lbl_47;
}
else
{
obj* x_49; obj* x_51; 
x_49 = lean::cnstr_get(x_32, 0);
lean::inc(x_49);
x_51 = lean::cnstr_get(x_32, 1);
lean::inc(x_51);
lean::dec(x_32);
x_45 = x_51;
x_46 = x_49;
goto lbl_47;
}
lbl_47:
{
obj* x_54; 
switch (lean::obj_tag(x_46)) {
case 0:
{
obj* x_56; obj* x_59; 
x_56 = lean::cnstr_get(x_46, 0);
lean::inc(x_56);
lean::dec(x_46);
x_59 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_59, 0, x_56);
x_54 = x_59;
goto lbl_55;
}
case 1:
{
obj* x_61; 
lean::dec(x_46);
x_61 = lean::box(0);
x_54 = x_61;
goto lbl_55;
}
case 2:
{
obj* x_63; 
lean::dec(x_46);
x_63 = lean::box(0);
x_54 = x_63;
goto lbl_55;
}
default:
{
obj* x_65; 
lean::dec(x_46);
x_65 = lean::box(0);
x_54 = x_65;
goto lbl_55;
}
}
lbl_55:
{
obj* x_66; obj* x_67; 
if (lean::obj_tag(x_45) == 0)
{
obj* x_69; 
x_69 = lean::box(3);
x_66 = x_45;
x_67 = x_69;
goto lbl_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_45, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_45, 1);
lean::inc(x_72);
lean::dec(x_45);
x_66 = x_72;
x_67 = x_70;
goto lbl_68;
}
lbl_68:
{
if (lean::obj_tag(x_66) == 0)
{
obj* x_75; 
x_75 = lean::box(0);
if (lean::obj_tag(x_66) == 0)
{
obj* x_77; obj* x_78; 
lean::dec(x_66);
x_77 = lean::box(3);
x_78 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_78, 0, x_20);
lean::cnstr_set(x_78, 1, x_44);
lean::cnstr_set(x_78, 2, x_54);
lean::cnstr_set(x_78, 3, x_67);
lean::cnstr_set(x_78, 4, x_75);
lean::cnstr_set(x_78, 5, x_77);
return x_78;
}
else
{
obj* x_79; obj* x_82; 
x_79 = lean::cnstr_get(x_66, 0);
lean::inc(x_79);
lean::dec(x_66);
x_82 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_82, 0, x_20);
lean::cnstr_set(x_82, 1, x_44);
lean::cnstr_set(x_82, 2, x_54);
lean::cnstr_set(x_82, 3, x_67);
lean::cnstr_set(x_82, 4, x_75);
lean::cnstr_set(x_82, 5, x_79);
return x_82;
}
}
else
{
obj* x_83; obj* x_85; 
x_83 = lean::cnstr_get(x_66, 0);
lean::inc(x_83);
x_85 = lean::cnstr_get(x_66, 1);
lean::inc(x_85);
lean::dec(x_66);
switch (lean::obj_tag(x_83)) {
case 0:
{
obj* x_88; obj* x_91; 
x_88 = lean::cnstr_get(x_83, 0);
lean::inc(x_88);
lean::dec(x_83);
x_91 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_91, 0, x_88);
if (lean::obj_tag(x_85) == 0)
{
obj* x_93; obj* x_94; 
lean::dec(x_85);
x_93 = lean::box(3);
x_94 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_94, 0, x_20);
lean::cnstr_set(x_94, 1, x_44);
lean::cnstr_set(x_94, 2, x_54);
lean::cnstr_set(x_94, 3, x_67);
lean::cnstr_set(x_94, 4, x_91);
lean::cnstr_set(x_94, 5, x_93);
return x_94;
}
else
{
obj* x_95; obj* x_98; 
x_95 = lean::cnstr_get(x_85, 0);
lean::inc(x_95);
lean::dec(x_85);
x_98 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_98, 0, x_20);
lean::cnstr_set(x_98, 1, x_44);
lean::cnstr_set(x_98, 2, x_54);
lean::cnstr_set(x_98, 3, x_67);
lean::cnstr_set(x_98, 4, x_91);
lean::cnstr_set(x_98, 5, x_95);
return x_98;
}
}
case 1:
{
obj* x_100; 
lean::dec(x_83);
x_100 = lean::box(0);
if (lean::obj_tag(x_85) == 0)
{
obj* x_102; obj* x_103; 
lean::dec(x_85);
x_102 = lean::box(3);
x_103 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_103, 0, x_20);
lean::cnstr_set(x_103, 1, x_44);
lean::cnstr_set(x_103, 2, x_54);
lean::cnstr_set(x_103, 3, x_67);
lean::cnstr_set(x_103, 4, x_100);
lean::cnstr_set(x_103, 5, x_102);
return x_103;
}
else
{
obj* x_104; obj* x_107; 
x_104 = lean::cnstr_get(x_85, 0);
lean::inc(x_104);
lean::dec(x_85);
x_107 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_107, 0, x_20);
lean::cnstr_set(x_107, 1, x_44);
lean::cnstr_set(x_107, 2, x_54);
lean::cnstr_set(x_107, 3, x_67);
lean::cnstr_set(x_107, 4, x_100);
lean::cnstr_set(x_107, 5, x_104);
return x_107;
}
}
case 2:
{
obj* x_109; 
lean::dec(x_83);
x_109 = lean::box(0);
if (lean::obj_tag(x_85) == 0)
{
obj* x_111; obj* x_112; 
lean::dec(x_85);
x_111 = lean::box(3);
x_112 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_112, 0, x_20);
lean::cnstr_set(x_112, 1, x_44);
lean::cnstr_set(x_112, 2, x_54);
lean::cnstr_set(x_112, 3, x_67);
lean::cnstr_set(x_112, 4, x_109);
lean::cnstr_set(x_112, 5, x_111);
return x_112;
}
else
{
obj* x_113; obj* x_116; 
x_113 = lean::cnstr_get(x_85, 0);
lean::inc(x_113);
lean::dec(x_85);
x_116 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_116, 0, x_20);
lean::cnstr_set(x_116, 1, x_44);
lean::cnstr_set(x_116, 2, x_54);
lean::cnstr_set(x_116, 3, x_67);
lean::cnstr_set(x_116, 4, x_109);
lean::cnstr_set(x_116, 5, x_113);
return x_116;
}
}
default:
{
obj* x_118; 
lean::dec(x_83);
x_118 = lean::box(0);
if (lean::obj_tag(x_85) == 0)
{
obj* x_120; obj* x_121; 
lean::dec(x_85);
x_120 = lean::box(3);
x_121 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_121, 0, x_20);
lean::cnstr_set(x_121, 1, x_44);
lean::cnstr_set(x_121, 2, x_54);
lean::cnstr_set(x_121, 3, x_67);
lean::cnstr_set(x_121, 4, x_118);
lean::cnstr_set(x_121, 5, x_120);
return x_121;
}
else
{
obj* x_122; obj* x_125; 
x_122 = lean::cnstr_get(x_85, 0);
lean::inc(x_122);
lean::dec(x_85);
x_125 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_125, 0, x_20);
lean::cnstr_set(x_125, 1, x_44);
lean::cnstr_set(x_125, 2, x_54);
lean::cnstr_set(x_125, 3, x_67);
lean::cnstr_set(x_125, 4, x_118);
lean::cnstr_set(x_125, 5, x_122);
return x_125;
}
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_let_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_19:
{
obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; 
x_26 = l_lean_parser_term_let__lhs_has__view;
x_27 = lean::cnstr_get(x_26, 0);
lean::inc(x_27);
x_29 = lean::apply_1(x_27, x_18);
if (lean::obj_tag(x_17) == 0)
{
obj* x_33; 
x_33 = lean::box(3);
x_30 = x_17;
x_31 = x_33;
goto lbl_32;
}
else
{
obj* x_34; obj* x_36; 
x_34 = lean::cnstr_get(x_17, 0);
lean::inc(x_34);
x_36 = lean::cnstr_get(x_17, 1);
lean::inc(x_36);
lean::dec(x_17);
x_30 = x_36;
x_31 = x_34;
goto lbl_32;
}
lbl_32:
{
obj* x_39; 
switch (lean::obj_tag(x_31)) {
case 0:
{
obj* x_41; obj* x_44; 
x_41 = lean::cnstr_get(x_31, 0);
lean::inc(x_41);
lean::dec(x_31);
x_44 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_44, 0, x_41);
x_39 = x_44;
goto lbl_40;
}
case 1:
{
obj* x_46; 
lean::dec(x_31);
x_46 = lean::box(0);
x_39 = x_46;
goto lbl_40;
}
case 2:
{
obj* x_48; 
lean::dec(x_31);
x_48 = lean::box(0);
x_39 = x_48;
goto lbl_40;
}
default:
{
obj* x_50; 
lean::dec(x_31);
x_50 = lean::box(0);
x_39 = x_50;
goto lbl_40;
}
}
lbl_40:
{
obj* x_51; obj* x_52; 
if (lean::obj_tag(x_30) == 0)
{
obj* x_54; 
x_54 = lean::box(3);
x_51 = x_30;
x_52 = x_54;
goto lbl_53;
}
else
{
obj* x_55; obj* x_57; 
x_55 = lean::cnstr_get(x_30, 0);
lean::inc(x_55);
x_57 = lean::cnstr_get(x_30, 1);
lean::inc(x_57);
lean::dec(x_30);
x_51 = x_57;
x_52 = x_55;
goto lbl_53;
}
lbl_53:
{
if (lean::obj_tag(x_51) == 0)
{
obj* x_60; 
x_60 = lean::box(0);
if (lean::obj_tag(x_51) == 0)
{
obj* x_62; obj* x_63; 
lean::dec(x_51);
x_62 = lean::box(3);
x_63 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_63, 0, x_5);
lean::cnstr_set(x_63, 1, x_29);
lean::cnstr_set(x_63, 2, x_39);
lean::cnstr_set(x_63, 3, x_52);
lean::cnstr_set(x_63, 4, x_60);
lean::cnstr_set(x_63, 5, x_62);
return x_63;
}
else
{
obj* x_64; obj* x_67; 
x_64 = lean::cnstr_get(x_51, 0);
lean::inc(x_64);
lean::dec(x_51);
x_67 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_67, 0, x_5);
lean::cnstr_set(x_67, 1, x_29);
lean::cnstr_set(x_67, 2, x_39);
lean::cnstr_set(x_67, 3, x_52);
lean::cnstr_set(x_67, 4, x_60);
lean::cnstr_set(x_67, 5, x_64);
return x_67;
}
}
else
{
obj* x_68; obj* x_70; 
x_68 = lean::cnstr_get(x_51, 0);
lean::inc(x_68);
x_70 = lean::cnstr_get(x_51, 1);
lean::inc(x_70);
lean::dec(x_51);
switch (lean::obj_tag(x_68)) {
case 0:
{
obj* x_73; obj* x_76; 
x_73 = lean::cnstr_get(x_68, 0);
lean::inc(x_73);
lean::dec(x_68);
x_76 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_76, 0, x_73);
if (lean::obj_tag(x_70) == 0)
{
obj* x_78; obj* x_79; 
lean::dec(x_70);
x_78 = lean::box(3);
x_79 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_79, 0, x_5);
lean::cnstr_set(x_79, 1, x_29);
lean::cnstr_set(x_79, 2, x_39);
lean::cnstr_set(x_79, 3, x_52);
lean::cnstr_set(x_79, 4, x_76);
lean::cnstr_set(x_79, 5, x_78);
return x_79;
}
else
{
obj* x_80; obj* x_83; 
x_80 = lean::cnstr_get(x_70, 0);
lean::inc(x_80);
lean::dec(x_70);
x_83 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_83, 0, x_5);
lean::cnstr_set(x_83, 1, x_29);
lean::cnstr_set(x_83, 2, x_39);
lean::cnstr_set(x_83, 3, x_52);
lean::cnstr_set(x_83, 4, x_76);
lean::cnstr_set(x_83, 5, x_80);
return x_83;
}
}
case 1:
{
obj* x_85; 
lean::dec(x_68);
x_85 = lean::box(0);
if (lean::obj_tag(x_70) == 0)
{
obj* x_87; obj* x_88; 
lean::dec(x_70);
x_87 = lean::box(3);
x_88 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_88, 0, x_5);
lean::cnstr_set(x_88, 1, x_29);
lean::cnstr_set(x_88, 2, x_39);
lean::cnstr_set(x_88, 3, x_52);
lean::cnstr_set(x_88, 4, x_85);
lean::cnstr_set(x_88, 5, x_87);
return x_88;
}
else
{
obj* x_89; obj* x_92; 
x_89 = lean::cnstr_get(x_70, 0);
lean::inc(x_89);
lean::dec(x_70);
x_92 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_92, 0, x_5);
lean::cnstr_set(x_92, 1, x_29);
lean::cnstr_set(x_92, 2, x_39);
lean::cnstr_set(x_92, 3, x_52);
lean::cnstr_set(x_92, 4, x_85);
lean::cnstr_set(x_92, 5, x_89);
return x_92;
}
}
case 2:
{
obj* x_94; 
lean::dec(x_68);
x_94 = lean::box(0);
if (lean::obj_tag(x_70) == 0)
{
obj* x_96; obj* x_97; 
lean::dec(x_70);
x_96 = lean::box(3);
x_97 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_97, 0, x_5);
lean::cnstr_set(x_97, 1, x_29);
lean::cnstr_set(x_97, 2, x_39);
lean::cnstr_set(x_97, 3, x_52);
lean::cnstr_set(x_97, 4, x_94);
lean::cnstr_set(x_97, 5, x_96);
return x_97;
}
else
{
obj* x_98; obj* x_101; 
x_98 = lean::cnstr_get(x_70, 0);
lean::inc(x_98);
lean::dec(x_70);
x_101 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_101, 0, x_5);
lean::cnstr_set(x_101, 1, x_29);
lean::cnstr_set(x_101, 2, x_39);
lean::cnstr_set(x_101, 3, x_52);
lean::cnstr_set(x_101, 4, x_94);
lean::cnstr_set(x_101, 5, x_98);
return x_101;
}
}
default:
{
obj* x_103; 
lean::dec(x_68);
x_103 = lean::box(0);
if (lean::obj_tag(x_70) == 0)
{
obj* x_105; obj* x_106; 
lean::dec(x_70);
x_105 = lean::box(3);
x_106 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_106, 0, x_5);
lean::cnstr_set(x_106, 1, x_29);
lean::cnstr_set(x_106, 2, x_39);
lean::cnstr_set(x_106, 3, x_52);
lean::cnstr_set(x_106, 4, x_103);
lean::cnstr_set(x_106, 5, x_105);
return x_106;
}
else
{
obj* x_107; obj* x_110; 
x_107 = lean::cnstr_get(x_70, 0);
lean::inc(x_107);
lean::dec(x_70);
x_110 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_110, 0, x_5);
lean::cnstr_set(x_110, 1, x_29);
lean::cnstr_set(x_110, 2, x_39);
lean::cnstr_set(x_110, 3, x_52);
lean::cnstr_set(x_110, 4, x_103);
lean::cnstr_set(x_110, 5, x_107);
return x_110;
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_let_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_14; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_25; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_40; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
lean::dec(x_0);
x_14 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_14);
x_16 = l_option_map___rarg(x_14, x_1);
x_17 = lean::box(3);
lean::inc(x_17);
x_19 = l_option_get__or__else___main___rarg(x_16, x_17);
x_20 = l_lean_parser_term_let__lhs_has__view;
x_21 = lean::cnstr_get(x_20, 1);
lean::inc(x_21);
x_23 = lean::apply_1(x_21, x_3);
lean::inc(x_14);
x_25 = l_option_map___rarg(x_14, x_5);
lean::inc(x_17);
x_27 = l_option_get__or__else___main___rarg(x_25, x_17);
lean::inc(x_14);
x_29 = l_option_map___rarg(x_14, x_9);
x_30 = l_option_get__or__else___main___rarg(x_29, x_17);
x_31 = lean::box(0);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_11);
lean::cnstr_set(x_32, 1, x_31);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_30);
lean::cnstr_set(x_33, 1, x_32);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_7);
lean::cnstr_set(x_34, 1, x_33);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_27);
lean::cnstr_set(x_35, 1, x_34);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_23);
lean::cnstr_set(x_36, 1, x_35);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_19);
lean::cnstr_set(x_37, 1, x_36);
x_38 = l_lean_parser_term_let;
lean::inc(x_38);
x_40 = l_lean_parser_syntax_mk__node(x_38, x_37);
return x_40;
}
}
obj* _init_l_lean_parser_term_let_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_let_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_let_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_let;
x_6 = l_lean_parser_term_let_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_let_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_23; obj* x_25; obj* x_27; obj* x_28; obj* x_29; obj* x_31; obj* x_32; obj* x_33; obj* x_35; obj* x_37; obj* x_38; obj* x_39; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; 
x_0 = lean::mk_string("let ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser___spec__1), 6, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::box(0);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
lean::inc(x_9);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_9);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_8);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_13);
x_16 = l_lean_parser_term_let__lhs__id;
lean::inc(x_16);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_18, 0, x_16);
lean::closure_set(x_18, 1, x_15);
lean::inc(x_4);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_20, 0, x_4);
lean::inc(x_9);
lean::inc(x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_20);
lean::cnstr_set(x_23, 1, x_9);
lean::inc(x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_18);
lean::cnstr_set(x_25, 1, x_23);
lean::inc(x_4);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_27, 0, x_25);
lean::closure_set(x_27, 1, x_4);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_9);
x_29 = l_lean_parser_term_let__lhs;
lean::inc(x_29);
x_31 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_31, 0, x_29);
lean::closure_set(x_31, 1, x_28);
x_32 = lean::mk_string(" := ");
x_33 = l_string_trim(x_32);
lean::inc(x_33);
x_35 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_35, 0, x_33);
lean::inc(x_4);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_37, 0, x_33);
lean::closure_set(x_37, 1, x_4);
lean::closure_set(x_37, 2, x_35);
x_38 = lean::mk_string(" in ");
x_39 = l_string_trim(x_38);
lean::inc(x_39);
x_41 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_41, 0, x_39);
x_42 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_42, 0, x_39);
lean::closure_set(x_42, 1, x_4);
lean::closure_set(x_42, 2, x_41);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_23);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_20);
lean::cnstr_set(x_44, 1, x_43);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_37);
lean::cnstr_set(x_45, 1, x_44);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_31);
lean::cnstr_set(x_46, 1, x_45);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_6);
lean::cnstr_set(x_47, 1, x_46);
return x_47;
}
}
obj* _init_l_lean_parser_term_let_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_23; obj* x_25; obj* x_27; obj* x_28; obj* x_29; obj* x_31; obj* x_32; obj* x_33; obj* x_35; obj* x_37; obj* x_38; obj* x_39; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_60; 
x_0 = lean::mk_string("let ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser___spec__1), 6, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::box(0);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
lean::inc(x_9);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_9);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_8);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_13);
x_16 = l_lean_parser_term_let__lhs__id;
lean::inc(x_16);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_18, 0, x_16);
lean::closure_set(x_18, 1, x_15);
lean::inc(x_4);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_20, 0, x_4);
lean::inc(x_9);
lean::inc(x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_20);
lean::cnstr_set(x_23, 1, x_9);
lean::inc(x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_18);
lean::cnstr_set(x_25, 1, x_23);
lean::inc(x_4);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_27, 0, x_25);
lean::closure_set(x_27, 1, x_4);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_9);
x_29 = l_lean_parser_term_let__lhs;
lean::inc(x_29);
x_31 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_31, 0, x_29);
lean::closure_set(x_31, 1, x_28);
x_32 = lean::mk_string(" := ");
x_33 = l_string_trim(x_32);
lean::inc(x_33);
x_35 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_35, 0, x_33);
lean::inc(x_4);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_37, 0, x_33);
lean::closure_set(x_37, 1, x_4);
lean::closure_set(x_37, 2, x_35);
x_38 = lean::mk_string(" in ");
x_39 = l_string_trim(x_38);
lean::inc(x_39);
x_41 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_41, 0, x_39);
x_42 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_42, 0, x_39);
lean::closure_set(x_42, 1, x_4);
lean::closure_set(x_42, 2, x_41);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_23);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_20);
lean::cnstr_set(x_44, 1, x_43);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_37);
lean::cnstr_set(x_45, 1, x_44);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_31);
lean::cnstr_set(x_46, 1, x_45);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_6);
lean::cnstr_set(x_47, 1, x_46);
x_48 = l_lean_parser_term__parser__m_monad;
x_49 = l_lean_parser_term__parser__m_monad__except;
x_50 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_51 = l_lean_parser_term__parser__m_alternative;
x_52 = l_lean_parser_term_let;
x_53 = l_lean_parser_term_let_has__view;
lean::inc(x_53);
lean::inc(x_52);
lean::inc(x_51);
lean::inc(x_50);
lean::inc(x_49);
lean::inc(x_48);
x_60 = l_lean_parser_combinators_node_view___rarg(x_48, x_49, x_50, x_51, x_52, x_47, x_53);
return x_60;
}
}
obj* _init_l_lean_parser_term_let_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_19; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; 
x_0 = lean::mk_string("let ");
x_1 = lean::mk_nat_obj(0u);
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::box(0);
x_5 = l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens;
lean::inc(x_5);
x_7 = l_lean_parser_tokens___rarg(x_5);
x_8 = l_lean_parser_term_opt__type_parser_lean_parser_has__tokens;
lean::inc(x_4);
lean::inc(x_8);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_8, x_4);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_7, x_11);
lean::inc(x_4);
x_14 = l_lean_parser_list_cons_tokens___rarg(x_4, x_12);
x_15 = l_lean_parser_tokens___rarg(x_14);
x_16 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_4);
lean::inc(x_16);
x_19 = l_lean_parser_list_cons_tokens___rarg(x_16, x_4);
lean::inc(x_19);
x_21 = l_lean_parser_list_cons_tokens___rarg(x_15, x_19);
x_22 = l_lean_parser_tokens___rarg(x_21);
x_23 = l_lean_parser_list_cons_tokens___rarg(x_22, x_4);
x_24 = l_lean_parser_tokens___rarg(x_23);
x_25 = lean::mk_string(" := ");
lean::inc(x_1);
x_27 = l_lean_parser_symbol_tokens___rarg(x_25, x_1);
x_28 = lean::mk_string(" in ");
x_29 = l_lean_parser_symbol_tokens___rarg(x_28, x_1);
x_30 = l_lean_parser_list_cons_tokens___rarg(x_29, x_19);
lean::inc(x_16);
x_32 = l_lean_parser_list_cons_tokens___rarg(x_16, x_30);
x_33 = l_lean_parser_list_cons_tokens___rarg(x_27, x_32);
x_34 = l_lean_parser_list_cons_tokens___rarg(x_24, x_33);
x_35 = l_lean_parser_list_cons_tokens___rarg(x_3, x_34);
x_36 = l_lean_parser_tokens___rarg(x_35);
return x_36;
}
}
obj* _init_l_lean_parser_term_opt__ident() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("opt_ident");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_opt__ident_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_opt__ident_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__2;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_23; 
lean::dec(x_2);
x_23 = lean::box(0);
x_20 = x_23;
goto lbl_21;
}
case 1:
{
obj* x_24; 
x_24 = lean::cnstr_get(x_2, 0);
lean::inc(x_24);
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_28; obj* x_29; 
lean::dec(x_1);
x_28 = lean::box(0);
x_29 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_29, 0, x_24);
lean::cnstr_set(x_29, 1, x_28);
return x_29;
}
else
{
obj* x_30; 
x_30 = lean::cnstr_get(x_1, 0);
lean::inc(x_30);
lean::dec(x_1);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_30, 0);
lean::inc(x_33);
lean::dec(x_30);
x_36 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_36, 0, x_33);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_24);
lean::cnstr_set(x_37, 1, x_36);
return x_37;
}
case 1:
{
obj* x_39; obj* x_40; 
lean::dec(x_30);
x_39 = lean::box(0);
x_40 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_40, 0, x_24);
lean::cnstr_set(x_40, 1, x_39);
return x_40;
}
case 2:
{
obj* x_42; obj* x_43; 
lean::dec(x_30);
x_42 = lean::box(0);
x_43 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_43, 0, x_24);
lean::cnstr_set(x_43, 1, x_42);
return x_43;
}
default:
{
obj* x_45; obj* x_46; 
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_24);
lean::cnstr_set(x_46, 1, x_45);
return x_46;
}
}
}
}
case 2:
{
obj* x_48; 
lean::dec(x_2);
x_48 = lean::box(0);
x_20 = x_48;
goto lbl_21;
}
default:
{
obj* x_50; 
lean::dec(x_2);
x_50 = lean::box(0);
x_20 = x_50;
goto lbl_21;
}
}
lbl_21:
{
lean::dec(x_20);
if (lean::obj_tag(x_1) == 0)
{
obj* x_53; 
lean::dec(x_1);
x_53 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
lean::inc(x_53);
return x_53;
}
else
{
obj* x_55; 
x_55 = lean::cnstr_get(x_1, 0);
lean::inc(x_55);
lean::dec(x_1);
switch (lean::obj_tag(x_55)) {
case 0:
{
obj* x_58; obj* x_61; obj* x_62; obj* x_64; 
x_58 = lean::cnstr_get(x_55, 0);
lean::inc(x_58);
lean::dec(x_55);
x_61 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_61, 0, x_58);
x_62 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_62);
x_64 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_64, 0, x_62);
lean::cnstr_set(x_64, 1, x_61);
return x_64;
}
case 1:
{
obj* x_66; 
lean::dec(x_55);
x_66 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
lean::inc(x_66);
return x_66;
}
case 2:
{
obj* x_69; 
lean::dec(x_55);
x_69 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
lean::inc(x_69);
return x_69;
}
default:
{
obj* x_72; 
lean::dec(x_55);
x_72 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
lean::inc(x_72);
return x_72;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_5; obj* x_9; obj* x_10; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
lean::inc(x_0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_1);
lean::inc(x_0);
lean::inc(x_0);
lean::inc(x_0);
x_9 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_9, 0, x_0);
lean::cnstr_set(x_9, 1, x_3);
lean::cnstr_set(x_9, 2, x_5);
lean::cnstr_set(x_9, 3, x_0);
lean::cnstr_set(x_9, 4, x_0);
x_10 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_0);
return x_10;
}
}
obj* _init_l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_8; 
lean::dec(x_1);
x_8 = lean::box(0);
x_5 = x_8;
goto lbl_6;
}
case 1:
{
obj* x_9; 
x_9 = lean::cnstr_get(x_1, 0);
lean::inc(x_9);
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_13; obj* x_14; 
lean::dec(x_0);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_14, 0, x_9);
lean::cnstr_set(x_14, 1, x_13);
return x_14;
}
else
{
obj* x_15; 
x_15 = lean::cnstr_get(x_0, 0);
lean::inc(x_15);
lean::dec(x_0);
switch (lean::obj_tag(x_15)) {
case 0:
{
obj* x_18; obj* x_21; obj* x_22; 
x_18 = lean::cnstr_get(x_15, 0);
lean::inc(x_18);
lean::dec(x_15);
x_21 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_21, 0, x_18);
x_22 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_22, 0, x_9);
lean::cnstr_set(x_22, 1, x_21);
return x_22;
}
case 1:
{
obj* x_24; obj* x_25; 
lean::dec(x_15);
x_24 = lean::box(0);
x_25 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_25, 0, x_9);
lean::cnstr_set(x_25, 1, x_24);
return x_25;
}
case 2:
{
obj* x_27; obj* x_28; 
lean::dec(x_15);
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_28, 0, x_9);
lean::cnstr_set(x_28, 1, x_27);
return x_28;
}
default:
{
obj* x_30; obj* x_31; 
lean::dec(x_15);
x_30 = lean::box(0);
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_9);
lean::cnstr_set(x_31, 1, x_30);
return x_31;
}
}
}
}
case 2:
{
obj* x_33; 
lean::dec(x_1);
x_33 = lean::box(0);
x_5 = x_33;
goto lbl_6;
}
default:
{
obj* x_35; 
lean::dec(x_1);
x_35 = lean::box(0);
x_5 = x_35;
goto lbl_6;
}
}
lbl_6:
{
lean::dec(x_5);
if (lean::obj_tag(x_0) == 0)
{
obj* x_38; 
lean::dec(x_0);
x_38 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
lean::inc(x_38);
return x_38;
}
else
{
obj* x_40; 
x_40 = lean::cnstr_get(x_0, 0);
lean::inc(x_40);
lean::dec(x_0);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_43; obj* x_46; obj* x_47; obj* x_49; 
x_43 = lean::cnstr_get(x_40, 0);
lean::inc(x_43);
lean::dec(x_40);
x_46 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_46, 0, x_43);
x_47 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_47);
x_49 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_49, 0, x_47);
lean::cnstr_set(x_49, 1, x_46);
return x_49;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
x_51 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
case 2:
{
obj* x_54; 
lean::dec(x_40);
x_54 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
lean::inc(x_54);
return x_54;
}
default:
{
obj* x_57; 
lean::dec(x_40);
x_57 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
lean::inc(x_57);
return x_57;
}
}
}
}
}
}
}
obj* l_lean_parser_term_opt__ident_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_1);
x_7 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_7);
x_9 = l_option_map___rarg(x_7, x_3);
x_10 = lean::box(3);
x_11 = l_option_get__or__else___main___rarg(x_9, x_10);
x_12 = lean::box(0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_6);
lean::cnstr_set(x_14, 1, x_13);
x_15 = l_lean_parser_term_opt__ident;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
}
obj* _init_l_lean_parser_term_opt__ident_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_opt__ident_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_opt__ident_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_7; 
x_5 = l_lean_parser_term_opt__ident_parser___closed__1;
lean::inc(x_5);
x_7 = l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7(x_5, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_opt__ident_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_0 = lean::mk_string(" : ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_parser___lambda__1), 6, 1);
lean::closure_set(x_10, 0, x_9);
return x_10;
}
}
obj* l_lean_parser_term_opt__ident_parser___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_8; obj* x_9; obj* x_11; obj* x_13; obj* x_14; obj* x_15; 
x_6 = l_lean_parser_term_opt__ident;
lean::inc(x_6);
x_8 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_6, x_0, x_1, x_2, x_3, x_4, x_5);
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_13 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_release(x_8, 1);
 x_13 = x_8;
}
x_14 = l_lean_parser_parsec__t_try__mk__res___rarg(x_9);
if (lean::is_scalar(x_13)) {
 x_15 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_15 = x_13;
}
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_11);
return x_15;
}
}
obj* _init_l_lean_parser_term_opt__ident_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_27; obj* x_30; obj* x_35; 
x_0 = lean::mk_string(" : ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_lean_parser_term_opt__ident;
lean::inc(x_9);
lean::inc(x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_13, 0, x_10);
lean::closure_set(x_13, 1, x_9);
lean::inc(x_9);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_parser___lambda__1), 6, 1);
lean::closure_set(x_15, 0, x_9);
x_16 = l_lean_parser_term__parser__m_monad;
x_17 = l_lean_parser_term__parser__m_monad__except;
x_18 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_19 = l_lean_parser_term__parser__m_alternative;
x_20 = l_lean_parser_term_opt__ident_has__view;
lean::inc(x_20);
lean::inc(x_10);
lean::inc(x_19);
lean::inc(x_18);
lean::inc(x_17);
lean::inc(x_16);
x_27 = l_lean_parser_combinators_node_view___rarg(x_16, x_17, x_18, x_19, x_10, x_9, x_20);
lean::inc(x_19);
lean::inc(x_18);
x_30 = l_lean_parser_combinators_try_view___rarg(x_18, x_19, x_13, x_27);
lean::inc(x_19);
lean::inc(x_18);
lean::inc(x_17);
lean::inc(x_16);
x_35 = l_lean_parser_combinators_optional_view___rarg(x_16, x_17, x_18, x_19, x_15, x_30);
return x_35;
}
}
obj* _init_l_lean_parser_term_opt__ident_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::box(0);
x_1 = lean::mk_string(" : ");
x_2 = lean::mk_nat_obj(0u);
x_3 = l_lean_parser_symbol_tokens___rarg(x_1, x_2);
lean::inc(x_0);
x_5 = l_lean_parser_list_cons_tokens___rarg(x_3, x_0);
x_6 = l_lean_parser_list_cons_tokens___rarg(x_0, x_5);
x_7 = l_lean_parser_tokens___rarg(x_6);
x_8 = l_lean_parser_tokens___rarg(x_7);
x_9 = l_lean_parser_tokens___rarg(x_8);
return x_9;
}
}
obj* _init_l_lean_parser_term_have__term() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("have_term");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_have__term_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have__term_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have__term_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_have__term_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
if (lean::is_shared(x_1)) {
 lean::dec(x_1);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_1, 0);
 x_7 = x_1;
}
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
lean::dec(x_7);
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; 
lean::dec(x_8);
x_13 = l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1;
lean::inc(x_13);
return x_13;
}
else
{
obj* x_15; obj* x_18; obj* x_19; 
x_15 = lean::cnstr_get(x_8, 0);
lean::inc(x_15);
lean::dec(x_8);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_15);
return x_19;
}
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_8, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_8, 1);
lean::inc(x_22);
lean::dec(x_8);
switch (lean::obj_tag(x_20)) {
case 0:
{
obj* x_25; obj* x_28; 
x_25 = lean::cnstr_get(x_20, 0);
lean::inc(x_25);
lean::dec(x_20);
if (lean::is_scalar(x_7)) {
 x_28 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_28 = x_7;
}
lean::cnstr_set(x_28, 0, x_25);
if (lean::obj_tag(x_22) == 0)
{
obj* x_30; obj* x_31; 
lean::dec(x_22);
x_30 = lean::box(3);
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_30);
return x_31;
}
else
{
obj* x_32; obj* x_35; 
x_32 = lean::cnstr_get(x_22, 0);
lean::inc(x_32);
lean::dec(x_22);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_28);
lean::cnstr_set(x_35, 1, x_32);
return x_35;
}
}
case 1:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_39; 
lean::dec(x_22);
x_39 = l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1;
lean::inc(x_39);
return x_39;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_22, 0);
lean::inc(x_41);
lean::dec(x_22);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
case 2:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_49; 
lean::dec(x_22);
x_49 = l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1;
lean::inc(x_49);
return x_49;
}
else
{
obj* x_51; obj* x_54; obj* x_55; 
x_51 = lean::cnstr_get(x_22, 0);
lean::inc(x_51);
lean::dec(x_22);
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_51);
return x_55;
}
}
default:
{
lean::dec(x_7);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_59; 
lean::dec(x_22);
x_59 = l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1;
lean::inc(x_59);
return x_59;
}
else
{
obj* x_61; obj* x_64; obj* x_65; 
x_61 = lean::cnstr_get(x_22, 0);
lean::inc(x_61);
lean::dec(x_22);
x_64 = lean::box(0);
x_65 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_61);
return x_65;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_have__term_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_6);
x_8 = l_option_map___rarg(x_6, x_1);
x_9 = lean::box(3);
x_10 = l_option_get__or__else___main___rarg(x_8, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_3);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_10);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_lean_parser_term_have__term;
lean::inc(x_14);
x_16 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_16;
}
}
obj* _init_l_lean_parser_term_have__term_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_have__term_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_have__from() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("have_from");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_have__from_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have__from_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have__from_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_have__from_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__3;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
if (lean::obj_tag(x_1) == 0)
{
obj* x_25; obj* x_27; 
lean::dec(x_1);
x_25 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
x_27 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_27, 0, x_23);
lean::cnstr_set(x_27, 1, x_25);
return x_27;
}
else
{
obj* x_28; obj* x_31; obj* x_32; obj* x_34; obj* x_35; 
x_28 = lean::cnstr_get(x_1, 0);
lean::inc(x_28);
lean::dec(x_1);
x_31 = l_lean_parser_term_from_has__view;
x_32 = lean::cnstr_get(x_31, 0);
lean::inc(x_32);
x_34 = lean::apply_1(x_32, x_28);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_23);
lean::cnstr_set(x_35, 1, x_34);
return x_35;
}
}
case 1:
{
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_38; 
lean::dec(x_1);
x_38 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2;
lean::inc(x_38);
return x_38;
}
else
{
obj* x_40; obj* x_43; obj* x_44; obj* x_45; obj* x_47; obj* x_48; 
x_40 = lean::cnstr_get(x_1, 0);
lean::inc(x_40);
lean::dec(x_1);
x_43 = lean::box(0);
x_44 = l_lean_parser_term_from_has__view;
x_45 = lean::cnstr_get(x_44, 0);
lean::inc(x_45);
x_47 = lean::apply_1(x_45, x_40);
x_48 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_48, 0, x_43);
lean::cnstr_set(x_48, 1, x_47);
return x_48;
}
}
case 2:
{
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_51; 
lean::dec(x_1);
x_51 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2;
lean::inc(x_51);
return x_51;
}
else
{
obj* x_53; obj* x_56; obj* x_57; obj* x_58; obj* x_60; obj* x_61; 
x_53 = lean::cnstr_get(x_1, 0);
lean::inc(x_53);
lean::dec(x_1);
x_56 = lean::box(0);
x_57 = l_lean_parser_term_from_has__view;
x_58 = lean::cnstr_get(x_57, 0);
lean::inc(x_58);
x_60 = lean::apply_1(x_58, x_53);
x_61 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_61, 0, x_56);
lean::cnstr_set(x_61, 1, x_60);
return x_61;
}
}
default:
{
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_64; 
lean::dec(x_1);
x_64 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2;
lean::inc(x_64);
return x_64;
}
else
{
obj* x_66; obj* x_69; obj* x_70; obj* x_71; obj* x_73; obj* x_74; 
x_66 = lean::cnstr_get(x_1, 0);
lean::inc(x_66);
lean::dec(x_1);
x_69 = lean::box(0);
x_70 = l_lean_parser_term_from_has__view;
x_71 = lean::cnstr_get(x_70, 0);
lean::inc(x_71);
x_73 = lean::apply_1(x_71, x_66);
x_74 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_74, 0, x_69);
lean::cnstr_set(x_74, 1, x_73);
return x_74;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_0 = l_lean_parser_term_from_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
return x_4;
}
}
obj* _init_l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::box(0);
x_1 = l_lean_parser_term_from_has__view;
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_2, x_4);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_0);
lean::cnstr_set(x_6, 1, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_5; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
lean::dec(x_1);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_5);
if (lean::obj_tag(x_0) == 0)
{
obj* x_10; obj* x_12; 
lean::dec(x_0);
x_10 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_10);
x_12 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_12, 0, x_8);
lean::cnstr_set(x_12, 1, x_10);
return x_12;
}
else
{
obj* x_13; obj* x_16; obj* x_17; obj* x_19; obj* x_20; 
x_13 = lean::cnstr_get(x_0, 0);
lean::inc(x_13);
lean::dec(x_0);
x_16 = l_lean_parser_term_from_has__view;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::apply_1(x_17, x_13);
x_20 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_20, 0, x_8);
lean::cnstr_set(x_20, 1, x_19);
return x_20;
}
}
case 1:
{
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_23; 
lean::dec(x_0);
x_23 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2;
lean::inc(x_23);
return x_23;
}
else
{
obj* x_25; obj* x_28; obj* x_29; obj* x_30; obj* x_32; obj* x_33; 
x_25 = lean::cnstr_get(x_0, 0);
lean::inc(x_25);
lean::dec(x_0);
x_28 = lean::box(0);
x_29 = l_lean_parser_term_from_has__view;
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
x_32 = lean::apply_1(x_30, x_25);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_28);
lean::cnstr_set(x_33, 1, x_32);
return x_33;
}
}
case 2:
{
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_36; 
lean::dec(x_0);
x_36 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2;
lean::inc(x_36);
return x_36;
}
else
{
obj* x_38; obj* x_41; obj* x_42; obj* x_43; obj* x_45; obj* x_46; 
x_38 = lean::cnstr_get(x_0, 0);
lean::inc(x_38);
lean::dec(x_0);
x_41 = lean::box(0);
x_42 = l_lean_parser_term_from_has__view;
x_43 = lean::cnstr_get(x_42, 0);
lean::inc(x_43);
x_45 = lean::apply_1(x_43, x_38);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_41);
lean::cnstr_set(x_46, 1, x_45);
return x_46;
}
}
default:
{
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_49; 
lean::dec(x_0);
x_49 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2;
lean::inc(x_49);
return x_49;
}
else
{
obj* x_51; obj* x_54; obj* x_55; obj* x_56; obj* x_58; obj* x_59; 
x_51 = lean::cnstr_get(x_0, 0);
lean::inc(x_51);
lean::dec(x_0);
x_54 = lean::box(0);
x_55 = l_lean_parser_term_from_has__view;
x_56 = lean::cnstr_get(x_55, 0);
lean::inc(x_56);
x_58 = lean::apply_1(x_56, x_51);
x_59 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_59, 0, x_54);
lean::cnstr_set(x_59, 1, x_58);
return x_59;
}
}
}
}
}
}
obj* l_lean_parser_term_have__from_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_20; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_6);
x_8 = l_option_map___rarg(x_6, x_1);
x_9 = lean::box(3);
x_10 = l_option_get__or__else___main___rarg(x_8, x_9);
x_11 = l_lean_parser_term_from_has__view;
x_12 = lean::cnstr_get(x_11, 1);
lean::inc(x_12);
x_14 = lean::apply_1(x_12, x_3);
x_15 = lean::box(0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_14);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_10);
lean::cnstr_set(x_17, 1, x_16);
x_18 = l_lean_parser_term_have__from;
lean::inc(x_18);
x_20 = l_lean_parser_syntax_mk__node(x_18, x_17);
return x_20;
}
}
obj* _init_l_lean_parser_term_have__from_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_have__from_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_have__proof() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("have_proof");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_have__proof_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have__proof_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have__proof_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_have__proof_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__2;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; obj* x_91; obj* x_93; obj* x_94; 
lean::dec(x_86);
x_90 = l_lean_parser_term_have__from_has__view;
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
x_93 = lean::apply_1(x_91, x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
else
{
obj* x_96; obj* x_97; obj* x_99; obj* x_100; 
lean::dec(x_86);
x_96 = l_lean_parser_term_have__term_has__view;
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
x_99 = lean::apply_1(x_97, x_1);
x_100 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_100, 0, x_99);
return x_100;
}
}
}
}
obj* _init_l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; obj* x_11; obj* x_13; obj* x_14; 
lean::dec(x_6);
x_10 = l_lean_parser_term_have__from_has__view;
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_0);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
else
{
obj* x_16; obj* x_17; obj* x_19; obj* x_20; 
lean::dec(x_6);
x_16 = l_lean_parser_term_have__term_has__view;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::apply_1(x_17, x_0);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
}
}
obj* _init_l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("have_proof");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_have__proof_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_have__term_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
x_8 = lean::apply_1(x_6, x_2);
lean::inc(x_1);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_lean_parser_term_have__proof;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_33; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
x_21 = l_lean_parser_term_have__from_has__view;
x_22 = lean::cnstr_get(x_21, 1);
lean::inc(x_22);
x_24 = lean::apply_1(x_22, x_18);
lean::inc(x_1);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_27);
x_29 = l_lean_parser_syntax_mk__node(x_27, x_26);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_1);
x_31 = l_lean_parser_term_have__proof;
lean::inc(x_31);
x_33 = l_lean_parser_syntax_mk__node(x_31, x_30);
return x_33;
}
}
}
obj* _init_l_lean_parser_term_have__proof_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_have__proof_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_have() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("have");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_have_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_have_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__2;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
x_35 = lean::box(3);
x_32 = x_1;
x_33 = x_35;
goto lbl_34;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_1, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
lean::dec(x_1);
x_32 = x_38;
x_33 = x_36;
goto lbl_34;
}
lbl_34:
{
obj* x_41; obj* x_43; 
x_43 = l_lean_parser_syntax_as__node___main(x_33);
if (lean::obj_tag(x_43) == 0)
{
obj* x_45; 
lean::dec(x_43);
x_45 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
lean::inc(x_45);
x_41 = x_45;
goto lbl_42;
}
else
{
obj* x_47; obj* x_49; obj* x_50; 
x_47 = lean::cnstr_get(x_43, 0);
lean::inc(x_47);
if (lean::is_shared(x_43)) {
 lean::dec(x_43);
 x_49 = lean::box(0);
} else {
 lean::cnstr_release(x_43, 0);
 x_49 = x_43;
}
x_50 = lean::cnstr_get(x_47, 1);
lean::inc(x_50);
lean::dec(x_47);
if (lean::obj_tag(x_50) == 0)
{
obj* x_55; 
lean::dec(x_49);
lean::dec(x_50);
x_55 = lean::box(0);
x_41 = x_55;
goto lbl_42;
}
else
{
obj* x_56; obj* x_58; 
x_56 = lean::cnstr_get(x_50, 0);
lean::inc(x_56);
x_58 = lean::cnstr_get(x_50, 1);
lean::inc(x_58);
lean::dec(x_50);
if (lean::obj_tag(x_58) == 0)
{
obj* x_62; obj* x_63; obj* x_65; obj* x_66; 
lean::dec(x_58);
x_62 = l_lean_parser_term_opt__ident_has__view;
x_63 = lean::cnstr_get(x_62, 0);
lean::inc(x_63);
x_65 = lean::apply_1(x_63, x_56);
if (lean::is_scalar(x_49)) {
 x_66 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_66 = x_49;
}
lean::cnstr_set(x_66, 0, x_65);
x_41 = x_66;
goto lbl_42;
}
else
{
obj* x_70; 
lean::dec(x_56);
lean::dec(x_58);
lean::dec(x_49);
x_70 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
lean::inc(x_70);
x_41 = x_70;
goto lbl_42;
}
}
}
lbl_42:
{
obj* x_72; obj* x_73; 
if (lean::obj_tag(x_32) == 0)
{
obj* x_75; 
x_75 = lean::box(3);
x_72 = x_32;
x_73 = x_75;
goto lbl_74;
}
else
{
obj* x_76; obj* x_78; 
x_76 = lean::cnstr_get(x_32, 0);
lean::inc(x_76);
x_78 = lean::cnstr_get(x_32, 1);
lean::inc(x_78);
lean::dec(x_32);
x_72 = x_78;
x_73 = x_76;
goto lbl_74;
}
lbl_74:
{
obj* x_81; obj* x_82; 
if (lean::obj_tag(x_72) == 0)
{
obj* x_84; 
x_84 = lean::box(3);
x_81 = x_72;
x_82 = x_84;
goto lbl_83;
}
else
{
obj* x_85; obj* x_87; 
x_85 = lean::cnstr_get(x_72, 0);
lean::inc(x_85);
x_87 = lean::cnstr_get(x_72, 1);
lean::inc(x_87);
lean::dec(x_72);
x_81 = x_87;
x_82 = x_85;
goto lbl_83;
}
lbl_83:
{
obj* x_90; obj* x_91; obj* x_93; 
x_90 = l_lean_parser_term_have__proof_has__view;
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
x_93 = lean::apply_1(x_91, x_82);
if (lean::obj_tag(x_81) == 0)
{
obj* x_94; 
x_94 = lean::box(0);
if (lean::obj_tag(x_81) == 0)
{
obj* x_96; obj* x_97; 
lean::dec(x_81);
x_96 = lean::box(3);
x_97 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_97, 0, x_20);
lean::cnstr_set(x_97, 1, x_41);
lean::cnstr_set(x_97, 2, x_73);
lean::cnstr_set(x_97, 3, x_93);
lean::cnstr_set(x_97, 4, x_94);
lean::cnstr_set(x_97, 5, x_96);
return x_97;
}
else
{
obj* x_98; obj* x_101; 
x_98 = lean::cnstr_get(x_81, 0);
lean::inc(x_98);
lean::dec(x_81);
x_101 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_101, 0, x_20);
lean::cnstr_set(x_101, 1, x_41);
lean::cnstr_set(x_101, 2, x_73);
lean::cnstr_set(x_101, 3, x_93);
lean::cnstr_set(x_101, 4, x_94);
lean::cnstr_set(x_101, 5, x_98);
return x_101;
}
}
else
{
obj* x_102; obj* x_104; 
x_102 = lean::cnstr_get(x_81, 0);
lean::inc(x_102);
x_104 = lean::cnstr_get(x_81, 1);
lean::inc(x_104);
lean::dec(x_81);
switch (lean::obj_tag(x_102)) {
case 0:
{
obj* x_107; obj* x_110; 
x_107 = lean::cnstr_get(x_102, 0);
lean::inc(x_107);
lean::dec(x_102);
x_110 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_110, 0, x_107);
if (lean::obj_tag(x_104) == 0)
{
obj* x_112; obj* x_113; 
lean::dec(x_104);
x_112 = lean::box(3);
x_113 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_113, 0, x_20);
lean::cnstr_set(x_113, 1, x_41);
lean::cnstr_set(x_113, 2, x_73);
lean::cnstr_set(x_113, 3, x_93);
lean::cnstr_set(x_113, 4, x_110);
lean::cnstr_set(x_113, 5, x_112);
return x_113;
}
else
{
obj* x_114; obj* x_117; 
x_114 = lean::cnstr_get(x_104, 0);
lean::inc(x_114);
lean::dec(x_104);
x_117 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_117, 0, x_20);
lean::cnstr_set(x_117, 1, x_41);
lean::cnstr_set(x_117, 2, x_73);
lean::cnstr_set(x_117, 3, x_93);
lean::cnstr_set(x_117, 4, x_110);
lean::cnstr_set(x_117, 5, x_114);
return x_117;
}
}
case 1:
{
obj* x_119; 
lean::dec(x_102);
x_119 = lean::box(0);
if (lean::obj_tag(x_104) == 0)
{
obj* x_121; obj* x_122; 
lean::dec(x_104);
x_121 = lean::box(3);
x_122 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_122, 0, x_20);
lean::cnstr_set(x_122, 1, x_41);
lean::cnstr_set(x_122, 2, x_73);
lean::cnstr_set(x_122, 3, x_93);
lean::cnstr_set(x_122, 4, x_119);
lean::cnstr_set(x_122, 5, x_121);
return x_122;
}
else
{
obj* x_123; obj* x_126; 
x_123 = lean::cnstr_get(x_104, 0);
lean::inc(x_123);
lean::dec(x_104);
x_126 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_126, 0, x_20);
lean::cnstr_set(x_126, 1, x_41);
lean::cnstr_set(x_126, 2, x_73);
lean::cnstr_set(x_126, 3, x_93);
lean::cnstr_set(x_126, 4, x_119);
lean::cnstr_set(x_126, 5, x_123);
return x_126;
}
}
case 2:
{
obj* x_128; 
lean::dec(x_102);
x_128 = lean::box(0);
if (lean::obj_tag(x_104) == 0)
{
obj* x_130; obj* x_131; 
lean::dec(x_104);
x_130 = lean::box(3);
x_131 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_131, 0, x_20);
lean::cnstr_set(x_131, 1, x_41);
lean::cnstr_set(x_131, 2, x_73);
lean::cnstr_set(x_131, 3, x_93);
lean::cnstr_set(x_131, 4, x_128);
lean::cnstr_set(x_131, 5, x_130);
return x_131;
}
else
{
obj* x_132; obj* x_135; 
x_132 = lean::cnstr_get(x_104, 0);
lean::inc(x_132);
lean::dec(x_104);
x_135 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_135, 0, x_20);
lean::cnstr_set(x_135, 1, x_41);
lean::cnstr_set(x_135, 2, x_73);
lean::cnstr_set(x_135, 3, x_93);
lean::cnstr_set(x_135, 4, x_128);
lean::cnstr_set(x_135, 5, x_132);
return x_135;
}
}
default:
{
obj* x_137; 
lean::dec(x_102);
x_137 = lean::box(0);
if (lean::obj_tag(x_104) == 0)
{
obj* x_139; obj* x_140; 
lean::dec(x_104);
x_139 = lean::box(3);
x_140 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_140, 0, x_20);
lean::cnstr_set(x_140, 1, x_41);
lean::cnstr_set(x_140, 2, x_73);
lean::cnstr_set(x_140, 3, x_93);
lean::cnstr_set(x_140, 4, x_137);
lean::cnstr_set(x_140, 5, x_139);
return x_140;
}
else
{
obj* x_141; obj* x_144; 
x_141 = lean::cnstr_get(x_104, 0);
lean::inc(x_141);
lean::dec(x_104);
x_144 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_144, 0, x_20);
lean::cnstr_set(x_144, 1, x_41);
lean::cnstr_set(x_144, 2, x_73);
lean::cnstr_set(x_144, 3, x_93);
lean::cnstr_set(x_144, 4, x_137);
lean::cnstr_set(x_144, 5, x_141);
return x_144;
}
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_term_opt__ident_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_have_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_19:
{
obj* x_26; obj* x_28; 
x_28 = l_lean_parser_syntax_as__node___main(x_18);
if (lean::obj_tag(x_28) == 0)
{
obj* x_30; 
lean::dec(x_28);
x_30 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
lean::inc(x_30);
x_26 = x_30;
goto lbl_27;
}
else
{
obj* x_32; obj* x_34; obj* x_35; 
x_32 = lean::cnstr_get(x_28, 0);
lean::inc(x_32);
if (lean::is_shared(x_28)) {
 lean::dec(x_28);
 x_34 = lean::box(0);
} else {
 lean::cnstr_release(x_28, 0);
 x_34 = x_28;
}
x_35 = lean::cnstr_get(x_32, 1);
lean::inc(x_35);
lean::dec(x_32);
if (lean::obj_tag(x_35) == 0)
{
obj* x_40; 
lean::dec(x_34);
lean::dec(x_35);
x_40 = lean::box(0);
x_26 = x_40;
goto lbl_27;
}
else
{
obj* x_41; obj* x_43; 
x_41 = lean::cnstr_get(x_35, 0);
lean::inc(x_41);
x_43 = lean::cnstr_get(x_35, 1);
lean::inc(x_43);
lean::dec(x_35);
if (lean::obj_tag(x_43) == 0)
{
obj* x_47; obj* x_48; obj* x_50; obj* x_51; 
lean::dec(x_43);
x_47 = l_lean_parser_term_opt__ident_has__view;
x_48 = lean::cnstr_get(x_47, 0);
lean::inc(x_48);
x_50 = lean::apply_1(x_48, x_41);
if (lean::is_scalar(x_34)) {
 x_51 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_51 = x_34;
}
lean::cnstr_set(x_51, 0, x_50);
x_26 = x_51;
goto lbl_27;
}
else
{
obj* x_55; 
lean::dec(x_43);
lean::dec(x_41);
lean::dec(x_34);
x_55 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
lean::inc(x_55);
x_26 = x_55;
goto lbl_27;
}
}
}
lbl_27:
{
obj* x_57; obj* x_58; 
if (lean::obj_tag(x_17) == 0)
{
obj* x_60; 
x_60 = lean::box(3);
x_57 = x_17;
x_58 = x_60;
goto lbl_59;
}
else
{
obj* x_61; obj* x_63; 
x_61 = lean::cnstr_get(x_17, 0);
lean::inc(x_61);
x_63 = lean::cnstr_get(x_17, 1);
lean::inc(x_63);
lean::dec(x_17);
x_57 = x_63;
x_58 = x_61;
goto lbl_59;
}
lbl_59:
{
obj* x_66; obj* x_67; 
if (lean::obj_tag(x_57) == 0)
{
obj* x_69; 
x_69 = lean::box(3);
x_66 = x_57;
x_67 = x_69;
goto lbl_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_57, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_57, 1);
lean::inc(x_72);
lean::dec(x_57);
x_66 = x_72;
x_67 = x_70;
goto lbl_68;
}
lbl_68:
{
obj* x_75; obj* x_76; obj* x_78; 
x_75 = l_lean_parser_term_have__proof_has__view;
x_76 = lean::cnstr_get(x_75, 0);
lean::inc(x_76);
x_78 = lean::apply_1(x_76, x_67);
if (lean::obj_tag(x_66) == 0)
{
obj* x_79; 
x_79 = lean::box(0);
if (lean::obj_tag(x_66) == 0)
{
obj* x_81; obj* x_82; 
lean::dec(x_66);
x_81 = lean::box(3);
x_82 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_82, 0, x_5);
lean::cnstr_set(x_82, 1, x_26);
lean::cnstr_set(x_82, 2, x_58);
lean::cnstr_set(x_82, 3, x_78);
lean::cnstr_set(x_82, 4, x_79);
lean::cnstr_set(x_82, 5, x_81);
return x_82;
}
else
{
obj* x_83; obj* x_86; 
x_83 = lean::cnstr_get(x_66, 0);
lean::inc(x_83);
lean::dec(x_66);
x_86 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_86, 0, x_5);
lean::cnstr_set(x_86, 1, x_26);
lean::cnstr_set(x_86, 2, x_58);
lean::cnstr_set(x_86, 3, x_78);
lean::cnstr_set(x_86, 4, x_79);
lean::cnstr_set(x_86, 5, x_83);
return x_86;
}
}
else
{
obj* x_87; obj* x_89; 
x_87 = lean::cnstr_get(x_66, 0);
lean::inc(x_87);
x_89 = lean::cnstr_get(x_66, 1);
lean::inc(x_89);
lean::dec(x_66);
switch (lean::obj_tag(x_87)) {
case 0:
{
obj* x_92; obj* x_95; 
x_92 = lean::cnstr_get(x_87, 0);
lean::inc(x_92);
lean::dec(x_87);
x_95 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_95, 0, x_92);
if (lean::obj_tag(x_89) == 0)
{
obj* x_97; obj* x_98; 
lean::dec(x_89);
x_97 = lean::box(3);
x_98 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_98, 0, x_5);
lean::cnstr_set(x_98, 1, x_26);
lean::cnstr_set(x_98, 2, x_58);
lean::cnstr_set(x_98, 3, x_78);
lean::cnstr_set(x_98, 4, x_95);
lean::cnstr_set(x_98, 5, x_97);
return x_98;
}
else
{
obj* x_99; obj* x_102; 
x_99 = lean::cnstr_get(x_89, 0);
lean::inc(x_99);
lean::dec(x_89);
x_102 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_102, 0, x_5);
lean::cnstr_set(x_102, 1, x_26);
lean::cnstr_set(x_102, 2, x_58);
lean::cnstr_set(x_102, 3, x_78);
lean::cnstr_set(x_102, 4, x_95);
lean::cnstr_set(x_102, 5, x_99);
return x_102;
}
}
case 1:
{
obj* x_104; 
lean::dec(x_87);
x_104 = lean::box(0);
if (lean::obj_tag(x_89) == 0)
{
obj* x_106; obj* x_107; 
lean::dec(x_89);
x_106 = lean::box(3);
x_107 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_107, 0, x_5);
lean::cnstr_set(x_107, 1, x_26);
lean::cnstr_set(x_107, 2, x_58);
lean::cnstr_set(x_107, 3, x_78);
lean::cnstr_set(x_107, 4, x_104);
lean::cnstr_set(x_107, 5, x_106);
return x_107;
}
else
{
obj* x_108; obj* x_111; 
x_108 = lean::cnstr_get(x_89, 0);
lean::inc(x_108);
lean::dec(x_89);
x_111 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_111, 0, x_5);
lean::cnstr_set(x_111, 1, x_26);
lean::cnstr_set(x_111, 2, x_58);
lean::cnstr_set(x_111, 3, x_78);
lean::cnstr_set(x_111, 4, x_104);
lean::cnstr_set(x_111, 5, x_108);
return x_111;
}
}
case 2:
{
obj* x_113; 
lean::dec(x_87);
x_113 = lean::box(0);
if (lean::obj_tag(x_89) == 0)
{
obj* x_115; obj* x_116; 
lean::dec(x_89);
x_115 = lean::box(3);
x_116 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_116, 0, x_5);
lean::cnstr_set(x_116, 1, x_26);
lean::cnstr_set(x_116, 2, x_58);
lean::cnstr_set(x_116, 3, x_78);
lean::cnstr_set(x_116, 4, x_113);
lean::cnstr_set(x_116, 5, x_115);
return x_116;
}
else
{
obj* x_117; obj* x_120; 
x_117 = lean::cnstr_get(x_89, 0);
lean::inc(x_117);
lean::dec(x_89);
x_120 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_120, 0, x_5);
lean::cnstr_set(x_120, 1, x_26);
lean::cnstr_set(x_120, 2, x_58);
lean::cnstr_set(x_120, 3, x_78);
lean::cnstr_set(x_120, 4, x_113);
lean::cnstr_set(x_120, 5, x_117);
return x_120;
}
}
default:
{
obj* x_122; 
lean::dec(x_87);
x_122 = lean::box(0);
if (lean::obj_tag(x_89) == 0)
{
obj* x_124; obj* x_125; 
lean::dec(x_89);
x_124 = lean::box(3);
x_125 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_125, 0, x_5);
lean::cnstr_set(x_125, 1, x_26);
lean::cnstr_set(x_125, 2, x_58);
lean::cnstr_set(x_125, 3, x_78);
lean::cnstr_set(x_125, 4, x_122);
lean::cnstr_set(x_125, 5, x_124);
return x_125;
}
else
{
obj* x_126; obj* x_129; 
x_126 = lean::cnstr_get(x_89, 0);
lean::inc(x_126);
lean::dec(x_89);
x_129 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_129, 0, x_5);
lean::cnstr_set(x_129, 1, x_26);
lean::cnstr_set(x_129, 2, x_58);
lean::cnstr_set(x_129, 3, x_78);
lean::cnstr_set(x_129, 4, x_122);
lean::cnstr_set(x_129, 5, x_126);
return x_129;
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_have_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_14; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
lean::dec(x_0);
x_14 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_14);
x_16 = l_option_map___rarg(x_14, x_1);
x_17 = lean::box(3);
lean::inc(x_17);
x_19 = l_option_get__or__else___main___rarg(x_16, x_17);
x_20 = l_lean_parser_term_have__proof_has__view;
x_21 = lean::cnstr_get(x_20, 1);
lean::inc(x_21);
x_23 = lean::apply_1(x_21, x_7);
lean::inc(x_14);
x_25 = l_option_map___rarg(x_14, x_9);
x_26 = l_option_get__or__else___main___rarg(x_25, x_17);
x_27 = lean::box(0);
lean::inc(x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_11);
lean::cnstr_set(x_29, 1, x_27);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_26);
lean::cnstr_set(x_30, 1, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_23);
lean::cnstr_set(x_31, 1, x_30);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_5);
lean::cnstr_set(x_32, 1, x_31);
if (lean::obj_tag(x_3) == 0)
{
obj* x_35; obj* x_37; obj* x_38; obj* x_39; obj* x_41; 
lean::dec(x_3);
lean::dec(x_27);
x_35 = l_lean_parser_combinators_many___rarg___closed__1;
lean::inc(x_35);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_35);
lean::cnstr_set(x_37, 1, x_32);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_19);
lean::cnstr_set(x_38, 1, x_37);
x_39 = l_lean_parser_term_have;
lean::inc(x_39);
x_41 = l_lean_parser_syntax_mk__node(x_39, x_38);
return x_41;
}
else
{
obj* x_42; obj* x_45; obj* x_46; obj* x_48; obj* x_49; obj* x_50; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_57; 
x_42 = lean::cnstr_get(x_3, 0);
lean::inc(x_42);
lean::dec(x_3);
x_45 = l_lean_parser_term_opt__ident_has__view;
x_46 = lean::cnstr_get(x_45, 1);
lean::inc(x_46);
x_48 = lean::apply_1(x_46, x_42);
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_48);
lean::cnstr_set(x_49, 1, x_27);
x_50 = l_lean_parser_no__kind;
lean::inc(x_50);
x_52 = l_lean_parser_syntax_mk__node(x_50, x_49);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_52);
lean::cnstr_set(x_53, 1, x_32);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_19);
lean::cnstr_set(x_54, 1, x_53);
x_55 = l_lean_parser_term_have;
lean::inc(x_55);
x_57 = l_lean_parser_syntax_mk__node(x_55, x_54);
return x_57;
}
}
}
obj* _init_l_lean_parser_term_have_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_have_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_have_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_have;
x_6 = l_lean_parser_term_have_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_have_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_14; obj* x_15; obj* x_18; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_27; obj* x_29; obj* x_30; obj* x_32; obj* x_34; obj* x_35; obj* x_37; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; 
x_0 = lean::mk_string("have ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
lean::inc(x_4);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_8, 0, x_4);
x_9 = lean::mk_string(" := ");
x_10 = l_string_trim(x_9);
lean::inc(x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_12, 0, x_10);
lean::inc(x_4);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_14, 0, x_10);
lean::closure_set(x_14, 1, x_4);
lean::closure_set(x_14, 2, x_12);
x_15 = lean::box(0);
lean::inc(x_15);
lean::inc(x_8);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_8);
lean::cnstr_set(x_18, 1, x_15);
lean::inc(x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_14);
lean::cnstr_set(x_20, 1, x_18);
x_21 = l_lean_parser_term_have__term;
lean::inc(x_21);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_23, 0, x_21);
lean::closure_set(x_23, 1, x_20);
x_24 = lean::mk_string(", ");
x_25 = l_string_trim(x_24);
lean::inc(x_25);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_27, 0, x_25);
lean::inc(x_4);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_29, 0, x_25);
lean::closure_set(x_29, 1, x_4);
lean::closure_set(x_29, 2, x_27);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_from_parser), 5, 0);
lean::inc(x_15);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_30);
lean::cnstr_set(x_32, 1, x_15);
lean::inc(x_29);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_29);
lean::cnstr_set(x_34, 1, x_32);
x_35 = l_lean_parser_term_have__from;
lean::inc(x_35);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_37, 0, x_35);
lean::closure_set(x_37, 1, x_34);
lean::inc(x_15);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_37);
lean::cnstr_set(x_39, 1, x_15);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_23);
lean::cnstr_set(x_40, 1, x_39);
x_41 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_41, 0, x_40);
lean::closure_set(x_41, 1, x_4);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_15);
x_43 = l_lean_parser_term_have__proof;
lean::inc(x_43);
x_45 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_45, 0, x_43);
lean::closure_set(x_45, 1, x_42);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_29);
lean::cnstr_set(x_46, 1, x_18);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_45);
lean::cnstr_set(x_47, 1, x_46);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_8);
lean::cnstr_set(x_48, 1, x_47);
x_49 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_parser), 5, 0);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_48);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_6);
lean::cnstr_set(x_51, 1, x_50);
return x_51;
}
}
obj* _init_l_lean_parser_term_have_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_14; obj* x_15; obj* x_18; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_27; obj* x_29; obj* x_30; obj* x_32; obj* x_34; obj* x_35; obj* x_37; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_64; 
x_0 = lean::mk_string("have ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
lean::inc(x_4);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_8, 0, x_4);
x_9 = lean::mk_string(" := ");
x_10 = l_string_trim(x_9);
lean::inc(x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_12, 0, x_10);
lean::inc(x_4);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_14, 0, x_10);
lean::closure_set(x_14, 1, x_4);
lean::closure_set(x_14, 2, x_12);
x_15 = lean::box(0);
lean::inc(x_15);
lean::inc(x_8);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_8);
lean::cnstr_set(x_18, 1, x_15);
lean::inc(x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_14);
lean::cnstr_set(x_20, 1, x_18);
x_21 = l_lean_parser_term_have__term;
lean::inc(x_21);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_23, 0, x_21);
lean::closure_set(x_23, 1, x_20);
x_24 = lean::mk_string(", ");
x_25 = l_string_trim(x_24);
lean::inc(x_25);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_27, 0, x_25);
lean::inc(x_4);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_29, 0, x_25);
lean::closure_set(x_29, 1, x_4);
lean::closure_set(x_29, 2, x_27);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_from_parser), 5, 0);
lean::inc(x_15);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_30);
lean::cnstr_set(x_32, 1, x_15);
lean::inc(x_29);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_29);
lean::cnstr_set(x_34, 1, x_32);
x_35 = l_lean_parser_term_have__from;
lean::inc(x_35);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_37, 0, x_35);
lean::closure_set(x_37, 1, x_34);
lean::inc(x_15);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_37);
lean::cnstr_set(x_39, 1, x_15);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_23);
lean::cnstr_set(x_40, 1, x_39);
x_41 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_41, 0, x_40);
lean::closure_set(x_41, 1, x_4);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_15);
x_43 = l_lean_parser_term_have__proof;
lean::inc(x_43);
x_45 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_45, 0, x_43);
lean::closure_set(x_45, 1, x_42);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_29);
lean::cnstr_set(x_46, 1, x_18);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_45);
lean::cnstr_set(x_47, 1, x_46);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_8);
lean::cnstr_set(x_48, 1, x_47);
x_49 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_parser), 5, 0);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_48);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_6);
lean::cnstr_set(x_51, 1, x_50);
x_52 = l_lean_parser_term__parser__m_monad;
x_53 = l_lean_parser_term__parser__m_monad__except;
x_54 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_55 = l_lean_parser_term__parser__m_alternative;
x_56 = l_lean_parser_term_have;
x_57 = l_lean_parser_term_have_has__view;
lean::inc(x_57);
lean::inc(x_56);
lean::inc(x_55);
lean::inc(x_54);
lean::inc(x_53);
lean::inc(x_52);
x_64 = l_lean_parser_combinators_node_view___rarg(x_52, x_53, x_54, x_55, x_56, x_51, x_57);
return x_64;
}
}
obj* _init_l_lean_parser_term_have_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_20; obj* x_22; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_36; obj* x_37; obj* x_38; 
x_0 = lean::mk_string("have ");
x_1 = lean::mk_nat_obj(0u);
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::mk_string(" := ");
lean::inc(x_1);
x_6 = l_lean_parser_symbol_tokens___rarg(x_4, x_1);
x_7 = lean::box(0);
x_8 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_7);
lean::inc(x_8);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_8, x_7);
lean::inc(x_11);
x_13 = l_lean_parser_list_cons_tokens___rarg(x_6, x_11);
x_14 = l_lean_parser_tokens___rarg(x_13);
x_15 = lean::mk_string(", ");
x_16 = l_lean_parser_symbol_tokens___rarg(x_15, x_1);
x_17 = l_lean_parser_term_from_parser_lean_parser_has__tokens;
lean::inc(x_7);
lean::inc(x_17);
x_20 = l_lean_parser_list_cons_tokens___rarg(x_17, x_7);
lean::inc(x_16);
x_22 = l_lean_parser_list_cons_tokens___rarg(x_16, x_20);
x_23 = l_lean_parser_tokens___rarg(x_22);
lean::inc(x_7);
x_25 = l_lean_parser_list_cons_tokens___rarg(x_23, x_7);
x_26 = l_lean_parser_list_cons_tokens___rarg(x_14, x_25);
x_27 = l_lean_parser_tokens___rarg(x_26);
x_28 = l_lean_parser_list_cons_tokens___rarg(x_27, x_7);
x_29 = l_lean_parser_tokens___rarg(x_28);
x_30 = l_lean_parser_list_cons_tokens___rarg(x_16, x_11);
x_31 = l_lean_parser_list_cons_tokens___rarg(x_29, x_30);
lean::inc(x_8);
x_33 = l_lean_parser_list_cons_tokens___rarg(x_8, x_31);
x_34 = l_lean_parser_term_opt__ident_parser_lean_parser_has__tokens;
lean::inc(x_34);
x_36 = l_lean_parser_list_cons_tokens___rarg(x_34, x_33);
x_37 = l_lean_parser_list_cons_tokens___rarg(x_3, x_36);
x_38 = l_lean_parser_tokens___rarg(x_37);
return x_38;
}
}
obj* _init_l_lean_parser_term_show() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("show");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_show_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_show_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_show_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_show_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_show_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
x_35 = lean::box(3);
x_32 = x_1;
x_33 = x_35;
goto lbl_34;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_1, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
lean::dec(x_1);
x_32 = x_38;
x_33 = x_36;
goto lbl_34;
}
lbl_34:
{
obj* x_41; obj* x_42; 
if (lean::obj_tag(x_32) == 0)
{
obj* x_44; 
x_44 = lean::box(3);
x_41 = x_32;
x_42 = x_44;
goto lbl_43;
}
else
{
obj* x_45; obj* x_47; 
x_45 = lean::cnstr_get(x_32, 0);
lean::inc(x_45);
x_47 = lean::cnstr_get(x_32, 1);
lean::inc(x_47);
lean::dec(x_32);
x_41 = x_47;
x_42 = x_45;
goto lbl_43;
}
lbl_43:
{
switch (lean::obj_tag(x_42)) {
case 0:
{
obj* x_50; obj* x_53; 
x_50 = lean::cnstr_get(x_42, 0);
lean::inc(x_50);
lean::dec(x_42);
x_53 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_53, 0, x_50);
if (lean::obj_tag(x_41) == 0)
{
obj* x_55; obj* x_57; 
lean::dec(x_41);
x_55 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_55);
x_57 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_57, 0, x_20);
lean::cnstr_set(x_57, 1, x_33);
lean::cnstr_set(x_57, 2, x_53);
lean::cnstr_set(x_57, 3, x_55);
return x_57;
}
else
{
obj* x_58; obj* x_61; obj* x_62; obj* x_64; obj* x_65; 
x_58 = lean::cnstr_get(x_41, 0);
lean::inc(x_58);
lean::dec(x_41);
x_61 = l_lean_parser_term_from_has__view;
x_62 = lean::cnstr_get(x_61, 0);
lean::inc(x_62);
x_64 = lean::apply_1(x_62, x_58);
x_65 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_65, 0, x_20);
lean::cnstr_set(x_65, 1, x_33);
lean::cnstr_set(x_65, 2, x_53);
lean::cnstr_set(x_65, 3, x_64);
return x_65;
}
}
case 1:
{
obj* x_67; 
lean::dec(x_42);
x_67 = lean::box(0);
if (lean::obj_tag(x_41) == 0)
{
obj* x_69; obj* x_71; 
lean::dec(x_41);
x_69 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_69);
x_71 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_71, 0, x_20);
lean::cnstr_set(x_71, 1, x_33);
lean::cnstr_set(x_71, 2, x_67);
lean::cnstr_set(x_71, 3, x_69);
return x_71;
}
else
{
obj* x_72; obj* x_75; obj* x_76; obj* x_78; obj* x_79; 
x_72 = lean::cnstr_get(x_41, 0);
lean::inc(x_72);
lean::dec(x_41);
x_75 = l_lean_parser_term_from_has__view;
x_76 = lean::cnstr_get(x_75, 0);
lean::inc(x_76);
x_78 = lean::apply_1(x_76, x_72);
x_79 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_79, 0, x_20);
lean::cnstr_set(x_79, 1, x_33);
lean::cnstr_set(x_79, 2, x_67);
lean::cnstr_set(x_79, 3, x_78);
return x_79;
}
}
case 2:
{
obj* x_81; 
lean::dec(x_42);
x_81 = lean::box(0);
if (lean::obj_tag(x_41) == 0)
{
obj* x_83; obj* x_85; 
lean::dec(x_41);
x_83 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_83);
x_85 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_85, 0, x_20);
lean::cnstr_set(x_85, 1, x_33);
lean::cnstr_set(x_85, 2, x_81);
lean::cnstr_set(x_85, 3, x_83);
return x_85;
}
else
{
obj* x_86; obj* x_89; obj* x_90; obj* x_92; obj* x_93; 
x_86 = lean::cnstr_get(x_41, 0);
lean::inc(x_86);
lean::dec(x_41);
x_89 = l_lean_parser_term_from_has__view;
x_90 = lean::cnstr_get(x_89, 0);
lean::inc(x_90);
x_92 = lean::apply_1(x_90, x_86);
x_93 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_93, 0, x_20);
lean::cnstr_set(x_93, 1, x_33);
lean::cnstr_set(x_93, 2, x_81);
lean::cnstr_set(x_93, 3, x_92);
return x_93;
}
}
default:
{
obj* x_95; 
lean::dec(x_42);
x_95 = lean::box(0);
if (lean::obj_tag(x_41) == 0)
{
obj* x_97; obj* x_99; 
lean::dec(x_41);
x_97 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_97);
x_99 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_99, 0, x_20);
lean::cnstr_set(x_99, 1, x_33);
lean::cnstr_set(x_99, 2, x_95);
lean::cnstr_set(x_99, 3, x_97);
return x_99;
}
else
{
obj* x_100; obj* x_103; obj* x_104; obj* x_106; obj* x_107; 
x_100 = lean::cnstr_get(x_41, 0);
lean::inc(x_100);
lean::dec(x_41);
x_103 = l_lean_parser_term_from_has__view;
x_104 = lean::cnstr_get(x_103, 0);
lean::inc(x_104);
x_106 = lean::apply_1(x_104, x_100);
x_107 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_107, 0, x_20);
lean::cnstr_set(x_107, 1, x_33);
lean::cnstr_set(x_107, 2, x_95);
lean::cnstr_set(x_107, 3, x_106);
return x_107;
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_show_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_19:
{
obj* x_26; obj* x_27; 
if (lean::obj_tag(x_17) == 0)
{
obj* x_29; 
x_29 = lean::box(3);
x_26 = x_17;
x_27 = x_29;
goto lbl_28;
}
else
{
obj* x_30; obj* x_32; 
x_30 = lean::cnstr_get(x_17, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_17, 1);
lean::inc(x_32);
lean::dec(x_17);
x_26 = x_32;
x_27 = x_30;
goto lbl_28;
}
lbl_28:
{
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_35; obj* x_38; 
x_35 = lean::cnstr_get(x_27, 0);
lean::inc(x_35);
lean::dec(x_27);
x_38 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_38, 0, x_35);
if (lean::obj_tag(x_26) == 0)
{
obj* x_40; obj* x_42; 
lean::dec(x_26);
x_40 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_40);
x_42 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_42, 0, x_5);
lean::cnstr_set(x_42, 1, x_18);
lean::cnstr_set(x_42, 2, x_38);
lean::cnstr_set(x_42, 3, x_40);
return x_42;
}
else
{
obj* x_43; obj* x_46; obj* x_47; obj* x_49; obj* x_50; 
x_43 = lean::cnstr_get(x_26, 0);
lean::inc(x_43);
lean::dec(x_26);
x_46 = l_lean_parser_term_from_has__view;
x_47 = lean::cnstr_get(x_46, 0);
lean::inc(x_47);
x_49 = lean::apply_1(x_47, x_43);
x_50 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_50, 0, x_5);
lean::cnstr_set(x_50, 1, x_18);
lean::cnstr_set(x_50, 2, x_38);
lean::cnstr_set(x_50, 3, x_49);
return x_50;
}
}
case 1:
{
obj* x_52; 
lean::dec(x_27);
x_52 = lean::box(0);
if (lean::obj_tag(x_26) == 0)
{
obj* x_54; obj* x_56; 
lean::dec(x_26);
x_54 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_54);
x_56 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_56, 0, x_5);
lean::cnstr_set(x_56, 1, x_18);
lean::cnstr_set(x_56, 2, x_52);
lean::cnstr_set(x_56, 3, x_54);
return x_56;
}
else
{
obj* x_57; obj* x_60; obj* x_61; obj* x_63; obj* x_64; 
x_57 = lean::cnstr_get(x_26, 0);
lean::inc(x_57);
lean::dec(x_26);
x_60 = l_lean_parser_term_from_has__view;
x_61 = lean::cnstr_get(x_60, 0);
lean::inc(x_61);
x_63 = lean::apply_1(x_61, x_57);
x_64 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_64, 0, x_5);
lean::cnstr_set(x_64, 1, x_18);
lean::cnstr_set(x_64, 2, x_52);
lean::cnstr_set(x_64, 3, x_63);
return x_64;
}
}
case 2:
{
obj* x_66; 
lean::dec(x_27);
x_66 = lean::box(0);
if (lean::obj_tag(x_26) == 0)
{
obj* x_68; obj* x_70; 
lean::dec(x_26);
x_68 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
x_70 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_70, 0, x_5);
lean::cnstr_set(x_70, 1, x_18);
lean::cnstr_set(x_70, 2, x_66);
lean::cnstr_set(x_70, 3, x_68);
return x_70;
}
else
{
obj* x_71; obj* x_74; obj* x_75; obj* x_77; obj* x_78; 
x_71 = lean::cnstr_get(x_26, 0);
lean::inc(x_71);
lean::dec(x_26);
x_74 = l_lean_parser_term_from_has__view;
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
x_77 = lean::apply_1(x_75, x_71);
x_78 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_78, 0, x_5);
lean::cnstr_set(x_78, 1, x_18);
lean::cnstr_set(x_78, 2, x_66);
lean::cnstr_set(x_78, 3, x_77);
return x_78;
}
}
default:
{
obj* x_80; 
lean::dec(x_27);
x_80 = lean::box(0);
if (lean::obj_tag(x_26) == 0)
{
obj* x_82; obj* x_84; 
lean::dec(x_26);
x_82 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
lean::inc(x_82);
x_84 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_84, 0, x_5);
lean::cnstr_set(x_84, 1, x_18);
lean::cnstr_set(x_84, 2, x_80);
lean::cnstr_set(x_84, 3, x_82);
return x_84;
}
else
{
obj* x_85; obj* x_88; obj* x_89; obj* x_91; obj* x_92; 
x_85 = lean::cnstr_get(x_26, 0);
lean::inc(x_85);
lean::dec(x_26);
x_88 = l_lean_parser_term_from_has__view;
x_89 = lean::cnstr_get(x_88, 0);
lean::inc(x_89);
x_91 = lean::apply_1(x_89, x_85);
x_92 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_92, 0, x_5);
lean::cnstr_set(x_92, 1, x_18);
lean::cnstr_set(x_92, 2, x_80);
lean::cnstr_set(x_92, 3, x_91);
return x_92;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_show_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_30; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
lean::dec(x_0);
x_10 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_10);
x_12 = l_option_map___rarg(x_10, x_1);
x_13 = lean::box(3);
lean::inc(x_13);
x_15 = l_option_get__or__else___main___rarg(x_12, x_13);
lean::inc(x_10);
x_17 = l_option_map___rarg(x_10, x_5);
x_18 = l_option_get__or__else___main___rarg(x_17, x_13);
x_19 = l_lean_parser_term_from_has__view;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
x_22 = lean::apply_1(x_20, x_7);
x_23 = lean::box(0);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_22);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_18);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_3);
lean::cnstr_set(x_26, 1, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_15);
lean::cnstr_set(x_27, 1, x_26);
x_28 = l_lean_parser_term_show;
lean::inc(x_28);
x_30 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_30;
}
}
obj* _init_l_lean_parser_term_show_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_show_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_show_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_show;
x_6 = l_lean_parser_term_show_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_show_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_0 = lean::mk_string("show ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
lean::inc(x_4);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_8, 0, x_4);
x_9 = lean::mk_string(", ");
x_10 = l_string_trim(x_9);
lean::inc(x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_12, 0, x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_13, 0, x_10);
lean::closure_set(x_13, 1, x_4);
lean::closure_set(x_13, 2, x_12);
x_14 = lean::box(0);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_from_parser), 5, 0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_14);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_13);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_8);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_6);
lean::cnstr_set(x_19, 1, x_18);
return x_19;
}
}
obj* _init_l_lean_parser_term_show_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_32; 
x_0 = lean::mk_string("show ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
lean::inc(x_4);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_8, 0, x_4);
x_9 = lean::mk_string(", ");
x_10 = l_string_trim(x_9);
lean::inc(x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_12, 0, x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_13, 0, x_10);
lean::closure_set(x_13, 1, x_4);
lean::closure_set(x_13, 2, x_12);
x_14 = lean::box(0);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_from_parser), 5, 0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_14);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_13);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_8);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_6);
lean::cnstr_set(x_19, 1, x_18);
x_20 = l_lean_parser_term__parser__m_monad;
x_21 = l_lean_parser_term__parser__m_monad__except;
x_22 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_23 = l_lean_parser_term__parser__m_alternative;
x_24 = l_lean_parser_term_show;
x_25 = l_lean_parser_term_show_has__view;
lean::inc(x_25);
lean::inc(x_24);
lean::inc(x_23);
lean::inc(x_22);
lean::inc(x_21);
lean::inc(x_20);
x_32 = l_lean_parser_combinators_node_view___rarg(x_20, x_21, x_22, x_23, x_24, x_19, x_25);
return x_32;
}
}
obj* _init_l_lean_parser_term_show_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; 
x_0 = lean::mk_string("show ");
x_1 = lean::mk_nat_obj(0u);
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::mk_string(", ");
x_5 = l_lean_parser_symbol_tokens___rarg(x_4, x_1);
x_6 = lean::box(0);
x_7 = l_lean_parser_term_from_parser_lean_parser_has__tokens;
lean::inc(x_7);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_7, x_6);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_5, x_9);
x_11 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_list_cons_tokens___rarg(x_11, x_10);
x_14 = l_lean_parser_list_cons_tokens___rarg(x_3, x_13);
x_15 = l_lean_parser_tokens___rarg(x_14);
return x_15;
}
}
obj* _init_l_lean_parser_term_match__equation() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("match_equation");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_match__equation_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_match__equation_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_match__equation_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_match__equation_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__2;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
x_20 = l_lean_parser_syntax_as__node___main(x_2);
if (lean::obj_tag(x_20) == 0)
{
obj* x_22; 
lean::dec(x_20);
x_22 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_25; 
lean::dec(x_22);
lean::dec(x_1);
x_25 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_1, 0);
lean::inc(x_27);
lean::dec(x_1);
x_30 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_30);
x_32 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_32, 0, x_30);
lean::cnstr_set(x_32, 1, x_22);
lean::cnstr_set(x_32, 2, x_27);
return x_32;
}
}
else
{
obj* x_33; obj* x_35; 
x_33 = lean::cnstr_get(x_1, 0);
lean::inc(x_33);
x_35 = lean::cnstr_get(x_1, 1);
lean::inc(x_35);
lean::dec(x_1);
switch (lean::obj_tag(x_33)) {
case 0:
{
obj* x_39; obj* x_42; 
lean::dec(x_22);
x_39 = lean::cnstr_get(x_33, 0);
lean::inc(x_39);
lean::dec(x_33);
x_42 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_42, 0, x_39);
if (lean::obj_tag(x_35) == 0)
{
obj* x_44; obj* x_45; obj* x_47; 
lean::dec(x_35);
x_44 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_45 = lean::box(3);
lean::inc(x_44);
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_44);
lean::cnstr_set(x_47, 1, x_42);
lean::cnstr_set(x_47, 2, x_45);
return x_47;
}
else
{
obj* x_48; obj* x_51; obj* x_53; 
x_48 = lean::cnstr_get(x_35, 0);
lean::inc(x_48);
lean::dec(x_35);
x_51 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
x_53 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_53, 0, x_51);
lean::cnstr_set(x_53, 1, x_42);
lean::cnstr_set(x_53, 2, x_48);
return x_53;
}
}
case 1:
{
lean::dec(x_33);
if (lean::obj_tag(x_35) == 0)
{
obj* x_57; 
lean::dec(x_22);
lean::dec(x_35);
x_57 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_57);
return x_57;
}
else
{
obj* x_59; obj* x_62; obj* x_64; 
x_59 = lean::cnstr_get(x_35, 0);
lean::inc(x_59);
lean::dec(x_35);
x_62 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_62);
x_64 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_64, 0, x_62);
lean::cnstr_set(x_64, 1, x_22);
lean::cnstr_set(x_64, 2, x_59);
return x_64;
}
}
case 2:
{
lean::dec(x_33);
if (lean::obj_tag(x_35) == 0)
{
obj* x_68; 
lean::dec(x_22);
lean::dec(x_35);
x_68 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_73; obj* x_75; 
x_70 = lean::cnstr_get(x_35, 0);
lean::inc(x_70);
lean::dec(x_35);
x_73 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_73);
x_75 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_75, 0, x_73);
lean::cnstr_set(x_75, 1, x_22);
lean::cnstr_set(x_75, 2, x_70);
return x_75;
}
}
default:
{
lean::dec(x_33);
if (lean::obj_tag(x_35) == 0)
{
obj* x_79; 
lean::dec(x_22);
lean::dec(x_35);
x_79 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_79);
return x_79;
}
else
{
obj* x_81; obj* x_84; obj* x_86; 
x_81 = lean::cnstr_get(x_35, 0);
lean::inc(x_81);
lean::dec(x_35);
x_84 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_84);
x_86 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_86, 0, x_84);
lean::cnstr_set(x_86, 1, x_22);
lean::cnstr_set(x_86, 2, x_81);
return x_86;
}
}
}
}
}
else
{
obj* x_87; obj* x_89; obj* x_90; obj* x_93; 
x_87 = lean::cnstr_get(x_20, 0);
lean::inc(x_87);
if (lean::is_shared(x_20)) {
 lean::dec(x_20);
 x_89 = lean::box(0);
} else {
 lean::cnstr_release(x_20, 0);
 x_89 = x_20;
}
x_90 = lean::cnstr_get(x_87, 1);
lean::inc(x_90);
lean::dec(x_87);
x_93 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_90);
if (lean::obj_tag(x_1) == 0)
{
obj* x_95; 
lean::dec(x_89);
x_95 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_97; obj* x_98; 
lean::dec(x_1);
x_97 = lean::box(3);
x_98 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_98, 0, x_93);
lean::cnstr_set(x_98, 1, x_95);
lean::cnstr_set(x_98, 2, x_97);
return x_98;
}
else
{
obj* x_99; obj* x_102; 
x_99 = lean::cnstr_get(x_1, 0);
lean::inc(x_99);
lean::dec(x_1);
x_102 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_102, 0, x_93);
lean::cnstr_set(x_102, 1, x_95);
lean::cnstr_set(x_102, 2, x_99);
return x_102;
}
}
else
{
obj* x_103; obj* x_105; 
x_103 = lean::cnstr_get(x_1, 0);
lean::inc(x_103);
x_105 = lean::cnstr_get(x_1, 1);
lean::inc(x_105);
lean::dec(x_1);
switch (lean::obj_tag(x_103)) {
case 0:
{
obj* x_108; obj* x_111; 
x_108 = lean::cnstr_get(x_103, 0);
lean::inc(x_108);
lean::dec(x_103);
if (lean::is_scalar(x_89)) {
 x_111 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_111 = x_89;
}
lean::cnstr_set(x_111, 0, x_108);
if (lean::obj_tag(x_105) == 0)
{
obj* x_113; obj* x_114; 
lean::dec(x_105);
x_113 = lean::box(3);
x_114 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_114, 0, x_93);
lean::cnstr_set(x_114, 1, x_111);
lean::cnstr_set(x_114, 2, x_113);
return x_114;
}
else
{
obj* x_115; obj* x_118; 
x_115 = lean::cnstr_get(x_105, 0);
lean::inc(x_115);
lean::dec(x_105);
x_118 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_118, 0, x_93);
lean::cnstr_set(x_118, 1, x_111);
lean::cnstr_set(x_118, 2, x_115);
return x_118;
}
}
case 1:
{
obj* x_121; 
lean::dec(x_89);
lean::dec(x_103);
x_121 = lean::box(0);
if (lean::obj_tag(x_105) == 0)
{
obj* x_123; obj* x_124; 
lean::dec(x_105);
x_123 = lean::box(3);
x_124 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_124, 0, x_93);
lean::cnstr_set(x_124, 1, x_121);
lean::cnstr_set(x_124, 2, x_123);
return x_124;
}
else
{
obj* x_125; obj* x_128; 
x_125 = lean::cnstr_get(x_105, 0);
lean::inc(x_125);
lean::dec(x_105);
x_128 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_128, 0, x_93);
lean::cnstr_set(x_128, 1, x_121);
lean::cnstr_set(x_128, 2, x_125);
return x_128;
}
}
case 2:
{
obj* x_131; 
lean::dec(x_89);
lean::dec(x_103);
x_131 = lean::box(0);
if (lean::obj_tag(x_105) == 0)
{
obj* x_133; obj* x_134; 
lean::dec(x_105);
x_133 = lean::box(3);
x_134 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_134, 0, x_93);
lean::cnstr_set(x_134, 1, x_131);
lean::cnstr_set(x_134, 2, x_133);
return x_134;
}
else
{
obj* x_135; obj* x_138; 
x_135 = lean::cnstr_get(x_105, 0);
lean::inc(x_135);
lean::dec(x_105);
x_138 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_138, 0, x_93);
lean::cnstr_set(x_138, 1, x_131);
lean::cnstr_set(x_138, 2, x_135);
return x_138;
}
}
default:
{
obj* x_141; 
lean::dec(x_89);
lean::dec(x_103);
x_141 = lean::box(0);
if (lean::obj_tag(x_105) == 0)
{
obj* x_143; obj* x_144; 
lean::dec(x_105);
x_143 = lean::box(3);
x_144 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_144, 0, x_93);
lean::cnstr_set(x_144, 1, x_141);
lean::cnstr_set(x_144, 2, x_143);
return x_144;
}
else
{
obj* x_145; obj* x_148; 
x_145 = lean::cnstr_get(x_105, 0);
lean::inc(x_145);
lean::dec(x_105);
x_148 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_148, 0, x_93);
lean::cnstr_set(x_148, 1, x_141);
lean::cnstr_set(x_148, 2, x_145);
return x_148;
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = lean::box(3);
lean::inc(x_0);
lean::inc(x_1);
x_4 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_4, 0, x_1);
lean::cnstr_set(x_4, 1, x_0);
lean::inc(x_0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_0);
x_7 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
lean::cnstr_set(x_7, 2, x_1);
return x_7;
}
}
obj* _init_l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
x_5 = l_lean_parser_syntax_as__node___main(x_1);
if (lean::obj_tag(x_5) == 0)
{
obj* x_7; 
lean::dec(x_5);
x_7 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_10; 
lean::dec(x_7);
lean::dec(x_0);
x_10 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_10);
return x_10;
}
else
{
obj* x_12; obj* x_15; obj* x_17; 
x_12 = lean::cnstr_get(x_0, 0);
lean::inc(x_12);
lean::dec(x_0);
x_15 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_15);
x_17 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set(x_17, 1, x_7);
lean::cnstr_set(x_17, 2, x_12);
return x_17;
}
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
switch (lean::obj_tag(x_18)) {
case 0:
{
obj* x_24; obj* x_27; 
lean::dec(x_7);
x_24 = lean::cnstr_get(x_18, 0);
lean::inc(x_24);
lean::dec(x_18);
x_27 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_27, 0, x_24);
if (lean::obj_tag(x_20) == 0)
{
obj* x_29; obj* x_30; obj* x_32; 
lean::dec(x_20);
x_29 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_30 = lean::box(3);
lean::inc(x_29);
x_32 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_32, 0, x_29);
lean::cnstr_set(x_32, 1, x_27);
lean::cnstr_set(x_32, 2, x_30);
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_38; 
x_33 = lean::cnstr_get(x_20, 0);
lean::inc(x_33);
lean::dec(x_20);
x_36 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_36);
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_36);
lean::cnstr_set(x_38, 1, x_27);
lean::cnstr_set(x_38, 2, x_33);
return x_38;
}
}
case 1:
{
lean::dec(x_18);
if (lean::obj_tag(x_20) == 0)
{
obj* x_42; 
lean::dec(x_7);
lean::dec(x_20);
x_42 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_42);
return x_42;
}
else
{
obj* x_44; obj* x_47; obj* x_49; 
x_44 = lean::cnstr_get(x_20, 0);
lean::inc(x_44);
lean::dec(x_20);
x_47 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
x_49 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_49, 0, x_47);
lean::cnstr_set(x_49, 1, x_7);
lean::cnstr_set(x_49, 2, x_44);
return x_49;
}
}
case 2:
{
lean::dec(x_18);
if (lean::obj_tag(x_20) == 0)
{
obj* x_53; 
lean::dec(x_7);
lean::dec(x_20);
x_53 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_53);
return x_53;
}
else
{
obj* x_55; obj* x_58; obj* x_60; 
x_55 = lean::cnstr_get(x_20, 0);
lean::inc(x_55);
lean::dec(x_20);
x_58 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_58);
x_60 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_60, 0, x_58);
lean::cnstr_set(x_60, 1, x_7);
lean::cnstr_set(x_60, 2, x_55);
return x_60;
}
}
default:
{
lean::dec(x_18);
if (lean::obj_tag(x_20) == 0)
{
obj* x_64; 
lean::dec(x_7);
lean::dec(x_20);
x_64 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_64);
return x_64;
}
else
{
obj* x_66; obj* x_69; obj* x_71; 
x_66 = lean::cnstr_get(x_20, 0);
lean::inc(x_66);
lean::dec(x_20);
x_69 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_69);
x_71 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_71, 0, x_69);
lean::cnstr_set(x_71, 1, x_7);
lean::cnstr_set(x_71, 2, x_66);
return x_71;
}
}
}
}
}
else
{
obj* x_72; obj* x_74; obj* x_75; obj* x_78; 
x_72 = lean::cnstr_get(x_5, 0);
lean::inc(x_72);
if (lean::is_shared(x_5)) {
 lean::dec(x_5);
 x_74 = lean::box(0);
} else {
 lean::cnstr_release(x_5, 0);
 x_74 = x_5;
}
x_75 = lean::cnstr_get(x_72, 1);
lean::inc(x_75);
lean::dec(x_72);
x_78 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_75);
if (lean::obj_tag(x_0) == 0)
{
obj* x_80; 
lean::dec(x_74);
x_80 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_82; obj* x_83; 
lean::dec(x_0);
x_82 = lean::box(3);
x_83 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_83, 0, x_78);
lean::cnstr_set(x_83, 1, x_80);
lean::cnstr_set(x_83, 2, x_82);
return x_83;
}
else
{
obj* x_84; obj* x_87; 
x_84 = lean::cnstr_get(x_0, 0);
lean::inc(x_84);
lean::dec(x_0);
x_87 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_87, 0, x_78);
lean::cnstr_set(x_87, 1, x_80);
lean::cnstr_set(x_87, 2, x_84);
return x_87;
}
}
else
{
obj* x_88; obj* x_90; 
x_88 = lean::cnstr_get(x_0, 0);
lean::inc(x_88);
x_90 = lean::cnstr_get(x_0, 1);
lean::inc(x_90);
lean::dec(x_0);
switch (lean::obj_tag(x_88)) {
case 0:
{
obj* x_93; obj* x_96; 
x_93 = lean::cnstr_get(x_88, 0);
lean::inc(x_93);
lean::dec(x_88);
if (lean::is_scalar(x_74)) {
 x_96 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_96 = x_74;
}
lean::cnstr_set(x_96, 0, x_93);
if (lean::obj_tag(x_90) == 0)
{
obj* x_98; obj* x_99; 
lean::dec(x_90);
x_98 = lean::box(3);
x_99 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_99, 0, x_78);
lean::cnstr_set(x_99, 1, x_96);
lean::cnstr_set(x_99, 2, x_98);
return x_99;
}
else
{
obj* x_100; obj* x_103; 
x_100 = lean::cnstr_get(x_90, 0);
lean::inc(x_100);
lean::dec(x_90);
x_103 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_103, 0, x_78);
lean::cnstr_set(x_103, 1, x_96);
lean::cnstr_set(x_103, 2, x_100);
return x_103;
}
}
case 1:
{
obj* x_106; 
lean::dec(x_88);
lean::dec(x_74);
x_106 = lean::box(0);
if (lean::obj_tag(x_90) == 0)
{
obj* x_108; obj* x_109; 
lean::dec(x_90);
x_108 = lean::box(3);
x_109 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_109, 0, x_78);
lean::cnstr_set(x_109, 1, x_106);
lean::cnstr_set(x_109, 2, x_108);
return x_109;
}
else
{
obj* x_110; obj* x_113; 
x_110 = lean::cnstr_get(x_90, 0);
lean::inc(x_110);
lean::dec(x_90);
x_113 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_113, 0, x_78);
lean::cnstr_set(x_113, 1, x_106);
lean::cnstr_set(x_113, 2, x_110);
return x_113;
}
}
case 2:
{
obj* x_116; 
lean::dec(x_88);
lean::dec(x_74);
x_116 = lean::box(0);
if (lean::obj_tag(x_90) == 0)
{
obj* x_118; obj* x_119; 
lean::dec(x_90);
x_118 = lean::box(3);
x_119 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_119, 0, x_78);
lean::cnstr_set(x_119, 1, x_116);
lean::cnstr_set(x_119, 2, x_118);
return x_119;
}
else
{
obj* x_120; obj* x_123; 
x_120 = lean::cnstr_get(x_90, 0);
lean::inc(x_120);
lean::dec(x_90);
x_123 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_123, 0, x_78);
lean::cnstr_set(x_123, 1, x_116);
lean::cnstr_set(x_123, 2, x_120);
return x_123;
}
}
default:
{
obj* x_126; 
lean::dec(x_88);
lean::dec(x_74);
x_126 = lean::box(0);
if (lean::obj_tag(x_90) == 0)
{
obj* x_128; obj* x_129; 
lean::dec(x_90);
x_128 = lean::box(3);
x_129 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_129, 0, x_78);
lean::cnstr_set(x_129, 1, x_126);
lean::cnstr_set(x_129, 2, x_128);
return x_129;
}
else
{
obj* x_130; obj* x_133; 
x_130 = lean::cnstr_get(x_90, 0);
lean::inc(x_130);
lean::dec(x_90);
x_133 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_133, 0, x_78);
lean::cnstr_set(x_133, 1, x_126);
lean::cnstr_set(x_133, 2, x_130);
return x_133;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_match__equation_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_24; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_list_map___main___at_lean_parser_term_match__equation_has__view_x_27___spec__1(x_1);
x_9 = l_list_join___main___rarg(x_8);
x_10 = l_lean_parser_no__kind;
lean::inc(x_10);
x_12 = l_lean_parser_syntax_mk__node(x_10, x_9);
x_13 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_13);
x_15 = l_option_map___rarg(x_13, x_3);
x_16 = lean::box(3);
x_17 = l_option_get__or__else___main___rarg(x_15, x_16);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_5);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_17);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_12);
lean::cnstr_set(x_21, 1, x_20);
x_22 = l_lean_parser_term_match__equation;
lean::inc(x_22);
x_24 = l_lean_parser_syntax_mk__node(x_22, x_21);
return x_24;
}
}
obj* l_list_map___main___at_lean_parser_term_match__equation_has__view_x_27___spec__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_8; obj* x_10; obj* x_13; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_7 = x_0;
}
x_8 = lean::cnstr_get(x_3, 0);
lean::inc(x_8);
x_10 = lean::cnstr_get(x_3, 1);
lean::inc(x_10);
lean::dec(x_3);
x_13 = l_list_map___main___at_lean_parser_term_match__equation_has__view_x_27___spec__1(x_5);
if (lean::obj_tag(x_10) == 0)
{
obj* x_15; obj* x_16; obj* x_17; 
lean::dec(x_10);
x_15 = lean::box(0);
if (lean::is_scalar(x_7)) {
 x_16 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_16 = x_7;
}
lean::cnstr_set(x_16, 0, x_8);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_13);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_18 = lean::cnstr_get(x_10, 0);
lean::inc(x_18);
lean::dec(x_10);
x_21 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_21);
x_23 = l_option_map___rarg(x_21, x_18);
x_24 = lean::box(3);
x_25 = l_option_get__or__else___main___rarg(x_23, x_24);
x_26 = lean::box(0);
if (lean::is_scalar(x_7)) {
 x_27 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_27 = x_7;
}
lean::cnstr_set(x_27, 0, x_25);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_8);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_13);
return x_29;
}
}
}
}
obj* _init_l_lean_parser_term_match__equation_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_match__equation_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_match() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("match");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_match_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_match_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_match_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_match_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_match_has__view_x_27___lambda__1___closed__2;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
x_35 = lean::box(3);
x_32 = x_1;
x_33 = x_35;
goto lbl_34;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_1, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
lean::dec(x_1);
x_32 = x_38;
x_33 = x_36;
goto lbl_34;
}
lbl_34:
{
obj* x_41; obj* x_43; 
x_43 = l_lean_parser_syntax_as__node___main(x_33);
if (lean::obj_tag(x_43) == 0)
{
obj* x_45; 
lean::dec(x_43);
x_45 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_45);
x_41 = x_45;
goto lbl_42;
}
else
{
obj* x_47; obj* x_50; obj* x_53; 
x_47 = lean::cnstr_get(x_43, 0);
lean::inc(x_47);
lean::dec(x_43);
x_50 = lean::cnstr_get(x_47, 1);
lean::inc(x_50);
lean::dec(x_47);
x_53 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_50);
x_41 = x_53;
goto lbl_42;
}
lbl_42:
{
obj* x_54; obj* x_55; 
if (lean::obj_tag(x_32) == 0)
{
obj* x_57; 
x_57 = lean::box(3);
x_54 = x_32;
x_55 = x_57;
goto lbl_56;
}
else
{
obj* x_58; obj* x_60; 
x_58 = lean::cnstr_get(x_32, 0);
lean::inc(x_58);
x_60 = lean::cnstr_get(x_32, 1);
lean::inc(x_60);
lean::dec(x_32);
x_54 = x_60;
x_55 = x_58;
goto lbl_56;
}
lbl_56:
{
obj* x_63; obj* x_65; 
x_65 = l_lean_parser_syntax_as__node___main(x_55);
if (lean::obj_tag(x_65) == 0)
{
obj* x_67; 
lean::dec(x_65);
x_67 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_67);
x_63 = x_67;
goto lbl_64;
}
else
{
obj* x_69; obj* x_71; obj* x_72; 
x_69 = lean::cnstr_get(x_65, 0);
lean::inc(x_69);
if (lean::is_shared(x_65)) {
 lean::dec(x_65);
 x_71 = lean::box(0);
} else {
 lean::cnstr_release(x_65, 0);
 x_71 = x_65;
}
x_72 = lean::cnstr_get(x_69, 1);
lean::inc(x_72);
lean::dec(x_69);
if (lean::obj_tag(x_72) == 0)
{
obj* x_77; 
lean::dec(x_72);
lean::dec(x_71);
x_77 = lean::box(0);
x_63 = x_77;
goto lbl_64;
}
else
{
obj* x_78; obj* x_80; 
x_78 = lean::cnstr_get(x_72, 0);
lean::inc(x_78);
x_80 = lean::cnstr_get(x_72, 1);
lean::inc(x_80);
lean::dec(x_72);
if (lean::obj_tag(x_80) == 0)
{
obj* x_84; obj* x_85; obj* x_87; obj* x_88; 
lean::dec(x_80);
x_84 = l_lean_parser_term_type__spec_has__view;
x_85 = lean::cnstr_get(x_84, 0);
lean::inc(x_85);
x_87 = lean::apply_1(x_85, x_78);
if (lean::is_scalar(x_71)) {
 x_88 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_88 = x_71;
}
lean::cnstr_set(x_88, 0, x_87);
x_63 = x_88;
goto lbl_64;
}
else
{
obj* x_92; 
lean::dec(x_80);
lean::dec(x_78);
lean::dec(x_71);
x_92 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_92);
x_63 = x_92;
goto lbl_64;
}
}
}
lbl_64:
{
obj* x_94; obj* x_95; 
if (lean::obj_tag(x_54) == 0)
{
obj* x_97; 
x_97 = lean::box(3);
x_94 = x_54;
x_95 = x_97;
goto lbl_96;
}
else
{
obj* x_98; obj* x_100; 
x_98 = lean::cnstr_get(x_54, 0);
lean::inc(x_98);
x_100 = lean::cnstr_get(x_54, 1);
lean::inc(x_100);
lean::dec(x_54);
x_94 = x_100;
x_95 = x_98;
goto lbl_96;
}
lbl_96:
{
obj* x_103; 
switch (lean::obj_tag(x_95)) {
case 0:
{
obj* x_105; obj* x_108; 
x_105 = lean::cnstr_get(x_95, 0);
lean::inc(x_105);
lean::dec(x_95);
x_108 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_108, 0, x_105);
x_103 = x_108;
goto lbl_104;
}
case 1:
{
obj* x_110; 
lean::dec(x_95);
x_110 = lean::box(0);
x_103 = x_110;
goto lbl_104;
}
case 2:
{
obj* x_112; 
lean::dec(x_95);
x_112 = lean::box(0);
x_103 = x_112;
goto lbl_104;
}
default:
{
obj* x_114; 
lean::dec(x_95);
x_114 = lean::box(0);
x_103 = x_114;
goto lbl_104;
}
}
lbl_104:
{
obj* x_115; obj* x_116; 
if (lean::obj_tag(x_94) == 0)
{
obj* x_118; 
x_118 = lean::box(3);
x_115 = x_94;
x_116 = x_118;
goto lbl_117;
}
else
{
obj* x_119; obj* x_121; 
x_119 = lean::cnstr_get(x_94, 0);
lean::inc(x_119);
x_121 = lean::cnstr_get(x_94, 1);
lean::inc(x_121);
lean::dec(x_94);
x_115 = x_121;
x_116 = x_119;
goto lbl_117;
}
lbl_117:
{
obj* x_124; obj* x_126; 
x_126 = l_lean_parser_syntax_as__node___main(x_116);
if (lean::obj_tag(x_126) == 0)
{
obj* x_128; 
lean::dec(x_126);
x_128 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_128);
x_124 = x_128;
goto lbl_125;
}
else
{
obj* x_130; obj* x_132; obj* x_133; 
x_130 = lean::cnstr_get(x_126, 0);
lean::inc(x_130);
if (lean::is_shared(x_126)) {
 lean::dec(x_126);
 x_132 = lean::box(0);
} else {
 lean::cnstr_release(x_126, 0);
 x_132 = x_126;
}
x_133 = lean::cnstr_get(x_130, 1);
lean::inc(x_133);
lean::dec(x_130);
if (lean::obj_tag(x_133) == 0)
{
obj* x_138; 
lean::dec(x_132);
lean::dec(x_133);
x_138 = lean::box(0);
x_124 = x_138;
goto lbl_125;
}
else
{
obj* x_139; obj* x_141; 
x_139 = lean::cnstr_get(x_133, 0);
lean::inc(x_139);
x_141 = lean::cnstr_get(x_133, 1);
lean::inc(x_141);
lean::dec(x_133);
if (lean::obj_tag(x_141) == 0)
{
lean::dec(x_141);
switch (lean::obj_tag(x_139)) {
case 0:
{
obj* x_145; obj* x_148; obj* x_149; 
x_145 = lean::cnstr_get(x_139, 0);
lean::inc(x_145);
lean::dec(x_139);
if (lean::is_scalar(x_132)) {
 x_148 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_148 = x_132;
}
lean::cnstr_set(x_148, 0, x_145);
x_149 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_149, 0, x_148);
x_124 = x_149;
goto lbl_125;
}
case 1:
{
obj* x_152; 
lean::dec(x_132);
lean::dec(x_139);
x_152 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_152);
x_124 = x_152;
goto lbl_125;
}
case 2:
{
obj* x_156; 
lean::dec(x_132);
lean::dec(x_139);
x_156 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_156);
x_124 = x_156;
goto lbl_125;
}
default:
{
obj* x_160; 
lean::dec(x_132);
lean::dec(x_139);
x_160 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_160);
x_124 = x_160;
goto lbl_125;
}
}
}
else
{
obj* x_165; 
lean::dec(x_141);
lean::dec(x_132);
lean::dec(x_139);
x_165 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_165);
x_124 = x_165;
goto lbl_125;
}
}
}
lbl_125:
{
obj* x_167; 
if (lean::obj_tag(x_115) == 0)
{
obj* x_170; 
lean::dec(x_115);
x_170 = lean::box(3);
x_167 = x_170;
goto lbl_168;
}
else
{
obj* x_171; 
x_171 = lean::cnstr_get(x_115, 0);
lean::inc(x_171);
lean::dec(x_115);
x_167 = x_171;
goto lbl_168;
}
lbl_168:
{
obj* x_174; 
x_174 = l_lean_parser_syntax_as__node___main(x_167);
if (lean::obj_tag(x_174) == 0)
{
obj* x_176; obj* x_178; 
lean::dec(x_174);
x_176 = l_lean_parser_term_match_has__view_x_27___lambda__1___closed__1;
lean::inc(x_176);
x_178 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_178, 0, x_20);
lean::cnstr_set(x_178, 1, x_41);
lean::cnstr_set(x_178, 2, x_63);
lean::cnstr_set(x_178, 3, x_103);
lean::cnstr_set(x_178, 4, x_124);
lean::cnstr_set(x_178, 5, x_176);
return x_178;
}
else
{
obj* x_179; obj* x_182; obj* x_185; obj* x_186; 
x_179 = lean::cnstr_get(x_174, 0);
lean::inc(x_179);
lean::dec(x_174);
x_182 = lean::cnstr_get(x_179, 1);
lean::inc(x_182);
lean::dec(x_179);
x_185 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_match_has__view_x_27___spec__2(x_182);
x_186 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_186, 0, x_20);
lean::cnstr_set(x_186, 1, x_41);
lean::cnstr_set(x_186, 2, x_63);
lean::cnstr_set(x_186, 3, x_103);
lean::cnstr_set(x_186, 4, x_124);
lean::cnstr_set(x_186, 5, x_185);
return x_186;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_match_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_0 = l_lean_parser_term_match__equation_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::box(0);
lean::inc(x_5);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_4);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_5);
return x_8;
}
}
obj* _init_l_lean_parser_term_match_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_19:
{
obj* x_26; obj* x_28; 
x_28 = l_lean_parser_syntax_as__node___main(x_18);
if (lean::obj_tag(x_28) == 0)
{
obj* x_30; 
lean::dec(x_28);
x_30 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
lean::inc(x_30);
x_26 = x_30;
goto lbl_27;
}
else
{
obj* x_32; obj* x_35; obj* x_38; 
x_32 = lean::cnstr_get(x_28, 0);
lean::inc(x_32);
lean::dec(x_28);
x_35 = lean::cnstr_get(x_32, 1);
lean::inc(x_35);
lean::dec(x_32);
x_38 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_35);
x_26 = x_38;
goto lbl_27;
}
lbl_27:
{
obj* x_39; obj* x_40; 
if (lean::obj_tag(x_17) == 0)
{
obj* x_42; 
x_42 = lean::box(3);
x_39 = x_17;
x_40 = x_42;
goto lbl_41;
}
else
{
obj* x_43; obj* x_45; 
x_43 = lean::cnstr_get(x_17, 0);
lean::inc(x_43);
x_45 = lean::cnstr_get(x_17, 1);
lean::inc(x_45);
lean::dec(x_17);
x_39 = x_45;
x_40 = x_43;
goto lbl_41;
}
lbl_41:
{
obj* x_48; obj* x_50; 
x_50 = l_lean_parser_syntax_as__node___main(x_40);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; 
lean::dec(x_50);
x_52 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_52);
x_48 = x_52;
goto lbl_49;
}
else
{
obj* x_54; obj* x_56; obj* x_57; 
x_54 = lean::cnstr_get(x_50, 0);
lean::inc(x_54);
if (lean::is_shared(x_50)) {
 lean::dec(x_50);
 x_56 = lean::box(0);
} else {
 lean::cnstr_release(x_50, 0);
 x_56 = x_50;
}
x_57 = lean::cnstr_get(x_54, 1);
lean::inc(x_57);
lean::dec(x_54);
if (lean::obj_tag(x_57) == 0)
{
obj* x_62; 
lean::dec(x_56);
lean::dec(x_57);
x_62 = lean::box(0);
x_48 = x_62;
goto lbl_49;
}
else
{
obj* x_63; obj* x_65; 
x_63 = lean::cnstr_get(x_57, 0);
lean::inc(x_63);
x_65 = lean::cnstr_get(x_57, 1);
lean::inc(x_65);
lean::dec(x_57);
if (lean::obj_tag(x_65) == 0)
{
obj* x_69; obj* x_70; obj* x_72; obj* x_73; 
lean::dec(x_65);
x_69 = l_lean_parser_term_type__spec_has__view;
x_70 = lean::cnstr_get(x_69, 0);
lean::inc(x_70);
x_72 = lean::apply_1(x_70, x_63);
if (lean::is_scalar(x_56)) {
 x_73 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_73 = x_56;
}
lean::cnstr_set(x_73, 0, x_72);
x_48 = x_73;
goto lbl_49;
}
else
{
obj* x_77; 
lean::dec(x_63);
lean::dec(x_65);
lean::dec(x_56);
x_77 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_77);
x_48 = x_77;
goto lbl_49;
}
}
}
lbl_49:
{
obj* x_79; obj* x_80; 
if (lean::obj_tag(x_39) == 0)
{
obj* x_82; 
x_82 = lean::box(3);
x_79 = x_39;
x_80 = x_82;
goto lbl_81;
}
else
{
obj* x_83; obj* x_85; 
x_83 = lean::cnstr_get(x_39, 0);
lean::inc(x_83);
x_85 = lean::cnstr_get(x_39, 1);
lean::inc(x_85);
lean::dec(x_39);
x_79 = x_85;
x_80 = x_83;
goto lbl_81;
}
lbl_81:
{
obj* x_88; 
switch (lean::obj_tag(x_80)) {
case 0:
{
obj* x_90; obj* x_93; 
x_90 = lean::cnstr_get(x_80, 0);
lean::inc(x_90);
lean::dec(x_80);
x_93 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_93, 0, x_90);
x_88 = x_93;
goto lbl_89;
}
case 1:
{
obj* x_95; 
lean::dec(x_80);
x_95 = lean::box(0);
x_88 = x_95;
goto lbl_89;
}
case 2:
{
obj* x_97; 
lean::dec(x_80);
x_97 = lean::box(0);
x_88 = x_97;
goto lbl_89;
}
default:
{
obj* x_99; 
lean::dec(x_80);
x_99 = lean::box(0);
x_88 = x_99;
goto lbl_89;
}
}
lbl_89:
{
obj* x_100; obj* x_101; 
if (lean::obj_tag(x_79) == 0)
{
obj* x_103; 
x_103 = lean::box(3);
x_100 = x_79;
x_101 = x_103;
goto lbl_102;
}
else
{
obj* x_104; obj* x_106; 
x_104 = lean::cnstr_get(x_79, 0);
lean::inc(x_104);
x_106 = lean::cnstr_get(x_79, 1);
lean::inc(x_106);
lean::dec(x_79);
x_100 = x_106;
x_101 = x_104;
goto lbl_102;
}
lbl_102:
{
obj* x_109; obj* x_111; 
x_111 = l_lean_parser_syntax_as__node___main(x_101);
if (lean::obj_tag(x_111) == 0)
{
obj* x_113; 
lean::dec(x_111);
x_113 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_113);
x_109 = x_113;
goto lbl_110;
}
else
{
obj* x_115; obj* x_117; obj* x_118; 
x_115 = lean::cnstr_get(x_111, 0);
lean::inc(x_115);
if (lean::is_shared(x_111)) {
 lean::dec(x_111);
 x_117 = lean::box(0);
} else {
 lean::cnstr_release(x_111, 0);
 x_117 = x_111;
}
x_118 = lean::cnstr_get(x_115, 1);
lean::inc(x_118);
lean::dec(x_115);
if (lean::obj_tag(x_118) == 0)
{
obj* x_123; 
lean::dec(x_118);
lean::dec(x_117);
x_123 = lean::box(0);
x_109 = x_123;
goto lbl_110;
}
else
{
obj* x_124; obj* x_126; 
x_124 = lean::cnstr_get(x_118, 0);
lean::inc(x_124);
x_126 = lean::cnstr_get(x_118, 1);
lean::inc(x_126);
lean::dec(x_118);
if (lean::obj_tag(x_126) == 0)
{
lean::dec(x_126);
switch (lean::obj_tag(x_124)) {
case 0:
{
obj* x_130; obj* x_133; obj* x_134; 
x_130 = lean::cnstr_get(x_124, 0);
lean::inc(x_130);
lean::dec(x_124);
if (lean::is_scalar(x_117)) {
 x_133 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_133 = x_117;
}
lean::cnstr_set(x_133, 0, x_130);
x_134 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_134, 0, x_133);
x_109 = x_134;
goto lbl_110;
}
case 1:
{
obj* x_137; 
lean::dec(x_117);
lean::dec(x_124);
x_137 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_137);
x_109 = x_137;
goto lbl_110;
}
case 2:
{
obj* x_141; 
lean::dec(x_117);
lean::dec(x_124);
x_141 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_141);
x_109 = x_141;
goto lbl_110;
}
default:
{
obj* x_145; 
lean::dec(x_117);
lean::dec(x_124);
x_145 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_145);
x_109 = x_145;
goto lbl_110;
}
}
}
else
{
obj* x_150; 
lean::dec(x_117);
lean::dec(x_124);
lean::dec(x_126);
x_150 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_150);
x_109 = x_150;
goto lbl_110;
}
}
}
lbl_110:
{
obj* x_152; 
if (lean::obj_tag(x_100) == 0)
{
obj* x_155; 
lean::dec(x_100);
x_155 = lean::box(3);
x_152 = x_155;
goto lbl_153;
}
else
{
obj* x_156; 
x_156 = lean::cnstr_get(x_100, 0);
lean::inc(x_156);
lean::dec(x_100);
x_152 = x_156;
goto lbl_153;
}
lbl_153:
{
obj* x_159; 
x_159 = l_lean_parser_syntax_as__node___main(x_152);
if (lean::obj_tag(x_159) == 0)
{
obj* x_161; obj* x_163; 
lean::dec(x_159);
x_161 = l_lean_parser_term_match_has__view_x_27___lambda__1___closed__1;
lean::inc(x_161);
x_163 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_163, 0, x_5);
lean::cnstr_set(x_163, 1, x_26);
lean::cnstr_set(x_163, 2, x_48);
lean::cnstr_set(x_163, 3, x_88);
lean::cnstr_set(x_163, 4, x_109);
lean::cnstr_set(x_163, 5, x_161);
return x_163;
}
else
{
obj* x_164; obj* x_167; obj* x_170; obj* x_171; 
x_164 = lean::cnstr_get(x_159, 0);
lean::inc(x_164);
lean::dec(x_159);
x_167 = lean::cnstr_get(x_164, 1);
lean::inc(x_167);
lean::dec(x_164);
x_170 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_match_has__view_x_27___spec__2(x_167);
x_171 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_171, 0, x_5);
lean::cnstr_set(x_171, 1, x_26);
lean::cnstr_set(x_171, 2, x_48);
lean::cnstr_set(x_171, 3, x_88);
lean::cnstr_set(x_171, 4, x_109);
lean::cnstr_set(x_171, 5, x_170);
return x_171;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_match_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_14; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_28; obj* x_29; obj* x_30; obj* x_32; obj* x_33; obj* x_35; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
lean::dec(x_0);
x_14 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_14);
x_16 = l_option_map___rarg(x_14, x_1);
x_17 = lean::box(3);
lean::inc(x_17);
x_19 = l_option_get__or__else___main___rarg(x_16, x_17);
x_20 = l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__3(x_3);
x_21 = l_list_join___main___rarg(x_20);
x_22 = l_lean_parser_no__kind;
lean::inc(x_22);
x_24 = l_lean_parser_syntax_mk__node(x_22, x_21);
lean::inc(x_14);
x_26 = l_option_map___rarg(x_14, x_7);
lean::inc(x_17);
x_28 = l_option_get__or__else___main___rarg(x_26, x_17);
x_29 = l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__4(x_11);
x_30 = l_list_join___main___rarg(x_29);
lean::inc(x_22);
x_32 = l_lean_parser_syntax_mk__node(x_22, x_30);
x_33 = lean::box(0);
lean::inc(x_33);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_32);
lean::cnstr_set(x_35, 1, x_33);
if (lean::obj_tag(x_5) == 0)
{
lean::dec(x_5);
if (lean::obj_tag(x_9) == 0)
{
obj* x_40; obj* x_42; obj* x_43; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_50; 
lean::dec(x_17);
lean::dec(x_9);
lean::dec(x_33);
x_40 = l_lean_parser_combinators_many___rarg___closed__1;
lean::inc(x_40);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_40);
lean::cnstr_set(x_42, 1, x_35);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_28);
lean::cnstr_set(x_43, 1, x_42);
lean::inc(x_40);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_40);
lean::cnstr_set(x_45, 1, x_43);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_24);
lean::cnstr_set(x_46, 1, x_45);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_19);
lean::cnstr_set(x_47, 1, x_46);
x_48 = l_lean_parser_term_match;
lean::inc(x_48);
x_50 = l_lean_parser_syntax_mk__node(x_48, x_47);
return x_50;
}
else
{
obj* x_51; obj* x_55; obj* x_56; obj* x_57; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_69; 
x_51 = lean::cnstr_get(x_9, 0);
lean::inc(x_51);
lean::dec(x_9);
lean::inc(x_14);
x_55 = l_option_map___rarg(x_14, x_51);
x_56 = l_option_get__or__else___main___rarg(x_55, x_17);
x_57 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_57, 0, x_56);
lean::cnstr_set(x_57, 1, x_33);
lean::inc(x_22);
x_59 = l_lean_parser_syntax_mk__node(x_22, x_57);
x_60 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_60, 0, x_59);
lean::cnstr_set(x_60, 1, x_35);
x_61 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_61, 0, x_28);
lean::cnstr_set(x_61, 1, x_60);
x_62 = l_lean_parser_combinators_many___rarg___closed__1;
lean::inc(x_62);
x_64 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_64, 0, x_62);
lean::cnstr_set(x_64, 1, x_61);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_24);
lean::cnstr_set(x_65, 1, x_64);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_19);
lean::cnstr_set(x_66, 1, x_65);
x_67 = l_lean_parser_term_match;
lean::inc(x_67);
x_69 = l_lean_parser_syntax_mk__node(x_67, x_66);
return x_69;
}
}
else
{
obj* x_70; obj* x_73; obj* x_74; obj* x_76; obj* x_78; obj* x_80; 
x_70 = lean::cnstr_get(x_5, 0);
lean::inc(x_70);
lean::dec(x_5);
x_73 = l_lean_parser_term_type__spec_has__view;
x_74 = lean::cnstr_get(x_73, 1);
lean::inc(x_74);
x_76 = lean::apply_1(x_74, x_70);
lean::inc(x_33);
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_76);
lean::cnstr_set(x_78, 1, x_33);
lean::inc(x_22);
x_80 = l_lean_parser_syntax_mk__node(x_22, x_78);
if (lean::obj_tag(x_9) == 0)
{
obj* x_84; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_93; 
lean::dec(x_17);
lean::dec(x_9);
lean::dec(x_33);
x_84 = l_lean_parser_combinators_many___rarg___closed__1;
lean::inc(x_84);
x_86 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_86, 0, x_84);
lean::cnstr_set(x_86, 1, x_35);
x_87 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_87, 0, x_28);
lean::cnstr_set(x_87, 1, x_86);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_80);
lean::cnstr_set(x_88, 1, x_87);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_24);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_19);
lean::cnstr_set(x_90, 1, x_89);
x_91 = l_lean_parser_term_match;
lean::inc(x_91);
x_93 = l_lean_parser_syntax_mk__node(x_91, x_90);
return x_93;
}
else
{
obj* x_94; obj* x_98; obj* x_99; obj* x_100; obj* x_102; obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_110; 
x_94 = lean::cnstr_get(x_9, 0);
lean::inc(x_94);
lean::dec(x_9);
lean::inc(x_14);
x_98 = l_option_map___rarg(x_14, x_94);
x_99 = l_option_get__or__else___main___rarg(x_98, x_17);
x_100 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_100, 0, x_99);
lean::cnstr_set(x_100, 1, x_33);
lean::inc(x_22);
x_102 = l_lean_parser_syntax_mk__node(x_22, x_100);
x_103 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_103, 0, x_102);
lean::cnstr_set(x_103, 1, x_35);
x_104 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_104, 0, x_28);
lean::cnstr_set(x_104, 1, x_103);
x_105 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_105, 0, x_80);
lean::cnstr_set(x_105, 1, x_104);
x_106 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_106, 0, x_24);
lean::cnstr_set(x_106, 1, x_105);
x_107 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_107, 0, x_19);
lean::cnstr_set(x_107, 1, x_106);
x_108 = l_lean_parser_term_match;
lean::inc(x_108);
x_110 = l_lean_parser_syntax_mk__node(x_108, x_107);
return x_110;
}
}
}
}
obj* l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1(obj* x_0, obj* x_1, unsigned char x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; unsigned char x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_23; obj* x_24; 
x_8 = lean::string_iterator_remaining(x_6);
x_9 = lean::box(0);
x_10 = lean::mk_nat_obj(1u);
x_11 = lean::nat_add(x_8, x_10);
lean::dec(x_10);
lean::dec(x_8);
x_14 = 0;
x_15 = l___private_4028586963__sep__by__aux___main___at_lean_parser_term_paren_parser___spec__2(x_0, x_1, x_2, x_14, x_9, x_11, x_3, x_4, x_5, x_6, x_7);
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_15, 1);
lean::inc(x_18);
if (lean::is_shared(x_15)) {
 lean::dec(x_15);
 x_20 = lean::box(0);
} else {
 lean::cnstr_release(x_15, 0);
 lean::cnstr_release(x_15, 1);
 x_20 = x_15;
}
x_21 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_21);
x_23 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_16);
if (lean::is_scalar(x_20)) {
 x_24 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_24 = x_20;
}
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_18);
return x_24;
}
}
obj* l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_match_has__view_x_27___spec__2(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_7 = x_0;
}
if (lean::obj_tag(x_5) == 0)
{
obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_16; 
lean::dec(x_5);
x_9 = l_lean_parser_term_match__equation_has__view;
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
x_12 = lean::apply_1(x_10, x_3);
x_13 = lean::box(0);
lean::inc(x_13);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_12);
lean::cnstr_set(x_15, 1, x_13);
if (lean::is_scalar(x_7)) {
 x_16 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_16 = x_7;
}
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_13);
return x_16;
}
else
{
obj* x_17; obj* x_19; obj* x_22; obj* x_23; obj* x_25; obj* x_26; 
x_17 = lean::cnstr_get(x_5, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_5, 1);
lean::inc(x_19);
lean::dec(x_5);
x_22 = l_lean_parser_term_match__equation_has__view;
x_23 = lean::cnstr_get(x_22, 0);
lean::inc(x_23);
x_25 = lean::apply_1(x_23, x_3);
x_26 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_match_has__view_x_27___spec__2(x_19);
switch (lean::obj_tag(x_17)) {
case 0:
{
obj* x_27; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_27 = lean::cnstr_get(x_17, 0);
lean::inc(x_27);
lean::dec(x_17);
x_30 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_30, 0, x_27);
x_31 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_31, 0, x_30);
x_32 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_32, 0, x_25);
lean::cnstr_set(x_32, 1, x_31);
if (lean::is_scalar(x_7)) {
 x_33 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_33 = x_7;
}
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_26);
return x_33;
}
case 1:
{
obj* x_35; obj* x_37; obj* x_38; 
lean::dec(x_17);
x_35 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_25);
lean::cnstr_set(x_37, 1, x_35);
if (lean::is_scalar(x_7)) {
 x_38 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_38 = x_7;
}
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_26);
return x_38;
}
case 2:
{
obj* x_40; obj* x_42; obj* x_43; 
lean::dec(x_17);
x_40 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_40);
x_42 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_42, 0, x_25);
lean::cnstr_set(x_42, 1, x_40);
if (lean::is_scalar(x_7)) {
 x_43 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_43 = x_7;
}
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_26);
return x_43;
}
default:
{
obj* x_45; obj* x_47; obj* x_48; 
lean::dec(x_17);
x_45 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_45);
x_47 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_47, 0, x_25);
lean::cnstr_set(x_47, 1, x_45);
if (lean::is_scalar(x_7)) {
 x_48 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_48 = x_7;
}
lean::cnstr_set(x_48, 0, x_47);
lean::cnstr_set(x_48, 1, x_26);
return x_48;
}
}
}
}
}
}
obj* l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__3(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_8; obj* x_10; obj* x_13; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_7 = x_0;
}
x_8 = lean::cnstr_get(x_3, 0);
lean::inc(x_8);
x_10 = lean::cnstr_get(x_3, 1);
lean::inc(x_10);
lean::dec(x_3);
x_13 = l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__3(x_5);
if (lean::obj_tag(x_10) == 0)
{
obj* x_15; obj* x_16; obj* x_17; 
lean::dec(x_10);
x_15 = lean::box(0);
if (lean::is_scalar(x_7)) {
 x_16 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_16 = x_7;
}
lean::cnstr_set(x_16, 0, x_8);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_13);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_18 = lean::cnstr_get(x_10, 0);
lean::inc(x_18);
lean::dec(x_10);
x_21 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_21);
x_23 = l_option_map___rarg(x_21, x_18);
x_24 = lean::box(3);
x_25 = l_option_get__or__else___main___rarg(x_23, x_24);
x_26 = lean::box(0);
if (lean::is_scalar(x_7)) {
 x_27 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_27 = x_7;
}
lean::cnstr_set(x_27, 0, x_25);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_8);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_13);
return x_29;
}
}
}
}
obj* l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__4(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_8; obj* x_10; obj* x_13; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_7 = x_0;
}
x_8 = lean::cnstr_get(x_3, 0);
lean::inc(x_8);
x_10 = lean::cnstr_get(x_3, 1);
lean::inc(x_10);
lean::dec(x_3);
x_13 = l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__4(x_5);
if (lean::obj_tag(x_10) == 0)
{
obj* x_15; obj* x_16; obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
lean::dec(x_10);
x_15 = l_lean_parser_term_match__equation_has__view;
x_16 = lean::cnstr_get(x_15, 1);
lean::inc(x_16);
x_18 = lean::apply_1(x_16, x_8);
x_19 = lean::box(0);
if (lean::is_scalar(x_7)) {
 x_20 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_20 = x_7;
}
lean::cnstr_set(x_20, 0, x_18);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_13);
return x_21;
}
else
{
obj* x_22; obj* x_25; obj* x_26; obj* x_28; obj* x_29; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; 
x_22 = lean::cnstr_get(x_10, 0);
lean::inc(x_22);
lean::dec(x_10);
x_25 = l_lean_parser_term_match__equation_has__view;
x_26 = lean::cnstr_get(x_25, 1);
lean::inc(x_26);
x_28 = lean::apply_1(x_26, x_8);
x_29 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_29);
x_31 = l_option_map___rarg(x_29, x_22);
x_32 = lean::box(3);
x_33 = l_option_get__or__else___main___rarg(x_31, x_32);
x_34 = lean::box(0);
if (lean::is_scalar(x_7)) {
 x_35 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_35 = x_7;
}
lean::cnstr_set(x_35, 0, x_33);
lean::cnstr_set(x_35, 1, x_34);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_28);
lean::cnstr_set(x_36, 1, x_35);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_13);
return x_37;
}
}
}
}
obj* l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
unsigned char x_8; obj* x_9; 
x_8 = lean::unbox(x_2);
x_9 = l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1(x_0, x_1, x_8, x_3, x_4, x_5, x_6, x_7);
return x_9;
}
}
obj* _init_l_lean_parser_term_match_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_match_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_match_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_match;
x_6 = l_lean_parser_term_match_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_match_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_14; unsigned char x_15; obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_29; obj* x_31; obj* x_33; obj* x_34; obj* x_35; obj* x_37; obj* x_38; obj* x_39; obj* x_41; obj* x_42; obj* x_44; obj* x_45; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; 
x_0 = lean::mk_string("match ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
lean::inc(x_4);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_8, 0, x_4);
x_9 = lean::mk_string(", ");
x_10 = l_string_trim(x_9);
lean::inc(x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_12, 0, x_10);
lean::inc(x_4);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_14, 0, x_10);
lean::closure_set(x_14, 1, x_4);
lean::closure_set(x_14, 2, x_12);
x_15 = 0;
x_16 = lean::box(x_15);
lean::inc(x_16);
lean::inc(x_8);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1___boxed), 8, 3);
lean::closure_set(x_19, 0, x_8);
lean::closure_set(x_19, 1, x_14);
lean::closure_set(x_19, 2, x_16);
x_20 = lean::mk_string(" with ");
x_21 = l_string_trim(x_20);
lean::inc(x_21);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_23, 0, x_21);
lean::inc(x_4);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_25, 0, x_21);
lean::closure_set(x_25, 1, x_4);
lean::closure_set(x_25, 2, x_23);
x_26 = lean::mk_string(" | ");
x_27 = l_string_trim(x_26);
lean::inc(x_27);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_29, 0, x_27);
lean::inc(x_4);
x_31 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_31, 0, x_27);
lean::closure_set(x_31, 1, x_4);
lean::closure_set(x_31, 2, x_29);
lean::inc(x_31);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_33, 0, x_31);
x_34 = lean::mk_string(":=");
x_35 = l_string_trim(x_34);
lean::inc(x_35);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_37, 0, x_35);
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_38, 0, x_35);
lean::closure_set(x_38, 1, x_4);
lean::closure_set(x_38, 2, x_37);
x_39 = lean::box(0);
lean::inc(x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_8);
lean::cnstr_set(x_41, 1, x_39);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_38);
lean::cnstr_set(x_42, 1, x_41);
lean::inc(x_19);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_19);
lean::cnstr_set(x_44, 1, x_42);
x_45 = l_lean_parser_term_match__equation;
lean::inc(x_45);
x_47 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_47, 0, x_45);
lean::closure_set(x_47, 1, x_44);
x_48 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1___boxed), 8, 3);
lean::closure_set(x_48, 0, x_47);
lean::closure_set(x_48, 1, x_31);
lean::closure_set(x_48, 2, x_16);
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_48);
lean::cnstr_set(x_49, 1, x_39);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_33);
lean::cnstr_set(x_50, 1, x_49);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_25);
lean::cnstr_set(x_51, 1, x_50);
x_52 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_52);
lean::cnstr_set(x_53, 1, x_51);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_19);
lean::cnstr_set(x_54, 1, x_53);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_6);
lean::cnstr_set(x_55, 1, x_54);
return x_55;
}
}
obj* _init_l_lean_parser_term_match_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_14; unsigned char x_15; obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_29; obj* x_31; obj* x_33; obj* x_34; obj* x_35; obj* x_37; obj* x_38; obj* x_39; obj* x_41; obj* x_42; obj* x_44; obj* x_45; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_68; 
x_0 = lean::mk_string("match ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
lean::inc(x_4);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_8, 0, x_4);
x_9 = lean::mk_string(", ");
x_10 = l_string_trim(x_9);
lean::inc(x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_12, 0, x_10);
lean::inc(x_4);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_14, 0, x_10);
lean::closure_set(x_14, 1, x_4);
lean::closure_set(x_14, 2, x_12);
x_15 = 0;
x_16 = lean::box(x_15);
lean::inc(x_16);
lean::inc(x_8);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1___boxed), 8, 3);
lean::closure_set(x_19, 0, x_8);
lean::closure_set(x_19, 1, x_14);
lean::closure_set(x_19, 2, x_16);
x_20 = lean::mk_string(" with ");
x_21 = l_string_trim(x_20);
lean::inc(x_21);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_23, 0, x_21);
lean::inc(x_4);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_25, 0, x_21);
lean::closure_set(x_25, 1, x_4);
lean::closure_set(x_25, 2, x_23);
x_26 = lean::mk_string(" | ");
x_27 = l_string_trim(x_26);
lean::inc(x_27);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_29, 0, x_27);
lean::inc(x_4);
x_31 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_31, 0, x_27);
lean::closure_set(x_31, 1, x_4);
lean::closure_set(x_31, 2, x_29);
lean::inc(x_31);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_33, 0, x_31);
x_34 = lean::mk_string(":=");
x_35 = l_string_trim(x_34);
lean::inc(x_35);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_37, 0, x_35);
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_38, 0, x_35);
lean::closure_set(x_38, 1, x_4);
lean::closure_set(x_38, 2, x_37);
x_39 = lean::box(0);
lean::inc(x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_8);
lean::cnstr_set(x_41, 1, x_39);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_38);
lean::cnstr_set(x_42, 1, x_41);
lean::inc(x_19);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_19);
lean::cnstr_set(x_44, 1, x_42);
x_45 = l_lean_parser_term_match__equation;
lean::inc(x_45);
x_47 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_47, 0, x_45);
lean::closure_set(x_47, 1, x_44);
x_48 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1___boxed), 8, 3);
lean::closure_set(x_48, 0, x_47);
lean::closure_set(x_48, 1, x_31);
lean::closure_set(x_48, 2, x_16);
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_48);
lean::cnstr_set(x_49, 1, x_39);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_33);
lean::cnstr_set(x_50, 1, x_49);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_25);
lean::cnstr_set(x_51, 1, x_50);
x_52 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_52);
lean::cnstr_set(x_53, 1, x_51);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_19);
lean::cnstr_set(x_54, 1, x_53);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_6);
lean::cnstr_set(x_55, 1, x_54);
x_56 = l_lean_parser_term__parser__m_monad;
x_57 = l_lean_parser_term__parser__m_monad__except;
x_58 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_59 = l_lean_parser_term__parser__m_alternative;
x_60 = l_lean_parser_term_match;
x_61 = l_lean_parser_term_match_has__view;
lean::inc(x_61);
lean::inc(x_60);
lean::inc(x_59);
lean::inc(x_58);
lean::inc(x_57);
lean::inc(x_56);
x_68 = l_lean_parser_combinators_node_view___rarg(x_56, x_57, x_58, x_59, x_60, x_55, x_61);
return x_68;
}
}
obj* _init_l_lean_parser_term_match_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_34; obj* x_35; obj* x_36; obj* x_37; 
x_0 = lean::mk_string("match ");
x_1 = lean::mk_nat_obj(0u);
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::mk_string(", ");
lean::inc(x_1);
x_6 = l_lean_parser_symbol_tokens___rarg(x_4, x_1);
x_7 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_7);
x_9 = l_lean_parser_combinators_sep__by1_tokens___rarg(x_7, x_6);
x_10 = lean::mk_string(" with ");
lean::inc(x_1);
x_12 = l_lean_parser_symbol_tokens___rarg(x_10, x_1);
x_13 = lean::mk_string(" | ");
lean::inc(x_1);
x_15 = l_lean_parser_symbol_tokens___rarg(x_13, x_1);
lean::inc(x_15);
x_17 = l_lean_parser_tokens___rarg(x_15);
x_18 = lean::mk_string(":=");
x_19 = l_lean_parser_symbol_tokens___rarg(x_18, x_1);
x_20 = lean::box(0);
lean::inc(x_20);
lean::inc(x_7);
x_23 = l_lean_parser_list_cons_tokens___rarg(x_7, x_20);
x_24 = l_lean_parser_list_cons_tokens___rarg(x_19, x_23);
lean::inc(x_9);
x_26 = l_lean_parser_list_cons_tokens___rarg(x_9, x_24);
x_27 = l_lean_parser_tokens___rarg(x_26);
x_28 = l_lean_parser_combinators_sep__by1_tokens___rarg(x_27, x_15);
x_29 = l_lean_parser_list_cons_tokens___rarg(x_28, x_20);
x_30 = l_lean_parser_list_cons_tokens___rarg(x_17, x_29);
x_31 = l_lean_parser_list_cons_tokens___rarg(x_12, x_30);
x_32 = l_lean_parser_term_opt__type_parser_lean_parser_has__tokens;
lean::inc(x_32);
x_34 = l_lean_parser_list_cons_tokens___rarg(x_32, x_31);
x_35 = l_lean_parser_list_cons_tokens___rarg(x_9, x_34);
x_36 = l_lean_parser_list_cons_tokens___rarg(x_3, x_35);
x_37 = l_lean_parser_tokens___rarg(x_36);
return x_37;
}
}
obj* _init_l_lean_parser_term_if() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("if");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_if_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_if_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_if_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_if_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_if_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
x_35 = lean::box(3);
x_32 = x_1;
x_33 = x_35;
goto lbl_34;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_1, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
lean::dec(x_1);
x_32 = x_38;
x_33 = x_36;
goto lbl_34;
}
lbl_34:
{
obj* x_41; obj* x_43; 
x_43 = l_lean_parser_syntax_as__node___main(x_33);
if (lean::obj_tag(x_43) == 0)
{
obj* x_45; 
lean::dec(x_43);
x_45 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
lean::inc(x_45);
x_41 = x_45;
goto lbl_42;
}
else
{
obj* x_47; obj* x_49; obj* x_50; 
x_47 = lean::cnstr_get(x_43, 0);
lean::inc(x_47);
if (lean::is_shared(x_43)) {
 lean::dec(x_43);
 x_49 = lean::box(0);
} else {
 lean::cnstr_release(x_43, 0);
 x_49 = x_43;
}
x_50 = lean::cnstr_get(x_47, 1);
lean::inc(x_50);
lean::dec(x_47);
if (lean::obj_tag(x_50) == 0)
{
obj* x_55; 
lean::dec(x_49);
lean::dec(x_50);
x_55 = lean::box(0);
x_41 = x_55;
goto lbl_42;
}
else
{
obj* x_56; obj* x_58; 
x_56 = lean::cnstr_get(x_50, 0);
lean::inc(x_56);
x_58 = lean::cnstr_get(x_50, 1);
lean::inc(x_58);
lean::dec(x_50);
if (lean::obj_tag(x_58) == 0)
{
obj* x_62; obj* x_63; obj* x_65; obj* x_66; 
lean::dec(x_58);
x_62 = l_lean_parser_term_opt__ident_has__view;
x_63 = lean::cnstr_get(x_62, 0);
lean::inc(x_63);
x_65 = lean::apply_1(x_63, x_56);
if (lean::is_scalar(x_49)) {
 x_66 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_66 = x_49;
}
lean::cnstr_set(x_66, 0, x_65);
x_41 = x_66;
goto lbl_42;
}
else
{
obj* x_70; 
lean::dec(x_56);
lean::dec(x_58);
lean::dec(x_49);
x_70 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
lean::inc(x_70);
x_41 = x_70;
goto lbl_42;
}
}
}
lbl_42:
{
obj* x_72; obj* x_73; 
if (lean::obj_tag(x_32) == 0)
{
obj* x_75; 
x_75 = lean::box(3);
x_72 = x_32;
x_73 = x_75;
goto lbl_74;
}
else
{
obj* x_76; obj* x_78; 
x_76 = lean::cnstr_get(x_32, 0);
lean::inc(x_76);
x_78 = lean::cnstr_get(x_32, 1);
lean::inc(x_78);
lean::dec(x_32);
x_72 = x_78;
x_73 = x_76;
goto lbl_74;
}
lbl_74:
{
obj* x_81; obj* x_82; 
if (lean::obj_tag(x_72) == 0)
{
obj* x_84; 
x_84 = lean::box(3);
x_81 = x_72;
x_82 = x_84;
goto lbl_83;
}
else
{
obj* x_85; obj* x_87; 
x_85 = lean::cnstr_get(x_72, 0);
lean::inc(x_85);
x_87 = lean::cnstr_get(x_72, 1);
lean::inc(x_87);
lean::dec(x_72);
x_81 = x_87;
x_82 = x_85;
goto lbl_83;
}
lbl_83:
{
obj* x_90; 
switch (lean::obj_tag(x_82)) {
case 0:
{
obj* x_92; obj* x_95; 
x_92 = lean::cnstr_get(x_82, 0);
lean::inc(x_92);
lean::dec(x_82);
x_95 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_95, 0, x_92);
x_90 = x_95;
goto lbl_91;
}
case 1:
{
obj* x_97; 
lean::dec(x_82);
x_97 = lean::box(0);
x_90 = x_97;
goto lbl_91;
}
case 2:
{
obj* x_99; 
lean::dec(x_82);
x_99 = lean::box(0);
x_90 = x_99;
goto lbl_91;
}
default:
{
obj* x_101; 
lean::dec(x_82);
x_101 = lean::box(0);
x_90 = x_101;
goto lbl_91;
}
}
lbl_91:
{
obj* x_102; obj* x_103; 
if (lean::obj_tag(x_81) == 0)
{
obj* x_105; 
x_105 = lean::box(3);
x_102 = x_81;
x_103 = x_105;
goto lbl_104;
}
else
{
obj* x_106; obj* x_108; 
x_106 = lean::cnstr_get(x_81, 0);
lean::inc(x_106);
x_108 = lean::cnstr_get(x_81, 1);
lean::inc(x_108);
lean::dec(x_81);
x_102 = x_108;
x_103 = x_106;
goto lbl_104;
}
lbl_104:
{
if (lean::obj_tag(x_102) == 0)
{
obj* x_111; 
x_111 = lean::box(0);
if (lean::obj_tag(x_102) == 0)
{
obj* x_113; obj* x_114; 
lean::dec(x_102);
x_113 = lean::box(3);
x_114 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_114, 0, x_20);
lean::cnstr_set(x_114, 1, x_41);
lean::cnstr_set(x_114, 2, x_73);
lean::cnstr_set(x_114, 3, x_90);
lean::cnstr_set(x_114, 4, x_103);
lean::cnstr_set(x_114, 5, x_111);
lean::cnstr_set(x_114, 6, x_113);
return x_114;
}
else
{
obj* x_115; obj* x_118; 
x_115 = lean::cnstr_get(x_102, 0);
lean::inc(x_115);
lean::dec(x_102);
x_118 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_118, 0, x_20);
lean::cnstr_set(x_118, 1, x_41);
lean::cnstr_set(x_118, 2, x_73);
lean::cnstr_set(x_118, 3, x_90);
lean::cnstr_set(x_118, 4, x_103);
lean::cnstr_set(x_118, 5, x_111);
lean::cnstr_set(x_118, 6, x_115);
return x_118;
}
}
else
{
obj* x_119; obj* x_121; 
x_119 = lean::cnstr_get(x_102, 0);
lean::inc(x_119);
x_121 = lean::cnstr_get(x_102, 1);
lean::inc(x_121);
lean::dec(x_102);
switch (lean::obj_tag(x_119)) {
case 0:
{
obj* x_124; obj* x_127; 
x_124 = lean::cnstr_get(x_119, 0);
lean::inc(x_124);
lean::dec(x_119);
x_127 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_127, 0, x_124);
if (lean::obj_tag(x_121) == 0)
{
obj* x_129; obj* x_130; 
lean::dec(x_121);
x_129 = lean::box(3);
x_130 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_130, 0, x_20);
lean::cnstr_set(x_130, 1, x_41);
lean::cnstr_set(x_130, 2, x_73);
lean::cnstr_set(x_130, 3, x_90);
lean::cnstr_set(x_130, 4, x_103);
lean::cnstr_set(x_130, 5, x_127);
lean::cnstr_set(x_130, 6, x_129);
return x_130;
}
else
{
obj* x_131; obj* x_134; 
x_131 = lean::cnstr_get(x_121, 0);
lean::inc(x_131);
lean::dec(x_121);
x_134 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_134, 0, x_20);
lean::cnstr_set(x_134, 1, x_41);
lean::cnstr_set(x_134, 2, x_73);
lean::cnstr_set(x_134, 3, x_90);
lean::cnstr_set(x_134, 4, x_103);
lean::cnstr_set(x_134, 5, x_127);
lean::cnstr_set(x_134, 6, x_131);
return x_134;
}
}
case 1:
{
obj* x_136; 
lean::dec(x_119);
x_136 = lean::box(0);
if (lean::obj_tag(x_121) == 0)
{
obj* x_138; obj* x_139; 
lean::dec(x_121);
x_138 = lean::box(3);
x_139 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_139, 0, x_20);
lean::cnstr_set(x_139, 1, x_41);
lean::cnstr_set(x_139, 2, x_73);
lean::cnstr_set(x_139, 3, x_90);
lean::cnstr_set(x_139, 4, x_103);
lean::cnstr_set(x_139, 5, x_136);
lean::cnstr_set(x_139, 6, x_138);
return x_139;
}
else
{
obj* x_140; obj* x_143; 
x_140 = lean::cnstr_get(x_121, 0);
lean::inc(x_140);
lean::dec(x_121);
x_143 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_143, 0, x_20);
lean::cnstr_set(x_143, 1, x_41);
lean::cnstr_set(x_143, 2, x_73);
lean::cnstr_set(x_143, 3, x_90);
lean::cnstr_set(x_143, 4, x_103);
lean::cnstr_set(x_143, 5, x_136);
lean::cnstr_set(x_143, 6, x_140);
return x_143;
}
}
case 2:
{
obj* x_145; 
lean::dec(x_119);
x_145 = lean::box(0);
if (lean::obj_tag(x_121) == 0)
{
obj* x_147; obj* x_148; 
lean::dec(x_121);
x_147 = lean::box(3);
x_148 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_148, 0, x_20);
lean::cnstr_set(x_148, 1, x_41);
lean::cnstr_set(x_148, 2, x_73);
lean::cnstr_set(x_148, 3, x_90);
lean::cnstr_set(x_148, 4, x_103);
lean::cnstr_set(x_148, 5, x_145);
lean::cnstr_set(x_148, 6, x_147);
return x_148;
}
else
{
obj* x_149; obj* x_152; 
x_149 = lean::cnstr_get(x_121, 0);
lean::inc(x_149);
lean::dec(x_121);
x_152 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_152, 0, x_20);
lean::cnstr_set(x_152, 1, x_41);
lean::cnstr_set(x_152, 2, x_73);
lean::cnstr_set(x_152, 3, x_90);
lean::cnstr_set(x_152, 4, x_103);
lean::cnstr_set(x_152, 5, x_145);
lean::cnstr_set(x_152, 6, x_149);
return x_152;
}
}
default:
{
obj* x_154; 
lean::dec(x_119);
x_154 = lean::box(0);
if (lean::obj_tag(x_121) == 0)
{
obj* x_156; obj* x_157; 
lean::dec(x_121);
x_156 = lean::box(3);
x_157 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_157, 0, x_20);
lean::cnstr_set(x_157, 1, x_41);
lean::cnstr_set(x_157, 2, x_73);
lean::cnstr_set(x_157, 3, x_90);
lean::cnstr_set(x_157, 4, x_103);
lean::cnstr_set(x_157, 5, x_154);
lean::cnstr_set(x_157, 6, x_156);
return x_157;
}
else
{
obj* x_158; obj* x_161; 
x_158 = lean::cnstr_get(x_121, 0);
lean::inc(x_158);
lean::dec(x_121);
x_161 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_161, 0, x_20);
lean::cnstr_set(x_161, 1, x_41);
lean::cnstr_set(x_161, 2, x_73);
lean::cnstr_set(x_161, 3, x_90);
lean::cnstr_set(x_161, 4, x_103);
lean::cnstr_set(x_161, 5, x_154);
lean::cnstr_set(x_161, 6, x_158);
return x_161;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_if_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_19:
{
obj* x_26; obj* x_28; 
x_28 = l_lean_parser_syntax_as__node___main(x_18);
if (lean::obj_tag(x_28) == 0)
{
obj* x_30; 
lean::dec(x_28);
x_30 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
lean::inc(x_30);
x_26 = x_30;
goto lbl_27;
}
else
{
obj* x_32; obj* x_34; obj* x_35; 
x_32 = lean::cnstr_get(x_28, 0);
lean::inc(x_32);
if (lean::is_shared(x_28)) {
 lean::dec(x_28);
 x_34 = lean::box(0);
} else {
 lean::cnstr_release(x_28, 0);
 x_34 = x_28;
}
x_35 = lean::cnstr_get(x_32, 1);
lean::inc(x_35);
lean::dec(x_32);
if (lean::obj_tag(x_35) == 0)
{
obj* x_40; 
lean::dec(x_34);
lean::dec(x_35);
x_40 = lean::box(0);
x_26 = x_40;
goto lbl_27;
}
else
{
obj* x_41; obj* x_43; 
x_41 = lean::cnstr_get(x_35, 0);
lean::inc(x_41);
x_43 = lean::cnstr_get(x_35, 1);
lean::inc(x_43);
lean::dec(x_35);
if (lean::obj_tag(x_43) == 0)
{
obj* x_47; obj* x_48; obj* x_50; obj* x_51; 
lean::dec(x_43);
x_47 = l_lean_parser_term_opt__ident_has__view;
x_48 = lean::cnstr_get(x_47, 0);
lean::inc(x_48);
x_50 = lean::apply_1(x_48, x_41);
if (lean::is_scalar(x_34)) {
 x_51 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_51 = x_34;
}
lean::cnstr_set(x_51, 0, x_50);
x_26 = x_51;
goto lbl_27;
}
else
{
obj* x_55; 
lean::dec(x_43);
lean::dec(x_41);
lean::dec(x_34);
x_55 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
lean::inc(x_55);
x_26 = x_55;
goto lbl_27;
}
}
}
lbl_27:
{
obj* x_57; obj* x_58; 
if (lean::obj_tag(x_17) == 0)
{
obj* x_60; 
x_60 = lean::box(3);
x_57 = x_17;
x_58 = x_60;
goto lbl_59;
}
else
{
obj* x_61; obj* x_63; 
x_61 = lean::cnstr_get(x_17, 0);
lean::inc(x_61);
x_63 = lean::cnstr_get(x_17, 1);
lean::inc(x_63);
lean::dec(x_17);
x_57 = x_63;
x_58 = x_61;
goto lbl_59;
}
lbl_59:
{
obj* x_66; obj* x_67; 
if (lean::obj_tag(x_57) == 0)
{
obj* x_69; 
x_69 = lean::box(3);
x_66 = x_57;
x_67 = x_69;
goto lbl_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_57, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_57, 1);
lean::inc(x_72);
lean::dec(x_57);
x_66 = x_72;
x_67 = x_70;
goto lbl_68;
}
lbl_68:
{
obj* x_75; 
switch (lean::obj_tag(x_67)) {
case 0:
{
obj* x_77; obj* x_80; 
x_77 = lean::cnstr_get(x_67, 0);
lean::inc(x_77);
lean::dec(x_67);
x_80 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_80, 0, x_77);
x_75 = x_80;
goto lbl_76;
}
case 1:
{
obj* x_82; 
lean::dec(x_67);
x_82 = lean::box(0);
x_75 = x_82;
goto lbl_76;
}
case 2:
{
obj* x_84; 
lean::dec(x_67);
x_84 = lean::box(0);
x_75 = x_84;
goto lbl_76;
}
default:
{
obj* x_86; 
lean::dec(x_67);
x_86 = lean::box(0);
x_75 = x_86;
goto lbl_76;
}
}
lbl_76:
{
obj* x_87; obj* x_88; 
if (lean::obj_tag(x_66) == 0)
{
obj* x_90; 
x_90 = lean::box(3);
x_87 = x_66;
x_88 = x_90;
goto lbl_89;
}
else
{
obj* x_91; obj* x_93; 
x_91 = lean::cnstr_get(x_66, 0);
lean::inc(x_91);
x_93 = lean::cnstr_get(x_66, 1);
lean::inc(x_93);
lean::dec(x_66);
x_87 = x_93;
x_88 = x_91;
goto lbl_89;
}
lbl_89:
{
if (lean::obj_tag(x_87) == 0)
{
obj* x_96; 
x_96 = lean::box(0);
if (lean::obj_tag(x_87) == 0)
{
obj* x_98; obj* x_99; 
lean::dec(x_87);
x_98 = lean::box(3);
x_99 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_99, 0, x_5);
lean::cnstr_set(x_99, 1, x_26);
lean::cnstr_set(x_99, 2, x_58);
lean::cnstr_set(x_99, 3, x_75);
lean::cnstr_set(x_99, 4, x_88);
lean::cnstr_set(x_99, 5, x_96);
lean::cnstr_set(x_99, 6, x_98);
return x_99;
}
else
{
obj* x_100; obj* x_103; 
x_100 = lean::cnstr_get(x_87, 0);
lean::inc(x_100);
lean::dec(x_87);
x_103 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_103, 0, x_5);
lean::cnstr_set(x_103, 1, x_26);
lean::cnstr_set(x_103, 2, x_58);
lean::cnstr_set(x_103, 3, x_75);
lean::cnstr_set(x_103, 4, x_88);
lean::cnstr_set(x_103, 5, x_96);
lean::cnstr_set(x_103, 6, x_100);
return x_103;
}
}
else
{
obj* x_104; obj* x_106; 
x_104 = lean::cnstr_get(x_87, 0);
lean::inc(x_104);
x_106 = lean::cnstr_get(x_87, 1);
lean::inc(x_106);
lean::dec(x_87);
switch (lean::obj_tag(x_104)) {
case 0:
{
obj* x_109; obj* x_112; 
x_109 = lean::cnstr_get(x_104, 0);
lean::inc(x_109);
lean::dec(x_104);
x_112 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_112, 0, x_109);
if (lean::obj_tag(x_106) == 0)
{
obj* x_114; obj* x_115; 
lean::dec(x_106);
x_114 = lean::box(3);
x_115 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_115, 0, x_5);
lean::cnstr_set(x_115, 1, x_26);
lean::cnstr_set(x_115, 2, x_58);
lean::cnstr_set(x_115, 3, x_75);
lean::cnstr_set(x_115, 4, x_88);
lean::cnstr_set(x_115, 5, x_112);
lean::cnstr_set(x_115, 6, x_114);
return x_115;
}
else
{
obj* x_116; obj* x_119; 
x_116 = lean::cnstr_get(x_106, 0);
lean::inc(x_116);
lean::dec(x_106);
x_119 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_119, 0, x_5);
lean::cnstr_set(x_119, 1, x_26);
lean::cnstr_set(x_119, 2, x_58);
lean::cnstr_set(x_119, 3, x_75);
lean::cnstr_set(x_119, 4, x_88);
lean::cnstr_set(x_119, 5, x_112);
lean::cnstr_set(x_119, 6, x_116);
return x_119;
}
}
case 1:
{
obj* x_121; 
lean::dec(x_104);
x_121 = lean::box(0);
if (lean::obj_tag(x_106) == 0)
{
obj* x_123; obj* x_124; 
lean::dec(x_106);
x_123 = lean::box(3);
x_124 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_124, 0, x_5);
lean::cnstr_set(x_124, 1, x_26);
lean::cnstr_set(x_124, 2, x_58);
lean::cnstr_set(x_124, 3, x_75);
lean::cnstr_set(x_124, 4, x_88);
lean::cnstr_set(x_124, 5, x_121);
lean::cnstr_set(x_124, 6, x_123);
return x_124;
}
else
{
obj* x_125; obj* x_128; 
x_125 = lean::cnstr_get(x_106, 0);
lean::inc(x_125);
lean::dec(x_106);
x_128 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_128, 0, x_5);
lean::cnstr_set(x_128, 1, x_26);
lean::cnstr_set(x_128, 2, x_58);
lean::cnstr_set(x_128, 3, x_75);
lean::cnstr_set(x_128, 4, x_88);
lean::cnstr_set(x_128, 5, x_121);
lean::cnstr_set(x_128, 6, x_125);
return x_128;
}
}
case 2:
{
obj* x_130; 
lean::dec(x_104);
x_130 = lean::box(0);
if (lean::obj_tag(x_106) == 0)
{
obj* x_132; obj* x_133; 
lean::dec(x_106);
x_132 = lean::box(3);
x_133 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_133, 0, x_5);
lean::cnstr_set(x_133, 1, x_26);
lean::cnstr_set(x_133, 2, x_58);
lean::cnstr_set(x_133, 3, x_75);
lean::cnstr_set(x_133, 4, x_88);
lean::cnstr_set(x_133, 5, x_130);
lean::cnstr_set(x_133, 6, x_132);
return x_133;
}
else
{
obj* x_134; obj* x_137; 
x_134 = lean::cnstr_get(x_106, 0);
lean::inc(x_134);
lean::dec(x_106);
x_137 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_137, 0, x_5);
lean::cnstr_set(x_137, 1, x_26);
lean::cnstr_set(x_137, 2, x_58);
lean::cnstr_set(x_137, 3, x_75);
lean::cnstr_set(x_137, 4, x_88);
lean::cnstr_set(x_137, 5, x_130);
lean::cnstr_set(x_137, 6, x_134);
return x_137;
}
}
default:
{
obj* x_139; 
lean::dec(x_104);
x_139 = lean::box(0);
if (lean::obj_tag(x_106) == 0)
{
obj* x_141; obj* x_142; 
lean::dec(x_106);
x_141 = lean::box(3);
x_142 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_142, 0, x_5);
lean::cnstr_set(x_142, 1, x_26);
lean::cnstr_set(x_142, 2, x_58);
lean::cnstr_set(x_142, 3, x_75);
lean::cnstr_set(x_142, 4, x_88);
lean::cnstr_set(x_142, 5, x_139);
lean::cnstr_set(x_142, 6, x_141);
return x_142;
}
else
{
obj* x_143; obj* x_146; 
x_143 = lean::cnstr_get(x_106, 0);
lean::inc(x_143);
lean::dec(x_106);
x_146 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_146, 0, x_5);
lean::cnstr_set(x_146, 1, x_26);
lean::cnstr_set(x_146, 2, x_58);
lean::cnstr_set(x_146, 3, x_75);
lean::cnstr_set(x_146, 4, x_88);
lean::cnstr_set(x_146, 5, x_139);
lean::cnstr_set(x_146, 6, x_143);
return x_146;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_if_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_13; obj* x_16; obj* x_18; obj* x_19; obj* x_21; obj* x_23; obj* x_25; obj* x_27; obj* x_28; obj* x_29; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_0, 6);
lean::inc(x_13);
lean::dec(x_0);
x_16 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_16);
x_18 = l_option_map___rarg(x_16, x_1);
x_19 = lean::box(3);
lean::inc(x_19);
x_21 = l_option_get__or__else___main___rarg(x_18, x_19);
lean::inc(x_16);
x_23 = l_option_map___rarg(x_16, x_7);
lean::inc(x_19);
x_25 = l_option_get__or__else___main___rarg(x_23, x_19);
lean::inc(x_16);
x_27 = l_option_map___rarg(x_16, x_11);
x_28 = l_option_get__or__else___main___rarg(x_27, x_19);
x_29 = lean::box(0);
lean::inc(x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_13);
lean::cnstr_set(x_31, 1, x_29);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_28);
lean::cnstr_set(x_32, 1, x_31);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_9);
lean::cnstr_set(x_33, 1, x_32);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_25);
lean::cnstr_set(x_34, 1, x_33);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_5);
lean::cnstr_set(x_35, 1, x_34);
if (lean::obj_tag(x_3) == 0)
{
obj* x_38; obj* x_40; obj* x_41; obj* x_42; obj* x_44; 
lean::dec(x_3);
lean::dec(x_29);
x_38 = l_lean_parser_combinators_many___rarg___closed__1;
lean::inc(x_38);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_38);
lean::cnstr_set(x_40, 1, x_35);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_21);
lean::cnstr_set(x_41, 1, x_40);
x_42 = l_lean_parser_term_if;
lean::inc(x_42);
x_44 = l_lean_parser_syntax_mk__node(x_42, x_41);
return x_44;
}
else
{
obj* x_45; obj* x_48; obj* x_49; obj* x_51; obj* x_52; obj* x_53; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_60; 
x_45 = lean::cnstr_get(x_3, 0);
lean::inc(x_45);
lean::dec(x_3);
x_48 = l_lean_parser_term_opt__ident_has__view;
x_49 = lean::cnstr_get(x_48, 1);
lean::inc(x_49);
x_51 = lean::apply_1(x_49, x_45);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_29);
x_53 = l_lean_parser_no__kind;
lean::inc(x_53);
x_55 = l_lean_parser_syntax_mk__node(x_53, x_52);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_55);
lean::cnstr_set(x_56, 1, x_35);
x_57 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_57, 0, x_21);
lean::cnstr_set(x_57, 1, x_56);
x_58 = l_lean_parser_term_if;
lean::inc(x_58);
x_60 = l_lean_parser_syntax_mk__node(x_58, x_57);
return x_60;
}
}
}
obj* _init_l_lean_parser_term_if_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_if_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_if_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_if;
x_6 = l_lean_parser_term_if_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_if_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; 
x_0 = lean::mk_string("if ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
lean::inc(x_4);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_8, 0, x_4);
x_9 = lean::mk_string(" then ");
x_10 = l_string_trim(x_9);
lean::inc(x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_12, 0, x_10);
lean::inc(x_4);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_14, 0, x_10);
lean::closure_set(x_14, 1, x_4);
lean::closure_set(x_14, 2, x_12);
x_15 = lean::mk_string(" else ");
x_16 = l_string_trim(x_15);
lean::inc(x_16);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_18, 0, x_16);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_19, 0, x_16);
lean::closure_set(x_19, 1, x_4);
lean::closure_set(x_19, 2, x_18);
x_20 = lean::box(0);
lean::inc(x_8);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_8);
lean::cnstr_set(x_22, 1, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_19);
lean::cnstr_set(x_23, 1, x_22);
lean::inc(x_8);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_8);
lean::cnstr_set(x_25, 1, x_23);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_14);
lean::cnstr_set(x_26, 1, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_8);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_parser), 5, 0);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_27);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_6);
lean::cnstr_set(x_30, 1, x_29);
return x_30;
}
}
obj* _init_l_lean_parser_term_if_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_43; 
x_0 = lean::mk_string("if ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
lean::inc(x_4);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_8, 0, x_4);
x_9 = lean::mk_string(" then ");
x_10 = l_string_trim(x_9);
lean::inc(x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_12, 0, x_10);
lean::inc(x_4);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_14, 0, x_10);
lean::closure_set(x_14, 1, x_4);
lean::closure_set(x_14, 2, x_12);
x_15 = lean::mk_string(" else ");
x_16 = l_string_trim(x_15);
lean::inc(x_16);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_18, 0, x_16);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_19, 0, x_16);
lean::closure_set(x_19, 1, x_4);
lean::closure_set(x_19, 2, x_18);
x_20 = lean::box(0);
lean::inc(x_8);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_8);
lean::cnstr_set(x_22, 1, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_19);
lean::cnstr_set(x_23, 1, x_22);
lean::inc(x_8);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_8);
lean::cnstr_set(x_25, 1, x_23);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_14);
lean::cnstr_set(x_26, 1, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_8);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_parser), 5, 0);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_27);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_6);
lean::cnstr_set(x_30, 1, x_29);
x_31 = l_lean_parser_term__parser__m_monad;
x_32 = l_lean_parser_term__parser__m_monad__except;
x_33 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_34 = l_lean_parser_term__parser__m_alternative;
x_35 = l_lean_parser_term_if;
x_36 = l_lean_parser_term_if_has__view;
lean::inc(x_36);
lean::inc(x_35);
lean::inc(x_34);
lean::inc(x_33);
lean::inc(x_32);
lean::inc(x_31);
x_43 = l_lean_parser_combinators_node_view___rarg(x_31, x_32, x_33, x_34, x_35, x_30, x_36);
return x_43;
}
}
obj* _init_l_lean_parser_term_if_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_18; obj* x_19; obj* x_21; obj* x_22; obj* x_23; 
x_0 = lean::mk_string("if ");
x_1 = lean::mk_nat_obj(0u);
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::mk_string(" then ");
lean::inc(x_1);
x_6 = l_lean_parser_symbol_tokens___rarg(x_4, x_1);
x_7 = lean::mk_string(" else ");
x_8 = l_lean_parser_symbol_tokens___rarg(x_7, x_1);
x_9 = lean::box(0);
x_10 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_10);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_10, x_9);
x_13 = l_lean_parser_list_cons_tokens___rarg(x_8, x_12);
lean::inc(x_10);
x_15 = l_lean_parser_list_cons_tokens___rarg(x_10, x_13);
x_16 = l_lean_parser_list_cons_tokens___rarg(x_6, x_15);
lean::inc(x_10);
x_18 = l_lean_parser_list_cons_tokens___rarg(x_10, x_16);
x_19 = l_lean_parser_term_opt__ident_parser_lean_parser_has__tokens;
lean::inc(x_19);
x_21 = l_lean_parser_list_cons_tokens___rarg(x_19, x_18);
x_22 = l_lean_parser_list_cons_tokens___rarg(x_3, x_21);
x_23 = l_lean_parser_tokens___rarg(x_22);
return x_23;
}
}
obj* _init_l_lean_parser_term_struct__inst__type() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("struct_inst_type");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_struct__inst__type_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__2;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_23; 
lean::dec(x_2);
x_23 = lean::box(0);
x_20 = x_23;
goto lbl_21;
}
case 1:
{
obj* x_24; 
x_24 = lean::cnstr_get(x_2, 0);
lean::inc(x_24);
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_28; obj* x_29; 
lean::dec(x_1);
x_28 = lean::box(0);
x_29 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_29, 0, x_24);
lean::cnstr_set(x_29, 1, x_28);
return x_29;
}
else
{
obj* x_30; 
x_30 = lean::cnstr_get(x_1, 0);
lean::inc(x_30);
lean::dec(x_1);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_30, 0);
lean::inc(x_33);
lean::dec(x_30);
x_36 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_36, 0, x_33);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_24);
lean::cnstr_set(x_37, 1, x_36);
return x_37;
}
case 1:
{
obj* x_39; obj* x_40; 
lean::dec(x_30);
x_39 = lean::box(0);
x_40 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_40, 0, x_24);
lean::cnstr_set(x_40, 1, x_39);
return x_40;
}
case 2:
{
obj* x_42; obj* x_43; 
lean::dec(x_30);
x_42 = lean::box(0);
x_43 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_43, 0, x_24);
lean::cnstr_set(x_43, 1, x_42);
return x_43;
}
default:
{
obj* x_45; obj* x_46; 
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_24);
lean::cnstr_set(x_46, 1, x_45);
return x_46;
}
}
}
}
case 2:
{
obj* x_48; 
lean::dec(x_2);
x_48 = lean::box(0);
x_20 = x_48;
goto lbl_21;
}
default:
{
obj* x_50; 
lean::dec(x_2);
x_50 = lean::box(0);
x_20 = x_50;
goto lbl_21;
}
}
lbl_21:
{
lean::dec(x_20);
if (lean::obj_tag(x_1) == 0)
{
obj* x_53; 
lean::dec(x_1);
x_53 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
lean::inc(x_53);
return x_53;
}
else
{
obj* x_55; 
x_55 = lean::cnstr_get(x_1, 0);
lean::inc(x_55);
lean::dec(x_1);
switch (lean::obj_tag(x_55)) {
case 0:
{
obj* x_58; obj* x_61; obj* x_62; obj* x_64; 
x_58 = lean::cnstr_get(x_55, 0);
lean::inc(x_58);
lean::dec(x_55);
x_61 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_61, 0, x_58);
x_62 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_62);
x_64 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_64, 0, x_62);
lean::cnstr_set(x_64, 1, x_61);
return x_64;
}
case 1:
{
obj* x_66; 
lean::dec(x_55);
x_66 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
lean::inc(x_66);
return x_66;
}
case 2:
{
obj* x_69; 
lean::dec(x_55);
x_69 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
lean::inc(x_69);
return x_69;
}
default:
{
obj* x_72; 
lean::dec(x_55);
x_72 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
lean::inc(x_72);
return x_72;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_5; obj* x_9; obj* x_10; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
lean::inc(x_0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_1);
lean::inc(x_0);
lean::inc(x_0);
lean::inc(x_0);
x_9 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_9, 0, x_0);
lean::cnstr_set(x_9, 1, x_3);
lean::cnstr_set(x_9, 2, x_5);
lean::cnstr_set(x_9, 3, x_0);
lean::cnstr_set(x_9, 4, x_0);
x_10 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_0);
return x_10;
}
}
obj* _init_l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_8; 
lean::dec(x_1);
x_8 = lean::box(0);
x_5 = x_8;
goto lbl_6;
}
case 1:
{
obj* x_9; 
x_9 = lean::cnstr_get(x_1, 0);
lean::inc(x_9);
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_13; obj* x_14; 
lean::dec(x_0);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_14, 0, x_9);
lean::cnstr_set(x_14, 1, x_13);
return x_14;
}
else
{
obj* x_15; 
x_15 = lean::cnstr_get(x_0, 0);
lean::inc(x_15);
lean::dec(x_0);
switch (lean::obj_tag(x_15)) {
case 0:
{
obj* x_18; obj* x_21; obj* x_22; 
x_18 = lean::cnstr_get(x_15, 0);
lean::inc(x_18);
lean::dec(x_15);
x_21 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_21, 0, x_18);
x_22 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_22, 0, x_9);
lean::cnstr_set(x_22, 1, x_21);
return x_22;
}
case 1:
{
obj* x_24; obj* x_25; 
lean::dec(x_15);
x_24 = lean::box(0);
x_25 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_25, 0, x_9);
lean::cnstr_set(x_25, 1, x_24);
return x_25;
}
case 2:
{
obj* x_27; obj* x_28; 
lean::dec(x_15);
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_28, 0, x_9);
lean::cnstr_set(x_28, 1, x_27);
return x_28;
}
default:
{
obj* x_30; obj* x_31; 
lean::dec(x_15);
x_30 = lean::box(0);
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_9);
lean::cnstr_set(x_31, 1, x_30);
return x_31;
}
}
}
}
case 2:
{
obj* x_33; 
lean::dec(x_1);
x_33 = lean::box(0);
x_5 = x_33;
goto lbl_6;
}
default:
{
obj* x_35; 
lean::dec(x_1);
x_35 = lean::box(0);
x_5 = x_35;
goto lbl_6;
}
}
lbl_6:
{
lean::dec(x_5);
if (lean::obj_tag(x_0) == 0)
{
obj* x_38; 
lean::dec(x_0);
x_38 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
lean::inc(x_38);
return x_38;
}
else
{
obj* x_40; 
x_40 = lean::cnstr_get(x_0, 0);
lean::inc(x_40);
lean::dec(x_0);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_43; obj* x_46; obj* x_47; obj* x_49; 
x_43 = lean::cnstr_get(x_40, 0);
lean::inc(x_43);
lean::dec(x_40);
x_46 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_46, 0, x_43);
x_47 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_47);
x_49 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_49, 0, x_47);
lean::cnstr_set(x_49, 1, x_46);
return x_49;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
x_51 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
case 2:
{
obj* x_54; 
lean::dec(x_40);
x_54 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
lean::inc(x_54);
return x_54;
}
default:
{
obj* x_57; 
lean::dec(x_40);
x_57 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
lean::inc(x_57);
return x_57;
}
}
}
}
}
}
}
obj* l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_1);
x_7 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_7);
x_9 = l_option_map___rarg(x_7, x_3);
x_10 = lean::box(3);
x_11 = l_option_get__or__else___main___rarg(x_9, x_10);
x_12 = lean::box(0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_6);
lean::cnstr_set(x_14, 1, x_13);
x_15 = l_lean_parser_term_struct__inst__type;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
}
obj* _init_l_lean_parser_term_struct__inst__type_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_struct__inst__type_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_struct__inst__with() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("struct_inst_with");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_struct__inst__with_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
if (lean::is_shared(x_1)) {
 lean::dec(x_1);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_1, 0);
 x_7 = x_1;
}
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; 
lean::dec(x_7);
lean::dec(x_8);
x_13 = l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1;
lean::inc(x_13);
return x_13;
}
else
{
obj* x_15; 
x_15 = lean::cnstr_get(x_8, 0);
lean::inc(x_15);
lean::dec(x_8);
switch (lean::obj_tag(x_15)) {
case 0:
{
obj* x_18; obj* x_21; obj* x_22; obj* x_23; 
x_18 = lean::cnstr_get(x_15, 0);
lean::inc(x_18);
lean::dec(x_15);
if (lean::is_scalar(x_7)) {
 x_21 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_21 = x_7;
}
lean::cnstr_set(x_21, 0, x_18);
x_22 = lean::box(3);
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_21);
return x_23;
}
case 1:
{
obj* x_26; 
lean::dec(x_15);
lean::dec(x_7);
x_26 = l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1;
lean::inc(x_26);
return x_26;
}
case 2:
{
obj* x_30; 
lean::dec(x_15);
lean::dec(x_7);
x_30 = l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1;
lean::inc(x_30);
return x_30;
}
default:
{
obj* x_34; 
lean::dec(x_15);
lean::dec(x_7);
x_34 = l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1;
lean::inc(x_34);
return x_34;
}
}
}
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_8, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_8, 1);
lean::inc(x_38);
lean::dec(x_8);
if (lean::obj_tag(x_38) == 0)
{
obj* x_43; obj* x_44; 
lean::dec(x_38);
lean::dec(x_7);
x_43 = lean::box(0);
x_44 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_44, 0, x_36);
lean::cnstr_set(x_44, 1, x_43);
return x_44;
}
else
{
obj* x_45; 
x_45 = lean::cnstr_get(x_38, 0);
lean::inc(x_45);
lean::dec(x_38);
switch (lean::obj_tag(x_45)) {
case 0:
{
obj* x_48; obj* x_51; obj* x_52; 
x_48 = lean::cnstr_get(x_45, 0);
lean::inc(x_48);
lean::dec(x_45);
if (lean::is_scalar(x_7)) {
 x_51 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_51 = x_7;
}
lean::cnstr_set(x_51, 0, x_48);
x_52 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_52, 0, x_36);
lean::cnstr_set(x_52, 1, x_51);
return x_52;
}
case 1:
{
obj* x_55; obj* x_56; 
lean::dec(x_7);
lean::dec(x_45);
x_55 = lean::box(0);
x_56 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_56, 0, x_36);
lean::cnstr_set(x_56, 1, x_55);
return x_56;
}
case 2:
{
obj* x_59; obj* x_60; 
lean::dec(x_7);
lean::dec(x_45);
x_59 = lean::box(0);
x_60 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_60, 0, x_36);
lean::cnstr_set(x_60, 1, x_59);
return x_60;
}
default:
{
obj* x_63; obj* x_64; 
lean::dec(x_7);
lean::dec(x_45);
x_63 = lean::box(0);
x_64 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_64, 0, x_36);
lean::cnstr_set(x_64, 1, x_63);
return x_64;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
return x_2;
}
}
obj* l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_6);
x_8 = l_option_map___rarg(x_6, x_3);
x_9 = lean::box(3);
x_10 = l_option_get__or__else___main___rarg(x_8, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_1);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_lean_parser_term_struct__inst__with;
lean::inc(x_14);
x_16 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_16;
}
}
obj* _init_l_lean_parser_term_struct__inst__with_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_struct__inst__with_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_struct__inst__field() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("struct_inst_field");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_struct__inst__field_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__2;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_23; 
lean::dec(x_2);
x_23 = lean::box(0);
x_20 = x_23;
goto lbl_21;
}
case 1:
{
obj* x_24; 
x_24 = lean::cnstr_get(x_2, 0);
lean::inc(x_24);
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_27; 
x_27 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_29; obj* x_30; 
lean::dec(x_1);
x_29 = lean::box(3);
x_30 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_30, 0, x_24);
lean::cnstr_set(x_30, 1, x_27);
lean::cnstr_set(x_30, 2, x_29);
return x_30;
}
else
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
lean::dec(x_1);
x_34 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_34, 0, x_24);
lean::cnstr_set(x_34, 1, x_27);
lean::cnstr_set(x_34, 2, x_31);
return x_34;
}
}
else
{
obj* x_35; obj* x_37; 
x_35 = lean::cnstr_get(x_1, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_1, 1);
lean::inc(x_37);
lean::dec(x_1);
switch (lean::obj_tag(x_35)) {
case 0:
{
obj* x_40; obj* x_43; 
x_40 = lean::cnstr_get(x_35, 0);
lean::inc(x_40);
lean::dec(x_35);
x_43 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_43, 0, x_40);
if (lean::obj_tag(x_37) == 0)
{
obj* x_45; obj* x_46; 
lean::dec(x_37);
x_45 = lean::box(3);
x_46 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_46, 0, x_24);
lean::cnstr_set(x_46, 1, x_43);
lean::cnstr_set(x_46, 2, x_45);
return x_46;
}
else
{
obj* x_47; obj* x_50; 
x_47 = lean::cnstr_get(x_37, 0);
lean::inc(x_47);
lean::dec(x_37);
x_50 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_50, 0, x_24);
lean::cnstr_set(x_50, 1, x_43);
lean::cnstr_set(x_50, 2, x_47);
return x_50;
}
}
case 1:
{
obj* x_52; 
lean::dec(x_35);
x_52 = lean::box(0);
if (lean::obj_tag(x_37) == 0)
{
obj* x_54; obj* x_55; 
lean::dec(x_37);
x_54 = lean::box(3);
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_24);
lean::cnstr_set(x_55, 1, x_52);
lean::cnstr_set(x_55, 2, x_54);
return x_55;
}
else
{
obj* x_56; obj* x_59; 
x_56 = lean::cnstr_get(x_37, 0);
lean::inc(x_56);
lean::dec(x_37);
x_59 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_59, 0, x_24);
lean::cnstr_set(x_59, 1, x_52);
lean::cnstr_set(x_59, 2, x_56);
return x_59;
}
}
case 2:
{
obj* x_61; 
lean::dec(x_35);
x_61 = lean::box(0);
if (lean::obj_tag(x_37) == 0)
{
obj* x_63; obj* x_64; 
lean::dec(x_37);
x_63 = lean::box(3);
x_64 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_64, 0, x_24);
lean::cnstr_set(x_64, 1, x_61);
lean::cnstr_set(x_64, 2, x_63);
return x_64;
}
else
{
obj* x_65; obj* x_68; 
x_65 = lean::cnstr_get(x_37, 0);
lean::inc(x_65);
lean::dec(x_37);
x_68 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_68, 0, x_24);
lean::cnstr_set(x_68, 1, x_61);
lean::cnstr_set(x_68, 2, x_65);
return x_68;
}
}
default:
{
obj* x_70; 
lean::dec(x_35);
x_70 = lean::box(0);
if (lean::obj_tag(x_37) == 0)
{
obj* x_72; obj* x_73; 
lean::dec(x_37);
x_72 = lean::box(3);
x_73 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_73, 0, x_24);
lean::cnstr_set(x_73, 1, x_70);
lean::cnstr_set(x_73, 2, x_72);
return x_73;
}
else
{
obj* x_74; obj* x_77; 
x_74 = lean::cnstr_get(x_37, 0);
lean::inc(x_74);
lean::dec(x_37);
x_77 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_77, 0, x_24);
lean::cnstr_set(x_77, 1, x_70);
lean::cnstr_set(x_77, 2, x_74);
return x_77;
}
}
}
}
}
case 2:
{
obj* x_79; 
lean::dec(x_2);
x_79 = lean::box(0);
x_20 = x_79;
goto lbl_21;
}
default:
{
obj* x_81; 
lean::dec(x_2);
x_81 = lean::box(0);
x_20 = x_81;
goto lbl_21;
}
}
lbl_21:
{
obj* x_83; 
lean::dec(x_20);
x_83 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_86; 
lean::dec(x_83);
lean::dec(x_1);
x_86 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
lean::inc(x_86);
return x_86;
}
else
{
obj* x_88; obj* x_91; obj* x_93; 
x_88 = lean::cnstr_get(x_1, 0);
lean::inc(x_88);
lean::dec(x_1);
x_91 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_91);
x_93 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_93, 0, x_91);
lean::cnstr_set(x_93, 1, x_83);
lean::cnstr_set(x_93, 2, x_88);
return x_93;
}
}
else
{
obj* x_94; obj* x_96; 
x_94 = lean::cnstr_get(x_1, 0);
lean::inc(x_94);
x_96 = lean::cnstr_get(x_1, 1);
lean::inc(x_96);
lean::dec(x_1);
switch (lean::obj_tag(x_94)) {
case 0:
{
obj* x_100; obj* x_103; 
lean::dec(x_83);
x_100 = lean::cnstr_get(x_94, 0);
lean::inc(x_100);
lean::dec(x_94);
x_103 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_103, 0, x_100);
if (lean::obj_tag(x_96) == 0)
{
obj* x_105; obj* x_106; obj* x_108; 
lean::dec(x_96);
x_105 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_106 = lean::box(3);
lean::inc(x_105);
x_108 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_108, 0, x_105);
lean::cnstr_set(x_108, 1, x_103);
lean::cnstr_set(x_108, 2, x_106);
return x_108;
}
else
{
obj* x_109; obj* x_112; obj* x_114; 
x_109 = lean::cnstr_get(x_96, 0);
lean::inc(x_109);
lean::dec(x_96);
x_112 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_112);
x_114 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_114, 0, x_112);
lean::cnstr_set(x_114, 1, x_103);
lean::cnstr_set(x_114, 2, x_109);
return x_114;
}
}
case 1:
{
lean::dec(x_94);
if (lean::obj_tag(x_96) == 0)
{
obj* x_118; 
lean::dec(x_83);
lean::dec(x_96);
x_118 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
lean::inc(x_118);
return x_118;
}
else
{
obj* x_120; obj* x_123; obj* x_125; 
x_120 = lean::cnstr_get(x_96, 0);
lean::inc(x_120);
lean::dec(x_96);
x_123 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_123);
x_125 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_125, 0, x_123);
lean::cnstr_set(x_125, 1, x_83);
lean::cnstr_set(x_125, 2, x_120);
return x_125;
}
}
case 2:
{
lean::dec(x_94);
if (lean::obj_tag(x_96) == 0)
{
obj* x_129; 
lean::dec(x_83);
lean::dec(x_96);
x_129 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
lean::inc(x_129);
return x_129;
}
else
{
obj* x_131; obj* x_134; obj* x_136; 
x_131 = lean::cnstr_get(x_96, 0);
lean::inc(x_131);
lean::dec(x_96);
x_134 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_134);
x_136 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_136, 0, x_134);
lean::cnstr_set(x_136, 1, x_83);
lean::cnstr_set(x_136, 2, x_131);
return x_136;
}
}
default:
{
lean::dec(x_94);
if (lean::obj_tag(x_96) == 0)
{
obj* x_140; 
lean::dec(x_83);
lean::dec(x_96);
x_140 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
lean::inc(x_140);
return x_140;
}
else
{
obj* x_142; obj* x_145; obj* x_147; 
x_142 = lean::cnstr_get(x_96, 0);
lean::inc(x_142);
lean::dec(x_96);
x_145 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_145);
x_147 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_147, 0, x_145);
lean::cnstr_set(x_147, 1, x_83);
lean::cnstr_set(x_147, 2, x_142);
return x_147;
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_5; obj* x_9; obj* x_10; obj* x_11; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
lean::inc(x_0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_1);
lean::inc(x_0);
lean::inc(x_0);
lean::inc(x_0);
x_9 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_9, 0, x_0);
lean::cnstr_set(x_9, 1, x_3);
lean::cnstr_set(x_9, 2, x_5);
lean::cnstr_set(x_9, 3, x_0);
lean::cnstr_set(x_9, 4, x_0);
x_10 = lean::box(3);
x_11 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_11, 0, x_9);
lean::cnstr_set(x_11, 1, x_0);
lean::cnstr_set(x_11, 2, x_10);
return x_11;
}
}
obj* _init_l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_8; 
lean::dec(x_1);
x_8 = lean::box(0);
x_5 = x_8;
goto lbl_6;
}
case 1:
{
obj* x_9; 
x_9 = lean::cnstr_get(x_1, 0);
lean::inc(x_9);
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_12; 
x_12 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_14; obj* x_15; 
lean::dec(x_0);
x_14 = lean::box(3);
x_15 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_15, 0, x_9);
lean::cnstr_set(x_15, 1, x_12);
lean::cnstr_set(x_15, 2, x_14);
return x_15;
}
else
{
obj* x_16; obj* x_19; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_19, 0, x_9);
lean::cnstr_set(x_19, 1, x_12);
lean::cnstr_set(x_19, 2, x_16);
return x_19;
}
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_0, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_0, 1);
lean::inc(x_22);
lean::dec(x_0);
switch (lean::obj_tag(x_20)) {
case 0:
{
obj* x_25; obj* x_28; 
x_25 = lean::cnstr_get(x_20, 0);
lean::inc(x_25);
lean::dec(x_20);
x_28 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_28, 0, x_25);
if (lean::obj_tag(x_22) == 0)
{
obj* x_30; obj* x_31; 
lean::dec(x_22);
x_30 = lean::box(3);
x_31 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_31, 0, x_9);
lean::cnstr_set(x_31, 1, x_28);
lean::cnstr_set(x_31, 2, x_30);
return x_31;
}
else
{
obj* x_32; obj* x_35; 
x_32 = lean::cnstr_get(x_22, 0);
lean::inc(x_32);
lean::dec(x_22);
x_35 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_35, 0, x_9);
lean::cnstr_set(x_35, 1, x_28);
lean::cnstr_set(x_35, 2, x_32);
return x_35;
}
}
case 1:
{
obj* x_37; 
lean::dec(x_20);
x_37 = lean::box(0);
if (lean::obj_tag(x_22) == 0)
{
obj* x_39; obj* x_40; 
lean::dec(x_22);
x_39 = lean::box(3);
x_40 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_40, 0, x_9);
lean::cnstr_set(x_40, 1, x_37);
lean::cnstr_set(x_40, 2, x_39);
return x_40;
}
else
{
obj* x_41; obj* x_44; 
x_41 = lean::cnstr_get(x_22, 0);
lean::inc(x_41);
lean::dec(x_22);
x_44 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_44, 0, x_9);
lean::cnstr_set(x_44, 1, x_37);
lean::cnstr_set(x_44, 2, x_41);
return x_44;
}
}
case 2:
{
obj* x_46; 
lean::dec(x_20);
x_46 = lean::box(0);
if (lean::obj_tag(x_22) == 0)
{
obj* x_48; obj* x_49; 
lean::dec(x_22);
x_48 = lean::box(3);
x_49 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_49, 0, x_9);
lean::cnstr_set(x_49, 1, x_46);
lean::cnstr_set(x_49, 2, x_48);
return x_49;
}
else
{
obj* x_50; obj* x_53; 
x_50 = lean::cnstr_get(x_22, 0);
lean::inc(x_50);
lean::dec(x_22);
x_53 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_53, 0, x_9);
lean::cnstr_set(x_53, 1, x_46);
lean::cnstr_set(x_53, 2, x_50);
return x_53;
}
}
default:
{
obj* x_55; 
lean::dec(x_20);
x_55 = lean::box(0);
if (lean::obj_tag(x_22) == 0)
{
obj* x_57; obj* x_58; 
lean::dec(x_22);
x_57 = lean::box(3);
x_58 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_58, 0, x_9);
lean::cnstr_set(x_58, 1, x_55);
lean::cnstr_set(x_58, 2, x_57);
return x_58;
}
else
{
obj* x_59; obj* x_62; 
x_59 = lean::cnstr_get(x_22, 0);
lean::inc(x_59);
lean::dec(x_22);
x_62 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_62, 0, x_9);
lean::cnstr_set(x_62, 1, x_55);
lean::cnstr_set(x_62, 2, x_59);
return x_62;
}
}
}
}
}
case 2:
{
obj* x_64; 
lean::dec(x_1);
x_64 = lean::box(0);
x_5 = x_64;
goto lbl_6;
}
default:
{
obj* x_66; 
lean::dec(x_1);
x_66 = lean::box(0);
x_5 = x_66;
goto lbl_6;
}
}
lbl_6:
{
obj* x_68; 
lean::dec(x_5);
x_68 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_71; 
lean::dec(x_68);
lean::dec(x_0);
x_71 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
lean::inc(x_71);
return x_71;
}
else
{
obj* x_73; obj* x_76; obj* x_78; 
x_73 = lean::cnstr_get(x_0, 0);
lean::inc(x_73);
lean::dec(x_0);
x_76 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_76);
x_78 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_78, 0, x_76);
lean::cnstr_set(x_78, 1, x_68);
lean::cnstr_set(x_78, 2, x_73);
return x_78;
}
}
else
{
obj* x_79; obj* x_81; 
x_79 = lean::cnstr_get(x_0, 0);
lean::inc(x_79);
x_81 = lean::cnstr_get(x_0, 1);
lean::inc(x_81);
lean::dec(x_0);
switch (lean::obj_tag(x_79)) {
case 0:
{
obj* x_85; obj* x_88; 
lean::dec(x_68);
x_85 = lean::cnstr_get(x_79, 0);
lean::inc(x_85);
lean::dec(x_79);
x_88 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_88, 0, x_85);
if (lean::obj_tag(x_81) == 0)
{
obj* x_90; obj* x_91; obj* x_93; 
lean::dec(x_81);
x_90 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_91 = lean::box(3);
lean::inc(x_90);
x_93 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_93, 0, x_90);
lean::cnstr_set(x_93, 1, x_88);
lean::cnstr_set(x_93, 2, x_91);
return x_93;
}
else
{
obj* x_94; obj* x_97; obj* x_99; 
x_94 = lean::cnstr_get(x_81, 0);
lean::inc(x_94);
lean::dec(x_81);
x_97 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_97);
x_99 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_99, 0, x_97);
lean::cnstr_set(x_99, 1, x_88);
lean::cnstr_set(x_99, 2, x_94);
return x_99;
}
}
case 1:
{
lean::dec(x_79);
if (lean::obj_tag(x_81) == 0)
{
obj* x_103; 
lean::dec(x_81);
lean::dec(x_68);
x_103 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
lean::inc(x_103);
return x_103;
}
else
{
obj* x_105; obj* x_108; obj* x_110; 
x_105 = lean::cnstr_get(x_81, 0);
lean::inc(x_105);
lean::dec(x_81);
x_108 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_108);
x_110 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_110, 0, x_108);
lean::cnstr_set(x_110, 1, x_68);
lean::cnstr_set(x_110, 2, x_105);
return x_110;
}
}
case 2:
{
lean::dec(x_79);
if (lean::obj_tag(x_81) == 0)
{
obj* x_114; 
lean::dec(x_81);
lean::dec(x_68);
x_114 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
lean::inc(x_114);
return x_114;
}
else
{
obj* x_116; obj* x_119; obj* x_121; 
x_116 = lean::cnstr_get(x_81, 0);
lean::inc(x_116);
lean::dec(x_81);
x_119 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_119);
x_121 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_121, 0, x_119);
lean::cnstr_set(x_121, 1, x_68);
lean::cnstr_set(x_121, 2, x_116);
return x_121;
}
}
default:
{
lean::dec(x_79);
if (lean::obj_tag(x_81) == 0)
{
obj* x_125; 
lean::dec(x_81);
lean::dec(x_68);
x_125 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
lean::inc(x_125);
return x_125;
}
else
{
obj* x_127; obj* x_130; obj* x_132; 
x_127 = lean::cnstr_get(x_81, 0);
lean::inc(x_127);
lean::dec(x_81);
x_130 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_130);
x_132 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_132, 0, x_130);
lean::cnstr_set(x_132, 1, x_68);
lean::cnstr_set(x_132, 2, x_127);
return x_132;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_20; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_1);
x_9 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_9);
x_11 = l_option_map___rarg(x_9, x_3);
x_12 = lean::box(3);
x_13 = l_option_get__or__else___main___rarg(x_11, x_12);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_5);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_13);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_8);
lean::cnstr_set(x_17, 1, x_16);
x_18 = l_lean_parser_term_struct__inst__field;
lean::inc(x_18);
x_20 = l_lean_parser_syntax_mk__node(x_18, x_17);
return x_20;
}
}
obj* _init_l_lean_parser_term_struct__inst__field_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_struct__inst__field_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_struct__inst__source() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("struct_inst_source");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_struct__inst__source_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_4; obj* x_6; 
x_6 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_6) == 0)
{
obj* x_8; 
lean::dec(x_6);
x_8 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2;
lean::inc(x_8);
return x_8;
}
else
{
obj* x_10; obj* x_12; obj* x_13; 
x_10 = lean::cnstr_get(x_6, 0);
lean::inc(x_10);
if (lean::is_shared(x_6)) {
 lean::dec(x_6);
 x_12 = lean::box(0);
} else {
 lean::cnstr_release(x_6, 0);
 x_12 = x_6;
}
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
lean::dec(x_10);
if (lean::obj_tag(x_13) == 0)
{
lean::dec(x_12);
if (lean::obj_tag(x_13) == 0)
{
obj* x_18; 
lean::dec(x_13);
x_18 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2;
lean::inc(x_18);
return x_18;
}
else
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_13, 0);
lean::inc(x_20);
lean::dec(x_13);
x_23 = lean::box(0);
x_3 = x_23;
x_4 = x_20;
goto lbl_5;
}
}
else
{
obj* x_24; obj* x_26; 
x_24 = lean::cnstr_get(x_13, 0);
lean::inc(x_24);
x_26 = lean::cnstr_get(x_13, 1);
lean::inc(x_26);
lean::dec(x_13);
switch (lean::obj_tag(x_24)) {
case 0:
{
obj* x_29; obj* x_32; 
x_29 = lean::cnstr_get(x_24, 0);
lean::inc(x_29);
lean::dec(x_24);
if (lean::is_scalar(x_12)) {
 x_32 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_32 = x_12;
}
lean::cnstr_set(x_32, 0, x_29);
if (lean::obj_tag(x_26) == 0)
{
lean::dec(x_26);
x_1 = x_32;
goto lbl_2;
}
else
{
obj* x_34; 
x_34 = lean::cnstr_get(x_26, 0);
lean::inc(x_34);
lean::dec(x_26);
x_3 = x_32;
x_4 = x_34;
goto lbl_5;
}
}
case 1:
{
lean::dec(x_24);
lean::dec(x_12);
if (lean::obj_tag(x_26) == 0)
{
obj* x_40; 
lean::dec(x_26);
x_40 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2;
lean::inc(x_40);
return x_40;
}
else
{
obj* x_42; obj* x_45; 
x_42 = lean::cnstr_get(x_26, 0);
lean::inc(x_42);
lean::dec(x_26);
x_45 = lean::box(0);
x_3 = x_45;
x_4 = x_42;
goto lbl_5;
}
}
case 2:
{
lean::dec(x_24);
lean::dec(x_12);
if (lean::obj_tag(x_26) == 0)
{
obj* x_49; 
lean::dec(x_26);
x_49 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2;
lean::inc(x_49);
return x_49;
}
else
{
obj* x_51; obj* x_54; 
x_51 = lean::cnstr_get(x_26, 0);
lean::inc(x_51);
lean::dec(x_26);
x_54 = lean::box(0);
x_3 = x_54;
x_4 = x_51;
goto lbl_5;
}
}
default:
{
lean::dec(x_24);
lean::dec(x_12);
if (lean::obj_tag(x_26) == 0)
{
obj* x_58; 
lean::dec(x_26);
x_58 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2;
lean::inc(x_58);
return x_58;
}
else
{
obj* x_60; obj* x_63; 
x_60 = lean::cnstr_get(x_26, 0);
lean::inc(x_60);
lean::dec(x_26);
x_63 = lean::box(0);
x_3 = x_63;
x_4 = x_60;
goto lbl_5;
}
}
}
}
}
lbl_2:
{
obj* x_64; obj* x_65; 
x_64 = lean::box(3);
x_65 = l_lean_parser_syntax_as__node___main(x_64);
if (lean::obj_tag(x_65) == 0)
{
obj* x_67; obj* x_69; 
lean::dec(x_65);
x_67 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1;
lean::inc(x_67);
x_69 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_69, 0, x_1);
lean::cnstr_set(x_69, 1, x_67);
return x_69;
}
else
{
obj* x_70; obj* x_72; obj* x_73; 
x_70 = lean::cnstr_get(x_65, 0);
lean::inc(x_70);
if (lean::is_shared(x_65)) {
 lean::dec(x_65);
 x_72 = lean::box(0);
} else {
 lean::cnstr_release(x_65, 0);
 x_72 = x_65;
}
x_73 = lean::cnstr_get(x_70, 1);
lean::inc(x_73);
lean::dec(x_70);
if (lean::obj_tag(x_73) == 0)
{
obj* x_78; obj* x_79; 
lean::dec(x_72);
lean::dec(x_73);
x_78 = lean::box(0);
x_79 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_79, 0, x_1);
lean::cnstr_set(x_79, 1, x_78);
return x_79;
}
else
{
obj* x_80; obj* x_82; 
x_80 = lean::cnstr_get(x_73, 0);
lean::inc(x_80);
x_82 = lean::cnstr_get(x_73, 1);
lean::inc(x_82);
lean::dec(x_73);
if (lean::obj_tag(x_82) == 0)
{
obj* x_86; obj* x_87; 
lean::dec(x_82);
if (lean::is_scalar(x_72)) {
 x_86 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_86 = x_72;
}
lean::cnstr_set(x_86, 0, x_80);
x_87 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_87, 0, x_1);
lean::cnstr_set(x_87, 1, x_86);
return x_87;
}
else
{
obj* x_91; obj* x_93; 
lean::dec(x_72);
lean::dec(x_82);
lean::dec(x_80);
x_91 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1;
lean::inc(x_91);
x_93 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_93, 0, x_1);
lean::cnstr_set(x_93, 1, x_91);
return x_93;
}
}
}
}
lbl_5:
{
obj* x_94; 
x_94 = l_lean_parser_syntax_as__node___main(x_4);
if (lean::obj_tag(x_94) == 0)
{
obj* x_96; obj* x_98; 
lean::dec(x_94);
x_96 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1;
lean::inc(x_96);
x_98 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_98, 0, x_3);
lean::cnstr_set(x_98, 1, x_96);
return x_98;
}
else
{
obj* x_99; obj* x_101; obj* x_102; 
x_99 = lean::cnstr_get(x_94, 0);
lean::inc(x_99);
if (lean::is_shared(x_94)) {
 lean::dec(x_94);
 x_101 = lean::box(0);
} else {
 lean::cnstr_release(x_94, 0);
 x_101 = x_94;
}
x_102 = lean::cnstr_get(x_99, 1);
lean::inc(x_102);
lean::dec(x_99);
if (lean::obj_tag(x_102) == 0)
{
obj* x_107; obj* x_108; 
lean::dec(x_102);
lean::dec(x_101);
x_107 = lean::box(0);
x_108 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_108, 0, x_3);
lean::cnstr_set(x_108, 1, x_107);
return x_108;
}
else
{
obj* x_109; obj* x_111; 
x_109 = lean::cnstr_get(x_102, 0);
lean::inc(x_109);
x_111 = lean::cnstr_get(x_102, 1);
lean::inc(x_111);
lean::dec(x_102);
if (lean::obj_tag(x_111) == 0)
{
obj* x_115; obj* x_116; 
lean::dec(x_111);
if (lean::is_scalar(x_101)) {
 x_115 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_115 = x_101;
}
lean::cnstr_set(x_115, 0, x_109);
x_116 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_116, 0, x_3);
lean::cnstr_set(x_116, 1, x_115);
return x_116;
}
else
{
obj* x_120; obj* x_122; 
lean::dec(x_109);
lean::dec(x_101);
lean::dec(x_111);
x_120 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1;
lean::inc(x_120);
x_122 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_122, 0, x_3);
lean::cnstr_set(x_122, 1, x_120);
return x_122;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_2; 
x_2 = lean::box(0);
x_0 = x_2;
goto lbl_1;
lbl_1:
{
obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = l_lean_parser_syntax_as__node___main(x_3);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; obj* x_8; 
lean::dec(x_4);
x_6 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_0);
lean::cnstr_set(x_8, 1, x_6);
return x_8;
}
else
{
obj* x_9; obj* x_11; obj* x_12; 
x_9 = lean::cnstr_get(x_4, 0);
lean::inc(x_9);
if (lean::is_shared(x_4)) {
 lean::dec(x_4);
 x_11 = lean::box(0);
} else {
 lean::cnstr_release(x_4, 0);
 x_11 = x_4;
}
x_12 = lean::cnstr_get(x_9, 1);
lean::inc(x_12);
lean::dec(x_9);
if (lean::obj_tag(x_12) == 0)
{
obj* x_17; obj* x_18; 
lean::dec(x_11);
lean::dec(x_12);
x_17 = lean::box(0);
x_18 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_18, 0, x_0);
lean::cnstr_set(x_18, 1, x_17);
return x_18;
}
else
{
obj* x_19; obj* x_21; 
x_19 = lean::cnstr_get(x_12, 0);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_12, 1);
lean::inc(x_21);
lean::dec(x_12);
if (lean::obj_tag(x_21) == 0)
{
obj* x_25; obj* x_26; 
lean::dec(x_21);
if (lean::is_scalar(x_11)) {
 x_25 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_25 = x_11;
}
lean::cnstr_set(x_25, 0, x_19);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_0);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_30; obj* x_32; 
lean::dec(x_11);
lean::dec(x_19);
lean::dec(x_21);
x_30 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1;
lean::inc(x_30);
x_32 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_32, 0, x_0);
lean::cnstr_set(x_32, 1, x_30);
return x_32;
}
}
}
}
}
}
obj* l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_8; obj* x_9; obj* x_10; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_6);
x_8 = l_option_map___rarg(x_6, x_1);
x_9 = lean::box(3);
x_10 = l_option_get__or__else___main___rarg(x_8, x_9);
if (lean::obj_tag(x_3) == 0)
{
obj* x_12; obj* x_14; obj* x_15; obj* x_17; 
lean::dec(x_3);
x_12 = l_lean_parser_detail__ident_has__view_x_27___lambda__2___closed__1;
lean::inc(x_12);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_10);
lean::cnstr_set(x_14, 1, x_12);
x_15 = l_lean_parser_term_struct__inst__source;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_31; 
x_18 = lean::cnstr_get(x_3, 0);
lean::inc(x_18);
lean::dec(x_3);
x_21 = lean::box(0);
lean::inc(x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_18);
lean::cnstr_set(x_23, 1, x_21);
x_24 = l_lean_parser_no__kind;
lean::inc(x_24);
x_26 = l_lean_parser_syntax_mk__node(x_24, x_23);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_21);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_10);
lean::cnstr_set(x_28, 1, x_27);
x_29 = l_lean_parser_term_struct__inst__source;
lean::inc(x_29);
x_31 = l_lean_parser_syntax_mk__node(x_29, x_28);
return x_31;
}
}
}
obj* _init_l_lean_parser_term_struct__inst__source_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_struct__inst__source_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_struct__inst__item() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("struct_inst_item");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_struct__inst__item_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__2;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; obj* x_91; obj* x_93; obj* x_94; 
lean::dec(x_86);
x_90 = l_lean_parser_term_struct__inst__source_has__view;
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
x_93 = lean::apply_1(x_91, x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
else
{
obj* x_96; obj* x_97; obj* x_99; obj* x_100; 
lean::dec(x_86);
x_96 = l_lean_parser_term_struct__inst__field_has__view;
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
x_99 = lean::apply_1(x_97, x_1);
x_100 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_100, 0, x_99);
return x_100;
}
}
}
}
obj* _init_l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; obj* x_11; obj* x_13; obj* x_14; 
lean::dec(x_6);
x_10 = l_lean_parser_term_struct__inst__source_has__view;
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_0);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
else
{
obj* x_16; obj* x_17; obj* x_19; obj* x_20; 
lean::dec(x_6);
x_16 = l_lean_parser_term_struct__inst__field_has__view;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::apply_1(x_17, x_0);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
}
}
}
obj* _init_l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("struct_inst_item");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_17; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_struct__inst__field_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
x_8 = lean::apply_1(x_6, x_2);
lean::inc(x_1);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_lean_parser_term_struct__inst__item;
lean::inc(x_15);
x_17 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_33; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
x_21 = l_lean_parser_term_struct__inst__source_has__view;
x_22 = lean::cnstr_get(x_21, 1);
lean::inc(x_22);
x_24 = lean::apply_1(x_22, x_18);
lean::inc(x_1);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_27);
x_29 = l_lean_parser_syntax_mk__node(x_27, x_26);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_1);
x_31 = l_lean_parser_term_struct__inst__item;
lean::inc(x_31);
x_33 = l_lean_parser_syntax_mk__node(x_31, x_30);
return x_33;
}
}
}
obj* _init_l_lean_parser_term_struct__inst__item_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_struct__inst__item_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_struct__inst() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("struct_inst");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_struct__inst_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__4;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
x_35 = lean::box(3);
x_32 = x_1;
x_33 = x_35;
goto lbl_34;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_1, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
lean::dec(x_1);
x_32 = x_38;
x_33 = x_36;
goto lbl_34;
}
lbl_34:
{
obj* x_41; obj* x_43; 
x_43 = l_lean_parser_syntax_as__node___main(x_33);
if (lean::obj_tag(x_43) == 0)
{
obj* x_45; 
lean::dec(x_43);
x_45 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3;
lean::inc(x_45);
x_41 = x_45;
goto lbl_42;
}
else
{
obj* x_47; obj* x_49; obj* x_50; 
x_47 = lean::cnstr_get(x_43, 0);
lean::inc(x_47);
if (lean::is_shared(x_43)) {
 lean::dec(x_43);
 x_49 = lean::box(0);
} else {
 lean::cnstr_release(x_43, 0);
 x_49 = x_43;
}
x_50 = lean::cnstr_get(x_47, 1);
lean::inc(x_50);
lean::dec(x_47);
if (lean::obj_tag(x_50) == 0)
{
obj* x_55; 
lean::dec(x_49);
lean::dec(x_50);
x_55 = lean::box(0);
x_41 = x_55;
goto lbl_42;
}
else
{
obj* x_56; obj* x_58; 
x_56 = lean::cnstr_get(x_50, 0);
lean::inc(x_56);
x_58 = lean::cnstr_get(x_50, 1);
lean::inc(x_58);
lean::dec(x_50);
if (lean::obj_tag(x_58) == 0)
{
obj* x_62; obj* x_63; obj* x_65; obj* x_66; 
lean::dec(x_58);
x_62 = l_lean_parser_term_struct__inst__type_has__view;
x_63 = lean::cnstr_get(x_62, 0);
lean::inc(x_63);
x_65 = lean::apply_1(x_63, x_56);
if (lean::is_scalar(x_49)) {
 x_66 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_66 = x_49;
}
lean::cnstr_set(x_66, 0, x_65);
x_41 = x_66;
goto lbl_42;
}
else
{
obj* x_70; 
lean::dec(x_56);
lean::dec(x_58);
lean::dec(x_49);
x_70 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3;
lean::inc(x_70);
x_41 = x_70;
goto lbl_42;
}
}
}
lbl_42:
{
obj* x_72; obj* x_73; 
if (lean::obj_tag(x_32) == 0)
{
obj* x_75; 
x_75 = lean::box(3);
x_72 = x_32;
x_73 = x_75;
goto lbl_74;
}
else
{
obj* x_76; obj* x_78; 
x_76 = lean::cnstr_get(x_32, 0);
lean::inc(x_76);
x_78 = lean::cnstr_get(x_32, 1);
lean::inc(x_78);
lean::dec(x_32);
x_72 = x_78;
x_73 = x_76;
goto lbl_74;
}
lbl_74:
{
obj* x_81; obj* x_83; 
x_83 = l_lean_parser_syntax_as__node___main(x_73);
if (lean::obj_tag(x_83) == 0)
{
obj* x_85; 
lean::dec(x_83);
x_85 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2;
lean::inc(x_85);
x_81 = x_85;
goto lbl_82;
}
else
{
obj* x_87; obj* x_89; obj* x_90; 
x_87 = lean::cnstr_get(x_83, 0);
lean::inc(x_87);
if (lean::is_shared(x_83)) {
 lean::dec(x_83);
 x_89 = lean::box(0);
} else {
 lean::cnstr_release(x_83, 0);
 x_89 = x_83;
}
x_90 = lean::cnstr_get(x_87, 1);
lean::inc(x_90);
lean::dec(x_87);
if (lean::obj_tag(x_90) == 0)
{
obj* x_95; 
lean::dec(x_89);
lean::dec(x_90);
x_95 = lean::box(0);
x_81 = x_95;
goto lbl_82;
}
else
{
obj* x_96; obj* x_98; 
x_96 = lean::cnstr_get(x_90, 0);
lean::inc(x_96);
x_98 = lean::cnstr_get(x_90, 1);
lean::inc(x_98);
lean::dec(x_90);
if (lean::obj_tag(x_98) == 0)
{
obj* x_102; obj* x_103; obj* x_105; obj* x_106; 
lean::dec(x_98);
x_102 = l_lean_parser_term_struct__inst__with_has__view;
x_103 = lean::cnstr_get(x_102, 0);
lean::inc(x_103);
x_105 = lean::apply_1(x_103, x_96);
if (lean::is_scalar(x_89)) {
 x_106 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_106 = x_89;
}
lean::cnstr_set(x_106, 0, x_105);
x_81 = x_106;
goto lbl_82;
}
else
{
obj* x_110; 
lean::dec(x_98);
lean::dec(x_89);
lean::dec(x_96);
x_110 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2;
lean::inc(x_110);
x_81 = x_110;
goto lbl_82;
}
}
}
lbl_82:
{
obj* x_112; obj* x_113; 
if (lean::obj_tag(x_72) == 0)
{
obj* x_115; 
x_115 = lean::box(3);
x_112 = x_72;
x_113 = x_115;
goto lbl_114;
}
else
{
obj* x_116; obj* x_118; 
x_116 = lean::cnstr_get(x_72, 0);
lean::inc(x_116);
x_118 = lean::cnstr_get(x_72, 1);
lean::inc(x_118);
lean::dec(x_72);
x_112 = x_118;
x_113 = x_116;
goto lbl_114;
}
lbl_114:
{
obj* x_121; 
x_121 = l_lean_parser_syntax_as__node___main(x_113);
if (lean::obj_tag(x_121) == 0)
{
obj* x_123; 
lean::dec(x_121);
x_123 = lean::box(0);
if (lean::obj_tag(x_112) == 0)
{
obj* x_125; obj* x_127; 
lean::dec(x_112);
x_125 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
lean::inc(x_125);
x_127 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_127, 0, x_20);
lean::cnstr_set(x_127, 1, x_41);
lean::cnstr_set(x_127, 2, x_81);
lean::cnstr_set(x_127, 3, x_125);
lean::cnstr_set(x_127, 4, x_123);
return x_127;
}
else
{
obj* x_128; 
x_128 = lean::cnstr_get(x_112, 0);
lean::inc(x_128);
lean::dec(x_112);
switch (lean::obj_tag(x_128)) {
case 0:
{
obj* x_132; obj* x_135; obj* x_136; obj* x_138; 
lean::dec(x_123);
x_132 = lean::cnstr_get(x_128, 0);
lean::inc(x_132);
lean::dec(x_128);
x_135 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_135, 0, x_132);
x_136 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
lean::inc(x_136);
x_138 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_138, 0, x_20);
lean::cnstr_set(x_138, 1, x_41);
lean::cnstr_set(x_138, 2, x_81);
lean::cnstr_set(x_138, 3, x_136);
lean::cnstr_set(x_138, 4, x_135);
return x_138;
}
case 1:
{
obj* x_140; obj* x_142; 
lean::dec(x_128);
x_140 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
lean::inc(x_140);
x_142 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_142, 0, x_20);
lean::cnstr_set(x_142, 1, x_41);
lean::cnstr_set(x_142, 2, x_81);
lean::cnstr_set(x_142, 3, x_140);
lean::cnstr_set(x_142, 4, x_123);
return x_142;
}
case 2:
{
obj* x_144; obj* x_146; 
lean::dec(x_128);
x_144 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
lean::inc(x_144);
x_146 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_146, 0, x_20);
lean::cnstr_set(x_146, 1, x_41);
lean::cnstr_set(x_146, 2, x_81);
lean::cnstr_set(x_146, 3, x_144);
lean::cnstr_set(x_146, 4, x_123);
return x_146;
}
default:
{
obj* x_148; obj* x_150; 
lean::dec(x_128);
x_148 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
lean::inc(x_148);
x_150 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_150, 0, x_20);
lean::cnstr_set(x_150, 1, x_41);
lean::cnstr_set(x_150, 2, x_81);
lean::cnstr_set(x_150, 3, x_148);
lean::cnstr_set(x_150, 4, x_123);
return x_150;
}
}
}
}
else
{
obj* x_151; obj* x_153; obj* x_154; obj* x_157; 
x_151 = lean::cnstr_get(x_121, 0);
lean::inc(x_151);
if (lean::is_shared(x_121)) {
 lean::dec(x_121);
 x_153 = lean::box(0);
} else {
 lean::cnstr_release(x_121, 0);
 x_153 = x_121;
}
x_154 = lean::cnstr_get(x_151, 1);
lean::inc(x_154);
lean::dec(x_151);
x_157 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__1(x_154);
if (lean::obj_tag(x_112) == 0)
{
obj* x_160; obj* x_161; 
lean::dec(x_153);
lean::dec(x_112);
x_160 = lean::box(0);
x_161 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_161, 0, x_20);
lean::cnstr_set(x_161, 1, x_41);
lean::cnstr_set(x_161, 2, x_81);
lean::cnstr_set(x_161, 3, x_157);
lean::cnstr_set(x_161, 4, x_160);
return x_161;
}
else
{
obj* x_162; 
x_162 = lean::cnstr_get(x_112, 0);
lean::inc(x_162);
lean::dec(x_112);
switch (lean::obj_tag(x_162)) {
case 0:
{
obj* x_165; obj* x_168; obj* x_169; 
x_165 = lean::cnstr_get(x_162, 0);
lean::inc(x_165);
lean::dec(x_162);
if (lean::is_scalar(x_153)) {
 x_168 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_168 = x_153;
}
lean::cnstr_set(x_168, 0, x_165);
x_169 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_169, 0, x_20);
lean::cnstr_set(x_169, 1, x_41);
lean::cnstr_set(x_169, 2, x_81);
lean::cnstr_set(x_169, 3, x_157);
lean::cnstr_set(x_169, 4, x_168);
return x_169;
}
case 1:
{
obj* x_172; obj* x_173; 
lean::dec(x_162);
lean::dec(x_153);
x_172 = lean::box(0);
x_173 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_173, 0, x_20);
lean::cnstr_set(x_173, 1, x_41);
lean::cnstr_set(x_173, 2, x_81);
lean::cnstr_set(x_173, 3, x_157);
lean::cnstr_set(x_173, 4, x_172);
return x_173;
}
case 2:
{
obj* x_176; obj* x_177; 
lean::dec(x_162);
lean::dec(x_153);
x_176 = lean::box(0);
x_177 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_177, 0, x_20);
lean::cnstr_set(x_177, 1, x_41);
lean::cnstr_set(x_177, 2, x_81);
lean::cnstr_set(x_177, 3, x_157);
lean::cnstr_set(x_177, 4, x_176);
return x_177;
}
default:
{
obj* x_180; obj* x_181; 
lean::dec(x_162);
lean::dec(x_153);
x_180 = lean::box(0);
x_181 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_181, 0, x_20);
lean::cnstr_set(x_181, 1, x_41);
lean::cnstr_set(x_181, 2, x_81);
lean::cnstr_set(x_181, 3, x_157);
lean::cnstr_set(x_181, 4, x_180);
return x_181;
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_0 = l_lean_parser_term_struct__inst__item_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::box(0);
lean::inc(x_5);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_4);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_5);
return x_8;
}
}
obj* _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_term_struct__inst__with_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_term_struct__inst__type_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_19:
{
obj* x_26; obj* x_28; 
x_28 = l_lean_parser_syntax_as__node___main(x_18);
if (lean::obj_tag(x_28) == 0)
{
obj* x_30; 
lean::dec(x_28);
x_30 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3;
lean::inc(x_30);
x_26 = x_30;
goto lbl_27;
}
else
{
obj* x_32; obj* x_34; obj* x_35; 
x_32 = lean::cnstr_get(x_28, 0);
lean::inc(x_32);
if (lean::is_shared(x_28)) {
 lean::dec(x_28);
 x_34 = lean::box(0);
} else {
 lean::cnstr_release(x_28, 0);
 x_34 = x_28;
}
x_35 = lean::cnstr_get(x_32, 1);
lean::inc(x_35);
lean::dec(x_32);
if (lean::obj_tag(x_35) == 0)
{
obj* x_40; 
lean::dec(x_34);
lean::dec(x_35);
x_40 = lean::box(0);
x_26 = x_40;
goto lbl_27;
}
else
{
obj* x_41; obj* x_43; 
x_41 = lean::cnstr_get(x_35, 0);
lean::inc(x_41);
x_43 = lean::cnstr_get(x_35, 1);
lean::inc(x_43);
lean::dec(x_35);
if (lean::obj_tag(x_43) == 0)
{
obj* x_47; obj* x_48; obj* x_50; obj* x_51; 
lean::dec(x_43);
x_47 = l_lean_parser_term_struct__inst__type_has__view;
x_48 = lean::cnstr_get(x_47, 0);
lean::inc(x_48);
x_50 = lean::apply_1(x_48, x_41);
if (lean::is_scalar(x_34)) {
 x_51 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_51 = x_34;
}
lean::cnstr_set(x_51, 0, x_50);
x_26 = x_51;
goto lbl_27;
}
else
{
obj* x_55; 
lean::dec(x_43);
lean::dec(x_41);
lean::dec(x_34);
x_55 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3;
lean::inc(x_55);
x_26 = x_55;
goto lbl_27;
}
}
}
lbl_27:
{
obj* x_57; obj* x_58; 
if (lean::obj_tag(x_17) == 0)
{
obj* x_60; 
x_60 = lean::box(3);
x_57 = x_17;
x_58 = x_60;
goto lbl_59;
}
else
{
obj* x_61; obj* x_63; 
x_61 = lean::cnstr_get(x_17, 0);
lean::inc(x_61);
x_63 = lean::cnstr_get(x_17, 1);
lean::inc(x_63);
lean::dec(x_17);
x_57 = x_63;
x_58 = x_61;
goto lbl_59;
}
lbl_59:
{
obj* x_66; obj* x_68; 
x_68 = l_lean_parser_syntax_as__node___main(x_58);
if (lean::obj_tag(x_68) == 0)
{
obj* x_70; 
lean::dec(x_68);
x_70 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2;
lean::inc(x_70);
x_66 = x_70;
goto lbl_67;
}
else
{
obj* x_72; obj* x_74; obj* x_75; 
x_72 = lean::cnstr_get(x_68, 0);
lean::inc(x_72);
if (lean::is_shared(x_68)) {
 lean::dec(x_68);
 x_74 = lean::box(0);
} else {
 lean::cnstr_release(x_68, 0);
 x_74 = x_68;
}
x_75 = lean::cnstr_get(x_72, 1);
lean::inc(x_75);
lean::dec(x_72);
if (lean::obj_tag(x_75) == 0)
{
obj* x_80; 
lean::dec(x_75);
lean::dec(x_74);
x_80 = lean::box(0);
x_66 = x_80;
goto lbl_67;
}
else
{
obj* x_81; obj* x_83; 
x_81 = lean::cnstr_get(x_75, 0);
lean::inc(x_81);
x_83 = lean::cnstr_get(x_75, 1);
lean::inc(x_83);
lean::dec(x_75);
if (lean::obj_tag(x_83) == 0)
{
obj* x_87; obj* x_88; obj* x_90; obj* x_91; 
lean::dec(x_83);
x_87 = l_lean_parser_term_struct__inst__with_has__view;
x_88 = lean::cnstr_get(x_87, 0);
lean::inc(x_88);
x_90 = lean::apply_1(x_88, x_81);
if (lean::is_scalar(x_74)) {
 x_91 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_91 = x_74;
}
lean::cnstr_set(x_91, 0, x_90);
x_66 = x_91;
goto lbl_67;
}
else
{
obj* x_95; 
lean::dec(x_83);
lean::dec(x_81);
lean::dec(x_74);
x_95 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2;
lean::inc(x_95);
x_66 = x_95;
goto lbl_67;
}
}
}
lbl_67:
{
obj* x_97; obj* x_98; 
if (lean::obj_tag(x_57) == 0)
{
obj* x_100; 
x_100 = lean::box(3);
x_97 = x_57;
x_98 = x_100;
goto lbl_99;
}
else
{
obj* x_101; obj* x_103; 
x_101 = lean::cnstr_get(x_57, 0);
lean::inc(x_101);
x_103 = lean::cnstr_get(x_57, 1);
lean::inc(x_103);
lean::dec(x_57);
x_97 = x_103;
x_98 = x_101;
goto lbl_99;
}
lbl_99:
{
obj* x_106; 
x_106 = l_lean_parser_syntax_as__node___main(x_98);
if (lean::obj_tag(x_106) == 0)
{
obj* x_108; 
lean::dec(x_106);
x_108 = lean::box(0);
if (lean::obj_tag(x_97) == 0)
{
obj* x_110; obj* x_112; 
lean::dec(x_97);
x_110 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
lean::inc(x_110);
x_112 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_112, 0, x_5);
lean::cnstr_set(x_112, 1, x_26);
lean::cnstr_set(x_112, 2, x_66);
lean::cnstr_set(x_112, 3, x_110);
lean::cnstr_set(x_112, 4, x_108);
return x_112;
}
else
{
obj* x_113; 
x_113 = lean::cnstr_get(x_97, 0);
lean::inc(x_113);
lean::dec(x_97);
switch (lean::obj_tag(x_113)) {
case 0:
{
obj* x_117; obj* x_120; obj* x_121; obj* x_123; 
lean::dec(x_108);
x_117 = lean::cnstr_get(x_113, 0);
lean::inc(x_117);
lean::dec(x_113);
x_120 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_120, 0, x_117);
x_121 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
lean::inc(x_121);
x_123 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_123, 0, x_5);
lean::cnstr_set(x_123, 1, x_26);
lean::cnstr_set(x_123, 2, x_66);
lean::cnstr_set(x_123, 3, x_121);
lean::cnstr_set(x_123, 4, x_120);
return x_123;
}
case 1:
{
obj* x_125; obj* x_127; 
lean::dec(x_113);
x_125 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
lean::inc(x_125);
x_127 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_127, 0, x_5);
lean::cnstr_set(x_127, 1, x_26);
lean::cnstr_set(x_127, 2, x_66);
lean::cnstr_set(x_127, 3, x_125);
lean::cnstr_set(x_127, 4, x_108);
return x_127;
}
case 2:
{
obj* x_129; obj* x_131; 
lean::dec(x_113);
x_129 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
lean::inc(x_129);
x_131 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_131, 0, x_5);
lean::cnstr_set(x_131, 1, x_26);
lean::cnstr_set(x_131, 2, x_66);
lean::cnstr_set(x_131, 3, x_129);
lean::cnstr_set(x_131, 4, x_108);
return x_131;
}
default:
{
obj* x_133; obj* x_135; 
lean::dec(x_113);
x_133 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
lean::inc(x_133);
x_135 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_135, 0, x_5);
lean::cnstr_set(x_135, 1, x_26);
lean::cnstr_set(x_135, 2, x_66);
lean::cnstr_set(x_135, 3, x_133);
lean::cnstr_set(x_135, 4, x_108);
return x_135;
}
}
}
}
else
{
obj* x_136; obj* x_138; obj* x_139; obj* x_142; 
x_136 = lean::cnstr_get(x_106, 0);
lean::inc(x_136);
if (lean::is_shared(x_106)) {
 lean::dec(x_106);
 x_138 = lean::box(0);
} else {
 lean::cnstr_release(x_106, 0);
 x_138 = x_106;
}
x_139 = lean::cnstr_get(x_136, 1);
lean::inc(x_139);
lean::dec(x_136);
x_142 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__1(x_139);
if (lean::obj_tag(x_97) == 0)
{
obj* x_145; obj* x_146; 
lean::dec(x_138);
lean::dec(x_97);
x_145 = lean::box(0);
x_146 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_146, 0, x_5);
lean::cnstr_set(x_146, 1, x_26);
lean::cnstr_set(x_146, 2, x_66);
lean::cnstr_set(x_146, 3, x_142);
lean::cnstr_set(x_146, 4, x_145);
return x_146;
}
else
{
obj* x_147; 
x_147 = lean::cnstr_get(x_97, 0);
lean::inc(x_147);
lean::dec(x_97);
switch (lean::obj_tag(x_147)) {
case 0:
{
obj* x_150; obj* x_153; obj* x_154; 
x_150 = lean::cnstr_get(x_147, 0);
lean::inc(x_150);
lean::dec(x_147);
if (lean::is_scalar(x_138)) {
 x_153 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_153 = x_138;
}
lean::cnstr_set(x_153, 0, x_150);
x_154 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_154, 0, x_5);
lean::cnstr_set(x_154, 1, x_26);
lean::cnstr_set(x_154, 2, x_66);
lean::cnstr_set(x_154, 3, x_142);
lean::cnstr_set(x_154, 4, x_153);
return x_154;
}
case 1:
{
obj* x_157; obj* x_158; 
lean::dec(x_138);
lean::dec(x_147);
x_157 = lean::box(0);
x_158 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_158, 0, x_5);
lean::cnstr_set(x_158, 1, x_26);
lean::cnstr_set(x_158, 2, x_66);
lean::cnstr_set(x_158, 3, x_142);
lean::cnstr_set(x_158, 4, x_157);
return x_158;
}
case 2:
{
obj* x_161; obj* x_162; 
lean::dec(x_138);
lean::dec(x_147);
x_161 = lean::box(0);
x_162 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_162, 0, x_5);
lean::cnstr_set(x_162, 1, x_26);
lean::cnstr_set(x_162, 2, x_66);
lean::cnstr_set(x_162, 3, x_142);
lean::cnstr_set(x_162, 4, x_161);
return x_162;
}
default:
{
obj* x_165; obj* x_166; 
lean::dec(x_138);
lean::dec(x_147);
x_165 = lean::box(0);
x_166 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_166, 0, x_5);
lean::cnstr_set(x_166, 1, x_26);
lean::cnstr_set(x_166, 2, x_66);
lean::cnstr_set(x_166, 3, x_142);
lean::cnstr_set(x_166, 4, x_165);
return x_166;
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_14; obj* x_15; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_22; obj* x_24; obj* x_25; obj* x_26; obj* x_28; obj* x_29; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_12);
x_14 = l_option_map___rarg(x_12, x_1);
x_15 = lean::box(3);
lean::inc(x_15);
x_17 = l_option_get__or__else___main___rarg(x_14, x_15);
x_18 = l_list_map___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__2(x_7);
x_19 = l_list_join___main___rarg(x_18);
x_20 = l_lean_parser_no__kind;
lean::inc(x_20);
x_22 = l_lean_parser_syntax_mk__node(x_20, x_19);
lean::inc(x_12);
x_24 = l_option_map___rarg(x_12, x_9);
x_25 = l_option_get__or__else___main___rarg(x_24, x_15);
x_26 = lean::box(0);
lean::inc(x_26);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_25);
lean::cnstr_set(x_28, 1, x_26);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_22);
lean::cnstr_set(x_29, 1, x_28);
if (lean::obj_tag(x_3) == 0)
{
lean::dec(x_3);
if (lean::obj_tag(x_5) == 0)
{
obj* x_33; obj* x_35; obj* x_37; obj* x_38; obj* x_39; obj* x_41; 
lean::dec(x_5);
lean::dec(x_26);
x_33 = l_lean_parser_combinators_many___rarg___closed__1;
lean::inc(x_33);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_33);
lean::cnstr_set(x_35, 1, x_29);
lean::inc(x_33);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_33);
lean::cnstr_set(x_37, 1, x_35);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_17);
lean::cnstr_set(x_38, 1, x_37);
x_39 = l_lean_parser_term_struct__inst;
lean::inc(x_39);
x_41 = l_lean_parser_syntax_mk__node(x_39, x_38);
return x_41;
}
else
{
obj* x_42; obj* x_45; obj* x_46; obj* x_48; obj* x_49; obj* x_51; obj* x_52; obj* x_53; obj* x_55; obj* x_56; obj* x_57; obj* x_59; 
x_42 = lean::cnstr_get(x_5, 0);
lean::inc(x_42);
lean::dec(x_5);
x_45 = l_lean_parser_term_struct__inst__with_has__view;
x_46 = lean::cnstr_get(x_45, 1);
lean::inc(x_46);
x_48 = lean::apply_1(x_46, x_42);
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_48);
lean::cnstr_set(x_49, 1, x_26);
lean::inc(x_20);
x_51 = l_lean_parser_syntax_mk__node(x_20, x_49);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_29);
x_53 = l_lean_parser_combinators_many___rarg___closed__1;
lean::inc(x_53);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_53);
lean::cnstr_set(x_55, 1, x_52);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_17);
lean::cnstr_set(x_56, 1, x_55);
x_57 = l_lean_parser_term_struct__inst;
lean::inc(x_57);
x_59 = l_lean_parser_syntax_mk__node(x_57, x_56);
return x_59;
}
}
else
{
obj* x_60; obj* x_63; obj* x_64; obj* x_66; obj* x_68; obj* x_70; 
x_60 = lean::cnstr_get(x_3, 0);
lean::inc(x_60);
lean::dec(x_3);
x_63 = l_lean_parser_term_struct__inst__type_has__view;
x_64 = lean::cnstr_get(x_63, 1);
lean::inc(x_64);
x_66 = lean::apply_1(x_64, x_60);
lean::inc(x_26);
x_68 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_68, 0, x_66);
lean::cnstr_set(x_68, 1, x_26);
lean::inc(x_20);
x_70 = l_lean_parser_syntax_mk__node(x_20, x_68);
if (lean::obj_tag(x_5) == 0)
{
obj* x_73; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_80; 
lean::dec(x_5);
lean::dec(x_26);
x_73 = l_lean_parser_combinators_many___rarg___closed__1;
lean::inc(x_73);
x_75 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_75, 0, x_73);
lean::cnstr_set(x_75, 1, x_29);
x_76 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_76, 0, x_70);
lean::cnstr_set(x_76, 1, x_75);
x_77 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_77, 0, x_17);
lean::cnstr_set(x_77, 1, x_76);
x_78 = l_lean_parser_term_struct__inst;
lean::inc(x_78);
x_80 = l_lean_parser_syntax_mk__node(x_78, x_77);
return x_80;
}
else
{
obj* x_81; obj* x_84; obj* x_85; obj* x_87; obj* x_88; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_96; 
x_81 = lean::cnstr_get(x_5, 0);
lean::inc(x_81);
lean::dec(x_5);
x_84 = l_lean_parser_term_struct__inst__with_has__view;
x_85 = lean::cnstr_get(x_84, 1);
lean::inc(x_85);
x_87 = lean::apply_1(x_85, x_81);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_87);
lean::cnstr_set(x_88, 1, x_26);
lean::inc(x_20);
x_90 = l_lean_parser_syntax_mk__node(x_20, x_88);
x_91 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_91, 0, x_90);
lean::cnstr_set(x_91, 1, x_29);
x_92 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_92, 0, x_70);
lean::cnstr_set(x_92, 1, x_91);
x_93 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_93, 0, x_17);
lean::cnstr_set(x_93, 1, x_92);
x_94 = l_lean_parser_term_struct__inst;
lean::inc(x_94);
x_96 = l_lean_parser_syntax_mk__node(x_94, x_93);
return x_96;
}
}
}
}
obj* l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_7 = x_0;
}
if (lean::obj_tag(x_5) == 0)
{
obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_16; 
lean::dec(x_5);
x_9 = l_lean_parser_term_struct__inst__item_has__view;
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
x_12 = lean::apply_1(x_10, x_3);
x_13 = lean::box(0);
lean::inc(x_13);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_12);
lean::cnstr_set(x_15, 1, x_13);
if (lean::is_scalar(x_7)) {
 x_16 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_16 = x_7;
}
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_13);
return x_16;
}
else
{
obj* x_17; obj* x_19; obj* x_22; obj* x_23; obj* x_25; obj* x_26; 
x_17 = lean::cnstr_get(x_5, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_5, 1);
lean::inc(x_19);
lean::dec(x_5);
x_22 = l_lean_parser_term_struct__inst__item_has__view;
x_23 = lean::cnstr_get(x_22, 0);
lean::inc(x_23);
x_25 = lean::apply_1(x_23, x_3);
x_26 = l___private_1079072079__sep__by_view__aux___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__1(x_19);
switch (lean::obj_tag(x_17)) {
case 0:
{
obj* x_27; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_27 = lean::cnstr_get(x_17, 0);
lean::inc(x_27);
lean::dec(x_17);
x_30 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_30, 0, x_27);
x_31 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_31, 0, x_30);
x_32 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_32, 0, x_25);
lean::cnstr_set(x_32, 1, x_31);
if (lean::is_scalar(x_7)) {
 x_33 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_33 = x_7;
}
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_26);
return x_33;
}
case 1:
{
obj* x_35; obj* x_37; obj* x_38; 
lean::dec(x_17);
x_35 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_35);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_25);
lean::cnstr_set(x_37, 1, x_35);
if (lean::is_scalar(x_7)) {
 x_38 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_38 = x_7;
}
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_26);
return x_38;
}
case 2:
{
obj* x_40; obj* x_42; obj* x_43; 
lean::dec(x_17);
x_40 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_40);
x_42 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_42, 0, x_25);
lean::cnstr_set(x_42, 1, x_40);
if (lean::is_scalar(x_7)) {
 x_43 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_43 = x_7;
}
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_26);
return x_43;
}
default:
{
obj* x_45; obj* x_47; obj* x_48; 
lean::dec(x_17);
x_45 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
lean::inc(x_45);
x_47 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_47, 0, x_25);
lean::cnstr_set(x_47, 1, x_45);
if (lean::is_scalar(x_7)) {
 x_48 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_48 = x_7;
}
lean::cnstr_set(x_48, 0, x_47);
lean::cnstr_set(x_48, 1, x_26);
return x_48;
}
}
}
}
}
}
obj* l_list_map___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__2(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_8; obj* x_10; obj* x_13; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_7 = x_0;
}
x_8 = lean::cnstr_get(x_3, 0);
lean::inc(x_8);
x_10 = lean::cnstr_get(x_3, 1);
lean::inc(x_10);
lean::dec(x_3);
x_13 = l_list_map___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__2(x_5);
if (lean::obj_tag(x_10) == 0)
{
obj* x_15; obj* x_16; obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
lean::dec(x_10);
x_15 = l_lean_parser_term_struct__inst__item_has__view;
x_16 = lean::cnstr_get(x_15, 1);
lean::inc(x_16);
x_18 = lean::apply_1(x_16, x_8);
x_19 = lean::box(0);
if (lean::is_scalar(x_7)) {
 x_20 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_20 = x_7;
}
lean::cnstr_set(x_20, 0, x_18);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_13);
return x_21;
}
else
{
obj* x_22; obj* x_25; obj* x_26; obj* x_28; obj* x_29; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; 
x_22 = lean::cnstr_get(x_10, 0);
lean::inc(x_22);
lean::dec(x_10);
x_25 = l_lean_parser_term_struct__inst__item_has__view;
x_26 = lean::cnstr_get(x_25, 1);
lean::inc(x_26);
x_28 = lean::apply_1(x_26, x_8);
x_29 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_29);
x_31 = l_option_map___rarg(x_29, x_22);
x_32 = lean::box(3);
x_33 = l_option_get__or__else___main___rarg(x_31, x_32);
x_34 = lean::box(0);
if (lean::is_scalar(x_7)) {
 x_35 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_35 = x_7;
}
lean::cnstr_set(x_35, 0, x_33);
lean::cnstr_set(x_35, 1, x_34);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_28);
lean::cnstr_set(x_36, 1, x_35);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_13);
return x_37;
}
}
}
}
obj* _init_l_lean_parser_term_struct__inst_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_struct__inst_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_struct__inst_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_struct__inst;
x_6 = l_lean_parser_term_struct__inst_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_struct__inst_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_27; obj* x_29; obj* x_31; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_39; obj* x_41; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_49; obj* x_50; obj* x_51; obj* x_53; obj* x_55; obj* x_56; obj* x_58; obj* x_59; obj* x_60; obj* x_62; obj* x_64; obj* x_65; obj* x_67; obj* x_69; obj* x_70; obj* x_72; obj* x_73; obj* x_74; obj* x_76; obj* x_78; unsigned char x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; 
x_0 = lean::mk_string("{");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_string(" . ");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::mk_nat_obj(0u);
lean::inc(x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_13, 0, x_8);
lean::closure_set(x_13, 1, x_11);
lean::closure_set(x_13, 2, x_10);
x_14 = lean::box(0);
lean::inc(x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_13);
lean::cnstr_set(x_16, 1, x_14);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
lean::inc(x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_16);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst_parser___lambda__1), 6, 1);
lean::closure_set(x_20, 0, x_19);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_21, 0, x_20);
lean::inc(x_11);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_23, 0, x_11);
x_24 = lean::mk_string(" with ");
x_25 = l_string_trim(x_24);
lean::inc(x_25);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_27, 0, x_25);
lean::inc(x_11);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_29, 0, x_25);
lean::closure_set(x_29, 1, x_11);
lean::closure_set(x_29, 2, x_27);
lean::inc(x_14);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_29);
lean::cnstr_set(x_31, 1, x_14);
lean::inc(x_23);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_23);
lean::cnstr_set(x_33, 1, x_31);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst_parser___lambda__2), 6, 1);
lean::closure_set(x_34, 0, x_33);
x_35 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_35, 0, x_34);
x_36 = lean::mk_string(" := ");
x_37 = l_string_trim(x_36);
lean::inc(x_37);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_39, 0, x_37);
lean::inc(x_11);
x_41 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_41, 0, x_37);
lean::closure_set(x_41, 1, x_11);
lean::closure_set(x_41, 2, x_39);
lean::inc(x_14);
lean::inc(x_23);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_23);
lean::cnstr_set(x_44, 1, x_14);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_41);
lean::cnstr_set(x_45, 1, x_44);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_17);
lean::cnstr_set(x_46, 1, x_45);
x_47 = l_lean_parser_term_struct__inst__field;
lean::inc(x_47);
x_49 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_49, 0, x_47);
lean::closure_set(x_49, 1, x_46);
x_50 = lean::mk_string("..");
x_51 = l_string_trim(x_50);
lean::inc(x_51);
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_53, 0, x_51);
lean::inc(x_11);
x_55 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_55, 0, x_51);
lean::closure_set(x_55, 1, x_11);
lean::closure_set(x_55, 2, x_53);
x_56 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_56, 0, x_23);
lean::inc(x_14);
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_56);
lean::cnstr_set(x_58, 1, x_14);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_55);
lean::cnstr_set(x_59, 1, x_58);
x_60 = l_lean_parser_term_struct__inst__source;
lean::inc(x_60);
x_62 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_62, 0, x_60);
lean::closure_set(x_62, 1, x_59);
lean::inc(x_14);
x_64 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_64, 0, x_62);
lean::cnstr_set(x_64, 1, x_14);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_49);
lean::cnstr_set(x_65, 1, x_64);
lean::inc(x_11);
x_67 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_67, 0, x_65);
lean::closure_set(x_67, 1, x_11);
lean::inc(x_14);
x_69 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_69, 0, x_67);
lean::cnstr_set(x_69, 1, x_14);
x_70 = l_lean_parser_term_struct__inst__item;
lean::inc(x_70);
x_72 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_72, 0, x_70);
lean::closure_set(x_72, 1, x_69);
x_73 = lean::mk_string(", ");
x_74 = l_string_trim(x_73);
lean::inc(x_74);
x_76 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_76, 0, x_74);
lean::inc(x_11);
x_78 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_78, 0, x_74);
lean::closure_set(x_78, 1, x_11);
lean::closure_set(x_78, 2, x_76);
x_79 = 1;
x_80 = lean::box(x_79);
x_81 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser___spec__1___boxed), 8, 3);
lean::closure_set(x_81, 0, x_72);
lean::closure_set(x_81, 1, x_78);
lean::closure_set(x_81, 2, x_80);
x_82 = lean::mk_string("}");
x_83 = l_string_trim(x_82);
lean::inc(x_83);
x_85 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_85, 0, x_83);
x_86 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_86, 0, x_83);
lean::closure_set(x_86, 1, x_11);
lean::closure_set(x_86, 2, x_85);
x_87 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_87, 0, x_86);
lean::cnstr_set(x_87, 1, x_14);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_81);
lean::cnstr_set(x_88, 1, x_87);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_35);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_21);
lean::cnstr_set(x_90, 1, x_89);
x_91 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_91, 0, x_6);
lean::cnstr_set(x_91, 1, x_90);
return x_91;
}
}
obj* l_lean_parser_term_struct__inst_parser___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_8; obj* x_9; obj* x_11; obj* x_13; obj* x_14; obj* x_15; 
x_6 = l_lean_parser_term_struct__inst__type;
lean::inc(x_6);
x_8 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_6, x_0, x_1, x_2, x_3, x_4, x_5);
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_13 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_release(x_8, 1);
 x_13 = x_8;
}
x_14 = l_lean_parser_parsec__t_try__mk__res___rarg(x_9);
if (lean::is_scalar(x_13)) {
 x_15 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_15 = x_13;
}
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_11);
return x_15;
}
}
obj* l_lean_parser_term_struct__inst_parser___lambda__2(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_8; obj* x_9; obj* x_11; obj* x_13; obj* x_14; obj* x_15; 
x_6 = l_lean_parser_term_struct__inst__with;
lean::inc(x_6);
x_8 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_6, x_0, x_1, x_2, x_3, x_4, x_5);
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_13 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_release(x_8, 1);
 x_13 = x_8;
}
x_14 = l_lean_parser_parsec__t_try__mk__res___rarg(x_9);
if (lean::is_scalar(x_13)) {
 x_15 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_15 = x_13;
}
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_11);
return x_15;
}
}
obj* _init_l_lean_parser_term_struct__inst_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_27; obj* x_29; obj* x_31; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_39; obj* x_41; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_49; obj* x_50; obj* x_51; obj* x_53; obj* x_55; obj* x_56; obj* x_58; obj* x_59; obj* x_60; obj* x_62; obj* x_64; obj* x_65; obj* x_67; obj* x_69; obj* x_70; obj* x_72; obj* x_73; obj* x_74; obj* x_76; obj* x_78; unsigned char x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_104; 
x_0 = lean::mk_string("{");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_string(" . ");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::mk_nat_obj(0u);
lean::inc(x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_13, 0, x_8);
lean::closure_set(x_13, 1, x_11);
lean::closure_set(x_13, 2, x_10);
x_14 = lean::box(0);
lean::inc(x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_13);
lean::cnstr_set(x_16, 1, x_14);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
lean::inc(x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_16);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst_parser___lambda__1), 6, 1);
lean::closure_set(x_20, 0, x_19);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_21, 0, x_20);
lean::inc(x_11);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_23, 0, x_11);
x_24 = lean::mk_string(" with ");
x_25 = l_string_trim(x_24);
lean::inc(x_25);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_27, 0, x_25);
lean::inc(x_11);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_29, 0, x_25);
lean::closure_set(x_29, 1, x_11);
lean::closure_set(x_29, 2, x_27);
lean::inc(x_14);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_29);
lean::cnstr_set(x_31, 1, x_14);
lean::inc(x_23);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_23);
lean::cnstr_set(x_33, 1, x_31);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst_parser___lambda__2), 6, 1);
lean::closure_set(x_34, 0, x_33);
x_35 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_35, 0, x_34);
x_36 = lean::mk_string(" := ");
x_37 = l_string_trim(x_36);
lean::inc(x_37);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_39, 0, x_37);
lean::inc(x_11);
x_41 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_41, 0, x_37);
lean::closure_set(x_41, 1, x_11);
lean::closure_set(x_41, 2, x_39);
lean::inc(x_14);
lean::inc(x_23);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_23);
lean::cnstr_set(x_44, 1, x_14);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_41);
lean::cnstr_set(x_45, 1, x_44);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_17);
lean::cnstr_set(x_46, 1, x_45);
x_47 = l_lean_parser_term_struct__inst__field;
lean::inc(x_47);
x_49 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_49, 0, x_47);
lean::closure_set(x_49, 1, x_46);
x_50 = lean::mk_string("..");
x_51 = l_string_trim(x_50);
lean::inc(x_51);
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_53, 0, x_51);
lean::inc(x_11);
x_55 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_55, 0, x_51);
lean::closure_set(x_55, 1, x_11);
lean::closure_set(x_55, 2, x_53);
x_56 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__7), 6, 1);
lean::closure_set(x_56, 0, x_23);
lean::inc(x_14);
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_56);
lean::cnstr_set(x_58, 1, x_14);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_55);
lean::cnstr_set(x_59, 1, x_58);
x_60 = l_lean_parser_term_struct__inst__source;
lean::inc(x_60);
x_62 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_62, 0, x_60);
lean::closure_set(x_62, 1, x_59);
lean::inc(x_14);
x_64 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_64, 0, x_62);
lean::cnstr_set(x_64, 1, x_14);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_49);
lean::cnstr_set(x_65, 1, x_64);
lean::inc(x_11);
x_67 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__3), 7, 2);
lean::closure_set(x_67, 0, x_65);
lean::closure_set(x_67, 1, x_11);
lean::inc(x_14);
x_69 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_69, 0, x_67);
lean::cnstr_set(x_69, 1, x_14);
x_70 = l_lean_parser_term_struct__inst__item;
lean::inc(x_70);
x_72 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5), 7, 2);
lean::closure_set(x_72, 0, x_70);
lean::closure_set(x_72, 1, x_69);
x_73 = lean::mk_string(", ");
x_74 = l_string_trim(x_73);
lean::inc(x_74);
x_76 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_76, 0, x_74);
lean::inc(x_11);
x_78 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_78, 0, x_74);
lean::closure_set(x_78, 1, x_11);
lean::closure_set(x_78, 2, x_76);
x_79 = 1;
x_80 = lean::box(x_79);
x_81 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser___spec__1___boxed), 8, 3);
lean::closure_set(x_81, 0, x_72);
lean::closure_set(x_81, 1, x_78);
lean::closure_set(x_81, 2, x_80);
x_82 = lean::mk_string("}");
x_83 = l_string_trim(x_82);
lean::inc(x_83);
x_85 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_85, 0, x_83);
x_86 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_86, 0, x_83);
lean::closure_set(x_86, 1, x_11);
lean::closure_set(x_86, 2, x_85);
x_87 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_87, 0, x_86);
lean::cnstr_set(x_87, 1, x_14);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_81);
lean::cnstr_set(x_88, 1, x_87);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_35);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_21);
lean::cnstr_set(x_90, 1, x_89);
x_91 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_91, 0, x_6);
lean::cnstr_set(x_91, 1, x_90);
x_92 = l_lean_parser_term__parser__m_monad;
x_93 = l_lean_parser_term__parser__m_monad__except;
x_94 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_95 = l_lean_parser_term__parser__m_alternative;
x_96 = l_lean_parser_term_struct__inst;
x_97 = l_lean_parser_term_struct__inst_has__view;
lean::inc(x_97);
lean::inc(x_96);
lean::inc(x_95);
lean::inc(x_94);
lean::inc(x_93);
lean::inc(x_92);
x_104 = l_lean_parser_combinators_node_view___rarg(x_92, x_93, x_94, x_95, x_96, x_91, x_97);
return x_104;
}
}
obj* _init_l_lean_parser_term_struct__inst_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_29; obj* x_32; obj* x_33; obj* x_35; obj* x_36; obj* x_37; obj* x_39; obj* x_41; obj* x_43; obj* x_44; obj* x_45; obj* x_47; obj* x_48; obj* x_49; obj* x_51; obj* x_52; obj* x_53; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; 
x_0 = lean::mk_string("{");
x_1 = l_lean_parser_max__prec;
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::box(0);
x_5 = lean::mk_string(" . ");
x_6 = lean::mk_nat_obj(0u);
lean::inc(x_6);
x_8 = l_lean_parser_symbol_tokens___rarg(x_5, x_6);
lean::inc(x_4);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_8, x_4);
lean::inc(x_4);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_4, x_10);
x_13 = l_lean_parser_tokens___rarg(x_12);
x_14 = l_lean_parser_tokens___rarg(x_13);
x_15 = l_lean_parser_tokens___rarg(x_14);
x_16 = lean::mk_string(" with ");
lean::inc(x_6);
x_18 = l_lean_parser_symbol_tokens___rarg(x_16, x_6);
lean::inc(x_4);
x_20 = l_lean_parser_list_cons_tokens___rarg(x_18, x_4);
x_21 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_21);
x_23 = l_lean_parser_list_cons_tokens___rarg(x_21, x_20);
x_24 = l_lean_parser_tokens___rarg(x_23);
x_25 = l_lean_parser_tokens___rarg(x_24);
x_26 = l_lean_parser_tokens___rarg(x_25);
x_27 = lean::mk_string(" := ");
lean::inc(x_6);
x_29 = l_lean_parser_symbol_tokens___rarg(x_27, x_6);
lean::inc(x_4);
lean::inc(x_21);
x_32 = l_lean_parser_list_cons_tokens___rarg(x_21, x_4);
x_33 = l_lean_parser_list_cons_tokens___rarg(x_29, x_32);
lean::inc(x_4);
x_35 = l_lean_parser_list_cons_tokens___rarg(x_4, x_33);
x_36 = l_lean_parser_tokens___rarg(x_35);
x_37 = lean::mk_string("..");
lean::inc(x_6);
x_39 = l_lean_parser_symbol_tokens___rarg(x_37, x_6);
lean::inc(x_21);
x_41 = l_lean_parser_tokens___rarg(x_21);
lean::inc(x_4);
x_43 = l_lean_parser_list_cons_tokens___rarg(x_41, x_4);
x_44 = l_lean_parser_list_cons_tokens___rarg(x_39, x_43);
x_45 = l_lean_parser_tokens___rarg(x_44);
lean::inc(x_4);
x_47 = l_lean_parser_list_cons_tokens___rarg(x_45, x_4);
x_48 = l_lean_parser_list_cons_tokens___rarg(x_36, x_47);
x_49 = l_lean_parser_tokens___rarg(x_48);
lean::inc(x_4);
x_51 = l_lean_parser_list_cons_tokens___rarg(x_49, x_4);
x_52 = l_lean_parser_tokens___rarg(x_51);
x_53 = lean::mk_string(", ");
lean::inc(x_6);
x_55 = l_lean_parser_symbol_tokens___rarg(x_53, x_6);
x_56 = l_lean_parser_combinators_sep__by_tokens___rarg(x_52, x_55);
x_57 = lean::mk_string("}");
x_58 = l_lean_parser_symbol_tokens___rarg(x_57, x_6);
x_59 = l_lean_parser_list_cons_tokens___rarg(x_58, x_4);
x_60 = l_lean_parser_list_cons_tokens___rarg(x_56, x_59);
x_61 = l_lean_parser_list_cons_tokens___rarg(x_26, x_60);
x_62 = l_lean_parser_list_cons_tokens___rarg(x_15, x_61);
x_63 = l_lean_parser_list_cons_tokens___rarg(x_3, x_62);
x_64 = l_lean_parser_tokens___rarg(x_63);
return x_64;
}
}
obj* _init_l_lean_parser_term_subtype() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("subtype");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_subtype_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_subtype_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_subtype_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_subtype_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_subtype_has__view_x_27___lambda__1___closed__1;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_2, 0);
lean::inc(x_22);
lean::dec(x_2);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_20 = x_25;
goto lbl_21;
}
case 1:
{
obj* x_27; 
lean::dec(x_2);
x_27 = lean::box(0);
x_20 = x_27;
goto lbl_21;
}
case 2:
{
obj* x_29; 
lean::dec(x_2);
x_29 = lean::box(0);
x_20 = x_29;
goto lbl_21;
}
default:
{
obj* x_31; 
lean::dec(x_2);
x_31 = lean::box(0);
x_20 = x_31;
goto lbl_21;
}
}
lbl_21:
{
obj* x_32; obj* x_33; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_35; 
x_35 = lean::box(3);
x_32 = x_1;
x_33 = x_35;
goto lbl_34;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_1, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
lean::dec(x_1);
x_32 = x_38;
x_33 = x_36;
goto lbl_34;
}
lbl_34:
{
obj* x_41; 
switch (lean::obj_tag(x_33)) {
case 0:
{
obj* x_44; 
lean::dec(x_33);
x_44 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_44);
x_41 = x_44;
goto lbl_42;
}
case 1:
{
obj* x_46; 
x_46 = lean::cnstr_get(x_33, 0);
lean::inc(x_46);
lean::dec(x_33);
x_41 = x_46;
goto lbl_42;
}
case 2:
{
obj* x_50; 
lean::dec(x_33);
x_50 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_50);
x_41 = x_50;
goto lbl_42;
}
default:
{
obj* x_53; 
lean::dec(x_33);
x_53 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_53);
x_41 = x_53;
goto lbl_42;
}
}
lbl_42:
{
obj* x_55; obj* x_56; 
if (lean::obj_tag(x_32) == 0)
{
obj* x_58; 
x_58 = lean::box(3);
x_55 = x_32;
x_56 = x_58;
goto lbl_57;
}
else
{
obj* x_59; obj* x_61; 
x_59 = lean::cnstr_get(x_32, 0);
lean::inc(x_59);
x_61 = lean::cnstr_get(x_32, 1);
lean::inc(x_61);
lean::dec(x_32);
x_55 = x_61;
x_56 = x_59;
goto lbl_57;
}
lbl_57:
{
obj* x_64; obj* x_66; 
x_66 = l_lean_parser_syntax_as__node___main(x_56);
if (lean::obj_tag(x_66) == 0)
{
obj* x_68; 
lean::dec(x_66);
x_68 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_68);
x_64 = x_68;
goto lbl_65;
}
else
{
obj* x_70; obj* x_72; obj* x_73; 
x_70 = lean::cnstr_get(x_66, 0);
lean::inc(x_70);
if (lean::is_shared(x_66)) {
 lean::dec(x_66);
 x_72 = lean::box(0);
} else {
 lean::cnstr_release(x_66, 0);
 x_72 = x_66;
}
x_73 = lean::cnstr_get(x_70, 1);
lean::inc(x_73);
lean::dec(x_70);
if (lean::obj_tag(x_73) == 0)
{
obj* x_78; 
lean::dec(x_72);
lean::dec(x_73);
x_78 = lean::box(0);
x_64 = x_78;
goto lbl_65;
}
else
{
obj* x_79; obj* x_81; 
x_79 = lean::cnstr_get(x_73, 0);
lean::inc(x_79);
x_81 = lean::cnstr_get(x_73, 1);
lean::inc(x_81);
lean::dec(x_73);
if (lean::obj_tag(x_81) == 0)
{
obj* x_85; obj* x_86; obj* x_88; obj* x_89; 
lean::dec(x_81);
x_85 = l_lean_parser_term_type__spec_has__view;
x_86 = lean::cnstr_get(x_85, 0);
lean::inc(x_86);
x_88 = lean::apply_1(x_86, x_79);
if (lean::is_scalar(x_72)) {
 x_89 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_89 = x_72;
}
lean::cnstr_set(x_89, 0, x_88);
x_64 = x_89;
goto lbl_65;
}
else
{
obj* x_93; 
lean::dec(x_79);
lean::dec(x_81);
lean::dec(x_72);
x_93 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_93);
x_64 = x_93;
goto lbl_65;
}
}
}
lbl_65:
{
obj* x_95; obj* x_96; obj* x_97; obj* x_99; obj* x_100; 
if (lean::obj_tag(x_55) == 0)
{
obj* x_102; 
x_102 = lean::box(3);
x_99 = x_55;
x_100 = x_102;
goto lbl_101;
}
else
{
obj* x_103; obj* x_105; 
x_103 = lean::cnstr_get(x_55, 0);
lean::inc(x_103);
x_105 = lean::cnstr_get(x_55, 1);
lean::inc(x_105);
lean::dec(x_55);
x_99 = x_105;
x_100 = x_103;
goto lbl_101;
}
lbl_98:
{
if (lean::obj_tag(x_97) == 0)
{
obj* x_109; obj* x_110; 
lean::dec(x_97);
x_109 = lean::box(0);
x_110 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_110, 0, x_20);
lean::cnstr_set(x_110, 1, x_41);
lean::cnstr_set(x_110, 2, x_64);
lean::cnstr_set(x_110, 3, x_95);
lean::cnstr_set(x_110, 4, x_96);
lean::cnstr_set(x_110, 5, x_109);
return x_110;
}
else
{
obj* x_111; 
x_111 = lean::cnstr_get(x_97, 0);
lean::inc(x_111);
lean::dec(x_97);
switch (lean::obj_tag(x_111)) {
case 0:
{
obj* x_114; obj* x_117; obj* x_118; 
x_114 = lean::cnstr_get(x_111, 0);
lean::inc(x_114);
lean::dec(x_111);
x_117 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_117, 0, x_114);
x_118 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_118, 0, x_20);
lean::cnstr_set(x_118, 1, x_41);
lean::cnstr_set(x_118, 2, x_64);
lean::cnstr_set(x_118, 3, x_95);
lean::cnstr_set(x_118, 4, x_96);
lean::cnstr_set(x_118, 5, x_117);
return x_118;
}
case 1:
{
obj* x_120; obj* x_121; 
lean::dec(x_111);
x_120 = lean::box(0);
x_121 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_121, 0, x_20);
lean::cnstr_set(x_121, 1, x_41);
lean::cnstr_set(x_121, 2, x_64);
lean::cnstr_set(x_121, 3, x_95);
lean::cnstr_set(x_121, 4, x_96);
lean::cnstr_set(x_121, 5, x_120);
return x_121;
}
case 2:
{
obj* x_123; obj* x_124; 
lean::dec(x_111);
x_123 = lean::box(0);
x_124 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_124, 0, x_20);
lean::cnstr_set(x_124, 1, x_41);
lean::cnstr_set(x_124, 2, x_64);
lean::cnstr_set(x_124, 3, x_95);
lean::cnstr_set(x_124, 4, x_96);
lean::cnstr_set(x_124, 5, x_123);
return x_124;
}
default:
{
obj* x_126; obj* x_127; 
lean::dec(x_111);
x_126 = lean::box(0);
x_127 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_127, 0, x_20);
lean::cnstr_set(x_127, 1, x_41);
lean::cnstr_set(x_127, 2, x_64);
lean::cnstr_set(x_127, 3, x_95);
lean::cnstr_set(x_127, 4, x_96);
lean::cnstr_set(x_127, 5, x_126);
return x_127;
}
}
}
}
lbl_101:
{
obj* x_128; 
switch (lean::obj_tag(x_100)) {
case 0:
{
obj* x_130; obj* x_133; 
x_130 = lean::cnstr_get(x_100, 0);
lean::inc(x_130);
lean::dec(x_100);
x_133 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_133, 0, x_130);
if (lean::obj_tag(x_99) == 0)
{
x_128 = x_133;
goto lbl_129;
}
else
{
obj* x_134; obj* x_136; 
x_134 = lean::cnstr_get(x_99, 0);
lean::inc(x_134);
x_136 = lean::cnstr_get(x_99, 1);
lean::inc(x_136);
lean::dec(x_99);
x_95 = x_133;
x_96 = x_134;
x_97 = x_136;
goto lbl_98;
}
}
case 1:
{
obj* x_140; 
lean::dec(x_100);
x_140 = lean::box(0);
if (lean::obj_tag(x_99) == 0)
{
x_128 = x_140;
goto lbl_129;
}
else
{
obj* x_141; obj* x_143; 
x_141 = lean::cnstr_get(x_99, 0);
lean::inc(x_141);
x_143 = lean::cnstr_get(x_99, 1);
lean::inc(x_143);
lean::dec(x_99);
x_95 = x_140;
x_96 = x_141;
x_97 = x_143;
goto lbl_98;
}
}
case 2:
{
obj* x_147; 
lean::dec(x_100);
x_147 = lean::box(0);
if (lean::obj_tag(x_99) == 0)
{
x_128 = x_147;
goto lbl_129;
}
else
{
obj* x_148; obj* x_150; 
x_148 = lean::cnstr_get(x_99, 0);
lean::inc(x_148);
x_150 = lean::cnstr_get(x_99, 1);
lean::inc(x_150);
lean::dec(x_99);
x_95 = x_147;
x_96 = x_148;
x_97 = x_150;
goto lbl_98;
}
}
default:
{
obj* x_154; 
lean::dec(x_100);
x_154 = lean::box(0);
if (lean::obj_tag(x_99) == 0)
{
x_128 = x_154;
goto lbl_129;
}
else
{
obj* x_155; obj* x_157; 
x_155 = lean::cnstr_get(x_99, 0);
lean::inc(x_155);
x_157 = lean::cnstr_get(x_99, 1);
lean::inc(x_157);
lean::dec(x_99);
x_95 = x_154;
x_96 = x_155;
x_97 = x_157;
goto lbl_98;
}
}
}
lbl_129:
{
if (lean::obj_tag(x_99) == 0)
{
obj* x_161; obj* x_162; obj* x_163; 
lean::dec(x_99);
x_161 = lean::box(0);
x_162 = lean::box(3);
x_163 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_163, 0, x_20);
lean::cnstr_set(x_163, 1, x_41);
lean::cnstr_set(x_163, 2, x_64);
lean::cnstr_set(x_163, 3, x_128);
lean::cnstr_set(x_163, 4, x_162);
lean::cnstr_set(x_163, 5, x_161);
return x_163;
}
else
{
obj* x_164; 
x_164 = lean::cnstr_get(x_99, 0);
lean::inc(x_164);
lean::dec(x_99);
switch (lean::obj_tag(x_164)) {
case 0:
{
obj* x_167; obj* x_170; obj* x_171; obj* x_172; 
x_167 = lean::cnstr_get(x_164, 0);
lean::inc(x_167);
lean::dec(x_164);
x_170 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_170, 0, x_167);
x_171 = lean::box(3);
x_172 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_172, 0, x_20);
lean::cnstr_set(x_172, 1, x_41);
lean::cnstr_set(x_172, 2, x_64);
lean::cnstr_set(x_172, 3, x_128);
lean::cnstr_set(x_172, 4, x_171);
lean::cnstr_set(x_172, 5, x_170);
return x_172;
}
case 1:
{
obj* x_174; obj* x_175; obj* x_176; 
lean::dec(x_164);
x_174 = lean::box(0);
x_175 = lean::box(3);
x_176 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_176, 0, x_20);
lean::cnstr_set(x_176, 1, x_41);
lean::cnstr_set(x_176, 2, x_64);
lean::cnstr_set(x_176, 3, x_128);
lean::cnstr_set(x_176, 4, x_175);
lean::cnstr_set(x_176, 5, x_174);
return x_176;
}
case 2:
{
obj* x_178; obj* x_179; obj* x_180; 
lean::dec(x_164);
x_178 = lean::box(0);
x_179 = lean::box(3);
x_180 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_180, 0, x_20);
lean::cnstr_set(x_180, 1, x_41);
lean::cnstr_set(x_180, 2, x_64);
lean::cnstr_set(x_180, 3, x_128);
lean::cnstr_set(x_180, 4, x_179);
lean::cnstr_set(x_180, 5, x_178);
return x_180;
}
default:
{
obj* x_182; obj* x_183; obj* x_184; 
lean::dec(x_164);
x_182 = lean::box(0);
x_183 = lean::box(3);
x_184 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_184, 0, x_20);
lean::cnstr_set(x_184, 1, x_41);
lean::cnstr_set(x_184, 2, x_64);
lean::cnstr_set(x_184, 3, x_128);
lean::cnstr_set(x_184, 4, x_183);
lean::cnstr_set(x_184, 5, x_182);
return x_184;
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_subtype_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 1:
{
obj* x_12; 
lean::dec(x_1);
x_12 = lean::box(0);
x_5 = x_12;
goto lbl_6;
}
case 2:
{
obj* x_14; 
lean::dec(x_1);
x_14 = lean::box(0);
x_5 = x_14;
goto lbl_6;
}
default:
{
obj* x_16; 
lean::dec(x_1);
x_16 = lean::box(0);
x_5 = x_16;
goto lbl_6;
}
}
lbl_6:
{
obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_19:
{
obj* x_26; 
switch (lean::obj_tag(x_18)) {
case 0:
{
obj* x_29; 
lean::dec(x_18);
x_29 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_29);
x_26 = x_29;
goto lbl_27;
}
case 1:
{
obj* x_31; 
x_31 = lean::cnstr_get(x_18, 0);
lean::inc(x_31);
lean::dec(x_18);
x_26 = x_31;
goto lbl_27;
}
case 2:
{
obj* x_35; 
lean::dec(x_18);
x_35 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_35);
x_26 = x_35;
goto lbl_27;
}
default:
{
obj* x_38; 
lean::dec(x_18);
x_38 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
lean::inc(x_38);
x_26 = x_38;
goto lbl_27;
}
}
lbl_27:
{
obj* x_40; obj* x_41; 
if (lean::obj_tag(x_17) == 0)
{
obj* x_43; 
x_43 = lean::box(3);
x_40 = x_17;
x_41 = x_43;
goto lbl_42;
}
else
{
obj* x_44; obj* x_46; 
x_44 = lean::cnstr_get(x_17, 0);
lean::inc(x_44);
x_46 = lean::cnstr_get(x_17, 1);
lean::inc(x_46);
lean::dec(x_17);
x_40 = x_46;
x_41 = x_44;
goto lbl_42;
}
lbl_42:
{
obj* x_49; obj* x_51; 
x_51 = l_lean_parser_syntax_as__node___main(x_41);
if (lean::obj_tag(x_51) == 0)
{
obj* x_53; 
lean::dec(x_51);
x_53 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_53);
x_49 = x_53;
goto lbl_50;
}
else
{
obj* x_55; obj* x_57; obj* x_58; 
x_55 = lean::cnstr_get(x_51, 0);
lean::inc(x_55);
if (lean::is_shared(x_51)) {
 lean::dec(x_51);
 x_57 = lean::box(0);
} else {
 lean::cnstr_release(x_51, 0);
 x_57 = x_51;
}
x_58 = lean::cnstr_get(x_55, 1);
lean::inc(x_58);
lean::dec(x_55);
if (lean::obj_tag(x_58) == 0)
{
obj* x_63; 
lean::dec(x_57);
lean::dec(x_58);
x_63 = lean::box(0);
x_49 = x_63;
goto lbl_50;
}
else
{
obj* x_64; obj* x_66; 
x_64 = lean::cnstr_get(x_58, 0);
lean::inc(x_64);
x_66 = lean::cnstr_get(x_58, 1);
lean::inc(x_66);
lean::dec(x_58);
if (lean::obj_tag(x_66) == 0)
{
obj* x_70; obj* x_71; obj* x_73; obj* x_74; 
lean::dec(x_66);
x_70 = l_lean_parser_term_type__spec_has__view;
x_71 = lean::cnstr_get(x_70, 0);
lean::inc(x_71);
x_73 = lean::apply_1(x_71, x_64);
if (lean::is_scalar(x_57)) {
 x_74 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_74 = x_57;
}
lean::cnstr_set(x_74, 0, x_73);
x_49 = x_74;
goto lbl_50;
}
else
{
obj* x_78; 
lean::dec(x_66);
lean::dec(x_57);
lean::dec(x_64);
x_78 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
lean::inc(x_78);
x_49 = x_78;
goto lbl_50;
}
}
}
lbl_50:
{
obj* x_80; obj* x_81; obj* x_82; obj* x_84; obj* x_85; 
if (lean::obj_tag(x_40) == 0)
{
obj* x_87; 
x_87 = lean::box(3);
x_84 = x_40;
x_85 = x_87;
goto lbl_86;
}
else
{
obj* x_88; obj* x_90; 
x_88 = lean::cnstr_get(x_40, 0);
lean::inc(x_88);
x_90 = lean::cnstr_get(x_40, 1);
lean::inc(x_90);
lean::dec(x_40);
x_84 = x_90;
x_85 = x_88;
goto lbl_86;
}
lbl_83:
{
if (lean::obj_tag(x_82) == 0)
{
obj* x_94; obj* x_95; 
lean::dec(x_82);
x_94 = lean::box(0);
x_95 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_95, 0, x_5);
lean::cnstr_set(x_95, 1, x_26);
lean::cnstr_set(x_95, 2, x_49);
lean::cnstr_set(x_95, 3, x_80);
lean::cnstr_set(x_95, 4, x_81);
lean::cnstr_set(x_95, 5, x_94);
return x_95;
}
else
{
obj* x_96; 
x_96 = lean::cnstr_get(x_82, 0);
lean::inc(x_96);
lean::dec(x_82);
switch (lean::obj_tag(x_96)) {
case 0:
{
obj* x_99; obj* x_102; obj* x_103; 
x_99 = lean::cnstr_get(x_96, 0);
lean::inc(x_99);
lean::dec(x_96);
x_102 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_102, 0, x_99);
x_103 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_103, 0, x_5);
lean::cnstr_set(x_103, 1, x_26);
lean::cnstr_set(x_103, 2, x_49);
lean::cnstr_set(x_103, 3, x_80);
lean::cnstr_set(x_103, 4, x_81);
lean::cnstr_set(x_103, 5, x_102);
return x_103;
}
case 1:
{
obj* x_105; obj* x_106; 
lean::dec(x_96);
x_105 = lean::box(0);
x_106 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_106, 0, x_5);
lean::cnstr_set(x_106, 1, x_26);
lean::cnstr_set(x_106, 2, x_49);
lean::cnstr_set(x_106, 3, x_80);
lean::cnstr_set(x_106, 4, x_81);
lean::cnstr_set(x_106, 5, x_105);
return x_106;
}
case 2:
{
obj* x_108; obj* x_109; 
lean::dec(x_96);
x_108 = lean::box(0);
x_109 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_109, 0, x_5);
lean::cnstr_set(x_109, 1, x_26);
lean::cnstr_set(x_109, 2, x_49);
lean::cnstr_set(x_109, 3, x_80);
lean::cnstr_set(x_109, 4, x_81);
lean::cnstr_set(x_109, 5, x_108);
return x_109;
}
default:
{
obj* x_111; obj* x_112; 
lean::dec(x_96);
x_111 = lean::box(0);
x_112 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_112, 0, x_5);
lean::cnstr_set(x_112, 1, x_26);
lean::cnstr_set(x_112, 2, x_49);
lean::cnstr_set(x_112, 3, x_80);
lean::cnstr_set(x_112, 4, x_81);
lean::cnstr_set(x_112, 5, x_111);
return x_112;
}
}
}
}
lbl_86:
{
obj* x_113; 
switch (lean::obj_tag(x_85)) {
case 0:
{
obj* x_115; obj* x_118; 
x_115 = lean::cnstr_get(x_85, 0);
lean::inc(x_115);
lean::dec(x_85);
x_118 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_118, 0, x_115);
if (lean::obj_tag(x_84) == 0)
{
x_113 = x_118;
goto lbl_114;
}
else
{
obj* x_119; obj* x_121; 
x_119 = lean::cnstr_get(x_84, 0);
lean::inc(x_119);
x_121 = lean::cnstr_get(x_84, 1);
lean::inc(x_121);
lean::dec(x_84);
x_80 = x_118;
x_81 = x_119;
x_82 = x_121;
goto lbl_83;
}
}
case 1:
{
obj* x_125; 
lean::dec(x_85);
x_125 = lean::box(0);
if (lean::obj_tag(x_84) == 0)
{
x_113 = x_125;
goto lbl_114;
}
else
{
obj* x_126; obj* x_128; 
x_126 = lean::cnstr_get(x_84, 0);
lean::inc(x_126);
x_128 = lean::cnstr_get(x_84, 1);
lean::inc(x_128);
lean::dec(x_84);
x_80 = x_125;
x_81 = x_126;
x_82 = x_128;
goto lbl_83;
}
}
case 2:
{
obj* x_132; 
lean::dec(x_85);
x_132 = lean::box(0);
if (lean::obj_tag(x_84) == 0)
{
x_113 = x_132;
goto lbl_114;
}
else
{
obj* x_133; obj* x_135; 
x_133 = lean::cnstr_get(x_84, 0);
lean::inc(x_133);
x_135 = lean::cnstr_get(x_84, 1);
lean::inc(x_135);
lean::dec(x_84);
x_80 = x_132;
x_81 = x_133;
x_82 = x_135;
goto lbl_83;
}
}
default:
{
obj* x_139; 
lean::dec(x_85);
x_139 = lean::box(0);
if (lean::obj_tag(x_84) == 0)
{
x_113 = x_139;
goto lbl_114;
}
else
{
obj* x_140; obj* x_142; 
x_140 = lean::cnstr_get(x_84, 0);
lean::inc(x_140);
x_142 = lean::cnstr_get(x_84, 1);
lean::inc(x_142);
lean::dec(x_84);
x_80 = x_139;
x_81 = x_140;
x_82 = x_142;
goto lbl_83;
}
}
}
lbl_114:
{
if (lean::obj_tag(x_84) == 0)
{
obj* x_146; obj* x_147; obj* x_148; 
lean::dec(x_84);
x_146 = lean::box(0);
x_147 = lean::box(3);
x_148 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_148, 0, x_5);
lean::cnstr_set(x_148, 1, x_26);
lean::cnstr_set(x_148, 2, x_49);
lean::cnstr_set(x_148, 3, x_113);
lean::cnstr_set(x_148, 4, x_147);
lean::cnstr_set(x_148, 5, x_146);
return x_148;
}
else
{
obj* x_149; 
x_149 = lean::cnstr_get(x_84, 0);
lean::inc(x_149);
lean::dec(x_84);
switch (lean::obj_tag(x_149)) {
case 0:
{
obj* x_152; obj* x_155; obj* x_156; obj* x_157; 
x_152 = lean::cnstr_get(x_149, 0);
lean::inc(x_152);
lean::dec(x_149);
x_155 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_155, 0, x_152);
x_156 = lean::box(3);
x_157 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_157, 0, x_5);
lean::cnstr_set(x_157, 1, x_26);
lean::cnstr_set(x_157, 2, x_49);
lean::cnstr_set(x_157, 3, x_113);
lean::cnstr_set(x_157, 4, x_156);
lean::cnstr_set(x_157, 5, x_155);
return x_157;
}
case 1:
{
obj* x_159; obj* x_160; obj* x_161; 
lean::dec(x_149);
x_159 = lean::box(0);
x_160 = lean::box(3);
x_161 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_161, 0, x_5);
lean::cnstr_set(x_161, 1, x_26);
lean::cnstr_set(x_161, 2, x_49);
lean::cnstr_set(x_161, 3, x_113);
lean::cnstr_set(x_161, 4, x_160);
lean::cnstr_set(x_161, 5, x_159);
return x_161;
}
case 2:
{
obj* x_163; obj* x_164; obj* x_165; 
lean::dec(x_149);
x_163 = lean::box(0);
x_164 = lean::box(3);
x_165 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_165, 0, x_5);
lean::cnstr_set(x_165, 1, x_26);
lean::cnstr_set(x_165, 2, x_49);
lean::cnstr_set(x_165, 3, x_113);
lean::cnstr_set(x_165, 4, x_164);
lean::cnstr_set(x_165, 5, x_163);
return x_165;
}
default:
{
obj* x_167; obj* x_168; obj* x_169; 
lean::dec(x_149);
x_167 = lean::box(0);
x_168 = lean::box(3);
x_169 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_169, 0, x_5);
lean::cnstr_set(x_169, 1, x_26);
lean::cnstr_set(x_169, 2, x_49);
lean::cnstr_set(x_169, 3, x_113);
lean::cnstr_set(x_169, 4, x_168);
lean::cnstr_set(x_169, 5, x_167);
return x_169;
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_subtype_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_14; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_22; obj* x_24; obj* x_26; obj* x_27; obj* x_28; obj* x_30; obj* x_31; obj* x_32; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
lean::dec(x_0);
x_14 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_14);
x_16 = l_option_map___rarg(x_14, x_1);
x_17 = lean::box(3);
lean::inc(x_17);
x_19 = l_option_get__or__else___main___rarg(x_16, x_17);
x_20 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_20, 0, x_3);
lean::inc(x_14);
x_22 = l_option_map___rarg(x_14, x_7);
lean::inc(x_17);
x_24 = l_option_get__or__else___main___rarg(x_22, x_17);
lean::inc(x_14);
x_26 = l_option_map___rarg(x_14, x_11);
x_27 = l_option_get__or__else___main___rarg(x_26, x_17);
x_28 = lean::box(0);
lean::inc(x_28);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_27);
lean::cnstr_set(x_30, 1, x_28);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_9);
lean::cnstr_set(x_31, 1, x_30);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_24);
lean::cnstr_set(x_32, 1, x_31);
if (lean::obj_tag(x_5) == 0)
{
obj* x_35; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_42; 
lean::dec(x_5);
lean::dec(x_28);
x_35 = l_lean_parser_combinators_many___rarg___closed__1;
lean::inc(x_35);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_35);
lean::cnstr_set(x_37, 1, x_32);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_20);
lean::cnstr_set(x_38, 1, x_37);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_19);
lean::cnstr_set(x_39, 1, x_38);
x_40 = l_lean_parser_term_subtype;
lean::inc(x_40);
x_42 = l_lean_parser_syntax_mk__node(x_40, x_39);
return x_42;
}
else
{
obj* x_43; obj* x_46; obj* x_47; obj* x_49; obj* x_50; obj* x_51; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_59; 
x_43 = lean::cnstr_get(x_5, 0);
lean::inc(x_43);
lean::dec(x_5);
x_46 = l_lean_parser_term_type__spec_has__view;
x_47 = lean::cnstr_get(x_46, 1);
lean::inc(x_47);
x_49 = lean::apply_1(x_47, x_43);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_28);
x_51 = l_lean_parser_no__kind;
lean::inc(x_51);
x_53 = l_lean_parser_syntax_mk__node(x_51, x_50);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_32);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_20);
lean::cnstr_set(x_55, 1, x_54);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_19);
lean::cnstr_set(x_56, 1, x_55);
x_57 = l_lean_parser_term_subtype;
lean::inc(x_57);
x_59 = l_lean_parser_syntax_mk__node(x_57, x_56);
return x_59;
}
}
}
obj* _init_l_lean_parser_term_subtype_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_subtype_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_subtype_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_subtype;
x_6 = l_lean_parser_term_subtype_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_subtype_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_0 = lean::mk_string("{");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_string("//");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::mk_nat_obj(0u);
lean::inc(x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_13, 0, x_8);
lean::closure_set(x_13, 1, x_11);
lean::closure_set(x_13, 2, x_10);
lean::inc(x_11);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_15, 0, x_11);
x_16 = lean::mk_string("}");
x_17 = l_string_trim(x_16);
lean::inc(x_17);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_19, 0, x_17);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_20, 0, x_17);
lean::closure_set(x_20, 1, x_11);
lean::closure_set(x_20, 2, x_19);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_15);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_13);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_24);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_26);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_6);
lean::cnstr_set(x_29, 1, x_28);
return x_29;
}
}
obj* _init_l_lean_parser_term_subtype_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_42; 
x_0 = lean::mk_string("{");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_string("//");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::mk_nat_obj(0u);
lean::inc(x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_13, 0, x_8);
lean::closure_set(x_13, 1, x_11);
lean::closure_set(x_13, 2, x_10);
lean::inc(x_11);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_15, 0, x_11);
x_16 = lean::mk_string("}");
x_17 = l_string_trim(x_16);
lean::inc(x_17);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_19, 0, x_17);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_20, 0, x_17);
lean::closure_set(x_20, 1, x_11);
lean::closure_set(x_20, 2, x_19);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_15);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_13);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_24);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4), 1, 0);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_26);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_6);
lean::cnstr_set(x_29, 1, x_28);
x_30 = l_lean_parser_term__parser__m_monad;
x_31 = l_lean_parser_term__parser__m_monad__except;
x_32 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_33 = l_lean_parser_term__parser__m_alternative;
x_34 = l_lean_parser_term_subtype;
x_35 = l_lean_parser_term_subtype_has__view;
lean::inc(x_35);
lean::inc(x_34);
lean::inc(x_33);
lean::inc(x_32);
lean::inc(x_31);
lean::inc(x_30);
x_42 = l_lean_parser_combinators_node_view___rarg(x_30, x_31, x_32, x_33, x_34, x_29, x_35);
return x_42;
}
}
obj* _init_l_lean_parser_term_subtype_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_0 = lean::mk_string("{");
x_1 = l_lean_parser_max__prec;
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::box(0);
x_5 = lean::mk_string("//");
x_6 = lean::mk_nat_obj(0u);
lean::inc(x_6);
x_8 = l_lean_parser_symbol_tokens___rarg(x_5, x_6);
x_9 = lean::mk_string("}");
x_10 = l_lean_parser_symbol_tokens___rarg(x_9, x_6);
lean::inc(x_4);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_10, x_4);
x_13 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_13);
x_15 = l_lean_parser_list_cons_tokens___rarg(x_13, x_12);
x_16 = l_lean_parser_list_cons_tokens___rarg(x_8, x_15);
x_17 = l_lean_parser_term_opt__type_parser_lean_parser_has__tokens;
lean::inc(x_17);
x_19 = l_lean_parser_list_cons_tokens___rarg(x_17, x_16);
x_20 = l_lean_parser_list_cons_tokens___rarg(x_4, x_19);
x_21 = l_lean_parser_list_cons_tokens___rarg(x_3, x_20);
x_22 = l_lean_parser_tokens___rarg(x_21);
return x_22;
}
}
obj* _init_l_lean_parser_term_inaccessible() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("inaccessible");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_inaccessible_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inaccessible_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inaccessible_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_inaccessible_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_10; 
lean::dec(x_8);
x_10 = l_lean_parser_term_inaccessible_has__view_x_27___lambda__1___closed__1;
lean::inc(x_10);
return x_10;
}
else
{
obj* x_12; obj* x_15; 
x_12 = lean::cnstr_get(x_8, 0);
lean::inc(x_12);
lean::dec(x_8);
x_15 = lean::cnstr_get(x_12, 1);
lean::inc(x_15);
lean::dec(x_12);
if (lean::obj_tag(x_15) == 0)
{
obj* x_18; 
x_18 = lean::box(3);
x_5 = x_15;
x_6 = x_18;
goto lbl_7;
}
else
{
obj* x_19; obj* x_21; 
x_19 = lean::cnstr_get(x_15, 0);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_15, 1);
lean::inc(x_21);
lean::dec(x_15);
x_5 = x_21;
x_6 = x_19;
goto lbl_7;
}
}
lbl_4:
{
if (lean::obj_tag(x_3) == 0)
{
obj* x_25; obj* x_26; 
lean::dec(x_3);
x_25 = lean::box(0);
x_26 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_26, 0, x_1);
lean::cnstr_set(x_26, 1, x_2);
lean::cnstr_set(x_26, 2, x_25);
return x_26;
}
else
{
obj* x_27; 
x_27 = lean::cnstr_get(x_3, 0);
lean::inc(x_27);
lean::dec(x_3);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; obj* x_33; obj* x_34; 
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
lean::dec(x_27);
x_33 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_33, 0, x_30);
x_34 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_34, 0, x_1);
lean::cnstr_set(x_34, 1, x_2);
lean::cnstr_set(x_34, 2, x_33);
return x_34;
}
case 1:
{
obj* x_36; obj* x_37; 
lean::dec(x_27);
x_36 = lean::box(0);
x_37 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_37, 0, x_1);
lean::cnstr_set(x_37, 1, x_2);
lean::cnstr_set(x_37, 2, x_36);
return x_37;
}
case 2:
{
obj* x_39; obj* x_40; 
lean::dec(x_27);
x_39 = lean::box(0);
x_40 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_40, 0, x_1);
lean::cnstr_set(x_40, 1, x_2);
lean::cnstr_set(x_40, 2, x_39);
return x_40;
}
default:
{
obj* x_42; obj* x_43; 
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_43, 0, x_1);
lean::cnstr_set(x_43, 1, x_2);
lean::cnstr_set(x_43, 2, x_42);
return x_43;
}
}
}
}
lbl_7:
{
obj* x_44; 
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_46; obj* x_49; 
x_46 = lean::cnstr_get(x_6, 0);
lean::inc(x_46);
lean::dec(x_6);
x_49 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_49, 0, x_46);
if (lean::obj_tag(x_5) == 0)
{
x_44 = x_49;
goto lbl_45;
}
else
{
obj* x_50; obj* x_52; 
x_50 = lean::cnstr_get(x_5, 0);
lean::inc(x_50);
x_52 = lean::cnstr_get(x_5, 1);
lean::inc(x_52);
lean::dec(x_5);
x_1 = x_49;
x_2 = x_50;
x_3 = x_52;
goto lbl_4;
}
}
case 1:
{
obj* x_56; 
lean::dec(x_6);
x_56 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_44 = x_56;
goto lbl_45;
}
else
{
obj* x_57; obj* x_59; 
x_57 = lean::cnstr_get(x_5, 0);
lean::inc(x_57);
x_59 = lean::cnstr_get(x_5, 1);
lean::inc(x_59);
lean::dec(x_5);
x_1 = x_56;
x_2 = x_57;
x_3 = x_59;
goto lbl_4;
}
}
case 2:
{
obj* x_63; 
lean::dec(x_6);
x_63 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_44 = x_63;
goto lbl_45;
}
else
{
obj* x_64; obj* x_66; 
x_64 = lean::cnstr_get(x_5, 0);
lean::inc(x_64);
x_66 = lean::cnstr_get(x_5, 1);
lean::inc(x_66);
lean::dec(x_5);
x_1 = x_63;
x_2 = x_64;
x_3 = x_66;
goto lbl_4;
}
}
default:
{
obj* x_70; 
lean::dec(x_6);
x_70 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_44 = x_70;
goto lbl_45;
}
else
{
obj* x_71; obj* x_73; 
x_71 = lean::cnstr_get(x_5, 0);
lean::inc(x_71);
x_73 = lean::cnstr_get(x_5, 1);
lean::inc(x_73);
lean::dec(x_5);
x_1 = x_70;
x_2 = x_71;
x_3 = x_73;
goto lbl_4;
}
}
}
lbl_45:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_77; obj* x_78; obj* x_79; 
lean::dec(x_5);
x_77 = lean::box(0);
x_78 = lean::box(3);
x_79 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_79, 0, x_44);
lean::cnstr_set(x_79, 1, x_78);
lean::cnstr_set(x_79, 2, x_77);
return x_79;
}
else
{
obj* x_80; 
x_80 = lean::cnstr_get(x_5, 0);
lean::inc(x_80);
lean::dec(x_5);
switch (lean::obj_tag(x_80)) {
case 0:
{
obj* x_83; obj* x_86; obj* x_87; obj* x_88; 
x_83 = lean::cnstr_get(x_80, 0);
lean::inc(x_83);
lean::dec(x_80);
x_86 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_86, 0, x_83);
x_87 = lean::box(3);
x_88 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_88, 0, x_44);
lean::cnstr_set(x_88, 1, x_87);
lean::cnstr_set(x_88, 2, x_86);
return x_88;
}
case 1:
{
obj* x_90; obj* x_91; obj* x_92; 
lean::dec(x_80);
x_90 = lean::box(0);
x_91 = lean::box(3);
x_92 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_92, 0, x_44);
lean::cnstr_set(x_92, 1, x_91);
lean::cnstr_set(x_92, 2, x_90);
return x_92;
}
case 2:
{
obj* x_94; obj* x_95; obj* x_96; 
lean::dec(x_80);
x_94 = lean::box(0);
x_95 = lean::box(3);
x_96 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_96, 0, x_44);
lean::cnstr_set(x_96, 1, x_95);
lean::cnstr_set(x_96, 2, x_94);
return x_96;
}
default:
{
obj* x_98; obj* x_99; obj* x_100; 
lean::dec(x_80);
x_98 = lean::box(0);
x_99 = lean::box(3);
x_100 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_100, 0, x_44);
lean::cnstr_set(x_100, 1, x_99);
lean::cnstr_set(x_100, 2, x_98);
return x_100;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_inaccessible_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_7 = lean::box(0);
x_8 = lean::box(3);
x_4 = x_7;
x_5 = x_8;
goto lbl_6;
lbl_3:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_10; obj* x_11; 
lean::dec(x_2);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_11, 0, x_0);
lean::cnstr_set(x_11, 1, x_1);
lean::cnstr_set(x_11, 2, x_10);
return x_11;
}
else
{
obj* x_12; 
x_12 = lean::cnstr_get(x_2, 0);
lean::inc(x_12);
lean::dec(x_2);
switch (lean::obj_tag(x_12)) {
case 0:
{
obj* x_15; obj* x_18; obj* x_19; 
x_15 = lean::cnstr_get(x_12, 0);
lean::inc(x_15);
lean::dec(x_12);
x_18 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_18, 0, x_15);
x_19 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_19, 0, x_0);
lean::cnstr_set(x_19, 1, x_1);
lean::cnstr_set(x_19, 2, x_18);
return x_19;
}
case 1:
{
obj* x_21; obj* x_22; 
lean::dec(x_12);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_22, 0, x_0);
lean::cnstr_set(x_22, 1, x_1);
lean::cnstr_set(x_22, 2, x_21);
return x_22;
}
case 2:
{
obj* x_24; obj* x_25; 
lean::dec(x_12);
x_24 = lean::box(0);
x_25 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_25, 0, x_0);
lean::cnstr_set(x_25, 1, x_1);
lean::cnstr_set(x_25, 2, x_24);
return x_25;
}
default:
{
obj* x_27; obj* x_28; 
lean::dec(x_12);
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_28, 0, x_0);
lean::cnstr_set(x_28, 1, x_1);
lean::cnstr_set(x_28, 2, x_27);
return x_28;
}
}
}
}
lbl_6:
{
obj* x_29; 
switch (lean::obj_tag(x_5)) {
case 0:
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_5, 0);
lean::inc(x_31);
lean::dec(x_5);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_31);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_34;
goto lbl_30;
}
else
{
obj* x_35; obj* x_37; 
x_35 = lean::cnstr_get(x_4, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_4, 1);
lean::inc(x_37);
lean::dec(x_4);
x_0 = x_34;
x_1 = x_35;
x_2 = x_37;
goto lbl_3;
}
}
case 1:
{
obj* x_41; 
lean::dec(x_5);
x_41 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_41;
goto lbl_30;
}
else
{
obj* x_42; obj* x_44; 
x_42 = lean::cnstr_get(x_4, 0);
lean::inc(x_42);
x_44 = lean::cnstr_get(x_4, 1);
lean::inc(x_44);
lean::dec(x_4);
x_0 = x_41;
x_1 = x_42;
x_2 = x_44;
goto lbl_3;
}
}
case 2:
{
obj* x_48; 
lean::dec(x_5);
x_48 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_48;
goto lbl_30;
}
else
{
obj* x_49; obj* x_51; 
x_49 = lean::cnstr_get(x_4, 0);
lean::inc(x_49);
x_51 = lean::cnstr_get(x_4, 1);
lean::inc(x_51);
lean::dec(x_4);
x_0 = x_48;
x_1 = x_49;
x_2 = x_51;
goto lbl_3;
}
}
default:
{
obj* x_55; 
lean::dec(x_5);
x_55 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_55;
goto lbl_30;
}
else
{
obj* x_56; obj* x_58; 
x_56 = lean::cnstr_get(x_4, 0);
lean::inc(x_56);
x_58 = lean::cnstr_get(x_4, 1);
lean::inc(x_58);
lean::dec(x_4);
x_0 = x_55;
x_1 = x_56;
x_2 = x_58;
goto lbl_3;
}
}
}
lbl_30:
{
if (lean::obj_tag(x_4) == 0)
{
obj* x_62; obj* x_63; obj* x_64; 
lean::dec(x_4);
x_62 = lean::box(0);
x_63 = lean::box(3);
x_64 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_64, 0, x_29);
lean::cnstr_set(x_64, 1, x_63);
lean::cnstr_set(x_64, 2, x_62);
return x_64;
}
else
{
obj* x_65; 
x_65 = lean::cnstr_get(x_4, 0);
lean::inc(x_65);
lean::dec(x_4);
switch (lean::obj_tag(x_65)) {
case 0:
{
obj* x_68; obj* x_71; obj* x_72; obj* x_73; 
x_68 = lean::cnstr_get(x_65, 0);
lean::inc(x_68);
lean::dec(x_65);
x_71 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_71, 0, x_68);
x_72 = lean::box(3);
x_73 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_73, 0, x_29);
lean::cnstr_set(x_73, 1, x_72);
lean::cnstr_set(x_73, 2, x_71);
return x_73;
}
case 1:
{
obj* x_75; obj* x_76; obj* x_77; 
lean::dec(x_65);
x_75 = lean::box(0);
x_76 = lean::box(3);
x_77 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_77, 0, x_29);
lean::cnstr_set(x_77, 1, x_76);
lean::cnstr_set(x_77, 2, x_75);
return x_77;
}
case 2:
{
obj* x_79; obj* x_80; obj* x_81; 
lean::dec(x_65);
x_79 = lean::box(0);
x_80 = lean::box(3);
x_81 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_81, 0, x_29);
lean::cnstr_set(x_81, 1, x_80);
lean::cnstr_set(x_81, 2, x_79);
return x_81;
}
default:
{
obj* x_83; obj* x_84; obj* x_85; 
lean::dec(x_65);
x_83 = lean::box(0);
x_84 = lean::box(3);
x_85 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_85, 0, x_29);
lean::cnstr_set(x_85, 1, x_84);
lean::cnstr_set(x_85, 2, x_83);
return x_85;
}
}
}
}
}
}
}
obj* l_lean_parser_term_inaccessible_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_23; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_8);
x_10 = l_option_map___rarg(x_8, x_1);
x_11 = lean::box(3);
lean::inc(x_11);
x_13 = l_option_get__or__else___main___rarg(x_10, x_11);
lean::inc(x_8);
x_15 = l_option_map___rarg(x_8, x_5);
x_16 = l_option_get__or__else___main___rarg(x_15, x_11);
x_17 = lean::box(0);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_3);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_13);
lean::cnstr_set(x_20, 1, x_19);
x_21 = l_lean_parser_term_inaccessible;
lean::inc(x_21);
x_23 = l_lean_parser_syntax_mk__node(x_21, x_20);
return x_23;
}
}
obj* _init_l_lean_parser_term_inaccessible_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_inaccessible_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_inaccessible_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_inaccessible;
x_6 = l_lean_parser_term_inaccessible_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_inaccessible_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_0 = lean::mk_string(".(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_nat_obj(0u);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::mk_string(")");
x_11 = l_string_trim(x_10);
lean::inc(x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_13, 0, x_11);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_14, 0, x_11);
lean::closure_set(x_14, 1, x_7);
lean::closure_set(x_14, 2, x_13);
x_15 = lean::box(0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_14);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_9);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_6);
lean::cnstr_set(x_18, 1, x_17);
return x_18;
}
}
obj* _init_l_lean_parser_term_inaccessible_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_31; 
x_0 = lean::mk_string(".(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::mk_nat_obj(0u);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::mk_string(")");
x_11 = l_string_trim(x_10);
lean::inc(x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_13, 0, x_11);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_14, 0, x_11);
lean::closure_set(x_14, 1, x_7);
lean::closure_set(x_14, 2, x_13);
x_15 = lean::box(0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_14);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_9);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_6);
lean::cnstr_set(x_18, 1, x_17);
x_19 = l_lean_parser_term__parser__m_monad;
x_20 = l_lean_parser_term__parser__m_monad__except;
x_21 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_22 = l_lean_parser_term__parser__m_alternative;
x_23 = l_lean_parser_term_inaccessible;
x_24 = l_lean_parser_term_inaccessible_has__view;
lean::inc(x_24);
lean::inc(x_23);
lean::inc(x_22);
lean::inc(x_21);
lean::inc(x_20);
lean::inc(x_19);
x_31 = l_lean_parser_combinators_node_view___rarg(x_19, x_20, x_21, x_22, x_23, x_18, x_24);
return x_31;
}
}
obj* _init_l_lean_parser_term_inaccessible_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; 
x_0 = lean::mk_string(".(");
x_1 = l_lean_parser_max__prec;
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::mk_string(")");
x_5 = lean::mk_nat_obj(0u);
x_6 = l_lean_parser_symbol_tokens___rarg(x_4, x_5);
x_7 = lean::box(0);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_6, x_7);
x_9 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_9);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_9, x_8);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_3, x_11);
x_13 = l_lean_parser_tokens___rarg(x_12);
return x_13;
}
}
obj* _init_l_lean_parser_term_anonymous__inaccessible() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("anonymous_inaccessible");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_anonymous__inaccessible_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_string__lit_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_anonymous__inaccessible_has__view_x_27___lambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_anonymous__inaccessible_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; 
x_1 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_1);
x_3 = l_option_map___rarg(x_1, x_0);
x_4 = lean::box(3);
x_5 = l_option_get__or__else___main___rarg(x_3, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = l_lean_parser_term_anonymous__inaccessible;
lean::inc(x_8);
x_10 = l_lean_parser_syntax_mk__node(x_8, x_7);
return x_10;
}
}
obj* _init_l_lean_parser_term_anonymous__inaccessible_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_anonymous__inaccessible_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_anonymous__inaccessible_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_anonymous__inaccessible;
x_6 = l_lean_parser_term_anonymous__inaccessible_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_anonymous__inaccessible_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::mk_string("._");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_21; 
x_0 = lean::mk_string("._");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_lean_parser_term__parser__m_monad;
x_10 = l_lean_parser_term__parser__m_monad__except;
x_11 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_12 = l_lean_parser_term__parser__m_alternative;
x_13 = l_lean_parser_term_anonymous__inaccessible;
x_14 = l_lean_parser_term_anonymous__inaccessible_has__view;
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
x_21 = l_lean_parser_combinators_node_view___rarg(x_9, x_10, x_11, x_12, x_13, x_8, x_14);
return x_21;
}
}
obj* _init_l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::mk_string("._");
x_1 = l_lean_parser_max__prec;
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::box(0);
x_5 = l_lean_parser_list_cons_tokens___rarg(x_3, x_4);
x_6 = l_lean_parser_tokens___rarg(x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_sorry() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("sorry");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_sorry_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_string__lit_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sorry_has__view_x_27___lambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_sorry_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; 
x_1 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_1);
x_3 = l_option_map___rarg(x_1, x_0);
x_4 = lean::box(3);
x_5 = l_option_get__or__else___main___rarg(x_3, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = l_lean_parser_term_sorry;
lean::inc(x_8);
x_10 = l_lean_parser_syntax_mk__node(x_8, x_7);
return x_10;
}
}
obj* _init_l_lean_parser_term_sorry_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_sorry_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_sorry_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_9; 
x_5 = l_lean_parser_term_sorry;
x_6 = l_lean_parser_term_sorry_parser___closed__1;
lean::inc(x_6);
lean::inc(x_5);
x_9 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__5(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_term_sorry_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::mk_string("sorry");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_sorry_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_21; 
x_0 = lean::mk_string("sorry");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_3);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_lean_parser_term__parser__m_monad;
x_10 = l_lean_parser_term__parser__m_monad__except;
x_11 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_12 = l_lean_parser_term__parser__m_alternative;
x_13 = l_lean_parser_term_sorry;
x_14 = l_lean_parser_term_sorry_has__view;
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
lean::inc(x_9);
x_21 = l_lean_parser_combinators_node_view___rarg(x_9, x_10, x_11, x_12, x_13, x_8, x_14);
return x_21;
}
}
obj* _init_l_lean_parser_term_sorry_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::mk_string("sorry");
x_1 = l_lean_parser_max__prec;
lean::inc(x_1);
x_3 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_4 = lean::box(0);
x_5 = l_lean_parser_list_cons_tokens___rarg(x_3, x_4);
x_6 = l_lean_parser_tokens___rarg(x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_builtin__leading__parsers() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_32; obj* x_33; obj* x_34; obj* x_36; obj* x_37; obj* x_39; obj* x_40; obj* x_42; obj* x_43; obj* x_44; obj* x_46; obj* x_47; obj* x_49; obj* x_50; obj* x_52; obj* x_54; obj* x_55; obj* x_57; obj* x_59; obj* x_60; obj* x_62; obj* x_63; obj* x_64; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_71; obj* x_72; obj* x_74; obj* x_75; obj* x_77; obj* x_78; obj* x_79; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_111; obj* x_112; obj* x_114; obj* x_115; obj* x_116; obj* x_117; obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_129; obj* x_130; obj* x_131; obj* x_132; obj* x_133; obj* x_134; obj* x_135; obj* x_136; obj* x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_141; obj* x_142; obj* x_143; obj* x_144; obj* x_145; obj* x_146; obj* x_147; obj* x_148; obj* x_149; obj* x_150; obj* x_151; obj* x_152; obj* x_153; obj* x_154; obj* x_155; obj* x_156; obj* x_157; obj* x_158; obj* x_159; 
x_0 = lean::box(0);
x_1 = lean::mk_string("ident");
lean::inc(x_0);
x_3 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_3, 0, x_0);
lean::cnstr_set(x_3, 1, x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univs_parser), 5, 0);
x_5 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_5, 0, x_3);
lean::cnstr_set(x_5, 1, x_4);
x_6 = l_lean_parser_number;
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_number_parser___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 1, 0);
lean::inc(x_6);
x_9 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_9, 0, x_6);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_lean_parser_string__lit;
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers___spec__1), 1, 0);
lean::inc(x_10);
x_13 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_13, 0, x_10);
lean::cnstr_set(x_13, 1, x_11);
x_14 = lean::mk_string("(");
lean::inc(x_0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_0);
lean::cnstr_set(x_16, 1, x_14);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_paren_parser), 5, 0);
x_18 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::mk_string("_");
lean::inc(x_0);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_0);
lean::cnstr_set(x_21, 1, x_19);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_hole_parser), 5, 0);
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_21);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::mk_string("Sort");
lean::inc(x_0);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_0);
lean::cnstr_set(x_26, 1, x_24);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort_parser), 5, 0);
lean::inc(x_27);
x_29 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_29, 0, x_26);
lean::cnstr_set(x_29, 1, x_27);
x_30 = lean::mk_string("Type");
lean::inc(x_0);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_0);
lean::cnstr_set(x_32, 1, x_30);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_27);
x_34 = lean::mk_string("\xce\xbb");
lean::inc(x_0);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_0);
lean::cnstr_set(x_36, 1, x_34);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_lambda_parser), 5, 0);
lean::inc(x_37);
x_39 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_39, 0, x_36);
lean::cnstr_set(x_39, 1, x_37);
x_40 = lean::mk_string("fun");
lean::inc(x_0);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_0);
lean::cnstr_set(x_42, 1, x_40);
x_43 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_37);
x_44 = lean::mk_string("\xce\xa0");
lean::inc(x_0);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_0);
lean::cnstr_set(x_46, 1, x_44);
x_47 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_pi_parser), 5, 0);
lean::inc(x_47);
x_49 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_49, 0, x_46);
lean::cnstr_set(x_49, 1, x_47);
x_50 = lean::mk_string("Pi");
lean::inc(x_0);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_0);
lean::cnstr_set(x_52, 1, x_50);
lean::inc(x_47);
x_54 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_54, 0, x_52);
lean::cnstr_set(x_54, 1, x_47);
x_55 = lean::mk_string("\xe2\x88\x80");
lean::inc(x_0);
x_57 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_57, 0, x_0);
lean::cnstr_set(x_57, 1, x_55);
lean::inc(x_47);
x_59 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_59, 0, x_57);
lean::cnstr_set(x_59, 1, x_47);
x_60 = lean::mk_string("forall");
lean::inc(x_0);
x_62 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_62, 0, x_0);
lean::cnstr_set(x_62, 1, x_60);
x_63 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_63, 0, x_62);
lean::cnstr_set(x_63, 1, x_47);
x_64 = lean::mk_string("\xe2\x9f\xa8");
lean::inc(x_0);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_0);
lean::cnstr_set(x_66, 1, x_64);
x_67 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_anonymous__constructor_parser), 5, 0);
x_68 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_68, 0, x_66);
lean::cnstr_set(x_68, 1, x_67);
x_69 = lean::mk_string("@");
lean::inc(x_0);
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_0);
lean::cnstr_set(x_71, 1, x_69);
x_72 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit_parser), 5, 0);
lean::inc(x_72);
x_74 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_74, 0, x_71);
lean::cnstr_set(x_74, 1, x_72);
x_75 = lean::mk_string("@@");
lean::inc(x_0);
x_77 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_77, 0, x_0);
lean::cnstr_set(x_77, 1, x_75);
x_78 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_78, 0, x_77);
lean::cnstr_set(x_78, 1, x_72);
x_79 = lean::mk_string("let");
lean::inc(x_0);
x_81 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_81, 0, x_0);
lean::cnstr_set(x_81, 1, x_79);
x_82 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_let_parser), 5, 0);
x_83 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_83, 0, x_81);
lean::cnstr_set(x_83, 1, x_82);
x_84 = lean::mk_string("have");
lean::inc(x_0);
x_86 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_86, 0, x_0);
lean::cnstr_set(x_86, 1, x_84);
x_87 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have_parser), 5, 0);
x_88 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_88, 0, x_86);
lean::cnstr_set(x_88, 1, x_87);
x_89 = lean::mk_string("show");
lean::inc(x_0);
x_91 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_91, 0, x_0);
lean::cnstr_set(x_91, 1, x_89);
x_92 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_show_parser), 5, 0);
x_93 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_93, 0, x_91);
lean::cnstr_set(x_93, 1, x_92);
x_94 = lean::mk_string("assume");
lean::inc(x_0);
x_96 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_96, 0, x_0);
lean::cnstr_set(x_96, 1, x_94);
x_97 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_assume_parser), 5, 0);
x_98 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_98, 0, x_96);
lean::cnstr_set(x_98, 1, x_97);
x_99 = lean::mk_string("match");
lean::inc(x_0);
x_101 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_101, 0, x_0);
lean::cnstr_set(x_101, 1, x_99);
x_102 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_match_parser), 5, 0);
x_103 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_103, 0, x_101);
lean::cnstr_set(x_103, 1, x_102);
x_104 = lean::mk_string("if");
lean::inc(x_0);
x_106 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_106, 0, x_0);
lean::cnstr_set(x_106, 1, x_104);
x_107 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_if_parser), 5, 0);
x_108 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_108, 0, x_106);
lean::cnstr_set(x_108, 1, x_107);
x_109 = lean::mk_string("{");
lean::inc(x_0);
x_111 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_111, 0, x_0);
lean::cnstr_set(x_111, 1, x_109);
x_112 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst_parser), 5, 0);
lean::inc(x_111);
x_114 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_114, 0, x_111);
lean::cnstr_set(x_114, 1, x_112);
x_115 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_subtype_parser), 5, 0);
x_116 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_116, 0, x_111);
lean::cnstr_set(x_116, 1, x_115);
x_117 = lean::mk_string(".(");
lean::inc(x_0);
x_119 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_119, 0, x_0);
lean::cnstr_set(x_119, 1, x_117);
x_120 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inaccessible_parser), 5, 0);
x_121 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_121, 0, x_119);
lean::cnstr_set(x_121, 1, x_120);
x_122 = lean::mk_string("._");
lean::inc(x_0);
x_124 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_124, 0, x_0);
lean::cnstr_set(x_124, 1, x_122);
x_125 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_anonymous__inaccessible_parser), 5, 0);
x_126 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_126, 0, x_124);
lean::cnstr_set(x_126, 1, x_125);
x_127 = lean::mk_string("sorry");
lean::inc(x_0);
x_129 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_129, 0, x_0);
lean::cnstr_set(x_129, 1, x_127);
x_130 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sorry_parser), 5, 0);
x_131 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_131, 0, x_129);
lean::cnstr_set(x_131, 1, x_130);
x_132 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_132, 0, x_131);
lean::cnstr_set(x_132, 1, x_0);
x_133 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_133, 0, x_126);
lean::cnstr_set(x_133, 1, x_132);
x_134 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_134, 0, x_121);
lean::cnstr_set(x_134, 1, x_133);
x_135 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_135, 0, x_116);
lean::cnstr_set(x_135, 1, x_134);
x_136 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_136, 0, x_114);
lean::cnstr_set(x_136, 1, x_135);
x_137 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_137, 0, x_108);
lean::cnstr_set(x_137, 1, x_136);
x_138 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_138, 0, x_103);
lean::cnstr_set(x_138, 1, x_137);
x_139 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_139, 0, x_98);
lean::cnstr_set(x_139, 1, x_138);
x_140 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_140, 0, x_93);
lean::cnstr_set(x_140, 1, x_139);
x_141 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_141, 0, x_88);
lean::cnstr_set(x_141, 1, x_140);
x_142 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_142, 0, x_83);
lean::cnstr_set(x_142, 1, x_141);
x_143 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_143, 0, x_78);
lean::cnstr_set(x_143, 1, x_142);
x_144 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_144, 0, x_74);
lean::cnstr_set(x_144, 1, x_143);
x_145 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_145, 0, x_68);
lean::cnstr_set(x_145, 1, x_144);
x_146 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_146, 0, x_63);
lean::cnstr_set(x_146, 1, x_145);
x_147 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_147, 0, x_59);
lean::cnstr_set(x_147, 1, x_146);
x_148 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_148, 0, x_54);
lean::cnstr_set(x_148, 1, x_147);
x_149 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_149, 0, x_49);
lean::cnstr_set(x_149, 1, x_148);
x_150 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_150, 0, x_43);
lean::cnstr_set(x_150, 1, x_149);
x_151 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_151, 0, x_39);
lean::cnstr_set(x_151, 1, x_150);
x_152 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_152, 0, x_33);
lean::cnstr_set(x_152, 1, x_151);
x_153 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_153, 0, x_29);
lean::cnstr_set(x_153, 1, x_152);
x_154 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_154, 0, x_23);
lean::cnstr_set(x_154, 1, x_153);
x_155 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_155, 0, x_18);
lean::cnstr_set(x_155, 1, x_154);
x_156 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_156, 0, x_13);
lean::cnstr_set(x_156, 1, x_155);
x_157 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_157, 0, x_9);
lean::cnstr_set(x_157, 1, x_156);
x_158 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_158, 0, x_5);
lean::cnstr_set(x_158, 1, x_157);
x_159 = l_lean_parser_token__map_of__list___main___rarg(x_158);
return x_159;
}
}
obj* l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers___spec__1___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_7; obj* x_8; obj* x_10; obj* x_12; 
lean::dec(x_1);
lean::inc(x_2);
lean::inc(x_0);
x_7 = l_lean_parser_token(x_0, x_2, x_3);
x_8 = lean::cnstr_get(x_7, 0);
lean::inc(x_8);
x_10 = lean::cnstr_get(x_7, 1);
lean::inc(x_10);
if (lean::is_shared(x_7)) {
 lean::dec(x_7);
 x_12 = lean::box(0);
} else {
 lean::cnstr_release(x_7, 0);
 lean::cnstr_release(x_7, 1);
 x_12 = x_7;
}
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; obj* x_15; obj* x_17; obj* x_19; obj* x_21; 
x_13 = lean::cnstr_get(x_8, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_8, 1);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_8, 2);
lean::inc(x_17);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_19 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_release(x_8, 1);
 lean::cnstr_release(x_8, 2);
 x_19 = x_8;
}
lean::inc(x_13);
x_21 = l_lean_parser_try__view___at_lean_parser_string__lit_parser___spec__1(x_13);
if (lean::obj_tag(x_21) == 0)
{
obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_31; obj* x_32; obj* x_34; obj* x_37; obj* x_39; obj* x_40; obj* x_42; obj* x_44; obj* x_45; obj* x_46; 
lean::dec(x_13);
lean::dec(x_19);
lean::dec(x_21);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_2);
x_26 = lean::box(0);
x_27 = l_string_join___closed__1;
x_28 = l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers___spec__1___rarg___closed__1;
lean::inc(x_28);
lean::inc(x_27);
x_31 = l_lean_parser_monad__parsec_error___at___private_4089500695__finish__comment__block__aux___main___spec__1___rarg(x_27, x_28, x_25, x_26, x_0, x_15, x_10);
x_32 = lean::cnstr_get(x_31, 0);
lean::inc(x_32);
x_34 = lean::cnstr_get(x_31, 1);
lean::inc(x_34);
lean::dec(x_31);
x_37 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_37);
x_39 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_37, x_32);
x_40 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_39);
lean::inc(x_37);
x_42 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_37, x_40);
lean::inc(x_28);
x_44 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_42, x_28);
x_45 = l_lean_parser_parsec__t_try__mk__res___rarg(x_44);
if (lean::is_scalar(x_12)) {
 x_46 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_46 = x_12;
}
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_34);
return x_46;
}
else
{
obj* x_50; obj* x_52; obj* x_53; obj* x_54; obj* x_56; obj* x_57; obj* x_59; obj* x_60; obj* x_61; 
lean::dec(x_0);
lean::dec(x_2);
lean::dec(x_21);
x_50 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_50);
if (lean::is_scalar(x_19)) {
 x_52 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_52 = x_19;
}
lean::cnstr_set(x_52, 0, x_13);
lean::cnstr_set(x_52, 1, x_15);
lean::cnstr_set(x_52, 2, x_50);
x_53 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_52);
x_54 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_54);
x_56 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_54, x_53);
x_57 = l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers___spec__1___rarg___closed__1;
lean::inc(x_57);
x_59 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_56, x_57);
x_60 = l_lean_parser_parsec__t_try__mk__res___rarg(x_59);
if (lean::is_scalar(x_12)) {
 x_61 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_61 = x_12;
}
lean::cnstr_set(x_61, 0, x_60);
lean::cnstr_set(x_61, 1, x_10);
return x_61;
}
}
else
{
obj* x_64; unsigned char x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_72; obj* x_73; obj* x_75; obj* x_76; obj* x_77; 
lean::dec(x_0);
lean::dec(x_2);
x_64 = lean::cnstr_get(x_8, 0);
lean::inc(x_64);
x_66 = lean::cnstr_get_scalar<unsigned char>(x_8, sizeof(void*)*1);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_67 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 x_67 = x_8;
}
if (lean::is_scalar(x_67)) {
 x_68 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_68 = x_67;
}
lean::cnstr_set(x_68, 0, x_64);
lean::cnstr_set_scalar(x_68, sizeof(void*)*1, x_66);
x_69 = x_68;
x_70 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_70);
x_72 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_70, x_69);
x_73 = l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers___spec__1___rarg___closed__1;
lean::inc(x_73);
x_75 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_72, x_73);
x_76 = l_lean_parser_parsec__t_try__mk__res___rarg(x_75);
if (lean::is_scalar(x_12)) {
 x_77 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_77 = x_12;
}
lean::cnstr_set(x_77, 0, x_76);
lean::cnstr_set(x_77, 1, x_10);
return x_77;
}
}
}
obj* _init_l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers___spec__1___rarg___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::mk_string("string");
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_1, 0, x_0);
return x_1;
}
}
obj* l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers___spec__1(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers___spec__1___rarg), 4, 0);
return x_2;
}
}
obj* _init_l_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_25; obj* x_26; obj* x_28; obj* x_29; obj* x_31; obj* x_32; obj* x_34; obj* x_35; obj* x_37; obj* x_39; obj* x_40; obj* x_42; obj* x_43; obj* x_45; obj* x_47; obj* x_49; obj* x_51; obj* x_52; obj* x_54; obj* x_56; obj* x_57; obj* x_59; obj* x_61; obj* x_62; obj* x_64; obj* x_65; obj* x_67; obj* x_69; obj* x_70; obj* x_71; obj* x_73; 
x_0 = lean::box(0);
x_1 = l_lean_parser_term_sorry_parser_lean_parser_has__tokens;
lean::inc(x_0);
lean::inc(x_1);
x_4 = l_lean_parser_token__map__cons_tokens___rarg(x_1, x_0);
x_5 = l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__tokens;
lean::inc(x_5);
x_7 = l_lean_parser_token__map__cons_tokens___rarg(x_5, x_4);
x_8 = l_lean_parser_term_inaccessible_parser_lean_parser_has__tokens;
lean::inc(x_8);
x_10 = l_lean_parser_token__map__cons_tokens___rarg(x_8, x_7);
x_11 = l_lean_parser_term_subtype_parser_lean_parser_has__tokens;
lean::inc(x_11);
x_13 = l_lean_parser_token__map__cons_tokens___rarg(x_11, x_10);
x_14 = l_lean_parser_term_struct__inst_parser_lean_parser_has__tokens;
lean::inc(x_14);
x_16 = l_lean_parser_token__map__cons_tokens___rarg(x_14, x_13);
x_17 = l_lean_parser_term_if_parser_lean_parser_has__tokens;
lean::inc(x_17);
x_19 = l_lean_parser_token__map__cons_tokens___rarg(x_17, x_16);
x_20 = l_lean_parser_term_match_parser_lean_parser_has__tokens;
lean::inc(x_20);
x_22 = l_lean_parser_token__map__cons_tokens___rarg(x_20, x_19);
x_23 = l_lean_parser_term_assume_parser_lean_parser_has__tokens;
lean::inc(x_23);
x_25 = l_lean_parser_token__map__cons_tokens___rarg(x_23, x_22);
x_26 = l_lean_parser_term_show_parser_lean_parser_has__tokens;
lean::inc(x_26);
x_28 = l_lean_parser_token__map__cons_tokens___rarg(x_26, x_25);
x_29 = l_lean_parser_term_have_parser_lean_parser_has__tokens;
lean::inc(x_29);
x_31 = l_lean_parser_token__map__cons_tokens___rarg(x_29, x_28);
x_32 = l_lean_parser_term_let_parser_lean_parser_has__tokens;
lean::inc(x_32);
x_34 = l_lean_parser_token__map__cons_tokens___rarg(x_32, x_31);
x_35 = l_lean_parser_term_explicit_parser_lean_parser_has__tokens;
lean::inc(x_35);
x_37 = l_lean_parser_token__map__cons_tokens___rarg(x_35, x_34);
lean::inc(x_35);
x_39 = l_lean_parser_token__map__cons_tokens___rarg(x_35, x_37);
x_40 = l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__tokens;
lean::inc(x_40);
x_42 = l_lean_parser_token__map__cons_tokens___rarg(x_40, x_39);
x_43 = l_lean_parser_term_pi_parser_lean_parser_has__tokens;
lean::inc(x_43);
x_45 = l_lean_parser_token__map__cons_tokens___rarg(x_43, x_42);
lean::inc(x_43);
x_47 = l_lean_parser_token__map__cons_tokens___rarg(x_43, x_45);
lean::inc(x_43);
x_49 = l_lean_parser_token__map__cons_tokens___rarg(x_43, x_47);
lean::inc(x_43);
x_51 = l_lean_parser_token__map__cons_tokens___rarg(x_43, x_49);
x_52 = l_lean_parser_term_lambda_parser_lean_parser_has__tokens;
lean::inc(x_52);
x_54 = l_lean_parser_token__map__cons_tokens___rarg(x_52, x_51);
lean::inc(x_52);
x_56 = l_lean_parser_token__map__cons_tokens___rarg(x_52, x_54);
x_57 = l_lean_parser_term_sort_parser_lean_parser_has__tokens;
lean::inc(x_57);
x_59 = l_lean_parser_token__map__cons_tokens___rarg(x_57, x_56);
lean::inc(x_57);
x_61 = l_lean_parser_token__map__cons_tokens___rarg(x_57, x_59);
x_62 = l_lean_parser_term_hole_parser_lean_parser_has__tokens;
lean::inc(x_62);
x_64 = l_lean_parser_token__map__cons_tokens___rarg(x_62, x_61);
x_65 = l_lean_parser_term_paren_parser_lean_parser_has__tokens;
lean::inc(x_65);
x_67 = l_lean_parser_token__map__cons_tokens___rarg(x_65, x_64);
lean::inc(x_0);
x_69 = l_lean_parser_token__map__cons_tokens___rarg(x_0, x_67);
x_70 = l_lean_parser_token__map__cons_tokens___rarg(x_0, x_69);
x_71 = l_lean_parser_ident__univs_parser_lean_parser_has__tokens;
lean::inc(x_71);
x_73 = l_lean_parser_token__map__cons_tokens___rarg(x_71, x_70);
return x_73;
}
}
obj* _init_l_lean_parser_term_sort__app() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("sort_app");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_sort__app_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort__app_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort__app_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_sort__app_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_term_sort__app_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
lean::dec(x_1);
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_12; 
lean::dec(x_8);
x_12 = l_lean_parser_term_sort__app_has__view_x_27___lambda__1___closed__1;
lean::inc(x_12);
return x_12;
}
else
{
obj* x_14; obj* x_17; obj* x_18; 
x_14 = lean::cnstr_get(x_8, 0);
lean::inc(x_14);
lean::dec(x_8);
x_17 = lean::box(3);
x_18 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_14);
return x_18;
}
}
else
{
obj* x_19; obj* x_21; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_8, 1);
lean::inc(x_21);
lean::dec(x_8);
if (lean::obj_tag(x_21) == 0)
{
obj* x_25; obj* x_26; 
lean::dec(x_21);
x_25 = lean::box(3);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_19);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_30; 
x_27 = lean::cnstr_get(x_21, 0);
lean::inc(x_27);
lean::dec(x_21);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_19);
lean::cnstr_set(x_30, 1, x_27);
return x_30;
}
}
}
}
}
obj* _init_l_lean_parser_term_sort__app_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_2; 
x_0 = lean::box(3);
lean::inc(x_0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_0);
return x_2;
}
}
obj* l_lean_parser_term_sort__app_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_1);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_lean_parser_term_sort__app;
lean::inc(x_9);
x_11 = l_lean_parser_syntax_mk__node(x_9, x_8);
return x_11;
}
}
obj* _init_l_lean_parser_term_sort__app_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_sort__app_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_sort__app_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_10; obj* x_11; obj* x_13; obj* x_15; 
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
lean::inc(x_0);
x_10 = l_lean_parser_term_get__leading(x_0, x_1, x_2, x_3, x_4, x_5);
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
if (lean::is_shared(x_10)) {
 lean::dec(x_10);
 x_15 = lean::box(0);
} else {
 lean::cnstr_release(x_10, 0);
 lean::cnstr_release(x_10, 1);
 x_15 = x_10;
}
if (lean::obj_tag(x_11) == 0)
{
obj* x_16; obj* x_18; obj* x_20; obj* x_22; obj* x_23; unsigned char x_25; obj* x_26; 
x_16 = lean::cnstr_get(x_11, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_11, 1);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_11, 2);
lean::inc(x_20);
if (lean::is_shared(x_11)) {
 lean::dec(x_11);
 x_22 = lean::box(0);
} else {
 lean::cnstr_release(x_11, 0);
 lean::cnstr_release(x_11, 1);
 lean::cnstr_release(x_11, 2);
 x_22 = x_11;
}
x_23 = l_lean_parser_term_sort;
lean::inc(x_23);
x_25 = l_lean_parser_syntax_is__of__kind___main(x_23, x_16);
if (x_25 == 0)
{
obj* x_28; 
x_28 = lean::box(0);
x_26 = x_28;
goto lbl_27;
}
else
{
obj* x_29; 
x_29 = lean::box(1);
x_26 = x_29;
goto lbl_27;
}
lbl_27:
{
if (lean::obj_tag(x_26) == 0)
{
obj* x_32; obj* x_33; obj* x_35; obj* x_38; 
lean::dec(x_22);
lean::dec(x_26);
x_32 = l_lean_parser_parsec__t_failure___at_lean_parser_token___spec__4___rarg(x_18, x_13);
x_33 = lean::cnstr_get(x_32, 0);
lean::inc(x_33);
x_35 = lean::cnstr_get(x_32, 1);
lean::inc(x_35);
lean::dec(x_32);
x_38 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_20, x_33);
if (lean::obj_tag(x_38) == 0)
{
obj* x_39; obj* x_41; obj* x_44; obj* x_45; obj* x_48; obj* x_49; obj* x_51; obj* x_54; obj* x_55; 
x_39 = lean::cnstr_get(x_38, 1);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_38, 2);
lean::inc(x_41);
lean::dec(x_38);
x_44 = l_lean_parser_term_sort__app;
x_45 = l_lean_parser_term_sort__app_parser___closed__1;
lean::inc(x_45);
lean::inc(x_44);
x_48 = l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser___spec__2(x_44, x_45, x_0, x_1, x_2, x_3, x_39, x_35);
x_49 = lean::cnstr_get(x_48, 0);
lean::inc(x_49);
x_51 = lean::cnstr_get(x_48, 1);
lean::inc(x_51);
lean::dec(x_48);
x_54 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_41, x_49);
if (lean::is_scalar(x_15)) {
 x_55 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_55 = x_15;
}
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_51);
return x_55;
}
else
{
obj* x_60; unsigned char x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; 
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_60 = lean::cnstr_get(x_38, 0);
lean::inc(x_60);
x_62 = lean::cnstr_get_scalar<unsigned char>(x_38, sizeof(void*)*1);
if (lean::is_shared(x_38)) {
 lean::dec(x_38);
 x_63 = lean::box(0);
} else {
 lean::cnstr_release(x_38, 0);
 x_63 = x_38;
}
if (lean::is_scalar(x_63)) {
 x_64 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_64 = x_63;
}
lean::cnstr_set(x_64, 0, x_60);
lean::cnstr_set_scalar(x_64, sizeof(void*)*1, x_62);
x_65 = x_64;
if (lean::is_scalar(x_15)) {
 x_66 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_66 = x_15;
}
lean::cnstr_set(x_66, 0, x_65);
lean::cnstr_set(x_66, 1, x_35);
return x_66;
}
}
else
{
obj* x_68; obj* x_69; obj* x_71; obj* x_72; 
lean::dec(x_26);
x_68 = lean::box(0);
x_69 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_69);
if (lean::is_scalar(x_22)) {
 x_71 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_71 = x_22;
}
lean::cnstr_set(x_71, 0, x_68);
lean::cnstr_set(x_71, 1, x_18);
lean::cnstr_set(x_71, 2, x_69);
x_72 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_20, x_71);
if (lean::obj_tag(x_72) == 0)
{
obj* x_73; obj* x_75; obj* x_78; obj* x_79; obj* x_82; obj* x_83; obj* x_85; obj* x_88; obj* x_89; 
x_73 = lean::cnstr_get(x_72, 1);
lean::inc(x_73);
x_75 = lean::cnstr_get(x_72, 2);
lean::inc(x_75);
lean::dec(x_72);
x_78 = l_lean_parser_term_sort__app;
x_79 = l_lean_parser_term_sort__app_parser___closed__1;
lean::inc(x_79);
lean::inc(x_78);
x_82 = l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser___spec__2(x_78, x_79, x_0, x_1, x_2, x_3, x_73, x_13);
x_83 = lean::cnstr_get(x_82, 0);
lean::inc(x_83);
x_85 = lean::cnstr_get(x_82, 1);
lean::inc(x_85);
lean::dec(x_82);
x_88 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_75, x_83);
if (lean::is_scalar(x_15)) {
 x_89 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_89 = x_15;
}
lean::cnstr_set(x_89, 0, x_88);
lean::cnstr_set(x_89, 1, x_85);
return x_89;
}
else
{
obj* x_94; unsigned char x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; 
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_94 = lean::cnstr_get(x_72, 0);
lean::inc(x_94);
x_96 = lean::cnstr_get_scalar<unsigned char>(x_72, sizeof(void*)*1);
if (lean::is_shared(x_72)) {
 lean::dec(x_72);
 x_97 = lean::box(0);
} else {
 lean::cnstr_release(x_72, 0);
 x_97 = x_72;
}
if (lean::is_scalar(x_97)) {
 x_98 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_98 = x_97;
}
lean::cnstr_set(x_98, 0, x_94);
lean::cnstr_set_scalar(x_98, sizeof(void*)*1, x_96);
x_99 = x_98;
if (lean::is_scalar(x_15)) {
 x_100 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_100 = x_15;
}
lean::cnstr_set(x_100, 0, x_99);
lean::cnstr_set(x_100, 1, x_13);
return x_100;
}
}
}
}
else
{
obj* x_105; unsigned char x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; 
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_105 = lean::cnstr_get(x_11, 0);
lean::inc(x_105);
x_107 = lean::cnstr_get_scalar<unsigned char>(x_11, sizeof(void*)*1);
if (lean::is_shared(x_11)) {
 lean::dec(x_11);
 x_108 = lean::box(0);
} else {
 lean::cnstr_release(x_11, 0);
 x_108 = x_11;
}
if (lean::is_scalar(x_108)) {
 x_109 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_109 = x_108;
}
lean::cnstr_set(x_109, 0, x_105);
lean::cnstr_set_scalar(x_109, sizeof(void*)*1, x_107);
x_110 = x_109;
if (lean::is_scalar(x_15)) {
 x_111 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_111 = x_15;
}
lean::cnstr_set(x_111, 0, x_110);
lean::cnstr_set(x_111, 1, x_13);
return x_111;
}
}
}
obj* _init_l_lean_parser_term_sort__app_parser___closed__1() {
_start:
{
obj* x_0; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = l_lean_parser_max__prec;
lean::inc(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_level_parser), 5, 1);
lean::closure_set(x_2, 0, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort__app_parser___lambda__1), 5, 1);
lean::closure_set(x_3, 0, x_2);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__3___rarg), 6, 1);
lean::closure_set(x_4, 0, x_3);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_term_sort__app_parser___spec__1___rarg), 7, 1);
lean::closure_set(x_5, 0, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
return x_9;
}
}
obj* l_lean_parser_term_sort__app_parser___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_6; obj* x_7; obj* x_10; 
lean::dec(x_2);
x_6 = l_lean_parser_level__parser_run___closed__1;
x_7 = l_lean_parser_level__parser_run___closed__2;
lean::inc(x_7);
lean::inc(x_6);
x_10 = l_lean_parser_pratt__parser___at_lean_parser_level__parser_run___spec__1(x_6, x_7, x_0, x_1, x_3, x_4);
return x_10;
}
}
obj* l_reader__t_lift___at_lean_parser_term_sort__app_parser___spec__1___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_8; 
lean::dec(x_1);
x_8 = lean::apply_5(x_0, x_2, x_3, x_4, x_5, x_6);
return x_8;
}
}
obj* l_reader__t_lift___at_lean_parser_term_sort__app_parser___spec__1(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_term_sort__app_parser___spec__1___rarg), 7, 0);
return x_2;
}
}
obj* l_list_mfoldl___main___at_lean_parser_term_sort__app_parser___spec__3(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_15; obj* x_17; obj* x_18; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_2);
lean::dec(x_3);
x_15 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_15);
x_17 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_17, 0, x_1);
lean::cnstr_set(x_17, 1, x_7);
lean::cnstr_set(x_17, 2, x_15);
x_18 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_8);
return x_18;
}
else
{
obj* x_19; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_31; obj* x_32; obj* x_34; 
x_19 = lean::cnstr_get(x_2, 0);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_2, 1);
lean::inc(x_21);
if (lean::is_shared(x_2)) {
 lean::dec(x_2);
 x_23 = lean::box(0);
} else {
 lean::cnstr_release(x_2, 0);
 lean::cnstr_release(x_2, 1);
 x_23 = x_2;
}
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
x_31 = lean::apply_6(x_19, x_3, x_4, x_5, x_6, x_7, x_8);
x_32 = lean::cnstr_get(x_31, 0);
lean::inc(x_32);
x_34 = lean::cnstr_get(x_31, 1);
lean::inc(x_34);
lean::dec(x_31);
if (lean::obj_tag(x_32) == 0)
{
x_24 = x_32;
x_25 = x_34;
goto lbl_26;
}
else
{
obj* x_37; unsigned char x_39; obj* x_40; 
x_37 = lean::cnstr_get(x_32, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get_scalar<unsigned char>(x_32, sizeof(void*)*1);
if (lean::is_shared(x_32)) {
 lean::dec(x_32);
 x_40 = lean::box(0);
} else {
 lean::cnstr_release(x_32, 0);
 x_40 = x_32;
}
if (lean::obj_tag(x_1) == 0)
{
if (x_39 == 0)
{
unsigned char x_41; obj* x_42; obj* x_43; 
x_41 = 0;
if (lean::is_scalar(x_40)) {
 x_42 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_42 = x_40;
}
lean::cnstr_set(x_42, 0, x_37);
lean::cnstr_set_scalar(x_42, sizeof(void*)*1, x_41);
x_43 = x_42;
x_24 = x_43;
x_25 = x_34;
goto lbl_26;
}
else
{
obj* x_44; obj* x_45; 
if (lean::is_scalar(x_40)) {
 x_44 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_44 = x_40;
}
lean::cnstr_set(x_44, 0, x_37);
lean::cnstr_set_scalar(x_44, sizeof(void*)*1, x_39);
x_45 = x_44;
x_24 = x_45;
x_25 = x_34;
goto lbl_26;
}
}
else
{
obj* x_46; obj* x_48; obj* x_50; obj* x_51; obj* x_53; obj* x_55; obj* x_58; obj* x_60; obj* x_61; obj* x_62; 
x_46 = lean::cnstr_get(x_37, 3);
lean::inc(x_46);
x_48 = l_option_get___main___at_lean_parser_run___spec__2(x_46);
lean::inc(x_1);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_48);
lean::cnstr_set(x_50, 1, x_1);
x_51 = lean::cnstr_get(x_37, 0);
lean::inc(x_51);
x_53 = lean::cnstr_get(x_37, 1);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_37, 2);
lean::inc(x_55);
lean::dec(x_37);
x_58 = l_list_reverse___rarg(x_50);
lean::inc(x_0);
x_60 = l_lean_parser_syntax_mk__node(x_0, x_58);
x_61 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_61, 0, x_60);
x_62 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_62, 0, x_51);
lean::cnstr_set(x_62, 1, x_53);
lean::cnstr_set(x_62, 2, x_55);
lean::cnstr_set(x_62, 3, x_61);
if (x_39 == 0)
{
unsigned char x_63; obj* x_64; obj* x_65; 
x_63 = 0;
if (lean::is_scalar(x_40)) {
 x_64 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_64 = x_40;
}
lean::cnstr_set(x_64, 0, x_62);
lean::cnstr_set_scalar(x_64, sizeof(void*)*1, x_63);
x_65 = x_64;
x_24 = x_65;
x_25 = x_34;
goto lbl_26;
}
else
{
obj* x_66; obj* x_67; 
if (lean::is_scalar(x_40)) {
 x_66 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_66 = x_40;
}
lean::cnstr_set(x_66, 0, x_62);
lean::cnstr_set_scalar(x_66, sizeof(void*)*1, x_39);
x_67 = x_66;
x_24 = x_67;
x_25 = x_34;
goto lbl_26;
}
}
}
lbl_26:
{
if (lean::obj_tag(x_24) == 0)
{
obj* x_68; obj* x_70; obj* x_72; obj* x_74; obj* x_75; obj* x_76; obj* x_78; obj* x_79; 
x_68 = lean::cnstr_get(x_24, 0);
lean::inc(x_68);
x_70 = lean::cnstr_get(x_24, 1);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_24, 2);
lean::inc(x_72);
if (lean::is_shared(x_24)) {
 lean::dec(x_24);
 x_74 = lean::box(0);
} else {
 lean::cnstr_release(x_24, 0);
 lean::cnstr_release(x_24, 1);
 lean::cnstr_release(x_24, 2);
 x_74 = x_24;
}
if (lean::is_scalar(x_23)) {
 x_75 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_75 = x_23;
}
lean::cnstr_set(x_75, 0, x_68);
lean::cnstr_set(x_75, 1, x_1);
x_76 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_76);
if (lean::is_scalar(x_74)) {
 x_78 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_78 = x_74;
}
lean::cnstr_set(x_78, 0, x_75);
lean::cnstr_set(x_78, 1, x_70);
lean::cnstr_set(x_78, 2, x_76);
x_79 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_72, x_78);
if (lean::obj_tag(x_79) == 0)
{
obj* x_80; obj* x_82; obj* x_84; obj* x_87; obj* x_88; obj* x_90; obj* x_92; obj* x_93; obj* x_94; 
x_80 = lean::cnstr_get(x_79, 0);
lean::inc(x_80);
x_82 = lean::cnstr_get(x_79, 1);
lean::inc(x_82);
x_84 = lean::cnstr_get(x_79, 2);
lean::inc(x_84);
lean::dec(x_79);
x_87 = l_list_mfoldl___main___at_lean_parser_term_sort__app_parser___spec__3(x_0, x_80, x_21, x_3, x_4, x_5, x_6, x_82, x_25);
x_88 = lean::cnstr_get(x_87, 0);
lean::inc(x_88);
x_90 = lean::cnstr_get(x_87, 1);
lean::inc(x_90);
if (lean::is_shared(x_87)) {
 lean::dec(x_87);
 x_92 = lean::box(0);
} else {
 lean::cnstr_release(x_87, 0);
 lean::cnstr_release(x_87, 1);
 x_92 = x_87;
}
x_93 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_84, x_88);
if (lean::is_scalar(x_92)) {
 x_94 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_94 = x_92;
}
lean::cnstr_set(x_94, 0, x_93);
lean::cnstr_set(x_94, 1, x_90);
return x_94;
}
else
{
obj* x_101; unsigned char x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_3);
lean::dec(x_21);
x_101 = lean::cnstr_get(x_79, 0);
lean::inc(x_101);
x_103 = lean::cnstr_get_scalar<unsigned char>(x_79, sizeof(void*)*1);
if (lean::is_shared(x_79)) {
 lean::dec(x_79);
 x_104 = lean::box(0);
} else {
 lean::cnstr_release(x_79, 0);
 x_104 = x_79;
}
if (lean::is_scalar(x_104)) {
 x_105 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_105 = x_104;
}
lean::cnstr_set(x_105, 0, x_101);
lean::cnstr_set_scalar(x_105, sizeof(void*)*1, x_103);
x_106 = x_105;
x_107 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_107, 0, x_106);
lean::cnstr_set(x_107, 1, x_25);
return x_107;
}
}
else
{
obj* x_116; unsigned char x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; 
lean::dec(x_23);
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_21);
x_116 = lean::cnstr_get(x_24, 0);
lean::inc(x_116);
x_118 = lean::cnstr_get_scalar<unsigned char>(x_24, sizeof(void*)*1);
if (lean::is_shared(x_24)) {
 lean::dec(x_24);
 x_119 = lean::box(0);
} else {
 lean::cnstr_release(x_24, 0);
 x_119 = x_24;
}
if (lean::is_scalar(x_119)) {
 x_120 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_120 = x_119;
}
lean::cnstr_set(x_120, 0, x_116);
lean::cnstr_set_scalar(x_120, sizeof(void*)*1, x_118);
x_121 = x_120;
x_122 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_122, 0, x_121);
lean::cnstr_set(x_122, 1, x_25);
return x_122;
}
}
}
}
}
obj* l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser___spec__2(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_15; 
x_8 = lean::box(0);
lean::inc(x_0);
x_10 = l_list_mfoldl___main___at_lean_parser_term_sort__app_parser___spec__3(x_0, x_8, x_1, x_2, x_3, x_4, x_5, x_6, x_7);
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
if (lean::is_shared(x_10)) {
 lean::dec(x_10);
 x_15 = lean::box(0);
} else {
 lean::cnstr_release(x_10, 0);
 lean::cnstr_release(x_10, 1);
 x_15 = x_10;
}
if (lean::obj_tag(x_11) == 0)
{
obj* x_16; obj* x_18; obj* x_20; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_11, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_11, 1);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_11, 2);
lean::inc(x_20);
if (lean::is_shared(x_11)) {
 lean::dec(x_11);
 x_22 = lean::box(0);
} else {
 lean::cnstr_release(x_11, 0);
 lean::cnstr_release(x_11, 1);
 lean::cnstr_release(x_11, 2);
 x_22 = x_11;
}
x_23 = l_list_reverse___rarg(x_16);
x_24 = l_lean_parser_syntax_mk__node(x_0, x_23);
x_25 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_25);
if (lean::is_scalar(x_22)) {
 x_27 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_27 = x_22;
}
lean::cnstr_set(x_27, 0, x_24);
lean::cnstr_set(x_27, 1, x_18);
lean::cnstr_set(x_27, 2, x_25);
x_28 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_20, x_27);
if (lean::is_scalar(x_15)) {
 x_29 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_29 = x_15;
}
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_13);
return x_29;
}
else
{
obj* x_31; unsigned char x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; 
lean::dec(x_0);
x_31 = lean::cnstr_get(x_11, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get_scalar<unsigned char>(x_11, sizeof(void*)*1);
if (lean::is_shared(x_11)) {
 lean::dec(x_11);
 x_34 = lean::box(0);
} else {
 lean::cnstr_release(x_11, 0);
 x_34 = x_11;
}
if (lean::is_scalar(x_34)) {
 x_35 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_35 = x_34;
}
lean::cnstr_set(x_35, 0, x_31);
lean::cnstr_set_scalar(x_35, sizeof(void*)*1, x_33);
x_36 = x_35;
if (lean::is_scalar(x_15)) {
 x_37 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_37 = x_15;
}
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_13);
return x_37;
}
}
}
obj* _init_l_lean_parser_term_sort__app_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_28; obj* x_30; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort__app_parser_lean_parser_has__view___lambda__1), 7, 0);
lean::inc(x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__view___spec__1___rarg), 8, 2);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
x_4 = l_lean_parser_max__prec;
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_level_parser), 5, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort__app_parser___lambda__1), 5, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__3___rarg), 6, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_term_sort__app_parser___spec__1___rarg), 7, 1);
lean::closure_set(x_9, 0, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_9);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_0);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_lean_parser_term_sort__app;
lean::inc(x_12);
lean::inc(x_13);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser___spec__2), 8, 2);
lean::closure_set(x_16, 0, x_13);
lean::closure_set(x_16, 1, x_12);
x_17 = l_lean_parser_trailing__term__parser__m_monad;
x_18 = l_lean_parser_trailing__term__parser__m_monad__except;
x_19 = l_lean_parser_trailing__term__parser__m_lean_parser_monad__parsec;
x_20 = l_lean_parser_trailing__term__parser__m_alternative;
x_21 = l_lean_parser_term_sort__app_has__view;
lean::inc(x_21);
lean::inc(x_13);
lean::inc(x_20);
lean::inc(x_19);
lean::inc(x_18);
lean::inc(x_17);
x_28 = l_lean_parser_combinators_node_view___rarg(x_17, x_18, x_19, x_20, x_13, x_12, x_21);
lean::inc(x_20);
x_30 = l_lean_parser_combinators_seq__right_view___rarg(x_20, lean::box(0), lean::box(0), x_3, x_16, x_28);
return x_30;
}
}
obj* l_lean_parser_term_sort__app_parser_lean_parser_has__view___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_11; unsigned char x_13; 
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_1);
x_11 = l_lean_parser_term_sort;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_is__of__kind___main(x_11, x_0);
if (x_13 == 0)
{
obj* x_14; 
x_14 = l_lean_parser_parsec__t_failure___at_lean_parser_token___spec__4___rarg(x_5, x_6);
return x_14;
}
else
{
obj* x_15; obj* x_16; obj* x_18; obj* x_19; 
x_15 = lean::box(0);
x_16 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_16);
x_18 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_18, 0, x_15);
lean::cnstr_set(x_18, 1, x_5);
lean::cnstr_set(x_18, 2, x_16);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_6);
return x_19;
}
}
}
obj* l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__view___spec__1___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_12; obj* x_13; obj* x_15; obj* x_17; 
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
x_12 = lean::apply_6(x_0, x_2, x_3, x_4, x_5, x_6, x_7);
x_13 = lean::cnstr_get(x_12, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_12, 1);
lean::inc(x_15);
if (lean::is_shared(x_12)) {
 lean::dec(x_12);
 x_17 = lean::box(0);
} else {
 lean::cnstr_release(x_12, 0);
 lean::cnstr_release(x_12, 1);
 x_17 = x_12;
}
if (lean::obj_tag(x_13) == 0)
{
obj* x_18; obj* x_20; obj* x_22; obj* x_25; obj* x_26; obj* x_28; obj* x_31; obj* x_32; 
x_18 = lean::cnstr_get(x_13, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_13, 1);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_13, 2);
lean::inc(x_22);
lean::dec(x_13);
x_25 = lean::apply_7(x_1, x_18, x_2, x_3, x_4, x_5, x_20, x_15);
x_26 = lean::cnstr_get(x_25, 0);
lean::inc(x_26);
x_28 = lean::cnstr_get(x_25, 1);
lean::inc(x_28);
lean::dec(x_25);
x_31 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_22, x_26);
if (lean::is_scalar(x_17)) {
 x_32 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_32 = x_17;
}
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_28);
return x_32;
}
else
{
obj* x_38; unsigned char x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_38 = lean::cnstr_get(x_13, 0);
lean::inc(x_38);
x_40 = lean::cnstr_get_scalar<unsigned char>(x_13, sizeof(void*)*1);
if (lean::is_shared(x_13)) {
 lean::dec(x_13);
 x_41 = lean::box(0);
} else {
 lean::cnstr_release(x_13, 0);
 x_41 = x_13;
}
if (lean::is_scalar(x_41)) {
 x_42 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_42 = x_41;
}
lean::cnstr_set(x_42, 0, x_38);
lean::cnstr_set_scalar(x_42, sizeof(void*)*1, x_40);
x_43 = x_42;
if (lean::is_scalar(x_17)) {
 x_44 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_44 = x_17;
}
lean::cnstr_set(x_44, 0, x_43);
lean::cnstr_set(x_44, 1, x_15);
return x_44;
}
}
}
obj* l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__view___spec__1(obj* x_0, obj* x_1) {
_start:
{
obj* x_4; 
lean::dec(x_1);
lean::dec(x_0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__view___spec__1___rarg), 8, 0);
return x_4;
}
}
obj* _init_l_lean_parser_term_sort__app_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; 
x_0 = l_lean_parser_level_leading_parser_lean_parser_has__tokens;
x_1 = l_lean_parser_level_trailing_parser_lean_parser_has__tokens;
lean::inc(x_1);
lean::inc(x_0);
x_4 = l_list_append___main___rarg(x_0, x_1);
x_5 = l_lean_parser_tokens___rarg(x_4);
x_6 = lean::box(0);
x_7 = l_lean_parser_list_cons_tokens___rarg(x_5, x_6);
x_8 = l_lean_parser_term_lean_parser_has__tokens;
lean::inc(x_8);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_8, x_7);
x_11 = l_lean_parser_tokens___rarg(x_10);
x_12 = l_lean_parser_tokens___rarg(x_11);
return x_12;
}
}
obj* _init_l_lean_parser_term_app() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("app");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_app_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_app_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_app_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_app_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_term_app_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
lean::dec(x_1);
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_12; 
lean::dec(x_8);
x_12 = l_lean_parser_term_app_has__view_x_27___lambda__1___closed__1;
lean::inc(x_12);
return x_12;
}
else
{
obj* x_14; obj* x_17; obj* x_18; 
x_14 = lean::cnstr_get(x_8, 0);
lean::inc(x_14);
lean::dec(x_8);
x_17 = lean::box(3);
x_18 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_14);
return x_18;
}
}
else
{
obj* x_19; obj* x_21; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_8, 1);
lean::inc(x_21);
lean::dec(x_8);
if (lean::obj_tag(x_21) == 0)
{
obj* x_25; obj* x_26; 
lean::dec(x_21);
x_25 = lean::box(3);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_19);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_30; 
x_27 = lean::cnstr_get(x_21, 0);
lean::inc(x_27);
lean::dec(x_21);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_19);
lean::cnstr_set(x_30, 1, x_27);
return x_30;
}
}
}
}
}
obj* _init_l_lean_parser_term_app_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_2; 
x_0 = lean::box(3);
lean::inc(x_0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_0);
return x_2;
}
}
obj* l_lean_parser_term_app_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_1);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_lean_parser_term_app;
lean::inc(x_9);
x_11 = l_lean_parser_syntax_mk__node(x_9, x_8);
return x_11;
}
}
obj* _init_l_lean_parser_term_app_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_app_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_app_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_10; 
x_6 = l_lean_parser_term_app;
x_7 = l_lean_parser_term_app_parser___closed__1;
lean::inc(x_7);
lean::inc(x_6);
x_10 = l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser___spec__2(x_6, x_7, x_0, x_1, x_2, x_3, x_4, x_5);
return x_10;
}
}
obj* _init_l_lean_parser_term_app_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_app_parser___lambda__1), 6, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
return x_4;
}
}
obj* l_lean_parser_term_app_parser___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_7; obj* x_9; 
lean::dec(x_0);
x_7 = l_lean_parser_max__prec;
lean::inc(x_7);
x_9 = l_lean_parser_term_parser(x_7, x_1, x_2, x_3, x_4, x_5);
return x_9;
}
}
obj* _init_l_lean_parser_term_app_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_17; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_app_parser___lambda__1), 6, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
x_5 = l_lean_parser_trailing__term__parser__m_monad;
x_6 = l_lean_parser_trailing__term__parser__m_monad__except;
x_7 = l_lean_parser_trailing__term__parser__m_lean_parser_monad__parsec;
x_8 = l_lean_parser_trailing__term__parser__m_alternative;
x_9 = l_lean_parser_term_app;
x_10 = l_lean_parser_term_app_has__view;
lean::inc(x_10);
lean::inc(x_9);
lean::inc(x_8);
lean::inc(x_7);
lean::inc(x_6);
lean::inc(x_5);
x_17 = l_lean_parser_combinators_node_view___rarg(x_5, x_6, x_7, x_8, x_9, x_4, x_10);
return x_17;
}
}
obj* _init_l_lean_parser_term_app_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_0 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_0);
x_2 = l_lean_parser_tokens___rarg(x_0);
x_3 = lean::box(0);
x_4 = l_lean_parser_list_cons_tokens___rarg(x_2, x_3);
x_5 = l_lean_parser_term_lean_parser_has__tokens;
lean::inc(x_5);
x_7 = l_lean_parser_list_cons_tokens___rarg(x_5, x_4);
x_8 = l_lean_parser_tokens___rarg(x_7);
return x_8;
}
}
obj* l_lean_parser_term_mk__app(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_list_foldl___main___at_lean_parser_term_mk__app___spec__1(x_0, x_1);
return x_2;
}
}
obj* l_list_foldl___main___at_lean_parser_term_mk__app___spec__1(obj* x_0, obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
lean::dec(x_1);
return x_0;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_13; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_1, 1);
lean::inc(x_5);
if (lean::is_shared(x_1)) {
 lean::dec(x_1);
 x_7 = lean::box(0);
} else {
 lean::cnstr_release(x_1, 0);
 lean::cnstr_release(x_1, 1);
 x_7 = x_1;
}
x_8 = lean::box(0);
if (lean::is_scalar(x_7)) {
 x_9 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_9 = x_7;
}
lean::cnstr_set(x_9, 0, x_3);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_0);
lean::cnstr_set(x_10, 1, x_9);
x_11 = l_lean_parser_term_app;
lean::inc(x_11);
x_13 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_0 = x_13;
x_1 = x_5;
goto _start;
}
}
}
obj* _init_l_lean_parser_term_arrow() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("arrow");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_arrow_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_arrow_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_arrow_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_arrow_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; 
lean::dec(x_1);
x_3 = l_lean_parser_term_arrow_has__view_x_27___lambda__1___closed__1;
lean::inc(x_3);
return x_3;
}
else
{
obj* x_5; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
lean::dec(x_1);
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
if (lean::obj_tag(x_8) == 0)
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_12; 
lean::dec(x_8);
x_12 = l_lean_parser_term_arrow_has__view_x_27___lambda__1___closed__1;
lean::inc(x_12);
return x_12;
}
else
{
obj* x_14; obj* x_17; obj* x_19; 
x_14 = lean::cnstr_get(x_8, 0);
lean::inc(x_14);
lean::dec(x_8);
x_17 = lean::box(3);
lean::inc(x_17);
x_19 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_17);
lean::cnstr_set(x_19, 2, x_14);
return x_19;
}
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_8, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_8, 1);
lean::inc(x_22);
lean::dec(x_8);
if (lean::obj_tag(x_22) == 0)
{
obj* x_26; obj* x_28; 
lean::dec(x_22);
x_26 = lean::box(3);
lean::inc(x_26);
x_28 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_28, 0, x_26);
lean::cnstr_set(x_28, 1, x_20);
lean::cnstr_set(x_28, 2, x_26);
return x_28;
}
else
{
obj* x_29; obj* x_32; obj* x_33; 
x_29 = lean::cnstr_get(x_22, 0);
lean::inc(x_29);
lean::dec(x_22);
x_32 = lean::box(3);
x_33 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_20);
lean::cnstr_set(x_33, 2, x_29);
return x_33;
}
}
}
else
{
obj* x_34; obj* x_36; 
x_34 = lean::cnstr_get(x_8, 0);
lean::inc(x_34);
x_36 = lean::cnstr_get(x_8, 1);
lean::inc(x_36);
lean::dec(x_8);
if (lean::obj_tag(x_36) == 0)
{
if (lean::obj_tag(x_36) == 0)
{
obj* x_40; obj* x_42; 
lean::dec(x_36);
x_40 = lean::box(3);
lean::inc(x_40);
x_42 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_42, 0, x_34);
lean::cnstr_set(x_42, 1, x_40);
lean::cnstr_set(x_42, 2, x_40);
return x_42;
}
else
{
obj* x_43; obj* x_46; obj* x_47; 
x_43 = lean::cnstr_get(x_36, 0);
lean::inc(x_43);
lean::dec(x_36);
x_46 = lean::box(3);
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_34);
lean::cnstr_set(x_47, 1, x_46);
lean::cnstr_set(x_47, 2, x_43);
return x_47;
}
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_36, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_36, 1);
lean::inc(x_50);
lean::dec(x_36);
if (lean::obj_tag(x_50) == 0)
{
obj* x_54; obj* x_55; 
lean::dec(x_50);
x_54 = lean::box(3);
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_34);
lean::cnstr_set(x_55, 1, x_48);
lean::cnstr_set(x_55, 2, x_54);
return x_55;
}
else
{
obj* x_56; obj* x_59; 
x_56 = lean::cnstr_get(x_50, 0);
lean::inc(x_56);
lean::dec(x_50);
x_59 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_59, 0, x_34);
lean::cnstr_set(x_59, 1, x_48);
lean::cnstr_set(x_59, 2, x_56);
return x_59;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_arrow_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_3; 
x_0 = lean::box(3);
lean::inc(x_0);
lean::inc(x_0);
x_3 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_3, 0, x_0);
lean::cnstr_set(x_3, 1, x_0);
lean::cnstr_set(x_3, 2, x_0);
return x_3;
}
}
obj* l_lean_parser_term_arrow_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_5);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_3);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_1);
lean::cnstr_set(x_11, 1, x_10);
x_12 = l_lean_parser_term_arrow;
lean::inc(x_12);
x_14 = l_lean_parser_syntax_mk__node(x_12, x_11);
return x_14;
}
}
obj* _init_l_lean_parser_term_arrow_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_arrow_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_arrow_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_10; 
x_6 = l_lean_parser_term_arrow;
x_7 = l_lean_parser_term_arrow_parser___closed__1;
lean::inc(x_7);
lean::inc(x_6);
x_10 = l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser___spec__2(x_6, x_7, x_0, x_1, x_2, x_3, x_4, x_5);
return x_10;
}
}
obj* _init_l_lean_parser_term_arrow_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::mk_string("\xe2\x86\x92");
x_1 = lean::mk_string("->");
x_2 = lean::mk_nat_obj(25u);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_arrow_parser___spec__1), 9, 3);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
lean::closure_set(x_3, 2, x_2);
x_4 = lean::box(0);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_arrow_parser___lambda__1), 6, 0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
return x_9;
}
}
obj* l_lean_parser_term_arrow_parser___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_7; obj* x_8; 
lean::dec(x_0);
x_7 = lean::mk_nat_obj(24u);
x_8 = l_lean_parser_term_parser(x_7, x_1, x_2, x_3, x_4, x_5);
return x_8;
}
}
obj* l_lean_parser_unicode__symbol___at_lean_parser_term_arrow_parser___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
obj* x_12; obj* x_14; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
lean::dec(x_6);
lean::dec(x_4);
lean::dec(x_3);
x_12 = l_string_trim(x_0);
lean::inc(x_12);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_14, 0, x_12);
lean::inc(x_2);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol___spec__1), 6, 3);
lean::closure_set(x_16, 0, x_12);
lean::closure_set(x_16, 1, x_2);
lean::closure_set(x_16, 2, x_14);
x_17 = l_string_trim(x_1);
lean::inc(x_17);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_19, 0, x_17);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol___spec__1), 6, 3);
lean::closure_set(x_20, 0, x_17);
lean::closure_set(x_20, 1, x_2);
lean::closure_set(x_20, 2, x_19);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_16);
lean::cnstr_set(x_23, 1, x_22);
x_24 = l_lean_parser_combinators_any__of___at_lean_parser_unicode__symbol___spec__2(x_23, x_5, x_7, x_8);
return x_24;
}
}
obj* _init_l_lean_parser_term_arrow_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_22; 
x_0 = lean::mk_string("\xe2\x86\x92");
x_1 = lean::mk_string("->");
x_2 = lean::mk_nat_obj(25u);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_arrow_parser___spec__1), 9, 3);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
lean::closure_set(x_3, 2, x_2);
x_4 = lean::box(0);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_arrow_parser___lambda__1), 6, 0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_lean_parser_trailing__term__parser__m_monad;
x_11 = l_lean_parser_trailing__term__parser__m_monad__except;
x_12 = l_lean_parser_trailing__term__parser__m_lean_parser_monad__parsec;
x_13 = l_lean_parser_trailing__term__parser__m_alternative;
x_14 = l_lean_parser_term_arrow;
x_15 = l_lean_parser_term_arrow_has__view;
lean::inc(x_15);
lean::inc(x_14);
lean::inc(x_13);
lean::inc(x_12);
lean::inc(x_11);
lean::inc(x_10);
x_22 = l_lean_parser_combinators_node_view___rarg(x_10, x_11, x_12, x_13, x_14, x_9, x_15);
return x_22;
}
}
obj* _init_l_lean_parser_term_arrow_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_13; 
x_0 = lean::mk_string("\xe2\x86\x92");
x_1 = lean::mk_string("->");
x_2 = lean::mk_nat_obj(25u);
x_3 = l_lean_parser_unicode__symbol_lean_parser_has__tokens___rarg(x_0, x_1, x_2);
x_4 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_4);
x_6 = l_lean_parser_tokens___rarg(x_4);
x_7 = lean::box(0);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_6, x_7);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_3, x_8);
x_10 = l_lean_parser_term_lean_parser_has__tokens;
lean::inc(x_10);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_10, x_9);
x_13 = l_lean_parser_tokens___rarg(x_12);
return x_13;
}
}
obj* _init_l_lean_parser_term_projection__spec() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("projection_spec");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_projection__spec_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_projection__spec_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_projection__spec_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; obj* x_13; obj* x_16; obj* x_18; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
lean::dec(x_8);
x_16 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__4;
lean::inc(x_16);
x_18 = l_lean_name_has__dec__eq___main(x_11, x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; 
lean::dec(x_18);
lean::dec(x_13);
x_21 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
lean::inc(x_21);
return x_21;
}
else
{
lean::dec(x_18);
if (lean::obj_tag(x_13) == 0)
{
obj* x_25; 
lean::dec(x_13);
x_25 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
lean::inc(x_25);
return x_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_13, 1);
lean::inc(x_29);
lean::dec(x_13);
if (lean::obj_tag(x_29) == 0)
{
obj* x_33; 
lean::dec(x_29);
x_33 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; 
lean::dec(x_33);
x_35 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
lean::inc(x_35);
return x_35;
}
else
{
obj* x_37; obj* x_40; obj* x_42; 
x_37 = lean::cnstr_get(x_33, 0);
lean::inc(x_37);
lean::dec(x_33);
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 1);
lean::inc(x_42);
lean::dec(x_37);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_47; 
lean::dec(x_40);
lean::dec(x_42);
x_47 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
lean::inc(x_47);
return x_47;
}
case 1:
{
obj* x_51; 
lean::dec(x_40);
lean::dec(x_42);
x_51 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
lean::inc(x_51);
return x_51;
}
default:
{
obj* x_53; obj* x_55; obj* x_58; obj* x_59; 
x_53 = lean::cnstr_get(x_40, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_40, 1);
lean::inc(x_55);
lean::dec(x_40);
x_58 = lean::box(0);
x_59 = l_lean_name_has__dec__eq___main(x_53, x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; 
lean::dec(x_55);
lean::dec(x_42);
lean::dec(x_59);
x_63 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
lean::inc(x_63);
return x_63;
}
else
{
lean::dec(x_59);
if (lean::obj_tag(x_42) == 0)
{
obj* x_68; 
lean::dec(x_55);
lean::dec(x_42);
x_68 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
lean::inc(x_68);
return x_68;
}
else
{
obj* x_70; obj* x_72; 
x_70 = lean::cnstr_get(x_42, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_42, 1);
lean::inc(x_72);
lean::dec(x_42);
if (lean::obj_tag(x_72) == 0)
{
lean::dec(x_72);
x_1 = x_70;
x_2 = x_55;
goto lbl_3;
}
else
{
obj* x_79; 
lean::dec(x_70);
lean::dec(x_72);
lean::dec(x_55);
x_79 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
lean::inc(x_79);
return x_79;
}
}
}
}
}
}
}
else
{
obj* x_83; 
lean::dec(x_29);
lean::dec(x_27);
x_83 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
lean::inc(x_83);
return x_83;
}
}
}
}
lbl_3:
{
obj* x_85; obj* x_86; 
x_85 = lean::mk_nat_obj(0u);
x_86 = lean::nat_dec_eq(x_2, x_85);
lean::dec(x_85);
lean::dec(x_2);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; obj* x_91; obj* x_93; obj* x_94; 
lean::dec(x_86);
x_90 = l_lean_parser_number_has__view;
x_91 = lean::cnstr_get(x_90, 0);
lean::inc(x_91);
x_93 = lean::apply_1(x_91, x_1);
x_94 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_94, 0, x_93);
return x_94;
}
else
{
lean::dec(x_86);
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_97; 
lean::dec(x_1);
x_97 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2;
lean::inc(x_97);
return x_97;
}
case 1:
{
obj* x_99; obj* x_102; 
x_99 = lean::cnstr_get(x_1, 0);
lean::inc(x_99);
lean::dec(x_1);
x_102 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_102, 0, x_99);
return x_102;
}
case 2:
{
obj* x_104; 
lean::dec(x_1);
x_104 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2;
lean::inc(x_104);
return x_104;
}
default:
{
obj* x_107; 
lean::dec(x_1);
x_107 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2;
lean::inc(x_107);
return x_107;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
lean::inc(x_0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_1);
lean::inc(x_0);
lean::inc(x_0);
x_8 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_8, 0, x_0);
lean::cnstr_set(x_8, 1, x_3);
lean::cnstr_set(x_8, 2, x_5);
lean::cnstr_set(x_8, 3, x_0);
lean::cnstr_set(x_8, 4, x_0);
x_9 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_9, 0, x_8);
return x_9;
}
}
obj* _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__1;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_5);
lean::dec(x_1);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; obj* x_11; obj* x_13; obj* x_14; 
lean::dec(x_6);
x_10 = l_lean_parser_number_has__view;
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::apply_1(x_11, x_0);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
else
{
lean::dec(x_6);
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_17; 
lean::dec(x_0);
x_17 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2;
lean::inc(x_17);
return x_17;
}
case 1:
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_0, 0);
lean::inc(x_19);
lean::dec(x_0);
x_22 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
return x_22;
}
case 2:
{
obj* x_24; 
lean::dec(x_0);
x_24 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2;
lean::inc(x_24);
return x_24;
}
default:
{
obj* x_27; 
lean::dec(x_0);
x_27 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2;
lean::inc(x_27);
return x_27;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("projection_spec");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_14; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_2);
lean::inc(x_1);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_1);
x_8 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
lean::inc(x_8);
x_10 = l_lean_parser_syntax_mk__node(x_8, x_7);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_10);
lean::cnstr_set(x_11, 1, x_1);
x_12 = l_lean_parser_term_projection__spec;
lean::inc(x_12);
x_14 = l_lean_parser_syntax_mk__node(x_12, x_11);
return x_14;
}
else
{
obj* x_15; obj* x_18; obj* x_19; obj* x_21; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_28; obj* x_30; 
x_15 = lean::cnstr_get(x_0, 0);
lean::inc(x_15);
lean::dec(x_0);
x_18 = l_lean_parser_number_has__view;
x_19 = lean::cnstr_get(x_18, 1);
lean::inc(x_19);
x_21 = lean::apply_1(x_19, x_15);
lean::inc(x_1);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_21);
lean::cnstr_set(x_23, 1, x_1);
x_24 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
lean::inc(x_24);
x_26 = l_lean_parser_syntax_mk__node(x_24, x_23);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_lean_parser_term_projection__spec;
lean::inc(x_28);
x_30 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_30;
}
}
}
obj* _init_l_lean_parser_term_projection__spec_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_projection__spec_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* _init_l_lean_parser_term_projection() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::mk_string("term");
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_string("projection");
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_projection_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_projection_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_projection_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_projection_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; 
lean::dec(x_4);
x_6 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__2;
lean::inc(x_6);
return x_6;
}
else
{
obj* x_8; obj* x_11; 
x_8 = lean::cnstr_get(x_4, 0);
lean::inc(x_8);
lean::dec(x_4);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; 
x_14 = lean::box(3);
x_1 = x_11;
x_2 = x_14;
goto lbl_3;
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_11, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_11, 1);
lean::inc(x_17);
lean::dec(x_11);
x_1 = x_17;
x_2 = x_15;
goto lbl_3;
}
}
lbl_3:
{
obj* x_20; obj* x_21; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_23; 
x_23 = lean::box(3);
x_20 = x_1;
x_21 = x_23;
goto lbl_22;
}
else
{
obj* x_24; obj* x_26; 
x_24 = lean::cnstr_get(x_1, 0);
lean::inc(x_24);
x_26 = lean::cnstr_get(x_1, 1);
lean::inc(x_26);
lean::dec(x_1);
x_20 = x_26;
x_21 = x_24;
goto lbl_22;
}
lbl_22:
{
switch (lean::obj_tag(x_21)) {
case 0:
{
obj* x_29; obj* x_32; 
x_29 = lean::cnstr_get(x_21, 0);
lean::inc(x_29);
lean::dec(x_21);
x_32 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_32, 0, x_29);
if (lean::obj_tag(x_20) == 0)
{
obj* x_34; obj* x_36; 
lean::dec(x_20);
x_34 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
lean::inc(x_34);
x_36 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_36, 0, x_2);
lean::cnstr_set(x_36, 1, x_32);
lean::cnstr_set(x_36, 2, x_34);
return x_36;
}
else
{
obj* x_37; obj* x_40; obj* x_41; obj* x_43; obj* x_44; 
x_37 = lean::cnstr_get(x_20, 0);
lean::inc(x_37);
lean::dec(x_20);
x_40 = l_lean_parser_term_projection__spec_has__view;
x_41 = lean::cnstr_get(x_40, 0);
lean::inc(x_41);
x_43 = lean::apply_1(x_41, x_37);
x_44 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_44, 0, x_2);
lean::cnstr_set(x_44, 1, x_32);
lean::cnstr_set(x_44, 2, x_43);
return x_44;
}
}
case 1:
{
obj* x_46; 
lean::dec(x_21);
x_46 = lean::box(0);
if (lean::obj_tag(x_20) == 0)
{
obj* x_48; obj* x_50; 
lean::dec(x_20);
x_48 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
lean::inc(x_48);
x_50 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_50, 0, x_2);
lean::cnstr_set(x_50, 1, x_46);
lean::cnstr_set(x_50, 2, x_48);
return x_50;
}
else
{
obj* x_51; obj* x_54; obj* x_55; obj* x_57; obj* x_58; 
x_51 = lean::cnstr_get(x_20, 0);
lean::inc(x_51);
lean::dec(x_20);
x_54 = l_lean_parser_term_projection__spec_has__view;
x_55 = lean::cnstr_get(x_54, 0);
lean::inc(x_55);
x_57 = lean::apply_1(x_55, x_51);
x_58 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_58, 0, x_2);
lean::cnstr_set(x_58, 1, x_46);
lean::cnstr_set(x_58, 2, x_57);
return x_58;
}
}
case 2:
{
obj* x_60; 
lean::dec(x_21);
x_60 = lean::box(0);
if (lean::obj_tag(x_20) == 0)
{
obj* x_62; obj* x_64; 
lean::dec(x_20);
x_62 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
lean::inc(x_62);
x_64 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_64, 0, x_2);
lean::cnstr_set(x_64, 1, x_60);
lean::cnstr_set(x_64, 2, x_62);
return x_64;
}
else
{
obj* x_65; obj* x_68; obj* x_69; obj* x_71; obj* x_72; 
x_65 = lean::cnstr_get(x_20, 0);
lean::inc(x_65);
lean::dec(x_20);
x_68 = l_lean_parser_term_projection__spec_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
x_71 = lean::apply_1(x_69, x_65);
x_72 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_72, 0, x_2);
lean::cnstr_set(x_72, 1, x_60);
lean::cnstr_set(x_72, 2, x_71);
return x_72;
}
}
default:
{
obj* x_74; 
lean::dec(x_21);
x_74 = lean::box(0);
if (lean::obj_tag(x_20) == 0)
{
obj* x_76; obj* x_78; 
lean::dec(x_20);
x_76 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
lean::inc(x_76);
x_78 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_78, 0, x_2);
lean::cnstr_set(x_78, 1, x_74);
lean::cnstr_set(x_78, 2, x_76);
return x_78;
}
else
{
obj* x_79; obj* x_82; obj* x_83; obj* x_85; obj* x_86; 
x_79 = lean::cnstr_get(x_20, 0);
lean::inc(x_79);
lean::dec(x_20);
x_82 = l_lean_parser_term_projection__spec_has__view;
x_83 = lean::cnstr_get(x_82, 0);
lean::inc(x_83);
x_85 = lean::apply_1(x_83, x_79);
x_86 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_86, 0, x_2);
lean::cnstr_set(x_86, 1, x_74);
lean::cnstr_set(x_86, 2, x_85);
return x_86;
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_0 = l_lean_parser_term_projection__spec_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::box(3);
x_4 = lean::apply_1(x_1, x_3);
return x_4;
}
}
obj* _init_l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_8; 
x_8 = lean::box(3);
x_5 = x_0;
x_6 = x_8;
goto lbl_7;
}
else
{
obj* x_9; obj* x_11; 
x_9 = lean::cnstr_get(x_0, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 1);
lean::inc(x_11);
lean::dec(x_0);
x_5 = x_11;
x_6 = x_9;
goto lbl_7;
}
lbl_7:
{
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_14; obj* x_17; 
x_14 = lean::cnstr_get(x_6, 0);
lean::inc(x_14);
lean::dec(x_6);
x_17 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_17, 0, x_14);
if (lean::obj_tag(x_5) == 0)
{
obj* x_19; obj* x_21; 
lean::dec(x_5);
x_19 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
lean::inc(x_19);
x_21 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_21, 0, x_1);
lean::cnstr_set(x_21, 1, x_17);
lean::cnstr_set(x_21, 2, x_19);
return x_21;
}
else
{
obj* x_22; obj* x_25; obj* x_26; obj* x_28; obj* x_29; 
x_22 = lean::cnstr_get(x_5, 0);
lean::inc(x_22);
lean::dec(x_5);
x_25 = l_lean_parser_term_projection__spec_has__view;
x_26 = lean::cnstr_get(x_25, 0);
lean::inc(x_26);
x_28 = lean::apply_1(x_26, x_22);
x_29 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_29, 0, x_1);
lean::cnstr_set(x_29, 1, x_17);
lean::cnstr_set(x_29, 2, x_28);
return x_29;
}
}
case 1:
{
obj* x_31; 
lean::dec(x_6);
x_31 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
obj* x_33; obj* x_35; 
lean::dec(x_5);
x_33 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
lean::inc(x_33);
x_35 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_35, 0, x_1);
lean::cnstr_set(x_35, 1, x_31);
lean::cnstr_set(x_35, 2, x_33);
return x_35;
}
else
{
obj* x_36; obj* x_39; obj* x_40; obj* x_42; obj* x_43; 
x_36 = lean::cnstr_get(x_5, 0);
lean::inc(x_36);
lean::dec(x_5);
x_39 = l_lean_parser_term_projection__spec_has__view;
x_40 = lean::cnstr_get(x_39, 0);
lean::inc(x_40);
x_42 = lean::apply_1(x_40, x_36);
x_43 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_43, 0, x_1);
lean::cnstr_set(x_43, 1, x_31);
lean::cnstr_set(x_43, 2, x_42);
return x_43;
}
}
case 2:
{
obj* x_45; 
lean::dec(x_6);
x_45 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
obj* x_47; obj* x_49; 
lean::dec(x_5);
x_47 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
lean::inc(x_47);
x_49 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_49, 0, x_1);
lean::cnstr_set(x_49, 1, x_45);
lean::cnstr_set(x_49, 2, x_47);
return x_49;
}
else
{
obj* x_50; obj* x_53; obj* x_54; obj* x_56; obj* x_57; 
x_50 = lean::cnstr_get(x_5, 0);
lean::inc(x_50);
lean::dec(x_5);
x_53 = l_lean_parser_term_projection__spec_has__view;
x_54 = lean::cnstr_get(x_53, 0);
lean::inc(x_54);
x_56 = lean::apply_1(x_54, x_50);
x_57 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_57, 0, x_1);
lean::cnstr_set(x_57, 1, x_45);
lean::cnstr_set(x_57, 2, x_56);
return x_57;
}
}
default:
{
obj* x_59; 
lean::dec(x_6);
x_59 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
obj* x_61; obj* x_63; 
lean::dec(x_5);
x_61 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
lean::inc(x_61);
x_63 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_63, 0, x_1);
lean::cnstr_set(x_63, 1, x_59);
lean::cnstr_set(x_63, 2, x_61);
return x_63;
}
else
{
obj* x_64; obj* x_67; obj* x_68; obj* x_70; obj* x_71; 
x_64 = lean::cnstr_get(x_5, 0);
lean::inc(x_64);
lean::dec(x_5);
x_67 = l_lean_parser_term_projection__spec_has__view;
x_68 = lean::cnstr_get(x_67, 0);
lean::inc(x_68);
x_70 = lean::apply_1(x_68, x_64);
x_71 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_71, 0, x_1);
lean::cnstr_set(x_71, 1, x_59);
lean::cnstr_set(x_71, 2, x_70);
return x_71;
}
}
}
}
}
}
}
obj* l_lean_parser_term_projection_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_23; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
lean::inc(x_8);
x_10 = l_option_map___rarg(x_8, x_3);
x_11 = lean::box(3);
x_12 = l_option_get__or__else___main___rarg(x_10, x_11);
x_13 = l_lean_parser_term_projection__spec_has__view;
x_14 = lean::cnstr_get(x_13, 1);
lean::inc(x_14);
x_16 = lean::apply_1(x_14, x_5);
x_17 = lean::box(0);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_12);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_1);
lean::cnstr_set(x_20, 1, x_19);
x_21 = l_lean_parser_term_projection;
lean::inc(x_21);
x_23 = l_lean_parser_syntax_mk__node(x_21, x_20);
return x_23;
}
}
obj* _init_l_lean_parser_term_projection_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_projection_has__view_x_27;
lean::inc(x_0);
return x_0;
}
}
obj* l_lean_parser_term_projection_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_10; obj* x_11; obj* x_13; obj* x_15; obj* x_16; obj* x_17; 
x_6 = l_lean_parser_term_projection;
x_7 = l_lean_parser_term_projection_parser___closed__1;
lean::inc(x_7);
lean::inc(x_6);
x_10 = l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser___spec__2(x_6, x_7, x_0, x_1, x_2, x_3, x_4, x_5);
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
if (lean::is_shared(x_10)) {
 lean::dec(x_10);
 x_15 = lean::box(0);
} else {
 lean::cnstr_release(x_10, 0);
 lean::cnstr_release(x_10, 1);
 x_15 = x_10;
}
x_16 = l_lean_parser_parsec__t_try__mk__res___rarg(x_11);
if (lean::is_scalar(x_15)) {
 x_17 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_17 = x_15;
}
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_13);
return x_17;
}
}
obj* _init_l_lean_parser_term_projection_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_0 = lean::mk_string(".");
x_1 = l_string_quote(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_with__trailing___rarg___lambda__1), 2, 0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__1___rarg), 4, 1);
lean::closure_set(x_4, 0, x_3);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__2___rarg), 5, 1);
lean::closure_set(x_5, 0, x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__3___rarg), 6, 1);
lean::closure_set(x_6, 0, x_5);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_term_sort__app_parser___spec__1___rarg), 7, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_projection_parser___lambda__1), 8, 1);
lean::closure_set(x_8, 0, x_2);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__view___spec__1___rarg), 8, 2);
lean::closure_set(x_9, 0, x_7);
lean::closure_set(x_9, 1, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_number_parser___at_lean_parser_term_projection_parser___spec__3), 2, 0);
lean::inc(x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set(x_13, 1, x_10);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_term_projection_parser___spec__2), 2, 0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_13);
x_16 = lean::mk_nat_obj(0u);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_term_projection_parser___spec__4), 8, 2);
lean::closure_set(x_17, 0, x_15);
lean::closure_set(x_17, 1, x_16);
lean::inc(x_10);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_10);
x_20 = l_lean_parser_term_projection__spec;
lean::inc(x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser___spec__2), 8, 2);
lean::closure_set(x_22, 0, x_20);
lean::closure_set(x_22, 1, x_19);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_10);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_9);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_24);
return x_26;
}
}
obj* l_lean_parser_term_projection_parser___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_15; 
x_8 = l_lean_name_to__string___closed__1;
lean::inc(x_8);
x_10 = l_lean_parser_monad__parsec_str__core___at_lean_parser_term_projection_parser___spec__1(x_8, x_0, x_2, x_3, x_4, x_5, x_6, x_7);
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
if (lean::is_shared(x_10)) {
 lean::dec(x_10);
 x_15 = lean::box(0);
} else {
 lean::cnstr_release(x_10, 0);
 lean::cnstr_release(x_10, 1);
 x_15 = x_10;
}
if (lean::obj_tag(x_11) == 0)
{
obj* x_16; obj* x_18; obj* x_20; obj* x_22; obj* x_23; obj* x_25; obj* x_26; obj* x_27; 
x_16 = lean::cnstr_get(x_11, 1);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_11, 2);
lean::inc(x_18);
if (lean::is_shared(x_11)) {
 lean::dec(x_11);
 x_20 = lean::box(0);
} else {
 lean::cnstr_release(x_11, 0);
 lean::cnstr_release(x_11, 1);
 lean::cnstr_release(x_11, 2);
 x_20 = x_11;
}
lean::inc(x_16);
x_22 = l_lean_parser_mk__raw__res(x_1, x_16);
x_23 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_23);
if (lean::is_scalar(x_20)) {
 x_25 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_25 = x_20;
}
lean::cnstr_set(x_25, 0, x_22);
lean::cnstr_set(x_25, 1, x_16);
lean::cnstr_set(x_25, 2, x_23);
x_26 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_18, x_25);
if (lean::is_scalar(x_15)) {
 x_27 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_27 = x_15;
}
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_13);
return x_27;
}
else
{
obj* x_29; unsigned char x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; 
lean::dec(x_1);
x_29 = lean::cnstr_get(x_11, 0);
lean::inc(x_29);
x_31 = lean::cnstr_get_scalar<unsigned char>(x_11, sizeof(void*)*1);
if (lean::is_shared(x_11)) {
 lean::dec(x_11);
 x_32 = lean::box(0);
} else {
 lean::cnstr_release(x_11, 0);
 x_32 = x_11;
}
if (lean::is_scalar(x_32)) {
 x_33 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_33 = x_32;
}
lean::cnstr_set(x_33, 0, x_29);
lean::cnstr_set_scalar(x_33, sizeof(void*)*1, x_31);
x_34 = x_33;
if (lean::is_scalar(x_15)) {
 x_35 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_35 = x_15;
}
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_13);
return x_35;
}
}
}
obj* l_lean_parser_monad__parsec_str__core___at_lean_parser_term_projection_parser___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
unsigned char x_13; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
lean::inc(x_0);
x_13 = l_string_is__empty(x_0);
if (x_13 == 0)
{
obj* x_14; obj* x_16; obj* x_18; 
x_14 = lean::string_length(x_0);
lean::inc(x_0);
x_16 = lean::string_mk_iterator(x_0);
lean::inc(x_6);
x_18 = l___private_580269747__str__aux___main(x_14, x_16, x_6);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; obj* x_22; obj* x_24; unsigned char x_25; obj* x_26; obj* x_27; obj* x_28; 
lean::dec(x_18);
lean::dec(x_0);
x_21 = lean::box(0);
x_22 = l_string_join___closed__1;
lean::inc(x_22);
x_24 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_24, 0, x_6);
lean::cnstr_set(x_24, 1, x_22);
lean::cnstr_set(x_24, 2, x_1);
lean::cnstr_set(x_24, 3, x_21);
x_25 = 0;
x_26 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set_scalar(x_26, sizeof(void*)*1, x_25);
x_27 = x_26;
x_28 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_7);
return x_28;
}
else
{
obj* x_31; obj* x_34; obj* x_35; obj* x_36; 
lean::dec(x_6);
lean::dec(x_1);
x_31 = lean::cnstr_get(x_18, 0);
lean::inc(x_31);
lean::dec(x_18);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_35, 0, x_0);
lean::cnstr_set(x_35, 1, x_31);
lean::cnstr_set(x_35, 2, x_34);
x_36 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_7);
return x_36;
}
}
else
{
obj* x_39; obj* x_40; obj* x_43; obj* x_44; 
lean::dec(x_0);
lean::dec(x_1);
x_39 = l_string_join___closed__1;
x_40 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_40);
lean::inc(x_39);
x_43 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_43, 0, x_39);
lean::cnstr_set(x_43, 1, x_6);
lean::cnstr_set(x_43, 2, x_40);
x_44 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_44, 0, x_43);
lean::cnstr_set(x_44, 1, x_7);
return x_44;
}
}
}
obj* l_lean_parser_ident_parser___at_lean_parser_term_projection_parser___spec__2___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_7; obj* x_8; obj* x_10; obj* x_12; 
lean::dec(x_1);
lean::inc(x_2);
lean::inc(x_0);
x_7 = l_lean_parser_token(x_0, x_2, x_3);
x_8 = lean::cnstr_get(x_7, 0);
lean::inc(x_8);
x_10 = lean::cnstr_get(x_7, 1);
lean::inc(x_10);
if (lean::is_shared(x_7)) {
 lean::dec(x_7);
 x_12 = lean::box(0);
} else {
 lean::cnstr_release(x_7, 0);
 lean::cnstr_release(x_7, 1);
 x_12 = x_7;
}
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; obj* x_15; obj* x_17; obj* x_19; obj* x_20; 
x_13 = lean::cnstr_get(x_8, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_8, 1);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_8, 2);
lean::inc(x_17);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_19 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_release(x_8, 1);
 lean::cnstr_release(x_8, 2);
 x_19 = x_8;
}
switch (lean::obj_tag(x_13)) {
case 0:
{
obj* x_24; 
lean::dec(x_13);
lean::dec(x_19);
x_24 = lean::box(0);
x_20 = x_24;
goto lbl_21;
}
case 1:
{
obj* x_28; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_36; obj* x_37; obj* x_38; 
lean::dec(x_12);
lean::dec(x_0);
lean::dec(x_2);
x_28 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_28);
if (lean::is_scalar(x_19)) {
 x_30 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_30 = x_19;
}
lean::cnstr_set(x_30, 0, x_13);
lean::cnstr_set(x_30, 1, x_15);
lean::cnstr_set(x_30, 2, x_28);
x_31 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_30);
lean::inc(x_28);
x_33 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_28, x_31);
x_34 = l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4___rarg___closed__1;
lean::inc(x_34);
x_36 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_33, x_34);
x_37 = l_lean_parser_parsec__t_try__mk__res___rarg(x_36);
x_38 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_10);
return x_38;
}
case 2:
{
obj* x_41; 
lean::dec(x_13);
lean::dec(x_19);
x_41 = lean::box(0);
x_20 = x_41;
goto lbl_21;
}
default:
{
obj* x_44; 
lean::dec(x_13);
lean::dec(x_19);
x_44 = lean::box(0);
x_20 = x_44;
goto lbl_21;
}
}
lbl_21:
{
obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_52; obj* x_53; obj* x_55; obj* x_58; obj* x_59; obj* x_61; obj* x_63; obj* x_64; obj* x_65; 
lean::dec(x_20);
x_46 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_46, 0, x_2);
x_47 = lean::box(0);
x_48 = l_string_join___closed__1;
x_49 = l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4___rarg___closed__1;
lean::inc(x_49);
lean::inc(x_48);
x_52 = l_lean_parser_monad__parsec_error___at___private_4089500695__finish__comment__block__aux___main___spec__1___rarg(x_48, x_49, x_46, x_47, x_0, x_15, x_10);
x_53 = lean::cnstr_get(x_52, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_52, 1);
lean::inc(x_55);
lean::dec(x_52);
x_58 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_53);
x_59 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_59);
x_61 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_59, x_58);
lean::inc(x_49);
x_63 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_61, x_49);
x_64 = l_lean_parser_parsec__t_try__mk__res___rarg(x_63);
if (lean::is_scalar(x_12)) {
 x_65 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_65 = x_12;
}
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_55);
return x_65;
}
}
else
{
obj* x_68; unsigned char x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_76; obj* x_77; obj* x_79; obj* x_80; obj* x_81; 
lean::dec(x_0);
lean::dec(x_2);
x_68 = lean::cnstr_get(x_8, 0);
lean::inc(x_68);
x_70 = lean::cnstr_get_scalar<unsigned char>(x_8, sizeof(void*)*1);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_71 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 x_71 = x_8;
}
if (lean::is_scalar(x_71)) {
 x_72 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_72 = x_71;
}
lean::cnstr_set(x_72, 0, x_68);
lean::cnstr_set_scalar(x_72, sizeof(void*)*1, x_70);
x_73 = x_72;
x_74 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_74);
x_76 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_74, x_73);
x_77 = l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser___spec__4___rarg___closed__1;
lean::inc(x_77);
x_79 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_76, x_77);
x_80 = l_lean_parser_parsec__t_try__mk__res___rarg(x_79);
if (lean::is_scalar(x_12)) {
 x_81 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_81 = x_12;
}
lean::cnstr_set(x_81, 0, x_80);
lean::cnstr_set(x_81, 1, x_10);
return x_81;
}
}
}
obj* l_lean_parser_ident_parser___at_lean_parser_term_projection_parser___spec__2(obj* x_0, obj* x_1) {
_start:
{
obj* x_4; 
lean::dec(x_1);
lean::dec(x_0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_term_projection_parser___spec__2___rarg), 4, 0);
return x_4;
}
}
obj* l_lean_parser_number_parser___at_lean_parser_term_projection_parser___spec__3___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_7; obj* x_8; obj* x_10; obj* x_12; 
lean::dec(x_1);
lean::inc(x_2);
lean::inc(x_0);
x_7 = l_lean_parser_token(x_0, x_2, x_3);
x_8 = lean::cnstr_get(x_7, 0);
lean::inc(x_8);
x_10 = lean::cnstr_get(x_7, 1);
lean::inc(x_10);
if (lean::is_shared(x_7)) {
 lean::dec(x_7);
 x_12 = lean::box(0);
} else {
 lean::cnstr_release(x_7, 0);
 lean::cnstr_release(x_7, 1);
 x_12 = x_7;
}
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; obj* x_15; obj* x_17; obj* x_19; obj* x_21; 
x_13 = lean::cnstr_get(x_8, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_8, 1);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_8, 2);
lean::inc(x_17);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_19 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_release(x_8, 1);
 lean::cnstr_release(x_8, 2);
 x_19 = x_8;
}
lean::inc(x_13);
x_21 = l_lean_parser_try__view___at_lean_parser_number_parser___spec__1(x_13);
if (lean::obj_tag(x_21) == 0)
{
obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_31; obj* x_32; obj* x_34; obj* x_37; obj* x_39; obj* x_40; obj* x_42; obj* x_44; obj* x_45; obj* x_46; 
lean::dec(x_13);
lean::dec(x_19);
lean::dec(x_21);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_2);
x_26 = lean::box(0);
x_27 = l_string_join___closed__1;
x_28 = l_lean_parser_number_parser___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1___rarg___closed__1;
lean::inc(x_28);
lean::inc(x_27);
x_31 = l_lean_parser_monad__parsec_error___at___private_4089500695__finish__comment__block__aux___main___spec__1___rarg(x_27, x_28, x_25, x_26, x_0, x_15, x_10);
x_32 = lean::cnstr_get(x_31, 0);
lean::inc(x_32);
x_34 = lean::cnstr_get(x_31, 1);
lean::inc(x_34);
lean::dec(x_31);
x_37 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_37);
x_39 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_37, x_32);
x_40 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_39);
lean::inc(x_37);
x_42 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_37, x_40);
lean::inc(x_28);
x_44 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_42, x_28);
x_45 = l_lean_parser_parsec__t_try__mk__res___rarg(x_44);
if (lean::is_scalar(x_12)) {
 x_46 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_46 = x_12;
}
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_34);
return x_46;
}
else
{
obj* x_50; obj* x_52; obj* x_53; obj* x_54; obj* x_56; obj* x_57; obj* x_59; obj* x_60; obj* x_61; 
lean::dec(x_0);
lean::dec(x_2);
lean::dec(x_21);
x_50 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_50);
if (lean::is_scalar(x_19)) {
 x_52 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_52 = x_19;
}
lean::cnstr_set(x_52, 0, x_13);
lean::cnstr_set(x_52, 1, x_15);
lean::cnstr_set(x_52, 2, x_50);
x_53 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_52);
x_54 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_54);
x_56 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_54, x_53);
x_57 = l_lean_parser_number_parser___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1___rarg___closed__1;
lean::inc(x_57);
x_59 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_56, x_57);
x_60 = l_lean_parser_parsec__t_try__mk__res___rarg(x_59);
if (lean::is_scalar(x_12)) {
 x_61 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_61 = x_12;
}
lean::cnstr_set(x_61, 0, x_60);
lean::cnstr_set(x_61, 1, x_10);
return x_61;
}
}
else
{
obj* x_64; unsigned char x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_72; obj* x_73; obj* x_75; obj* x_76; obj* x_77; 
lean::dec(x_0);
lean::dec(x_2);
x_64 = lean::cnstr_get(x_8, 0);
lean::inc(x_64);
x_66 = lean::cnstr_get_scalar<unsigned char>(x_8, sizeof(void*)*1);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_67 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 x_67 = x_8;
}
if (lean::is_scalar(x_67)) {
 x_68 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_68 = x_67;
}
lean::cnstr_set(x_68, 0, x_64);
lean::cnstr_set_scalar(x_68, sizeof(void*)*1, x_66);
x_69 = x_68;
x_70 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_70);
x_72 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_70, x_69);
x_73 = l_lean_parser_number_parser___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1___rarg___closed__1;
lean::inc(x_73);
x_75 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_72, x_73);
x_76 = l_lean_parser_parsec__t_try__mk__res___rarg(x_75);
if (lean::is_scalar(x_12)) {
 x_77 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_77 = x_12;
}
lean::cnstr_set(x_77, 0, x_76);
lean::cnstr_set(x_77, 1, x_10);
return x_77;
}
}
}
obj* l_lean_parser_number_parser___at_lean_parser_term_projection_parser___spec__3(obj* x_0, obj* x_1) {
_start:
{
obj* x_4; 
lean::dec(x_1);
lean::dec(x_0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_number_parser___at_lean_parser_term_projection_parser___spec__3___rarg), 4, 0);
return x_4;
}
}
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser___spec__5___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9) {
_start:
{
obj* x_14; obj* x_15; unsigned char x_16; obj* x_17; obj* x_18; obj* x_19; 
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
x_14 = l_option_get__or__else___main___rarg(x_2, x_8);
x_15 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_0);
lean::cnstr_set(x_15, 2, x_1);
lean::cnstr_set(x_15, 3, x_3);
x_16 = 0;
x_17 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set_scalar(x_17, sizeof(void*)*1, x_16);
x_18 = x_17;
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_9);
return x_19;
}
}
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser___spec__5(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser___spec__5___rarg), 10, 0);
return x_2;
}
}
obj* l_lean_parser_combinators_choice__aux___main___at_lean_parser_term_projection_parser___spec__4(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_10; obj* x_11; obj* x_12; obj* x_16; 
lean::dec(x_0);
lean::dec(x_1);
x_10 = lean::box(0);
x_11 = l_lean_parser_combinators_choice__aux___main___rarg___closed__1;
x_12 = l_mjoin___rarg___closed__1;
lean::inc(x_10);
lean::inc(x_12);
lean::inc(x_11);
x_16 = l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser___spec__5___rarg(x_11, x_12, x_10, x_10, x_2, x_3, x_4, x_5, x_6, x_7);
return x_16;
}
else
{
obj* x_17; obj* x_19; obj* x_21; obj* x_27; obj* x_28; obj* x_30; obj* x_32; obj* x_33; obj* x_34; 
x_17 = lean::cnstr_get(x_0, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_0, 1);
lean::inc(x_19);
if (lean::is_shared(x_0)) {
 lean::dec(x_0);
 x_21 = lean::box(0);
} else {
 lean::cnstr_release(x_0, 0);
 lean::cnstr_release(x_0, 1);
 x_21 = x_0;
}
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
x_27 = lean::apply_6(x_17, x_2, x_3, x_4, x_5, x_6, x_7);
x_28 = lean::cnstr_get(x_27, 0);
lean::inc(x_28);
x_30 = lean::cnstr_get(x_27, 1);
lean::inc(x_30);
if (lean::is_shared(x_27)) {
 lean::dec(x_27);
 x_32 = lean::box(0);
} else {
 lean::cnstr_release(x_27, 0);
 lean::cnstr_release(x_27, 1);
 x_32 = x_27;
}
x_33 = lean::mk_nat_obj(1u);
x_34 = lean::nat_add(x_1, x_33);
lean::dec(x_33);
if (lean::obj_tag(x_28) == 0)
{
obj* x_36; obj* x_38; obj* x_40; obj* x_42; obj* x_43; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_50; obj* x_51; 
x_36 = lean::cnstr_get(x_28, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_28, 1);
lean::inc(x_38);
x_40 = lean::cnstr_get(x_28, 2);
lean::inc(x_40);
if (lean::is_shared(x_28)) {
 lean::dec(x_28);
 x_42 = lean::box(0);
} else {
 lean::cnstr_release(x_28, 0);
 lean::cnstr_release(x_28, 1);
 lean::cnstr_release(x_28, 2);
 x_42 = x_28;
}
x_43 = lean::box(0);
lean::inc(x_43);
x_45 = lean::alloc_cnstr(2, 2, 0);
lean::cnstr_set(x_45, 0, x_43);
lean::cnstr_set(x_45, 1, x_1);
if (lean::is_scalar(x_21)) {
 x_46 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_46 = x_21;
}
lean::cnstr_set(x_46, 0, x_36);
lean::cnstr_set(x_46, 1, x_43);
x_47 = l_lean_parser_syntax_mk__node(x_45, x_46);
x_48 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_48);
if (lean::is_scalar(x_42)) {
 x_50 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_50 = x_42;
}
lean::cnstr_set(x_50, 0, x_47);
lean::cnstr_set(x_50, 1, x_38);
lean::cnstr_set(x_50, 2, x_48);
x_51 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_40, x_50);
if (lean::obj_tag(x_51) == 0)
{
obj* x_59; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_6);
lean::dec(x_2);
lean::dec(x_3);
lean::dec(x_34);
lean::dec(x_19);
if (lean::is_scalar(x_32)) {
 x_59 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_59 = x_32;
}
lean::cnstr_set(x_59, 0, x_51);
lean::cnstr_set(x_59, 1, x_30);
return x_59;
}
else
{
obj* x_60; unsigned char x_62; 
x_60 = lean::cnstr_get(x_51, 0);
lean::inc(x_60);
x_62 = lean::cnstr_get_scalar<unsigned char>(x_51, sizeof(void*)*1);
if (x_62 == 0)
{
obj* x_64; obj* x_65; obj* x_67; obj* x_70; obj* x_71; 
lean::dec(x_51);
x_64 = l_lean_parser_combinators_choice__aux___main___at_lean_parser_term_projection_parser___spec__4(x_19, x_34, x_2, x_3, x_4, x_5, x_6, x_30);
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
x_67 = lean::cnstr_get(x_64, 1);
lean::inc(x_67);
lean::dec(x_64);
x_70 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_60, x_65);
if (lean::is_scalar(x_32)) {
 x_71 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_71 = x_32;
}
lean::cnstr_set(x_71, 0, x_70);
lean::cnstr_set(x_71, 1, x_67);
return x_71;
}
else
{
obj* x_80; 
lean::dec(x_60);
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_6);
lean::dec(x_2);
lean::dec(x_3);
lean::dec(x_34);
lean::dec(x_19);
if (lean::is_scalar(x_32)) {
 x_80 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_80 = x_32;
}
lean::cnstr_set(x_80, 0, x_51);
lean::cnstr_set(x_80, 1, x_30);
return x_80;
}
}
}
else
{
obj* x_83; unsigned char x_85; obj* x_86; 
lean::dec(x_1);
lean::dec(x_21);
x_83 = lean::cnstr_get(x_28, 0);
lean::inc(x_83);
x_85 = lean::cnstr_get_scalar<unsigned char>(x_28, sizeof(void*)*1);
if (lean::is_shared(x_28)) {
 lean::dec(x_28);
 x_86 = lean::box(0);
} else {
 lean::cnstr_release(x_28, 0);
 x_86 = x_28;
}
if (x_85 == 0)
{
obj* x_88; obj* x_89; obj* x_91; obj* x_94; obj* x_95; 
lean::dec(x_86);
x_88 = l_lean_parser_combinators_choice__aux___main___at_lean_parser_term_projection_parser___spec__4(x_19, x_34, x_2, x_3, x_4, x_5, x_6, x_30);
x_89 = lean::cnstr_get(x_88, 0);
lean::inc(x_89);
x_91 = lean::cnstr_get(x_88, 1);
lean::inc(x_91);
lean::dec(x_88);
x_94 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_83, x_89);
if (lean::is_scalar(x_32)) {
 x_95 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_95 = x_32;
}
lean::cnstr_set(x_95, 0, x_94);
lean::cnstr_set(x_95, 1, x_91);
return x_95;
}
else
{
obj* x_103; obj* x_104; obj* x_105; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_6);
lean::dec(x_2);
lean::dec(x_3);
lean::dec(x_34);
lean::dec(x_19);
if (lean::is_scalar(x_86)) {
 x_103 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_103 = x_86;
}
lean::cnstr_set(x_103, 0, x_83);
lean::cnstr_set_scalar(x_103, sizeof(void*)*1, x_85);
x_104 = x_103;
if (lean::is_scalar(x_32)) {
 x_105 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_105 = x_32;
}
lean::cnstr_set(x_105, 0, x_104);
lean::cnstr_set(x_105, 1, x_30);
return x_105;
}
}
}
}
}
obj* _init_l_lean_parser_term_projection_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_42; obj* x_45; 
x_0 = lean::mk_string(".");
x_1 = l_string_quote(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_with__trailing___rarg___lambda__1), 2, 0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__1___rarg), 4, 1);
lean::closure_set(x_4, 0, x_3);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__2___rarg), 5, 1);
lean::closure_set(x_5, 0, x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser___spec__3___rarg), 6, 1);
lean::closure_set(x_6, 0, x_5);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_term_sort__app_parser___spec__1___rarg), 7, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_projection_parser___lambda__1), 8, 1);
lean::closure_set(x_8, 0, x_2);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__view___spec__1___rarg), 8, 2);
lean::closure_set(x_9, 0, x_7);
lean::closure_set(x_9, 1, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_number_parser___at_lean_parser_term_projection_parser___spec__3), 2, 0);
lean::inc(x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set(x_13, 1, x_10);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_term_projection_parser___spec__2), 2, 0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_13);
x_16 = lean::mk_nat_obj(0u);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_term_projection_parser___spec__4), 8, 2);
lean::closure_set(x_17, 0, x_15);
lean::closure_set(x_17, 1, x_16);
lean::inc(x_10);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_10);
x_20 = l_lean_parser_term_projection__spec;
lean::inc(x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser___spec__2), 8, 2);
lean::closure_set(x_22, 0, x_20);
lean::closure_set(x_22, 1, x_19);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_10);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_9);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_24);
x_27 = l_lean_parser_term_projection;
lean::inc(x_26);
lean::inc(x_27);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser___spec__2), 8, 2);
lean::closure_set(x_30, 0, x_27);
lean::closure_set(x_30, 1, x_26);
x_31 = l_lean_parser_trailing__term__parser__m_monad;
x_32 = l_lean_parser_trailing__term__parser__m_monad__except;
x_33 = l_lean_parser_trailing__term__parser__m_lean_parser_monad__parsec;
x_34 = l_lean_parser_trailing__term__parser__m_alternative;
x_35 = l_lean_parser_term_projection_has__view;
lean::inc(x_35);
lean::inc(x_27);
lean::inc(x_34);
lean::inc(x_33);
lean::inc(x_32);
lean::inc(x_31);
x_42 = l_lean_parser_combinators_node_view___rarg(x_31, x_32, x_33, x_34, x_27, x_26, x_35);
lean::inc(x_34);
lean::inc(x_33);
x_45 = l_lean_parser_combinators_try_view___rarg(x_33, x_34, x_30, x_42);
return x_45;
}
}
obj* _init_l_lean_parser_term_projection_tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_0 = l_lean_parser_max__prec;
x_1 = lean::mk_nat_obj(1u);
x_2 = lean::nat_add(x_0, x_1);
lean::dec(x_1);
x_4 = lean::box(0);
x_5 = lean::mk_string(".");
lean::inc(x_4);
x_7 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_2);
lean::cnstr_set(x_7, 2, x_4);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_4);
return x_8;
}
}
obj* _init_l_lean_parser_term_builtin__trailing__parsers() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_0 = lean::box(0);
x_1 = lean::mk_string("\xe2\x86\x92");
lean::inc(x_0);
x_3 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_3, 0, x_0);
lean::cnstr_set(x_3, 1, x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_arrow_parser), 6, 0);
lean::inc(x_4);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_3);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::mk_string("->");
lean::inc(x_0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_0);
lean::cnstr_set(x_9, 1, x_7);
x_10 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_4);
x_11 = lean::mk_string(".");
lean::inc(x_0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_0);
lean::cnstr_set(x_13, 1, x_11);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_projection_parser), 6, 0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_0);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_10);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_6);
lean::cnstr_set(x_18, 1, x_17);
x_19 = l_lean_parser_token__map_of__list___main___rarg(x_18);
return x_19;
}
}
obj* _init_l_lean_parser_term_builtin__trailing__parsers_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_6; obj* x_8; 
x_0 = lean::box(0);
x_1 = l_lean_parser_term_projection_tokens;
lean::inc(x_1);
x_3 = l_lean_parser_token__map__cons_tokens___rarg(x_1, x_0);
x_4 = l_lean_parser_term_arrow_parser_lean_parser_has__tokens;
lean::inc(x_4);
x_6 = l_lean_parser_token__map__cons_tokens___rarg(x_4, x_3);
lean::inc(x_4);
x_8 = l_lean_parser_token__map__cons_tokens___rarg(x_4, x_6);
return x_8;
}
}
obj* l___private_1752552305__trailing(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; obj* x_9; obj* x_12; obj* x_13; obj* x_20; obj* x_21; obj* x_23; 
x_7 = lean::cnstr_get(x_0, 4);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 2);
lean::inc(x_9);
lean::dec(x_0);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_20 = l_lean_parser_indexed___at___private_1752552305__trailing___spec__1___rarg(x_7, x_1, x_2, x_3, x_4, x_5, x_6);
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_20, 1);
lean::inc(x_23);
lean::dec(x_20);
if (lean::obj_tag(x_21) == 0)
{
obj* x_26; obj* x_28; obj* x_30; obj* x_37; obj* x_38; obj* x_40; obj* x_43; 
x_26 = lean::cnstr_get(x_21, 0);
lean::inc(x_26);
x_28 = lean::cnstr_get(x_21, 1);
lean::inc(x_28);
x_30 = lean::cnstr_get(x_21, 2);
lean::inc(x_30);
lean::dec(x_21);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_37 = l_list_foldr___main___at___private_1752552305__trailing___spec__13(x_26, x_1, x_2, x_3, x_4, x_28, x_23);
x_38 = lean::cnstr_get(x_37, 0);
lean::inc(x_38);
x_40 = lean::cnstr_get(x_37, 1);
lean::inc(x_40);
lean::dec(x_37);
x_43 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_30, x_38);
x_12 = x_43;
x_13 = x_40;
goto lbl_14;
}
else
{
obj* x_44; unsigned char x_46; obj* x_47; obj* x_48; obj* x_49; 
x_44 = lean::cnstr_get(x_21, 0);
lean::inc(x_44);
x_46 = lean::cnstr_get_scalar<unsigned char>(x_21, sizeof(void*)*1);
if (lean::is_shared(x_21)) {
 lean::dec(x_21);
 x_47 = lean::box(0);
} else {
 lean::cnstr_release(x_21, 0);
 x_47 = x_21;
}
if (lean::is_scalar(x_47)) {
 x_48 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_48 = x_47;
}
lean::cnstr_set(x_48, 0, x_44);
lean::cnstr_set_scalar(x_48, sizeof(void*)*1, x_46);
x_49 = x_48;
x_12 = x_49;
x_13 = x_23;
goto lbl_14;
}
lbl_14:
{
if (lean::obj_tag(x_12) == 0)
{
obj* x_56; 
lean::dec(x_9);
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_56 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_56, 0, x_12);
lean::cnstr_set(x_56, 1, x_13);
return x_56;
}
else
{
obj* x_57; unsigned char x_59; 
x_57 = lean::cnstr_get(x_12, 0);
lean::inc(x_57);
x_59 = lean::cnstr_get_scalar<unsigned char>(x_12, sizeof(void*)*1);
if (x_59 == 0)
{
obj* x_66; obj* x_67; obj* x_69; obj* x_71; 
lean::dec(x_12);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_66 = l_lean_parser_indexed___at___private_1752552305__trailing___spec__1___rarg(x_9, x_1, x_2, x_3, x_4, x_5, x_13);
x_67 = lean::cnstr_get(x_66, 0);
lean::inc(x_67);
x_69 = lean::cnstr_get(x_66, 1);
lean::inc(x_69);
if (lean::is_shared(x_66)) {
 lean::dec(x_66);
 x_71 = lean::box(0);
} else {
 lean::cnstr_release(x_66, 0);
 lean::cnstr_release(x_66, 1);
 x_71 = x_66;
}
if (lean::obj_tag(x_67) == 0)
{
obj* x_72; obj* x_74; obj* x_76; obj* x_83; obj* x_84; obj* x_86; obj* x_89; 
x_72 = lean::cnstr_get(x_67, 0);
lean::inc(x_72);
x_74 = lean::cnstr_get(x_67, 1);
lean::inc(x_74);
x_76 = lean::cnstr_get(x_67, 2);
lean::inc(x_76);
lean::dec(x_67);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_83 = l_lean_parser_combinators_longest__match___at___private_1752552305__trailing___spec__6(x_72, x_1, x_2, x_3, x_4, x_74, x_69);
x_84 = lean::cnstr_get(x_83, 0);
lean::inc(x_84);
x_86 = lean::cnstr_get(x_83, 1);
lean::inc(x_86);
lean::dec(x_83);
x_89 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_76, x_84);
if (lean::obj_tag(x_89) == 0)
{
obj* x_95; obj* x_96; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_95 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_57, x_89);
if (lean::is_scalar(x_71)) {
 x_96 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_96 = x_71;
}
lean::cnstr_set(x_96, 0, x_95);
lean::cnstr_set(x_96, 1, x_86);
return x_96;
}
else
{
obj* x_97; unsigned char x_99; 
x_97 = lean::cnstr_get(x_89, 0);
lean::inc(x_97);
x_99 = lean::cnstr_get_scalar<unsigned char>(x_89, sizeof(void*)*1);
if (x_99 == 0)
{
obj* x_101; obj* x_103; obj* x_104; obj* x_106; obj* x_109; obj* x_110; obj* x_111; 
lean::dec(x_89);
x_101 = l___private_1752552305__trailing___closed__1;
lean::inc(x_101);
x_103 = l_lean_parser_combinators_any__of___at___private_1752552305__trailing___spec__10(x_101, x_1, x_2, x_3, x_4, x_5, x_86);
x_104 = lean::cnstr_get(x_103, 0);
lean::inc(x_104);
x_106 = lean::cnstr_get(x_103, 1);
lean::inc(x_106);
lean::dec(x_103);
x_109 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_97, x_104);
x_110 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_57, x_109);
if (lean::is_scalar(x_71)) {
 x_111 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_111 = x_71;
}
lean::cnstr_set(x_111, 0, x_110);
lean::cnstr_set(x_111, 1, x_106);
return x_111;
}
else
{
obj* x_118; obj* x_119; 
lean::dec(x_97);
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_118 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_57, x_89);
if (lean::is_scalar(x_71)) {
 x_119 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_119 = x_71;
}
lean::cnstr_set(x_119, 0, x_118);
lean::cnstr_set(x_119, 1, x_86);
return x_119;
}
}
}
else
{
obj* x_120; unsigned char x_122; obj* x_123; 
x_120 = lean::cnstr_get(x_67, 0);
lean::inc(x_120);
x_122 = lean::cnstr_get_scalar<unsigned char>(x_67, sizeof(void*)*1);
if (lean::is_shared(x_67)) {
 lean::dec(x_67);
 x_123 = lean::box(0);
} else {
 lean::cnstr_release(x_67, 0);
 x_123 = x_67;
}
if (x_122 == 0)
{
obj* x_125; obj* x_127; obj* x_128; obj* x_130; obj* x_133; obj* x_134; obj* x_135; 
lean::dec(x_123);
x_125 = l___private_1752552305__trailing___closed__1;
lean::inc(x_125);
x_127 = l_lean_parser_combinators_any__of___at___private_1752552305__trailing___spec__10(x_125, x_1, x_2, x_3, x_4, x_5, x_69);
x_128 = lean::cnstr_get(x_127, 0);
lean::inc(x_128);
x_130 = lean::cnstr_get(x_127, 1);
lean::inc(x_130);
lean::dec(x_127);
x_133 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_120, x_128);
x_134 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_57, x_133);
if (lean::is_scalar(x_71)) {
 x_135 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_135 = x_71;
}
lean::cnstr_set(x_135, 0, x_134);
lean::cnstr_set(x_135, 1, x_130);
return x_135;
}
else
{
obj* x_141; obj* x_142; obj* x_143; obj* x_144; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
if (lean::is_scalar(x_123)) {
 x_141 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_141 = x_123;
}
lean::cnstr_set(x_141, 0, x_120);
lean::cnstr_set_scalar(x_141, sizeof(void*)*1, x_122);
x_142 = x_141;
x_143 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_57, x_142);
if (lean::is_scalar(x_71)) {
 x_144 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_144 = x_71;
}
lean::cnstr_set(x_144, 0, x_143);
lean::cnstr_set(x_144, 1, x_69);
return x_144;
}
}
}
else
{
obj* x_152; 
lean::dec(x_9);
lean::dec(x_57);
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_152 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_152, 0, x_12);
lean::cnstr_set(x_152, 1, x_13);
return x_152;
}
}
}
}
}
obj* _init_l___private_1752552305__trailing___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_app_parser), 6, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort__app_parser), 6, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
return x_4;
}
}
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__2___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__2(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_1752552305__trailing___spec__2___rarg), 2, 0);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__3___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__3(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_1752552305__trailing___spec__3___rarg), 2, 0);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__4___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__4(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_1752552305__trailing___spec__4___rarg), 2, 0);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__5___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_1752552305__trailing___spec__5(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_1752552305__trailing___spec__5___rarg), 2, 0);
return x_2;
}
}
obj* l_lean_parser_indexed___at___private_1752552305__trailing___spec__1___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_11; obj* x_12; obj* x_14; obj* x_16; 
lean::dec(x_4);
lean::dec(x_2);
lean::dec(x_1);
lean::inc(x_3);
x_11 = l_lean_parser_monad__parsec_observing___at_lean_parser_peek__token___spec__2(x_3, x_5, x_6);
x_12 = lean::cnstr_get(x_11, 0);
lean::inc(x_12);
x_14 = lean::cnstr_get(x_11, 1);
lean::inc(x_14);
if (lean::is_shared(x_11)) {
 lean::dec(x_11);
 x_16 = lean::box(0);
} else {
 lean::cnstr_release(x_11, 0);
 lean::cnstr_release(x_11, 1);
 x_16 = x_11;
}
if (lean::obj_tag(x_12) == 0)
{
obj* x_17; obj* x_19; obj* x_21; 
x_17 = lean::cnstr_get(x_12, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_12, 1);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_12, 2);
lean::inc(x_21);
lean::dec(x_12);
if (lean::obj_tag(x_17) == 0)
{
obj* x_26; obj* x_27; obj* x_28; obj* x_32; obj* x_33; obj* x_35; obj* x_38; obj* x_39; 
lean::dec(x_17);
lean::dec(x_0);
x_26 = lean::box(0);
x_27 = l_string_join___closed__1;
x_28 = l_mjoin___rarg___closed__1;
lean::inc(x_26);
lean::inc(x_28);
lean::inc(x_27);
x_32 = l_lean_parser_monad__parsec_error___at___private_4089500695__finish__comment__block__aux___main___spec__1___rarg(x_27, x_28, x_26, x_26, x_3, x_19, x_14);
x_33 = lean::cnstr_get(x_32, 0);
lean::inc(x_33);
x_35 = lean::cnstr_get(x_32, 1);
lean::inc(x_35);
lean::dec(x_32);
x_38 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_33);
if (lean::is_scalar(x_16)) {
 x_39 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_39 = x_16;
}
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_35);
return x_39;
}
else
{
obj* x_40; 
x_40 = lean::cnstr_get(x_17, 0);
lean::inc(x_40);
lean::dec(x_17);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_43; obj* x_46; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_55; obj* x_58; obj* x_60; obj* x_61; obj* x_62; 
x_43 = lean::cnstr_get(x_40, 0);
lean::inc(x_43);
lean::dec(x_40);
x_46 = lean::cnstr_get(x_43, 1);
lean::inc(x_46);
lean::dec(x_43);
x_49 = lean::box(0);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_46);
x_51 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_50);
x_52 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_51, x_3, x_19, x_14);
x_53 = lean::cnstr_get(x_52, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_52, 1);
lean::inc(x_55);
lean::dec(x_52);
x_58 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_58);
x_60 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_58, x_53);
x_61 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_60);
if (lean::is_scalar(x_16)) {
 x_62 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_62 = x_16;
}
lean::cnstr_set(x_62, 0, x_61);
lean::cnstr_set(x_62, 1, x_55);
return x_62;
}
case 1:
{
obj* x_64; obj* x_66; obj* x_67; obj* x_68; obj* x_70; obj* x_73; obj* x_75; obj* x_76; obj* x_77; 
lean::dec(x_40);
x_64 = l_lean_parser_indexed___rarg___lambda__1___closed__1;
lean::inc(x_64);
x_66 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_64);
x_67 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_66, x_3, x_19, x_14);
x_68 = lean::cnstr_get(x_67, 0);
lean::inc(x_68);
x_70 = lean::cnstr_get(x_67, 1);
lean::inc(x_70);
lean::dec(x_67);
x_73 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_73);
x_75 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_73, x_68);
x_76 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_75);
if (lean::is_scalar(x_16)) {
 x_77 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_77 = x_16;
}
lean::cnstr_set(x_77, 0, x_76);
lean::cnstr_set(x_77, 1, x_70);
return x_77;
}
case 2:
{
obj* x_78; obj* x_81; obj* x_84; obj* x_85; obj* x_86; obj* x_88; obj* x_91; obj* x_93; obj* x_94; obj* x_95; 
x_78 = lean::cnstr_get(x_40, 0);
lean::inc(x_78);
lean::dec(x_40);
x_81 = lean::cnstr_get(x_78, 0);
lean::inc(x_81);
lean::dec(x_78);
x_84 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_81);
x_85 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_84, x_3, x_19, x_14);
x_86 = lean::cnstr_get(x_85, 0);
lean::inc(x_86);
x_88 = lean::cnstr_get(x_85, 1);
lean::inc(x_88);
lean::dec(x_85);
x_91 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_91);
x_93 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_91, x_86);
x_94 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_93);
if (lean::is_scalar(x_16)) {
 x_95 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_95 = x_16;
}
lean::cnstr_set(x_95, 0, x_94);
lean::cnstr_set(x_95, 1, x_88);
return x_95;
}
default:
{
obj* x_97; obj* x_98; obj* x_99; obj* x_104; obj* x_105; obj* x_107; 
lean::dec(x_40);
x_97 = lean::box(0);
x_98 = l_string_join___closed__1;
x_99 = l_mjoin___rarg___closed__1;
lean::inc(x_3);
lean::inc(x_97);
lean::inc(x_99);
lean::inc(x_98);
x_104 = l_lean_parser_monad__parsec_error___at___private_4089500695__finish__comment__block__aux___main___spec__1___rarg(x_98, x_99, x_97, x_97, x_3, x_19, x_14);
x_105 = lean::cnstr_get(x_104, 0);
lean::inc(x_105);
x_107 = lean::cnstr_get(x_104, 1);
lean::inc(x_107);
lean::dec(x_104);
if (lean::obj_tag(x_105) == 0)
{
obj* x_110; obj* x_112; obj* x_114; obj* x_117; obj* x_118; obj* x_119; obj* x_121; obj* x_124; obj* x_125; obj* x_126; 
x_110 = lean::cnstr_get(x_105, 0);
lean::inc(x_110);
x_112 = lean::cnstr_get(x_105, 1);
lean::inc(x_112);
x_114 = lean::cnstr_get(x_105, 2);
lean::inc(x_114);
lean::dec(x_105);
x_117 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_110);
x_118 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_117, x_3, x_112, x_107);
x_119 = lean::cnstr_get(x_118, 0);
lean::inc(x_119);
x_121 = lean::cnstr_get(x_118, 1);
lean::inc(x_121);
lean::dec(x_118);
x_124 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_114, x_119);
x_125 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_124);
if (lean::is_scalar(x_16)) {
 x_126 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_126 = x_16;
}
lean::cnstr_set(x_126, 0, x_125);
lean::cnstr_set(x_126, 1, x_121);
return x_126;
}
else
{
obj* x_129; unsigned char x_131; obj* x_132; obj* x_133; obj* x_134; obj* x_135; obj* x_136; 
lean::dec(x_0);
lean::dec(x_3);
x_129 = lean::cnstr_get(x_105, 0);
lean::inc(x_129);
x_131 = lean::cnstr_get_scalar<unsigned char>(x_105, sizeof(void*)*1);
if (lean::is_shared(x_105)) {
 lean::dec(x_105);
 x_132 = lean::box(0);
} else {
 lean::cnstr_release(x_105, 0);
 x_132 = x_105;
}
if (lean::is_scalar(x_132)) {
 x_133 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_133 = x_132;
}
lean::cnstr_set(x_133, 0, x_129);
lean::cnstr_set_scalar(x_133, sizeof(void*)*1, x_131);
x_134 = x_133;
x_135 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_134);
if (lean::is_scalar(x_16)) {
 x_136 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_136 = x_16;
}
lean::cnstr_set(x_136, 0, x_135);
lean::cnstr_set(x_136, 1, x_107);
return x_136;
}
}
}
}
}
else
{
obj* x_139; unsigned char x_141; obj* x_142; obj* x_143; obj* x_144; obj* x_145; 
lean::dec(x_0);
lean::dec(x_3);
x_139 = lean::cnstr_get(x_12, 0);
lean::inc(x_139);
x_141 = lean::cnstr_get_scalar<unsigned char>(x_12, sizeof(void*)*1);
if (lean::is_shared(x_12)) {
 lean::dec(x_12);
 x_142 = lean::box(0);
} else {
 lean::cnstr_release(x_12, 0);
 x_142 = x_12;
}
if (lean::is_scalar(x_142)) {
 x_143 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_143 = x_142;
}
lean::cnstr_set(x_143, 0, x_139);
lean::cnstr_set_scalar(x_143, sizeof(void*)*1, x_141);
x_144 = x_143;
if (lean::is_scalar(x_16)) {
 x_145 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_145 = x_16;
}
lean::cnstr_set(x_145, 0, x_144);
lean::cnstr_set(x_145, 1, x_14);
return x_145;
}
}
}
obj* l_lean_parser_indexed___at___private_1752552305__trailing___spec__1(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_indexed___at___private_1752552305__trailing___spec__1___rarg), 7, 0);
return x_2;
}
}
obj* l_lean_parser_parsec__t_lookahead___at___private_1752552305__trailing___spec__8(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_16; obj* x_17; obj* x_19; 
lean::inc(x_7);
x_16 = lean::apply_6(x_1, x_3, x_4, x_5, x_6, x_7, x_8);
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_16, 1);
lean::inc(x_19);
lean::dec(x_16);
if (lean::obj_tag(x_17) == 0)
{
obj* x_22; obj* x_24; obj* x_26; obj* x_28; obj* x_29; 
x_22 = lean::cnstr_get(x_17, 0);
lean::inc(x_22);
x_24 = lean::cnstr_get(x_17, 1);
lean::inc(x_24);
x_26 = lean::cnstr_get(x_17, 2);
lean::inc(x_26);
if (lean::is_shared(x_17)) {
 lean::dec(x_17);
 x_28 = lean::box(0);
} else {
 lean::cnstr_release(x_17, 0);
 lean::cnstr_release(x_17, 1);
 lean::cnstr_release(x_17, 2);
 x_28 = x_17;
}
if (lean::obj_tag(x_2) == 0)
{
obj* x_31; obj* x_33; obj* x_35; 
x_31 = lean::cnstr_get(x_2, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_2, 1);
lean::inc(x_33);
x_35 = lean::cnstr_get(x_2, 2);
lean::inc(x_35);
if (lean::obj_tag(x_35) == 0)
{
obj* x_38; obj* x_39; obj* x_41; 
lean::dec(x_28);
x_38 = lean::string_iterator_offset(x_24);
x_39 = lean::string_iterator_offset(x_33);
lean::dec(x_33);
x_41 = lean::nat_dec_lt(x_38, x_39);
if (lean::obj_tag(x_41) == 0)
{
obj* x_43; 
lean::dec(x_41);
x_43 = lean::nat_dec_lt(x_39, x_38);
lean::dec(x_38);
lean::dec(x_39);
if (lean::obj_tag(x_43) == 0)
{
obj* x_47; obj* x_49; obj* x_50; obj* x_52; obj* x_53; 
lean::dec(x_43);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_22);
lean::cnstr_set(x_47, 1, x_31);
lean::inc(x_24);
x_49 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_49, 0, x_47);
lean::cnstr_set(x_49, 1, x_24);
lean::cnstr_set(x_49, 2, x_35);
x_50 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_50);
x_52 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_52, 0, x_49);
lean::cnstr_set(x_52, 1, x_24);
lean::cnstr_set(x_52, 2, x_50);
x_53 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_26, x_52);
x_12 = x_53;
x_13 = x_19;
goto lbl_14;
}
else
{
obj* x_56; obj* x_57; obj* x_59; obj* x_60; obj* x_62; obj* x_63; 
lean::dec(x_43);
lean::dec(x_31);
x_56 = lean::box(0);
x_57 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_57, 0, x_22);
lean::cnstr_set(x_57, 1, x_56);
lean::inc(x_24);
x_59 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_59, 0, x_57);
lean::cnstr_set(x_59, 1, x_24);
lean::cnstr_set(x_59, 2, x_35);
x_60 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_60);
x_62 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_62, 0, x_59);
lean::cnstr_set(x_62, 1, x_24);
lean::cnstr_set(x_62, 2, x_60);
x_63 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_26, x_62);
x_12 = x_63;
x_13 = x_19;
goto lbl_14;
}
}
else
{
obj* x_70; obj* x_73; obj* x_74; 
lean::dec(x_41);
lean::dec(x_22);
lean::dec(x_35);
lean::dec(x_38);
lean::dec(x_39);
lean::dec(x_31);
x_70 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_70);
lean::inc(x_2);
x_73 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_73, 0, x_2);
lean::cnstr_set(x_73, 1, x_24);
lean::cnstr_set(x_73, 2, x_70);
x_74 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_26, x_73);
x_12 = x_74;
x_13 = x_19;
goto lbl_14;
}
}
else
{
obj* x_78; 
lean::dec(x_33);
lean::dec(x_35);
lean::dec(x_31);
x_78 = lean::box(0);
x_29 = x_78;
goto lbl_30;
}
}
else
{
obj* x_79; 
x_79 = lean::box(0);
x_29 = x_79;
goto lbl_30;
}
lbl_30:
{
obj* x_81; obj* x_83; obj* x_85; obj* x_86; obj* x_88; obj* x_89; 
lean::dec(x_29);
x_81 = lean::box(0);
lean::inc(x_81);
x_83 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_83, 0, x_22);
lean::cnstr_set(x_83, 1, x_81);
lean::inc(x_24);
if (lean::is_scalar(x_28)) {
 x_85 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_85 = x_28;
}
lean::cnstr_set(x_85, 0, x_83);
lean::cnstr_set(x_85, 1, x_24);
lean::cnstr_set(x_85, 2, x_81);
x_86 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_86);
x_88 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_88, 0, x_85);
lean::cnstr_set(x_88, 1, x_24);
lean::cnstr_set(x_88, 2, x_86);
x_89 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_26, x_88);
x_12 = x_89;
x_13 = x_19;
goto lbl_14;
}
}
else
{
obj* x_90; unsigned char x_92; obj* x_93; obj* x_94; obj* x_95; 
x_90 = lean::cnstr_get(x_17, 0);
lean::inc(x_90);
x_92 = lean::cnstr_get_scalar<unsigned char>(x_17, sizeof(void*)*1);
if (lean::is_shared(x_17)) {
 lean::dec(x_17);
 x_93 = lean::box(0);
} else {
 lean::cnstr_release(x_17, 0);
 x_93 = x_17;
}
if (lean::is_scalar(x_93)) {
 x_94 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_94 = x_93;
}
lean::cnstr_set(x_94, 0, x_90);
lean::cnstr_set_scalar(x_94, sizeof(void*)*1, x_92);
x_95 = x_94;
x_12 = x_95;
x_13 = x_19;
goto lbl_14;
}
lbl_11:
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_96; obj* x_98; obj* x_99; obj* x_101; obj* x_102; 
x_96 = lean::cnstr_get(x_9, 0);
lean::inc(x_96);
if (lean::is_shared(x_9)) {
 lean::dec(x_9);
 x_98 = lean::box(0);
} else {
 lean::cnstr_release(x_9, 0);
 lean::cnstr_release(x_9, 1);
 lean::cnstr_release(x_9, 2);
 x_98 = x_9;
}
x_99 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_99);
if (lean::is_scalar(x_98)) {
 x_101 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_101 = x_98;
}
lean::cnstr_set(x_101, 0, x_96);
lean::cnstr_set(x_101, 1, x_7);
lean::cnstr_set(x_101, 2, x_99);
x_102 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_102, 0, x_101);
lean::cnstr_set(x_102, 1, x_10);
return x_102;
}
else
{
obj* x_104; 
lean::dec(x_7);
x_104 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_104, 0, x_9);
lean::cnstr_set(x_104, 1, x_10);
return x_104;
}
}
lbl_14:
{
if (lean::obj_tag(x_12) == 0)
{
lean::dec(x_0);
lean::dec(x_2);
x_9 = x_12;
x_10 = x_13;
goto lbl_11;
}
else
{
obj* x_107; obj* x_109; obj* x_110; 
x_107 = lean::cnstr_get(x_12, 0);
lean::inc(x_107);
if (lean::is_shared(x_12)) {
 lean::dec(x_12);
 x_109 = lean::box(0);
} else {
 lean::cnstr_release(x_12, 0);
 x_109 = x_12;
}
x_110 = lean::cnstr_get(x_107, 0);
lean::inc(x_110);
if (lean::obj_tag(x_2) == 0)
{
obj* x_115; obj* x_117; 
lean::dec(x_109);
lean::dec(x_107);
lean::dec(x_0);
x_115 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_115);
x_117 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_117, 0, x_2);
lean::cnstr_set(x_117, 1, x_110);
lean::cnstr_set(x_117, 2, x_115);
x_9 = x_117;
x_10 = x_13;
goto lbl_11;
}
else
{
obj* x_118; obj* x_120; obj* x_121; obj* x_123; obj* x_125; 
x_118 = lean::cnstr_get(x_2, 0);
lean::inc(x_118);
x_120 = lean::string_iterator_offset(x_110);
x_121 = lean::cnstr_get(x_118, 0);
lean::inc(x_121);
x_123 = lean::string_iterator_offset(x_121);
lean::dec(x_121);
x_125 = lean::nat_dec_lt(x_120, x_123);
if (lean::obj_tag(x_125) == 0)
{
obj* x_128; 
lean::dec(x_125);
lean::dec(x_2);
x_128 = lean::nat_dec_lt(x_123, x_120);
lean::dec(x_123);
if (lean::obj_tag(x_128) == 0)
{
obj* x_131; obj* x_132; obj* x_134; 
lean::dec(x_128);
x_131 = l_lean_parser_parsec__t_merge___rarg(x_107, x_118);
x_132 = lean::string_iterator_offset(x_0);
lean::dec(x_0);
x_134 = lean::nat_dec_lt(x_132, x_120);
lean::dec(x_120);
lean::dec(x_132);
if (lean::obj_tag(x_134) == 0)
{
unsigned char x_138; obj* x_139; obj* x_140; obj* x_141; obj* x_143; 
lean::dec(x_134);
x_138 = 0;
if (lean::is_scalar(x_109)) {
 x_139 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_139 = x_109;
}
lean::cnstr_set(x_139, 0, x_131);
lean::cnstr_set_scalar(x_139, sizeof(void*)*1, x_138);
x_140 = x_139;
x_141 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_141);
x_143 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_143, 0, x_140);
lean::cnstr_set(x_143, 1, x_110);
lean::cnstr_set(x_143, 2, x_141);
x_9 = x_143;
x_10 = x_13;
goto lbl_11;
}
else
{
unsigned char x_145; obj* x_146; obj* x_147; obj* x_148; obj* x_150; 
lean::dec(x_134);
x_145 = 1;
if (lean::is_scalar(x_109)) {
 x_146 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_146 = x_109;
}
lean::cnstr_set(x_146, 0, x_131);
lean::cnstr_set_scalar(x_146, sizeof(void*)*1, x_145);
x_147 = x_146;
x_148 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_148);
x_150 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_150, 0, x_147);
lean::cnstr_set(x_150, 1, x_110);
lean::cnstr_set(x_150, 2, x_148);
x_9 = x_150;
x_10 = x_13;
goto lbl_11;
}
}
else
{
unsigned char x_155; obj* x_156; obj* x_157; obj* x_158; obj* x_160; 
lean::dec(x_118);
lean::dec(x_128);
lean::dec(x_120);
lean::dec(x_0);
x_155 = 1;
if (lean::is_scalar(x_109)) {
 x_156 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_156 = x_109;
}
lean::cnstr_set(x_156, 0, x_107);
lean::cnstr_set_scalar(x_156, sizeof(void*)*1, x_155);
x_157 = x_156;
x_158 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_158);
x_160 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_160, 0, x_157);
lean::cnstr_set(x_160, 1, x_110);
lean::cnstr_set(x_160, 2, x_158);
x_9 = x_160;
x_10 = x_13;
goto lbl_11;
}
}
else
{
obj* x_168; obj* x_170; 
lean::dec(x_118);
lean::dec(x_123);
lean::dec(x_120);
lean::dec(x_109);
lean::dec(x_107);
lean::dec(x_125);
lean::dec(x_0);
x_168 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_168);
x_170 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_170, 0, x_2);
lean::cnstr_set(x_170, 1, x_110);
lean::cnstr_set(x_170, 2, x_168);
x_9 = x_170;
x_10 = x_13;
goto lbl_11;
}
}
}
}
}
}
obj* l_list_mfoldr___main___at___private_1752552305__trailing___spec__9(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_13; obj* x_14; obj* x_15; obj* x_19; obj* x_20; obj* x_22; obj* x_23; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_13 = lean::box(0);
x_14 = l_list_mfoldr___main___at_lean_parser_monad__parsec_longest__match___spec__2___rarg___closed__1;
x_15 = l_mjoin___rarg___closed__1;
lean::inc(x_13);
lean::inc(x_15);
lean::inc(x_14);
x_19 = l_lean_parser_monad__parsec_error___at_lean_parser_number_x_27___spec__12___rarg(x_14, x_15, x_13, x_13, x_0);
x_20 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_20);
x_22 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_22, 0, x_19);
lean::cnstr_set(x_22, 1, x_6);
lean::cnstr_set(x_22, 2, x_20);
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_7);
return x_23;
}
else
{
obj* x_24; obj* x_26; obj* x_34; obj* x_35; obj* x_37; obj* x_39; 
x_24 = lean::cnstr_get(x_1, 0);
lean::inc(x_24);
x_26 = lean::cnstr_get(x_1, 1);
lean::inc(x_26);
lean::dec(x_1);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_0);
x_34 = l_list_mfoldr___main___at___private_1752552305__trailing___spec__9(x_0, x_26, x_2, x_3, x_4, x_5, x_6, x_7);
x_35 = lean::cnstr_get(x_34, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_34, 1);
lean::inc(x_37);
if (lean::is_shared(x_34)) {
 lean::dec(x_34);
 x_39 = lean::box(0);
} else {
 lean::cnstr_release(x_34, 0);
 lean::cnstr_release(x_34, 1);
 x_39 = x_34;
}
if (lean::obj_tag(x_35) == 0)
{
obj* x_40; obj* x_42; obj* x_44; obj* x_47; obj* x_48; obj* x_50; obj* x_53; obj* x_54; 
x_40 = lean::cnstr_get(x_35, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_35, 1);
lean::inc(x_42);
x_44 = lean::cnstr_get(x_35, 2);
lean::inc(x_44);
lean::dec(x_35);
x_47 = l_lean_parser_parsec__t_lookahead___at___private_1752552305__trailing___spec__8(x_0, x_24, x_40, x_2, x_3, x_4, x_5, x_42, x_37);
x_48 = lean::cnstr_get(x_47, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_47, 1);
lean::inc(x_50);
lean::dec(x_47);
x_53 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_44, x_48);
if (lean::is_scalar(x_39)) {
 x_54 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_54 = x_39;
}
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_50);
return x_54;
}
else
{
obj* x_61; unsigned char x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_0);
lean::dec(x_2);
lean::dec(x_3);
lean::dec(x_24);
x_61 = lean::cnstr_get(x_35, 0);
lean::inc(x_61);
x_63 = lean::cnstr_get_scalar<unsigned char>(x_35, sizeof(void*)*1);
if (lean::is_shared(x_35)) {
 lean::dec(x_35);
 x_64 = lean::box(0);
} else {
 lean::cnstr_release(x_35, 0);
 x_64 = x_35;
}
if (lean::is_scalar(x_64)) {
 x_65 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_65 = x_64;
}
lean::cnstr_set(x_65, 0, x_61);
lean::cnstr_set_scalar(x_65, sizeof(void*)*1, x_63);
x_66 = x_65;
if (lean::is_scalar(x_39)) {
 x_67 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_67 = x_39;
}
lean::cnstr_set(x_67, 0, x_66);
lean::cnstr_set(x_67, 1, x_37);
return x_67;
}
}
}
}
obj* l_lean_parser_monad__parsec_longest__match___at___private_1752552305__trailing___spec__7(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_8; obj* x_9; obj* x_11; obj* x_13; 
lean::inc(x_5);
x_8 = l_list_mfoldr___main___at___private_1752552305__trailing___spec__9(x_5, x_0, x_1, x_2, x_3, x_4, x_5, x_6);
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_13 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_release(x_8, 1);
 x_13 = x_8;
}
if (lean::obj_tag(x_9) == 0)
{
obj* x_14; obj* x_16; obj* x_19; obj* x_20; obj* x_22; obj* x_23; 
x_14 = lean::cnstr_get(x_9, 0);
lean::inc(x_14);
x_16 = lean::cnstr_get(x_9, 2);
lean::inc(x_16);
lean::dec(x_9);
x_19 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_14);
x_20 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_20);
x_22 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_20, x_19);
if (lean::is_scalar(x_13)) {
 x_23 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_23 = x_13;
}
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_11);
return x_23;
}
else
{
obj* x_24; unsigned char x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_32; obj* x_33; 
x_24 = lean::cnstr_get(x_9, 0);
lean::inc(x_24);
x_26 = lean::cnstr_get_scalar<unsigned char>(x_9, sizeof(void*)*1);
if (lean::is_shared(x_9)) {
 lean::dec(x_9);
 x_27 = lean::box(0);
} else {
 lean::cnstr_release(x_9, 0);
 x_27 = x_9;
}
if (lean::is_scalar(x_27)) {
 x_28 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_28 = x_27;
}
lean::cnstr_set(x_28, 0, x_24);
lean::cnstr_set_scalar(x_28, sizeof(void*)*1, x_26);
x_29 = x_28;
x_30 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_30);
x_32 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_30, x_29);
if (lean::is_scalar(x_13)) {
 x_33 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_33 = x_13;
}
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_11);
return x_33;
}
}
}
obj* l_lean_parser_combinators_longest__match___at___private_1752552305__trailing___spec__6(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; obj* x_8; obj* x_10; obj* x_12; 
x_7 = l_lean_parser_monad__parsec_longest__match___at___private_1752552305__trailing___spec__7(x_0, x_1, x_2, x_3, x_4, x_5, x_6);
x_8 = lean::cnstr_get(x_7, 0);
lean::inc(x_8);
x_10 = lean::cnstr_get(x_7, 1);
lean::inc(x_10);
if (lean::is_shared(x_7)) {
 lean::dec(x_7);
 x_12 = lean::box(0);
} else {
 lean::cnstr_release(x_7, 0);
 lean::cnstr_release(x_7, 1);
 x_12 = x_7;
}
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; obj* x_15; obj* x_17; obj* x_19; obj* x_20; 
x_13 = lean::cnstr_get(x_8, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_8, 1);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_8, 2);
lean::inc(x_17);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_19 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_release(x_8, 1);
 lean::cnstr_release(x_8, 2);
 x_19 = x_8;
}
if (lean::obj_tag(x_13) == 0)
{
obj* x_22; 
x_22 = lean::box(0);
x_20 = x_22;
goto lbl_21;
}
else
{
obj* x_23; obj* x_25; 
x_23 = lean::cnstr_get(x_13, 0);
lean::inc(x_23);
x_25 = lean::cnstr_get(x_13, 1);
lean::inc(x_25);
if (lean::obj_tag(x_25) == 0)
{
obj* x_31; obj* x_33; obj* x_34; obj* x_35; 
lean::dec(x_12);
lean::dec(x_13);
lean::dec(x_19);
lean::dec(x_25);
x_31 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_31);
x_33 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_33, 0, x_23);
lean::cnstr_set(x_33, 1, x_15);
lean::cnstr_set(x_33, 2, x_31);
x_34 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_33);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_10);
return x_35;
}
else
{
obj* x_38; 
lean::dec(x_23);
lean::dec(x_25);
x_38 = lean::box(0);
x_20 = x_38;
goto lbl_21;
}
}
lbl_21:
{
obj* x_40; obj* x_42; obj* x_43; obj* x_45; obj* x_46; obj* x_47; 
lean::dec(x_20);
x_40 = l_lean_parser_choice;
lean::inc(x_40);
x_42 = l_lean_parser_syntax_mk__node(x_40, x_13);
x_43 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_43);
if (lean::is_scalar(x_19)) {
 x_45 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_45 = x_19;
}
lean::cnstr_set(x_45, 0, x_42);
lean::cnstr_set(x_45, 1, x_15);
lean::cnstr_set(x_45, 2, x_43);
x_46 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_45);
if (lean::is_scalar(x_12)) {
 x_47 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_47 = x_12;
}
lean::cnstr_set(x_47, 0, x_46);
lean::cnstr_set(x_47, 1, x_10);
return x_47;
}
}
else
{
obj* x_48; unsigned char x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; 
x_48 = lean::cnstr_get(x_8, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get_scalar<unsigned char>(x_8, sizeof(void*)*1);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_51 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 x_51 = x_8;
}
if (lean::is_scalar(x_51)) {
 x_52 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_52 = x_51;
}
lean::cnstr_set(x_52, 0, x_48);
lean::cnstr_set_scalar(x_52, sizeof(void*)*1, x_50);
x_53 = x_52;
if (lean::is_scalar(x_12)) {
 x_54 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_54 = x_12;
}
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_10);
return x_54;
}
}
}
obj* l_reader__t_orelse___at___private_1752552305__trailing___spec__11___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_13; obj* x_14; obj* x_16; obj* x_18; 
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
x_13 = lean::apply_6(x_0, x_2, x_3, x_4, x_5, x_6, x_7);
x_14 = lean::cnstr_get(x_13, 0);
lean::inc(x_14);
x_16 = lean::cnstr_get(x_13, 1);
lean::inc(x_16);
if (lean::is_shared(x_13)) {
 lean::dec(x_13);
 x_18 = lean::box(0);
} else {
 lean::cnstr_release(x_13, 0);
 lean::cnstr_release(x_13, 1);
 x_18 = x_13;
}
if (lean::obj_tag(x_14) == 0)
{
obj* x_25; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_6);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
if (lean::is_scalar(x_18)) {
 x_25 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_25 = x_18;
}
lean::cnstr_set(x_25, 0, x_14);
lean::cnstr_set(x_25, 1, x_16);
return x_25;
}
else
{
obj* x_26; unsigned char x_28; 
x_26 = lean::cnstr_get(x_14, 0);
lean::inc(x_26);
x_28 = lean::cnstr_get_scalar<unsigned char>(x_14, sizeof(void*)*1);
if (x_28 == 0)
{
obj* x_30; obj* x_31; obj* x_33; obj* x_36; obj* x_37; 
lean::dec(x_14);
x_30 = lean::apply_6(x_1, x_2, x_3, x_4, x_5, x_6, x_16);
x_31 = lean::cnstr_get(x_30, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_30, 1);
lean::inc(x_33);
lean::dec(x_30);
x_36 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_26, x_31);
if (lean::is_scalar(x_18)) {
 x_37 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_37 = x_18;
}
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_33);
return x_37;
}
else
{
obj* x_45; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_6);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
lean::dec(x_26);
if (lean::is_scalar(x_18)) {
 x_45 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_45 = x_18;
}
lean::cnstr_set(x_45, 0, x_14);
lean::cnstr_set(x_45, 1, x_16);
return x_45;
}
}
}
}
obj* l_reader__t_orelse___at___private_1752552305__trailing___spec__11(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_orelse___at___private_1752552305__trailing___spec__11___rarg), 8, 0);
return x_2;
}
}
obj* l_list_foldl___main___at___private_1752552305__trailing___spec__12(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_9; 
lean::dec(x_1);
x_9 = lean::apply_6(x_0, x_2, x_3, x_4, x_5, x_6, x_7);
return x_9;
}
else
{
obj* x_10; obj* x_12; obj* x_15; 
x_10 = lean::cnstr_get(x_1, 0);
lean::inc(x_10);
x_12 = lean::cnstr_get(x_1, 1);
lean::inc(x_12);
lean::dec(x_1);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_orelse___at___private_1752552305__trailing___spec__11___rarg), 8, 2);
lean::closure_set(x_15, 0, x_0);
lean::closure_set(x_15, 1, x_10);
x_0 = x_15;
x_1 = x_12;
goto _start;
}
}
}
obj* l_lean_parser_combinators_any__of___at___private_1752552305__trailing___spec__10(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_8; obj* x_9; obj* x_10; obj* x_14; 
lean::dec(x_0);
x_8 = lean::box(0);
x_9 = l_lean_parser_combinators_any__of___rarg___closed__1;
x_10 = l_mjoin___rarg___closed__1;
lean::inc(x_8);
lean::inc(x_10);
lean::inc(x_9);
x_14 = l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser___spec__5___rarg(x_9, x_10, x_8, x_8, x_1, x_2, x_3, x_4, x_5, x_6);
return x_14;
}
else
{
obj* x_15; obj* x_17; obj* x_20; 
x_15 = lean::cnstr_get(x_0, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_0, 1);
lean::inc(x_17);
lean::dec(x_0);
x_20 = l_list_foldl___main___at___private_1752552305__trailing___spec__12(x_15, x_17, x_1, x_2, x_3, x_4, x_5, x_6);
return x_20;
}
}
}
obj* l_list_foldr___main___at___private_1752552305__trailing___spec__13(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_8; obj* x_9; obj* x_10; obj* x_14; 
lean::dec(x_0);
x_8 = lean::box(0);
x_9 = l_string_join___closed__1;
x_10 = l_mjoin___rarg___closed__1;
lean::inc(x_8);
lean::inc(x_10);
lean::inc(x_9);
x_14 = l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser___spec__5___rarg(x_9, x_10, x_8, x_8, x_1, x_2, x_3, x_4, x_5, x_6);
return x_14;
}
else
{
obj* x_15; obj* x_17; obj* x_20; obj* x_21; 
x_15 = lean::cnstr_get(x_0, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_0, 1);
lean::inc(x_17);
lean::dec(x_0);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_list_foldr___main___at___private_1752552305__trailing___spec__13), 7, 1);
lean::closure_set(x_20, 0, x_17);
x_21 = l_reader__t_orelse___at___private_1752552305__trailing___spec__11___rarg(x_15, x_20, x_1, x_2, x_3, x_4, x_5, x_6);
return x_21;
}
}
}
obj* l___private_4028176591__leading(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_12; obj* x_13; obj* x_15; obj* x_17; obj* x_18; 
x_6 = lean::cnstr_get(x_0, 3);
lean::inc(x_6);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_12 = l_lean_parser_indexed___at___private_4028176591__leading___spec__1___rarg(x_6, x_1, x_2, x_3, x_4, x_5);
x_13 = lean::cnstr_get(x_12, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_12, 1);
lean::inc(x_15);
if (lean::is_shared(x_12)) {
 lean::dec(x_12);
 x_17 = lean::box(0);
} else {
 lean::cnstr_release(x_12, 0);
 lean::cnstr_release(x_12, 1);
 x_17 = x_12;
}
x_18 = lean::cnstr_get(x_0, 1);
lean::inc(x_18);
lean::dec(x_0);
if (lean::obj_tag(x_13) == 0)
{
obj* x_21; obj* x_23; obj* x_25; obj* x_31; obj* x_32; obj* x_34; obj* x_37; 
x_21 = lean::cnstr_get(x_13, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_13, 1);
lean::inc(x_23);
x_25 = lean::cnstr_get(x_13, 2);
lean::inc(x_25);
lean::dec(x_13);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_31 = l_list_foldr___main___at___private_4028176591__leading___spec__6(x_21, x_1, x_2, x_3, x_23, x_15);
x_32 = lean::cnstr_get(x_31, 0);
lean::inc(x_32);
x_34 = lean::cnstr_get(x_31, 1);
lean::inc(x_34);
lean::dec(x_31);
x_37 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_32);
if (lean::obj_tag(x_37) == 0)
{
obj* x_43; 
lean::dec(x_18);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
if (lean::is_scalar(x_17)) {
 x_43 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_43 = x_17;
}
lean::cnstr_set(x_43, 0, x_37);
lean::cnstr_set(x_43, 1, x_34);
return x_43;
}
else
{
obj* x_44; unsigned char x_46; 
x_44 = lean::cnstr_get(x_37, 0);
lean::inc(x_44);
x_46 = lean::cnstr_get_scalar<unsigned char>(x_37, sizeof(void*)*1);
if (x_46 == 0)
{
obj* x_51; obj* x_52; obj* x_54; 
lean::dec(x_37);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_51 = l_lean_parser_indexed___at___private_4028176591__leading___spec__1___rarg(x_18, x_1, x_2, x_3, x_4, x_34);
x_52 = lean::cnstr_get(x_51, 0);
lean::inc(x_52);
x_54 = lean::cnstr_get(x_51, 1);
lean::inc(x_54);
lean::dec(x_51);
if (lean::obj_tag(x_52) == 0)
{
obj* x_57; obj* x_59; obj* x_61; obj* x_64; obj* x_65; obj* x_67; obj* x_70; obj* x_71; obj* x_72; 
x_57 = lean::cnstr_get(x_52, 0);
lean::inc(x_57);
x_59 = lean::cnstr_get(x_52, 1);
lean::inc(x_59);
x_61 = lean::cnstr_get(x_52, 2);
lean::inc(x_61);
lean::dec(x_52);
x_64 = l_lean_parser_combinators_longest__match___at___private_4028176591__leading___spec__7(x_57, x_1, x_2, x_3, x_59, x_54);
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
x_67 = lean::cnstr_get(x_64, 1);
lean::inc(x_67);
lean::dec(x_64);
x_70 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_61, x_65);
x_71 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_44, x_70);
if (lean::is_scalar(x_17)) {
 x_72 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_72 = x_17;
}
lean::cnstr_set(x_72, 0, x_71);
lean::cnstr_set(x_72, 1, x_67);
return x_72;
}
else
{
obj* x_76; unsigned char x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; 
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_76 = lean::cnstr_get(x_52, 0);
lean::inc(x_76);
x_78 = lean::cnstr_get_scalar<unsigned char>(x_52, sizeof(void*)*1);
if (lean::is_shared(x_52)) {
 lean::dec(x_52);
 x_79 = lean::box(0);
} else {
 lean::cnstr_release(x_52, 0);
 x_79 = x_52;
}
if (lean::is_scalar(x_79)) {
 x_80 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_80 = x_79;
}
lean::cnstr_set(x_80, 0, x_76);
lean::cnstr_set_scalar(x_80, sizeof(void*)*1, x_78);
x_81 = x_80;
x_82 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_44, x_81);
if (lean::is_scalar(x_17)) {
 x_83 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_83 = x_17;
}
lean::cnstr_set(x_83, 0, x_82);
lean::cnstr_set(x_83, 1, x_54);
return x_83;
}
}
else
{
obj* x_90; 
lean::dec(x_18);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
lean::dec(x_44);
if (lean::is_scalar(x_17)) {
 x_90 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_90 = x_17;
}
lean::cnstr_set(x_90, 0, x_37);
lean::cnstr_set(x_90, 1, x_34);
return x_90;
}
}
}
else
{
obj* x_91; unsigned char x_93; obj* x_94; 
x_91 = lean::cnstr_get(x_13, 0);
lean::inc(x_91);
x_93 = lean::cnstr_get_scalar<unsigned char>(x_13, sizeof(void*)*1);
if (lean::is_shared(x_13)) {
 lean::dec(x_13);
 x_94 = lean::box(0);
} else {
 lean::cnstr_release(x_13, 0);
 x_94 = x_13;
}
if (x_93 == 0)
{
obj* x_98; obj* x_99; obj* x_101; 
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_98 = l_lean_parser_indexed___at___private_4028176591__leading___spec__1___rarg(x_18, x_1, x_2, x_3, x_4, x_15);
x_99 = lean::cnstr_get(x_98, 0);
lean::inc(x_99);
x_101 = lean::cnstr_get(x_98, 1);
lean::inc(x_101);
lean::dec(x_98);
if (lean::obj_tag(x_99) == 0)
{
obj* x_105; obj* x_107; obj* x_109; obj* x_112; obj* x_113; obj* x_115; obj* x_118; obj* x_119; obj* x_120; 
lean::dec(x_94);
x_105 = lean::cnstr_get(x_99, 0);
lean::inc(x_105);
x_107 = lean::cnstr_get(x_99, 1);
lean::inc(x_107);
x_109 = lean::cnstr_get(x_99, 2);
lean::inc(x_109);
lean::dec(x_99);
x_112 = l_lean_parser_combinators_longest__match___at___private_4028176591__leading___spec__7(x_105, x_1, x_2, x_3, x_107, x_101);
x_113 = lean::cnstr_get(x_112, 0);
lean::inc(x_113);
x_115 = lean::cnstr_get(x_112, 1);
lean::inc(x_115);
lean::dec(x_112);
x_118 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_109, x_113);
x_119 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_91, x_118);
if (lean::is_scalar(x_17)) {
 x_120 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_120 = x_17;
}
lean::cnstr_set(x_120, 0, x_119);
lean::cnstr_set(x_120, 1, x_115);
return x_120;
}
else
{
obj* x_124; unsigned char x_126; obj* x_128; obj* x_129; obj* x_130; obj* x_131; 
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_124 = lean::cnstr_get(x_99, 0);
lean::inc(x_124);
x_126 = lean::cnstr_get_scalar<unsigned char>(x_99, sizeof(void*)*1);
lean::dec(x_99);
if (lean::is_scalar(x_94)) {
 x_128 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_128 = x_94;
}
lean::cnstr_set(x_128, 0, x_124);
lean::cnstr_set_scalar(x_128, sizeof(void*)*1, x_126);
x_129 = x_128;
x_130 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_91, x_129);
if (lean::is_scalar(x_17)) {
 x_131 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_131 = x_17;
}
lean::cnstr_set(x_131, 0, x_130);
lean::cnstr_set(x_131, 1, x_101);
return x_131;
}
}
else
{
obj* x_137; obj* x_138; obj* x_139; 
lean::dec(x_18);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
if (lean::is_scalar(x_94)) {
 x_137 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_137 = x_94;
}
lean::cnstr_set(x_137, 0, x_91);
lean::cnstr_set_scalar(x_137, sizeof(void*)*1, x_93);
x_138 = x_137;
if (lean::is_scalar(x_17)) {
 x_139 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_139 = x_17;
}
lean::cnstr_set(x_139, 0, x_138);
lean::cnstr_set(x_139, 1, x_15);
return x_139;
}
}
}
}
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__2___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__2(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_4028176591__leading___spec__2___rarg), 2, 0);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__3___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__3(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_4028176591__leading___spec__3___rarg), 2, 0);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__4___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__4(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_4028176591__leading___spec__4___rarg), 2, 0);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__5___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_4028176591__leading___spec__5(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_4028176591__leading___spec__5___rarg), 2, 0);
return x_2;
}
}
obj* l_lean_parser_indexed___at___private_4028176591__leading___spec__1___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_9; obj* x_10; obj* x_12; obj* x_14; 
lean::dec(x_3);
lean::dec(x_1);
lean::inc(x_2);
x_9 = l_lean_parser_monad__parsec_observing___at_lean_parser_peek__token___spec__2(x_2, x_4, x_5);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
x_12 = lean::cnstr_get(x_9, 1);
lean::inc(x_12);
if (lean::is_shared(x_9)) {
 lean::dec(x_9);
 x_14 = lean::box(0);
} else {
 lean::cnstr_release(x_9, 0);
 lean::cnstr_release(x_9, 1);
 x_14 = x_9;
}
if (lean::obj_tag(x_10) == 0)
{
obj* x_15; obj* x_17; obj* x_19; 
x_15 = lean::cnstr_get(x_10, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_10, 1);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_10, 2);
lean::inc(x_19);
lean::dec(x_10);
if (lean::obj_tag(x_15) == 0)
{
obj* x_24; obj* x_25; obj* x_26; obj* x_30; obj* x_31; obj* x_33; obj* x_36; obj* x_37; 
lean::dec(x_15);
lean::dec(x_0);
x_24 = lean::box(0);
x_25 = l_string_join___closed__1;
x_26 = l_mjoin___rarg___closed__1;
lean::inc(x_24);
lean::inc(x_26);
lean::inc(x_25);
x_30 = l_lean_parser_monad__parsec_error___at___private_4089500695__finish__comment__block__aux___main___spec__1___rarg(x_25, x_26, x_24, x_24, x_2, x_17, x_12);
x_31 = lean::cnstr_get(x_30, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_30, 1);
lean::inc(x_33);
lean::dec(x_30);
x_36 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_31);
if (lean::is_scalar(x_14)) {
 x_37 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_37 = x_14;
}
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_33);
return x_37;
}
else
{
obj* x_38; 
x_38 = lean::cnstr_get(x_15, 0);
lean::inc(x_38);
lean::dec(x_15);
switch (lean::obj_tag(x_38)) {
case 0:
{
obj* x_41; obj* x_44; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_53; obj* x_56; obj* x_58; obj* x_59; obj* x_60; 
x_41 = lean::cnstr_get(x_38, 0);
lean::inc(x_41);
lean::dec(x_38);
x_44 = lean::cnstr_get(x_41, 1);
lean::inc(x_44);
lean::dec(x_41);
x_47 = lean::box(0);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_47);
lean::cnstr_set(x_48, 1, x_44);
x_49 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_48);
x_50 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_49, x_2, x_17, x_12);
x_51 = lean::cnstr_get(x_50, 0);
lean::inc(x_51);
x_53 = lean::cnstr_get(x_50, 1);
lean::inc(x_53);
lean::dec(x_50);
x_56 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_56);
x_58 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_56, x_51);
x_59 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_58);
if (lean::is_scalar(x_14)) {
 x_60 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_60 = x_14;
}
lean::cnstr_set(x_60, 0, x_59);
lean::cnstr_set(x_60, 1, x_53);
return x_60;
}
case 1:
{
obj* x_62; obj* x_64; obj* x_65; obj* x_66; obj* x_68; obj* x_71; obj* x_73; obj* x_74; obj* x_75; 
lean::dec(x_38);
x_62 = l_lean_parser_indexed___rarg___lambda__1___closed__1;
lean::inc(x_62);
x_64 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_62);
x_65 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_64, x_2, x_17, x_12);
x_66 = lean::cnstr_get(x_65, 0);
lean::inc(x_66);
x_68 = lean::cnstr_get(x_65, 1);
lean::inc(x_68);
lean::dec(x_65);
x_71 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_71);
x_73 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_71, x_66);
x_74 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_73);
if (lean::is_scalar(x_14)) {
 x_75 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_75 = x_14;
}
lean::cnstr_set(x_75, 0, x_74);
lean::cnstr_set(x_75, 1, x_68);
return x_75;
}
case 2:
{
obj* x_76; obj* x_79; obj* x_82; obj* x_83; obj* x_84; obj* x_86; obj* x_89; obj* x_91; obj* x_92; obj* x_93; 
x_76 = lean::cnstr_get(x_38, 0);
lean::inc(x_76);
lean::dec(x_38);
x_79 = lean::cnstr_get(x_76, 0);
lean::inc(x_79);
lean::dec(x_76);
x_82 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_79);
x_83 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_82, x_2, x_17, x_12);
x_84 = lean::cnstr_get(x_83, 0);
lean::inc(x_84);
x_86 = lean::cnstr_get(x_83, 1);
lean::inc(x_86);
lean::dec(x_83);
x_89 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_89);
x_91 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_89, x_84);
x_92 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_91);
if (lean::is_scalar(x_14)) {
 x_93 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_93 = x_14;
}
lean::cnstr_set(x_93, 0, x_92);
lean::cnstr_set(x_93, 1, x_86);
return x_93;
}
default:
{
obj* x_95; obj* x_96; obj* x_97; obj* x_102; obj* x_103; obj* x_105; 
lean::dec(x_38);
x_95 = lean::box(0);
x_96 = l_string_join___closed__1;
x_97 = l_mjoin___rarg___closed__1;
lean::inc(x_2);
lean::inc(x_95);
lean::inc(x_97);
lean::inc(x_96);
x_102 = l_lean_parser_monad__parsec_error___at___private_4089500695__finish__comment__block__aux___main___spec__1___rarg(x_96, x_97, x_95, x_95, x_2, x_17, x_12);
x_103 = lean::cnstr_get(x_102, 0);
lean::inc(x_103);
x_105 = lean::cnstr_get(x_102, 1);
lean::inc(x_105);
lean::dec(x_102);
if (lean::obj_tag(x_103) == 0)
{
obj* x_108; obj* x_110; obj* x_112; obj* x_115; obj* x_116; obj* x_117; obj* x_119; obj* x_122; obj* x_123; obj* x_124; 
x_108 = lean::cnstr_get(x_103, 0);
lean::inc(x_108);
x_110 = lean::cnstr_get(x_103, 1);
lean::inc(x_110);
x_112 = lean::cnstr_get(x_103, 2);
lean::inc(x_112);
lean::dec(x_103);
x_115 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_108);
x_116 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_115, x_2, x_110, x_105);
x_117 = lean::cnstr_get(x_116, 0);
lean::inc(x_117);
x_119 = lean::cnstr_get(x_116, 1);
lean::inc(x_119);
lean::dec(x_116);
x_122 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_112, x_117);
x_123 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_122);
if (lean::is_scalar(x_14)) {
 x_124 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_124 = x_14;
}
lean::cnstr_set(x_124, 0, x_123);
lean::cnstr_set(x_124, 1, x_119);
return x_124;
}
else
{
obj* x_127; unsigned char x_129; obj* x_130; obj* x_131; obj* x_132; obj* x_133; obj* x_134; 
lean::dec(x_0);
lean::dec(x_2);
x_127 = lean::cnstr_get(x_103, 0);
lean::inc(x_127);
x_129 = lean::cnstr_get_scalar<unsigned char>(x_103, sizeof(void*)*1);
if (lean::is_shared(x_103)) {
 lean::dec(x_103);
 x_130 = lean::box(0);
} else {
 lean::cnstr_release(x_103, 0);
 x_130 = x_103;
}
if (lean::is_scalar(x_130)) {
 x_131 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_131 = x_130;
}
lean::cnstr_set(x_131, 0, x_127);
lean::cnstr_set_scalar(x_131, sizeof(void*)*1, x_129);
x_132 = x_131;
x_133 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_132);
if (lean::is_scalar(x_14)) {
 x_134 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_134 = x_14;
}
lean::cnstr_set(x_134, 0, x_133);
lean::cnstr_set(x_134, 1, x_105);
return x_134;
}
}
}
}
}
else
{
obj* x_137; unsigned char x_139; obj* x_140; obj* x_141; obj* x_142; obj* x_143; 
lean::dec(x_0);
lean::dec(x_2);
x_137 = lean::cnstr_get(x_10, 0);
lean::inc(x_137);
x_139 = lean::cnstr_get_scalar<unsigned char>(x_10, sizeof(void*)*1);
if (lean::is_shared(x_10)) {
 lean::dec(x_10);
 x_140 = lean::box(0);
} else {
 lean::cnstr_release(x_10, 0);
 x_140 = x_10;
}
if (lean::is_scalar(x_140)) {
 x_141 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_141 = x_140;
}
lean::cnstr_set(x_141, 0, x_137);
lean::cnstr_set_scalar(x_141, sizeof(void*)*1, x_139);
x_142 = x_141;
if (lean::is_scalar(x_14)) {
 x_143 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_143 = x_14;
}
lean::cnstr_set(x_143, 0, x_142);
lean::cnstr_set(x_143, 1, x_12);
return x_143;
}
}
}
obj* l_lean_parser_indexed___at___private_4028176591__leading___spec__1(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_indexed___at___private_4028176591__leading___spec__1___rarg), 6, 0);
return x_2;
}
}
obj* l_list_foldr___main___at___private_4028176591__leading___spec__6(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_7; obj* x_8; obj* x_9; obj* x_13; 
lean::dec(x_0);
x_7 = lean::box(0);
x_8 = l_string_join___closed__1;
x_9 = l_mjoin___rarg___closed__1;
lean::inc(x_7);
lean::inc(x_9);
lean::inc(x_8);
x_13 = l_lean_parser_monad__parsec_error___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__4___rarg(x_8, x_9, x_7, x_7, x_1, x_2, x_3, x_4, x_5);
return x_13;
}
else
{
obj* x_14; obj* x_16; obj* x_19; obj* x_20; 
x_14 = lean::cnstr_get(x_0, 0);
lean::inc(x_14);
x_16 = lean::cnstr_get(x_0, 1);
lean::inc(x_16);
lean::dec(x_0);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_list_foldr___main___at___private_4028176591__leading___spec__6), 6, 1);
lean::closure_set(x_19, 0, x_16);
x_20 = l_reader__t_orelse___at_lean_parser_command_notation__spec_fold__action_parser___spec__2___rarg(x_14, x_19, x_1, x_2, x_3, x_4, x_5);
return x_20;
}
}
}
obj* l_lean_parser_parsec__t_lookahead___at___private_4028176591__leading___spec__9(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_15; obj* x_16; obj* x_18; 
lean::inc(x_6);
x_15 = lean::apply_5(x_1, x_3, x_4, x_5, x_6, x_7);
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_15, 1);
lean::inc(x_18);
lean::dec(x_15);
if (lean::obj_tag(x_16) == 0)
{
obj* x_21; obj* x_23; obj* x_25; obj* x_27; obj* x_28; 
x_21 = lean::cnstr_get(x_16, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_16, 1);
lean::inc(x_23);
x_25 = lean::cnstr_get(x_16, 2);
lean::inc(x_25);
if (lean::is_shared(x_16)) {
 lean::dec(x_16);
 x_27 = lean::box(0);
} else {
 lean::cnstr_release(x_16, 0);
 lean::cnstr_release(x_16, 1);
 lean::cnstr_release(x_16, 2);
 x_27 = x_16;
}
if (lean::obj_tag(x_2) == 0)
{
obj* x_30; obj* x_32; obj* x_34; 
x_30 = lean::cnstr_get(x_2, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_2, 1);
lean::inc(x_32);
x_34 = lean::cnstr_get(x_2, 2);
lean::inc(x_34);
if (lean::obj_tag(x_34) == 0)
{
obj* x_37; obj* x_38; obj* x_40; 
lean::dec(x_27);
x_37 = lean::string_iterator_offset(x_23);
x_38 = lean::string_iterator_offset(x_32);
lean::dec(x_32);
x_40 = lean::nat_dec_lt(x_37, x_38);
if (lean::obj_tag(x_40) == 0)
{
obj* x_42; 
lean::dec(x_40);
x_42 = lean::nat_dec_lt(x_38, x_37);
lean::dec(x_37);
lean::dec(x_38);
if (lean::obj_tag(x_42) == 0)
{
obj* x_46; obj* x_48; obj* x_49; obj* x_51; obj* x_52; 
lean::dec(x_42);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_21);
lean::cnstr_set(x_46, 1, x_30);
lean::inc(x_23);
x_48 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_48, 0, x_46);
lean::cnstr_set(x_48, 1, x_23);
lean::cnstr_set(x_48, 2, x_34);
x_49 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_49);
x_51 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_51, 0, x_48);
lean::cnstr_set(x_51, 1, x_23);
lean::cnstr_set(x_51, 2, x_49);
x_52 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_51);
x_11 = x_52;
x_12 = x_18;
goto lbl_13;
}
else
{
obj* x_55; obj* x_56; obj* x_58; obj* x_59; obj* x_61; obj* x_62; 
lean::dec(x_42);
lean::dec(x_30);
x_55 = lean::box(0);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_21);
lean::cnstr_set(x_56, 1, x_55);
lean::inc(x_23);
x_58 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_58, 0, x_56);
lean::cnstr_set(x_58, 1, x_23);
lean::cnstr_set(x_58, 2, x_34);
x_59 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_59);
x_61 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_61, 0, x_58);
lean::cnstr_set(x_61, 1, x_23);
lean::cnstr_set(x_61, 2, x_59);
x_62 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_61);
x_11 = x_62;
x_12 = x_18;
goto lbl_13;
}
}
else
{
obj* x_69; obj* x_72; obj* x_73; 
lean::dec(x_21);
lean::dec(x_34);
lean::dec(x_37);
lean::dec(x_38);
lean::dec(x_40);
lean::dec(x_30);
x_69 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_69);
lean::inc(x_2);
x_72 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_72, 0, x_2);
lean::cnstr_set(x_72, 1, x_23);
lean::cnstr_set(x_72, 2, x_69);
x_73 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_72);
x_11 = x_73;
x_12 = x_18;
goto lbl_13;
}
}
else
{
obj* x_77; 
lean::dec(x_34);
lean::dec(x_30);
lean::dec(x_32);
x_77 = lean::box(0);
x_28 = x_77;
goto lbl_29;
}
}
else
{
obj* x_78; 
x_78 = lean::box(0);
x_28 = x_78;
goto lbl_29;
}
lbl_29:
{
obj* x_80; obj* x_82; obj* x_84; obj* x_85; obj* x_87; obj* x_88; 
lean::dec(x_28);
x_80 = lean::box(0);
lean::inc(x_80);
x_82 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_82, 0, x_21);
lean::cnstr_set(x_82, 1, x_80);
lean::inc(x_23);
if (lean::is_scalar(x_27)) {
 x_84 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_84 = x_27;
}
lean::cnstr_set(x_84, 0, x_82);
lean::cnstr_set(x_84, 1, x_23);
lean::cnstr_set(x_84, 2, x_80);
x_85 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_85);
x_87 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_87, 0, x_84);
lean::cnstr_set(x_87, 1, x_23);
lean::cnstr_set(x_87, 2, x_85);
x_88 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_87);
x_11 = x_88;
x_12 = x_18;
goto lbl_13;
}
}
else
{
obj* x_89; unsigned char x_91; obj* x_92; obj* x_93; obj* x_94; 
x_89 = lean::cnstr_get(x_16, 0);
lean::inc(x_89);
x_91 = lean::cnstr_get_scalar<unsigned char>(x_16, sizeof(void*)*1);
if (lean::is_shared(x_16)) {
 lean::dec(x_16);
 x_92 = lean::box(0);
} else {
 lean::cnstr_release(x_16, 0);
 x_92 = x_16;
}
if (lean::is_scalar(x_92)) {
 x_93 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_93 = x_92;
}
lean::cnstr_set(x_93, 0, x_89);
lean::cnstr_set_scalar(x_93, sizeof(void*)*1, x_91);
x_94 = x_93;
x_11 = x_94;
x_12 = x_18;
goto lbl_13;
}
lbl_10:
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_95; obj* x_97; obj* x_98; obj* x_100; obj* x_101; 
x_95 = lean::cnstr_get(x_8, 0);
lean::inc(x_95);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_97 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_release(x_8, 1);
 lean::cnstr_release(x_8, 2);
 x_97 = x_8;
}
x_98 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_98);
if (lean::is_scalar(x_97)) {
 x_100 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_100 = x_97;
}
lean::cnstr_set(x_100, 0, x_95);
lean::cnstr_set(x_100, 1, x_6);
lean::cnstr_set(x_100, 2, x_98);
x_101 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_101, 0, x_100);
lean::cnstr_set(x_101, 1, x_9);
return x_101;
}
else
{
obj* x_103; 
lean::dec(x_6);
x_103 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_103, 0, x_8);
lean::cnstr_set(x_103, 1, x_9);
return x_103;
}
}
lbl_13:
{
if (lean::obj_tag(x_11) == 0)
{
lean::dec(x_0);
lean::dec(x_2);
x_8 = x_11;
x_9 = x_12;
goto lbl_10;
}
else
{
obj* x_106; obj* x_108; obj* x_109; 
x_106 = lean::cnstr_get(x_11, 0);
lean::inc(x_106);
if (lean::is_shared(x_11)) {
 lean::dec(x_11);
 x_108 = lean::box(0);
} else {
 lean::cnstr_release(x_11, 0);
 x_108 = x_11;
}
x_109 = lean::cnstr_get(x_106, 0);
lean::inc(x_109);
if (lean::obj_tag(x_2) == 0)
{
obj* x_114; obj* x_116; 
lean::dec(x_106);
lean::dec(x_108);
lean::dec(x_0);
x_114 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_114);
x_116 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_116, 0, x_2);
lean::cnstr_set(x_116, 1, x_109);
lean::cnstr_set(x_116, 2, x_114);
x_8 = x_116;
x_9 = x_12;
goto lbl_10;
}
else
{
obj* x_117; obj* x_119; obj* x_120; obj* x_122; obj* x_124; 
x_117 = lean::cnstr_get(x_2, 0);
lean::inc(x_117);
x_119 = lean::string_iterator_offset(x_109);
x_120 = lean::cnstr_get(x_117, 0);
lean::inc(x_120);
x_122 = lean::string_iterator_offset(x_120);
lean::dec(x_120);
x_124 = lean::nat_dec_lt(x_119, x_122);
if (lean::obj_tag(x_124) == 0)
{
obj* x_127; 
lean::dec(x_124);
lean::dec(x_2);
x_127 = lean::nat_dec_lt(x_122, x_119);
lean::dec(x_122);
if (lean::obj_tag(x_127) == 0)
{
obj* x_130; obj* x_131; obj* x_133; 
lean::dec(x_127);
x_130 = l_lean_parser_parsec__t_merge___rarg(x_106, x_117);
x_131 = lean::string_iterator_offset(x_0);
lean::dec(x_0);
x_133 = lean::nat_dec_lt(x_131, x_119);
lean::dec(x_119);
lean::dec(x_131);
if (lean::obj_tag(x_133) == 0)
{
unsigned char x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_142; 
lean::dec(x_133);
x_137 = 0;
if (lean::is_scalar(x_108)) {
 x_138 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_138 = x_108;
}
lean::cnstr_set(x_138, 0, x_130);
lean::cnstr_set_scalar(x_138, sizeof(void*)*1, x_137);
x_139 = x_138;
x_140 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_140);
x_142 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_142, 0, x_139);
lean::cnstr_set(x_142, 1, x_109);
lean::cnstr_set(x_142, 2, x_140);
x_8 = x_142;
x_9 = x_12;
goto lbl_10;
}
else
{
unsigned char x_144; obj* x_145; obj* x_146; obj* x_147; obj* x_149; 
lean::dec(x_133);
x_144 = 1;
if (lean::is_scalar(x_108)) {
 x_145 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_145 = x_108;
}
lean::cnstr_set(x_145, 0, x_130);
lean::cnstr_set_scalar(x_145, sizeof(void*)*1, x_144);
x_146 = x_145;
x_147 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_147);
x_149 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_149, 0, x_146);
lean::cnstr_set(x_149, 1, x_109);
lean::cnstr_set(x_149, 2, x_147);
x_8 = x_149;
x_9 = x_12;
goto lbl_10;
}
}
else
{
unsigned char x_154; obj* x_155; obj* x_156; obj* x_157; obj* x_159; 
lean::dec(x_119);
lean::dec(x_117);
lean::dec(x_127);
lean::dec(x_0);
x_154 = 1;
if (lean::is_scalar(x_108)) {
 x_155 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_155 = x_108;
}
lean::cnstr_set(x_155, 0, x_106);
lean::cnstr_set_scalar(x_155, sizeof(void*)*1, x_154);
x_156 = x_155;
x_157 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_157);
x_159 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_159, 0, x_156);
lean::cnstr_set(x_159, 1, x_109);
lean::cnstr_set(x_159, 2, x_157);
x_8 = x_159;
x_9 = x_12;
goto lbl_10;
}
}
else
{
obj* x_167; obj* x_169; 
lean::dec(x_106);
lean::dec(x_119);
lean::dec(x_124);
lean::dec(x_122);
lean::dec(x_117);
lean::dec(x_108);
lean::dec(x_0);
x_167 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_167);
x_169 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_169, 0, x_2);
lean::cnstr_set(x_169, 1, x_109);
lean::cnstr_set(x_169, 2, x_167);
x_8 = x_169;
x_9 = x_12;
goto lbl_10;
}
}
}
}
}
}
obj* l_list_mfoldr___main___at___private_4028176591__leading___spec__10(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_11; obj* x_12; obj* x_13; obj* x_17; obj* x_18; obj* x_20; obj* x_21; 
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_11 = lean::box(0);
x_12 = l_list_mfoldr___main___at_lean_parser_monad__parsec_longest__match___spec__2___rarg___closed__1;
x_13 = l_mjoin___rarg___closed__1;
lean::inc(x_11);
lean::inc(x_13);
lean::inc(x_12);
x_17 = l_lean_parser_monad__parsec_error___at_lean_parser_number_x_27___spec__12___rarg(x_12, x_13, x_11, x_11, x_0);
x_18 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_18);
x_20 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_20, 0, x_17);
lean::cnstr_set(x_20, 1, x_5);
lean::cnstr_set(x_20, 2, x_18);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_6);
return x_21;
}
else
{
obj* x_22; obj* x_24; obj* x_31; obj* x_32; obj* x_34; obj* x_36; 
x_22 = lean::cnstr_get(x_1, 0);
lean::inc(x_22);
x_24 = lean::cnstr_get(x_1, 1);
lean::inc(x_24);
lean::dec(x_1);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_0);
x_31 = l_list_mfoldr___main___at___private_4028176591__leading___spec__10(x_0, x_24, x_2, x_3, x_4, x_5, x_6);
x_32 = lean::cnstr_get(x_31, 0);
lean::inc(x_32);
x_34 = lean::cnstr_get(x_31, 1);
lean::inc(x_34);
if (lean::is_shared(x_31)) {
 lean::dec(x_31);
 x_36 = lean::box(0);
} else {
 lean::cnstr_release(x_31, 0);
 lean::cnstr_release(x_31, 1);
 x_36 = x_31;
}
if (lean::obj_tag(x_32) == 0)
{
obj* x_37; obj* x_39; obj* x_41; obj* x_44; obj* x_45; obj* x_47; obj* x_50; obj* x_51; 
x_37 = lean::cnstr_get(x_32, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_32, 1);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_32, 2);
lean::inc(x_41);
lean::dec(x_32);
x_44 = l_lean_parser_parsec__t_lookahead___at___private_4028176591__leading___spec__9(x_0, x_22, x_37, x_2, x_3, x_4, x_39, x_34);
x_45 = lean::cnstr_get(x_44, 0);
lean::inc(x_45);
x_47 = lean::cnstr_get(x_44, 1);
lean::inc(x_47);
lean::dec(x_44);
x_50 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_41, x_45);
if (lean::is_scalar(x_36)) {
 x_51 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_51 = x_36;
}
lean::cnstr_set(x_51, 0, x_50);
lean::cnstr_set(x_51, 1, x_47);
return x_51;
}
else
{
obj* x_57; unsigned char x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; 
lean::dec(x_4);
lean::dec(x_0);
lean::dec(x_2);
lean::dec(x_3);
lean::dec(x_22);
x_57 = lean::cnstr_get(x_32, 0);
lean::inc(x_57);
x_59 = lean::cnstr_get_scalar<unsigned char>(x_32, sizeof(void*)*1);
if (lean::is_shared(x_32)) {
 lean::dec(x_32);
 x_60 = lean::box(0);
} else {
 lean::cnstr_release(x_32, 0);
 x_60 = x_32;
}
if (lean::is_scalar(x_60)) {
 x_61 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_61 = x_60;
}
lean::cnstr_set(x_61, 0, x_57);
lean::cnstr_set_scalar(x_61, sizeof(void*)*1, x_59);
x_62 = x_61;
if (lean::is_scalar(x_36)) {
 x_63 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_63 = x_36;
}
lean::cnstr_set(x_63, 0, x_62);
lean::cnstr_set(x_63, 1, x_34);
return x_63;
}
}
}
}
obj* l_lean_parser_monad__parsec_longest__match___at___private_4028176591__leading___spec__8(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_7; obj* x_8; obj* x_10; obj* x_12; 
lean::inc(x_4);
x_7 = l_list_mfoldr___main___at___private_4028176591__leading___spec__10(x_4, x_0, x_1, x_2, x_3, x_4, x_5);
x_8 = lean::cnstr_get(x_7, 0);
lean::inc(x_8);
x_10 = lean::cnstr_get(x_7, 1);
lean::inc(x_10);
if (lean::is_shared(x_7)) {
 lean::dec(x_7);
 x_12 = lean::box(0);
} else {
 lean::cnstr_release(x_7, 0);
 lean::cnstr_release(x_7, 1);
 x_12 = x_7;
}
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; obj* x_15; obj* x_18; obj* x_19; obj* x_21; obj* x_22; 
x_13 = lean::cnstr_get(x_8, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_8, 2);
lean::inc(x_15);
lean::dec(x_8);
x_18 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_15, x_13);
x_19 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_19);
x_21 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_18);
if (lean::is_scalar(x_12)) {
 x_22 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_22 = x_12;
}
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_10);
return x_22;
}
else
{
obj* x_23; unsigned char x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_31; obj* x_32; 
x_23 = lean::cnstr_get(x_8, 0);
lean::inc(x_23);
x_25 = lean::cnstr_get_scalar<unsigned char>(x_8, sizeof(void*)*1);
if (lean::is_shared(x_8)) {
 lean::dec(x_8);
 x_26 = lean::box(0);
} else {
 lean::cnstr_release(x_8, 0);
 x_26 = x_8;
}
if (lean::is_scalar(x_26)) {
 x_27 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_27 = x_26;
}
lean::cnstr_set(x_27, 0, x_23);
lean::cnstr_set_scalar(x_27, sizeof(void*)*1, x_25);
x_28 = x_27;
x_29 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_29);
x_31 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_29, x_28);
if (lean::is_scalar(x_12)) {
 x_32 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_32 = x_12;
}
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_10);
return x_32;
}
}
}
obj* l_lean_parser_combinators_longest__match___at___private_4028176591__leading___spec__7(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_9; obj* x_11; 
x_6 = l_lean_parser_monad__parsec_longest__match___at___private_4028176591__leading___spec__8(x_0, x_1, x_2, x_3, x_4, x_5);
x_7 = lean::cnstr_get(x_6, 0);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
if (lean::is_shared(x_6)) {
 lean::dec(x_6);
 x_11 = lean::box(0);
} else {
 lean::cnstr_release(x_6, 0);
 lean::cnstr_release(x_6, 1);
 x_11 = x_6;
}
if (lean::obj_tag(x_7) == 0)
{
obj* x_12; obj* x_14; obj* x_16; obj* x_18; obj* x_19; 
x_12 = lean::cnstr_get(x_7, 0);
lean::inc(x_12);
x_14 = lean::cnstr_get(x_7, 1);
lean::inc(x_14);
x_16 = lean::cnstr_get(x_7, 2);
lean::inc(x_16);
if (lean::is_shared(x_7)) {
 lean::dec(x_7);
 x_18 = lean::box(0);
} else {
 lean::cnstr_release(x_7, 0);
 lean::cnstr_release(x_7, 1);
 lean::cnstr_release(x_7, 2);
 x_18 = x_7;
}
if (lean::obj_tag(x_12) == 0)
{
obj* x_21; 
x_21 = lean::box(0);
x_19 = x_21;
goto lbl_20;
}
else
{
obj* x_22; obj* x_24; 
x_22 = lean::cnstr_get(x_12, 0);
lean::inc(x_22);
x_24 = lean::cnstr_get(x_12, 1);
lean::inc(x_24);
if (lean::obj_tag(x_24) == 0)
{
obj* x_30; obj* x_32; obj* x_33; obj* x_34; 
lean::dec(x_11);
lean::dec(x_12);
lean::dec(x_18);
lean::dec(x_24);
x_30 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_30);
x_32 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_32, 0, x_22);
lean::cnstr_set(x_32, 1, x_14);
lean::cnstr_set(x_32, 2, x_30);
x_33 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_32);
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_9);
return x_34;
}
else
{
obj* x_37; 
lean::dec(x_22);
lean::dec(x_24);
x_37 = lean::box(0);
x_19 = x_37;
goto lbl_20;
}
}
lbl_20:
{
obj* x_39; obj* x_41; obj* x_42; obj* x_44; obj* x_45; obj* x_46; 
lean::dec(x_19);
x_39 = l_lean_parser_choice;
lean::inc(x_39);
x_41 = l_lean_parser_syntax_mk__node(x_39, x_12);
x_42 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_42);
if (lean::is_scalar(x_18)) {
 x_44 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_44 = x_18;
}
lean::cnstr_set(x_44, 0, x_41);
lean::cnstr_set(x_44, 1, x_14);
lean::cnstr_set(x_44, 2, x_42);
x_45 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_44);
if (lean::is_scalar(x_11)) {
 x_46 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_46 = x_11;
}
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_9);
return x_46;
}
}
else
{
obj* x_47; unsigned char x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; 
x_47 = lean::cnstr_get(x_7, 0);
lean::inc(x_47);
x_49 = lean::cnstr_get_scalar<unsigned char>(x_7, sizeof(void*)*1);
if (lean::is_shared(x_7)) {
 lean::dec(x_7);
 x_50 = lean::box(0);
} else {
 lean::cnstr_release(x_7, 0);
 x_50 = x_7;
}
if (lean::is_scalar(x_50)) {
 x_51 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_51 = x_50;
}
lean::cnstr_set(x_51, 0, x_47);
lean::cnstr_set_scalar(x_51, sizeof(void*)*1, x_49);
x_52 = x_51;
if (lean::is_scalar(x_11)) {
 x_53 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_53 = x_11;
}
lean::cnstr_set(x_53, 0, x_52);
lean::cnstr_set(x_53, 1, x_9);
return x_53;
}
}
}
obj* l_lean_parser_term__parser_run(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_6; obj* x_8; obj* x_9; obj* x_12; obj* x_13; obj* x_15; obj* x_17; obj* x_18; obj* x_20; obj* x_21; 
lean::inc(x_1);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l___private_4028176591__leading), 6, 1);
lean::closure_set(x_6, 0, x_1);
lean::inc(x_1);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l___private_1752552305__trailing), 7, 1);
lean::closure_set(x_8, 0, x_1);
x_9 = lean::cnstr_get(x_1, 0);
lean::inc(x_9);
lean::dec(x_1);
x_12 = l_lean_parser_pratt__parser___at_lean_parser_term__parser_run___spec__1(x_6, x_8, x_0, x_9, x_2, x_3, x_4);
x_13 = lean::cnstr_get(x_12, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_12, 1);
lean::inc(x_15);
if (lean::is_shared(x_12)) {
 lean::dec(x_12);
 x_17 = lean::box(0);
} else {
 lean::cnstr_release(x_12, 0);
 lean::cnstr_release(x_12, 1);
 x_17 = x_12;
}
x_18 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_18);
x_20 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_18, x_13);
if (lean::is_scalar(x_17)) {
 x_21 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_21 = x_17;
}
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_15);
return x_21;
}
}
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
obj* x_12; obj* x_13; unsigned char x_14; obj* x_15; obj* x_16; obj* x_17; 
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
x_12 = l_option_get__or__else___main___rarg(x_2, x_7);
x_13 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_0);
lean::cnstr_set(x_13, 2, x_1);
lean::cnstr_set(x_13, 3, x_3);
x_14 = 0;
x_15 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set_scalar(x_15, sizeof(void*)*1, x_14);
x_16 = x_15;
x_17 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_8);
return x_17;
}
}
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3___rarg), 9, 0);
return x_2;
}
}
obj* l_lean_parser_curr__lbp___at_lean_parser_term__parser_run___spec__4(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_6; obj* x_7; obj* x_9; obj* x_11; 
lean::inc(x_1);
x_6 = l_lean_parser_monad__parsec_observing___at_lean_parser_peek__token___spec__2(x_1, x_3, x_4);
x_7 = lean::cnstr_get(x_6, 0);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
if (lean::is_shared(x_6)) {
 lean::dec(x_6);
 x_11 = lean::box(0);
} else {
 lean::cnstr_release(x_6, 0);
 lean::cnstr_release(x_6, 1);
 x_11 = x_6;
}
if (lean::obj_tag(x_7) == 0)
{
obj* x_12; obj* x_14; obj* x_16; obj* x_18; 
x_12 = lean::cnstr_get(x_7, 0);
lean::inc(x_12);
x_14 = lean::cnstr_get(x_7, 1);
lean::inc(x_14);
x_16 = lean::cnstr_get(x_7, 2);
lean::inc(x_16);
if (lean::is_shared(x_7)) {
 lean::dec(x_7);
 x_18 = lean::box(0);
} else {
 lean::cnstr_release(x_7, 0);
 lean::cnstr_release(x_7, 1);
 lean::cnstr_release(x_7, 2);
 x_18 = x_7;
}
if (lean::obj_tag(x_12) == 0)
{
obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_28; 
lean::dec(x_12);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
x_23 = lean::mk_nat_obj(0u);
x_24 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_24);
if (lean::is_scalar(x_18)) {
 x_26 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_26 = x_18;
}
lean::cnstr_set(x_26, 0, x_23);
lean::cnstr_set(x_26, 1, x_14);
lean::cnstr_set(x_26, 2, x_24);
x_27 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_26);
if (lean::is_scalar(x_11)) {
 x_28 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_28 = x_11;
}
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_9);
return x_28;
}
else
{
obj* x_29; 
x_29 = lean::cnstr_get(x_12, 0);
lean::inc(x_29);
lean::dec(x_12);
switch (lean::obj_tag(x_29)) {
case 0:
{
obj* x_32; obj* x_35; obj* x_38; obj* x_40; obj* x_41; 
x_32 = lean::cnstr_get(x_29, 0);
lean::inc(x_32);
lean::dec(x_29);
x_35 = lean::cnstr_get(x_32, 1);
lean::inc(x_35);
lean::dec(x_32);
x_38 = lean::cnstr_get(x_1, 1);
lean::inc(x_38);
x_40 = lean::string_mk_iterator(x_35);
x_41 = l_lean_parser_trie_match__prefix___rarg(x_38, x_40);
if (lean::obj_tag(x_41) == 0)
{
obj* x_44; obj* x_45; obj* x_46; obj* x_50; obj* x_51; obj* x_53; obj* x_56; obj* x_58; obj* x_60; obj* x_61; obj* x_62; 
lean::dec(x_41);
lean::dec(x_18);
x_44 = lean::box(0);
x_45 = l_lean_parser_curr__lbp___rarg___lambda__1___closed__1;
x_46 = l_mjoin___rarg___closed__1;
lean::inc(x_44);
lean::inc(x_46);
lean::inc(x_45);
x_50 = l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3___rarg(x_45, x_46, x_44, x_44, x_0, x_1, x_2, x_14, x_9);
x_51 = lean::cnstr_get(x_50, 0);
lean::inc(x_51);
x_53 = lean::cnstr_get(x_50, 1);
lean::inc(x_53);
lean::dec(x_50);
x_56 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_56);
x_58 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_56, x_51);
lean::inc(x_56);
x_60 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_56, x_58);
x_61 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_60);
if (lean::is_scalar(x_11)) {
 x_62 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_62 = x_11;
}
lean::cnstr_set(x_62, 0, x_61);
lean::cnstr_set(x_62, 1, x_53);
return x_62;
}
else
{
obj* x_66; obj* x_69; obj* x_72; obj* x_75; obj* x_77; obj* x_78; obj* x_79; 
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
x_66 = lean::cnstr_get(x_41, 0);
lean::inc(x_66);
lean::dec(x_41);
x_69 = lean::cnstr_get(x_66, 1);
lean::inc(x_69);
lean::dec(x_66);
x_72 = lean::cnstr_get(x_69, 1);
lean::inc(x_72);
lean::dec(x_69);
x_75 = l_lean_parser_match__token___closed__2;
lean::inc(x_75);
if (lean::is_scalar(x_18)) {
 x_77 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_77 = x_18;
}
lean::cnstr_set(x_77, 0, x_72);
lean::cnstr_set(x_77, 1, x_14);
lean::cnstr_set(x_77, 2, x_75);
x_78 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_77);
if (lean::is_scalar(x_11)) {
 x_79 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_79 = x_11;
}
lean::cnstr_set(x_79, 0, x_78);
lean::cnstr_set(x_79, 1, x_9);
return x_79;
}
}
case 1:
{
obj* x_84; obj* x_85; obj* x_88; obj* x_89; obj* x_90; 
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_29);
x_84 = l_lean_parser_max__prec;
x_85 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_85);
lean::inc(x_84);
if (lean::is_scalar(x_18)) {
 x_88 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_88 = x_18;
}
lean::cnstr_set(x_88, 0, x_84);
lean::cnstr_set(x_88, 1, x_14);
lean::cnstr_set(x_88, 2, x_85);
x_89 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_88);
if (lean::is_scalar(x_11)) {
 x_90 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_90 = x_11;
}
lean::cnstr_set(x_90, 0, x_89);
lean::cnstr_set(x_90, 1, x_9);
return x_90;
}
case 2:
{
obj* x_91; obj* x_94; obj* x_97; obj* x_100; 
x_91 = lean::cnstr_get(x_29, 0);
lean::inc(x_91);
lean::dec(x_29);
x_94 = lean::cnstr_get(x_91, 0);
lean::inc(x_94);
lean::dec(x_91);
x_97 = l_lean_parser_number_has__view_x_27___lambda__1___closed__6;
lean::inc(x_97);
lean::inc(x_94);
x_100 = l_lean_name_has__dec__eq___main(x_94, x_97);
if (lean::obj_tag(x_100) == 0)
{
obj* x_102; obj* x_104; 
lean::dec(x_100);
x_102 = l_lean_parser_curr__lbp___rarg___lambda__3___closed__1;
lean::inc(x_102);
x_104 = l_lean_name_has__dec__eq___main(x_94, x_102);
if (lean::obj_tag(x_104) == 0)
{
obj* x_107; obj* x_108; obj* x_109; obj* x_113; obj* x_114; obj* x_116; obj* x_119; obj* x_120; 
lean::dec(x_104);
lean::dec(x_18);
x_107 = lean::box(0);
x_108 = l_lean_parser_curr__lbp___rarg___lambda__3___closed__2;
x_109 = l_mjoin___rarg___closed__1;
lean::inc(x_107);
lean::inc(x_109);
lean::inc(x_108);
x_113 = l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3___rarg(x_108, x_109, x_107, x_107, x_0, x_1, x_2, x_14, x_9);
x_114 = lean::cnstr_get(x_113, 0);
lean::inc(x_114);
x_116 = lean::cnstr_get(x_113, 1);
lean::inc(x_116);
lean::dec(x_113);
x_119 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_114);
if (lean::is_scalar(x_11)) {
 x_120 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_120 = x_11;
}
lean::cnstr_set(x_120, 0, x_119);
lean::cnstr_set(x_120, 1, x_116);
return x_120;
}
else
{
obj* x_125; obj* x_126; obj* x_129; obj* x_130; obj* x_131; 
lean::dec(x_104);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
x_125 = l_lean_parser_max__prec;
x_126 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_126);
lean::inc(x_125);
if (lean::is_scalar(x_18)) {
 x_129 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_129 = x_18;
}
lean::cnstr_set(x_129, 0, x_125);
lean::cnstr_set(x_129, 1, x_14);
lean::cnstr_set(x_129, 2, x_126);
x_130 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_129);
if (lean::is_scalar(x_11)) {
 x_131 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_131 = x_11;
}
lean::cnstr_set(x_131, 0, x_130);
lean::cnstr_set(x_131, 1, x_9);
return x_131;
}
}
else
{
obj* x_137; obj* x_138; obj* x_141; obj* x_142; obj* x_143; 
lean::dec(x_100);
lean::dec(x_94);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
x_137 = l_lean_parser_max__prec;
x_138 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_138);
lean::inc(x_137);
if (lean::is_scalar(x_18)) {
 x_141 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_141 = x_18;
}
lean::cnstr_set(x_141, 0, x_137);
lean::cnstr_set(x_141, 1, x_14);
lean::cnstr_set(x_141, 2, x_138);
x_142 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_141);
if (lean::is_scalar(x_11)) {
 x_143 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_143 = x_11;
}
lean::cnstr_set(x_143, 0, x_142);
lean::cnstr_set(x_143, 1, x_9);
return x_143;
}
}
default:
{
obj* x_146; obj* x_147; obj* x_148; obj* x_152; obj* x_153; obj* x_155; obj* x_158; obj* x_159; 
lean::dec(x_18);
lean::dec(x_29);
x_146 = lean::box(0);
x_147 = l_lean_parser_curr__lbp___rarg___lambda__3___closed__2;
x_148 = l_mjoin___rarg___closed__1;
lean::inc(x_146);
lean::inc(x_148);
lean::inc(x_147);
x_152 = l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3___rarg(x_147, x_148, x_146, x_146, x_0, x_1, x_2, x_14, x_9);
x_153 = lean::cnstr_get(x_152, 0);
lean::inc(x_153);
x_155 = lean::cnstr_get(x_152, 1);
lean::inc(x_155);
lean::dec(x_152);
x_158 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_153);
if (lean::is_scalar(x_11)) {
 x_159 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_159 = x_11;
}
lean::cnstr_set(x_159, 0, x_158);
lean::cnstr_set(x_159, 1, x_155);
return x_159;
}
}
}
}
else
{
obj* x_163; unsigned char x_165; obj* x_166; obj* x_167; obj* x_168; obj* x_169; 
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
x_163 = lean::cnstr_get(x_7, 0);
lean::inc(x_163);
x_165 = lean::cnstr_get_scalar<unsigned char>(x_7, sizeof(void*)*1);
if (lean::is_shared(x_7)) {
 lean::dec(x_7);
 x_166 = lean::box(0);
} else {
 lean::cnstr_release(x_7, 0);
 x_166 = x_7;
}
if (lean::is_scalar(x_166)) {
 x_167 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_167 = x_166;
}
lean::cnstr_set(x_167, 0, x_163);
lean::cnstr_set_scalar(x_167, sizeof(void*)*1, x_165);
x_168 = x_167;
if (lean::is_scalar(x_11)) {
 x_169 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_169 = x_11;
}
lean::cnstr_set(x_169, 0, x_168);
lean::cnstr_set(x_169, 1, x_9);
return x_169;
}
}
}
obj* l___private_1055111885__trailing__loop___main___at_lean_parser_term__parser_run___spec__2(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
obj* x_9; obj* x_10; 
x_9 = lean::mk_nat_obj(0u);
x_10 = lean::nat_dec_eq(x_2, x_9);
lean::dec(x_9);
if (lean::obj_tag(x_10) == 0)
{
obj* x_16; obj* x_17; obj* x_19; obj* x_21; 
lean::dec(x_10);
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_4);
x_16 = l_lean_parser_curr__lbp___at_lean_parser_term__parser_run___spec__4(x_4, x_5, x_6, x_7, x_8);
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_16, 1);
lean::inc(x_19);
if (lean::is_shared(x_16)) {
 lean::dec(x_16);
 x_21 = lean::box(0);
} else {
 lean::cnstr_release(x_16, 0);
 lean::cnstr_release(x_16, 1);
 x_21 = x_16;
}
if (lean::obj_tag(x_17) == 0)
{
obj* x_22; obj* x_24; obj* x_26; obj* x_28; obj* x_29; 
x_22 = lean::cnstr_get(x_17, 0);
lean::inc(x_22);
x_24 = lean::cnstr_get(x_17, 1);
lean::inc(x_24);
x_26 = lean::cnstr_get(x_17, 2);
lean::inc(x_26);
if (lean::is_shared(x_17)) {
 lean::dec(x_17);
 x_28 = lean::box(0);
} else {
 lean::cnstr_release(x_17, 0);
 lean::cnstr_release(x_17, 1);
 lean::cnstr_release(x_17, 2);
 x_28 = x_17;
}
x_29 = lean::nat_dec_lt(x_1, x_22);
lean::dec(x_22);
if (lean::obj_tag(x_29) == 0)
{
obj* x_38; obj* x_40; obj* x_41; obj* x_42; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_29);
x_38 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_38);
if (lean::is_scalar(x_28)) {
 x_40 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_40 = x_28;
}
lean::cnstr_set(x_40, 0, x_3);
lean::cnstr_set(x_40, 1, x_24);
lean::cnstr_set(x_40, 2, x_38);
x_41 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_26, x_40);
if (lean::is_scalar(x_21)) {
 x_42 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_42 = x_21;
}
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_19);
return x_42;
}
else
{
obj* x_45; obj* x_46; obj* x_53; obj* x_54; obj* x_56; 
lean::dec(x_28);
lean::dec(x_29);
x_45 = lean::mk_nat_obj(1u);
x_46 = lean::nat_sub(x_2, x_45);
lean::dec(x_45);
lean::dec(x_2);
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_0);
x_53 = lean::apply_6(x_0, x_3, x_4, x_5, x_6, x_24, x_19);
x_54 = lean::cnstr_get(x_53, 0);
lean::inc(x_54);
x_56 = lean::cnstr_get(x_53, 1);
lean::inc(x_56);
lean::dec(x_53);
if (lean::obj_tag(x_54) == 0)
{
obj* x_59; obj* x_61; obj* x_63; obj* x_66; obj* x_67; obj* x_69; obj* x_72; obj* x_73; obj* x_74; 
x_59 = lean::cnstr_get(x_54, 0);
lean::inc(x_59);
x_61 = lean::cnstr_get(x_54, 1);
lean::inc(x_61);
x_63 = lean::cnstr_get(x_54, 2);
lean::inc(x_63);
lean::dec(x_54);
x_66 = l___private_1055111885__trailing__loop___main___at_lean_parser_term__parser_run___spec__2(x_0, x_1, x_46, x_59, x_4, x_5, x_6, x_61, x_56);
x_67 = lean::cnstr_get(x_66, 0);
lean::inc(x_67);
x_69 = lean::cnstr_get(x_66, 1);
lean::inc(x_69);
lean::dec(x_66);
x_72 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_63, x_67);
x_73 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_26, x_72);
if (lean::is_scalar(x_21)) {
 x_74 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_74 = x_21;
}
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_69);
return x_74;
}
else
{
obj* x_81; unsigned char x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; 
lean::dec(x_46);
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_1);
x_81 = lean::cnstr_get(x_54, 0);
lean::inc(x_81);
x_83 = lean::cnstr_get_scalar<unsigned char>(x_54, sizeof(void*)*1);
if (lean::is_shared(x_54)) {
 lean::dec(x_54);
 x_84 = lean::box(0);
} else {
 lean::cnstr_release(x_54, 0);
 x_84 = x_54;
}
if (lean::is_scalar(x_84)) {
 x_85 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_85 = x_84;
}
lean::cnstr_set(x_85, 0, x_81);
lean::cnstr_set_scalar(x_85, sizeof(void*)*1, x_83);
x_86 = x_85;
x_87 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_26, x_86);
if (lean::is_scalar(x_21)) {
 x_88 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_88 = x_21;
}
lean::cnstr_set(x_88, 0, x_87);
lean::cnstr_set(x_88, 1, x_56);
return x_88;
}
}
}
else
{
obj* x_96; unsigned char x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_96 = lean::cnstr_get(x_17, 0);
lean::inc(x_96);
x_98 = lean::cnstr_get_scalar<unsigned char>(x_17, sizeof(void*)*1);
if (lean::is_shared(x_17)) {
 lean::dec(x_17);
 x_99 = lean::box(0);
} else {
 lean::cnstr_release(x_17, 0);
 x_99 = x_17;
}
if (lean::is_scalar(x_99)) {
 x_100 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_100 = x_99;
}
lean::cnstr_set(x_100, 0, x_96);
lean::cnstr_set_scalar(x_100, sizeof(void*)*1, x_98);
x_101 = x_100;
if (lean::is_scalar(x_21)) {
 x_102 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_102 = x_21;
}
lean::cnstr_set(x_102, 0, x_101);
lean::cnstr_set(x_102, 1, x_19);
return x_102;
}
}
else
{
obj* x_108; obj* x_109; obj* x_110; obj* x_114; 
lean::dec(x_10);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_108 = lean::box(0);
x_109 = l___private_1297690757__many1__aux___main___rarg___closed__1;
x_110 = l_mjoin___rarg___closed__1;
lean::inc(x_108);
lean::inc(x_110);
lean::inc(x_109);
x_114 = l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3___rarg(x_109, x_110, x_108, x_108, x_4, x_5, x_6, x_7, x_8);
return x_114;
}
}
}
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__6___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_10; obj* x_11; unsigned char x_12; obj* x_13; obj* x_14; obj* x_15; 
lean::dec(x_5);
lean::dec(x_4);
x_10 = l_option_get__or__else___main___rarg(x_2, x_6);
x_11 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_11, 0, x_10);
lean::cnstr_set(x_11, 1, x_0);
lean::cnstr_set(x_11, 2, x_1);
lean::cnstr_set(x_11, 3, x_3);
x_12 = 0;
x_13 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set_scalar(x_13, sizeof(void*)*1, x_12);
x_14 = x_13;
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_7);
return x_15;
}
}
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__6(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__6___rarg), 8, 0);
return x_2;
}
}
obj* l___private_3693562977__run__aux___at_lean_parser_term__parser_run___spec__8(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; 
x_8 = l___private_3693562977__run__aux___main___rarg(x_0, x_1, x_2, x_3);
x_9 = lean::apply_4(x_8, x_4, x_5, x_6, x_7);
return x_9;
}
}
obj* l_lean_parser_rec__t_run___at_lean_parser_term__parser_run___spec__7(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; 
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l___private_3693562977__run__aux___at_lean_parser_term__parser_run___spec__8), 8, 3);
lean::closure_set(x_8, 0, x_1);
lean::closure_set(x_8, 1, x_2);
lean::closure_set(x_8, 2, x_3);
x_9 = lean::apply_5(x_0, x_8, x_4, x_5, x_6, x_7);
return x_9;
}
}
obj* l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_13; obj* x_14; obj* x_16; obj* x_18; obj* x_19; obj* x_21; obj* x_22; 
x_6 = lean::string_iterator_remaining(x_4);
x_7 = lean::mk_nat_obj(1u);
x_8 = lean::nat_add(x_6, x_7);
lean::dec(x_7);
lean::dec(x_6);
x_11 = l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___closed__1;
lean::inc(x_11);
x_13 = l_lean_parser_rec__t_run___at_lean_parser_term__parser_run___spec__7(x_0, x_11, x_1, x_8, x_2, x_3, x_4, x_5);
x_14 = lean::cnstr_get(x_13, 0);
lean::inc(x_14);
x_16 = lean::cnstr_get(x_13, 1);
lean::inc(x_16);
if (lean::is_shared(x_13)) {
 lean::dec(x_13);
 x_18 = lean::box(0);
} else {
 lean::cnstr_release(x_13, 0);
 lean::cnstr_release(x_13, 1);
 x_18 = x_13;
}
x_19 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
lean::inc(x_19);
x_21 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_14);
if (lean::is_scalar(x_18)) {
 x_22 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_22 = x_18;
}
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_16);
return x_22;
}
}
obj* _init_l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___closed__1() {
_start:
{
obj* x_0; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___lambda__1), 5, 0);
return x_0;
}
}
obj* l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_12; 
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = l_lean_parser_rec__t_run__parsec___rarg___lambda__1___closed__1;
x_8 = l_mjoin___rarg___closed__1;
lean::inc(x_6);
lean::inc(x_8);
lean::inc(x_7);
x_12 = l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__6___rarg(x_7, x_8, x_6, x_6, x_1, x_2, x_3, x_4);
return x_12;
}
}
obj* l_lean_parser_pratt__parser___at_lean_parser_term__parser_run___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; obj* x_8; 
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_pratt__parser___at_lean_parser_term__parser_run___spec__1___lambda__1), 8, 2);
lean::closure_set(x_7, 0, x_0);
lean::closure_set(x_7, 1, x_1);
x_8 = l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5(x_2, x_7, x_3, x_4, x_5, x_6);
return x_8;
}
}
obj* l_lean_parser_pratt__parser___at_lean_parser_term__parser_run___spec__1___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_11; obj* x_12; obj* x_14; obj* x_16; 
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
x_11 = lean::apply_5(x_0, x_3, x_4, x_5, x_6, x_7);
x_12 = lean::cnstr_get(x_11, 0);
lean::inc(x_12);
x_14 = lean::cnstr_get(x_11, 1);
lean::inc(x_14);
if (lean::is_shared(x_11)) {
 lean::dec(x_11);
 x_16 = lean::box(0);
} else {
 lean::cnstr_release(x_11, 0);
 lean::cnstr_release(x_11, 1);
 x_16 = x_11;
}
if (lean::obj_tag(x_12) == 0)
{
obj* x_17; obj* x_19; obj* x_21; obj* x_24; obj* x_25; obj* x_26; obj* x_29; obj* x_30; obj* x_32; obj* x_35; obj* x_37; obj* x_38; obj* x_39; 
x_17 = lean::cnstr_get(x_12, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_12, 1);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_12, 2);
lean::inc(x_21);
lean::dec(x_12);
x_24 = lean::string_iterator_remaining(x_19);
x_25 = lean::mk_nat_obj(1u);
x_26 = lean::nat_add(x_24, x_25);
lean::dec(x_25);
lean::dec(x_24);
x_29 = l___private_1055111885__trailing__loop___main___at_lean_parser_term__parser_run___spec__2(x_1, x_2, x_26, x_17, x_3, x_4, x_5, x_19, x_14);
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_29, 1);
lean::inc(x_32);
lean::dec(x_29);
x_35 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_35);
x_37 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_35, x_30);
x_38 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_37);
if (lean::is_scalar(x_16)) {
 x_39 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_39 = x_16;
}
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_32);
return x_39;
}
else
{
obj* x_45; unsigned char x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; 
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
x_45 = lean::cnstr_get(x_12, 0);
lean::inc(x_45);
x_47 = lean::cnstr_get_scalar<unsigned char>(x_12, sizeof(void*)*1);
if (lean::is_shared(x_12)) {
 lean::dec(x_12);
 x_48 = lean::box(0);
} else {
 lean::cnstr_release(x_12, 0);
 x_48 = x_12;
}
if (lean::is_scalar(x_48)) {
 x_49 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_49 = x_48;
}
lean::cnstr_set(x_49, 0, x_45);
lean::cnstr_set_scalar(x_49, sizeof(void*)*1, x_47);
x_50 = x_49;
if (lean::is_scalar(x_16)) {
 x_51 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_51 = x_16;
}
lean::cnstr_set(x_51, 0, x_50);
lean::cnstr_set(x_51, 1, x_14);
return x_51;
}
}
}
void initialize_init_lean_parser_level();
void initialize_init_lean_parser_notation();
void initialize_init_lean_expr();
static bool _G_initialized = false;
void initialize_init_lean_parser_term() {
 if (_G_initialized) return;
 _G_initialized = true;
 initialize_init_lean_parser_level();
 initialize_init_lean_parser_notation();
 initialize_init_lean_expr();
 l_lean_parser_ident__univ__spec = _init_l_lean_parser_ident__univ__spec();
 l_lean_parser_ident__univ__spec_has__view_x_27 = _init_l_lean_parser_ident__univ__spec_has__view_x_27();
 l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_ident__univ__spec_has__view = _init_l_lean_parser_ident__univ__spec_has__view();
 l_lean_parser_ident__univ__spec_parser___closed__1 = _init_l_lean_parser_ident__univ__spec_parser___closed__1();
 l_lean_parser_ident__univ__spec_parser_lean_parser_has__view = _init_l_lean_parser_ident__univ__spec_parser_lean_parser_has__view();
 l_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens = _init_l_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens();
 l_lean_parser_ident__univs = _init_l_lean_parser_ident__univs();
 l_lean_parser_ident__univs_has__view_x_27 = _init_l_lean_parser_ident__univs_has__view_x_27();
 l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__3();
 l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4();
 l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__5 = _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__5();
 l_lean_parser_ident__univs_has__view = _init_l_lean_parser_ident__univs_has__view();
 l_lean_parser_ident__univs_parser___closed__1 = _init_l_lean_parser_ident__univs_parser___closed__1();
 l_lean_parser_ident__univs_parser_lean_parser_has__view = _init_l_lean_parser_ident__univs_parser_lean_parser_has__view();
 l_lean_parser_ident__univs_parser_lean_parser_has__tokens = _init_l_lean_parser_ident__univs_parser_lean_parser_has__tokens();
 l_lean_parser_term_lean_parser_has__tokens = _init_l_lean_parser_term_lean_parser_has__tokens();
 l_lean_parser_term_lean_parser_has__view = _init_l_lean_parser_term_lean_parser_has__view();
 l_lean_parser_term_tuple = _init_l_lean_parser_term_tuple();
 l_lean_parser_term_tuple_has__view_x_27 = _init_l_lean_parser_term_tuple_has__view_x_27();
 l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__3();
 l_lean_parser_term_tuple_has__view = _init_l_lean_parser_term_tuple_has__view();
 l_lean_parser_term_typed = _init_l_lean_parser_term_typed();
 l_lean_parser_term_typed_has__view_x_27 = _init_l_lean_parser_term_typed_has__view_x_27();
 l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_typed_has__view = _init_l_lean_parser_term_typed_has__view();
 l_lean_parser_term_paren__special = _init_l_lean_parser_term_paren__special();
 l_lean_parser_term_paren__special_has__view_x_27 = _init_l_lean_parser_term_paren__special_has__view_x_27();
 l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_paren__special_has__view = _init_l_lean_parser_term_paren__special_has__view();
 l_lean_parser_term_paren__content = _init_l_lean_parser_term_paren__content();
 l_lean_parser_term_paren__content_has__view_x_27 = _init_l_lean_parser_term_paren__content_has__view_x_27();
 l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_paren__content_has__view = _init_l_lean_parser_term_paren__content_has__view();
 l_lean_parser_term_paren = _init_l_lean_parser_term_paren();
 l_lean_parser_term_paren_has__view_x_27 = _init_l_lean_parser_term_paren_has__view_x_27();
 l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_paren_has__view = _init_l_lean_parser_term_paren_has__view();
 l_lean_parser_term_paren_parser___closed__1 = _init_l_lean_parser_term_paren_parser___closed__1();
 l_lean_parser_term_paren_parser_lean_parser_has__view = _init_l_lean_parser_term_paren_parser_lean_parser_has__view();
 l_lean_parser_term_paren_parser_lean_parser_has__tokens = _init_l_lean_parser_term_paren_parser_lean_parser_has__tokens();
 l_lean_parser_term_hole = _init_l_lean_parser_term_hole();
 l_lean_parser_term_hole_has__view_x_27 = _init_l_lean_parser_term_hole_has__view_x_27();
 l_lean_parser_term_hole_has__view = _init_l_lean_parser_term_hole_has__view();
 l_lean_parser_term_hole_parser___closed__1 = _init_l_lean_parser_term_hole_parser___closed__1();
 l_lean_parser_term_hole_parser_lean_parser_has__view = _init_l_lean_parser_term_hole_parser_lean_parser_has__view();
 l_lean_parser_term_hole_parser_lean_parser_has__tokens = _init_l_lean_parser_term_hole_parser_lean_parser_has__tokens();
 l_lean_parser_term_sort = _init_l_lean_parser_term_sort();
 l_lean_parser_term_sort_has__view_x_27 = _init_l_lean_parser_term_sort_has__view_x_27();
 l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3();
 l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__4();
 l_lean_parser_term_sort_has__view = _init_l_lean_parser_term_sort_has__view();
 l_lean_parser_term_sort_parser___closed__1 = _init_l_lean_parser_term_sort_parser___closed__1();
 l_lean_parser_term_sort_parser_lean_parser_has__view = _init_l_lean_parser_term_sort_parser_lean_parser_has__view();
 l_lean_parser_term_sort_parser_lean_parser_has__tokens = _init_l_lean_parser_term_sort_parser_lean_parser_has__tokens();
 l_lean_parser_term_type__spec = _init_l_lean_parser_term_type__spec();
 l_lean_parser_term_type__spec_has__view_x_27 = _init_l_lean_parser_term_type__spec_has__view_x_27();
 l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_type__spec_has__view = _init_l_lean_parser_term_type__spec_has__view();
 l_lean_parser_term_type__spec_parser___closed__1 = _init_l_lean_parser_term_type__spec_parser___closed__1();
 l_lean_parser_term_type__spec_parser_lean_parser_has__view = _init_l_lean_parser_term_type__spec_parser_lean_parser_has__view();
 l_lean_parser_term_type__spec_parser_lean_parser_has__tokens = _init_l_lean_parser_term_type__spec_parser_lean_parser_has__tokens();
 l_lean_parser_term_opt__type_parser___closed__1 = _init_l_lean_parser_term_opt__type_parser___closed__1();
 l_lean_parser_term_opt__type_parser_lean_parser_has__view = _init_l_lean_parser_term_opt__type_parser_lean_parser_has__view();
 l_lean_parser_term_opt__type_parser_lean_parser_has__tokens = _init_l_lean_parser_term_opt__type_parser_lean_parser_has__tokens();
 l_lean_parser_term_opt__type_view__default = _init_l_lean_parser_term_opt__type_view__default();
 l_lean_parser_term_binder__ident = _init_l_lean_parser_term_binder__ident();
 l_lean_parser_term_binder__ident_has__view_x_27 = _init_l_lean_parser_term_binder__ident_has__view_x_27();
 l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3();
 l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__4();
 l_lean_parser_term_binder__ident_has__view = _init_l_lean_parser_term_binder__ident_has__view();
 l_lean_parser_term_binder__ident_parser___closed__1 = _init_l_lean_parser_term_binder__ident_parser___closed__1();
 l_lean_parser_term_binder__ident_parser_lean_parser_has__view = _init_l_lean_parser_term_binder__ident_parser_lean_parser_has__view();
 l_lean_parser_term_binder__ident_parser_lean_parser_has__tokens = _init_l_lean_parser_term_binder__ident_parser_lean_parser_has__tokens();
 l_lean_parser_term_binder__default__val = _init_l_lean_parser_term_binder__default__val();
 l_lean_parser_term_binder__default__val_has__view_x_27 = _init_l_lean_parser_term_binder__default__val_has__view_x_27();
 l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_binder__default__val_has__view = _init_l_lean_parser_term_binder__default__val_has__view();
 l_lean_parser_term_binder__default__tac = _init_l_lean_parser_term_binder__default__tac();
 l_lean_parser_term_binder__default__tac_has__view_x_27 = _init_l_lean_parser_term_binder__default__tac_has__view_x_27();
 l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_binder__default__tac_has__view = _init_l_lean_parser_term_binder__default__tac_has__view();
 l_lean_parser_term_binder__default = _init_l_lean_parser_term_binder__default();
 l_lean_parser_term_binder__default_has__view_x_27 = _init_l_lean_parser_term_binder__default_has__view_x_27();
 l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_binder__default_has__view = _init_l_lean_parser_term_binder__default_has__view();
 l_lean_parser_term_binder__default_parser___closed__1 = _init_l_lean_parser_term_binder__default_parser___closed__1();
 l_lean_parser_term_binder__default_parser_lean_parser_has__view = _init_l_lean_parser_term_binder__default_parser_lean_parser_has__view();
 l_lean_parser_term_binder__default_parser_lean_parser_has__tokens = _init_l_lean_parser_term_binder__default_parser_lean_parser_has__tokens();
 l_lean_parser_term_binder__content = _init_l_lean_parser_term_binder__content();
 l_lean_parser_term_binder__content_has__view_x_27 = _init_l_lean_parser_term_binder__content_has__view_x_27();
 l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3();
 l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4();
 l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__5 = _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__5();
 l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__1 = _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__1();
 l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__2 = _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__2();
 l_lean_parser_term_binder__content_has__view = _init_l_lean_parser_term_binder__content_has__view();
 l_lean_parser_term_binder__content_parser___closed__1 = _init_l_lean_parser_term_binder__content_parser___closed__1();
 l_lean_parser_term_binder__content_parser_lean_parser_has__view = _init_l_lean_parser_term_binder__content_parser_lean_parser_has__view();
 l_lean_parser_term_binder__content_parser_lean_parser_has__tokens = _init_l_lean_parser_term_binder__content_parser_lean_parser_has__tokens();
 l_lean_parser_term_simple__explicit__binder = _init_l_lean_parser_term_simple__explicit__binder();
 l_lean_parser_term_simple__explicit__binder_has__view_x_27 = _init_l_lean_parser_term_simple__explicit__binder_has__view_x_27();
 l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_simple__explicit__binder_has__view = _init_l_lean_parser_term_simple__explicit__binder_has__view();
 l_lean_parser_term_simple__implicit__binder = _init_l_lean_parser_term_simple__implicit__binder();
 l_lean_parser_term_simple__implicit__binder_has__view_x_27 = _init_l_lean_parser_term_simple__implicit__binder_has__view_x_27();
 l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_simple__implicit__binder_has__view = _init_l_lean_parser_term_simple__implicit__binder_has__view();
 l_lean_parser_term_simple__strict__implicit__binder = _init_l_lean_parser_term_simple__strict__implicit__binder();
 l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27 = _init_l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27();
 l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_simple__strict__implicit__binder_has__view = _init_l_lean_parser_term_simple__strict__implicit__binder_has__view();
 l_lean_parser_term_simple__inst__implicit__binder = _init_l_lean_parser_term_simple__inst__implicit__binder();
 l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27 = _init_l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27();
 l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_simple__inst__implicit__binder_has__view = _init_l_lean_parser_term_simple__inst__implicit__binder_has__view();
 l_lean_parser_term_simple__binder = _init_l_lean_parser_term_simple__binder();
 l_lean_parser_term_simple__binder_has__view_x_27 = _init_l_lean_parser_term_simple__binder_has__view_x_27();
 l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_simple__binder_has__view = _init_l_lean_parser_term_simple__binder_has__view();
 l_lean_parser_term_simple__binder_parser___closed__1 = _init_l_lean_parser_term_simple__binder_parser___closed__1();
 l_lean_parser_term_simple__binder_parser_lean_parser_has__view = _init_l_lean_parser_term_simple__binder_parser_lean_parser_has__view();
 l_lean_parser_term_simple__binder_parser_lean_parser_has__tokens = _init_l_lean_parser_term_simple__binder_parser_lean_parser_has__tokens();
 l_lean_parser_term_anonymous__constructor = _init_l_lean_parser_term_anonymous__constructor();
 l_lean_parser_term_anonymous__constructor_has__view_x_27 = _init_l_lean_parser_term_anonymous__constructor_has__view_x_27();
 l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_anonymous__constructor_has__view = _init_l_lean_parser_term_anonymous__constructor_has__view();
 l_lean_parser_term_anonymous__constructor_parser___closed__1 = _init_l_lean_parser_term_anonymous__constructor_parser___closed__1();
 l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__view = _init_l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__view();
 l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__tokens = _init_l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__tokens();
 l_lean_parser_term_explicit__binder__content = _init_l_lean_parser_term_explicit__binder__content();
 l_lean_parser_term_explicit__binder__content_has__view_x_27 = _init_l_lean_parser_term_explicit__binder__content_has__view_x_27();
 l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_explicit__binder__content_has__view = _init_l_lean_parser_term_explicit__binder__content_has__view();
 l_lean_parser_term_explicit__binder = _init_l_lean_parser_term_explicit__binder();
 l_lean_parser_term_explicit__binder_has__view_x_27 = _init_l_lean_parser_term_explicit__binder_has__view_x_27();
 l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_explicit__binder_has__view = _init_l_lean_parser_term_explicit__binder_has__view();
 l_lean_parser_term_implicit__binder = _init_l_lean_parser_term_implicit__binder();
 l_lean_parser_term_implicit__binder_has__view_x_27 = _init_l_lean_parser_term_implicit__binder_has__view_x_27();
 l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_implicit__binder_has__view = _init_l_lean_parser_term_implicit__binder_has__view();
 l_lean_parser_term_strict__implicit__binder = _init_l_lean_parser_term_strict__implicit__binder();
 l_lean_parser_term_strict__implicit__binder_has__view_x_27 = _init_l_lean_parser_term_strict__implicit__binder_has__view_x_27();
 l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_strict__implicit__binder_has__view = _init_l_lean_parser_term_strict__implicit__binder_has__view();
 l_lean_parser_term_inst__implicit__named__binder = _init_l_lean_parser_term_inst__implicit__named__binder();
 l_lean_parser_term_inst__implicit__named__binder_has__view_x_27 = _init_l_lean_parser_term_inst__implicit__named__binder_has__view_x_27();
 l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_inst__implicit__named__binder_has__view = _init_l_lean_parser_term_inst__implicit__named__binder_has__view();
 l_lean_parser_term_inst__implicit__anonymous__binder = _init_l_lean_parser_term_inst__implicit__anonymous__binder();
 l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27 = _init_l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27();
 l_lean_parser_term_inst__implicit__anonymous__binder_has__view = _init_l_lean_parser_term_inst__implicit__anonymous__binder_has__view();
 l_lean_parser_term_inst__implicit__binder__content = _init_l_lean_parser_term_inst__implicit__binder__content();
 l_lean_parser_term_inst__implicit__binder__content_has__view_x_27 = _init_l_lean_parser_term_inst__implicit__binder__content_has__view_x_27();
 l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_inst__implicit__binder__content_has__view = _init_l_lean_parser_term_inst__implicit__binder__content_has__view();
 l_lean_parser_term_inst__implicit__binder = _init_l_lean_parser_term_inst__implicit__binder();
 l_lean_parser_term_inst__implicit__binder_has__view_x_27 = _init_l_lean_parser_term_inst__implicit__binder_has__view_x_27();
 l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_inst__implicit__binder_has__view = _init_l_lean_parser_term_inst__implicit__binder_has__view();
 l_lean_parser_term_bracketed__binder = _init_l_lean_parser_term_bracketed__binder();
 l_lean_parser_term_bracketed__binder_has__view_x_27 = _init_l_lean_parser_term_bracketed__binder_has__view_x_27();
 l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_bracketed__binder_has__view = _init_l_lean_parser_term_bracketed__binder_has__view();
 l_lean_parser_term_bracketed__binder_parser___closed__1 = _init_l_lean_parser_term_bracketed__binder_parser___closed__1();
 l_lean_parser_term_bracketed__binder_parser_lean_parser_has__view = _init_l_lean_parser_term_bracketed__binder_parser_lean_parser_has__view();
 l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens = _init_l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens();
 l_lean_parser_term_binder = _init_l_lean_parser_term_binder();
 l_lean_parser_term_binder_has__view_x_27 = _init_l_lean_parser_term_binder_has__view_x_27();
 l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_binder_has__view = _init_l_lean_parser_term_binder_has__view();
 l_lean_parser_term_binder_parser___closed__1 = _init_l_lean_parser_term_binder_parser___closed__1();
 l_lean_parser_term_binder_parser_lean_parser_has__view = _init_l_lean_parser_term_binder_parser_lean_parser_has__view();
 l_lean_parser_term_binder_parser_lean_parser_has__tokens = _init_l_lean_parser_term_binder_parser_lean_parser_has__tokens();
 l_lean_parser_term_binders__types = _init_l_lean_parser_term_binders__types();
 l_lean_parser_term_binders__types_has__view_x_27 = _init_l_lean_parser_term_binders__types_has__view_x_27();
 l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_binders__types_has__view = _init_l_lean_parser_term_binders__types_has__view();
 l_lean_parser_term_mixed__binder = _init_l_lean_parser_term_mixed__binder();
 l_lean_parser_term_mixed__binder_has__view_x_27 = _init_l_lean_parser_term_mixed__binder_has__view_x_27();
 l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_mixed__binder_has__view = _init_l_lean_parser_term_mixed__binder_has__view();
 l_lean_parser_term_binders__remainder = _init_l_lean_parser_term_binders__remainder();
 l_lean_parser_term_binders__remainder_has__view_x_27 = _init_l_lean_parser_term_binders__remainder_has__view_x_27();
 l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3();
 l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__4();
 l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2___closed__1 = _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2___closed__1();
 l_lean_parser_term_binders__remainder_has__view = _init_l_lean_parser_term_binders__remainder_has__view();
 l_lean_parser_term_binders__ext = _init_l_lean_parser_term_binders__ext();
 l_lean_parser_term_binders__ext_has__view_x_27 = _init_l_lean_parser_term_binders__ext_has__view_x_27();
 l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__3();
 l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4();
 l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__5 = _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__5();
 l_lean_parser_term_binders__ext_has__view = _init_l_lean_parser_term_binders__ext_has__view();
 l_lean_parser_term_binders__ext_parser___closed__1 = _init_l_lean_parser_term_binders__ext_parser___closed__1();
 l_lean_parser_term_binders__ext_parser_lean_parser_has__view = _init_l_lean_parser_term_binders__ext_parser_lean_parser_has__view();
 l_lean_parser_term_binders__ext_parser_lean_parser_has__tokens = _init_l_lean_parser_term_binders__ext_parser_lean_parser_has__tokens();
 l_lean_parser_term_binders = _init_l_lean_parser_term_binders();
 l_lean_parser_term_binders_has__view_x_27 = _init_l_lean_parser_term_binders_has__view_x_27();
 l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_binders_has__view = _init_l_lean_parser_term_binders_has__view();
 l_lean_parser_term_binders_parser___closed__1 = _init_l_lean_parser_term_binders_parser___closed__1();
 l_lean_parser_term_binders_parser_lean_parser_has__view = _init_l_lean_parser_term_binders_parser_lean_parser_has__view();
 l_lean_parser_term_binders_parser_lean_parser_has__tokens = _init_l_lean_parser_term_binders_parser_lean_parser_has__tokens();
 l_lean_parser_term_bracketed__binders = _init_l_lean_parser_term_bracketed__binders();
 l_lean_parser_term_bracketed__binders_has__view_x_27 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27();
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__3();
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4();
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5();
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__6 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__6();
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__1 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__1();
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__2 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__2();
 l_lean_parser_term_bracketed__binders_has__view = _init_l_lean_parser_term_bracketed__binders_has__view();
 l_lean_parser_term_bracketed__binders_parser___closed__1 = _init_l_lean_parser_term_bracketed__binders_parser___closed__1();
 l_lean_parser_term_bracketed__binders_parser_lean_parser_has__view = _init_l_lean_parser_term_bracketed__binders_parser_lean_parser_has__view();
 l_lean_parser_term_bracketed__binders_parser_lean_parser_has__tokens = _init_l_lean_parser_term_bracketed__binders_parser_lean_parser_has__tokens();
 l_lean_parser_term_lambda = _init_l_lean_parser_term_lambda();
 l_lean_parser_term_lambda_has__view_x_27 = _init_l_lean_parser_term_lambda_has__view_x_27();
 l_lean_parser_term_lambda_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_lambda_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_lambda_has__view = _init_l_lean_parser_term_lambda_has__view();
 l_lean_parser_term_lambda_parser___closed__1 = _init_l_lean_parser_term_lambda_parser___closed__1();
 l_lean_parser_term_lambda_parser_lean_parser_has__view = _init_l_lean_parser_term_lambda_parser_lean_parser_has__view();
 l_lean_parser_term_lambda_parser_lean_parser_has__tokens = _init_l_lean_parser_term_lambda_parser_lean_parser_has__tokens();
 l_lean_parser_term_assume__anonymous = _init_l_lean_parser_term_assume__anonymous();
 l_lean_parser_term_assume__anonymous_has__view_x_27 = _init_l_lean_parser_term_assume__anonymous_has__view_x_27();
 l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_assume__anonymous_has__view = _init_l_lean_parser_term_assume__anonymous_has__view();
 l_lean_parser_term_assume__binders = _init_l_lean_parser_term_assume__binders();
 l_lean_parser_term_assume__binders_has__view_x_27 = _init_l_lean_parser_term_assume__binders_has__view_x_27();
 l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_assume__binders_has__view = _init_l_lean_parser_term_assume__binders_has__view();
 l_lean_parser_term_assume = _init_l_lean_parser_term_assume();
 l_lean_parser_term_assume_has__view_x_27 = _init_l_lean_parser_term_assume_has__view_x_27();
 l_lean_parser_term_assume_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_assume_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_assume_has__view = _init_l_lean_parser_term_assume_has__view();
 l_lean_parser_term_assume_parser___closed__1 = _init_l_lean_parser_term_assume_parser___closed__1();
 l_lean_parser_term_assume_parser_lean_parser_has__view = _init_l_lean_parser_term_assume_parser_lean_parser_has__view();
 l_lean_parser_term_assume_parser_lean_parser_has__tokens = _init_l_lean_parser_term_assume_parser_lean_parser_has__tokens();
 l_lean_parser_term_pi = _init_l_lean_parser_term_pi();
 l_lean_parser_term_pi_has__view_x_27 = _init_l_lean_parser_term_pi_has__view_x_27();
 l_lean_parser_term_pi_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_pi_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_pi_has__view = _init_l_lean_parser_term_pi_has__view();
 l_lean_parser_term_pi_parser___closed__1 = _init_l_lean_parser_term_pi_parser___closed__1();
 l_lean_parser_term_pi_parser_lean_parser_has__view = _init_l_lean_parser_term_pi_parser_lean_parser_has__view();
 l_lean_parser_term_pi_parser_lean_parser_has__tokens = _init_l_lean_parser_term_pi_parser_lean_parser_has__tokens();
 l_lean_parser_term_explicit__modifier = _init_l_lean_parser_term_explicit__modifier();
 l_lean_parser_term_explicit__modifier_has__view_x_27 = _init_l_lean_parser_term_explicit__modifier_has__view_x_27();
 l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3();
 l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__4();
 l_lean_parser_term_explicit__modifier_has__view = _init_l_lean_parser_term_explicit__modifier_has__view();
 l_lean_parser_term_explicit = _init_l_lean_parser_term_explicit();
 l_lean_parser_term_explicit_has__view_x_27 = _init_l_lean_parser_term_explicit_has__view_x_27();
 l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__3();
 l_lean_parser_term_explicit_has__view = _init_l_lean_parser_term_explicit_has__view();
 l_lean_parser_term_explicit_parser___closed__1 = _init_l_lean_parser_term_explicit_parser___closed__1();
 l_lean_parser_term_explicit_parser_lean_parser_has__view = _init_l_lean_parser_term_explicit_parser_lean_parser_has__view();
 l_lean_parser_term_explicit_parser_lean_parser_has__tokens = _init_l_lean_parser_term_explicit_parser_lean_parser_has__tokens();
 l_lean_parser_term_from = _init_l_lean_parser_term_from();
 l_lean_parser_term_from_has__view_x_27 = _init_l_lean_parser_term_from_has__view_x_27();
 l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_from_has__view = _init_l_lean_parser_term_from_has__view();
 l_lean_parser_term_from_parser___closed__1 = _init_l_lean_parser_term_from_parser___closed__1();
 l_lean_parser_term_from_parser_lean_parser_has__view = _init_l_lean_parser_term_from_parser_lean_parser_has__view();
 l_lean_parser_term_from_parser_lean_parser_has__tokens = _init_l_lean_parser_term_from_parser_lean_parser_has__tokens();
 l_lean_parser_term_let__lhs__id = _init_l_lean_parser_term_let__lhs__id();
 l_lean_parser_term_let__lhs__id_has__view_x_27 = _init_l_lean_parser_term_let__lhs__id_has__view_x_27();
 l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_let__lhs__id_has__view = _init_l_lean_parser_term_let__lhs__id_has__view();
 l_lean_parser_term_let__lhs = _init_l_lean_parser_term_let__lhs();
 l_lean_parser_term_let__lhs_has__view_x_27 = _init_l_lean_parser_term_let__lhs_has__view_x_27();
 l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_let__lhs_has__view = _init_l_lean_parser_term_let__lhs_has__view();
 l_lean_parser_term_let = _init_l_lean_parser_term_let();
 l_lean_parser_term_let_has__view_x_27 = _init_l_lean_parser_term_let_has__view_x_27();
 l_lean_parser_term_let_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_let_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_let_has__view = _init_l_lean_parser_term_let_has__view();
 l_lean_parser_term_let_parser___closed__1 = _init_l_lean_parser_term_let_parser___closed__1();
 l_lean_parser_term_let_parser_lean_parser_has__view = _init_l_lean_parser_term_let_parser_lean_parser_has__view();
 l_lean_parser_term_let_parser_lean_parser_has__tokens = _init_l_lean_parser_term_let_parser_lean_parser_has__tokens();
 l_lean_parser_term_opt__ident = _init_l_lean_parser_term_opt__ident();
 l_lean_parser_term_opt__ident_has__view_x_27 = _init_l_lean_parser_term_opt__ident_has__view_x_27();
 l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_opt__ident_has__view = _init_l_lean_parser_term_opt__ident_has__view();
 l_lean_parser_term_opt__ident_parser___closed__1 = _init_l_lean_parser_term_opt__ident_parser___closed__1();
 l_lean_parser_term_opt__ident_parser_lean_parser_has__view = _init_l_lean_parser_term_opt__ident_parser_lean_parser_has__view();
 l_lean_parser_term_opt__ident_parser_lean_parser_has__tokens = _init_l_lean_parser_term_opt__ident_parser_lean_parser_has__tokens();
 l_lean_parser_term_have__term = _init_l_lean_parser_term_have__term();
 l_lean_parser_term_have__term_has__view_x_27 = _init_l_lean_parser_term_have__term_has__view_x_27();
 l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_have__term_has__view = _init_l_lean_parser_term_have__term_has__view();
 l_lean_parser_term_have__from = _init_l_lean_parser_term_have__from();
 l_lean_parser_term_have__from_has__view_x_27 = _init_l_lean_parser_term_have__from_has__view_x_27();
 l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__3();
 l_lean_parser_term_have__from_has__view = _init_l_lean_parser_term_have__from_has__view();
 l_lean_parser_term_have__proof = _init_l_lean_parser_term_have__proof();
 l_lean_parser_term_have__proof_has__view_x_27 = _init_l_lean_parser_term_have__proof_has__view_x_27();
 l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_have__proof_has__view = _init_l_lean_parser_term_have__proof_has__view();
 l_lean_parser_term_have = _init_l_lean_parser_term_have();
 l_lean_parser_term_have_has__view_x_27 = _init_l_lean_parser_term_have_has__view_x_27();
 l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_have_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_have_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_have_has__view = _init_l_lean_parser_term_have_has__view();
 l_lean_parser_term_have_parser___closed__1 = _init_l_lean_parser_term_have_parser___closed__1();
 l_lean_parser_term_have_parser_lean_parser_has__view = _init_l_lean_parser_term_have_parser_lean_parser_has__view();
 l_lean_parser_term_have_parser_lean_parser_has__tokens = _init_l_lean_parser_term_have_parser_lean_parser_has__tokens();
 l_lean_parser_term_show = _init_l_lean_parser_term_show();
 l_lean_parser_term_show_has__view_x_27 = _init_l_lean_parser_term_show_has__view_x_27();
 l_lean_parser_term_show_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_show_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_show_has__view = _init_l_lean_parser_term_show_has__view();
 l_lean_parser_term_show_parser___closed__1 = _init_l_lean_parser_term_show_parser___closed__1();
 l_lean_parser_term_show_parser_lean_parser_has__view = _init_l_lean_parser_term_show_parser_lean_parser_has__view();
 l_lean_parser_term_show_parser_lean_parser_has__tokens = _init_l_lean_parser_term_show_parser_lean_parser_has__tokens();
 l_lean_parser_term_match__equation = _init_l_lean_parser_term_match__equation();
 l_lean_parser_term_match__equation_has__view_x_27 = _init_l_lean_parser_term_match__equation_has__view_x_27();
 l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_match__equation_has__view = _init_l_lean_parser_term_match__equation_has__view();
 l_lean_parser_term_match = _init_l_lean_parser_term_match();
 l_lean_parser_term_match_has__view_x_27 = _init_l_lean_parser_term_match_has__view_x_27();
 l_lean_parser_term_match_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_match_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_match_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_match_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_match_has__view = _init_l_lean_parser_term_match_has__view();
 l_lean_parser_term_match_parser___closed__1 = _init_l_lean_parser_term_match_parser___closed__1();
 l_lean_parser_term_match_parser_lean_parser_has__view = _init_l_lean_parser_term_match_parser_lean_parser_has__view();
 l_lean_parser_term_match_parser_lean_parser_has__tokens = _init_l_lean_parser_term_match_parser_lean_parser_has__tokens();
 l_lean_parser_term_if = _init_l_lean_parser_term_if();
 l_lean_parser_term_if_has__view_x_27 = _init_l_lean_parser_term_if_has__view_x_27();
 l_lean_parser_term_if_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_if_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_if_has__view = _init_l_lean_parser_term_if_has__view();
 l_lean_parser_term_if_parser___closed__1 = _init_l_lean_parser_term_if_parser___closed__1();
 l_lean_parser_term_if_parser_lean_parser_has__view = _init_l_lean_parser_term_if_parser_lean_parser_has__view();
 l_lean_parser_term_if_parser_lean_parser_has__tokens = _init_l_lean_parser_term_if_parser_lean_parser_has__tokens();
 l_lean_parser_term_struct__inst__type = _init_l_lean_parser_term_struct__inst__type();
 l_lean_parser_term_struct__inst__type_has__view_x_27 = _init_l_lean_parser_term_struct__inst__type_has__view_x_27();
 l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_struct__inst__type_has__view = _init_l_lean_parser_term_struct__inst__type_has__view();
 l_lean_parser_term_struct__inst__with = _init_l_lean_parser_term_struct__inst__with();
 l_lean_parser_term_struct__inst__with_has__view_x_27 = _init_l_lean_parser_term_struct__inst__with_has__view_x_27();
 l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_struct__inst__with_has__view = _init_l_lean_parser_term_struct__inst__with_has__view();
 l_lean_parser_term_struct__inst__field = _init_l_lean_parser_term_struct__inst__field();
 l_lean_parser_term_struct__inst__field_has__view_x_27 = _init_l_lean_parser_term_struct__inst__field_has__view_x_27();
 l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_struct__inst__field_has__view = _init_l_lean_parser_term_struct__inst__field_has__view();
 l_lean_parser_term_struct__inst__source = _init_l_lean_parser_term_struct__inst__source();
 l_lean_parser_term_struct__inst__source_has__view_x_27 = _init_l_lean_parser_term_struct__inst__source_has__view_x_27();
 l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_struct__inst__source_has__view = _init_l_lean_parser_term_struct__inst__source_has__view();
 l_lean_parser_term_struct__inst__item = _init_l_lean_parser_term_struct__inst__item();
 l_lean_parser_term_struct__inst__item_has__view_x_27 = _init_l_lean_parser_term_struct__inst__item_has__view_x_27();
 l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_struct__inst__item_has__view = _init_l_lean_parser_term_struct__inst__item_has__view();
 l_lean_parser_term_struct__inst = _init_l_lean_parser_term_struct__inst();
 l_lean_parser_term_struct__inst_has__view_x_27 = _init_l_lean_parser_term_struct__inst_has__view_x_27();
 l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3();
 l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__4();
 l_lean_parser_term_struct__inst_has__view = _init_l_lean_parser_term_struct__inst_has__view();
 l_lean_parser_term_struct__inst_parser___closed__1 = _init_l_lean_parser_term_struct__inst_parser___closed__1();
 l_lean_parser_term_struct__inst_parser_lean_parser_has__view = _init_l_lean_parser_term_struct__inst_parser_lean_parser_has__view();
 l_lean_parser_term_struct__inst_parser_lean_parser_has__tokens = _init_l_lean_parser_term_struct__inst_parser_lean_parser_has__tokens();
 l_lean_parser_term_subtype = _init_l_lean_parser_term_subtype();
 l_lean_parser_term_subtype_has__view_x_27 = _init_l_lean_parser_term_subtype_has__view_x_27();
 l_lean_parser_term_subtype_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_subtype_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_subtype_has__view = _init_l_lean_parser_term_subtype_has__view();
 l_lean_parser_term_subtype_parser___closed__1 = _init_l_lean_parser_term_subtype_parser___closed__1();
 l_lean_parser_term_subtype_parser_lean_parser_has__view = _init_l_lean_parser_term_subtype_parser_lean_parser_has__view();
 l_lean_parser_term_subtype_parser_lean_parser_has__tokens = _init_l_lean_parser_term_subtype_parser_lean_parser_has__tokens();
 l_lean_parser_term_inaccessible = _init_l_lean_parser_term_inaccessible();
 l_lean_parser_term_inaccessible_has__view_x_27 = _init_l_lean_parser_term_inaccessible_has__view_x_27();
 l_lean_parser_term_inaccessible_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_inaccessible_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_inaccessible_has__view = _init_l_lean_parser_term_inaccessible_has__view();
 l_lean_parser_term_inaccessible_parser___closed__1 = _init_l_lean_parser_term_inaccessible_parser___closed__1();
 l_lean_parser_term_inaccessible_parser_lean_parser_has__view = _init_l_lean_parser_term_inaccessible_parser_lean_parser_has__view();
 l_lean_parser_term_inaccessible_parser_lean_parser_has__tokens = _init_l_lean_parser_term_inaccessible_parser_lean_parser_has__tokens();
 l_lean_parser_term_anonymous__inaccessible = _init_l_lean_parser_term_anonymous__inaccessible();
 l_lean_parser_term_anonymous__inaccessible_has__view_x_27 = _init_l_lean_parser_term_anonymous__inaccessible_has__view_x_27();
 l_lean_parser_term_anonymous__inaccessible_has__view = _init_l_lean_parser_term_anonymous__inaccessible_has__view();
 l_lean_parser_term_anonymous__inaccessible_parser___closed__1 = _init_l_lean_parser_term_anonymous__inaccessible_parser___closed__1();
 l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__view = _init_l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__view();
 l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__tokens = _init_l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__tokens();
 l_lean_parser_term_sorry = _init_l_lean_parser_term_sorry();
 l_lean_parser_term_sorry_has__view_x_27 = _init_l_lean_parser_term_sorry_has__view_x_27();
 l_lean_parser_term_sorry_has__view = _init_l_lean_parser_term_sorry_has__view();
 l_lean_parser_term_sorry_parser___closed__1 = _init_l_lean_parser_term_sorry_parser___closed__1();
 l_lean_parser_term_sorry_parser_lean_parser_has__view = _init_l_lean_parser_term_sorry_parser_lean_parser_has__view();
 l_lean_parser_term_sorry_parser_lean_parser_has__tokens = _init_l_lean_parser_term_sorry_parser_lean_parser_has__tokens();
 l_lean_parser_term_builtin__leading__parsers = _init_l_lean_parser_term_builtin__leading__parsers();
 l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers___spec__1___rarg___closed__1 = _init_l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers___spec__1___rarg___closed__1();
 l_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens = _init_l_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens();
 l_lean_parser_term_sort__app = _init_l_lean_parser_term_sort__app();
 l_lean_parser_term_sort__app_has__view_x_27 = _init_l_lean_parser_term_sort__app_has__view_x_27();
 l_lean_parser_term_sort__app_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_sort__app_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_sort__app_has__view = _init_l_lean_parser_term_sort__app_has__view();
 l_lean_parser_term_sort__app_parser___closed__1 = _init_l_lean_parser_term_sort__app_parser___closed__1();
 l_lean_parser_term_sort__app_parser_lean_parser_has__view = _init_l_lean_parser_term_sort__app_parser_lean_parser_has__view();
 l_lean_parser_term_sort__app_parser_lean_parser_has__tokens = _init_l_lean_parser_term_sort__app_parser_lean_parser_has__tokens();
 l_lean_parser_term_app = _init_l_lean_parser_term_app();
 l_lean_parser_term_app_has__view_x_27 = _init_l_lean_parser_term_app_has__view_x_27();
 l_lean_parser_term_app_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_app_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_app_has__view = _init_l_lean_parser_term_app_has__view();
 l_lean_parser_term_app_parser___closed__1 = _init_l_lean_parser_term_app_parser___closed__1();
 l_lean_parser_term_app_parser_lean_parser_has__view = _init_l_lean_parser_term_app_parser_lean_parser_has__view();
 l_lean_parser_term_app_parser_lean_parser_has__tokens = _init_l_lean_parser_term_app_parser_lean_parser_has__tokens();
 l_lean_parser_term_arrow = _init_l_lean_parser_term_arrow();
 l_lean_parser_term_arrow_has__view_x_27 = _init_l_lean_parser_term_arrow_has__view_x_27();
 l_lean_parser_term_arrow_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_arrow_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_arrow_has__view = _init_l_lean_parser_term_arrow_has__view();
 l_lean_parser_term_arrow_parser___closed__1 = _init_l_lean_parser_term_arrow_parser___closed__1();
 l_lean_parser_term_arrow_parser_lean_parser_has__view = _init_l_lean_parser_term_arrow_parser_lean_parser_has__view();
 l_lean_parser_term_arrow_parser_lean_parser_has__tokens = _init_l_lean_parser_term_arrow_parser_lean_parser_has__tokens();
 l_lean_parser_term_projection__spec = _init_l_lean_parser_term_projection__spec();
 l_lean_parser_term_projection__spec_has__view_x_27 = _init_l_lean_parser_term_projection__spec_has__view_x_27();
 l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3();
 l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__4();
 l_lean_parser_term_projection__spec_has__view = _init_l_lean_parser_term_projection__spec_has__view();
 l_lean_parser_term_projection = _init_l_lean_parser_term_projection();
 l_lean_parser_term_projection_has__view_x_27 = _init_l_lean_parser_term_projection_has__view_x_27();
 l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1();
 l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__2();
 l_lean_parser_term_projection_has__view = _init_l_lean_parser_term_projection_has__view();
 l_lean_parser_term_projection_parser___closed__1 = _init_l_lean_parser_term_projection_parser___closed__1();
 l_lean_parser_term_projection_parser_lean_parser_has__view = _init_l_lean_parser_term_projection_parser_lean_parser_has__view();
 l_lean_parser_term_projection_tokens = _init_l_lean_parser_term_projection_tokens();
 l_lean_parser_term_builtin__trailing__parsers = _init_l_lean_parser_term_builtin__trailing__parsers();
 l_lean_parser_term_builtin__trailing__parsers_lean_parser_has__tokens = _init_l_lean_parser_term_builtin__trailing__parsers_lean_parser_has__tokens();
 l___private_1752552305__trailing___closed__1 = _init_l___private_1752552305__trailing___closed__1();
 l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___closed__1 = _init_l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___closed__1();
}
