// Lean compiler output
// Module: init.lean.parser.term
// Imports: init.lean.parser.level init.lean.parser.notation init.lean.expr
#include "runtime/object.h"
#include "runtime/apply.h"
typedef lean::object obj;    typedef lean::usize  usize;
typedef lean::uint8  uint8;  typedef lean::uint16 uint16;
typedef lean::uint32 uint32; typedef lean::uint64 uint64;
#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-label"
#elif defined(__GNUC__) && !defined(__CLANG__)
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#endif
obj* l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__1(obj*);
obj* l_lean_parser_term_struct__inst_has__view_x_27;
obj* l_lean_parser_term_arrow_parser___closed__1;
obj* l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___lambda__1(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_match__equation_has__view;
obj* l_lean_parser_term_assume_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_from_has__view_x_27;
obj* l_lean_parser_term_assume__anonymous_has__view_x_27;
obj* l_lean_parser_term_implicit__binder_has__view_x_27;
obj* l_lean_parser_term_pi_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_let_parser___closed__1;
obj* l_lean_parser_term_subtype;
obj* l_lean_parser_term_binder__default;
obj* l_lean_parser_ident__univ__spec_has__view_x_27;
obj* l_lean_parser_term_binders_parser_lean_parser_has__tokens;
extern obj* l_lean_parser_match__token___closed__2;
obj* l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_type__spec_has__view_x_27;
obj* l_lean_parser_parsec__t_bind__mk__res___rarg(obj*, obj*);
obj* l_lean_parser_term_have__proof;
obj* l_lean_parser_term_inst__implicit__named__binder_has__view_x_27;
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__2___rarg(obj*, obj*);
obj* l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_curr__lbp___at_lean_parser_term__parser_run___spec__4(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_combinators_any__of___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_arrow_has__view;
obj* l_lean_parser_term_app_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binder__content;
obj* l_lean_parser_term_let__lhs;
obj* l_list_map___main___rarg(obj*, obj*);
obj* l_lean_parser_term_opt__ident_parser___closed__1;
obj* l_lean_parser_trie_match__prefix___rarg(obj*, obj*);
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_binders__ext_parser_lean_parser_has__view;
obj* l___private_init_lean_parser_term_1__trailing___closed__1;
obj* l_lean_parser_term_bracketed__binder_parser___closed__1;
obj* l_lean_parser_term_pi_parser_lean_parser_has__view;
obj* l_lean_parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1(obj*);
obj* l_lean_parser_term_explicit_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_have__proof_has__view_x_27;
obj* l_lean_parser_term_show;
obj* l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27;
obj* l_lean_parser_term_match;
obj* l_lean_parser_term_let_parser_lean_parser_has__tokens;
extern obj* l_lean_parser_command_notation__like_has__view;
obj* l_lean_parser_term_assume__binders_has__view_x_27___lambda__2(obj*);
extern obj* l_lean_parser_number_has__view_x_27___lambda__2___closed__1;
obj* l_lean_parser_term_show_parser___closed__1;
obj* l_lean_parser_term_struct__inst;
obj* l_lean_parser_monad__parsec_error___at_lean_parser_number_x_27___spec__12___rarg(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_bracketed__binders_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder__ident_has__view;
obj* l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__6___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_sort__app_parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_if_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_inst__implicit__named__binder;
obj* l_list_foldl___main___at___private_init_lean_parser_term_1__trailing___spec__12(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
extern obj* l_lean_parser_number;
obj* l_lean_parser_term_let_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__5;
extern obj* l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4___rarg___closed__1;
extern obj* l_lean_parser_combinators_many___rarg___closed__1;
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__5;
obj* l_lean_parser_term_struct__inst__field_has__view_x_27;
obj* l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_simple__binder_has__view_x_27;
obj* l_lean_parser_term_struct__inst__type_has__view_x_27;
obj* l_lean_parser_term_tuple_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_explicit__binder;
obj* l_lean_parser_term_paren_parser(obj*, obj*, obj*, obj*, obj*);
obj* l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__1(obj*);
obj* l_lean_parser_term_have__from_has__view_x_27;
obj* l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_ident__univs_parser_lean_parser_has__view___lambda__1(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_struct__inst_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_anonymous__constructor_parser___closed__1;
obj* l_lean_parser_term_have__from;
obj* l_lean_parser_rec__t_run___at_lean_parser_term__parser_run___spec__7(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_assume__anonymous;
obj* l_lean_parser_term_projection_parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binders__ext;
namespace lean {
obj* nat_add(obj*, obj*);
}
obj* l_lean_parser_term_explicit__modifier;
obj* l_lean_parser_term_tuple_has__view_x_27___lambda__1(obj*);
extern obj* l_lean_parser_trailing__term__parser__m_monad__except;
obj* l_reader__t_orelse___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__2___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_bracketed__binders_has__view_x_27;
obj* l_lean_parser_term_struct__inst__field;
obj* l_lean_parser_term_mixed__binder;
obj* l_lean_parser_term_from_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder;
obj* l_lean_parser_term_lambda_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_ident__univ__spec_parser___closed__1;
obj* l_lean_parser_term_sort;
obj* l_lean_parser_number_parser___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__3___rarg(obj*, obj*, obj*, obj*);
extern obj* l_mjoin___rarg___closed__1;
obj* l_lean_parser_term_binders__types_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_binders_has__view_x_27___lambda__1(obj*);
obj* l___private_init_lean_parser_combinators_1__many1__aux___main___at_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens___spec__2(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_anonymous__constructor_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_explicit_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_let__lhs_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
extern obj* l_lean_parser_basic__parser__m_monad;
obj* l_lean_parser_term_binders__types_has__view_x_27;
obj* l_lean_parser_term_match_has__view;
obj* l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(obj*);
obj* l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27;
obj* l_lean_parser_term_opt__type_parser___closed__1;
obj* l_lean_parser_term_show_parser_lean_parser_has__view;
obj* l_lean_parser_with__trailing___rarg___lambda__1(obj*, obj*);
obj* l_list_mfoldr___main___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__5(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_if_has__view;
obj* l_lean_parser_term_bracketed__binders;
obj* l_lean_parser_parsec__t_lookahead___at___private_init_lean_parser_term_2__leading___spec__9(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_simple__inst__implicit__binder;
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__3___rarg(obj*, obj*);
obj* l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_string__lit_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_combinators_sep__by1_tokens___rarg(obj*, obj*);
extern obj* l_lean_parser_rec__t_run__parsec___rarg___lambda__1___closed__1;
obj* l_lean_parser_term_opt__ident_has__view;
obj* l_lean_parser_term_borrowed_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_level_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_inst__implicit__binder_has__view_x_27;
obj* l_lean_parser_term_anonymous__inaccessible_has__view;
obj* l_lean_parser_list_cons_tokens___rarg(obj*, obj*);
obj* l_lean_parser_term_from_parser_lean_parser_has__view;
obj* l_lean_parser_term_struct__inst__source_has__view_x_27;
obj* l_list_map___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__2(obj*);
obj* l_lean_parser_term_sorry_parser___closed__1;
obj* l_lean_parser_term_arrow_parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_pratt__parser___at_lean_parser_term__parser_run___spec__1___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_if_parser___closed__1;
obj* l_lean_parser_term_implicit__binder_has__view;
obj* l_lean_parser_monad__parsec_error___at___private_init_lean_parser_token_1__finish__comment__block__aux___main___spec__1___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_app_parser_lean_parser_has__view;
obj* l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_sort_parser___closed__1;
obj* l_lean_parser_term_assume_has__view_x_27;
obj* l_lean_parser_pratt__parser___at_lean_parser_term__parser_run___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_if_has__view_x_27;
obj* l_lean_parser_parsec__t_try__mk__res___rarg(obj*);
obj* l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__2___rarg(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4(obj*);
obj* l_lean_parser_term_sort__app_parser_lean_parser_has__view;
obj* l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binders__remainder;
obj* l_lean_parser_term_paren__special_has__view;
obj* l_list_reverse___rarg(obj*);
obj* l_lean_parser_term_explicit__binder__content;
obj* l_lean_parser_term_binder__default_has__view_x_27;
obj* l_lean_parser_term_typed_has__view;
obj* l_lean_parser_term_assume_parser_lean_parser_has__view;
obj* l_lean_parser_ident__univs_parser_lean_parser_has__view;
obj* l_lean_parser_term_sorry_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_type__spec_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_paren__special_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_binders_has__view_x_27;
extern "C" obj* lean_name_mk_string(obj*, obj*);
obj* l_list_mfoldl___main___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__4(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_subtype_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_paren__content_has__view;
obj* l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_projection__spec;
obj* l_lean_parser_term_opt__type_view__default;
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3(obj*);
obj* l_lean_parser_term_explicit_parser___closed__1;
obj* l_lean_parser_term_opt__type_parser_lean_parser_has__view;
obj* l_lean_parser_term_inst__implicit__anonymous__binder;
obj* l_list_enum__from___main___rarg(obj*, obj*);
obj* l_lean_parser_term_explicit__modifier_has__view_x_27;
obj* l_lean_parser_combinators_longest__choice___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_inaccessible_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_sort_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_binder__default__val_has__view_x_27;
obj* l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_app_parser___closed__1;
obj* l_lean_parser_parsec__t_labels__mk__res___rarg(obj*, obj*);
obj* l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_term_match_parser_lean_parser_has__view;
obj* l_lean_parser_term_struct__inst_parser_lean_parser_has__view;
obj* l_lean_parser_term_binder__default_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_borrowed_has__view_x_27___lambda__1___closed__1;
uint8 l_lean_parser_syntax_is__of__kind___main(obj*, obj*);
extern obj* l___private_init_lean_parser_combinators_1__many1__aux___main___rarg___closed__1;
obj* l_lean_parser_term_anonymous__inaccessible_parser___closed__1;
obj* l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__3(obj*);
obj* l_lean_parser_ident__univs_parser___closed__1;
obj* l_lean_parser_term_tuple_has__view;
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__3(obj*);
extern obj* l_lean_parser_level_trailing_parser_lean_parser_has__tokens;
obj* l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_match_has__view_x_27___spec__2(obj*);
obj* l_lean_parser_term_if_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_simple__binder_view_to__binder__info___main(obj*);
obj* l_lean_parser_term_simple__explicit__binder_has__view;
obj* l_string_quote(obj*);
obj* l_lean_parser_term_struct__inst__with_has__view_x_27;
obj* l_lean_parser_term_hole_parser_lean_parser_has__view;
obj* l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_match__equation_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_have__term_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_explicit__binder_has__view_x_27;
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_paren__content_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_paren_parser___closed__1;
obj* l_lean_parser_term_binders__ext_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_sort_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_have__term_has__view;
obj* l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1(obj*);
obj* l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__1___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_anonymous__constructor_has__view_x_27;
obj* l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_combinators_sep__by_tokens___rarg(obj*, obj*);
obj* l_lean_parser_term_anonymous__constructor;
obj* l_lean_parser_combinators_any__of___at_lean_parser_unicode__symbol_lean_parser_has__tokens___spec__2(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_explicit_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_show_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_list_map___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__2(obj*);
obj* l_lean_parser_term_projection__spec_has__view_x_27;
obj* l_lean_parser_term_have__from_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_paren__content;
obj* l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_assume__binders;
obj* l_lean_parser_term_bracketed__binder;
obj* l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__view;
obj* l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_show_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_show_has__view_x_27;
obj* l_lean_parser_term_app_parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_parsec__t_failure___at_lean_parser_token___spec__4___rarg(obj*, obj*);
obj* l_lean_parser_term_pi_has__view;
obj* l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_sorry_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_reader__t_lift___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__2___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_reader__t_lift___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__2(obj*);
obj* l_lean_parser_term_anonymous__inaccessible_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_monad__parsec_observing___at_lean_parser_peek__token___spec__2(obj*, obj*, obj*);
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_inaccessible;
obj* l_lean_parser_term_simple__binder_parser___closed__1;
obj* l_lean_parser_combinators_choice__aux___main___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__4(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
namespace lean {
obj* string_length(obj*);
}
obj* l_lean_parser_term_projection_parser_lean_parser_has__view___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder_parser_lean_parser_has__tokens;
obj* l_lean_parser_parsec__t_lookahead___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__4(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_ident__univs;
obj* l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binder__ident_parser___closed__1;
obj* l_lean_parser_term_assume_parser___closed__1;
obj* l_lean_parser_term_simple__implicit__binder_has__view;
obj* l_lean_parser_term_subtype_parser___closed__1;
obj* l_lean_parser_term_sorry;
obj* l_lean_parser_term_binder__ident_parser_lean_parser_has__tokens;
uint8 l_string_is__empty(obj*);
obj* l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__1;
extern obj* l_lean_parser_command_notation__like_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_assume_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_match__equation_has__view_x_27;
obj* l_lean_parser_term_match_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_borrowed_parser___closed__1;
obj* l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_paren_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_implicit__binder;
obj* l_lean_parser_term_type__spec_parser_lean_parser_has__view;
extern obj* l_lean_name_to__string___closed__1;
obj* l_lean_parser_term_match_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_bracketed__binder_parser_lean_parser_has__view;
obj* l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1(obj*, obj*, uint8, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_have_parser_lean_parser_has__view;
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__2;
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_subtype_parser_lean_parser_has__view;
obj* l_lean_parser_combinators_longest__match___at___private_init_lean_parser_term_1__trailing___spec__6(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_explicit;
obj* l_lean_parser_term_have_has__view;
extern obj* l_lean_parser_level_parser_lean_parser_has__tokens___closed__1;
obj* l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1(obj*);
obj* l_function_comp___rarg(obj*, obj*, obj*);
obj* l_lean_parser_term_projection_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_monad__parsec_longest__match___at___private_init_lean_parser_term_1__trailing___spec__7(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_opt__ident_parser_lean_parser_has__view___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_simple__implicit__binder_has__view_x_27;
obj* l_lean_parser_term_anonymous__inaccessible;
extern obj* l_lean_parser_number_parser___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__1___rarg___closed__1;
obj* l_lean_parser_try__view___at_lean_parser_number_parser___spec__1(obj*);
obj* l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_borrowed_parser_lean_parser_has__view;
obj* l_lean_parser_term_paren_has__view_x_27;
obj* l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_explicit__binder_has__view;
obj* l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_simple__binder_parser_lean_parser_has__view;
obj* l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__1(obj*, obj*, uint8, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder__default__val_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_struct__inst__source;
obj* l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__1___rarg(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__1;
obj* l_lean_parser_term_subtype_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_builtin__trailing__parsers_lean_parser_has__tokens;
obj* l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser_lean_parser_has__tokens___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binders_has__view;
obj* l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1___closed__1;
extern obj* l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
obj* l_list_foldr___main___at___private_init_lean_parser_term_2__leading___spec__6(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_builtin__leading__parsers;
obj* l_lean_parser_term_assume_has__view_x_27___lambda__2(obj*);
extern obj* l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
obj* l_list_mfoldr___main___at___private_init_lean_parser_term_2__leading___spec__10(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
extern obj* l_lean_parser_curr__lbp___rarg___lambda__1___closed__1;
obj* l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_have__proof_has__view;
extern obj* l_lean_parser_string__lit;
obj* l_lean_parser_term_binders__ext_parser___closed__1;
obj* l_lean_parser_term_binders__remainder_has__view_x_27;
obj* l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_implicit__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_combinators_any__of___at___private_init_lean_parser_term_1__trailing___spec__10(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l___private_init_lean_parser_parsec_1__str__aux___main(obj*, obj*, obj*);
obj* l_list_join___main___rarg(obj*);
obj* l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(obj*, obj*);
obj* l_lean_parser_term_have__proof_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_tuple_has__view_x_27;
obj* l_lean_parser_term_binder__default__val_has__view;
obj* l_lean_parser_term_simple__binder_view_to__binder__info(obj*);
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__5(obj*);
obj* l_lean_parser_term_binders__remainder_has__view;
obj* l_lean_parser_term_opt__ident_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_explicit_parser_lean_parser_has__view;
extern obj* l_lean_parser_number_has__view;
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__2___rarg(obj*, obj*);
obj* l_lean_parser_term_pi_has__view_x_27___lambda__2(obj*);
extern obj* l_lean_parser_command_mixfix_kind_has__view_x_27___lambda__2___closed__1;
obj* l_lean_parser_term_struct__inst__type_has__view;
obj* l_lean_parser_ident__univ__spec;
obj* l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__3(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_level__parser_run(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2;
extern obj* l_lean_parser_number_has__view_x_27___lambda__2___closed__2;
obj* l_lean_parser_term_inst__implicit__binder;
obj* l_lean_parser_term_let__lhs__id_has__view_x_27;
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_paren_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_borrowed_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_typed_has__view_x_27;
obj* l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_app_parser_lean_parser_has__view___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_sorry_has__view_x_27;
obj* l_lean_parser_term_pi_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_explicit__binder__content_has__view;
obj* l_lean_parser_tokens___rarg(obj*);
obj* l_lean_parser_term_binders_has__view_x_27___lambda__2(obj*);
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__4(obj*);
obj* l_option_get__or__else___main___rarg(obj*, obj*);
obj* l_lean_parser_term_sorry_parser_lean_parser_has__view;
obj* l_lean_parser_term_have__proof_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_hole_parser___closed__1;
obj* l_lean_parser_term_sort__app_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___closed__1;
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__5(obj*);
obj* l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_simple__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_have__from_has__view;
obj* l_lean_parser_term_simple__implicit__binder;
extern obj* l_lean_parser_no__kind;
obj* l_lean_parser_combinators_many1___at_lean_parser_command_notation__spec_parser_lean_parser_has__tokens___spec__2(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_anonymous__inaccessible_has__view_x_27;
obj* l_lean_parser_syntax_as__node___main(obj*);
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_app;
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_binder_has__view;
obj* l_lean_parser_term_simple__binder_has__view;
obj* l_lean_parser_term_binder__ident_has__view_x_27;
obj* l_lean_parser_term_binder__default_parser_lean_parser_has__view;
obj* l_lean_parser_term_show_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1;
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__2(obj*);
obj* l___private_init_lean_parser_combinators_2__sep__by__aux___main___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__2(obj*, obj*, uint8, uint8, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_projection_has__view_x_27;
obj* l_lean_parser_symbol_tokens___rarg(obj*, obj*);
obj* l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27;
obj* l_lean_parser_term_borrowed_parser_lean_parser_has__tokens;
obj* l_lean_parser_pratt__parser___at_lean_parser_level__parser_run___spec__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_bracketed__binders_has__view;
obj* l_lean_parser_term_paren__content_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_have_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_have;
obj* l_lean_parser_term_match_parser___closed__1;
obj* l_lean_parser_term_pi;
obj* l_lean_parser_term_paren_has__view;
namespace lean {
uint8 nat_dec_eq(obj*, obj*);
}
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_term_sort_has__view_x_27;
obj* l_lean_parser_token__map__cons_tokens___rarg(obj*, obj*);
obj* l_lean_parser_term_let__lhs__id_has__view;
extern obj* l_lean_parser_term__parser__m_lean_parser_monad__parsec;
obj* l_lean_parser_term_sorry_has__view;
obj* l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1;
extern obj* l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_simple__strict__implicit__binder_has__view;
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2;
obj* l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__3___rarg(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_mk__raw__res(obj*, obj*);
obj* l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_assume_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_bracketed__binders_parser_lean_parser_has__view;
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_term_sort__app_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_sort__app_parser_lean_parser_has__view___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_pi_has__view_x_27;
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2___closed__1;
obj* l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_number_parser___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__3(obj*, obj*);
obj* l_lean_parser_term_tuple;
obj* l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27___lambda__1(obj*);
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__5___rarg(obj*, obj*);
obj* l_lean_parser_term_binder_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_have_has__view_x_27___lambda__2(obj*);
extern obj* l_lean_parser_term__parser__m_monad;
obj* l_lean_parser_term_let_has__view;
obj* l_lean_parser_term_show_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_pi_parser___closed__1;
obj* l_lean_parser_term_binders;
obj* l_lean_parser_term_subtype_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binders_parser_lean_parser_has__view;
obj* l_lean_parser_term_have_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_simple__binder_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_inst__implicit__binder__content_has__view_x_27;
obj* l_lean_parser_term_arrow_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_symbol__core___at_lean_parser_unicode__symbol_lean_parser_has__tokens___spec__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_combinators_node_view___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binder__content_parser___closed__1;
obj* l_lean_parser_term_have_parser___closed__1;
obj* l_lean_parser_term_if_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_projection_has__view;
obj* l_lean_parser_term_assume__binders_has__view_x_27;
obj* l_lean_parser_term_binder__default__tac;
obj* l_lean_parser_number_parser___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__1(obj*);
obj* l_lean_parser_term_show_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_binders__ext_has__view;
obj* l_lean_parser_term_subtype_has__view_x_27;
obj* l___private_init_lean_parser_pratt_1__trailing__loop___main___at_lean_parser_term__parser_run___spec__2(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
extern obj* l_lean_parser_finish__comment__block___closed__2;
obj* l_lean_parser_term_let__lhs_has__view;
obj* l_lean_parser_term_binder__default__val;
obj* l_lean_parser_term_binder__ident;
extern obj* l_string_join___closed__1;
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_simple__explicit__binder_has__view_x_27;
obj* l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__2(obj*);
obj* l_id___rarg(obj*);
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_lambda_parser_lean_parser_has__view;
extern obj* l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
obj* l_lean_parser_term_explicit__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_assume__binders_has__view;
obj* l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_assume__binders_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_bracketed__binder_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_bracketed__binder_has__view_x_27;
obj* l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1;
extern obj* l_lean_parser_max__prec;
obj* l_lean_parser_term_inst__implicit__binder__content;
obj* l_lean_parser_term_let__lhs__id;
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_opt__ident_parser_lean_parser_has__view;
obj* l_lean_parser_term_explicit__binder__content_has__view_x_27;
obj* l_lean_parser_ident__univ__spec_parser(obj*, obj*, obj*);
obj* l_lean_parser_term_lean_parser_has__view;
obj* l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_syntax_mk__node(obj*, obj*);
obj* l_lean_parser_term_match_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_typed_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_inaccessible_parser_lean_parser_has__view;
obj* l_lean_parser_term_app_has__view_x_27;
obj* l_list_map___main___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__2(obj*);
obj* l_lean_parser_token__map_of__list___main___rarg(obj*);
obj* l_lean_parser_term_opt__ident_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_bracketed__binder_has__view;
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__3___rarg(obj*, obj*);
obj* l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__1(obj*);
obj* l_lean_parser_term_paren__special_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_struct__inst_has__view;
obj* l_lean_parser_term_from;
obj* l_lean_parser_term_lambda_has__view;
obj* l_lean_parser_term_inaccessible_has__view_x_27;
obj* l_lean_parser_term_inst__implicit__anonymous__binder_has__view;
obj* l_lean_parser_term_borrowed_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_struct__inst__field_has__view;
obj* l_lean_parser_term_paren_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
obj* l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_lambda_has__view_x_27___lambda__2(obj*);
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__4___rarg(obj*, obj*);
obj* l_lean_parser_term_have_has__view_x_27;
obj* l_lean_parser_monad__parsec_str__core___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_app_has__view;
obj* l_lean_parser_ident__univ__spec_parser_lean_parser_has__view;
obj* l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binder_parser___closed__1;
obj* l_lean_parser_term_simple__binder_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_simple__strict__implicit__binder;
obj* l_lean_parser_term_struct__inst__item;
obj* l_list_mfoldr___main___at___private_init_lean_parser_term_1__trailing___spec__9(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_inaccessible_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_ident__univs_has__view;
obj* l_lean_parser_term_sort_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_combinators_many1___at_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens___spec__1(obj*, obj*, obj*, obj*);
obj* l_lean_parser_token(obj*, obj*, obj*);
obj* l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_mixed__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_sort__app_has__view;
obj* l_lean_parser_term_explicit_has__view;
obj* l_lean_parser_monad__parsec_longest__match___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__3(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_paren_parser_lean_parser_has__view;
obj* l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_simple__binder;
obj* l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_assume_has__view;
obj* l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1(obj*);
extern obj* l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
namespace lean {
obj* string_iterator_offset(obj*);
}
obj* l_lean_parser_term_get__leading(obj*, obj*, obj*, obj*, obj*, obj*);
extern obj* l_lean_parser_level_leading_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_bracketed__binders_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_struct__inst__item_has__view_x_27;
obj* l_lean_parser_term_type__spec_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_assume__anonymous_has__view;
obj* l_lean_parser_ident_parser___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__2(obj*, obj*);
obj* l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_opt__ident_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_mk__app(obj*, obj*);
obj* l_lean_parser_term_parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_projection_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_bracketed__binders_parser___closed__1;
obj* l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_app_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_lambda_parser_lean_parser_has__tokens;
extern obj* l_lean_parser_detail__ident_has__view_x_27___lambda__2___closed__1;
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_have__from_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_from_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_have_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_let__lhs_has__view_x_27;
obj* l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__2(obj*);
obj* l_reader__t_orelse___at___private_init_lean_parser_term_1__trailing___spec__11___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_paren;
obj* l_lean_parser_term_opt__type_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_projection;
obj* l_lean_parser_combinators_node___at_lean_parser_detail__ident__part_parser_lean_parser_has__tokens___spec__15(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_paren__special_has__view_x_27;
obj* l_lean_parser_term_type__spec_parser___closed__1;
extern obj* l_list_mfoldr___main___at_lean_parser_monad__parsec_longest__match___spec__2___rarg___closed__1;
obj* l_lean_parser_combinators_longest__match___at___private_init_lean_parser_term_2__leading___spec__7(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_inaccessible_has__view;
obj* l_lean_parser_term_binder__default__tac_has__view;
extern obj* l_lean_parser_curr__lbp___rarg___lambda__3___closed__2;
obj* l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__view;
obj* l_lean_parser_term_hole_has__view;
obj* l_lean_parser_term_binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_sort__app_parser_lean_parser_has__tokens;
obj* l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser_lean_parser_has__tokens___spec__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_parsec__t_merge___rarg(obj*, obj*);
obj* l_list_map___main___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__2___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__2(obj*);
extern obj* l_lean_parser_indexed___rarg___lambda__1___closed__1;
obj* l_lean_parser_term_simple__explicit__binder;
obj* l___private_init_lean_parser_term_1__trailing(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binders_parser___closed__1;
obj* l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_try__view___at_lean_parser_string__lit_parser___spec__1(obj*);
obj* l_lean_parser_term_lambda_parser___closed__1;
extern obj* l_lean_parser_level__parser_run_lean_parser_has__view___closed__3;
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_parsec__t_lookahead___at___private_init_lean_parser_term_1__trailing___spec__8(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
extern "C" uint8 lean_name_dec_eq(obj*, obj*);
obj* l_lean_parser_term_projection_parser___closed__1;
obj* l_lean_parser_term_struct__inst__with;
obj* l_lean_parser_term_inaccessible_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_combinators_try_view___rarg(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder__default_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_sorry_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_combinators_optional_view___rarg(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_assume_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_unicode__symbol___at_lean_parser_term_arrow_parser_lean_parser_has__tokens___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens;
obj* l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_term_mixed__binder_has__view_x_27;
obj* l_lean_parser_term_paren__content_has__view_x_27;
obj* l_lean_parser_term_have__term;
obj* l_lean_parser_term_hole_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
obj* l_lean_parser_monad__parsec_longest__match___at___private_init_lean_parser_term_2__leading___spec__8(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__2;
obj* l_lean_parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1(obj*);
obj* l_lean_parser_term_arrow_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_borrowed;
obj* l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_typed;
obj* l_lean_parser_term_struct__inst__item_has__view;
obj* l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_ident__univs_has__view_x_27;
obj* l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_match_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_ident_parser___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__2___rarg(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_borrowed_has__view;
obj* l_lean_parser_term_struct__inst__type;
extern obj* l_lean_parser_combinators_choice__aux___main___rarg___closed__1;
obj* l_lean_parser_term_binder__content_parser_lean_parser_has__view;
obj* l_lean_parser_term_binders_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder__content_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_let_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_monad__parsec_error___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__4___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_show_has__view;
extern obj* l_lean_parser_level__parser_run_lean_parser_has__view___closed__2;
obj* l_lean_parser_term_let_parser_lean_parser_has__view;
obj* l_lean_parser_term_opt__ident;
obj* l_lean_parser_term_match__equation;
obj* l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__1(obj*, obj*);
obj* l_lean_parser_term_from_parser___closed__1;
obj* l_lean_parser_term_have__term_has__view_x_27;
obj* l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens___spec__1(obj*);
namespace lean {
obj* string_iterator_remaining(obj*);
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__3(obj*);
extern obj* l_lean_parser_trailing__term__parser__m_monad;
namespace lean {
obj* string_mk_iterator(obj*);
}
obj* l_lean_parser_term_binder_has__view_x_27;
obj* l_lean_parser_term_app_has__view_x_27___lambda__1(obj*);
extern obj* l_lean_parser_basic__parser__m_alternative;
obj* l_lean_parser_term_subtype_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_struct__inst__source_has__view;
obj* l_lean_parser_term_arrow_has__view_x_27;
obj* l_lean_parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_let_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_term_sort__app_has__view_x_27;
obj* l_lean_parser_term_if_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_explicit_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_binder__ident_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1(obj*);
obj* l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__2(obj*);
obj* l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__2;
obj* l_list_map___main___at_lean_parser_term_tuple_has__view_x_27___spec__2(obj*);
obj* l_lean_parser_term_struct__inst_parser_lean_parser_has__view___lambda__2(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__4(obj*);
extern obj* l_lean_parser_trailing__term__parser__m_lean_parser_monad__parsec;
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__6(obj*);
obj* l_reader__t_orelse___at___private_init_lean_parser_term_1__trailing___spec__11(obj*);
obj* l_lean_parser_term_match_has__view_x_27;
obj* l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_lambda_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_have__term_has__view_x_27___lambda__1(obj*);
obj* l_string_trim(obj*);
obj* l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_from_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_explicit_has__view_x_27;
obj* l_option_get___main___at_lean_parser_run___spec__2(obj*);
obj* l_lean_parser_term_match_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_sort_has__view;
obj* l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_binders__types_has__view;
obj* l_lean_parser_term_strict__implicit__binder_has__view_x_27;
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_unicode__symbol_lean_parser_has__tokens___rarg(obj*, obj*, obj*);
obj* l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_binder__default_parser___closed__1;
obj* l_lean_parser_term_arrow_parser_lean_parser_has__tokens;
extern obj* l_lean_parser_curr__lbp___rarg___lambda__3___closed__1;
obj* l_lean_parser_term_binders__types;
obj* l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_if;
obj* l_lean_parser_term_sort_parser_lean_parser_has__view;
obj* l_lean_parser_term_assume;
obj* l_lean_parser_term_pi_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_opt__type_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_app_parser_lean_parser_has__tokens;
obj* l_lean_parser_ident__univ__spec_has__view;
obj* l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_binder_parser_lean_parser_has__view;
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_match__equation_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term__parser_run(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_combinators_seq__right_view___rarg(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_arrow_has__view_x_27___lambda__2(obj*);
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__5___rarg(obj*, obj*);
obj* l_lean_parser_term_sort__app;
obj* l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_typed_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_opt__ident_has__view_x_27;
obj* l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__2;
extern obj* l_lean_parser_trailing__term__parser__m_alternative;
obj* l_lean_parser_term_anonymous__inaccessible_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_pi_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_let_has__view_x_27;
extern "C" obj* lean_name_mk_numeral(obj*, obj*);
obj* l_lean_parser_term_binder__content_has__view;
obj* l_lean_parser_term_binder__default_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens___spec__1___rarg(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binders__ext_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_builtin__trailing__parsers;
obj* l_lean_parser_term_inaccessible_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_binder__default__tac_has__view_x_27;
obj* l_lean_parser_term_inst__implicit__binder_has__view;
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_strict__implicit__binder_has__view;
obj* l_lean_parser_term_strict__implicit__binder;
obj* l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens___spec__1___rarg___closed__1;
extern obj* l_lean_parser_choice;
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_inaccessible_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_anonymous__constructor_has__view;
obj* l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_sort__app_parser___closed__1;
obj* l___private_init_lean_parser_combinators_2__sep__by__aux___main___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__2___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_sort__app_parser_lean_parser_has__view___lambda__2(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_type__spec;
obj* l_lean_parser_term_simple__inst__implicit__binder_has__view;
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_hole_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_subtype_has__view;
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__4___rarg(obj*, obj*);
obj* l_lean_parser_term_sort_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder__default_has__view;
obj* l_lean_parser_term_projection_parser_lean_parser_has__view;
obj* l_lean_parser_term_binder__ident_parser_lean_parser_has__view;
obj* l_lean_parser_term_projection_tokens;
obj* l_lean_parser_term_type__spec_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_simple__binder_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_lambda;
obj* l_lean_parser_term_type__spec_has__view;
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__4(obj*);
obj* l_lean_parser_term_arrow;
obj* l_lean_parser_term_inst__implicit__binder__content_has__view;
obj* l_lean_parser_ident__univs_parser_lean_parser_has__tokens;
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__5;
obj* l_lean_parser_ident__univs_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_list_foldr___main___at___private_init_lean_parser_term_1__trailing___spec__13(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_list_map___main___at_lean_parser_term_match__equation_has__view_x_27___spec__1(obj*);
obj* l___private_init_lean_parser_term_2__leading(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_hole;
obj* l_lean_parser_command_notation__like_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_lean_parser_has__tokens;
obj* l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__2;
namespace lean {
obj* nat_sub(obj*, obj*);
}
obj* l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_match_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binder__content_has__view_x_27;
obj* l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1(obj*);
extern obj* l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
obj* l_lean_parser_term_binder__content_parser(obj*, obj*, obj*, obj*, obj*);
extern obj* l_lean_parser_basic__parser__m_lean_parser_monad__parsec;
obj* l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_let_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_hole_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_explicit__modifier_has__view;
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
obj* l_lean_parser_term_if_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__1(obj*);
obj* l_dlist_singleton___rarg(obj*, obj*);
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3;
extern obj* l_lean_parser_basic__parser__m_monad__except;
obj* l_lean_parser_term_from_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_parsec__t_orelse__mk__res___rarg(obj*, obj*);
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_lambda_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__5(obj*);
obj* l_lean_parser_term_have_parser(obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_list_append___rarg(obj*, obj*);
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__6;
obj* l_lean_parser_term_lambda_has__view_x_27;
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_struct__inst_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_arrow_parser_lean_parser_has__view___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_opt__ident_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_let__lhs_has__view_x_27___lambda__1(obj*);
extern obj* l_lean_parser_number_has__view_x_27___lambda__1___closed__6;
obj* l_option_map___rarg(obj*, obj*);
obj* l_lean_parser_ident__univ__spec_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__2(obj*);
extern obj* l_lean_parser_combinators_any__of___rarg___closed__1;
obj* l_lean_parser_term_sort__app_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_paren__special;
extern obj* l_lean_parser_term__parser__m_monad__except;
obj* l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
obj* l_list_foldl___main___at_lean_parser_term_mk__app___spec__1(obj*, obj*);
obj* l_lean_parser_term_binder__default_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_borrowed_has__view_x_27;
obj* l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_substring_of__string(obj*);
obj* l_lean_parser_term_binders__types_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens;
obj* l_lean_parser_term_if_parser_lean_parser_has__view;
obj* l_lean_parser_term_let;
obj* l_lean_parser_term_inaccessible_parser___closed__1;
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_arrow_parser_lean_parser_has__view;
obj* l_lean_parser_term_struct__inst__with_has__view;
obj* l___private_init_lean_parser_rec_1__run__aux___at_lean_parser_term__parser_run___spec__8(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_struct__inst_parser_lean_parser_has__view___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_struct__inst_parser___closed__1;
obj* l_lean_parser_term_hole_has__view_x_27;
obj* l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1(obj*);
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__5___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1;
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__2(obj*);
obj* l_lean_parser_term_mixed__binder_has__view;
obj* l_lean_parser_term_inst__implicit__named__binder_has__view;
obj* l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__2(obj*);
namespace lean {
uint8 nat_dec_lt(obj*, obj*);
}
obj* l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1___closed__1;
obj* l___private_init_lean_parser_rec_1__run__aux___main___rarg(obj*, obj*, obj*, obj*);
obj* l_lean_parser_term_from_has__view;
obj* l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2;
obj* l_lean_parser_term_type__spec_parser(obj*, obj*, obj*, obj*, obj*);
extern obj* l_lean_parser_term__parser__m_alternative;
obj* l_lean_parser_term_binders__ext_has__view_x_27;
obj* l_lean_parser_term_subtype_has__view_x_27___lambda__2(obj*);
obj* l_lean_parser_term_projection__spec_has__view;
extern obj* l_lean_parser_raw_view___rarg___lambda__3___closed__1;
obj* _init_l_lean_parser_ident__univ__spec() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("ident_univ_spec");
x_6 = lean_name_mk_string(x_4, x_5);
return x_6;
}
}
obj* l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_8; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
x_7 = l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__1(x_4);
if (lean::is_scalar(x_6)) {
 x_8 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_8 = x_6;
}
lean::cnstr_set(x_8, 0, x_2);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
}
obj* l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__2(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_8; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
x_7 = l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__2(x_4);
if (lean::is_scalar(x_6)) {
 x_8 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_8 = x_6;
}
lean::cnstr_set(x_8, 0, x_2);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
}
obj* _init_l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
return x_2;
}
}
obj* _init_l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = lean::box(3);
x_14 = x_0;
x_15 = x_17;
goto lbl_16;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
x_14 = x_20;
x_15 = x_18;
goto lbl_16;
}
lbl_16:
{
obj* x_23; 
x_23 = l_lean_parser_syntax_as__node___main(x_15);
if (lean::obj_tag(x_23) == 0)
{
if (lean::obj_tag(x_14) == 0)
{
obj* x_24; obj* x_25; obj* x_26; 
x_24 = lean::box(0);
x_25 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
x_26 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_26, 0, x_5);
lean::cnstr_set(x_26, 1, x_25);
lean::cnstr_set(x_26, 2, x_24);
return x_26;
}
else
{
obj* x_27; 
x_27 = lean::cnstr_get(x_14, 0);
lean::inc(x_27);
lean::dec(x_14);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; obj* x_33; obj* x_34; obj* x_35; 
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
lean::dec(x_27);
x_33 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_33, 0, x_30);
x_34 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
x_35 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_35, 0, x_5);
lean::cnstr_set(x_35, 1, x_34);
lean::cnstr_set(x_35, 2, x_33);
return x_35;
}
case 3:
{
obj* x_36; obj* x_37; obj* x_38; 
x_36 = lean::box(0);
x_37 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_5);
lean::cnstr_set(x_38, 1, x_37);
lean::cnstr_set(x_38, 2, x_36);
return x_38;
}
default:
{
obj* x_40; obj* x_41; obj* x_42; 
lean::dec(x_27);
x_40 = lean::box(0);
x_41 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
x_42 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_42, 0, x_5);
lean::cnstr_set(x_42, 1, x_41);
lean::cnstr_set(x_42, 2, x_40);
return x_42;
}
}
}
}
else
{
obj* x_43; obj* x_45; obj* x_46; obj* x_49; 
x_43 = lean::cnstr_get(x_23, 0);
if (lean::is_exclusive(x_23)) {
 lean::cnstr_set(x_23, 0, lean::box(0));
 x_45 = x_23;
} else {
 lean::inc(x_43);
 lean::dec(x_23);
 x_45 = lean::box(0);
}
x_46 = lean::cnstr_get(x_43, 1);
lean::inc(x_46);
lean::dec(x_43);
x_49 = l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__1(x_46);
if (lean::obj_tag(x_14) == 0)
{
obj* x_51; obj* x_52; 
lean::dec(x_45);
x_51 = lean::box(0);
x_52 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_52, 0, x_5);
lean::cnstr_set(x_52, 1, x_49);
lean::cnstr_set(x_52, 2, x_51);
return x_52;
}
else
{
obj* x_53; 
x_53 = lean::cnstr_get(x_14, 0);
lean::inc(x_53);
lean::dec(x_14);
switch (lean::obj_tag(x_53)) {
case 0:
{
obj* x_56; obj* x_59; obj* x_60; 
x_56 = lean::cnstr_get(x_53, 0);
lean::inc(x_56);
lean::dec(x_53);
if (lean::is_scalar(x_45)) {
 x_59 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_59 = x_45;
}
lean::cnstr_set(x_59, 0, x_56);
x_60 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_60, 0, x_5);
lean::cnstr_set(x_60, 1, x_49);
lean::cnstr_set(x_60, 2, x_59);
return x_60;
}
case 3:
{
obj* x_62; obj* x_63; 
lean::dec(x_45);
x_62 = lean::box(0);
x_63 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_63, 0, x_5);
lean::cnstr_set(x_63, 1, x_49);
lean::cnstr_set(x_63, 2, x_62);
return x_63;
}
default:
{
obj* x_66; obj* x_67; 
lean::dec(x_45);
lean::dec(x_53);
x_66 = lean::box(0);
x_67 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_67, 0, x_5);
lean::cnstr_set(x_67, 1, x_49);
lean::cnstr_set(x_67, 2, x_66);
return x_67;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; 
x_36 = l_lean_parser_syntax_as__node___main(x_28);
if (lean::obj_tag(x_36) == 0)
{
if (lean::obj_tag(x_27) == 0)
{
obj* x_37; obj* x_38; obj* x_39; 
x_37 = lean::box(0);
x_38 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
x_39 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_39, 0, x_18);
lean::cnstr_set(x_39, 1, x_38);
lean::cnstr_set(x_39, 2, x_37);
return x_39;
}
else
{
obj* x_40; 
x_40 = lean::cnstr_get(x_27, 0);
lean::inc(x_40);
lean::dec(x_27);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_43; obj* x_46; obj* x_47; obj* x_48; 
x_43 = lean::cnstr_get(x_40, 0);
lean::inc(x_43);
lean::dec(x_40);
x_46 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_46, 0, x_43);
x_47 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
x_48 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_48, 0, x_18);
lean::cnstr_set(x_48, 1, x_47);
lean::cnstr_set(x_48, 2, x_46);
return x_48;
}
case 3:
{
obj* x_49; obj* x_50; obj* x_51; 
x_49 = lean::box(0);
x_50 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
x_51 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_51, 0, x_18);
lean::cnstr_set(x_51, 1, x_50);
lean::cnstr_set(x_51, 2, x_49);
return x_51;
}
default:
{
obj* x_53; obj* x_54; obj* x_55; 
lean::dec(x_40);
x_53 = lean::box(0);
x_54 = l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1;
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_18);
lean::cnstr_set(x_55, 1, x_54);
lean::cnstr_set(x_55, 2, x_53);
return x_55;
}
}
}
}
else
{
obj* x_56; obj* x_58; obj* x_59; obj* x_62; 
x_56 = lean::cnstr_get(x_36, 0);
if (lean::is_exclusive(x_36)) {
 lean::cnstr_set(x_36, 0, lean::box(0));
 x_58 = x_36;
} else {
 lean::inc(x_56);
 lean::dec(x_36);
 x_58 = lean::box(0);
}
x_59 = lean::cnstr_get(x_56, 1);
lean::inc(x_59);
lean::dec(x_56);
x_62 = l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__1(x_59);
if (lean::obj_tag(x_27) == 0)
{
obj* x_64; obj* x_65; 
lean::dec(x_58);
x_64 = lean::box(0);
x_65 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_65, 0, x_18);
lean::cnstr_set(x_65, 1, x_62);
lean::cnstr_set(x_65, 2, x_64);
return x_65;
}
else
{
obj* x_66; 
x_66 = lean::cnstr_get(x_27, 0);
lean::inc(x_66);
lean::dec(x_27);
switch (lean::obj_tag(x_66)) {
case 0:
{
obj* x_69; obj* x_72; obj* x_73; 
x_69 = lean::cnstr_get(x_66, 0);
lean::inc(x_69);
lean::dec(x_66);
if (lean::is_scalar(x_58)) {
 x_72 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_72 = x_58;
}
lean::cnstr_set(x_72, 0, x_69);
x_73 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_73, 0, x_18);
lean::cnstr_set(x_73, 1, x_62);
lean::cnstr_set(x_73, 2, x_72);
return x_73;
}
case 3:
{
obj* x_75; obj* x_76; 
lean::dec(x_58);
x_75 = lean::box(0);
x_76 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_76, 0, x_18);
lean::cnstr_set(x_76, 1, x_62);
lean::cnstr_set(x_76, 2, x_75);
return x_76;
}
default:
{
obj* x_79; obj* x_80; 
lean::dec(x_66);
lean::dec(x_58);
x_79 = lean::box(0);
x_80 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_80, 0, x_18);
lean::cnstr_set(x_80, 1, x_62);
lean::cnstr_set(x_80, 2, x_79);
return x_80;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_ident__univ__spec_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_9 = l_option_map___rarg(x_8, x_1);
x_10 = lean::box(3);
x_11 = l_option_get__or__else___main___rarg(x_9, x_10);
x_12 = l_list_map___main___at_lean_parser_ident__univ__spec_has__view_x_27___spec__2(x_3);
x_13 = l_lean_parser_no__kind;
x_14 = l_lean_parser_syntax_mk__node(x_13, x_12);
x_15 = l_option_map___rarg(x_8, x_5);
x_16 = l_option_get__or__else___main___rarg(x_15, x_10);
x_17 = lean::box(0);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_14);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_11);
lean::cnstr_set(x_20, 1, x_19);
x_21 = l_lean_parser_ident__univ__spec;
x_22 = l_lean_parser_syntax_mk__node(x_21, x_20);
return x_22;
}
}
obj* _init_l_lean_parser_ident__univ__spec_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univ__spec_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_ident__univ__spec_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_ident__univ__spec_has__view_x_27;
return x_0;
}
}
obj* l___private_init_lean_parser_combinators_1__many1__aux___main___at_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens___spec__2(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; uint8 x_7; 
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::nat_dec_eq(x_2, x_6);
if (x_7 == 0)
{
obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_16; obj* x_17; obj* x_19; 
x_8 = lean::mk_nat_obj(1u);
x_9 = lean::nat_sub(x_2, x_8);
lean::dec(x_2);
lean::inc(x_3);
lean::inc(x_0);
x_16 = lean::apply_3(x_0, x_3, x_4, x_5);
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_16, 1);
lean::inc(x_19);
lean::dec(x_16);
if (lean::obj_tag(x_17) == 0)
{
x_11 = x_17;
x_12 = x_19;
goto lbl_13;
}
else
{
obj* x_22; uint8 x_24; obj* x_25; obj* x_26; obj* x_28; obj* x_30; obj* x_32; obj* x_35; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
x_22 = lean::cnstr_get(x_17, 0);
x_24 = lean::cnstr_get_scalar<uint8>(x_17, sizeof(void*)*1);
if (lean::is_exclusive(x_17)) {
 lean::cnstr_set(x_17, 0, lean::box(0));
 x_25 = x_17;
} else {
 lean::inc(x_22);
 lean::dec(x_17);
 x_25 = lean::box(0);
}
x_26 = lean::cnstr_get(x_22, 0);
lean::inc(x_26);
x_28 = lean::cnstr_get(x_22, 1);
lean::inc(x_28);
x_30 = lean::cnstr_get(x_22, 2);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_22, 3);
lean::inc(x_32);
lean::dec(x_22);
x_35 = l_option_get___main___at_lean_parser_run___spec__2(x_32);
lean::inc(x_1);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_35);
lean::cnstr_set(x_37, 1, x_1);
x_38 = lean::box(3);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_37);
x_40 = l_list_reverse___rarg(x_39);
x_41 = l_lean_parser_no__kind;
x_42 = l_lean_parser_syntax_mk__node(x_41, x_40);
x_43 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_43, 0, x_42);
x_44 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_44, 0, x_26);
lean::cnstr_set(x_44, 1, x_28);
lean::cnstr_set(x_44, 2, x_30);
lean::cnstr_set(x_44, 3, x_43);
if (x_24 == 0)
{
uint8 x_45; obj* x_46; obj* x_47; 
x_45 = 0;
if (lean::is_scalar(x_25)) {
 x_46 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_46 = x_25;
}
lean::cnstr_set(x_46, 0, x_44);
lean::cnstr_set_scalar(x_46, sizeof(void*)*1, x_45);
x_47 = x_46;
x_11 = x_47;
x_12 = x_19;
goto lbl_13;
}
else
{
obj* x_48; obj* x_49; 
if (lean::is_scalar(x_25)) {
 x_48 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_48 = x_25;
}
lean::cnstr_set(x_48, 0, x_44);
lean::cnstr_set_scalar(x_48, sizeof(void*)*1, x_24);
x_49 = x_48;
x_11 = x_49;
x_12 = x_19;
goto lbl_13;
}
}
lbl_13:
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_50; obj* x_52; obj* x_54; obj* x_56; obj* x_57; obj* x_60; obj* x_61; obj* x_63; obj* x_65; 
x_50 = lean::cnstr_get(x_11, 0);
x_52 = lean::cnstr_get(x_11, 1);
x_54 = lean::cnstr_get(x_11, 2);
if (lean::is_exclusive(x_11)) {
 lean::cnstr_set(x_11, 0, lean::box(0));
 lean::cnstr_set(x_11, 1, lean::box(0));
 lean::cnstr_set(x_11, 2, lean::box(0));
 x_56 = x_11;
} else {
 lean::inc(x_50);
 lean::inc(x_52);
 lean::inc(x_54);
 lean::dec(x_11);
 x_56 = lean::box(0);
}
x_57 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_57, 0, x_50);
lean::cnstr_set(x_57, 1, x_1);
lean::inc(x_52);
lean::inc(x_57);
x_60 = l___private_init_lean_parser_combinators_1__many1__aux___main___at_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens___spec__2(x_0, x_57, x_9, x_3, x_52, x_12);
x_61 = lean::cnstr_get(x_60, 0);
x_63 = lean::cnstr_get(x_60, 1);
if (lean::is_exclusive(x_60)) {
 lean::cnstr_set(x_60, 0, lean::box(0));
 lean::cnstr_set(x_60, 1, lean::box(0));
 x_65 = x_60;
} else {
 lean::inc(x_61);
 lean::inc(x_63);
 lean::dec(x_60);
 x_65 = lean::box(0);
}
if (lean::obj_tag(x_61) == 0)
{
obj* x_69; obj* x_70; 
lean::dec(x_57);
lean::dec(x_52);
lean::dec(x_56);
x_69 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_54, x_61);
if (lean::is_scalar(x_65)) {
 x_70 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_70 = x_65;
}
lean::cnstr_set(x_70, 0, x_69);
lean::cnstr_set(x_70, 1, x_63);
return x_70;
}
else
{
obj* x_71; uint8 x_73; 
x_71 = lean::cnstr_get(x_61, 0);
lean::inc(x_71);
x_73 = lean::cnstr_get_scalar<uint8>(x_61, sizeof(void*)*1);
if (x_73 == 0)
{
obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; 
lean::dec(x_61);
x_75 = l_list_reverse___rarg(x_57);
x_76 = l_lean_parser_no__kind;
x_77 = l_lean_parser_syntax_mk__node(x_76, x_75);
x_78 = lean::cnstr_get(x_71, 2);
lean::inc(x_78);
lean::dec(x_71);
x_81 = l_mjoin___rarg___closed__1;
x_82 = lean::alloc_closure(reinterpret_cast<void*>(l_function_comp___rarg), 3, 2);
lean::closure_set(x_82, 0, x_78);
lean::closure_set(x_82, 1, x_81);
x_83 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_83, 0, x_82);
if (lean::is_scalar(x_56)) {
 x_84 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_84 = x_56;
}
lean::cnstr_set(x_84, 0, x_77);
lean::cnstr_set(x_84, 1, x_52);
lean::cnstr_set(x_84, 2, x_83);
x_85 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_54, x_84);
if (lean::is_scalar(x_65)) {
 x_86 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_86 = x_65;
}
lean::cnstr_set(x_86, 0, x_85);
lean::cnstr_set(x_86, 1, x_63);
return x_86;
}
else
{
obj* x_91; obj* x_92; 
lean::dec(x_57);
lean::dec(x_71);
lean::dec(x_52);
lean::dec(x_56);
x_91 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_54, x_61);
if (lean::is_scalar(x_65)) {
 x_92 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_92 = x_65;
}
lean::cnstr_set(x_92, 0, x_91);
lean::cnstr_set(x_92, 1, x_63);
return x_92;
}
}
}
else
{
obj* x_97; uint8 x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; 
lean::dec(x_9);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_0);
x_97 = lean::cnstr_get(x_11, 0);
x_99 = lean::cnstr_get_scalar<uint8>(x_11, sizeof(void*)*1);
if (lean::is_exclusive(x_11)) {
 x_100 = x_11;
} else {
 lean::inc(x_97);
 lean::dec(x_11);
 x_100 = lean::box(0);
}
if (lean::is_scalar(x_100)) {
 x_101 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_101 = x_100;
}
lean::cnstr_set(x_101, 0, x_97);
lean::cnstr_set_scalar(x_101, sizeof(void*)*1, x_99);
x_102 = x_101;
x_103 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_103, 0, x_102);
lean::cnstr_set(x_103, 1, x_12);
return x_103;
}
}
}
else
{
obj* x_107; obj* x_108; obj* x_109; obj* x_110; 
lean::dec(x_1);
lean::dec(x_0);
lean::dec(x_2);
x_107 = lean::box(0);
x_108 = l___private_init_lean_parser_combinators_1__many1__aux___main___rarg___closed__1;
x_109 = l_mjoin___rarg___closed__1;
x_110 = l_lean_parser_monad__parsec_error___at___private_init_lean_parser_token_1__finish__comment__block__aux___main___spec__1___rarg(x_108, x_109, x_107, x_107, x_3, x_4, x_5);
return x_110;
}
}
}
obj* l_lean_parser_combinators_many1___at_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_4 = lean::string_iterator_remaining(x_2);
x_5 = lean::box(0);
x_6 = lean::mk_nat_obj(1u);
x_7 = lean::nat_add(x_4, x_6);
lean::dec(x_4);
x_9 = l___private_init_lean_parser_combinators_1__many1__aux___main___at_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens___spec__2(x_0, x_5, x_7, x_1, x_2, x_3);
x_10 = lean::cnstr_get(x_9, 0);
x_12 = lean::cnstr_get(x_9, 1);
if (lean::is_exclusive(x_9)) {
 x_14 = x_9;
} else {
 lean::inc(x_10);
 lean::inc(x_12);
 lean::dec(x_9);
 x_14 = lean::box(0);
}
x_15 = l_lean_parser_finish__comment__block___closed__2;
x_16 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_15, x_10);
if (lean::is_scalar(x_14)) {
 x_17 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_17 = x_14;
}
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_12);
return x_17;
}
}
obj* _init_l_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_0 = lean::mk_string(".{");
x_1 = lean::mk_nat_obj(0u);
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = l_lean_parser_level_parser_lean_parser_has__tokens___closed__1;
x_4 = l_lean_parser_tokens___rarg(x_3);
x_5 = l_lean_parser_tokens___rarg(x_4);
x_6 = lean::mk_string("}");
x_7 = l_lean_parser_symbol_tokens___rarg(x_6, x_1);
x_8 = lean::box(0);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_7, x_8);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_5, x_9);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_2, x_10);
x_12 = l_lean_parser_tokens___rarg(x_11);
return x_12;
}
}
obj* _init_l_lean_parser_ident__univ__spec_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_0 = lean::mk_string(".{");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol_lean_parser_has__tokens___spec__1), 6, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_level_parser), 5, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_level__parser_run), 4, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many1___at_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens___spec__1), 4, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::mk_string("}");
x_10 = l_string_trim(x_9);
lean::inc(x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_12, 0, x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol_lean_parser_has__tokens___spec__1), 6, 3);
lean::closure_set(x_13, 0, x_10);
lean::closure_set(x_13, 1, x_4);
lean::closure_set(x_13, 2, x_12);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_8);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_5);
lean::cnstr_set(x_17, 1, x_16);
x_18 = l_lean_parser_basic__parser__m_monad;
x_19 = l_lean_parser_basic__parser__m_monad__except;
x_20 = l_lean_parser_basic__parser__m_lean_parser_monad__parsec;
x_21 = l_lean_parser_basic__parser__m_alternative;
x_22 = l_lean_parser_ident__univ__spec;
x_23 = l_lean_parser_ident__univ__spec_has__view;
x_24 = l_lean_parser_combinators_node_view___rarg(x_18, x_19, x_20, x_21, x_22, x_17, x_23);
return x_24;
}
}
obj* _init_l_lean_parser_ident__univ__spec_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_0 = lean::mk_string(".{");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol_lean_parser_has__tokens___spec__1), 6, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_level_parser), 5, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_level__parser_run), 4, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many1___at_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens___spec__1), 4, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::mk_string("}");
x_10 = l_string_trim(x_9);
lean::inc(x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_12, 0, x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol_lean_parser_has__tokens___spec__1), 6, 3);
lean::closure_set(x_13, 0, x_10);
lean::closure_set(x_13, 1, x_4);
lean::closure_set(x_13, 2, x_12);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_8);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_5);
lean::cnstr_set(x_17, 1, x_16);
return x_17;
}
}
obj* l_lean_parser_ident__univ__spec_parser(obj* x_0, obj* x_1, obj* x_2) {
_start:
{
obj* x_3; obj* x_4; obj* x_5; 
x_3 = l_lean_parser_ident__univ__spec;
x_4 = l_lean_parser_ident__univ__spec_parser___closed__1;
x_5 = l_lean_parser_combinators_node___at_lean_parser_detail__ident__part_parser_lean_parser_has__tokens___spec__15(x_3, x_4, x_0, x_1, x_2);
return x_5;
}
}
obj* _init_l_lean_parser_ident__univs() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("ident_univs");
x_6 = lean_name_mk_string(x_4, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
x_4 = lean_name_mk_string(x_0, x_1);
x_5 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_3);
lean::cnstr_set(x_5, 2, x_4);
lean::cnstr_set(x_5, 3, x_0);
lean::cnstr_set(x_5, 4, x_0);
x_6 = l_lean_parser_ident__univ__spec_has__view;
x_7 = lean::cnstr_get(x_6, 0);
lean::inc(x_7);
lean::dec(x_6);
x_10 = lean::box(3);
x_11 = lean::apply_1(x_7, x_10);
x_12 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_12, 0, x_11);
x_13 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_13, 0, x_5);
lean::cnstr_set(x_13, 1, x_12);
return x_13;
}
}
obj* _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
x_4 = lean_name_mk_string(x_0, x_1);
x_5 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_3);
lean::cnstr_set(x_5, 2, x_4);
lean::cnstr_set(x_5, 3, x_0);
lean::cnstr_set(x_5, 4, x_0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_0);
return x_6;
}
}
obj* _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2;
return x_10;
}
else
{
obj* x_11; obj* x_13; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_6, 1);
lean::inc(x_13);
lean::dec(x_6);
if (lean::obj_tag(x_13) == 0)
{
obj* x_16; obj* x_17; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_16 = l_lean_parser_ident__univ__spec_has__view;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
lean::dec(x_16);
x_20 = lean::apply_1(x_17, x_11);
if (lean::is_scalar(x_5)) {
 x_21 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_21 = x_5;
}
lean::cnstr_set(x_21, 0, x_20);
x_22 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_21);
return x_23;
}
else
{
obj* x_27; 
lean::dec(x_11);
lean::dec(x_13);
lean::dec(x_5);
x_27 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1;
return x_27;
}
}
}
}
}
obj* _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_lean_parser_ident__univ__spec_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__5() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 1:
{
obj* x_7; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_10; obj* x_11; 
x_10 = lean::box(3);
x_11 = l_lean_parser_syntax_as__node___main(x_10);
if (lean::obj_tag(x_11) == 0)
{
obj* x_12; obj* x_13; 
x_12 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
x_13 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_13, 0, x_7);
lean::cnstr_set(x_13, 1, x_12);
return x_13;
}
else
{
obj* x_14; obj* x_16; obj* x_17; 
x_14 = lean::cnstr_get(x_11, 0);
if (lean::is_exclusive(x_11)) {
 lean::cnstr_set(x_11, 0, lean::box(0));
 x_16 = x_11;
} else {
 lean::inc(x_14);
 lean::dec(x_11);
 x_16 = lean::box(0);
}
x_17 = lean::cnstr_get(x_14, 1);
lean::inc(x_17);
lean::dec(x_14);
if (lean::obj_tag(x_17) == 0)
{
obj* x_21; obj* x_22; 
lean::dec(x_16);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_22, 0, x_7);
lean::cnstr_set(x_22, 1, x_21);
return x_22;
}
else
{
obj* x_23; obj* x_25; 
x_23 = lean::cnstr_get(x_17, 0);
lean::inc(x_23);
x_25 = lean::cnstr_get(x_17, 1);
lean::inc(x_25);
lean::dec(x_17);
if (lean::obj_tag(x_25) == 0)
{
obj* x_28; obj* x_29; obj* x_32; obj* x_33; obj* x_34; 
x_28 = l_lean_parser_ident__univ__spec_has__view;
x_29 = lean::cnstr_get(x_28, 0);
lean::inc(x_29);
lean::dec(x_28);
x_32 = lean::apply_1(x_29, x_23);
if (lean::is_scalar(x_16)) {
 x_33 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_33 = x_16;
}
lean::cnstr_set(x_33, 0, x_32);
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_7);
lean::cnstr_set(x_34, 1, x_33);
return x_34;
}
else
{
obj* x_38; obj* x_39; 
lean::dec(x_23);
lean::dec(x_16);
lean::dec(x_25);
x_38 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
x_39 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_39, 0, x_7);
lean::cnstr_set(x_39, 1, x_38);
return x_39;
}
}
}
}
else
{
obj* x_40; obj* x_43; 
x_40 = lean::cnstr_get(x_0, 0);
lean::inc(x_40);
lean::dec(x_0);
x_43 = l_lean_parser_syntax_as__node___main(x_40);
if (lean::obj_tag(x_43) == 0)
{
obj* x_44; obj* x_45; 
x_44 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_7);
lean::cnstr_set(x_45, 1, x_44);
return x_45;
}
else
{
obj* x_46; obj* x_48; obj* x_49; 
x_46 = lean::cnstr_get(x_43, 0);
if (lean::is_exclusive(x_43)) {
 lean::cnstr_set(x_43, 0, lean::box(0));
 x_48 = x_43;
} else {
 lean::inc(x_46);
 lean::dec(x_43);
 x_48 = lean::box(0);
}
x_49 = lean::cnstr_get(x_46, 1);
lean::inc(x_49);
lean::dec(x_46);
if (lean::obj_tag(x_49) == 0)
{
obj* x_53; obj* x_54; 
lean::dec(x_48);
x_53 = lean::box(0);
x_54 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_54, 0, x_7);
lean::cnstr_set(x_54, 1, x_53);
return x_54;
}
else
{
obj* x_55; obj* x_57; 
x_55 = lean::cnstr_get(x_49, 0);
lean::inc(x_55);
x_57 = lean::cnstr_get(x_49, 1);
lean::inc(x_57);
lean::dec(x_49);
if (lean::obj_tag(x_57) == 0)
{
obj* x_60; obj* x_61; obj* x_64; obj* x_65; obj* x_66; 
x_60 = l_lean_parser_ident__univ__spec_has__view;
x_61 = lean::cnstr_get(x_60, 0);
lean::inc(x_61);
lean::dec(x_60);
x_64 = lean::apply_1(x_61, x_55);
if (lean::is_scalar(x_48)) {
 x_65 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_65 = x_48;
}
lean::cnstr_set(x_65, 0, x_64);
x_66 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_66, 0, x_7);
lean::cnstr_set(x_66, 1, x_65);
return x_66;
}
else
{
obj* x_70; obj* x_71; 
lean::dec(x_48);
lean::dec(x_55);
lean::dec(x_57);
x_70 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
x_71 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_71, 0, x_7);
lean::cnstr_set(x_71, 1, x_70);
return x_71;
}
}
}
}
}
case 3:
{
obj* x_72; 
x_72 = lean::box(0);
x_5 = x_72;
goto lbl_6;
}
default:
{
obj* x_74; 
lean::dec(x_1);
x_74 = lean::box(0);
x_5 = x_74;
goto lbl_6;
}
}
lbl_6:
{
lean::dec(x_5);
if (lean::obj_tag(x_0) == 0)
{
obj* x_76; 
x_76 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__3;
return x_76;
}
else
{
obj* x_77; obj* x_80; 
x_77 = lean::cnstr_get(x_0, 0);
lean::inc(x_77);
lean::dec(x_0);
x_80 = l_lean_parser_syntax_as__node___main(x_77);
if (lean::obj_tag(x_80) == 0)
{
obj* x_81; 
x_81 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1;
return x_81;
}
else
{
obj* x_82; obj* x_84; obj* x_85; 
x_82 = lean::cnstr_get(x_80, 0);
if (lean::is_exclusive(x_80)) {
 lean::cnstr_set(x_80, 0, lean::box(0));
 x_84 = x_80;
} else {
 lean::inc(x_82);
 lean::dec(x_80);
 x_84 = lean::box(0);
}
x_85 = lean::cnstr_get(x_82, 1);
lean::inc(x_85);
lean::dec(x_82);
if (lean::obj_tag(x_85) == 0)
{
obj* x_89; 
lean::dec(x_84);
x_89 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2;
return x_89;
}
else
{
obj* x_90; obj* x_92; 
x_90 = lean::cnstr_get(x_85, 0);
lean::inc(x_90);
x_92 = lean::cnstr_get(x_85, 1);
lean::inc(x_92);
lean::dec(x_85);
if (lean::obj_tag(x_92) == 0)
{
obj* x_95; obj* x_96; obj* x_99; obj* x_100; obj* x_101; obj* x_102; 
x_95 = l_lean_parser_ident__univ__spec_has__view;
x_96 = lean::cnstr_get(x_95, 0);
lean::inc(x_96);
lean::dec(x_95);
x_99 = lean::apply_1(x_96, x_90);
if (lean::is_scalar(x_84)) {
 x_100 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_100 = x_84;
}
lean::cnstr_set(x_100, 0, x_99);
x_101 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_102 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_102, 0, x_101);
lean::cnstr_set(x_102, 1, x_100);
return x_102;
}
else
{
obj* x_106; 
lean::dec(x_90);
lean::dec(x_92);
lean::dec(x_84);
x_106 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1;
return x_106;
}
}
}
}
}
}
}
}
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__5;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 1:
{
obj* x_20; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_23; obj* x_24; 
x_23 = lean::box(3);
x_24 = l_lean_parser_syntax_as__node___main(x_23);
if (lean::obj_tag(x_24) == 0)
{
obj* x_25; obj* x_26; 
x_25 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_20);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_29; obj* x_30; 
x_27 = lean::cnstr_get(x_24, 0);
if (lean::is_exclusive(x_24)) {
 lean::cnstr_set(x_24, 0, lean::box(0));
 x_29 = x_24;
} else {
 lean::inc(x_27);
 lean::dec(x_24);
 x_29 = lean::box(0);
}
x_30 = lean::cnstr_get(x_27, 1);
lean::inc(x_30);
lean::dec(x_27);
if (lean::obj_tag(x_30) == 0)
{
obj* x_34; obj* x_35; 
lean::dec(x_29);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_20);
lean::cnstr_set(x_35, 1, x_34);
return x_35;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_30, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_30, 1);
lean::inc(x_38);
lean::dec(x_30);
if (lean::obj_tag(x_38) == 0)
{
obj* x_41; obj* x_42; obj* x_45; obj* x_46; obj* x_47; 
x_41 = l_lean_parser_ident__univ__spec_has__view;
x_42 = lean::cnstr_get(x_41, 0);
lean::inc(x_42);
lean::dec(x_41);
x_45 = lean::apply_1(x_42, x_36);
if (lean::is_scalar(x_29)) {
 x_46 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_46 = x_29;
}
lean::cnstr_set(x_46, 0, x_45);
x_47 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_47, 0, x_20);
lean::cnstr_set(x_47, 1, x_46);
return x_47;
}
else
{
obj* x_51; obj* x_52; 
lean::dec(x_38);
lean::dec(x_36);
lean::dec(x_29);
x_51 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
x_52 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_52, 0, x_20);
lean::cnstr_set(x_52, 1, x_51);
return x_52;
}
}
}
}
else
{
obj* x_53; obj* x_56; 
x_53 = lean::cnstr_get(x_1, 0);
lean::inc(x_53);
lean::dec(x_1);
x_56 = l_lean_parser_syntax_as__node___main(x_53);
if (lean::obj_tag(x_56) == 0)
{
obj* x_57; obj* x_58; 
x_57 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
x_58 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_58, 0, x_20);
lean::cnstr_set(x_58, 1, x_57);
return x_58;
}
else
{
obj* x_59; obj* x_61; obj* x_62; 
x_59 = lean::cnstr_get(x_56, 0);
if (lean::is_exclusive(x_56)) {
 lean::cnstr_set(x_56, 0, lean::box(0));
 x_61 = x_56;
} else {
 lean::inc(x_59);
 lean::dec(x_56);
 x_61 = lean::box(0);
}
x_62 = lean::cnstr_get(x_59, 1);
lean::inc(x_62);
lean::dec(x_59);
if (lean::obj_tag(x_62) == 0)
{
obj* x_66; obj* x_67; 
lean::dec(x_61);
x_66 = lean::box(0);
x_67 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_67, 0, x_20);
lean::cnstr_set(x_67, 1, x_66);
return x_67;
}
else
{
obj* x_68; obj* x_70; 
x_68 = lean::cnstr_get(x_62, 0);
lean::inc(x_68);
x_70 = lean::cnstr_get(x_62, 1);
lean::inc(x_70);
lean::dec(x_62);
if (lean::obj_tag(x_70) == 0)
{
obj* x_73; obj* x_74; obj* x_77; obj* x_78; obj* x_79; 
x_73 = l_lean_parser_ident__univ__spec_has__view;
x_74 = lean::cnstr_get(x_73, 0);
lean::inc(x_74);
lean::dec(x_73);
x_77 = lean::apply_1(x_74, x_68);
if (lean::is_scalar(x_61)) {
 x_78 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_78 = x_61;
}
lean::cnstr_set(x_78, 0, x_77);
x_79 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_79, 0, x_20);
lean::cnstr_set(x_79, 1, x_78);
return x_79;
}
else
{
obj* x_83; obj* x_84; 
lean::dec(x_61);
lean::dec(x_70);
lean::dec(x_68);
x_83 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4;
x_84 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_84, 0, x_20);
lean::cnstr_set(x_84, 1, x_83);
return x_84;
}
}
}
}
}
case 3:
{
obj* x_85; 
x_85 = lean::box(0);
x_18 = x_85;
goto lbl_19;
}
default:
{
obj* x_87; 
lean::dec(x_2);
x_87 = lean::box(0);
x_18 = x_87;
goto lbl_19;
}
}
lbl_19:
{
lean::dec(x_18);
if (lean::obj_tag(x_1) == 0)
{
obj* x_89; 
x_89 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__3;
return x_89;
}
else
{
obj* x_90; obj* x_93; 
x_90 = lean::cnstr_get(x_1, 0);
lean::inc(x_90);
lean::dec(x_1);
x_93 = l_lean_parser_syntax_as__node___main(x_90);
if (lean::obj_tag(x_93) == 0)
{
obj* x_94; 
x_94 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1;
return x_94;
}
else
{
obj* x_95; obj* x_97; obj* x_98; 
x_95 = lean::cnstr_get(x_93, 0);
if (lean::is_exclusive(x_93)) {
 lean::cnstr_set(x_93, 0, lean::box(0));
 x_97 = x_93;
} else {
 lean::inc(x_95);
 lean::dec(x_93);
 x_97 = lean::box(0);
}
x_98 = lean::cnstr_get(x_95, 1);
lean::inc(x_98);
lean::dec(x_95);
if (lean::obj_tag(x_98) == 0)
{
obj* x_102; 
lean::dec(x_97);
x_102 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2;
return x_102;
}
else
{
obj* x_103; obj* x_105; 
x_103 = lean::cnstr_get(x_98, 0);
lean::inc(x_103);
x_105 = lean::cnstr_get(x_98, 1);
lean::inc(x_105);
lean::dec(x_98);
if (lean::obj_tag(x_105) == 0)
{
obj* x_108; obj* x_109; obj* x_112; obj* x_113; obj* x_114; obj* x_115; 
x_108 = l_lean_parser_ident__univ__spec_has__view;
x_109 = lean::cnstr_get(x_108, 0);
lean::inc(x_109);
lean::dec(x_108);
x_112 = lean::apply_1(x_109, x_103);
if (lean::is_scalar(x_97)) {
 x_113 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_113 = x_97;
}
lean::cnstr_set(x_113, 0, x_112);
x_114 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_115 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_115, 0, x_114);
lean::cnstr_set(x_115, 1, x_113);
return x_115;
}
else
{
obj* x_119; 
lean::dec(x_105);
lean::dec(x_97);
lean::dec(x_103);
x_119 = l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1;
return x_119;
}
}
}
}
}
}
}
}
obj* l_lean_parser_ident__univs_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_1);
if (lean::obj_tag(x_3) == 0)
{
obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_7 = l_lean_parser_detail__ident_has__view_x_27___lambda__2___closed__1;
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_lean_parser_ident__univs;
x_10 = l_lean_parser_syntax_mk__node(x_9, x_8);
return x_10;
}
else
{
obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_11 = lean::cnstr_get(x_3, 0);
lean::inc(x_11);
lean::dec(x_3);
x_14 = lean::box(0);
x_15 = l_lean_parser_ident__univ__spec_has__view;
x_16 = lean::cnstr_get(x_15, 1);
lean::inc(x_16);
lean::dec(x_15);
x_19 = lean::apply_1(x_16, x_11);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_14);
x_21 = l_lean_parser_no__kind;
x_22 = l_lean_parser_syntax_mk__node(x_21, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_14);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_6);
lean::cnstr_set(x_24, 1, x_23);
x_25 = l_lean_parser_ident__univs;
x_26 = l_lean_parser_syntax_mk__node(x_25, x_24);
return x_26;
}
}
}
obj* _init_l_lean_parser_ident__univs_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univs_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univs_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_ident__univs_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_ident__univs_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_ident__univs_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::box(0);
x_1 = l_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens;
x_2 = l_lean_parser_tokens___rarg(x_1);
x_3 = l_lean_parser_tokens___rarg(x_2);
x_4 = l_lean_parser_list_cons_tokens___rarg(x_3, x_0);
x_5 = l_lean_parser_list_cons_tokens___rarg(x_0, x_4);
x_6 = l_lean_parser_tokens___rarg(x_5);
return x_6;
}
}
obj* l_lean_parser_ident__univs_parser_lean_parser_has__view___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
lean::dec(x_1);
x_5 = l_lean_parser_ident__univ__spec;
x_6 = l_lean_parser_ident__univ__spec_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_detail__ident__part_parser_lean_parser_has__tokens___spec__15(x_5, x_6, x_0, x_2, x_3);
return x_7;
}
}
obj* _init_l_lean_parser_ident__univs_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univs_parser_lean_parser_has__view___lambda__1), 4, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__3___rarg), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::box(0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = l_lean_parser_term__parser__m_monad;
x_8 = l_lean_parser_term__parser__m_monad__except;
x_9 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_10 = l_lean_parser_term__parser__m_alternative;
x_11 = l_lean_parser_ident__univs;
x_12 = l_lean_parser_ident__univs_has__view;
x_13 = l_lean_parser_combinators_node_view___rarg(x_7, x_8, x_9, x_10, x_11, x_6, x_12);
return x_13;
}
}
obj* _init_l_lean_parser_ident__univs_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univs_parser_lean_parser_has__view___lambda__1), 4, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__3___rarg), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::box(0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
return x_6;
}
}
obj* l_lean_parser_ident__univs_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_ident__univs;
x_6 = l_lean_parser_ident__univs_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* l_lean_parser_term_get__leading(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_9; obj* x_10; obj* x_11; 
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_1);
x_9 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_10 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_10, 0, x_0);
lean::cnstr_set(x_10, 1, x_4);
lean::cnstr_set(x_10, 2, x_9);
x_11 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_11, 0, x_10);
lean::cnstr_set(x_11, 1, x_5);
return x_11;
}
}
obj* _init_l_lean_parser_term_lean_parser_has__tokens() {
_start:
{
obj* x_0; 
x_0 = lean::box(0);
return x_0;
}
}
obj* _init_l_lean_parser_term_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_id___rarg), 1, 0);
lean::inc(x_0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_0);
return x_2;
}
}
obj* _init_l_lean_parser_term_tuple() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("tuple");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
if (lean::obj_tag(x_4) == 0)
{
obj* x_7; obj* x_8; obj* x_9; 
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_2);
lean::cnstr_set(x_8, 1, x_7);
if (lean::is_scalar(x_6)) {
 x_9 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_9 = x_6;
}
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
return x_9;
}
else
{
obj* x_10; obj* x_12; obj* x_15; 
x_10 = lean::cnstr_get(x_4, 0);
lean::inc(x_10);
x_12 = lean::cnstr_get(x_4, 1);
lean::inc(x_12);
lean::dec(x_4);
x_15 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_12);
switch (lean::obj_tag(x_10)) {
case 0:
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_16 = lean::cnstr_get(x_10, 0);
lean::inc(x_16);
lean::dec(x_10);
x_19 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_19, 0, x_16);
x_20 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_2);
lean::cnstr_set(x_21, 1, x_20);
if (lean::is_scalar(x_6)) {
 x_22 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_22 = x_6;
}
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_15);
return x_22;
}
case 3:
{
obj* x_23; obj* x_24; obj* x_25; 
x_23 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_2);
lean::cnstr_set(x_24, 1, x_23);
if (lean::is_scalar(x_6)) {
 x_25 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_25 = x_6;
}
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_15);
return x_25;
}
default:
{
obj* x_27; obj* x_28; obj* x_29; 
lean::dec(x_10);
x_27 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_28 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_28, 0, x_2);
lean::cnstr_set(x_28, 1, x_27);
if (lean::is_scalar(x_6)) {
 x_29 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_29 = x_6;
}
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_15);
return x_29;
}
}
}
}
}
}
obj* l_list_map___main___at_lean_parser_term_tuple_has__view_x_27___spec__2(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_12; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
x_7 = lean::cnstr_get(x_2, 0);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_2, 1);
lean::inc(x_9);
lean::dec(x_2);
x_12 = l_list_map___main___at_lean_parser_term_tuple_has__view_x_27___spec__2(x_4);
if (lean::obj_tag(x_9) == 0)
{
obj* x_13; obj* x_14; obj* x_15; 
x_13 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_14 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_14 = x_6;
}
lean::cnstr_set(x_14, 0, x_7);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_12);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_16 = lean::cnstr_get(x_9, 0);
lean::inc(x_16);
lean::dec(x_9);
x_19 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_20 = l_option_map___rarg(x_19, x_16);
x_21 = lean::box(3);
x_22 = l_option_get__or__else___main___rarg(x_20, x_21);
x_23 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_24 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_24 = x_6;
}
lean::cnstr_set(x_24, 0, x_22);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_7);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_12);
return x_26;
}
}
}
}
obj* _init_l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_3, 0, x_2);
lean::cnstr_set(x_3, 1, x_0);
return x_3;
}
}
obj* _init_l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_2; 
x_2 = lean::box(0);
x_0 = x_2;
goto lbl_1;
lbl_1:
{
obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = l_lean_parser_syntax_as__node___main(x_3);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; obj* x_6; 
x_5 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_0);
lean::cnstr_set(x_6, 1, x_5);
return x_6;
}
else
{
obj* x_7; obj* x_10; obj* x_13; obj* x_14; 
x_7 = lean::cnstr_get(x_4, 0);
lean::inc(x_7);
lean::dec(x_4);
x_10 = lean::cnstr_get(x_7, 1);
lean::inc(x_10);
lean::dec(x_7);
x_13 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_10);
x_14 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_14, 0, x_0);
lean::cnstr_set(x_14, 1, x_13);
return x_14;
}
}
}
}
obj* _init_l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_7; obj* x_8; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_10; obj* x_13; 
x_10 = lean::cnstr_get(x_1, 0);
lean::inc(x_10);
lean::dec(x_1);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_10);
if (lean::obj_tag(x_0) == 0)
{
x_5 = x_13;
goto lbl_6;
}
else
{
obj* x_14; 
x_14 = lean::cnstr_get(x_0, 0);
lean::inc(x_14);
lean::dec(x_0);
x_7 = x_13;
x_8 = x_14;
goto lbl_9;
}
}
case 3:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2;
return x_17;
}
else
{
obj* x_18; obj* x_21; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
lean::dec(x_0);
x_21 = lean::box(0);
x_7 = x_21;
x_8 = x_18;
goto lbl_9;
}
}
default:
{
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_23; 
x_23 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_0, 0);
lean::inc(x_24);
lean::dec(x_0);
x_27 = lean::box(0);
x_7 = x_27;
x_8 = x_24;
goto lbl_9;
}
}
}
lbl_6:
{
obj* x_28; obj* x_29; 
x_28 = lean::box(3);
x_29 = l_lean_parser_syntax_as__node___main(x_28);
if (lean::obj_tag(x_29) == 0)
{
obj* x_30; obj* x_31; 
x_30 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_5);
lean::cnstr_set(x_31, 1, x_30);
return x_31;
}
else
{
obj* x_32; obj* x_35; obj* x_38; obj* x_39; 
x_32 = lean::cnstr_get(x_29, 0);
lean::inc(x_32);
lean::dec(x_29);
x_35 = lean::cnstr_get(x_32, 1);
lean::inc(x_35);
lean::dec(x_32);
x_38 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_35);
x_39 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_39, 0, x_5);
lean::cnstr_set(x_39, 1, x_38);
return x_39;
}
}
lbl_9:
{
obj* x_40; 
x_40 = l_lean_parser_syntax_as__node___main(x_8);
if (lean::obj_tag(x_40) == 0)
{
obj* x_41; obj* x_42; 
x_41 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_42 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_42, 0, x_7);
lean::cnstr_set(x_42, 1, x_41);
return x_42;
}
else
{
obj* x_43; obj* x_46; obj* x_49; obj* x_50; 
x_43 = lean::cnstr_get(x_40, 0);
lean::inc(x_43);
lean::dec(x_40);
x_46 = lean::cnstr_get(x_43, 1);
lean::inc(x_46);
lean::dec(x_43);
x_49 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_46);
x_50 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_50, 0, x_7);
lean::cnstr_set(x_50, 1, x_49);
return x_50;
}
}
}
}
}
obj* l_lean_parser_term_tuple_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__3;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; obj* x_20; obj* x_21; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_23; obj* x_26; 
x_23 = lean::cnstr_get(x_2, 0);
lean::inc(x_23);
lean::dec(x_2);
x_26 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_26, 0, x_23);
if (lean::obj_tag(x_1) == 0)
{
x_18 = x_26;
goto lbl_19;
}
else
{
obj* x_27; 
x_27 = lean::cnstr_get(x_1, 0);
lean::inc(x_27);
lean::dec(x_1);
x_20 = x_26;
x_21 = x_27;
goto lbl_22;
}
}
case 3:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2;
return x_30;
}
else
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
lean::dec(x_1);
x_34 = lean::box(0);
x_20 = x_34;
x_21 = x_31;
goto lbl_22;
}
}
default:
{
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_36; 
x_36 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2;
return x_36;
}
else
{
obj* x_37; obj* x_40; 
x_37 = lean::cnstr_get(x_1, 0);
lean::inc(x_37);
lean::dec(x_1);
x_40 = lean::box(0);
x_20 = x_40;
x_21 = x_37;
goto lbl_22;
}
}
}
lbl_19:
{
obj* x_41; obj* x_42; 
x_41 = lean::box(3);
x_42 = l_lean_parser_syntax_as__node___main(x_41);
if (lean::obj_tag(x_42) == 0)
{
obj* x_43; obj* x_44; 
x_43 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_44 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_44, 0, x_18);
lean::cnstr_set(x_44, 1, x_43);
return x_44;
}
else
{
obj* x_45; obj* x_48; obj* x_51; obj* x_52; 
x_45 = lean::cnstr_get(x_42, 0);
lean::inc(x_45);
lean::dec(x_42);
x_48 = lean::cnstr_get(x_45, 1);
lean::inc(x_48);
lean::dec(x_45);
x_51 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_48);
x_52 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_52, 0, x_18);
lean::cnstr_set(x_52, 1, x_51);
return x_52;
}
}
lbl_22:
{
obj* x_53; 
x_53 = l_lean_parser_syntax_as__node___main(x_21);
if (lean::obj_tag(x_53) == 0)
{
obj* x_54; obj* x_55; 
x_54 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_20);
lean::cnstr_set(x_55, 1, x_54);
return x_55;
}
else
{
obj* x_56; obj* x_59; obj* x_62; obj* x_63; 
x_56 = lean::cnstr_get(x_53, 0);
lean::inc(x_56);
lean::dec(x_53);
x_59 = lean::cnstr_get(x_56, 1);
lean::inc(x_59);
lean::dec(x_56);
x_62 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_59);
x_63 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_63, 0, x_20);
lean::cnstr_set(x_63, 1, x_62);
return x_63;
}
}
}
}
}
obj* l_lean_parser_term_tuple_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_7 = l_option_map___rarg(x_6, x_1);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
x_10 = l_list_map___main___at_lean_parser_term_tuple_has__view_x_27___spec__2(x_3);
x_11 = l_list_join___main___rarg(x_10);
x_12 = l_lean_parser_no__kind;
x_13 = l_lean_parser_syntax_mk__node(x_12, x_11);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_9);
lean::cnstr_set(x_16, 1, x_15);
x_17 = l_lean_parser_term_tuple;
x_18 = l_lean_parser_syntax_mk__node(x_17, x_16);
return x_18;
}
}
obj* _init_l_lean_parser_term_tuple_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_tuple_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_tuple_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_tuple_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_tuple_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_typed() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("typed");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_typed_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
lean::dec(x_5);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
x_10 = l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1;
return x_10;
}
else
{
obj* x_11; obj* x_14; obj* x_15; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
lean::dec(x_6);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_11);
return x_15;
}
}
else
{
obj* x_16; obj* x_18; 
x_16 = lean::cnstr_get(x_6, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_6, 1);
lean::inc(x_18);
lean::dec(x_6);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_21; obj* x_24; 
x_21 = lean::cnstr_get(x_16, 0);
lean::inc(x_21);
lean::dec(x_16);
if (lean::is_scalar(x_5)) {
 x_24 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_24 = x_5;
}
lean::cnstr_set(x_24, 0, x_21);
if (lean::obj_tag(x_18) == 0)
{
obj* x_25; obj* x_26; 
x_25 = lean::box(3);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_30; 
x_27 = lean::cnstr_get(x_18, 0);
lean::inc(x_27);
lean::dec(x_18);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_24);
lean::cnstr_set(x_30, 1, x_27);
return x_30;
}
}
case 3:
{
lean::dec(x_5);
if (lean::obj_tag(x_18) == 0)
{
obj* x_32; 
x_32 = l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1;
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_18, 0);
lean::inc(x_33);
lean::dec(x_18);
x_36 = lean::box(0);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_33);
return x_37;
}
}
default:
{
lean::dec(x_5);
lean::dec(x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_40; 
x_40 = l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1;
return x_40;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_18, 0);
lean::inc(x_41);
lean::dec(x_18);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
}
}
}
}
}
obj* l_lean_parser_term_typed_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_7 = l_option_map___rarg(x_6, x_1);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_3);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_9);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_lean_parser_term_typed;
x_14 = l_lean_parser_syntax_mk__node(x_13, x_12);
return x_14;
}
}
obj* _init_l_lean_parser_term_typed_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_typed_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_typed_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_typed_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_typed_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_paren__special() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("paren_special");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; obj* x_9; obj* x_12; obj* x_13; 
x_8 = l_lean_parser_term_typed_has__view;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_0);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
else
{
obj* x_14; obj* x_15; obj* x_18; obj* x_19; 
x_14 = l_lean_parser_term_tuple_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_0);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
}
}
obj* _init_l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("paren_special");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_paren__special_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__2;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; obj* x_69; obj* x_72; obj* x_73; 
x_68 = l_lean_parser_term_typed_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_1);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
else
{
obj* x_74; obj* x_75; obj* x_78; obj* x_79; 
x_74 = l_lean_parser_term_tuple_has__view;
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
lean::dec(x_74);
x_78 = lean::apply_1(x_75, x_1);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
}
}
obj* l_lean_parser_term_paren__special_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_tuple_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_lean_parser_term_paren__special;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_lean_parser_term_typed_has__view;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_26 = l_lean_parser_syntax_mk__node(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_lean_parser_term_paren__special;
x_29 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_lean_parser_term_paren__special_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_paren__special_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_paren__special_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_paren__special_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_paren__special_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_paren__content() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("paren_content");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_lean_parser_term_paren__special_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_5; obj* x_6; 
x_5 = lean::box(3);
x_6 = l_lean_parser_syntax_as__node___main(x_5);
if (lean::obj_tag(x_6) == 0)
{
obj* x_7; obj* x_8; 
x_7 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_1);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
else
{
obj* x_9; obj* x_11; obj* x_12; 
x_9 = lean::cnstr_get(x_6, 0);
if (lean::is_exclusive(x_6)) {
 lean::cnstr_set(x_6, 0, lean::box(0));
 x_11 = x_6;
} else {
 lean::inc(x_9);
 lean::dec(x_6);
 x_11 = lean::box(0);
}
x_12 = lean::cnstr_get(x_9, 1);
lean::inc(x_12);
lean::dec(x_9);
if (lean::obj_tag(x_12) == 0)
{
obj* x_16; obj* x_17; 
lean::dec(x_11);
x_16 = lean::box(0);
x_17 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_17, 0, x_1);
lean::cnstr_set(x_17, 1, x_16);
return x_17;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_12, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_12, 1);
lean::inc(x_20);
lean::dec(x_12);
if (lean::obj_tag(x_20) == 0)
{
obj* x_23; obj* x_24; obj* x_27; obj* x_28; obj* x_29; 
x_23 = l_lean_parser_term_paren__special_has__view;
x_24 = lean::cnstr_get(x_23, 0);
lean::inc(x_24);
lean::dec(x_23);
x_27 = lean::apply_1(x_24, x_18);
if (lean::is_scalar(x_11)) {
 x_28 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_28 = x_11;
}
lean::cnstr_set(x_28, 0, x_27);
x_29 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_29, 0, x_1);
lean::cnstr_set(x_29, 1, x_28);
return x_29;
}
else
{
obj* x_33; obj* x_34; 
lean::dec(x_11);
lean::dec(x_18);
lean::dec(x_20);
x_33 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_1);
lean::cnstr_set(x_34, 1, x_33);
return x_34;
}
}
}
}
else
{
obj* x_35; obj* x_38; 
x_35 = lean::cnstr_get(x_0, 0);
lean::inc(x_35);
lean::dec(x_0);
x_38 = l_lean_parser_syntax_as__node___main(x_35);
if (lean::obj_tag(x_38) == 0)
{
obj* x_39; obj* x_40; 
x_39 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
x_40 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_40, 0, x_1);
lean::cnstr_set(x_40, 1, x_39);
return x_40;
}
else
{
obj* x_41; obj* x_43; obj* x_44; 
x_41 = lean::cnstr_get(x_38, 0);
if (lean::is_exclusive(x_38)) {
 lean::cnstr_set(x_38, 0, lean::box(0));
 x_43 = x_38;
} else {
 lean::inc(x_41);
 lean::dec(x_38);
 x_43 = lean::box(0);
}
x_44 = lean::cnstr_get(x_41, 1);
lean::inc(x_44);
lean::dec(x_41);
if (lean::obj_tag(x_44) == 0)
{
obj* x_48; obj* x_49; 
lean::dec(x_43);
x_48 = lean::box(0);
x_49 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_49, 0, x_1);
lean::cnstr_set(x_49, 1, x_48);
return x_49;
}
else
{
obj* x_50; obj* x_52; 
x_50 = lean::cnstr_get(x_44, 0);
lean::inc(x_50);
x_52 = lean::cnstr_get(x_44, 1);
lean::inc(x_52);
lean::dec(x_44);
if (lean::obj_tag(x_52) == 0)
{
obj* x_55; obj* x_56; obj* x_59; obj* x_60; obj* x_61; 
x_55 = l_lean_parser_term_paren__special_has__view;
x_56 = lean::cnstr_get(x_55, 0);
lean::inc(x_56);
lean::dec(x_55);
x_59 = lean::apply_1(x_56, x_50);
if (lean::is_scalar(x_43)) {
 x_60 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_60 = x_43;
}
lean::cnstr_set(x_60, 0, x_59);
x_61 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_61, 0, x_1);
lean::cnstr_set(x_61, 1, x_60);
return x_61;
}
else
{
obj* x_65; obj* x_66; 
lean::dec(x_52);
lean::dec(x_50);
lean::dec(x_43);
x_65 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
x_66 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_66, 0, x_1);
lean::cnstr_set(x_66, 1, x_65);
return x_66;
}
}
}
}
}
}
}
obj* l_lean_parser_term_paren__content_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_18; obj* x_19; 
x_18 = lean::box(3);
x_19 = l_lean_parser_syntax_as__node___main(x_18);
if (lean::obj_tag(x_19) == 0)
{
obj* x_20; obj* x_21; 
x_20 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_2);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_24; obj* x_25; 
x_22 = lean::cnstr_get(x_19, 0);
if (lean::is_exclusive(x_19)) {
 lean::cnstr_set(x_19, 0, lean::box(0));
 x_24 = x_19;
} else {
 lean::inc(x_22);
 lean::dec(x_19);
 x_24 = lean::box(0);
}
x_25 = lean::cnstr_get(x_22, 1);
lean::inc(x_25);
lean::dec(x_22);
if (lean::obj_tag(x_25) == 0)
{
obj* x_29; obj* x_30; 
lean::dec(x_24);
x_29 = lean::box(0);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_2);
lean::cnstr_set(x_30, 1, x_29);
return x_30;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_25, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_25, 1);
lean::inc(x_33);
lean::dec(x_25);
if (lean::obj_tag(x_33) == 0)
{
obj* x_36; obj* x_37; obj* x_40; obj* x_41; obj* x_42; 
x_36 = l_lean_parser_term_paren__special_has__view;
x_37 = lean::cnstr_get(x_36, 0);
lean::inc(x_37);
lean::dec(x_36);
x_40 = lean::apply_1(x_37, x_31);
if (lean::is_scalar(x_24)) {
 x_41 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_41 = x_24;
}
lean::cnstr_set(x_41, 0, x_40);
x_42 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_42, 0, x_2);
lean::cnstr_set(x_42, 1, x_41);
return x_42;
}
else
{
obj* x_46; obj* x_47; 
lean::dec(x_33);
lean::dec(x_31);
lean::dec(x_24);
x_46 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
x_47 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_47, 0, x_2);
lean::cnstr_set(x_47, 1, x_46);
return x_47;
}
}
}
}
else
{
obj* x_48; obj* x_51; 
x_48 = lean::cnstr_get(x_1, 0);
lean::inc(x_48);
lean::dec(x_1);
x_51 = l_lean_parser_syntax_as__node___main(x_48);
if (lean::obj_tag(x_51) == 0)
{
obj* x_52; obj* x_53; 
x_52 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
x_53 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_53, 0, x_2);
lean::cnstr_set(x_53, 1, x_52);
return x_53;
}
else
{
obj* x_54; obj* x_56; obj* x_57; 
x_54 = lean::cnstr_get(x_51, 0);
if (lean::is_exclusive(x_51)) {
 lean::cnstr_set(x_51, 0, lean::box(0));
 x_56 = x_51;
} else {
 lean::inc(x_54);
 lean::dec(x_51);
 x_56 = lean::box(0);
}
x_57 = lean::cnstr_get(x_54, 1);
lean::inc(x_57);
lean::dec(x_54);
if (lean::obj_tag(x_57) == 0)
{
obj* x_61; obj* x_62; 
lean::dec(x_56);
x_61 = lean::box(0);
x_62 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_62, 0, x_2);
lean::cnstr_set(x_62, 1, x_61);
return x_62;
}
else
{
obj* x_63; obj* x_65; 
x_63 = lean::cnstr_get(x_57, 0);
lean::inc(x_63);
x_65 = lean::cnstr_get(x_57, 1);
lean::inc(x_65);
lean::dec(x_57);
if (lean::obj_tag(x_65) == 0)
{
obj* x_68; obj* x_69; obj* x_72; obj* x_73; obj* x_74; 
x_68 = l_lean_parser_term_paren__special_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_63);
if (lean::is_scalar(x_56)) {
 x_73 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_73 = x_56;
}
lean::cnstr_set(x_73, 0, x_72);
x_74 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_74, 0, x_2);
lean::cnstr_set(x_74, 1, x_73);
return x_74;
}
else
{
obj* x_78; obj* x_79; 
lean::dec(x_56);
lean::dec(x_63);
lean::dec(x_65);
x_78 = l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1;
x_79 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_79, 0, x_2);
lean::cnstr_set(x_79, 1, x_78);
return x_79;
}
}
}
}
}
}
}
obj* l_lean_parser_term_paren__content_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
if (lean::obj_tag(x_3) == 0)
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_6 = l_lean_parser_detail__ident_has__view_x_27___lambda__2___closed__1;
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_1);
lean::cnstr_set(x_7, 1, x_6);
x_8 = l_lean_parser_term_paren__content;
x_9 = l_lean_parser_syntax_mk__node(x_8, x_7);
return x_9;
}
else
{
obj* x_10; obj* x_13; obj* x_14; obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_10 = lean::cnstr_get(x_3, 0);
lean::inc(x_10);
lean::dec(x_3);
x_13 = lean::box(0);
x_14 = l_lean_parser_term_paren__special_has__view;
x_15 = lean::cnstr_get(x_14, 1);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_10);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_13);
x_20 = l_lean_parser_no__kind;
x_21 = l_lean_parser_syntax_mk__node(x_20, x_19);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_13);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_1);
lean::cnstr_set(x_23, 1, x_22);
x_24 = l_lean_parser_term_paren__content;
x_25 = l_lean_parser_syntax_mk__node(x_24, x_23);
return x_25;
}
}
}
obj* _init_l_lean_parser_term_paren__content_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_paren__content_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_paren__content_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_paren__content_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_paren__content_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_paren() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("paren");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_lean_parser_term_paren__content_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; obj* x_17; obj* x_18; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = lean::box(3);
x_17 = x_0;
x_18 = x_20;
goto lbl_19;
}
else
{
obj* x_21; obj* x_23; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_0, 1);
lean::inc(x_23);
lean::dec(x_0);
x_17 = x_23;
x_18 = x_21;
goto lbl_19;
}
lbl_16:
{
switch (lean::obj_tag(x_15)) {
case 0:
{
obj* x_26; obj* x_29; obj* x_30; 
x_26 = lean::cnstr_get(x_15, 0);
lean::inc(x_26);
lean::dec(x_15);
x_29 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_29, 0, x_26);
x_30 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_30, 0, x_5);
lean::cnstr_set(x_30, 1, x_14);
lean::cnstr_set(x_30, 2, x_29);
return x_30;
}
case 3:
{
obj* x_31; obj* x_32; 
x_31 = lean::box(0);
x_32 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_32, 0, x_5);
lean::cnstr_set(x_32, 1, x_14);
lean::cnstr_set(x_32, 2, x_31);
return x_32;
}
default:
{
obj* x_34; obj* x_35; 
lean::dec(x_15);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_35, 0, x_5);
lean::cnstr_set(x_35, 1, x_14);
lean::cnstr_set(x_35, 2, x_34);
return x_35;
}
}
}
lbl_19:
{
obj* x_36; 
x_36 = l_lean_parser_syntax_as__node___main(x_18);
if (lean::obj_tag(x_36) == 0)
{
if (lean::obj_tag(x_17) == 0)
{
obj* x_37; obj* x_38; obj* x_39; 
x_37 = lean::box(0);
x_38 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
x_39 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_39, 0, x_5);
lean::cnstr_set(x_39, 1, x_38);
lean::cnstr_set(x_39, 2, x_37);
return x_39;
}
else
{
obj* x_40; obj* x_43; 
x_40 = lean::cnstr_get(x_17, 0);
lean::inc(x_40);
lean::dec(x_17);
x_43 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
x_14 = x_43;
x_15 = x_40;
goto lbl_16;
}
}
else
{
obj* x_44; obj* x_46; obj* x_47; 
x_44 = lean::cnstr_get(x_36, 0);
if (lean::is_exclusive(x_36)) {
 lean::cnstr_set(x_36, 0, lean::box(0));
 x_46 = x_36;
} else {
 lean::inc(x_44);
 lean::dec(x_36);
 x_46 = lean::box(0);
}
x_47 = lean::cnstr_get(x_44, 1);
lean::inc(x_47);
lean::dec(x_44);
if (lean::obj_tag(x_47) == 0)
{
obj* x_51; 
lean::dec(x_46);
x_51 = lean::box(0);
if (lean::obj_tag(x_17) == 0)
{
obj* x_52; 
x_52 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_52, 0, x_5);
lean::cnstr_set(x_52, 1, x_51);
lean::cnstr_set(x_52, 2, x_51);
return x_52;
}
else
{
obj* x_53; 
x_53 = lean::cnstr_get(x_17, 0);
lean::inc(x_53);
lean::dec(x_17);
x_14 = x_51;
x_15 = x_53;
goto lbl_16;
}
}
else
{
obj* x_56; obj* x_58; 
x_56 = lean::cnstr_get(x_47, 0);
lean::inc(x_56);
x_58 = lean::cnstr_get(x_47, 1);
lean::inc(x_58);
lean::dec(x_47);
if (lean::obj_tag(x_58) == 0)
{
obj* x_61; obj* x_62; obj* x_65; obj* x_66; 
x_61 = l_lean_parser_term_paren__content_has__view;
x_62 = lean::cnstr_get(x_61, 0);
lean::inc(x_62);
lean::dec(x_61);
x_65 = lean::apply_1(x_62, x_56);
if (lean::is_scalar(x_46)) {
 x_66 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_66 = x_46;
}
lean::cnstr_set(x_66, 0, x_65);
if (lean::obj_tag(x_17) == 0)
{
obj* x_67; obj* x_68; 
x_67 = lean::box(0);
x_68 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_68, 0, x_5);
lean::cnstr_set(x_68, 1, x_66);
lean::cnstr_set(x_68, 2, x_67);
return x_68;
}
else
{
obj* x_69; 
x_69 = lean::cnstr_get(x_17, 0);
lean::inc(x_69);
lean::dec(x_17);
x_14 = x_66;
x_15 = x_69;
goto lbl_16;
}
}
else
{
lean::dec(x_58);
lean::dec(x_56);
lean::dec(x_46);
if (lean::obj_tag(x_17) == 0)
{
obj* x_75; obj* x_76; obj* x_77; 
x_75 = lean::box(0);
x_76 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
x_77 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_77, 0, x_5);
lean::cnstr_set(x_77, 1, x_76);
lean::cnstr_set(x_77, 2, x_75);
return x_77;
}
else
{
obj* x_78; obj* x_81; 
x_78 = lean::cnstr_get(x_17, 0);
lean::inc(x_78);
lean::dec(x_17);
x_81 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
x_14 = x_81;
x_15 = x_78;
goto lbl_16;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_paren_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; obj* x_30; obj* x_31; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_33; 
x_33 = lean::box(3);
x_30 = x_1;
x_31 = x_33;
goto lbl_32;
}
else
{
obj* x_34; obj* x_36; 
x_34 = lean::cnstr_get(x_1, 0);
lean::inc(x_34);
x_36 = lean::cnstr_get(x_1, 1);
lean::inc(x_36);
lean::dec(x_1);
x_30 = x_36;
x_31 = x_34;
goto lbl_32;
}
lbl_29:
{
switch (lean::obj_tag(x_28)) {
case 0:
{
obj* x_39; obj* x_42; obj* x_43; 
x_39 = lean::cnstr_get(x_28, 0);
lean::inc(x_39);
lean::dec(x_28);
x_42 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_42, 0, x_39);
x_43 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_43, 0, x_18);
lean::cnstr_set(x_43, 1, x_27);
lean::cnstr_set(x_43, 2, x_42);
return x_43;
}
case 3:
{
obj* x_44; obj* x_45; 
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_45, 0, x_18);
lean::cnstr_set(x_45, 1, x_27);
lean::cnstr_set(x_45, 2, x_44);
return x_45;
}
default:
{
obj* x_47; obj* x_48; 
lean::dec(x_28);
x_47 = lean::box(0);
x_48 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_48, 0, x_18);
lean::cnstr_set(x_48, 1, x_27);
lean::cnstr_set(x_48, 2, x_47);
return x_48;
}
}
}
lbl_32:
{
obj* x_49; 
x_49 = l_lean_parser_syntax_as__node___main(x_31);
if (lean::obj_tag(x_49) == 0)
{
if (lean::obj_tag(x_30) == 0)
{
obj* x_50; obj* x_51; obj* x_52; 
x_50 = lean::box(0);
x_51 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
x_52 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_52, 0, x_18);
lean::cnstr_set(x_52, 1, x_51);
lean::cnstr_set(x_52, 2, x_50);
return x_52;
}
else
{
obj* x_53; obj* x_56; 
x_53 = lean::cnstr_get(x_30, 0);
lean::inc(x_53);
lean::dec(x_30);
x_56 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
x_27 = x_56;
x_28 = x_53;
goto lbl_29;
}
}
else
{
obj* x_57; obj* x_59; obj* x_60; 
x_57 = lean::cnstr_get(x_49, 0);
if (lean::is_exclusive(x_49)) {
 lean::cnstr_set(x_49, 0, lean::box(0));
 x_59 = x_49;
} else {
 lean::inc(x_57);
 lean::dec(x_49);
 x_59 = lean::box(0);
}
x_60 = lean::cnstr_get(x_57, 1);
lean::inc(x_60);
lean::dec(x_57);
if (lean::obj_tag(x_60) == 0)
{
obj* x_64; 
lean::dec(x_59);
x_64 = lean::box(0);
if (lean::obj_tag(x_30) == 0)
{
obj* x_65; 
x_65 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_65, 0, x_18);
lean::cnstr_set(x_65, 1, x_64);
lean::cnstr_set(x_65, 2, x_64);
return x_65;
}
else
{
obj* x_66; 
x_66 = lean::cnstr_get(x_30, 0);
lean::inc(x_66);
lean::dec(x_30);
x_27 = x_64;
x_28 = x_66;
goto lbl_29;
}
}
else
{
obj* x_69; obj* x_71; 
x_69 = lean::cnstr_get(x_60, 0);
lean::inc(x_69);
x_71 = lean::cnstr_get(x_60, 1);
lean::inc(x_71);
lean::dec(x_60);
if (lean::obj_tag(x_71) == 0)
{
obj* x_74; obj* x_75; obj* x_78; obj* x_79; 
x_74 = l_lean_parser_term_paren__content_has__view;
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
lean::dec(x_74);
x_78 = lean::apply_1(x_75, x_69);
if (lean::is_scalar(x_59)) {
 x_79 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_79 = x_59;
}
lean::cnstr_set(x_79, 0, x_78);
if (lean::obj_tag(x_30) == 0)
{
obj* x_80; obj* x_81; 
x_80 = lean::box(0);
x_81 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_81, 0, x_18);
lean::cnstr_set(x_81, 1, x_79);
lean::cnstr_set(x_81, 2, x_80);
return x_81;
}
else
{
obj* x_82; 
x_82 = lean::cnstr_get(x_30, 0);
lean::inc(x_82);
lean::dec(x_30);
x_27 = x_79;
x_28 = x_82;
goto lbl_29;
}
}
else
{
lean::dec(x_59);
lean::dec(x_69);
lean::dec(x_71);
if (lean::obj_tag(x_30) == 0)
{
obj* x_88; obj* x_89; obj* x_90; 
x_88 = lean::box(0);
x_89 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
x_90 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_90, 0, x_18);
lean::cnstr_set(x_90, 1, x_89);
lean::cnstr_set(x_90, 2, x_88);
return x_90;
}
else
{
obj* x_91; obj* x_94; 
x_91 = lean::cnstr_get(x_30, 0);
lean::inc(x_91);
lean::dec(x_30);
x_94 = l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1;
x_27 = x_94;
x_28 = x_91;
goto lbl_29;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_paren_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_9 = l_option_map___rarg(x_8, x_1);
x_10 = lean::box(3);
x_11 = l_option_get__or__else___main___rarg(x_9, x_10);
x_12 = l_option_map___rarg(x_8, x_5);
x_13 = l_option_get__or__else___main___rarg(x_12, x_10);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set(x_15, 1, x_14);
if (lean::obj_tag(x_3) == 0)
{
obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
x_16 = l_lean_parser_combinators_many___rarg___closed__1;
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_15);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_11);
lean::cnstr_set(x_18, 1, x_17);
x_19 = l_lean_parser_term_paren;
x_20 = l_lean_parser_syntax_mk__node(x_19, x_18);
return x_20;
}
else
{
obj* x_21; obj* x_24; obj* x_25; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; 
x_21 = lean::cnstr_get(x_3, 0);
lean::inc(x_21);
lean::dec(x_3);
x_24 = l_lean_parser_term_paren__content_has__view;
x_25 = lean::cnstr_get(x_24, 1);
lean::inc(x_25);
lean::dec(x_24);
x_28 = lean::apply_1(x_25, x_21);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_14);
x_30 = l_lean_parser_no__kind;
x_31 = l_lean_parser_syntax_mk__node(x_30, x_29);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_15);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_11);
lean::cnstr_set(x_33, 1, x_32);
x_34 = l_lean_parser_term_paren;
x_35 = l_lean_parser_syntax_mk__node(x_34, x_33);
return x_35;
}
}
}
obj* _init_l_lean_parser_term_paren_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_paren_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_paren_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_paren_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_paren_has__view_x_27;
return x_0;
}
}
obj* l___private_init_lean_parser_combinators_2__sep__by__aux___main___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__2(obj* x_0, obj* x_1, uint8 x_2, uint8 x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9, obj* x_10) {
_start:
{
obj* x_11; uint8 x_12; 
x_11 = lean::mk_nat_obj(0u);
x_12 = lean::nat_dec_eq(x_5, x_11);
if (x_12 == 0)
{
obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_19; obj* x_20; 
x_13 = lean::mk_nat_obj(1u);
x_14 = lean::nat_sub(x_5, x_13);
lean::dec(x_5);
if (x_3 == 0)
{
obj* x_26; obj* x_27; obj* x_29; 
lean::inc(x_8);
lean::inc(x_7);
lean::inc(x_6);
lean::inc(x_0);
x_26 = lean::apply_5(x_0, x_6, x_7, x_8, x_9, x_10);
x_27 = lean::cnstr_get(x_26, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_26, 1);
lean::inc(x_29);
lean::dec(x_26);
if (lean::obj_tag(x_27) == 0)
{
obj* x_32; obj* x_34; obj* x_36; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
x_32 = lean::cnstr_get(x_27, 0);
x_34 = lean::cnstr_get(x_27, 1);
x_36 = lean::cnstr_get(x_27, 2);
if (lean::is_exclusive(x_27)) {
 x_38 = x_27;
} else {
 lean::inc(x_32);
 lean::inc(x_34);
 lean::inc(x_36);
 lean::dec(x_27);
 x_38 = lean::box(0);
}
x_39 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_39, 0, x_32);
x_40 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_38)) {
 x_41 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_41 = x_38;
}
lean::cnstr_set(x_41, 0, x_39);
lean::cnstr_set(x_41, 1, x_34);
lean::cnstr_set(x_41, 2, x_40);
x_42 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_36, x_41);
if (lean::obj_tag(x_42) == 0)
{
x_16 = x_42;
x_17 = x_29;
goto lbl_18;
}
else
{
obj* x_43; uint8 x_45; obj* x_46; obj* x_47; obj* x_49; obj* x_51; obj* x_53; obj* x_56; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; 
x_43 = lean::cnstr_get(x_42, 0);
x_45 = lean::cnstr_get_scalar<uint8>(x_42, sizeof(void*)*1);
if (lean::is_exclusive(x_42)) {
 lean::cnstr_set(x_42, 0, lean::box(0));
 x_46 = x_42;
} else {
 lean::inc(x_43);
 lean::dec(x_42);
 x_46 = lean::box(0);
}
x_47 = lean::cnstr_get(x_43, 0);
lean::inc(x_47);
x_49 = lean::cnstr_get(x_43, 1);
lean::inc(x_49);
x_51 = lean::cnstr_get(x_43, 2);
lean::inc(x_51);
x_53 = lean::cnstr_get(x_43, 3);
lean::inc(x_53);
lean::dec(x_43);
x_56 = l_option_get___main___at_lean_parser_run___spec__2(x_53);
lean::inc(x_4);
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_56);
lean::cnstr_set(x_58, 1, x_4);
x_59 = lean::box(3);
x_60 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_60, 0, x_59);
lean::cnstr_set(x_60, 1, x_58);
x_61 = l_list_reverse___rarg(x_60);
x_62 = l_lean_parser_no__kind;
x_63 = l_lean_parser_syntax_mk__node(x_62, x_61);
x_64 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_64, 0, x_63);
x_65 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_65, 0, x_47);
lean::cnstr_set(x_65, 1, x_49);
lean::cnstr_set(x_65, 2, x_51);
lean::cnstr_set(x_65, 3, x_64);
if (x_45 == 0)
{
uint8 x_66; obj* x_67; obj* x_68; 
x_66 = 0;
if (lean::is_scalar(x_46)) {
 x_67 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_67 = x_46;
}
lean::cnstr_set(x_67, 0, x_65);
lean::cnstr_set_scalar(x_67, sizeof(void*)*1, x_66);
x_68 = x_67;
x_16 = x_68;
x_17 = x_29;
goto lbl_18;
}
else
{
obj* x_69; obj* x_70; 
if (lean::is_scalar(x_46)) {
 x_69 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_69 = x_46;
}
lean::cnstr_set(x_69, 0, x_65);
lean::cnstr_set_scalar(x_69, sizeof(void*)*1, x_45);
x_70 = x_69;
x_16 = x_70;
x_17 = x_29;
goto lbl_18;
}
}
}
else
{
obj* x_71; uint8 x_73; obj* x_74; obj* x_75; obj* x_77; obj* x_79; obj* x_81; obj* x_84; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; 
x_71 = lean::cnstr_get(x_27, 0);
x_73 = lean::cnstr_get_scalar<uint8>(x_27, sizeof(void*)*1);
if (lean::is_exclusive(x_27)) {
 lean::cnstr_set(x_27, 0, lean::box(0));
 x_74 = x_27;
} else {
 lean::inc(x_71);
 lean::dec(x_27);
 x_74 = lean::box(0);
}
x_75 = lean::cnstr_get(x_71, 0);
lean::inc(x_75);
x_77 = lean::cnstr_get(x_71, 1);
lean::inc(x_77);
x_79 = lean::cnstr_get(x_71, 2);
lean::inc(x_79);
x_81 = lean::cnstr_get(x_71, 3);
lean::inc(x_81);
lean::dec(x_71);
x_84 = l_option_get___main___at_lean_parser_run___spec__2(x_81);
lean::inc(x_4);
x_86 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_86, 0, x_84);
lean::cnstr_set(x_86, 1, x_4);
x_87 = lean::box(3);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_87);
lean::cnstr_set(x_88, 1, x_86);
x_89 = l_list_reverse___rarg(x_88);
x_90 = l_lean_parser_no__kind;
x_91 = l_lean_parser_syntax_mk__node(x_90, x_89);
x_92 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_92, 0, x_91);
x_93 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_93, 0, x_75);
lean::cnstr_set(x_93, 1, x_77);
lean::cnstr_set(x_93, 2, x_79);
lean::cnstr_set(x_93, 3, x_92);
if (x_73 == 0)
{
uint8 x_94; obj* x_95; obj* x_96; 
x_94 = 0;
if (lean::is_scalar(x_74)) {
 x_95 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_95 = x_74;
}
lean::cnstr_set(x_95, 0, x_93);
lean::cnstr_set_scalar(x_95, sizeof(void*)*1, x_94);
x_96 = x_95;
x_16 = x_96;
x_17 = x_29;
goto lbl_18;
}
else
{
obj* x_97; obj* x_98; 
if (lean::is_scalar(x_74)) {
 x_97 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_97 = x_74;
}
lean::cnstr_set(x_97, 0, x_93);
lean::cnstr_set_scalar(x_97, sizeof(void*)*1, x_73);
x_98 = x_97;
x_16 = x_98;
x_17 = x_29;
goto lbl_18;
}
}
}
else
{
obj* x_104; obj* x_105; obj* x_107; obj* x_110; 
lean::inc(x_9);
lean::inc(x_8);
lean::inc(x_7);
lean::inc(x_6);
lean::inc(x_0);
x_104 = lean::apply_5(x_0, x_6, x_7, x_8, x_9, x_10);
x_105 = lean::cnstr_get(x_104, 0);
lean::inc(x_105);
x_107 = lean::cnstr_get(x_104, 1);
lean::inc(x_107);
lean::dec(x_104);
x_110 = lean::box(0);
if (lean::obj_tag(x_105) == 0)
{
obj* x_111; obj* x_113; obj* x_115; obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; 
x_111 = lean::cnstr_get(x_105, 0);
x_113 = lean::cnstr_get(x_105, 1);
x_115 = lean::cnstr_get(x_105, 2);
if (lean::is_exclusive(x_105)) {
 x_117 = x_105;
} else {
 lean::inc(x_111);
 lean::inc(x_113);
 lean::inc(x_115);
 lean::dec(x_105);
 x_117 = lean::box(0);
}
x_118 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_118, 0, x_111);
x_119 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_117)) {
 x_120 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_120 = x_117;
}
lean::cnstr_set(x_120, 0, x_118);
lean::cnstr_set(x_120, 1, x_113);
lean::cnstr_set(x_120, 2, x_119);
x_121 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_115, x_120);
if (lean::obj_tag(x_121) == 0)
{
lean::dec(x_9);
x_19 = x_121;
x_20 = x_107;
goto lbl_21;
}
else
{
obj* x_123; uint8 x_125; 
x_123 = lean::cnstr_get(x_121, 0);
lean::inc(x_123);
x_125 = lean::cnstr_get_scalar<uint8>(x_121, sizeof(void*)*1);
if (x_125 == 0)
{
obj* x_127; obj* x_130; obj* x_131; obj* x_132; obj* x_133; 
lean::dec(x_121);
x_127 = lean::cnstr_get(x_123, 2);
lean::inc(x_127);
lean::dec(x_123);
x_130 = l_mjoin___rarg___closed__1;
x_131 = lean::alloc_closure(reinterpret_cast<void*>(l_function_comp___rarg), 3, 2);
lean::closure_set(x_131, 0, x_127);
lean::closure_set(x_131, 1, x_130);
x_132 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_132, 0, x_131);
x_133 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_133, 0, x_110);
lean::cnstr_set(x_133, 1, x_9);
lean::cnstr_set(x_133, 2, x_132);
x_19 = x_133;
x_20 = x_107;
goto lbl_21;
}
else
{
lean::dec(x_9);
lean::dec(x_123);
x_19 = x_121;
x_20 = x_107;
goto lbl_21;
}
}
}
else
{
obj* x_136; uint8 x_138; obj* x_139; 
x_136 = lean::cnstr_get(x_105, 0);
x_138 = lean::cnstr_get_scalar<uint8>(x_105, sizeof(void*)*1);
if (lean::is_exclusive(x_105)) {
 lean::cnstr_set(x_105, 0, lean::box(0));
 x_139 = x_105;
} else {
 lean::inc(x_136);
 lean::dec(x_105);
 x_139 = lean::box(0);
}
if (x_138 == 0)
{
obj* x_141; obj* x_144; obj* x_145; obj* x_146; obj* x_147; 
lean::dec(x_139);
x_141 = lean::cnstr_get(x_136, 2);
lean::inc(x_141);
lean::dec(x_136);
x_144 = l_mjoin___rarg___closed__1;
x_145 = lean::alloc_closure(reinterpret_cast<void*>(l_function_comp___rarg), 3, 2);
lean::closure_set(x_145, 0, x_141);
lean::closure_set(x_145, 1, x_144);
x_146 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_146, 0, x_145);
x_147 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_147, 0, x_110);
lean::cnstr_set(x_147, 1, x_9);
lean::cnstr_set(x_147, 2, x_146);
x_19 = x_147;
x_20 = x_107;
goto lbl_21;
}
else
{
obj* x_149; obj* x_150; 
lean::dec(x_9);
if (lean::is_scalar(x_139)) {
 x_149 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_149 = x_139;
}
lean::cnstr_set(x_149, 0, x_136);
lean::cnstr_set_scalar(x_149, sizeof(void*)*1, x_138);
x_150 = x_149;
x_19 = x_150;
x_20 = x_107;
goto lbl_21;
}
}
}
lbl_18:
{
if (lean::obj_tag(x_16) == 0)
{
obj* x_151; obj* x_153; obj* x_155; obj* x_157; 
x_151 = lean::cnstr_get(x_16, 0);
x_153 = lean::cnstr_get(x_16, 1);
x_155 = lean::cnstr_get(x_16, 2);
if (lean::is_exclusive(x_16)) {
 lean::cnstr_set(x_16, 0, lean::box(0));
 lean::cnstr_set(x_16, 1, lean::box(0));
 lean::cnstr_set(x_16, 2, lean::box(0));
 x_157 = x_16;
} else {
 lean::inc(x_151);
 lean::inc(x_153);
 lean::inc(x_155);
 lean::dec(x_16);
 x_157 = lean::box(0);
}
if (lean::obj_tag(x_151) == 0)
{
obj* x_164; obj* x_165; obj* x_166; obj* x_167; obj* x_168; obj* x_169; obj* x_170; 
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_14);
x_164 = l_list_reverse___rarg(x_4);
x_165 = l_lean_parser_no__kind;
x_166 = l_lean_parser_syntax_mk__node(x_165, x_164);
x_167 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_157)) {
 x_168 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_168 = x_157;
}
lean::cnstr_set(x_168, 0, x_166);
lean::cnstr_set(x_168, 1, x_153);
lean::cnstr_set(x_168, 2, x_167);
x_169 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_155, x_168);
x_170 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_170, 0, x_169);
lean::cnstr_set(x_170, 1, x_17);
return x_170;
}
else
{
obj* x_171; obj* x_173; obj* x_174; obj* x_175; obj* x_182; obj* x_183; obj* x_185; obj* x_188; obj* x_189; 
x_171 = lean::cnstr_get(x_151, 0);
if (lean::is_exclusive(x_151)) {
 lean::cnstr_set(x_151, 0, lean::box(0));
 x_173 = x_151;
} else {
 lean::inc(x_171);
 lean::dec(x_151);
 x_173 = lean::box(0);
}
lean::inc(x_153);
lean::inc(x_8);
lean::inc(x_7);
lean::inc(x_6);
lean::inc(x_1);
x_182 = lean::apply_5(x_1, x_6, x_7, x_8, x_153, x_17);
x_183 = lean::cnstr_get(x_182, 0);
lean::inc(x_183);
x_185 = lean::cnstr_get(x_182, 1);
lean::inc(x_185);
lean::dec(x_182);
x_188 = lean::box(0);
x_189 = l_lean_parser_parsec__t_try__mk__res___rarg(x_183);
if (lean::obj_tag(x_189) == 0)
{
obj* x_190; obj* x_192; obj* x_194; obj* x_196; obj* x_197; obj* x_198; obj* x_199; obj* x_200; 
x_190 = lean::cnstr_get(x_189, 0);
x_192 = lean::cnstr_get(x_189, 1);
x_194 = lean::cnstr_get(x_189, 2);
if (lean::is_exclusive(x_189)) {
 x_196 = x_189;
} else {
 lean::inc(x_190);
 lean::inc(x_192);
 lean::inc(x_194);
 lean::dec(x_189);
 x_196 = lean::box(0);
}
if (lean::is_scalar(x_173)) {
 x_197 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_197 = x_173;
}
lean::cnstr_set(x_197, 0, x_190);
x_198 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_196)) {
 x_199 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_199 = x_196;
}
lean::cnstr_set(x_199, 0, x_197);
lean::cnstr_set(x_199, 1, x_192);
lean::cnstr_set(x_199, 2, x_198);
x_200 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_194, x_199);
if (lean::obj_tag(x_200) == 0)
{
lean::dec(x_153);
x_174 = x_200;
x_175 = x_185;
goto lbl_176;
}
else
{
obj* x_202; uint8 x_204; 
x_202 = lean::cnstr_get(x_200, 0);
lean::inc(x_202);
x_204 = lean::cnstr_get_scalar<uint8>(x_200, sizeof(void*)*1);
if (x_204 == 0)
{
obj* x_206; obj* x_209; obj* x_210; obj* x_211; obj* x_212; 
lean::dec(x_200);
x_206 = lean::cnstr_get(x_202, 2);
lean::inc(x_206);
lean::dec(x_202);
x_209 = l_mjoin___rarg___closed__1;
x_210 = lean::alloc_closure(reinterpret_cast<void*>(l_function_comp___rarg), 3, 2);
lean::closure_set(x_210, 0, x_206);
lean::closure_set(x_210, 1, x_209);
x_211 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_211, 0, x_210);
x_212 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_212, 0, x_188);
lean::cnstr_set(x_212, 1, x_153);
lean::cnstr_set(x_212, 2, x_211);
x_174 = x_212;
x_175 = x_185;
goto lbl_176;
}
else
{
lean::dec(x_202);
lean::dec(x_153);
x_174 = x_200;
x_175 = x_185;
goto lbl_176;
}
}
}
else
{
obj* x_215; uint8 x_217; obj* x_218; 
x_215 = lean::cnstr_get(x_189, 0);
x_217 = lean::cnstr_get_scalar<uint8>(x_189, sizeof(void*)*1);
if (lean::is_exclusive(x_189)) {
 lean::cnstr_set(x_189, 0, lean::box(0));
 x_218 = x_189;
} else {
 lean::inc(x_215);
 lean::dec(x_189);
 x_218 = lean::box(0);
}
if (x_217 == 0)
{
obj* x_220; obj* x_223; obj* x_224; obj* x_225; obj* x_226; 
lean::dec(x_218);
x_220 = lean::cnstr_get(x_215, 2);
lean::inc(x_220);
lean::dec(x_215);
x_223 = l_mjoin___rarg___closed__1;
x_224 = lean::alloc_closure(reinterpret_cast<void*>(l_function_comp___rarg), 3, 2);
lean::closure_set(x_224, 0, x_220);
lean::closure_set(x_224, 1, x_223);
if (lean::is_scalar(x_173)) {
 x_225 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_225 = x_173;
}
lean::cnstr_set(x_225, 0, x_224);
x_226 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_226, 0, x_188);
lean::cnstr_set(x_226, 1, x_153);
lean::cnstr_set(x_226, 2, x_225);
x_174 = x_226;
x_175 = x_185;
goto lbl_176;
}
else
{
obj* x_229; obj* x_230; 
lean::dec(x_153);
lean::dec(x_173);
if (lean::is_scalar(x_218)) {
 x_229 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_229 = x_218;
}
lean::cnstr_set(x_229, 0, x_215);
lean::cnstr_set_scalar(x_229, sizeof(void*)*1, x_217);
x_230 = x_229;
x_174 = x_230;
x_175 = x_185;
goto lbl_176;
}
}
lbl_176:
{
if (lean::obj_tag(x_174) == 0)
{
obj* x_231; obj* x_233; obj* x_235; 
x_231 = lean::cnstr_get(x_174, 0);
lean::inc(x_231);
x_233 = lean::cnstr_get(x_174, 1);
lean::inc(x_233);
x_235 = lean::cnstr_get(x_174, 2);
lean::inc(x_235);
lean::dec(x_174);
if (lean::obj_tag(x_231) == 0)
{
obj* x_244; obj* x_245; obj* x_246; obj* x_247; obj* x_248; obj* x_249; obj* x_250; obj* x_251; obj* x_252; 
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_14);
x_244 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_244, 0, x_171);
lean::cnstr_set(x_244, 1, x_4);
x_245 = l_list_reverse___rarg(x_244);
x_246 = l_lean_parser_no__kind;
x_247 = l_lean_parser_syntax_mk__node(x_246, x_245);
x_248 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_157)) {
 x_249 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_249 = x_157;
}
lean::cnstr_set(x_249, 0, x_247);
lean::cnstr_set(x_249, 1, x_233);
lean::cnstr_set(x_249, 2, x_248);
x_250 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_235, x_249);
x_251 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_155, x_250);
x_252 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_252, 0, x_251);
lean::cnstr_set(x_252, 1, x_175);
return x_252;
}
else
{
obj* x_254; obj* x_257; obj* x_258; obj* x_259; obj* x_260; obj* x_262; obj* x_264; obj* x_265; obj* x_266; obj* x_267; 
lean::dec(x_157);
x_254 = lean::cnstr_get(x_231, 0);
lean::inc(x_254);
lean::dec(x_231);
x_257 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_257, 0, x_171);
lean::cnstr_set(x_257, 1, x_4);
x_258 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_258, 0, x_254);
lean::cnstr_set(x_258, 1, x_257);
x_259 = l___private_init_lean_parser_combinators_2__sep__by__aux___main___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__2(x_0, x_1, x_2, x_2, x_258, x_14, x_6, x_7, x_8, x_233, x_175);
x_260 = lean::cnstr_get(x_259, 0);
x_262 = lean::cnstr_get(x_259, 1);
if (lean::is_exclusive(x_259)) {
 x_264 = x_259;
} else {
 lean::inc(x_260);
 lean::inc(x_262);
 lean::dec(x_259);
 x_264 = lean::box(0);
}
x_265 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_235, x_260);
x_266 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_155, x_265);
if (lean::is_scalar(x_264)) {
 x_267 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_267 = x_264;
}
lean::cnstr_set(x_267, 0, x_266);
lean::cnstr_set(x_267, 1, x_262);
return x_267;
}
}
else
{
obj* x_277; uint8 x_279; obj* x_280; obj* x_281; obj* x_282; obj* x_283; obj* x_284; 
lean::dec(x_157);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_171);
lean::dec(x_14);
x_277 = lean::cnstr_get(x_174, 0);
x_279 = lean::cnstr_get_scalar<uint8>(x_174, sizeof(void*)*1);
if (lean::is_exclusive(x_174)) {
 x_280 = x_174;
} else {
 lean::inc(x_277);
 lean::dec(x_174);
 x_280 = lean::box(0);
}
if (lean::is_scalar(x_280)) {
 x_281 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_281 = x_280;
}
lean::cnstr_set(x_281, 0, x_277);
lean::cnstr_set_scalar(x_281, sizeof(void*)*1, x_279);
x_282 = x_281;
x_283 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_155, x_282);
x_284 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_284, 0, x_283);
lean::cnstr_set(x_284, 1, x_175);
return x_284;
}
}
}
}
else
{
obj* x_292; uint8 x_294; obj* x_295; obj* x_296; obj* x_297; obj* x_298; 
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_14);
x_292 = lean::cnstr_get(x_16, 0);
x_294 = lean::cnstr_get_scalar<uint8>(x_16, sizeof(void*)*1);
if (lean::is_exclusive(x_16)) {
 x_295 = x_16;
} else {
 lean::inc(x_292);
 lean::dec(x_16);
 x_295 = lean::box(0);
}
if (lean::is_scalar(x_295)) {
 x_296 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_296 = x_295;
}
lean::cnstr_set(x_296, 0, x_292);
lean::cnstr_set_scalar(x_296, sizeof(void*)*1, x_294);
x_297 = x_296;
x_298 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_298, 0, x_297);
lean::cnstr_set(x_298, 1, x_17);
return x_298;
}
}
lbl_21:
{
if (lean::obj_tag(x_19) == 0)
{
x_16 = x_19;
x_17 = x_20;
goto lbl_18;
}
else
{
obj* x_299; uint8 x_301; obj* x_302; obj* x_303; obj* x_305; obj* x_307; obj* x_309; obj* x_312; obj* x_314; obj* x_315; obj* x_316; obj* x_317; obj* x_318; obj* x_319; obj* x_320; obj* x_321; 
x_299 = lean::cnstr_get(x_19, 0);
x_301 = lean::cnstr_get_scalar<uint8>(x_19, sizeof(void*)*1);
if (lean::is_exclusive(x_19)) {
 lean::cnstr_set(x_19, 0, lean::box(0));
 x_302 = x_19;
} else {
 lean::inc(x_299);
 lean::dec(x_19);
 x_302 = lean::box(0);
}
x_303 = lean::cnstr_get(x_299, 0);
lean::inc(x_303);
x_305 = lean::cnstr_get(x_299, 1);
lean::inc(x_305);
x_307 = lean::cnstr_get(x_299, 2);
lean::inc(x_307);
x_309 = lean::cnstr_get(x_299, 3);
lean::inc(x_309);
lean::dec(x_299);
x_312 = l_option_get___main___at_lean_parser_run___spec__2(x_309);
lean::inc(x_4);
x_314 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_314, 0, x_312);
lean::cnstr_set(x_314, 1, x_4);
x_315 = lean::box(3);
x_316 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_316, 0, x_315);
lean::cnstr_set(x_316, 1, x_314);
x_317 = l_list_reverse___rarg(x_316);
x_318 = l_lean_parser_no__kind;
x_319 = l_lean_parser_syntax_mk__node(x_318, x_317);
x_320 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_320, 0, x_319);
x_321 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_321, 0, x_303);
lean::cnstr_set(x_321, 1, x_305);
lean::cnstr_set(x_321, 2, x_307);
lean::cnstr_set(x_321, 3, x_320);
if (x_301 == 0)
{
uint8 x_322; obj* x_323; obj* x_324; 
x_322 = 0;
if (lean::is_scalar(x_302)) {
 x_323 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_323 = x_302;
}
lean::cnstr_set(x_323, 0, x_321);
lean::cnstr_set_scalar(x_323, sizeof(void*)*1, x_322);
x_324 = x_323;
x_16 = x_324;
x_17 = x_20;
goto lbl_18;
}
else
{
obj* x_325; obj* x_326; 
if (lean::is_scalar(x_302)) {
 x_325 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_325 = x_302;
}
lean::cnstr_set(x_325, 0, x_321);
lean::cnstr_set_scalar(x_325, sizeof(void*)*1, x_301);
x_326 = x_325;
x_16 = x_326;
x_17 = x_20;
goto lbl_18;
}
}
}
}
else
{
obj* x_331; obj* x_332; obj* x_333; obj* x_334; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_0);
x_331 = lean::box(0);
x_332 = l___private_init_lean_parser_combinators_1__many1__aux___main___rarg___closed__1;
x_333 = l_mjoin___rarg___closed__1;
x_334 = l_lean_parser_monad__parsec_error___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__4___rarg(x_332, x_333, x_331, x_331, x_6, x_7, x_8, x_9, x_10);
return x_334;
}
}
}
obj* l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__1(obj* x_0, obj* x_1, uint8 x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; uint8 x_13; obj* x_14; obj* x_15; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_8 = lean::string_iterator_remaining(x_6);
x_9 = lean::box(0);
x_10 = lean::mk_nat_obj(1u);
x_11 = lean::nat_add(x_8, x_10);
lean::dec(x_8);
x_13 = 1;
x_14 = l___private_init_lean_parser_combinators_2__sep__by__aux___main___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__2(x_0, x_1, x_2, x_13, x_9, x_11, x_3, x_4, x_5, x_6, x_7);
x_15 = lean::cnstr_get(x_14, 0);
x_17 = lean::cnstr_get(x_14, 1);
if (lean::is_exclusive(x_14)) {
 x_19 = x_14;
} else {
 lean::inc(x_15);
 lean::inc(x_17);
 lean::dec(x_14);
 x_19 = lean::box(0);
}
x_20 = l_lean_parser_finish__comment__block___closed__2;
x_21 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_20, x_15);
if (lean::is_scalar(x_19)) {
 x_22 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_22 = x_19;
}
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_17);
return x_22;
}
}
obj* _init_l_lean_parser_term_paren_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_0 = lean::mk_string("(");
x_1 = l_lean_parser_max__prec;
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::mk_string(", ");
x_4 = lean::mk_nat_obj(0u);
x_5 = l_lean_parser_symbol_tokens___rarg(x_3, x_4);
x_6 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
lean::inc(x_5);
x_8 = l_lean_parser_combinators_sep__by_tokens___rarg(x_6, x_5);
x_9 = lean::box(0);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_8, x_9);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_5, x_10);
x_12 = l_lean_parser_tokens___rarg(x_11);
x_13 = lean::mk_string(" : ");
x_14 = l_lean_parser_symbol_tokens___rarg(x_13, x_4);
x_15 = l_lean_parser_list_cons_tokens___rarg(x_6, x_9);
x_16 = l_lean_parser_list_cons_tokens___rarg(x_14, x_15);
x_17 = l_lean_parser_tokens___rarg(x_16);
x_18 = l_lean_parser_list_cons_tokens___rarg(x_17, x_9);
x_19 = l_lean_parser_list_cons_tokens___rarg(x_12, x_18);
x_20 = l_lean_parser_tokens___rarg(x_19);
x_21 = l_lean_parser_list_cons_tokens___rarg(x_20, x_9);
x_22 = l_lean_parser_tokens___rarg(x_21);
x_23 = l_lean_parser_tokens___rarg(x_22);
x_24 = l_lean_parser_list_cons_tokens___rarg(x_23, x_9);
x_25 = l_lean_parser_list_cons_tokens___rarg(x_6, x_24);
x_26 = l_lean_parser_tokens___rarg(x_25);
x_27 = l_lean_parser_tokens___rarg(x_26);
x_28 = lean::mk_string(")");
x_29 = l_lean_parser_symbol_tokens___rarg(x_28, x_4);
x_30 = l_lean_parser_list_cons_tokens___rarg(x_29, x_9);
x_31 = l_lean_parser_list_cons_tokens___rarg(x_27, x_30);
x_32 = l_lean_parser_list_cons_tokens___rarg(x_2, x_31);
x_33 = l_lean_parser_tokens___rarg(x_32);
return x_33;
}
}
obj* l___private_init_lean_parser_combinators_2__sep__by__aux___main___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__2___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9, obj* x_10) {
_start:
{
uint8 x_11; uint8 x_12; obj* x_13; 
x_11 = lean::unbox(x_2);
x_12 = lean::unbox(x_3);
x_13 = l___private_init_lean_parser_combinators_2__sep__by__aux___main___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__2(x_0, x_1, x_11, x_12, x_4, x_5, x_6, x_7, x_8, x_9, x_10);
return x_13;
}
}
obj* l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
uint8 x_8; obj* x_9; 
x_8 = lean::unbox(x_2);
x_9 = l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__1(x_0, x_1, x_8, x_3, x_4, x_5, x_6, x_7);
return x_9;
}
}
obj* _init_l_lean_parser_term_paren_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_12; uint8 x_13; obj* x_14; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; 
x_0 = lean::mk_string("(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::mk_string(", ");
x_9 = l_string_trim(x_8);
lean::inc(x_9);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_11, 0, x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_12, 0, x_9);
lean::closure_set(x_12, 1, x_6);
lean::closure_set(x_12, 2, x_11);
x_13 = 0;
x_14 = lean::box(x_13);
lean::inc(x_12);
lean::inc(x_7);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__1___boxed), 8, 3);
lean::closure_set(x_17, 0, x_7);
lean::closure_set(x_17, 1, x_12);
lean::closure_set(x_17, 2, x_14);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_12);
lean::cnstr_set(x_20, 1, x_19);
x_21 = l_lean_parser_term_tuple;
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_22, 0, x_21);
lean::closure_set(x_22, 1, x_20);
x_23 = lean::mk_string(" : ");
x_24 = l_string_trim(x_23);
lean::inc(x_24);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_26, 0, x_24);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_27, 0, x_24);
lean::closure_set(x_27, 1, x_6);
lean::closure_set(x_27, 2, x_26);
lean::inc(x_7);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_7);
lean::cnstr_set(x_29, 1, x_18);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_27);
lean::cnstr_set(x_30, 1, x_29);
x_31 = l_lean_parser_term_typed;
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_32, 0, x_31);
lean::closure_set(x_32, 1, x_30);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_18);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_22);
lean::cnstr_set(x_34, 1, x_33);
x_35 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_35, 0, x_34);
lean::closure_set(x_35, 1, x_6);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_18);
x_37 = l_lean_parser_term_paren__special;
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_38, 0, x_37);
lean::closure_set(x_38, 1, x_36);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_39, 0, x_38);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_18);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_7);
lean::cnstr_set(x_41, 1, x_40);
x_42 = l_lean_parser_term_paren__content;
x_43 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_43, 0, x_42);
lean::closure_set(x_43, 1, x_41);
x_44 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_44, 0, x_43);
x_45 = lean::mk_string(")");
x_46 = l_string_trim(x_45);
lean::inc(x_46);
x_48 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_48, 0, x_46);
x_49 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_49, 0, x_46);
lean::closure_set(x_49, 1, x_6);
lean::closure_set(x_49, 2, x_48);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_18);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_44);
lean::cnstr_set(x_51, 1, x_50);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_5);
lean::cnstr_set(x_52, 1, x_51);
x_53 = l_lean_parser_term__parser__m_monad;
x_54 = l_lean_parser_term__parser__m_monad__except;
x_55 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_56 = l_lean_parser_term__parser__m_alternative;
x_57 = l_lean_parser_term_paren;
x_58 = l_lean_parser_term_paren_has__view;
x_59 = l_lean_parser_combinators_node_view___rarg(x_53, x_54, x_55, x_56, x_57, x_52, x_58);
return x_59;
}
}
obj* _init_l_lean_parser_term_paren_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_12; uint8 x_13; obj* x_14; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; 
x_0 = lean::mk_string("(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::mk_string(", ");
x_9 = l_string_trim(x_8);
lean::inc(x_9);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_11, 0, x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_12, 0, x_9);
lean::closure_set(x_12, 1, x_6);
lean::closure_set(x_12, 2, x_11);
x_13 = 0;
x_14 = lean::box(x_13);
lean::inc(x_12);
lean::inc(x_7);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__1___boxed), 8, 3);
lean::closure_set(x_17, 0, x_7);
lean::closure_set(x_17, 1, x_12);
lean::closure_set(x_17, 2, x_14);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_12);
lean::cnstr_set(x_20, 1, x_19);
x_21 = l_lean_parser_term_tuple;
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_22, 0, x_21);
lean::closure_set(x_22, 1, x_20);
x_23 = lean::mk_string(" : ");
x_24 = l_string_trim(x_23);
lean::inc(x_24);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_26, 0, x_24);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_27, 0, x_24);
lean::closure_set(x_27, 1, x_6);
lean::closure_set(x_27, 2, x_26);
lean::inc(x_7);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_7);
lean::cnstr_set(x_29, 1, x_18);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_27);
lean::cnstr_set(x_30, 1, x_29);
x_31 = l_lean_parser_term_typed;
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_32, 0, x_31);
lean::closure_set(x_32, 1, x_30);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_18);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_22);
lean::cnstr_set(x_34, 1, x_33);
x_35 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_35, 0, x_34);
lean::closure_set(x_35, 1, x_6);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_18);
x_37 = l_lean_parser_term_paren__special;
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_38, 0, x_37);
lean::closure_set(x_38, 1, x_36);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_39, 0, x_38);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_18);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_7);
lean::cnstr_set(x_41, 1, x_40);
x_42 = l_lean_parser_term_paren__content;
x_43 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_43, 0, x_42);
lean::closure_set(x_43, 1, x_41);
x_44 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_44, 0, x_43);
x_45 = lean::mk_string(")");
x_46 = l_string_trim(x_45);
lean::inc(x_46);
x_48 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_48, 0, x_46);
x_49 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_49, 0, x_46);
lean::closure_set(x_49, 1, x_6);
lean::closure_set(x_49, 2, x_48);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_18);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_44);
lean::cnstr_set(x_51, 1, x_50);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_5);
lean::cnstr_set(x_52, 1, x_51);
return x_52;
}
}
obj* l_lean_parser_term_paren_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_paren;
x_6 = l_lean_parser_term_paren_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_hole() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("hole");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_hole_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_1 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_2 = l_option_map___rarg(x_1, x_0);
x_3 = lean::box(3);
x_4 = l_option_get__or__else___main___rarg(x_2, x_3);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = l_lean_parser_term_hole;
x_8 = l_lean_parser_syntax_mk__node(x_7, x_6);
return x_8;
}
}
obj* _init_l_lean_parser_term_hole_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_string__lit_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_hole_has__view_x_27___lambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_hole_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_hole_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_hole_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; 
x_0 = lean::mk_string("_");
x_1 = l_lean_parser_max__prec;
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::box(0);
x_4 = l_lean_parser_list_cons_tokens___rarg(x_2, x_3);
x_5 = l_lean_parser_tokens___rarg(x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_hole_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_0 = lean::mk_string("_");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = l_lean_parser_term__parser__m_monad;
x_9 = l_lean_parser_term__parser__m_monad__except;
x_10 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_11 = l_lean_parser_term__parser__m_alternative;
x_12 = l_lean_parser_term_hole;
x_13 = l_lean_parser_term_hole_has__view;
x_14 = l_lean_parser_combinators_node_view___rarg(x_8, x_9, x_10, x_11, x_12, x_7, x_13);
return x_14;
}
}
obj* _init_l_lean_parser_term_hole_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::mk_string("_");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
return x_7;
}
}
obj* l_lean_parser_term_hole_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_hole;
x_6 = l_lean_parser_term_hole_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_sort() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("sort");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(0);
x_1 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(0);
x_1 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_8; obj* x_11; obj* x_12; 
x_8 = lean::cnstr_get(x_0, 0);
lean::inc(x_8);
lean::dec(x_0);
x_11 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_11, 0, x_8);
x_12 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_12, 0, x_11);
return x_12;
}
case 3:
{
obj* x_13; 
x_13 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1;
return x_13;
}
default:
{
obj* x_15; 
lean::dec(x_0);
x_15 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1;
return x_15;
}
}
}
else
{
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_16; obj* x_19; obj* x_20; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_19, 0, x_16);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
case 3:
{
obj* x_21; 
x_21 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2;
return x_21;
}
default:
{
obj* x_23; 
lean::dec(x_0);
x_23 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2;
return x_23;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("sort");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_sort_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__4;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_68; obj* x_71; obj* x_72; 
x_68 = lean::cnstr_get(x_1, 0);
lean::inc(x_68);
lean::dec(x_1);
x_71 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_71, 0, x_68);
x_72 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_72, 0, x_71);
return x_72;
}
case 3:
{
obj* x_73; 
x_73 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1;
return x_73;
}
default:
{
obj* x_75; 
lean::dec(x_1);
x_75 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1;
return x_75;
}
}
}
else
{
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_76; obj* x_79; obj* x_80; 
x_76 = lean::cnstr_get(x_1, 0);
lean::inc(x_76);
lean::dec(x_1);
x_79 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_79, 0, x_76);
x_80 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_80, 0, x_79);
return x_80;
}
case 3:
{
obj* x_81; 
x_81 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2;
return x_81;
}
default:
{
obj* x_83; 
lean::dec(x_1);
x_83 = l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2;
return x_83;
}
}
}
}
}
}
obj* l_lean_parser_term_sort_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_6 = l_option_map___rarg(x_5, x_2);
x_7 = lean::box(3);
x_8 = l_option_get__or__else___main___rarg(x_6, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_1);
x_10 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_11 = l_lean_parser_syntax_mk__node(x_10, x_9);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_1);
x_13 = l_lean_parser_term_sort;
x_14 = l_lean_parser_syntax_mk__node(x_13, x_12);
return x_14;
}
else
{
obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_15 = lean::cnstr_get(x_0, 0);
lean::inc(x_15);
lean::dec(x_0);
x_18 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_19 = l_option_map___rarg(x_18, x_15);
x_20 = lean::box(3);
x_21 = l_option_get__or__else___main___rarg(x_19, x_20);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_1);
x_23 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_24 = l_lean_parser_syntax_mk__node(x_23, x_22);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_1);
x_26 = l_lean_parser_term_sort;
x_27 = l_lean_parser_syntax_mk__node(x_26, x_25);
return x_27;
}
}
}
obj* _init_l_lean_parser_term_sort_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_sort_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_sort_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_sort_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_0 = lean::mk_string("Sort");
x_1 = l_lean_parser_max__prec;
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::mk_string("Type");
x_4 = l_lean_parser_symbol_tokens___rarg(x_3, x_1);
x_5 = lean::box(0);
x_6 = l_lean_parser_list_cons_tokens___rarg(x_4, x_5);
x_7 = l_lean_parser_list_cons_tokens___rarg(x_2, x_6);
x_8 = l_lean_parser_tokens___rarg(x_7);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_8, x_5);
x_10 = l_lean_parser_tokens___rarg(x_9);
return x_10;
}
}
obj* _init_l_lean_parser_term_sort_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_0 = lean::mk_string("Sort");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_string("Type");
x_7 = l_string_trim(x_6);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_10, 0, x_7);
lean::closure_set(x_10, 1, x_4);
lean::closure_set(x_10, 2, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_5);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::mk_nat_obj(0u);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_15, 0, x_13);
lean::closure_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_11);
x_17 = l_lean_parser_term__parser__m_monad;
x_18 = l_lean_parser_term__parser__m_monad__except;
x_19 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_20 = l_lean_parser_term__parser__m_alternative;
x_21 = l_lean_parser_term_sort;
x_22 = l_lean_parser_term_sort_has__view;
x_23 = l_lean_parser_combinators_node_view___rarg(x_17, x_18, x_19, x_20, x_21, x_16, x_22);
return x_23;
}
}
obj* _init_l_lean_parser_term_sort_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_0 = lean::mk_string("Sort");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_string("Type");
x_7 = l_string_trim(x_6);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_10, 0, x_7);
lean::closure_set(x_10, 1, x_4);
lean::closure_set(x_10, 2, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_5);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::mk_nat_obj(0u);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_15, 0, x_13);
lean::closure_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_11);
return x_16;
}
}
obj* l_lean_parser_term_sort_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_sort;
x_6 = l_lean_parser_term_sort_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_type__spec() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("type_spec");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_type__spec_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
lean::dec(x_5);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
x_10 = l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1;
return x_10;
}
else
{
obj* x_11; obj* x_14; obj* x_15; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
lean::dec(x_6);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_11);
return x_15;
}
}
else
{
obj* x_16; obj* x_18; 
x_16 = lean::cnstr_get(x_6, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_6, 1);
lean::inc(x_18);
lean::dec(x_6);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_21; obj* x_24; 
x_21 = lean::cnstr_get(x_16, 0);
lean::inc(x_21);
lean::dec(x_16);
if (lean::is_scalar(x_5)) {
 x_24 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_24 = x_5;
}
lean::cnstr_set(x_24, 0, x_21);
if (lean::obj_tag(x_18) == 0)
{
obj* x_25; obj* x_26; 
x_25 = lean::box(3);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_30; 
x_27 = lean::cnstr_get(x_18, 0);
lean::inc(x_27);
lean::dec(x_18);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_24);
lean::cnstr_set(x_30, 1, x_27);
return x_30;
}
}
case 3:
{
lean::dec(x_5);
if (lean::obj_tag(x_18) == 0)
{
obj* x_32; 
x_32 = l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1;
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_18, 0);
lean::inc(x_33);
lean::dec(x_18);
x_36 = lean::box(0);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_33);
return x_37;
}
}
default:
{
lean::dec(x_5);
lean::dec(x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_40; 
x_40 = l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1;
return x_40;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_18, 0);
lean::inc(x_41);
lean::dec(x_18);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
}
}
}
}
}
obj* l_lean_parser_term_type__spec_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_7 = l_option_map___rarg(x_6, x_1);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_3);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_9);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_lean_parser_term_type__spec;
x_14 = l_lean_parser_syntax_mk__node(x_13, x_12);
return x_14;
}
}
obj* _init_l_lean_parser_term_type__spec_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_type__spec_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_type__spec_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_type__spec_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_type__spec_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_type__spec_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::mk_string(" : ");
x_1 = lean::mk_nat_obj(0u);
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::box(0);
x_4 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_5 = l_lean_parser_list_cons_tokens___rarg(x_4, x_3);
x_6 = l_lean_parser_list_cons_tokens___rarg(x_2, x_5);
x_7 = l_lean_parser_tokens___rarg(x_6);
return x_7;
}
}
obj* _init_l_lean_parser_term_type__spec_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_0 = lean::mk_string(" : ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_5);
lean::cnstr_set(x_9, 1, x_8);
x_10 = l_lean_parser_term__parser__m_monad;
x_11 = l_lean_parser_term__parser__m_monad__except;
x_12 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_13 = l_lean_parser_term__parser__m_alternative;
x_14 = l_lean_parser_term_type__spec;
x_15 = l_lean_parser_term_type__spec_has__view;
x_16 = l_lean_parser_combinators_node_view___rarg(x_10, x_11, x_12, x_13, x_14, x_9, x_15);
return x_16;
}
}
obj* _init_l_lean_parser_term_type__spec_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::mk_string(" : ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_5);
lean::cnstr_set(x_9, 1, x_8);
return x_9;
}
}
obj* l_lean_parser_term_type__spec_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_type__spec;
x_6 = l_lean_parser_term_type__spec_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_opt__type_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_type__spec_parser_lean_parser_has__tokens;
x_1 = l_lean_parser_tokens___rarg(x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_opt__type_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_lean_parser_term__parser__m_monad;
x_1 = l_lean_parser_term__parser__m_monad__except;
x_2 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_3 = l_lean_parser_term__parser__m_alternative;
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_type__spec_parser), 5, 0);
x_5 = l_lean_parser_term_type__spec_parser_lean_parser_has__view;
x_6 = l_lean_parser_combinators_optional_view___rarg(x_0, x_1, x_2, x_3, x_4, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_opt__type_parser___closed__1() {
_start:
{
obj* x_0; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_type__spec_parser), 5, 0);
return x_0;
}
}
obj* l_lean_parser_term_opt__type_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; 
x_5 = l_lean_parser_term_opt__type_parser___closed__1;
x_6 = l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7(x_5, x_0, x_1, x_2, x_3, x_4);
return x_6;
}
}
obj* _init_l_lean_parser_term_opt__type_view__default() {
_start:
{
obj* x_0; 
x_0 = lean::box(0);
return x_0;
}
}
obj* _init_l_lean_parser_term_binder__ident() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binder_ident");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
x_4 = lean_name_mk_string(x_0, x_1);
x_5 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_3);
lean::cnstr_set(x_5, 2, x_4);
lean::cnstr_set(x_5, 3, x_0);
lean::cnstr_set(x_5, 4, x_0);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__1;
return x_0;
}
}
obj* _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; obj* x_9; obj* x_12; obj* x_13; 
x_8 = l_lean_parser_term_hole_has__view;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_0);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
else
{
switch (lean::obj_tag(x_0)) {
case 1:
{
obj* x_14; obj* x_17; 
x_14 = lean::cnstr_get(x_0, 0);
lean::inc(x_14);
lean::dec(x_0);
x_17 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_17, 0, x_14);
return x_17;
}
case 3:
{
obj* x_18; 
x_18 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2;
return x_18;
}
default:
{
obj* x_20; 
lean::dec(x_0);
x_20 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2;
return x_20;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binder_ident");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__4;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; obj* x_69; obj* x_72; obj* x_73; 
x_68 = l_lean_parser_term_hole_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_1);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
else
{
switch (lean::obj_tag(x_1)) {
case 1:
{
obj* x_74; obj* x_77; 
x_74 = lean::cnstr_get(x_1, 0);
lean::inc(x_74);
lean::dec(x_1);
x_77 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_77, 0, x_74);
return x_77;
}
case 3:
{
obj* x_78; 
x_78 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2;
return x_78;
}
default:
{
obj* x_80; 
lean::dec(x_1);
x_80 = l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2;
return x_80;
}
}
}
}
}
}
obj* l_lean_parser_term_binder__ident_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_2);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_1);
x_7 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_8 = l_lean_parser_syntax_mk__node(x_7, x_6);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_1);
x_10 = l_lean_parser_term_binder__ident;
x_11 = l_lean_parser_syntax_mk__node(x_10, x_9);
return x_11;
}
else
{
obj* x_12; obj* x_15; obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_12 = lean::cnstr_get(x_0, 0);
lean::inc(x_12);
lean::dec(x_0);
x_15 = l_lean_parser_term_hole_has__view;
x_16 = lean::cnstr_get(x_15, 1);
lean::inc(x_16);
lean::dec(x_15);
x_19 = lean::apply_1(x_16, x_12);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_1);
x_21 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_22 = l_lean_parser_syntax_mk__node(x_21, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_1);
x_24 = l_lean_parser_term_binder__ident;
x_25 = l_lean_parser_syntax_mk__node(x_24, x_23);
return x_25;
}
}
}
obj* _init_l_lean_parser_term_binder__ident_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__ident_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__ident_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_binder__ident_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binder__ident_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_binder__ident_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::box(0);
x_1 = l_lean_parser_term_hole_parser_lean_parser_has__tokens;
x_2 = l_lean_parser_list_cons_tokens___rarg(x_1, x_0);
x_3 = l_lean_parser_list_cons_tokens___rarg(x_0, x_2);
x_4 = l_lean_parser_tokens___rarg(x_3);
x_5 = l_lean_parser_list_cons_tokens___rarg(x_4, x_0);
x_6 = l_lean_parser_tokens___rarg(x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_binder__ident_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_hole_parser), 5, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_6, 0, x_4);
lean::closure_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
x_8 = l_lean_parser_term__parser__m_monad;
x_9 = l_lean_parser_term__parser__m_monad__except;
x_10 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_11 = l_lean_parser_term__parser__m_alternative;
x_12 = l_lean_parser_term_binder__ident;
x_13 = l_lean_parser_term_binder__ident_has__view;
x_14 = l_lean_parser_combinators_node_view___rarg(x_8, x_9, x_10, x_11, x_12, x_7, x_13);
return x_14;
}
}
obj* _init_l_lean_parser_term_binder__ident_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_hole_parser), 5, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_6, 0, x_4);
lean::closure_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
return x_7;
}
}
obj* l_lean_parser_term_binder__ident_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_binder__ident;
x_6 = l_lean_parser_term_binder__ident_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_binder__default__val() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binder_default_val");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
lean::dec(x_5);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
x_10 = l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1;
return x_10;
}
else
{
obj* x_11; obj* x_14; obj* x_15; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
lean::dec(x_6);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_11);
return x_15;
}
}
else
{
obj* x_16; obj* x_18; 
x_16 = lean::cnstr_get(x_6, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_6, 1);
lean::inc(x_18);
lean::dec(x_6);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_21; obj* x_24; 
x_21 = lean::cnstr_get(x_16, 0);
lean::inc(x_21);
lean::dec(x_16);
if (lean::is_scalar(x_5)) {
 x_24 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_24 = x_5;
}
lean::cnstr_set(x_24, 0, x_21);
if (lean::obj_tag(x_18) == 0)
{
obj* x_25; obj* x_26; 
x_25 = lean::box(3);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_30; 
x_27 = lean::cnstr_get(x_18, 0);
lean::inc(x_27);
lean::dec(x_18);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_24);
lean::cnstr_set(x_30, 1, x_27);
return x_30;
}
}
case 3:
{
lean::dec(x_5);
if (lean::obj_tag(x_18) == 0)
{
obj* x_32; 
x_32 = l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1;
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_18, 0);
lean::inc(x_33);
lean::dec(x_18);
x_36 = lean::box(0);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_33);
return x_37;
}
}
default:
{
lean::dec(x_5);
lean::dec(x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_40; 
x_40 = l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1;
return x_40;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_18, 0);
lean::inc(x_41);
lean::dec(x_18);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
}
}
}
}
}
obj* l_lean_parser_term_binder__default__val_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_7 = l_option_map___rarg(x_6, x_1);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_3);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_9);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_lean_parser_term_binder__default__val;
x_14 = l_lean_parser_syntax_mk__node(x_13, x_12);
return x_14;
}
}
obj* _init_l_lean_parser_term_binder__default__val_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default__val_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_binder__default__val_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binder__default__val_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_binder__default__tac() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binder_default_tac");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
lean::dec(x_5);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
x_10 = l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1;
return x_10;
}
else
{
obj* x_11; obj* x_14; obj* x_15; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
lean::dec(x_6);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_11);
return x_15;
}
}
else
{
obj* x_16; obj* x_18; 
x_16 = lean::cnstr_get(x_6, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_6, 1);
lean::inc(x_18);
lean::dec(x_6);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_21; obj* x_24; 
x_21 = lean::cnstr_get(x_16, 0);
lean::inc(x_21);
lean::dec(x_16);
if (lean::is_scalar(x_5)) {
 x_24 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_24 = x_5;
}
lean::cnstr_set(x_24, 0, x_21);
if (lean::obj_tag(x_18) == 0)
{
obj* x_25; obj* x_26; 
x_25 = lean::box(3);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_30; 
x_27 = lean::cnstr_get(x_18, 0);
lean::inc(x_27);
lean::dec(x_18);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_24);
lean::cnstr_set(x_30, 1, x_27);
return x_30;
}
}
case 3:
{
lean::dec(x_5);
if (lean::obj_tag(x_18) == 0)
{
obj* x_32; 
x_32 = l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1;
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_18, 0);
lean::inc(x_33);
lean::dec(x_18);
x_36 = lean::box(0);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_33);
return x_37;
}
}
default:
{
lean::dec(x_5);
lean::dec(x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_40; 
x_40 = l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1;
return x_40;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_18, 0);
lean::inc(x_41);
lean::dec(x_18);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
}
}
}
}
}
obj* l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_7 = l_option_map___rarg(x_6, x_1);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_3);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_9);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_lean_parser_term_binder__default__tac;
x_14 = l_lean_parser_syntax_mk__node(x_13, x_12);
return x_14;
}
}
obj* _init_l_lean_parser_term_binder__default__tac_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_binder__default__tac_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binder__default__tac_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_binder__default() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binder_default");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; obj* x_9; obj* x_12; obj* x_13; 
x_8 = l_lean_parser_term_binder__default__tac_has__view;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_0);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
else
{
obj* x_14; obj* x_15; obj* x_18; obj* x_19; 
x_14 = l_lean_parser_term_binder__default__val_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_0);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
}
}
obj* _init_l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binder_default");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_binder__default_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__2;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; obj* x_69; obj* x_72; obj* x_73; 
x_68 = l_lean_parser_term_binder__default__tac_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_1);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
else
{
obj* x_74; obj* x_75; obj* x_78; obj* x_79; 
x_74 = l_lean_parser_term_binder__default__val_has__view;
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
lean::dec(x_74);
x_78 = lean::apply_1(x_75, x_1);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
}
}
obj* l_lean_parser_term_binder__default_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_binder__default__val_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_lean_parser_term_binder__default;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_lean_parser_term_binder__default__tac_has__view;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_26 = l_lean_parser_syntax_mk__node(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_lean_parser_term_binder__default;
x_29 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_lean_parser_term_binder__default_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_binder__default_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binder__default_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_binder__default_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_0 = lean::mk_string(":=");
x_1 = lean::mk_nat_obj(0u);
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::box(0);
x_4 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_5 = l_lean_parser_list_cons_tokens___rarg(x_4, x_3);
lean::inc(x_5);
x_7 = l_lean_parser_list_cons_tokens___rarg(x_2, x_5);
x_8 = l_lean_parser_tokens___rarg(x_7);
x_9 = lean::mk_string(".");
x_10 = l_lean_parser_symbol_tokens___rarg(x_9, x_1);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_10, x_5);
x_12 = l_lean_parser_tokens___rarg(x_11);
x_13 = l_lean_parser_list_cons_tokens___rarg(x_12, x_3);
x_14 = l_lean_parser_list_cons_tokens___rarg(x_8, x_13);
x_15 = l_lean_parser_tokens___rarg(x_14);
x_16 = l_lean_parser_list_cons_tokens___rarg(x_15, x_3);
x_17 = l_lean_parser_tokens___rarg(x_16);
return x_17;
}
}
obj* _init_l_lean_parser_term_binder__default_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_0 = lean::mk_string(":=");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
lean::inc(x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_5);
lean::cnstr_set(x_10, 1, x_8);
x_11 = l_lean_parser_term_binder__default__val;
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_12, 0, x_11);
lean::closure_set(x_12, 1, x_10);
x_13 = lean::mk_string(".");
x_14 = l_string_trim(x_13);
lean::inc(x_14);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_16, 0, x_14);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_17, 0, x_14);
lean::closure_set(x_17, 1, x_4);
lean::closure_set(x_17, 2, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_8);
x_19 = l_lean_parser_term_binder__default__tac;
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_20, 0, x_19);
lean::closure_set(x_20, 1, x_18);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_7);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_12);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_23, 0, x_22);
lean::closure_set(x_23, 1, x_4);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_7);
x_25 = l_lean_parser_term__parser__m_monad;
x_26 = l_lean_parser_term__parser__m_monad__except;
x_27 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_28 = l_lean_parser_term__parser__m_alternative;
x_29 = l_lean_parser_term_binder__default;
x_30 = l_lean_parser_term_binder__default_has__view;
x_31 = l_lean_parser_combinators_node_view___rarg(x_25, x_26, x_27, x_28, x_29, x_24, x_30);
return x_31;
}
}
obj* _init_l_lean_parser_term_binder__default_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_0 = lean::mk_string(":=");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
lean::inc(x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_5);
lean::cnstr_set(x_10, 1, x_8);
x_11 = l_lean_parser_term_binder__default__val;
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_12, 0, x_11);
lean::closure_set(x_12, 1, x_10);
x_13 = lean::mk_string(".");
x_14 = l_string_trim(x_13);
lean::inc(x_14);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_16, 0, x_14);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_17, 0, x_14);
lean::closure_set(x_17, 1, x_4);
lean::closure_set(x_17, 2, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_8);
x_19 = l_lean_parser_term_binder__default__tac;
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_20, 0, x_19);
lean::closure_set(x_20, 1, x_18);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_7);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_12);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_23, 0, x_22);
lean::closure_set(x_23, 1, x_4);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_7);
return x_24;
}
}
obj* l_lean_parser_term_binder__default_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_binder__default;
x_6 = l_lean_parser_term_binder__default_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_binder__content() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binder_content");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_lean_parser_term_binder__default_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_lean_parser_term_type__spec_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = l_lean_parser_term_binder__ident_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
return x_7;
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_binder__ident_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__5() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_7; 
x_7 = l_lean_parser_syntax_as__node___main(x_1);
if (lean::obj_tag(x_7) == 0)
{
obj* x_8; 
x_8 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3;
x_5 = x_8;
goto lbl_6;
}
else
{
obj* x_9; obj* x_12; obj* x_15; obj* x_16; 
x_9 = lean::cnstr_get(x_7, 0);
lean::inc(x_9);
lean::dec(x_7);
x_12 = lean::cnstr_get(x_9, 1);
lean::inc(x_12);
lean::dec(x_9);
x_15 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4;
x_16 = l_list_map___main___rarg(x_15, x_12);
x_5 = x_16;
goto lbl_6;
}
lbl_6:
{
obj* x_17; obj* x_19; obj* x_20; obj* x_22; obj* x_23; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_25; 
x_25 = lean::box(3);
x_22 = x_0;
x_23 = x_25;
goto lbl_24;
}
else
{
obj* x_26; obj* x_28; 
x_26 = lean::cnstr_get(x_0, 0);
lean::inc(x_26);
x_28 = lean::cnstr_get(x_0, 1);
lean::inc(x_28);
lean::dec(x_0);
x_22 = x_28;
x_23 = x_26;
goto lbl_24;
}
lbl_18:
{
obj* x_31; obj* x_32; 
x_31 = lean::box(3);
x_32 = l_lean_parser_syntax_as__node___main(x_31);
if (lean::obj_tag(x_32) == 0)
{
obj* x_33; obj* x_34; 
x_33 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
x_34 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_34, 0, x_5);
lean::cnstr_set(x_34, 1, x_17);
lean::cnstr_set(x_34, 2, x_33);
return x_34;
}
else
{
obj* x_35; obj* x_37; obj* x_38; 
x_35 = lean::cnstr_get(x_32, 0);
if (lean::is_exclusive(x_32)) {
 lean::cnstr_set(x_32, 0, lean::box(0));
 x_37 = x_32;
} else {
 lean::inc(x_35);
 lean::dec(x_32);
 x_37 = lean::box(0);
}
x_38 = lean::cnstr_get(x_35, 1);
lean::inc(x_38);
lean::dec(x_35);
if (lean::obj_tag(x_38) == 0)
{
obj* x_42; obj* x_43; 
lean::dec(x_37);
x_42 = lean::box(0);
x_43 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_43, 0, x_5);
lean::cnstr_set(x_43, 1, x_17);
lean::cnstr_set(x_43, 2, x_42);
return x_43;
}
else
{
obj* x_44; obj* x_46; 
x_44 = lean::cnstr_get(x_38, 0);
lean::inc(x_44);
x_46 = lean::cnstr_get(x_38, 1);
lean::inc(x_46);
lean::dec(x_38);
if (lean::obj_tag(x_46) == 0)
{
obj* x_49; obj* x_50; obj* x_53; obj* x_54; obj* x_55; 
x_49 = l_lean_parser_term_binder__default_has__view;
x_50 = lean::cnstr_get(x_49, 0);
lean::inc(x_50);
lean::dec(x_49);
x_53 = lean::apply_1(x_50, x_44);
if (lean::is_scalar(x_37)) {
 x_54 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_54 = x_37;
}
lean::cnstr_set(x_54, 0, x_53);
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_5);
lean::cnstr_set(x_55, 1, x_17);
lean::cnstr_set(x_55, 2, x_54);
return x_55;
}
else
{
obj* x_59; obj* x_60; 
lean::dec(x_46);
lean::dec(x_44);
lean::dec(x_37);
x_59 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
x_60 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_60, 0, x_5);
lean::cnstr_set(x_60, 1, x_17);
lean::cnstr_set(x_60, 2, x_59);
return x_60;
}
}
}
}
lbl_21:
{
obj* x_61; 
x_61 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_61) == 0)
{
obj* x_62; obj* x_63; 
x_62 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
x_63 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_63, 0, x_5);
lean::cnstr_set(x_63, 1, x_19);
lean::cnstr_set(x_63, 2, x_62);
return x_63;
}
else
{
obj* x_64; obj* x_66; obj* x_67; 
x_64 = lean::cnstr_get(x_61, 0);
if (lean::is_exclusive(x_61)) {
 lean::cnstr_set(x_61, 0, lean::box(0));
 x_66 = x_61;
} else {
 lean::inc(x_64);
 lean::dec(x_61);
 x_66 = lean::box(0);
}
x_67 = lean::cnstr_get(x_64, 1);
lean::inc(x_67);
lean::dec(x_64);
if (lean::obj_tag(x_67) == 0)
{
obj* x_71; obj* x_72; 
lean::dec(x_66);
x_71 = lean::box(0);
x_72 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_72, 0, x_5);
lean::cnstr_set(x_72, 1, x_19);
lean::cnstr_set(x_72, 2, x_71);
return x_72;
}
else
{
obj* x_73; obj* x_75; 
x_73 = lean::cnstr_get(x_67, 0);
lean::inc(x_73);
x_75 = lean::cnstr_get(x_67, 1);
lean::inc(x_75);
lean::dec(x_67);
if (lean::obj_tag(x_75) == 0)
{
obj* x_78; obj* x_79; obj* x_82; obj* x_83; obj* x_84; 
x_78 = l_lean_parser_term_binder__default_has__view;
x_79 = lean::cnstr_get(x_78, 0);
lean::inc(x_79);
lean::dec(x_78);
x_82 = lean::apply_1(x_79, x_73);
if (lean::is_scalar(x_66)) {
 x_83 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_83 = x_66;
}
lean::cnstr_set(x_83, 0, x_82);
x_84 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_84, 0, x_5);
lean::cnstr_set(x_84, 1, x_19);
lean::cnstr_set(x_84, 2, x_83);
return x_84;
}
else
{
obj* x_88; obj* x_89; 
lean::dec(x_75);
lean::dec(x_73);
lean::dec(x_66);
x_88 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
x_89 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_89, 0, x_5);
lean::cnstr_set(x_89, 1, x_19);
lean::cnstr_set(x_89, 2, x_88);
return x_89;
}
}
}
}
lbl_24:
{
obj* x_90; 
x_90 = l_lean_parser_syntax_as__node___main(x_23);
if (lean::obj_tag(x_90) == 0)
{
if (lean::obj_tag(x_22) == 0)
{
obj* x_91; 
x_91 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_17 = x_91;
goto lbl_18;
}
else
{
obj* x_92; obj* x_95; 
x_92 = lean::cnstr_get(x_22, 0);
lean::inc(x_92);
lean::dec(x_22);
x_95 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_19 = x_95;
x_20 = x_92;
goto lbl_21;
}
}
else
{
obj* x_96; obj* x_98; obj* x_99; 
x_96 = lean::cnstr_get(x_90, 0);
if (lean::is_exclusive(x_90)) {
 lean::cnstr_set(x_90, 0, lean::box(0));
 x_98 = x_90;
} else {
 lean::inc(x_96);
 lean::dec(x_90);
 x_98 = lean::box(0);
}
x_99 = lean::cnstr_get(x_96, 1);
lean::inc(x_99);
lean::dec(x_96);
if (lean::obj_tag(x_99) == 0)
{
obj* x_103; 
lean::dec(x_98);
x_103 = lean::box(0);
if (lean::obj_tag(x_22) == 0)
{
x_17 = x_103;
goto lbl_18;
}
else
{
obj* x_104; 
x_104 = lean::cnstr_get(x_22, 0);
lean::inc(x_104);
lean::dec(x_22);
x_19 = x_103;
x_20 = x_104;
goto lbl_21;
}
}
else
{
obj* x_107; obj* x_109; 
x_107 = lean::cnstr_get(x_99, 0);
lean::inc(x_107);
x_109 = lean::cnstr_get(x_99, 1);
lean::inc(x_109);
lean::dec(x_99);
if (lean::obj_tag(x_109) == 0)
{
obj* x_112; obj* x_113; obj* x_116; obj* x_117; 
x_112 = l_lean_parser_term_type__spec_has__view;
x_113 = lean::cnstr_get(x_112, 0);
lean::inc(x_113);
lean::dec(x_112);
x_116 = lean::apply_1(x_113, x_107);
if (lean::is_scalar(x_98)) {
 x_117 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_117 = x_98;
}
lean::cnstr_set(x_117, 0, x_116);
if (lean::obj_tag(x_22) == 0)
{
x_17 = x_117;
goto lbl_18;
}
else
{
obj* x_118; 
x_118 = lean::cnstr_get(x_22, 0);
lean::inc(x_118);
lean::dec(x_22);
x_19 = x_117;
x_20 = x_118;
goto lbl_21;
}
}
else
{
lean::dec(x_107);
lean::dec(x_98);
lean::dec(x_109);
if (lean::obj_tag(x_22) == 0)
{
obj* x_124; 
x_124 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_17 = x_124;
goto lbl_18;
}
else
{
obj* x_125; obj* x_128; 
x_125 = lean::cnstr_get(x_22, 0);
lean::inc(x_125);
lean::dec(x_22);
x_128 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_19 = x_128;
x_20 = x_125;
goto lbl_21;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__5;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; obj* x_20; 
x_20 = l_lean_parser_syntax_as__node___main(x_2);
if (lean::obj_tag(x_20) == 0)
{
obj* x_21; 
x_21 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3;
x_18 = x_21;
goto lbl_19;
}
else
{
obj* x_22; obj* x_25; obj* x_28; obj* x_29; 
x_22 = lean::cnstr_get(x_20, 0);
lean::inc(x_22);
lean::dec(x_20);
x_25 = lean::cnstr_get(x_22, 1);
lean::inc(x_25);
lean::dec(x_22);
x_28 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4;
x_29 = l_list_map___main___rarg(x_28, x_25);
x_18 = x_29;
goto lbl_19;
}
lbl_19:
{
obj* x_30; obj* x_32; obj* x_33; obj* x_35; obj* x_36; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_38; 
x_38 = lean::box(3);
x_35 = x_1;
x_36 = x_38;
goto lbl_37;
}
else
{
obj* x_39; obj* x_41; 
x_39 = lean::cnstr_get(x_1, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_1, 1);
lean::inc(x_41);
lean::dec(x_1);
x_35 = x_41;
x_36 = x_39;
goto lbl_37;
}
lbl_31:
{
obj* x_44; obj* x_45; 
x_44 = lean::box(3);
x_45 = l_lean_parser_syntax_as__node___main(x_44);
if (lean::obj_tag(x_45) == 0)
{
obj* x_46; obj* x_47; 
x_46 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_18);
lean::cnstr_set(x_47, 1, x_30);
lean::cnstr_set(x_47, 2, x_46);
return x_47;
}
else
{
obj* x_48; obj* x_50; obj* x_51; 
x_48 = lean::cnstr_get(x_45, 0);
if (lean::is_exclusive(x_45)) {
 lean::cnstr_set(x_45, 0, lean::box(0));
 x_50 = x_45;
} else {
 lean::inc(x_48);
 lean::dec(x_45);
 x_50 = lean::box(0);
}
x_51 = lean::cnstr_get(x_48, 1);
lean::inc(x_51);
lean::dec(x_48);
if (lean::obj_tag(x_51) == 0)
{
obj* x_55; obj* x_56; 
lean::dec(x_50);
x_55 = lean::box(0);
x_56 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_56, 0, x_18);
lean::cnstr_set(x_56, 1, x_30);
lean::cnstr_set(x_56, 2, x_55);
return x_56;
}
else
{
obj* x_57; obj* x_59; 
x_57 = lean::cnstr_get(x_51, 0);
lean::inc(x_57);
x_59 = lean::cnstr_get(x_51, 1);
lean::inc(x_59);
lean::dec(x_51);
if (lean::obj_tag(x_59) == 0)
{
obj* x_62; obj* x_63; obj* x_66; obj* x_67; obj* x_68; 
x_62 = l_lean_parser_term_binder__default_has__view;
x_63 = lean::cnstr_get(x_62, 0);
lean::inc(x_63);
lean::dec(x_62);
x_66 = lean::apply_1(x_63, x_57);
if (lean::is_scalar(x_50)) {
 x_67 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_67 = x_50;
}
lean::cnstr_set(x_67, 0, x_66);
x_68 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_68, 0, x_18);
lean::cnstr_set(x_68, 1, x_30);
lean::cnstr_set(x_68, 2, x_67);
return x_68;
}
else
{
obj* x_72; obj* x_73; 
lean::dec(x_59);
lean::dec(x_57);
lean::dec(x_50);
x_72 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
x_73 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_73, 0, x_18);
lean::cnstr_set(x_73, 1, x_30);
lean::cnstr_set(x_73, 2, x_72);
return x_73;
}
}
}
}
lbl_34:
{
obj* x_74; 
x_74 = l_lean_parser_syntax_as__node___main(x_33);
if (lean::obj_tag(x_74) == 0)
{
obj* x_75; obj* x_76; 
x_75 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
x_76 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_76, 0, x_18);
lean::cnstr_set(x_76, 1, x_32);
lean::cnstr_set(x_76, 2, x_75);
return x_76;
}
else
{
obj* x_77; obj* x_79; obj* x_80; 
x_77 = lean::cnstr_get(x_74, 0);
if (lean::is_exclusive(x_74)) {
 lean::cnstr_set(x_74, 0, lean::box(0));
 x_79 = x_74;
} else {
 lean::inc(x_77);
 lean::dec(x_74);
 x_79 = lean::box(0);
}
x_80 = lean::cnstr_get(x_77, 1);
lean::inc(x_80);
lean::dec(x_77);
if (lean::obj_tag(x_80) == 0)
{
obj* x_84; obj* x_85; 
lean::dec(x_79);
x_84 = lean::box(0);
x_85 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_85, 0, x_18);
lean::cnstr_set(x_85, 1, x_32);
lean::cnstr_set(x_85, 2, x_84);
return x_85;
}
else
{
obj* x_86; obj* x_88; 
x_86 = lean::cnstr_get(x_80, 0);
lean::inc(x_86);
x_88 = lean::cnstr_get(x_80, 1);
lean::inc(x_88);
lean::dec(x_80);
if (lean::obj_tag(x_88) == 0)
{
obj* x_91; obj* x_92; obj* x_95; obj* x_96; obj* x_97; 
x_91 = l_lean_parser_term_binder__default_has__view;
x_92 = lean::cnstr_get(x_91, 0);
lean::inc(x_92);
lean::dec(x_91);
x_95 = lean::apply_1(x_92, x_86);
if (lean::is_scalar(x_79)) {
 x_96 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_96 = x_79;
}
lean::cnstr_set(x_96, 0, x_95);
x_97 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_97, 0, x_18);
lean::cnstr_set(x_97, 1, x_32);
lean::cnstr_set(x_97, 2, x_96);
return x_97;
}
else
{
obj* x_101; obj* x_102; 
lean::dec(x_79);
lean::dec(x_86);
lean::dec(x_88);
x_101 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1;
x_102 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_102, 0, x_18);
lean::cnstr_set(x_102, 1, x_32);
lean::cnstr_set(x_102, 2, x_101);
return x_102;
}
}
}
}
lbl_37:
{
obj* x_103; 
x_103 = l_lean_parser_syntax_as__node___main(x_36);
if (lean::obj_tag(x_103) == 0)
{
if (lean::obj_tag(x_35) == 0)
{
obj* x_104; 
x_104 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_30 = x_104;
goto lbl_31;
}
else
{
obj* x_105; obj* x_108; 
x_105 = lean::cnstr_get(x_35, 0);
lean::inc(x_105);
lean::dec(x_35);
x_108 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_32 = x_108;
x_33 = x_105;
goto lbl_34;
}
}
else
{
obj* x_109; obj* x_111; obj* x_112; 
x_109 = lean::cnstr_get(x_103, 0);
if (lean::is_exclusive(x_103)) {
 lean::cnstr_set(x_103, 0, lean::box(0));
 x_111 = x_103;
} else {
 lean::inc(x_109);
 lean::dec(x_103);
 x_111 = lean::box(0);
}
x_112 = lean::cnstr_get(x_109, 1);
lean::inc(x_112);
lean::dec(x_109);
if (lean::obj_tag(x_112) == 0)
{
obj* x_116; 
lean::dec(x_111);
x_116 = lean::box(0);
if (lean::obj_tag(x_35) == 0)
{
x_30 = x_116;
goto lbl_31;
}
else
{
obj* x_117; 
x_117 = lean::cnstr_get(x_35, 0);
lean::inc(x_117);
lean::dec(x_35);
x_32 = x_116;
x_33 = x_117;
goto lbl_34;
}
}
else
{
obj* x_120; obj* x_122; 
x_120 = lean::cnstr_get(x_112, 0);
lean::inc(x_120);
x_122 = lean::cnstr_get(x_112, 1);
lean::inc(x_122);
lean::dec(x_112);
if (lean::obj_tag(x_122) == 0)
{
obj* x_125; obj* x_126; obj* x_129; obj* x_130; 
x_125 = l_lean_parser_term_type__spec_has__view;
x_126 = lean::cnstr_get(x_125, 0);
lean::inc(x_126);
lean::dec(x_125);
x_129 = lean::apply_1(x_126, x_120);
if (lean::is_scalar(x_111)) {
 x_130 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_130 = x_111;
}
lean::cnstr_set(x_130, 0, x_129);
if (lean::obj_tag(x_35) == 0)
{
x_30 = x_130;
goto lbl_31;
}
else
{
obj* x_131; 
x_131 = lean::cnstr_get(x_35, 0);
lean::inc(x_131);
lean::dec(x_35);
x_32 = x_130;
x_33 = x_131;
goto lbl_34;
}
}
else
{
lean::dec(x_111);
lean::dec(x_122);
lean::dec(x_120);
if (lean::obj_tag(x_35) == 0)
{
obj* x_137; 
x_137 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_30 = x_137;
goto lbl_31;
}
else
{
obj* x_138; obj* x_141; 
x_138 = lean::cnstr_get(x_35, 0);
lean::inc(x_138);
lean::dec(x_35);
x_141 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_32 = x_141;
x_33 = x_138;
goto lbl_34;
}
}
}
}
}
}
}
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_binder__ident_has__view;
x_1 = lean::cnstr_get(x_0, 1);
lean::inc(x_1);
lean::dec(x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; 
x_0 = lean::box(0);
x_1 = l_lean_parser_no__kind;
x_2 = l_lean_parser_syntax_mk__node(x_1, x_0);
lean::inc(x_2);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_2);
lean::cnstr_set(x_5, 1, x_4);
return x_5;
}
}
obj* l_lean_parser_term_binder__content_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__1;
x_9 = l_list_map___main___rarg(x_8, x_1);
x_10 = l_lean_parser_no__kind;
x_11 = l_lean_parser_syntax_mk__node(x_10, x_9);
x_12 = lean::box(0);
if (lean::obj_tag(x_3) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_13 = l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__2;
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_11);
lean::cnstr_set(x_14, 1, x_13);
x_15 = l_lean_parser_term_binder__content;
x_16 = l_lean_parser_syntax_mk__node(x_15, x_14);
return x_16;
}
else
{
obj* x_17; obj* x_20; obj* x_21; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
x_17 = lean::cnstr_get(x_5, 0);
lean::inc(x_17);
lean::dec(x_5);
x_20 = l_lean_parser_term_binder__default_has__view;
x_21 = lean::cnstr_get(x_20, 1);
lean::inc(x_21);
lean::dec(x_20);
x_24 = lean::apply_1(x_21, x_17);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_12);
x_26 = l_lean_parser_syntax_mk__node(x_10, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_12);
x_28 = l_lean_parser_combinators_many___rarg___closed__1;
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_27);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_11);
lean::cnstr_set(x_30, 1, x_29);
x_31 = l_lean_parser_term_binder__content;
x_32 = l_lean_parser_syntax_mk__node(x_31, x_30);
return x_32;
}
}
else
{
obj* x_33; obj* x_36; obj* x_37; obj* x_40; obj* x_41; obj* x_42; 
x_33 = lean::cnstr_get(x_3, 0);
lean::inc(x_33);
lean::dec(x_3);
x_36 = l_lean_parser_term_type__spec_has__view;
x_37 = lean::cnstr_get(x_36, 1);
lean::inc(x_37);
lean::dec(x_36);
x_40 = lean::apply_1(x_37, x_33);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_12);
x_42 = l_lean_parser_syntax_mk__node(x_10, x_41);
if (lean::obj_tag(x_5) == 0)
{
obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; 
x_43 = l_lean_parser_detail__ident_has__view_x_27___lambda__2___closed__1;
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_42);
lean::cnstr_set(x_44, 1, x_43);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_11);
lean::cnstr_set(x_45, 1, x_44);
x_46 = l_lean_parser_term_binder__content;
x_47 = l_lean_parser_syntax_mk__node(x_46, x_45);
return x_47;
}
else
{
obj* x_48; obj* x_51; obj* x_52; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; 
x_48 = lean::cnstr_get(x_5, 0);
lean::inc(x_48);
lean::dec(x_5);
x_51 = l_lean_parser_term_binder__default_has__view;
x_52 = lean::cnstr_get(x_51, 1);
lean::inc(x_52);
lean::dec(x_51);
x_55 = lean::apply_1(x_52, x_48);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_55);
lean::cnstr_set(x_56, 1, x_12);
x_57 = l_lean_parser_syntax_mk__node(x_10, x_56);
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_57);
lean::cnstr_set(x_58, 1, x_12);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_42);
lean::cnstr_set(x_59, 1, x_58);
x_60 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_60, 0, x_11);
lean::cnstr_set(x_60, 1, x_59);
x_61 = l_lean_parser_term_binder__content;
x_62 = l_lean_parser_syntax_mk__node(x_61, x_60);
return x_62;
}
}
}
}
obj* _init_l_lean_parser_term_binder__content_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__content_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__content_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_binder__content_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binder__content_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_binder__content_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = l_lean_parser_term_binder__ident_parser_lean_parser_has__tokens;
x_1 = l_lean_parser_tokens___rarg(x_0);
x_2 = l_lean_parser_term_binder__default_parser_lean_parser_has__tokens;
x_3 = l_lean_parser_tokens___rarg(x_2);
x_4 = lean::box(0);
x_5 = l_lean_parser_list_cons_tokens___rarg(x_3, x_4);
x_6 = l_lean_parser_term_opt__type_parser_lean_parser_has__tokens;
x_7 = l_lean_parser_list_cons_tokens___rarg(x_6, x_5);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_1, x_7);
x_9 = l_lean_parser_tokens___rarg(x_8);
return x_9;
}
}
obj* _init_l_lean_parser_term_binder__content_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__ident_parser), 5, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many1___at_lean_parser_command_notation__spec_parser_lean_parser_has__tokens___spec__2), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default_parser), 5, 0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_3, 0, x_2);
x_4 = lean::box(0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_3);
lean::cnstr_set(x_5, 1, x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_1);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_lean_parser_term__parser__m_monad;
x_10 = l_lean_parser_term__parser__m_monad__except;
x_11 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_12 = l_lean_parser_term__parser__m_alternative;
x_13 = l_lean_parser_term_binder__content;
x_14 = l_lean_parser_term_binder__content_has__view;
x_15 = l_lean_parser_combinators_node_view___rarg(x_9, x_10, x_11, x_12, x_13, x_8, x_14);
return x_15;
}
}
obj* _init_l_lean_parser_term_binder__content_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__ident_parser), 5, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many1___at_lean_parser_command_notation__spec_parser_lean_parser_has__tokens___spec__2), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__default_parser), 5, 0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_3, 0, x_2);
x_4 = lean::box(0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_3);
lean::cnstr_set(x_5, 1, x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_1);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_lean_parser_term_binder__content_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_binder__content;
x_6 = l_lean_parser_term_binder__content_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_simple__explicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("simple_explicit_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = lean::box(3);
x_14 = x_0;
x_15 = x_17;
goto lbl_16;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
x_14 = x_20;
x_15 = x_18;
goto lbl_16;
}
lbl_16:
{
obj* x_23; 
switch (lean::obj_tag(x_15)) {
case 1:
{
obj* x_25; 
x_25 = lean::cnstr_get(x_15, 0);
lean::inc(x_25);
lean::dec(x_15);
x_23 = x_25;
goto lbl_24;
}
case 3:
{
obj* x_28; 
x_28 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_23 = x_28;
goto lbl_24;
}
default:
{
obj* x_30; 
lean::dec(x_15);
x_30 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_23 = x_30;
goto lbl_24;
}
}
lbl_24:
{
obj* x_31; obj* x_32; obj* x_33; obj* x_35; obj* x_36; 
if (lean::obj_tag(x_14) == 0)
{
obj* x_38; 
x_38 = lean::box(3);
x_35 = x_14;
x_36 = x_38;
goto lbl_37;
}
else
{
obj* x_39; obj* x_41; 
x_39 = lean::cnstr_get(x_14, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_14, 1);
lean::inc(x_41);
lean::dec(x_14);
x_35 = x_41;
x_36 = x_39;
goto lbl_37;
}
lbl_34:
{
if (lean::obj_tag(x_33) == 0)
{
obj* x_44; obj* x_45; 
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_45, 0, x_5);
lean::cnstr_set(x_45, 1, x_23);
lean::cnstr_set(x_45, 2, x_31);
lean::cnstr_set(x_45, 3, x_32);
lean::cnstr_set(x_45, 4, x_44);
return x_45;
}
else
{
obj* x_46; 
x_46 = lean::cnstr_get(x_33, 0);
lean::inc(x_46);
lean::dec(x_33);
switch (lean::obj_tag(x_46)) {
case 0:
{
obj* x_49; obj* x_52; obj* x_53; 
x_49 = lean::cnstr_get(x_46, 0);
lean::inc(x_49);
lean::dec(x_46);
x_52 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_52, 0, x_49);
x_53 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_53, 0, x_5);
lean::cnstr_set(x_53, 1, x_23);
lean::cnstr_set(x_53, 2, x_31);
lean::cnstr_set(x_53, 3, x_32);
lean::cnstr_set(x_53, 4, x_52);
return x_53;
}
case 3:
{
obj* x_54; obj* x_55; 
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_55, 0, x_5);
lean::cnstr_set(x_55, 1, x_23);
lean::cnstr_set(x_55, 2, x_31);
lean::cnstr_set(x_55, 3, x_32);
lean::cnstr_set(x_55, 4, x_54);
return x_55;
}
default:
{
obj* x_57; obj* x_58; 
lean::dec(x_46);
x_57 = lean::box(0);
x_58 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_58, 0, x_5);
lean::cnstr_set(x_58, 1, x_23);
lean::cnstr_set(x_58, 2, x_31);
lean::cnstr_set(x_58, 3, x_32);
lean::cnstr_set(x_58, 4, x_57);
return x_58;
}
}
}
}
lbl_37:
{
obj* x_59; 
switch (lean::obj_tag(x_36)) {
case 0:
{
obj* x_61; obj* x_64; 
x_61 = lean::cnstr_get(x_36, 0);
lean::inc(x_61);
lean::dec(x_36);
x_64 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_64, 0, x_61);
if (lean::obj_tag(x_35) == 0)
{
x_59 = x_64;
goto lbl_60;
}
else
{
obj* x_65; obj* x_67; 
x_65 = lean::cnstr_get(x_35, 0);
lean::inc(x_65);
x_67 = lean::cnstr_get(x_35, 1);
lean::inc(x_67);
lean::dec(x_35);
x_31 = x_64;
x_32 = x_65;
x_33 = x_67;
goto lbl_34;
}
}
case 3:
{
obj* x_70; 
x_70 = lean::box(0);
if (lean::obj_tag(x_35) == 0)
{
x_59 = x_70;
goto lbl_60;
}
else
{
obj* x_71; obj* x_73; 
x_71 = lean::cnstr_get(x_35, 0);
lean::inc(x_71);
x_73 = lean::cnstr_get(x_35, 1);
lean::inc(x_73);
lean::dec(x_35);
x_31 = x_70;
x_32 = x_71;
x_33 = x_73;
goto lbl_34;
}
}
default:
{
obj* x_77; 
lean::dec(x_36);
x_77 = lean::box(0);
if (lean::obj_tag(x_35) == 0)
{
x_59 = x_77;
goto lbl_60;
}
else
{
obj* x_78; obj* x_80; 
x_78 = lean::cnstr_get(x_35, 0);
lean::inc(x_78);
x_80 = lean::cnstr_get(x_35, 1);
lean::inc(x_80);
lean::dec(x_35);
x_31 = x_77;
x_32 = x_78;
x_33 = x_80;
goto lbl_34;
}
}
}
lbl_60:
{
if (lean::obj_tag(x_35) == 0)
{
obj* x_83; obj* x_84; obj* x_85; 
x_83 = lean::box(0);
x_84 = lean::box(3);
x_85 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_85, 0, x_5);
lean::cnstr_set(x_85, 1, x_23);
lean::cnstr_set(x_85, 2, x_59);
lean::cnstr_set(x_85, 3, x_84);
lean::cnstr_set(x_85, 4, x_83);
return x_85;
}
else
{
obj* x_86; 
x_86 = lean::cnstr_get(x_35, 0);
lean::inc(x_86);
lean::dec(x_35);
switch (lean::obj_tag(x_86)) {
case 0:
{
obj* x_89; obj* x_92; obj* x_93; obj* x_94; 
x_89 = lean::cnstr_get(x_86, 0);
lean::inc(x_89);
lean::dec(x_86);
x_92 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_92, 0, x_89);
x_93 = lean::box(3);
x_94 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_94, 0, x_5);
lean::cnstr_set(x_94, 1, x_23);
lean::cnstr_set(x_94, 2, x_59);
lean::cnstr_set(x_94, 3, x_93);
lean::cnstr_set(x_94, 4, x_92);
return x_94;
}
case 3:
{
obj* x_95; obj* x_96; obj* x_97; 
x_95 = lean::box(0);
x_96 = lean::box(3);
x_97 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_97, 0, x_5);
lean::cnstr_set(x_97, 1, x_23);
lean::cnstr_set(x_97, 2, x_59);
lean::cnstr_set(x_97, 3, x_96);
lean::cnstr_set(x_97, 4, x_95);
return x_97;
}
default:
{
obj* x_99; obj* x_100; obj* x_101; 
lean::dec(x_86);
x_99 = lean::box(0);
x_100 = lean::box(3);
x_101 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_101, 0, x_5);
lean::cnstr_set(x_101, 1, x_23);
lean::cnstr_set(x_101, 2, x_59);
lean::cnstr_set(x_101, 3, x_100);
lean::cnstr_set(x_101, 4, x_99);
return x_101;
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; 
switch (lean::obj_tag(x_28)) {
case 1:
{
obj* x_38; 
x_38 = lean::cnstr_get(x_28, 0);
lean::inc(x_38);
lean::dec(x_28);
x_36 = x_38;
goto lbl_37;
}
case 3:
{
obj* x_41; 
x_41 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_36 = x_41;
goto lbl_37;
}
default:
{
obj* x_43; 
lean::dec(x_28);
x_43 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_36 = x_43;
goto lbl_37;
}
}
lbl_37:
{
obj* x_44; obj* x_45; obj* x_46; obj* x_48; obj* x_49; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_51; 
x_51 = lean::box(3);
x_48 = x_27;
x_49 = x_51;
goto lbl_50;
}
else
{
obj* x_52; obj* x_54; 
x_52 = lean::cnstr_get(x_27, 0);
lean::inc(x_52);
x_54 = lean::cnstr_get(x_27, 1);
lean::inc(x_54);
lean::dec(x_27);
x_48 = x_54;
x_49 = x_52;
goto lbl_50;
}
lbl_47:
{
if (lean::obj_tag(x_46) == 0)
{
obj* x_57; obj* x_58; 
x_57 = lean::box(0);
x_58 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_58, 0, x_18);
lean::cnstr_set(x_58, 1, x_36);
lean::cnstr_set(x_58, 2, x_44);
lean::cnstr_set(x_58, 3, x_45);
lean::cnstr_set(x_58, 4, x_57);
return x_58;
}
else
{
obj* x_59; 
x_59 = lean::cnstr_get(x_46, 0);
lean::inc(x_59);
lean::dec(x_46);
switch (lean::obj_tag(x_59)) {
case 0:
{
obj* x_62; obj* x_65; obj* x_66; 
x_62 = lean::cnstr_get(x_59, 0);
lean::inc(x_62);
lean::dec(x_59);
x_65 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_65, 0, x_62);
x_66 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_66, 0, x_18);
lean::cnstr_set(x_66, 1, x_36);
lean::cnstr_set(x_66, 2, x_44);
lean::cnstr_set(x_66, 3, x_45);
lean::cnstr_set(x_66, 4, x_65);
return x_66;
}
case 3:
{
obj* x_67; obj* x_68; 
x_67 = lean::box(0);
x_68 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_68, 0, x_18);
lean::cnstr_set(x_68, 1, x_36);
lean::cnstr_set(x_68, 2, x_44);
lean::cnstr_set(x_68, 3, x_45);
lean::cnstr_set(x_68, 4, x_67);
return x_68;
}
default:
{
obj* x_70; obj* x_71; 
lean::dec(x_59);
x_70 = lean::box(0);
x_71 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_71, 0, x_18);
lean::cnstr_set(x_71, 1, x_36);
lean::cnstr_set(x_71, 2, x_44);
lean::cnstr_set(x_71, 3, x_45);
lean::cnstr_set(x_71, 4, x_70);
return x_71;
}
}
}
}
lbl_50:
{
obj* x_72; 
switch (lean::obj_tag(x_49)) {
case 0:
{
obj* x_74; obj* x_77; 
x_74 = lean::cnstr_get(x_49, 0);
lean::inc(x_74);
lean::dec(x_49);
x_77 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_77, 0, x_74);
if (lean::obj_tag(x_48) == 0)
{
x_72 = x_77;
goto lbl_73;
}
else
{
obj* x_78; obj* x_80; 
x_78 = lean::cnstr_get(x_48, 0);
lean::inc(x_78);
x_80 = lean::cnstr_get(x_48, 1);
lean::inc(x_80);
lean::dec(x_48);
x_44 = x_77;
x_45 = x_78;
x_46 = x_80;
goto lbl_47;
}
}
case 3:
{
obj* x_83; 
x_83 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
x_72 = x_83;
goto lbl_73;
}
else
{
obj* x_84; obj* x_86; 
x_84 = lean::cnstr_get(x_48, 0);
lean::inc(x_84);
x_86 = lean::cnstr_get(x_48, 1);
lean::inc(x_86);
lean::dec(x_48);
x_44 = x_83;
x_45 = x_84;
x_46 = x_86;
goto lbl_47;
}
}
default:
{
obj* x_90; 
lean::dec(x_49);
x_90 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
x_72 = x_90;
goto lbl_73;
}
else
{
obj* x_91; obj* x_93; 
x_91 = lean::cnstr_get(x_48, 0);
lean::inc(x_91);
x_93 = lean::cnstr_get(x_48, 1);
lean::inc(x_93);
lean::dec(x_48);
x_44 = x_90;
x_45 = x_91;
x_46 = x_93;
goto lbl_47;
}
}
}
lbl_73:
{
if (lean::obj_tag(x_48) == 0)
{
obj* x_96; obj* x_97; obj* x_98; 
x_96 = lean::box(0);
x_97 = lean::box(3);
x_98 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_98, 0, x_18);
lean::cnstr_set(x_98, 1, x_36);
lean::cnstr_set(x_98, 2, x_72);
lean::cnstr_set(x_98, 3, x_97);
lean::cnstr_set(x_98, 4, x_96);
return x_98;
}
else
{
obj* x_99; 
x_99 = lean::cnstr_get(x_48, 0);
lean::inc(x_99);
lean::dec(x_48);
switch (lean::obj_tag(x_99)) {
case 0:
{
obj* x_102; obj* x_105; obj* x_106; obj* x_107; 
x_102 = lean::cnstr_get(x_99, 0);
lean::inc(x_102);
lean::dec(x_99);
x_105 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_105, 0, x_102);
x_106 = lean::box(3);
x_107 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_107, 0, x_18);
lean::cnstr_set(x_107, 1, x_36);
lean::cnstr_set(x_107, 2, x_72);
lean::cnstr_set(x_107, 3, x_106);
lean::cnstr_set(x_107, 4, x_105);
return x_107;
}
case 3:
{
obj* x_108; obj* x_109; obj* x_110; 
x_108 = lean::box(0);
x_109 = lean::box(3);
x_110 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_110, 0, x_18);
lean::cnstr_set(x_110, 1, x_36);
lean::cnstr_set(x_110, 2, x_72);
lean::cnstr_set(x_110, 3, x_109);
lean::cnstr_set(x_110, 4, x_108);
return x_110;
}
default:
{
obj* x_112; obj* x_113; obj* x_114; 
lean::dec(x_99);
x_112 = lean::box(0);
x_113 = lean::box(3);
x_114 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_114, 0, x_18);
lean::cnstr_set(x_114, 1, x_36);
lean::cnstr_set(x_114, 2, x_72);
lean::cnstr_set(x_114, 3, x_113);
lean::cnstr_set(x_114, 4, x_112);
return x_114;
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_13 = l_option_map___rarg(x_12, x_1);
x_14 = lean::box(3);
x_15 = l_option_get__or__else___main___rarg(x_13, x_14);
x_16 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_16, 0, x_3);
x_17 = l_option_map___rarg(x_12, x_5);
x_18 = l_option_get__or__else___main___rarg(x_17, x_14);
x_19 = l_option_map___rarg(x_12, x_9);
x_20 = l_option_get__or__else___main___rarg(x_19, x_14);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_7);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_18);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_16);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_15);
lean::cnstr_set(x_26, 1, x_25);
x_27 = l_lean_parser_term_simple__explicit__binder;
x_28 = l_lean_parser_syntax_mk__node(x_27, x_26);
return x_28;
}
}
obj* _init_l_lean_parser_term_simple__explicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_simple__explicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_simple__explicit__binder_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_simple__implicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("simple_implicit_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = lean::box(3);
x_14 = x_0;
x_15 = x_17;
goto lbl_16;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
x_14 = x_20;
x_15 = x_18;
goto lbl_16;
}
lbl_16:
{
obj* x_23; 
switch (lean::obj_tag(x_15)) {
case 1:
{
obj* x_25; 
x_25 = lean::cnstr_get(x_15, 0);
lean::inc(x_25);
lean::dec(x_15);
x_23 = x_25;
goto lbl_24;
}
case 3:
{
obj* x_28; 
x_28 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_23 = x_28;
goto lbl_24;
}
default:
{
obj* x_30; 
lean::dec(x_15);
x_30 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_23 = x_30;
goto lbl_24;
}
}
lbl_24:
{
obj* x_31; obj* x_32; obj* x_33; obj* x_35; obj* x_36; 
if (lean::obj_tag(x_14) == 0)
{
obj* x_38; 
x_38 = lean::box(3);
x_35 = x_14;
x_36 = x_38;
goto lbl_37;
}
else
{
obj* x_39; obj* x_41; 
x_39 = lean::cnstr_get(x_14, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_14, 1);
lean::inc(x_41);
lean::dec(x_14);
x_35 = x_41;
x_36 = x_39;
goto lbl_37;
}
lbl_34:
{
if (lean::obj_tag(x_33) == 0)
{
obj* x_44; obj* x_45; 
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_45, 0, x_5);
lean::cnstr_set(x_45, 1, x_23);
lean::cnstr_set(x_45, 2, x_31);
lean::cnstr_set(x_45, 3, x_32);
lean::cnstr_set(x_45, 4, x_44);
return x_45;
}
else
{
obj* x_46; 
x_46 = lean::cnstr_get(x_33, 0);
lean::inc(x_46);
lean::dec(x_33);
switch (lean::obj_tag(x_46)) {
case 0:
{
obj* x_49; obj* x_52; obj* x_53; 
x_49 = lean::cnstr_get(x_46, 0);
lean::inc(x_49);
lean::dec(x_46);
x_52 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_52, 0, x_49);
x_53 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_53, 0, x_5);
lean::cnstr_set(x_53, 1, x_23);
lean::cnstr_set(x_53, 2, x_31);
lean::cnstr_set(x_53, 3, x_32);
lean::cnstr_set(x_53, 4, x_52);
return x_53;
}
case 3:
{
obj* x_54; obj* x_55; 
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_55, 0, x_5);
lean::cnstr_set(x_55, 1, x_23);
lean::cnstr_set(x_55, 2, x_31);
lean::cnstr_set(x_55, 3, x_32);
lean::cnstr_set(x_55, 4, x_54);
return x_55;
}
default:
{
obj* x_57; obj* x_58; 
lean::dec(x_46);
x_57 = lean::box(0);
x_58 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_58, 0, x_5);
lean::cnstr_set(x_58, 1, x_23);
lean::cnstr_set(x_58, 2, x_31);
lean::cnstr_set(x_58, 3, x_32);
lean::cnstr_set(x_58, 4, x_57);
return x_58;
}
}
}
}
lbl_37:
{
obj* x_59; 
switch (lean::obj_tag(x_36)) {
case 0:
{
obj* x_61; obj* x_64; 
x_61 = lean::cnstr_get(x_36, 0);
lean::inc(x_61);
lean::dec(x_36);
x_64 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_64, 0, x_61);
if (lean::obj_tag(x_35) == 0)
{
x_59 = x_64;
goto lbl_60;
}
else
{
obj* x_65; obj* x_67; 
x_65 = lean::cnstr_get(x_35, 0);
lean::inc(x_65);
x_67 = lean::cnstr_get(x_35, 1);
lean::inc(x_67);
lean::dec(x_35);
x_31 = x_64;
x_32 = x_65;
x_33 = x_67;
goto lbl_34;
}
}
case 3:
{
obj* x_70; 
x_70 = lean::box(0);
if (lean::obj_tag(x_35) == 0)
{
x_59 = x_70;
goto lbl_60;
}
else
{
obj* x_71; obj* x_73; 
x_71 = lean::cnstr_get(x_35, 0);
lean::inc(x_71);
x_73 = lean::cnstr_get(x_35, 1);
lean::inc(x_73);
lean::dec(x_35);
x_31 = x_70;
x_32 = x_71;
x_33 = x_73;
goto lbl_34;
}
}
default:
{
obj* x_77; 
lean::dec(x_36);
x_77 = lean::box(0);
if (lean::obj_tag(x_35) == 0)
{
x_59 = x_77;
goto lbl_60;
}
else
{
obj* x_78; obj* x_80; 
x_78 = lean::cnstr_get(x_35, 0);
lean::inc(x_78);
x_80 = lean::cnstr_get(x_35, 1);
lean::inc(x_80);
lean::dec(x_35);
x_31 = x_77;
x_32 = x_78;
x_33 = x_80;
goto lbl_34;
}
}
}
lbl_60:
{
if (lean::obj_tag(x_35) == 0)
{
obj* x_83; obj* x_84; obj* x_85; 
x_83 = lean::box(0);
x_84 = lean::box(3);
x_85 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_85, 0, x_5);
lean::cnstr_set(x_85, 1, x_23);
lean::cnstr_set(x_85, 2, x_59);
lean::cnstr_set(x_85, 3, x_84);
lean::cnstr_set(x_85, 4, x_83);
return x_85;
}
else
{
obj* x_86; 
x_86 = lean::cnstr_get(x_35, 0);
lean::inc(x_86);
lean::dec(x_35);
switch (lean::obj_tag(x_86)) {
case 0:
{
obj* x_89; obj* x_92; obj* x_93; obj* x_94; 
x_89 = lean::cnstr_get(x_86, 0);
lean::inc(x_89);
lean::dec(x_86);
x_92 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_92, 0, x_89);
x_93 = lean::box(3);
x_94 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_94, 0, x_5);
lean::cnstr_set(x_94, 1, x_23);
lean::cnstr_set(x_94, 2, x_59);
lean::cnstr_set(x_94, 3, x_93);
lean::cnstr_set(x_94, 4, x_92);
return x_94;
}
case 3:
{
obj* x_95; obj* x_96; obj* x_97; 
x_95 = lean::box(0);
x_96 = lean::box(3);
x_97 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_97, 0, x_5);
lean::cnstr_set(x_97, 1, x_23);
lean::cnstr_set(x_97, 2, x_59);
lean::cnstr_set(x_97, 3, x_96);
lean::cnstr_set(x_97, 4, x_95);
return x_97;
}
default:
{
obj* x_99; obj* x_100; obj* x_101; 
lean::dec(x_86);
x_99 = lean::box(0);
x_100 = lean::box(3);
x_101 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_101, 0, x_5);
lean::cnstr_set(x_101, 1, x_23);
lean::cnstr_set(x_101, 2, x_59);
lean::cnstr_set(x_101, 3, x_100);
lean::cnstr_set(x_101, 4, x_99);
return x_101;
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; 
switch (lean::obj_tag(x_28)) {
case 1:
{
obj* x_38; 
x_38 = lean::cnstr_get(x_28, 0);
lean::inc(x_38);
lean::dec(x_28);
x_36 = x_38;
goto lbl_37;
}
case 3:
{
obj* x_41; 
x_41 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_36 = x_41;
goto lbl_37;
}
default:
{
obj* x_43; 
lean::dec(x_28);
x_43 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_36 = x_43;
goto lbl_37;
}
}
lbl_37:
{
obj* x_44; obj* x_45; obj* x_46; obj* x_48; obj* x_49; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_51; 
x_51 = lean::box(3);
x_48 = x_27;
x_49 = x_51;
goto lbl_50;
}
else
{
obj* x_52; obj* x_54; 
x_52 = lean::cnstr_get(x_27, 0);
lean::inc(x_52);
x_54 = lean::cnstr_get(x_27, 1);
lean::inc(x_54);
lean::dec(x_27);
x_48 = x_54;
x_49 = x_52;
goto lbl_50;
}
lbl_47:
{
if (lean::obj_tag(x_46) == 0)
{
obj* x_57; obj* x_58; 
x_57 = lean::box(0);
x_58 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_58, 0, x_18);
lean::cnstr_set(x_58, 1, x_36);
lean::cnstr_set(x_58, 2, x_44);
lean::cnstr_set(x_58, 3, x_45);
lean::cnstr_set(x_58, 4, x_57);
return x_58;
}
else
{
obj* x_59; 
x_59 = lean::cnstr_get(x_46, 0);
lean::inc(x_59);
lean::dec(x_46);
switch (lean::obj_tag(x_59)) {
case 0:
{
obj* x_62; obj* x_65; obj* x_66; 
x_62 = lean::cnstr_get(x_59, 0);
lean::inc(x_62);
lean::dec(x_59);
x_65 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_65, 0, x_62);
x_66 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_66, 0, x_18);
lean::cnstr_set(x_66, 1, x_36);
lean::cnstr_set(x_66, 2, x_44);
lean::cnstr_set(x_66, 3, x_45);
lean::cnstr_set(x_66, 4, x_65);
return x_66;
}
case 3:
{
obj* x_67; obj* x_68; 
x_67 = lean::box(0);
x_68 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_68, 0, x_18);
lean::cnstr_set(x_68, 1, x_36);
lean::cnstr_set(x_68, 2, x_44);
lean::cnstr_set(x_68, 3, x_45);
lean::cnstr_set(x_68, 4, x_67);
return x_68;
}
default:
{
obj* x_70; obj* x_71; 
lean::dec(x_59);
x_70 = lean::box(0);
x_71 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_71, 0, x_18);
lean::cnstr_set(x_71, 1, x_36);
lean::cnstr_set(x_71, 2, x_44);
lean::cnstr_set(x_71, 3, x_45);
lean::cnstr_set(x_71, 4, x_70);
return x_71;
}
}
}
}
lbl_50:
{
obj* x_72; 
switch (lean::obj_tag(x_49)) {
case 0:
{
obj* x_74; obj* x_77; 
x_74 = lean::cnstr_get(x_49, 0);
lean::inc(x_74);
lean::dec(x_49);
x_77 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_77, 0, x_74);
if (lean::obj_tag(x_48) == 0)
{
x_72 = x_77;
goto lbl_73;
}
else
{
obj* x_78; obj* x_80; 
x_78 = lean::cnstr_get(x_48, 0);
lean::inc(x_78);
x_80 = lean::cnstr_get(x_48, 1);
lean::inc(x_80);
lean::dec(x_48);
x_44 = x_77;
x_45 = x_78;
x_46 = x_80;
goto lbl_47;
}
}
case 3:
{
obj* x_83; 
x_83 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
x_72 = x_83;
goto lbl_73;
}
else
{
obj* x_84; obj* x_86; 
x_84 = lean::cnstr_get(x_48, 0);
lean::inc(x_84);
x_86 = lean::cnstr_get(x_48, 1);
lean::inc(x_86);
lean::dec(x_48);
x_44 = x_83;
x_45 = x_84;
x_46 = x_86;
goto lbl_47;
}
}
default:
{
obj* x_90; 
lean::dec(x_49);
x_90 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
x_72 = x_90;
goto lbl_73;
}
else
{
obj* x_91; obj* x_93; 
x_91 = lean::cnstr_get(x_48, 0);
lean::inc(x_91);
x_93 = lean::cnstr_get(x_48, 1);
lean::inc(x_93);
lean::dec(x_48);
x_44 = x_90;
x_45 = x_91;
x_46 = x_93;
goto lbl_47;
}
}
}
lbl_73:
{
if (lean::obj_tag(x_48) == 0)
{
obj* x_96; obj* x_97; obj* x_98; 
x_96 = lean::box(0);
x_97 = lean::box(3);
x_98 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_98, 0, x_18);
lean::cnstr_set(x_98, 1, x_36);
lean::cnstr_set(x_98, 2, x_72);
lean::cnstr_set(x_98, 3, x_97);
lean::cnstr_set(x_98, 4, x_96);
return x_98;
}
else
{
obj* x_99; 
x_99 = lean::cnstr_get(x_48, 0);
lean::inc(x_99);
lean::dec(x_48);
switch (lean::obj_tag(x_99)) {
case 0:
{
obj* x_102; obj* x_105; obj* x_106; obj* x_107; 
x_102 = lean::cnstr_get(x_99, 0);
lean::inc(x_102);
lean::dec(x_99);
x_105 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_105, 0, x_102);
x_106 = lean::box(3);
x_107 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_107, 0, x_18);
lean::cnstr_set(x_107, 1, x_36);
lean::cnstr_set(x_107, 2, x_72);
lean::cnstr_set(x_107, 3, x_106);
lean::cnstr_set(x_107, 4, x_105);
return x_107;
}
case 3:
{
obj* x_108; obj* x_109; obj* x_110; 
x_108 = lean::box(0);
x_109 = lean::box(3);
x_110 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_110, 0, x_18);
lean::cnstr_set(x_110, 1, x_36);
lean::cnstr_set(x_110, 2, x_72);
lean::cnstr_set(x_110, 3, x_109);
lean::cnstr_set(x_110, 4, x_108);
return x_110;
}
default:
{
obj* x_112; obj* x_113; obj* x_114; 
lean::dec(x_99);
x_112 = lean::box(0);
x_113 = lean::box(3);
x_114 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_114, 0, x_18);
lean::cnstr_set(x_114, 1, x_36);
lean::cnstr_set(x_114, 2, x_72);
lean::cnstr_set(x_114, 3, x_113);
lean::cnstr_set(x_114, 4, x_112);
return x_114;
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_13 = l_option_map___rarg(x_12, x_1);
x_14 = lean::box(3);
x_15 = l_option_get__or__else___main___rarg(x_13, x_14);
x_16 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_16, 0, x_3);
x_17 = l_option_map___rarg(x_12, x_5);
x_18 = l_option_get__or__else___main___rarg(x_17, x_14);
x_19 = l_option_map___rarg(x_12, x_9);
x_20 = l_option_get__or__else___main___rarg(x_19, x_14);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_7);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_18);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_16);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_15);
lean::cnstr_set(x_26, 1, x_25);
x_27 = l_lean_parser_term_simple__implicit__binder;
x_28 = l_lean_parser_syntax_mk__node(x_27, x_26);
return x_28;
}
}
obj* _init_l_lean_parser_term_simple__implicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_simple__implicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_simple__implicit__binder_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_simple__strict__implicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("simple_strict_implicit_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = lean::box(3);
x_14 = x_0;
x_15 = x_17;
goto lbl_16;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
x_14 = x_20;
x_15 = x_18;
goto lbl_16;
}
lbl_16:
{
obj* x_23; 
switch (lean::obj_tag(x_15)) {
case 1:
{
obj* x_25; 
x_25 = lean::cnstr_get(x_15, 0);
lean::inc(x_25);
lean::dec(x_15);
x_23 = x_25;
goto lbl_24;
}
case 3:
{
obj* x_28; 
x_28 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_23 = x_28;
goto lbl_24;
}
default:
{
obj* x_30; 
lean::dec(x_15);
x_30 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_23 = x_30;
goto lbl_24;
}
}
lbl_24:
{
obj* x_31; obj* x_32; obj* x_33; obj* x_35; obj* x_36; 
if (lean::obj_tag(x_14) == 0)
{
obj* x_38; 
x_38 = lean::box(3);
x_35 = x_14;
x_36 = x_38;
goto lbl_37;
}
else
{
obj* x_39; obj* x_41; 
x_39 = lean::cnstr_get(x_14, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_14, 1);
lean::inc(x_41);
lean::dec(x_14);
x_35 = x_41;
x_36 = x_39;
goto lbl_37;
}
lbl_34:
{
if (lean::obj_tag(x_33) == 0)
{
obj* x_44; obj* x_45; 
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_45, 0, x_5);
lean::cnstr_set(x_45, 1, x_23);
lean::cnstr_set(x_45, 2, x_31);
lean::cnstr_set(x_45, 3, x_32);
lean::cnstr_set(x_45, 4, x_44);
return x_45;
}
else
{
obj* x_46; 
x_46 = lean::cnstr_get(x_33, 0);
lean::inc(x_46);
lean::dec(x_33);
switch (lean::obj_tag(x_46)) {
case 0:
{
obj* x_49; obj* x_52; obj* x_53; 
x_49 = lean::cnstr_get(x_46, 0);
lean::inc(x_49);
lean::dec(x_46);
x_52 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_52, 0, x_49);
x_53 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_53, 0, x_5);
lean::cnstr_set(x_53, 1, x_23);
lean::cnstr_set(x_53, 2, x_31);
lean::cnstr_set(x_53, 3, x_32);
lean::cnstr_set(x_53, 4, x_52);
return x_53;
}
case 3:
{
obj* x_54; obj* x_55; 
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_55, 0, x_5);
lean::cnstr_set(x_55, 1, x_23);
lean::cnstr_set(x_55, 2, x_31);
lean::cnstr_set(x_55, 3, x_32);
lean::cnstr_set(x_55, 4, x_54);
return x_55;
}
default:
{
obj* x_57; obj* x_58; 
lean::dec(x_46);
x_57 = lean::box(0);
x_58 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_58, 0, x_5);
lean::cnstr_set(x_58, 1, x_23);
lean::cnstr_set(x_58, 2, x_31);
lean::cnstr_set(x_58, 3, x_32);
lean::cnstr_set(x_58, 4, x_57);
return x_58;
}
}
}
}
lbl_37:
{
obj* x_59; 
switch (lean::obj_tag(x_36)) {
case 0:
{
obj* x_61; obj* x_64; 
x_61 = lean::cnstr_get(x_36, 0);
lean::inc(x_61);
lean::dec(x_36);
x_64 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_64, 0, x_61);
if (lean::obj_tag(x_35) == 0)
{
x_59 = x_64;
goto lbl_60;
}
else
{
obj* x_65; obj* x_67; 
x_65 = lean::cnstr_get(x_35, 0);
lean::inc(x_65);
x_67 = lean::cnstr_get(x_35, 1);
lean::inc(x_67);
lean::dec(x_35);
x_31 = x_64;
x_32 = x_65;
x_33 = x_67;
goto lbl_34;
}
}
case 3:
{
obj* x_70; 
x_70 = lean::box(0);
if (lean::obj_tag(x_35) == 0)
{
x_59 = x_70;
goto lbl_60;
}
else
{
obj* x_71; obj* x_73; 
x_71 = lean::cnstr_get(x_35, 0);
lean::inc(x_71);
x_73 = lean::cnstr_get(x_35, 1);
lean::inc(x_73);
lean::dec(x_35);
x_31 = x_70;
x_32 = x_71;
x_33 = x_73;
goto lbl_34;
}
}
default:
{
obj* x_77; 
lean::dec(x_36);
x_77 = lean::box(0);
if (lean::obj_tag(x_35) == 0)
{
x_59 = x_77;
goto lbl_60;
}
else
{
obj* x_78; obj* x_80; 
x_78 = lean::cnstr_get(x_35, 0);
lean::inc(x_78);
x_80 = lean::cnstr_get(x_35, 1);
lean::inc(x_80);
lean::dec(x_35);
x_31 = x_77;
x_32 = x_78;
x_33 = x_80;
goto lbl_34;
}
}
}
lbl_60:
{
if (lean::obj_tag(x_35) == 0)
{
obj* x_83; obj* x_84; obj* x_85; 
x_83 = lean::box(0);
x_84 = lean::box(3);
x_85 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_85, 0, x_5);
lean::cnstr_set(x_85, 1, x_23);
lean::cnstr_set(x_85, 2, x_59);
lean::cnstr_set(x_85, 3, x_84);
lean::cnstr_set(x_85, 4, x_83);
return x_85;
}
else
{
obj* x_86; 
x_86 = lean::cnstr_get(x_35, 0);
lean::inc(x_86);
lean::dec(x_35);
switch (lean::obj_tag(x_86)) {
case 0:
{
obj* x_89; obj* x_92; obj* x_93; obj* x_94; 
x_89 = lean::cnstr_get(x_86, 0);
lean::inc(x_89);
lean::dec(x_86);
x_92 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_92, 0, x_89);
x_93 = lean::box(3);
x_94 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_94, 0, x_5);
lean::cnstr_set(x_94, 1, x_23);
lean::cnstr_set(x_94, 2, x_59);
lean::cnstr_set(x_94, 3, x_93);
lean::cnstr_set(x_94, 4, x_92);
return x_94;
}
case 3:
{
obj* x_95; obj* x_96; obj* x_97; 
x_95 = lean::box(0);
x_96 = lean::box(3);
x_97 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_97, 0, x_5);
lean::cnstr_set(x_97, 1, x_23);
lean::cnstr_set(x_97, 2, x_59);
lean::cnstr_set(x_97, 3, x_96);
lean::cnstr_set(x_97, 4, x_95);
return x_97;
}
default:
{
obj* x_99; obj* x_100; obj* x_101; 
lean::dec(x_86);
x_99 = lean::box(0);
x_100 = lean::box(3);
x_101 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_101, 0, x_5);
lean::cnstr_set(x_101, 1, x_23);
lean::cnstr_set(x_101, 2, x_59);
lean::cnstr_set(x_101, 3, x_100);
lean::cnstr_set(x_101, 4, x_99);
return x_101;
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; 
switch (lean::obj_tag(x_28)) {
case 1:
{
obj* x_38; 
x_38 = lean::cnstr_get(x_28, 0);
lean::inc(x_38);
lean::dec(x_28);
x_36 = x_38;
goto lbl_37;
}
case 3:
{
obj* x_41; 
x_41 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_36 = x_41;
goto lbl_37;
}
default:
{
obj* x_43; 
lean::dec(x_28);
x_43 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_36 = x_43;
goto lbl_37;
}
}
lbl_37:
{
obj* x_44; obj* x_45; obj* x_46; obj* x_48; obj* x_49; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_51; 
x_51 = lean::box(3);
x_48 = x_27;
x_49 = x_51;
goto lbl_50;
}
else
{
obj* x_52; obj* x_54; 
x_52 = lean::cnstr_get(x_27, 0);
lean::inc(x_52);
x_54 = lean::cnstr_get(x_27, 1);
lean::inc(x_54);
lean::dec(x_27);
x_48 = x_54;
x_49 = x_52;
goto lbl_50;
}
lbl_47:
{
if (lean::obj_tag(x_46) == 0)
{
obj* x_57; obj* x_58; 
x_57 = lean::box(0);
x_58 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_58, 0, x_18);
lean::cnstr_set(x_58, 1, x_36);
lean::cnstr_set(x_58, 2, x_44);
lean::cnstr_set(x_58, 3, x_45);
lean::cnstr_set(x_58, 4, x_57);
return x_58;
}
else
{
obj* x_59; 
x_59 = lean::cnstr_get(x_46, 0);
lean::inc(x_59);
lean::dec(x_46);
switch (lean::obj_tag(x_59)) {
case 0:
{
obj* x_62; obj* x_65; obj* x_66; 
x_62 = lean::cnstr_get(x_59, 0);
lean::inc(x_62);
lean::dec(x_59);
x_65 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_65, 0, x_62);
x_66 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_66, 0, x_18);
lean::cnstr_set(x_66, 1, x_36);
lean::cnstr_set(x_66, 2, x_44);
lean::cnstr_set(x_66, 3, x_45);
lean::cnstr_set(x_66, 4, x_65);
return x_66;
}
case 3:
{
obj* x_67; obj* x_68; 
x_67 = lean::box(0);
x_68 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_68, 0, x_18);
lean::cnstr_set(x_68, 1, x_36);
lean::cnstr_set(x_68, 2, x_44);
lean::cnstr_set(x_68, 3, x_45);
lean::cnstr_set(x_68, 4, x_67);
return x_68;
}
default:
{
obj* x_70; obj* x_71; 
lean::dec(x_59);
x_70 = lean::box(0);
x_71 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_71, 0, x_18);
lean::cnstr_set(x_71, 1, x_36);
lean::cnstr_set(x_71, 2, x_44);
lean::cnstr_set(x_71, 3, x_45);
lean::cnstr_set(x_71, 4, x_70);
return x_71;
}
}
}
}
lbl_50:
{
obj* x_72; 
switch (lean::obj_tag(x_49)) {
case 0:
{
obj* x_74; obj* x_77; 
x_74 = lean::cnstr_get(x_49, 0);
lean::inc(x_74);
lean::dec(x_49);
x_77 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_77, 0, x_74);
if (lean::obj_tag(x_48) == 0)
{
x_72 = x_77;
goto lbl_73;
}
else
{
obj* x_78; obj* x_80; 
x_78 = lean::cnstr_get(x_48, 0);
lean::inc(x_78);
x_80 = lean::cnstr_get(x_48, 1);
lean::inc(x_80);
lean::dec(x_48);
x_44 = x_77;
x_45 = x_78;
x_46 = x_80;
goto lbl_47;
}
}
case 3:
{
obj* x_83; 
x_83 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
x_72 = x_83;
goto lbl_73;
}
else
{
obj* x_84; obj* x_86; 
x_84 = lean::cnstr_get(x_48, 0);
lean::inc(x_84);
x_86 = lean::cnstr_get(x_48, 1);
lean::inc(x_86);
lean::dec(x_48);
x_44 = x_83;
x_45 = x_84;
x_46 = x_86;
goto lbl_47;
}
}
default:
{
obj* x_90; 
lean::dec(x_49);
x_90 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
x_72 = x_90;
goto lbl_73;
}
else
{
obj* x_91; obj* x_93; 
x_91 = lean::cnstr_get(x_48, 0);
lean::inc(x_91);
x_93 = lean::cnstr_get(x_48, 1);
lean::inc(x_93);
lean::dec(x_48);
x_44 = x_90;
x_45 = x_91;
x_46 = x_93;
goto lbl_47;
}
}
}
lbl_73:
{
if (lean::obj_tag(x_48) == 0)
{
obj* x_96; obj* x_97; obj* x_98; 
x_96 = lean::box(0);
x_97 = lean::box(3);
x_98 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_98, 0, x_18);
lean::cnstr_set(x_98, 1, x_36);
lean::cnstr_set(x_98, 2, x_72);
lean::cnstr_set(x_98, 3, x_97);
lean::cnstr_set(x_98, 4, x_96);
return x_98;
}
else
{
obj* x_99; 
x_99 = lean::cnstr_get(x_48, 0);
lean::inc(x_99);
lean::dec(x_48);
switch (lean::obj_tag(x_99)) {
case 0:
{
obj* x_102; obj* x_105; obj* x_106; obj* x_107; 
x_102 = lean::cnstr_get(x_99, 0);
lean::inc(x_102);
lean::dec(x_99);
x_105 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_105, 0, x_102);
x_106 = lean::box(3);
x_107 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_107, 0, x_18);
lean::cnstr_set(x_107, 1, x_36);
lean::cnstr_set(x_107, 2, x_72);
lean::cnstr_set(x_107, 3, x_106);
lean::cnstr_set(x_107, 4, x_105);
return x_107;
}
case 3:
{
obj* x_108; obj* x_109; obj* x_110; 
x_108 = lean::box(0);
x_109 = lean::box(3);
x_110 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_110, 0, x_18);
lean::cnstr_set(x_110, 1, x_36);
lean::cnstr_set(x_110, 2, x_72);
lean::cnstr_set(x_110, 3, x_109);
lean::cnstr_set(x_110, 4, x_108);
return x_110;
}
default:
{
obj* x_112; obj* x_113; obj* x_114; 
lean::dec(x_99);
x_112 = lean::box(0);
x_113 = lean::box(3);
x_114 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_114, 0, x_18);
lean::cnstr_set(x_114, 1, x_36);
lean::cnstr_set(x_114, 2, x_72);
lean::cnstr_set(x_114, 3, x_113);
lean::cnstr_set(x_114, 4, x_112);
return x_114;
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_13 = l_option_map___rarg(x_12, x_1);
x_14 = lean::box(3);
x_15 = l_option_get__or__else___main___rarg(x_13, x_14);
x_16 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_16, 0, x_3);
x_17 = l_option_map___rarg(x_12, x_5);
x_18 = l_option_get__or__else___main___rarg(x_17, x_14);
x_19 = l_option_map___rarg(x_12, x_9);
x_20 = l_option_get__or__else___main___rarg(x_19, x_14);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_7);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_18);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_16);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_15);
lean::cnstr_set(x_26, 1, x_25);
x_27 = l_lean_parser_term_simple__strict__implicit__binder;
x_28 = l_lean_parser_syntax_mk__node(x_27, x_26);
return x_28;
}
}
obj* _init_l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_simple__strict__implicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_simple__inst__implicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("simple_inst_implicit_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = lean::box(3);
x_14 = x_0;
x_15 = x_17;
goto lbl_16;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
x_14 = x_20;
x_15 = x_18;
goto lbl_16;
}
lbl_16:
{
obj* x_23; 
switch (lean::obj_tag(x_15)) {
case 1:
{
obj* x_25; 
x_25 = lean::cnstr_get(x_15, 0);
lean::inc(x_25);
lean::dec(x_15);
x_23 = x_25;
goto lbl_24;
}
case 3:
{
obj* x_28; 
x_28 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_23 = x_28;
goto lbl_24;
}
default:
{
obj* x_30; 
lean::dec(x_15);
x_30 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_23 = x_30;
goto lbl_24;
}
}
lbl_24:
{
obj* x_31; obj* x_32; obj* x_33; obj* x_35; obj* x_36; 
if (lean::obj_tag(x_14) == 0)
{
obj* x_38; 
x_38 = lean::box(3);
x_35 = x_14;
x_36 = x_38;
goto lbl_37;
}
else
{
obj* x_39; obj* x_41; 
x_39 = lean::cnstr_get(x_14, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_14, 1);
lean::inc(x_41);
lean::dec(x_14);
x_35 = x_41;
x_36 = x_39;
goto lbl_37;
}
lbl_34:
{
if (lean::obj_tag(x_33) == 0)
{
obj* x_44; obj* x_45; 
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_45, 0, x_5);
lean::cnstr_set(x_45, 1, x_23);
lean::cnstr_set(x_45, 2, x_31);
lean::cnstr_set(x_45, 3, x_32);
lean::cnstr_set(x_45, 4, x_44);
return x_45;
}
else
{
obj* x_46; 
x_46 = lean::cnstr_get(x_33, 0);
lean::inc(x_46);
lean::dec(x_33);
switch (lean::obj_tag(x_46)) {
case 0:
{
obj* x_49; obj* x_52; obj* x_53; 
x_49 = lean::cnstr_get(x_46, 0);
lean::inc(x_49);
lean::dec(x_46);
x_52 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_52, 0, x_49);
x_53 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_53, 0, x_5);
lean::cnstr_set(x_53, 1, x_23);
lean::cnstr_set(x_53, 2, x_31);
lean::cnstr_set(x_53, 3, x_32);
lean::cnstr_set(x_53, 4, x_52);
return x_53;
}
case 3:
{
obj* x_54; obj* x_55; 
x_54 = lean::box(0);
x_55 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_55, 0, x_5);
lean::cnstr_set(x_55, 1, x_23);
lean::cnstr_set(x_55, 2, x_31);
lean::cnstr_set(x_55, 3, x_32);
lean::cnstr_set(x_55, 4, x_54);
return x_55;
}
default:
{
obj* x_57; obj* x_58; 
lean::dec(x_46);
x_57 = lean::box(0);
x_58 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_58, 0, x_5);
lean::cnstr_set(x_58, 1, x_23);
lean::cnstr_set(x_58, 2, x_31);
lean::cnstr_set(x_58, 3, x_32);
lean::cnstr_set(x_58, 4, x_57);
return x_58;
}
}
}
}
lbl_37:
{
obj* x_59; 
switch (lean::obj_tag(x_36)) {
case 0:
{
obj* x_61; obj* x_64; 
x_61 = lean::cnstr_get(x_36, 0);
lean::inc(x_61);
lean::dec(x_36);
x_64 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_64, 0, x_61);
if (lean::obj_tag(x_35) == 0)
{
x_59 = x_64;
goto lbl_60;
}
else
{
obj* x_65; obj* x_67; 
x_65 = lean::cnstr_get(x_35, 0);
lean::inc(x_65);
x_67 = lean::cnstr_get(x_35, 1);
lean::inc(x_67);
lean::dec(x_35);
x_31 = x_64;
x_32 = x_65;
x_33 = x_67;
goto lbl_34;
}
}
case 3:
{
obj* x_70; 
x_70 = lean::box(0);
if (lean::obj_tag(x_35) == 0)
{
x_59 = x_70;
goto lbl_60;
}
else
{
obj* x_71; obj* x_73; 
x_71 = lean::cnstr_get(x_35, 0);
lean::inc(x_71);
x_73 = lean::cnstr_get(x_35, 1);
lean::inc(x_73);
lean::dec(x_35);
x_31 = x_70;
x_32 = x_71;
x_33 = x_73;
goto lbl_34;
}
}
default:
{
obj* x_77; 
lean::dec(x_36);
x_77 = lean::box(0);
if (lean::obj_tag(x_35) == 0)
{
x_59 = x_77;
goto lbl_60;
}
else
{
obj* x_78; obj* x_80; 
x_78 = lean::cnstr_get(x_35, 0);
lean::inc(x_78);
x_80 = lean::cnstr_get(x_35, 1);
lean::inc(x_80);
lean::dec(x_35);
x_31 = x_77;
x_32 = x_78;
x_33 = x_80;
goto lbl_34;
}
}
}
lbl_60:
{
if (lean::obj_tag(x_35) == 0)
{
obj* x_83; obj* x_84; obj* x_85; 
x_83 = lean::box(0);
x_84 = lean::box(3);
x_85 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_85, 0, x_5);
lean::cnstr_set(x_85, 1, x_23);
lean::cnstr_set(x_85, 2, x_59);
lean::cnstr_set(x_85, 3, x_84);
lean::cnstr_set(x_85, 4, x_83);
return x_85;
}
else
{
obj* x_86; 
x_86 = lean::cnstr_get(x_35, 0);
lean::inc(x_86);
lean::dec(x_35);
switch (lean::obj_tag(x_86)) {
case 0:
{
obj* x_89; obj* x_92; obj* x_93; obj* x_94; 
x_89 = lean::cnstr_get(x_86, 0);
lean::inc(x_89);
lean::dec(x_86);
x_92 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_92, 0, x_89);
x_93 = lean::box(3);
x_94 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_94, 0, x_5);
lean::cnstr_set(x_94, 1, x_23);
lean::cnstr_set(x_94, 2, x_59);
lean::cnstr_set(x_94, 3, x_93);
lean::cnstr_set(x_94, 4, x_92);
return x_94;
}
case 3:
{
obj* x_95; obj* x_96; obj* x_97; 
x_95 = lean::box(0);
x_96 = lean::box(3);
x_97 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_97, 0, x_5);
lean::cnstr_set(x_97, 1, x_23);
lean::cnstr_set(x_97, 2, x_59);
lean::cnstr_set(x_97, 3, x_96);
lean::cnstr_set(x_97, 4, x_95);
return x_97;
}
default:
{
obj* x_99; obj* x_100; obj* x_101; 
lean::dec(x_86);
x_99 = lean::box(0);
x_100 = lean::box(3);
x_101 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_101, 0, x_5);
lean::cnstr_set(x_101, 1, x_23);
lean::cnstr_set(x_101, 2, x_59);
lean::cnstr_set(x_101, 3, x_100);
lean::cnstr_set(x_101, 4, x_99);
return x_101;
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; 
switch (lean::obj_tag(x_28)) {
case 1:
{
obj* x_38; 
x_38 = lean::cnstr_get(x_28, 0);
lean::inc(x_38);
lean::dec(x_28);
x_36 = x_38;
goto lbl_37;
}
case 3:
{
obj* x_41; 
x_41 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_36 = x_41;
goto lbl_37;
}
default:
{
obj* x_43; 
lean::dec(x_28);
x_43 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_36 = x_43;
goto lbl_37;
}
}
lbl_37:
{
obj* x_44; obj* x_45; obj* x_46; obj* x_48; obj* x_49; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_51; 
x_51 = lean::box(3);
x_48 = x_27;
x_49 = x_51;
goto lbl_50;
}
else
{
obj* x_52; obj* x_54; 
x_52 = lean::cnstr_get(x_27, 0);
lean::inc(x_52);
x_54 = lean::cnstr_get(x_27, 1);
lean::inc(x_54);
lean::dec(x_27);
x_48 = x_54;
x_49 = x_52;
goto lbl_50;
}
lbl_47:
{
if (lean::obj_tag(x_46) == 0)
{
obj* x_57; obj* x_58; 
x_57 = lean::box(0);
x_58 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_58, 0, x_18);
lean::cnstr_set(x_58, 1, x_36);
lean::cnstr_set(x_58, 2, x_44);
lean::cnstr_set(x_58, 3, x_45);
lean::cnstr_set(x_58, 4, x_57);
return x_58;
}
else
{
obj* x_59; 
x_59 = lean::cnstr_get(x_46, 0);
lean::inc(x_59);
lean::dec(x_46);
switch (lean::obj_tag(x_59)) {
case 0:
{
obj* x_62; obj* x_65; obj* x_66; 
x_62 = lean::cnstr_get(x_59, 0);
lean::inc(x_62);
lean::dec(x_59);
x_65 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_65, 0, x_62);
x_66 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_66, 0, x_18);
lean::cnstr_set(x_66, 1, x_36);
lean::cnstr_set(x_66, 2, x_44);
lean::cnstr_set(x_66, 3, x_45);
lean::cnstr_set(x_66, 4, x_65);
return x_66;
}
case 3:
{
obj* x_67; obj* x_68; 
x_67 = lean::box(0);
x_68 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_68, 0, x_18);
lean::cnstr_set(x_68, 1, x_36);
lean::cnstr_set(x_68, 2, x_44);
lean::cnstr_set(x_68, 3, x_45);
lean::cnstr_set(x_68, 4, x_67);
return x_68;
}
default:
{
obj* x_70; obj* x_71; 
lean::dec(x_59);
x_70 = lean::box(0);
x_71 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_71, 0, x_18);
lean::cnstr_set(x_71, 1, x_36);
lean::cnstr_set(x_71, 2, x_44);
lean::cnstr_set(x_71, 3, x_45);
lean::cnstr_set(x_71, 4, x_70);
return x_71;
}
}
}
}
lbl_50:
{
obj* x_72; 
switch (lean::obj_tag(x_49)) {
case 0:
{
obj* x_74; obj* x_77; 
x_74 = lean::cnstr_get(x_49, 0);
lean::inc(x_74);
lean::dec(x_49);
x_77 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_77, 0, x_74);
if (lean::obj_tag(x_48) == 0)
{
x_72 = x_77;
goto lbl_73;
}
else
{
obj* x_78; obj* x_80; 
x_78 = lean::cnstr_get(x_48, 0);
lean::inc(x_78);
x_80 = lean::cnstr_get(x_48, 1);
lean::inc(x_80);
lean::dec(x_48);
x_44 = x_77;
x_45 = x_78;
x_46 = x_80;
goto lbl_47;
}
}
case 3:
{
obj* x_83; 
x_83 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
x_72 = x_83;
goto lbl_73;
}
else
{
obj* x_84; obj* x_86; 
x_84 = lean::cnstr_get(x_48, 0);
lean::inc(x_84);
x_86 = lean::cnstr_get(x_48, 1);
lean::inc(x_86);
lean::dec(x_48);
x_44 = x_83;
x_45 = x_84;
x_46 = x_86;
goto lbl_47;
}
}
default:
{
obj* x_90; 
lean::dec(x_49);
x_90 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
x_72 = x_90;
goto lbl_73;
}
else
{
obj* x_91; obj* x_93; 
x_91 = lean::cnstr_get(x_48, 0);
lean::inc(x_91);
x_93 = lean::cnstr_get(x_48, 1);
lean::inc(x_93);
lean::dec(x_48);
x_44 = x_90;
x_45 = x_91;
x_46 = x_93;
goto lbl_47;
}
}
}
lbl_73:
{
if (lean::obj_tag(x_48) == 0)
{
obj* x_96; obj* x_97; obj* x_98; 
x_96 = lean::box(0);
x_97 = lean::box(3);
x_98 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_98, 0, x_18);
lean::cnstr_set(x_98, 1, x_36);
lean::cnstr_set(x_98, 2, x_72);
lean::cnstr_set(x_98, 3, x_97);
lean::cnstr_set(x_98, 4, x_96);
return x_98;
}
else
{
obj* x_99; 
x_99 = lean::cnstr_get(x_48, 0);
lean::inc(x_99);
lean::dec(x_48);
switch (lean::obj_tag(x_99)) {
case 0:
{
obj* x_102; obj* x_105; obj* x_106; obj* x_107; 
x_102 = lean::cnstr_get(x_99, 0);
lean::inc(x_102);
lean::dec(x_99);
x_105 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_105, 0, x_102);
x_106 = lean::box(3);
x_107 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_107, 0, x_18);
lean::cnstr_set(x_107, 1, x_36);
lean::cnstr_set(x_107, 2, x_72);
lean::cnstr_set(x_107, 3, x_106);
lean::cnstr_set(x_107, 4, x_105);
return x_107;
}
case 3:
{
obj* x_108; obj* x_109; obj* x_110; 
x_108 = lean::box(0);
x_109 = lean::box(3);
x_110 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_110, 0, x_18);
lean::cnstr_set(x_110, 1, x_36);
lean::cnstr_set(x_110, 2, x_72);
lean::cnstr_set(x_110, 3, x_109);
lean::cnstr_set(x_110, 4, x_108);
return x_110;
}
default:
{
obj* x_112; obj* x_113; obj* x_114; 
lean::dec(x_99);
x_112 = lean::box(0);
x_113 = lean::box(3);
x_114 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_114, 0, x_18);
lean::cnstr_set(x_114, 1, x_36);
lean::cnstr_set(x_114, 2, x_72);
lean::cnstr_set(x_114, 3, x_113);
lean::cnstr_set(x_114, 4, x_112);
return x_114;
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_13 = l_option_map___rarg(x_12, x_1);
x_14 = lean::box(3);
x_15 = l_option_get__or__else___main___rarg(x_13, x_14);
x_16 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_16, 0, x_3);
x_17 = l_option_map___rarg(x_12, x_5);
x_18 = l_option_get__or__else___main___rarg(x_17, x_14);
x_19 = l_option_map___rarg(x_12, x_9);
x_20 = l_option_get__or__else___main___rarg(x_19, x_14);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_7);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_18);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_16);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_15);
lean::cnstr_set(x_26, 1, x_25);
x_27 = l_lean_parser_term_simple__inst__implicit__binder;
x_28 = l_lean_parser_syntax_mk__node(x_27, x_26);
return x_28;
}
}
obj* _init_l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_simple__inst__implicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_simple__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("simple_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
if (x_6 == 0)
{
obj* x_7; uint8 x_8; 
x_7 = lean::mk_nat_obj(1u);
x_8 = lean::nat_dec_eq(x_1, x_7);
if (x_8 == 0)
{
obj* x_9; uint8 x_10; 
x_9 = lean::mk_nat_obj(2u);
x_10 = lean::nat_dec_eq(x_1, x_9);
lean::dec(x_1);
if (x_10 == 0)
{
obj* x_12; obj* x_13; obj* x_16; obj* x_17; 
x_12 = l_lean_parser_term_simple__inst__implicit__binder_has__view;
x_13 = lean::cnstr_get(x_12, 0);
lean::inc(x_13);
lean::dec(x_12);
x_16 = lean::apply_1(x_13, x_0);
x_17 = lean::alloc_cnstr(3, 1, 0);
lean::cnstr_set(x_17, 0, x_16);
return x_17;
}
else
{
obj* x_18; obj* x_19; obj* x_22; obj* x_23; 
x_18 = l_lean_parser_term_simple__strict__implicit__binder_has__view;
x_19 = lean::cnstr_get(x_18, 0);
lean::inc(x_19);
lean::dec(x_18);
x_22 = lean::apply_1(x_19, x_0);
x_23 = lean::alloc_cnstr(2, 1, 0);
lean::cnstr_set(x_23, 0, x_22);
return x_23;
}
}
else
{
obj* x_25; obj* x_26; obj* x_29; obj* x_30; 
lean::dec(x_1);
x_25 = l_lean_parser_term_simple__implicit__binder_has__view;
x_26 = lean::cnstr_get(x_25, 0);
lean::inc(x_26);
lean::dec(x_25);
x_29 = lean::apply_1(x_26, x_0);
x_30 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_30, 0, x_29);
return x_30;
}
}
else
{
obj* x_32; obj* x_33; obj* x_36; obj* x_37; 
lean::dec(x_1);
x_32 = l_lean_parser_term_simple__explicit__binder_has__view;
x_33 = lean::cnstr_get(x_32, 0);
lean::inc(x_33);
lean::dec(x_32);
x_36 = lean::apply_1(x_33, x_0);
x_37 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_37, 0, x_36);
return x_37;
}
}
}
}
obj* _init_l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("simple_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_simple__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__2;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
if (x_66 == 0)
{
obj* x_67; uint8 x_68; 
x_67 = lean::mk_nat_obj(1u);
x_68 = lean::nat_dec_eq(x_2, x_67);
if (x_68 == 0)
{
obj* x_69; uint8 x_70; 
x_69 = lean::mk_nat_obj(2u);
x_70 = lean::nat_dec_eq(x_2, x_69);
lean::dec(x_2);
if (x_70 == 0)
{
obj* x_72; obj* x_73; obj* x_76; obj* x_77; 
x_72 = l_lean_parser_term_simple__inst__implicit__binder_has__view;
x_73 = lean::cnstr_get(x_72, 0);
lean::inc(x_73);
lean::dec(x_72);
x_76 = lean::apply_1(x_73, x_1);
x_77 = lean::alloc_cnstr(3, 1, 0);
lean::cnstr_set(x_77, 0, x_76);
return x_77;
}
else
{
obj* x_78; obj* x_79; obj* x_82; obj* x_83; 
x_78 = l_lean_parser_term_simple__strict__implicit__binder_has__view;
x_79 = lean::cnstr_get(x_78, 0);
lean::inc(x_79);
lean::dec(x_78);
x_82 = lean::apply_1(x_79, x_1);
x_83 = lean::alloc_cnstr(2, 1, 0);
lean::cnstr_set(x_83, 0, x_82);
return x_83;
}
}
else
{
obj* x_85; obj* x_86; obj* x_89; obj* x_90; 
lean::dec(x_2);
x_85 = l_lean_parser_term_simple__implicit__binder_has__view;
x_86 = lean::cnstr_get(x_85, 0);
lean::inc(x_86);
lean::dec(x_85);
x_89 = lean::apply_1(x_86, x_1);
x_90 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_90, 0, x_89);
return x_90;
}
}
else
{
obj* x_92; obj* x_93; obj* x_96; obj* x_97; 
lean::dec(x_2);
x_92 = l_lean_parser_term_simple__explicit__binder_has__view;
x_93 = lean::cnstr_get(x_92, 0);
lean::inc(x_93);
lean::dec(x_92);
x_96 = lean::apply_1(x_93, x_1);
x_97 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_97, 0, x_96);
return x_97;
}
}
}
}
obj* l_lean_parser_term_simple__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_simple__explicit__binder_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_lean_parser_term_simple__binder;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
case 1:
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_lean_parser_term_simple__implicit__binder_has__view;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_26 = l_lean_parser_syntax_mk__node(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_lean_parser_term_simple__binder;
x_29 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_29;
}
case 2:
{
obj* x_30; obj* x_33; obj* x_34; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; 
x_30 = lean::cnstr_get(x_0, 0);
lean::inc(x_30);
lean::dec(x_0);
x_33 = l_lean_parser_term_simple__strict__implicit__binder_has__view;
x_34 = lean::cnstr_get(x_33, 1);
lean::inc(x_34);
lean::dec(x_33);
x_37 = lean::apply_1(x_34, x_30);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_1);
x_39 = l_lean_parser_number_has__view_x_27___lambda__2___closed__1;
x_40 = l_lean_parser_syntax_mk__node(x_39, x_38);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_1);
x_42 = l_lean_parser_term_simple__binder;
x_43 = l_lean_parser_syntax_mk__node(x_42, x_41);
return x_43;
}
default:
{
obj* x_44; obj* x_47; obj* x_48; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; 
x_44 = lean::cnstr_get(x_0, 0);
lean::inc(x_44);
lean::dec(x_0);
x_47 = l_lean_parser_term_simple__inst__implicit__binder_has__view;
x_48 = lean::cnstr_get(x_47, 1);
lean::inc(x_48);
lean::dec(x_47);
x_51 = lean::apply_1(x_48, x_44);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_1);
x_53 = l_lean_parser_number_has__view_x_27___lambda__2___closed__2;
x_54 = l_lean_parser_syntax_mk__node(x_53, x_52);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_1);
x_56 = l_lean_parser_term_simple__binder;
x_57 = l_lean_parser_syntax_mk__node(x_56, x_55);
return x_57;
}
}
}
}
obj* _init_l_lean_parser_term_simple__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_simple__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_simple__binder_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_simple__binder_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; 
x_0 = lean::mk_string("(");
x_1 = lean::mk_nat_obj(0u);
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::box(0);
x_4 = lean::mk_string(" : ");
x_5 = l_lean_parser_symbol_tokens___rarg(x_4, x_1);
x_6 = lean::mk_string(")");
x_7 = l_lean_parser_symbol_tokens___rarg(x_6, x_1);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_7, x_3);
x_9 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_10 = l_lean_parser_list_cons_tokens___rarg(x_9, x_8);
lean::inc(x_5);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_5, x_10);
x_13 = l_lean_parser_list_cons_tokens___rarg(x_3, x_12);
x_14 = l_lean_parser_list_cons_tokens___rarg(x_2, x_13);
x_15 = l_lean_parser_tokens___rarg(x_14);
x_16 = lean::mk_string("{");
x_17 = l_lean_parser_symbol_tokens___rarg(x_16, x_1);
x_18 = lean::mk_string("}");
x_19 = l_lean_parser_symbol_tokens___rarg(x_18, x_1);
x_20 = l_lean_parser_list_cons_tokens___rarg(x_19, x_3);
x_21 = l_lean_parser_list_cons_tokens___rarg(x_9, x_20);
lean::inc(x_5);
x_23 = l_lean_parser_list_cons_tokens___rarg(x_5, x_21);
x_24 = l_lean_parser_list_cons_tokens___rarg(x_3, x_23);
x_25 = l_lean_parser_list_cons_tokens___rarg(x_17, x_24);
x_26 = l_lean_parser_tokens___rarg(x_25);
x_27 = lean::mk_string("\xe2\xa6\x83");
x_28 = l_lean_parser_symbol_tokens___rarg(x_27, x_1);
x_29 = lean::mk_string("\xe2\xa6\x84");
x_30 = l_lean_parser_symbol_tokens___rarg(x_29, x_1);
x_31 = l_lean_parser_list_cons_tokens___rarg(x_30, x_3);
x_32 = l_lean_parser_list_cons_tokens___rarg(x_9, x_31);
lean::inc(x_5);
x_34 = l_lean_parser_list_cons_tokens___rarg(x_5, x_32);
x_35 = l_lean_parser_list_cons_tokens___rarg(x_3, x_34);
x_36 = l_lean_parser_list_cons_tokens___rarg(x_28, x_35);
x_37 = l_lean_parser_tokens___rarg(x_36);
x_38 = lean::mk_string("[");
x_39 = l_lean_parser_symbol_tokens___rarg(x_38, x_1);
x_40 = lean::mk_string("]");
x_41 = l_lean_parser_symbol_tokens___rarg(x_40, x_1);
x_42 = l_lean_parser_list_cons_tokens___rarg(x_41, x_3);
x_43 = l_lean_parser_list_cons_tokens___rarg(x_9, x_42);
x_44 = l_lean_parser_list_cons_tokens___rarg(x_5, x_43);
x_45 = l_lean_parser_list_cons_tokens___rarg(x_3, x_44);
x_46 = l_lean_parser_list_cons_tokens___rarg(x_39, x_45);
x_47 = l_lean_parser_tokens___rarg(x_46);
x_48 = l_lean_parser_list_cons_tokens___rarg(x_47, x_3);
x_49 = l_lean_parser_list_cons_tokens___rarg(x_37, x_48);
x_50 = l_lean_parser_list_cons_tokens___rarg(x_26, x_49);
x_51 = l_lean_parser_list_cons_tokens___rarg(x_15, x_50);
x_52 = l_lean_parser_tokens___rarg(x_51);
x_53 = l_lean_parser_list_cons_tokens___rarg(x_52, x_3);
x_54 = l_lean_parser_tokens___rarg(x_53);
return x_54;
}
}
obj* _init_l_lean_parser_term_simple__binder_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_20; obj* x_22; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_37; obj* x_38; obj* x_39; obj* x_41; obj* x_43; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_57; obj* x_58; obj* x_59; obj* x_61; obj* x_63; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; 
x_0 = lean::mk_string("(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_string(" : ");
x_7 = l_string_trim(x_6);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_10, 0, x_7);
lean::closure_set(x_10, 1, x_4);
lean::closure_set(x_10, 2, x_9);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_11, 0, x_4);
x_12 = lean::mk_string(")");
x_13 = l_string_trim(x_12);
lean::inc(x_13);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_15, 0, x_13);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_16, 0, x_13);
lean::closure_set(x_16, 1, x_4);
lean::closure_set(x_16, 2, x_15);
x_17 = lean::box(0);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_17);
lean::inc(x_11);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_11);
lean::cnstr_set(x_20, 1, x_18);
lean::inc(x_10);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_10);
lean::cnstr_set(x_22, 1, x_20);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
lean::inc(x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_23);
lean::cnstr_set(x_25, 1, x_22);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_5);
lean::cnstr_set(x_26, 1, x_25);
x_27 = l_lean_parser_term_simple__explicit__binder;
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_28, 0, x_27);
lean::closure_set(x_28, 1, x_26);
x_29 = lean::mk_string("{");
x_30 = l_string_trim(x_29);
lean::inc(x_30);
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_32, 0, x_30);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_33, 0, x_30);
lean::closure_set(x_33, 1, x_4);
lean::closure_set(x_33, 2, x_32);
x_34 = lean::mk_string("}");
x_35 = l_string_trim(x_34);
lean::inc(x_35);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_37, 0, x_35);
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_38, 0, x_35);
lean::closure_set(x_38, 1, x_4);
lean::closure_set(x_38, 2, x_37);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_17);
lean::inc(x_11);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_11);
lean::cnstr_set(x_41, 1, x_39);
lean::inc(x_10);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_10);
lean::cnstr_set(x_43, 1, x_41);
lean::inc(x_23);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_23);
lean::cnstr_set(x_45, 1, x_43);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_33);
lean::cnstr_set(x_46, 1, x_45);
x_47 = l_lean_parser_term_simple__implicit__binder;
x_48 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_48, 0, x_47);
lean::closure_set(x_48, 1, x_46);
x_49 = lean::mk_string("\xe2\xa6\x83");
x_50 = l_string_trim(x_49);
lean::inc(x_50);
x_52 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_52, 0, x_50);
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_53, 0, x_50);
lean::closure_set(x_53, 1, x_4);
lean::closure_set(x_53, 2, x_52);
x_54 = lean::mk_string("\xe2\xa6\x84");
x_55 = l_string_trim(x_54);
lean::inc(x_55);
x_57 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_57, 0, x_55);
x_58 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_58, 0, x_55);
lean::closure_set(x_58, 1, x_4);
lean::closure_set(x_58, 2, x_57);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_58);
lean::cnstr_set(x_59, 1, x_17);
lean::inc(x_11);
x_61 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_61, 0, x_11);
lean::cnstr_set(x_61, 1, x_59);
lean::inc(x_10);
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_10);
lean::cnstr_set(x_63, 1, x_61);
lean::inc(x_23);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_23);
lean::cnstr_set(x_65, 1, x_63);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_53);
lean::cnstr_set(x_66, 1, x_65);
x_67 = l_lean_parser_term_simple__strict__implicit__binder;
x_68 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_68, 0, x_67);
lean::closure_set(x_68, 1, x_66);
x_69 = lean::mk_string("[");
x_70 = l_string_trim(x_69);
lean::inc(x_70);
x_72 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_72, 0, x_70);
x_73 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_73, 0, x_70);
lean::closure_set(x_73, 1, x_4);
lean::closure_set(x_73, 2, x_72);
x_74 = lean::mk_string("]");
x_75 = l_string_trim(x_74);
lean::inc(x_75);
x_77 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_77, 0, x_75);
x_78 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_78, 0, x_75);
lean::closure_set(x_78, 1, x_4);
lean::closure_set(x_78, 2, x_77);
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_78);
lean::cnstr_set(x_79, 1, x_17);
x_80 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_80, 0, x_11);
lean::cnstr_set(x_80, 1, x_79);
x_81 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_81, 0, x_10);
lean::cnstr_set(x_81, 1, x_80);
x_82 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_82, 0, x_23);
lean::cnstr_set(x_82, 1, x_81);
x_83 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_83, 0, x_73);
lean::cnstr_set(x_83, 1, x_82);
x_84 = l_lean_parser_term_simple__inst__implicit__binder;
x_85 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_85, 0, x_84);
lean::closure_set(x_85, 1, x_83);
x_86 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_86, 0, x_85);
lean::cnstr_set(x_86, 1, x_17);
x_87 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_87, 0, x_68);
lean::cnstr_set(x_87, 1, x_86);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_48);
lean::cnstr_set(x_88, 1, x_87);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_28);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_90, 0, x_89);
lean::closure_set(x_90, 1, x_4);
x_91 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_91, 0, x_90);
lean::cnstr_set(x_91, 1, x_17);
x_92 = l_lean_parser_term__parser__m_monad;
x_93 = l_lean_parser_term__parser__m_monad__except;
x_94 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_95 = l_lean_parser_term__parser__m_alternative;
x_96 = l_lean_parser_term_simple__binder;
x_97 = l_lean_parser_term_simple__binder_has__view;
x_98 = l_lean_parser_combinators_node_view___rarg(x_92, x_93, x_94, x_95, x_96, x_91, x_97);
return x_98;
}
}
obj* _init_l_lean_parser_term_simple__binder_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_20; obj* x_22; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_37; obj* x_38; obj* x_39; obj* x_41; obj* x_43; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_57; obj* x_58; obj* x_59; obj* x_61; obj* x_63; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; 
x_0 = lean::mk_string("(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_string(" : ");
x_7 = l_string_trim(x_6);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_10, 0, x_7);
lean::closure_set(x_10, 1, x_4);
lean::closure_set(x_10, 2, x_9);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_11, 0, x_4);
x_12 = lean::mk_string(")");
x_13 = l_string_trim(x_12);
lean::inc(x_13);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_15, 0, x_13);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_16, 0, x_13);
lean::closure_set(x_16, 1, x_4);
lean::closure_set(x_16, 2, x_15);
x_17 = lean::box(0);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_17);
lean::inc(x_11);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_11);
lean::cnstr_set(x_20, 1, x_18);
lean::inc(x_10);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_10);
lean::cnstr_set(x_22, 1, x_20);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
lean::inc(x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_23);
lean::cnstr_set(x_25, 1, x_22);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_5);
lean::cnstr_set(x_26, 1, x_25);
x_27 = l_lean_parser_term_simple__explicit__binder;
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_28, 0, x_27);
lean::closure_set(x_28, 1, x_26);
x_29 = lean::mk_string("{");
x_30 = l_string_trim(x_29);
lean::inc(x_30);
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_32, 0, x_30);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_33, 0, x_30);
lean::closure_set(x_33, 1, x_4);
lean::closure_set(x_33, 2, x_32);
x_34 = lean::mk_string("}");
x_35 = l_string_trim(x_34);
lean::inc(x_35);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_37, 0, x_35);
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_38, 0, x_35);
lean::closure_set(x_38, 1, x_4);
lean::closure_set(x_38, 2, x_37);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_17);
lean::inc(x_11);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_11);
lean::cnstr_set(x_41, 1, x_39);
lean::inc(x_10);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_10);
lean::cnstr_set(x_43, 1, x_41);
lean::inc(x_23);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_23);
lean::cnstr_set(x_45, 1, x_43);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_33);
lean::cnstr_set(x_46, 1, x_45);
x_47 = l_lean_parser_term_simple__implicit__binder;
x_48 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_48, 0, x_47);
lean::closure_set(x_48, 1, x_46);
x_49 = lean::mk_string("\xe2\xa6\x83");
x_50 = l_string_trim(x_49);
lean::inc(x_50);
x_52 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_52, 0, x_50);
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_53, 0, x_50);
lean::closure_set(x_53, 1, x_4);
lean::closure_set(x_53, 2, x_52);
x_54 = lean::mk_string("\xe2\xa6\x84");
x_55 = l_string_trim(x_54);
lean::inc(x_55);
x_57 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_57, 0, x_55);
x_58 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_58, 0, x_55);
lean::closure_set(x_58, 1, x_4);
lean::closure_set(x_58, 2, x_57);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_58);
lean::cnstr_set(x_59, 1, x_17);
lean::inc(x_11);
x_61 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_61, 0, x_11);
lean::cnstr_set(x_61, 1, x_59);
lean::inc(x_10);
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_10);
lean::cnstr_set(x_63, 1, x_61);
lean::inc(x_23);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_23);
lean::cnstr_set(x_65, 1, x_63);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_53);
lean::cnstr_set(x_66, 1, x_65);
x_67 = l_lean_parser_term_simple__strict__implicit__binder;
x_68 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_68, 0, x_67);
lean::closure_set(x_68, 1, x_66);
x_69 = lean::mk_string("[");
x_70 = l_string_trim(x_69);
lean::inc(x_70);
x_72 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_72, 0, x_70);
x_73 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_73, 0, x_70);
lean::closure_set(x_73, 1, x_4);
lean::closure_set(x_73, 2, x_72);
x_74 = lean::mk_string("]");
x_75 = l_string_trim(x_74);
lean::inc(x_75);
x_77 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_77, 0, x_75);
x_78 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_78, 0, x_75);
lean::closure_set(x_78, 1, x_4);
lean::closure_set(x_78, 2, x_77);
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_78);
lean::cnstr_set(x_79, 1, x_17);
x_80 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_80, 0, x_11);
lean::cnstr_set(x_80, 1, x_79);
x_81 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_81, 0, x_10);
lean::cnstr_set(x_81, 1, x_80);
x_82 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_82, 0, x_23);
lean::cnstr_set(x_82, 1, x_81);
x_83 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_83, 0, x_73);
lean::cnstr_set(x_83, 1, x_82);
x_84 = l_lean_parser_term_simple__inst__implicit__binder;
x_85 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_85, 0, x_84);
lean::closure_set(x_85, 1, x_83);
x_86 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_86, 0, x_85);
lean::cnstr_set(x_86, 1, x_17);
x_87 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_87, 0, x_68);
lean::cnstr_set(x_87, 1, x_86);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_48);
lean::cnstr_set(x_88, 1, x_87);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_28);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_90, 0, x_89);
lean::closure_set(x_90, 1, x_4);
x_91 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_91, 0, x_90);
lean::cnstr_set(x_91, 1, x_17);
return x_91;
}
}
obj* l_lean_parser_term_simple__binder_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_simple__binder;
x_6 = l_lean_parser_term_simple__binder_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* l_lean_parser_term_simple__binder_view_to__binder__info___main(obj* x_0) {
_start:
{
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_1; obj* x_4; obj* x_6; obj* x_9; uint8 x_10; obj* x_11; obj* x_12; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::cnstr_get(x_1, 1);
lean::inc(x_4);
x_6 = lean::cnstr_get(x_1, 3);
lean::inc(x_6);
lean::dec(x_1);
x_9 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_9, 0, x_4);
lean::cnstr_set(x_9, 1, x_6);
x_10 = 0;
x_11 = lean::box(x_10);
x_12 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_9);
return x_12;
}
case 1:
{
obj* x_13; obj* x_16; obj* x_18; obj* x_21; uint8 x_22; obj* x_23; obj* x_24; 
x_13 = lean::cnstr_get(x_0, 0);
lean::inc(x_13);
lean::dec(x_0);
x_16 = lean::cnstr_get(x_13, 1);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_13, 3);
lean::inc(x_18);
lean::dec(x_13);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_16);
lean::cnstr_set(x_21, 1, x_18);
x_22 = 1;
x_23 = lean::box(x_22);
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_21);
return x_24;
}
case 2:
{
obj* x_25; obj* x_28; obj* x_30; obj* x_33; uint8 x_34; obj* x_35; obj* x_36; 
x_25 = lean::cnstr_get(x_0, 0);
lean::inc(x_25);
lean::dec(x_0);
x_28 = lean::cnstr_get(x_25, 1);
lean::inc(x_28);
x_30 = lean::cnstr_get(x_25, 3);
lean::inc(x_30);
lean::dec(x_25);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_28);
lean::cnstr_set(x_33, 1, x_30);
x_34 = 2;
x_35 = lean::box(x_34);
x_36 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_33);
return x_36;
}
default:
{
obj* x_37; obj* x_40; obj* x_42; obj* x_45; uint8 x_46; obj* x_47; obj* x_48; 
x_37 = lean::cnstr_get(x_0, 0);
lean::inc(x_37);
lean::dec(x_0);
x_40 = lean::cnstr_get(x_37, 1);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 3);
lean::inc(x_42);
lean::dec(x_37);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_40);
lean::cnstr_set(x_45, 1, x_42);
x_46 = 3;
x_47 = lean::box(x_46);
x_48 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_48, 0, x_47);
lean::cnstr_set(x_48, 1, x_45);
return x_48;
}
}
}
}
obj* l_lean_parser_term_simple__binder_view_to__binder__info(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_term_simple__binder_view_to__binder__info___main(x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_anonymous__constructor() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("anonymous_constructor");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
if (lean::obj_tag(x_4) == 0)
{
obj* x_7; obj* x_8; obj* x_9; 
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_2);
lean::cnstr_set(x_8, 1, x_7);
if (lean::is_scalar(x_6)) {
 x_9 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_9 = x_6;
}
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
return x_9;
}
else
{
obj* x_10; obj* x_12; obj* x_15; 
x_10 = lean::cnstr_get(x_4, 0);
lean::inc(x_10);
x_12 = lean::cnstr_get(x_4, 1);
lean::inc(x_12);
lean::dec(x_4);
x_15 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__1(x_12);
switch (lean::obj_tag(x_10)) {
case 0:
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_16 = lean::cnstr_get(x_10, 0);
lean::inc(x_16);
lean::dec(x_10);
x_19 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_19, 0, x_16);
x_20 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_2);
lean::cnstr_set(x_21, 1, x_20);
if (lean::is_scalar(x_6)) {
 x_22 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_22 = x_6;
}
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_15);
return x_22;
}
case 3:
{
obj* x_23; obj* x_24; obj* x_25; 
x_23 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_2);
lean::cnstr_set(x_24, 1, x_23);
if (lean::is_scalar(x_6)) {
 x_25 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_25 = x_6;
}
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_15);
return x_25;
}
default:
{
obj* x_27; obj* x_28; obj* x_29; 
lean::dec(x_10);
x_27 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_28 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_28, 0, x_2);
lean::cnstr_set(x_28, 1, x_27);
if (lean::is_scalar(x_6)) {
 x_29 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_29 = x_6;
}
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_15);
return x_29;
}
}
}
}
}
}
obj* l_list_map___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__2(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_12; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
x_7 = lean::cnstr_get(x_2, 0);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_2, 1);
lean::inc(x_9);
lean::dec(x_2);
x_12 = l_list_map___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__2(x_4);
if (lean::obj_tag(x_9) == 0)
{
obj* x_13; obj* x_14; obj* x_15; 
x_13 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_14 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_14 = x_6;
}
lean::cnstr_set(x_14, 0, x_7);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_12);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_16 = lean::cnstr_get(x_9, 0);
lean::inc(x_16);
lean::dec(x_9);
x_19 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_20 = l_option_map___rarg(x_19, x_16);
x_21 = lean::box(3);
x_22 = l_option_get__or__else___main___rarg(x_20, x_21);
x_23 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_24 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_24 = x_6;
}
lean::cnstr_set(x_24, 0, x_22);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_7);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_12);
return x_26;
}
}
}
}
obj* _init_l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = lean::box(3);
x_14 = x_0;
x_15 = x_17;
goto lbl_16;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
x_14 = x_20;
x_15 = x_18;
goto lbl_16;
}
lbl_16:
{
obj* x_23; 
x_23 = l_lean_parser_syntax_as__node___main(x_15);
if (lean::obj_tag(x_23) == 0)
{
obj* x_24; 
x_24 = lean::box(0);
if (lean::obj_tag(x_14) == 0)
{
obj* x_25; obj* x_26; 
x_25 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_26 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_26, 0, x_5);
lean::cnstr_set(x_26, 1, x_25);
lean::cnstr_set(x_26, 2, x_24);
return x_26;
}
else
{
obj* x_27; 
x_27 = lean::cnstr_get(x_14, 0);
lean::inc(x_27);
lean::dec(x_14);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; obj* x_33; obj* x_34; obj* x_35; 
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
lean::dec(x_27);
x_33 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_33, 0, x_30);
x_34 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_35 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_35, 0, x_5);
lean::cnstr_set(x_35, 1, x_34);
lean::cnstr_set(x_35, 2, x_33);
return x_35;
}
case 3:
{
obj* x_36; obj* x_37; 
x_36 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_37 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_37, 0, x_5);
lean::cnstr_set(x_37, 1, x_36);
lean::cnstr_set(x_37, 2, x_24);
return x_37;
}
default:
{
obj* x_39; obj* x_40; 
lean::dec(x_27);
x_39 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_40 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_40, 0, x_5);
lean::cnstr_set(x_40, 1, x_39);
lean::cnstr_set(x_40, 2, x_24);
return x_40;
}
}
}
}
else
{
obj* x_41; obj* x_43; obj* x_44; obj* x_47; 
x_41 = lean::cnstr_get(x_23, 0);
if (lean::is_exclusive(x_23)) {
 lean::cnstr_set(x_23, 0, lean::box(0));
 x_43 = x_23;
} else {
 lean::inc(x_41);
 lean::dec(x_23);
 x_43 = lean::box(0);
}
x_44 = lean::cnstr_get(x_41, 1);
lean::inc(x_44);
lean::dec(x_41);
x_47 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__1(x_44);
if (lean::obj_tag(x_14) == 0)
{
obj* x_49; obj* x_50; 
lean::dec(x_43);
x_49 = lean::box(0);
x_50 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_50, 0, x_5);
lean::cnstr_set(x_50, 1, x_47);
lean::cnstr_set(x_50, 2, x_49);
return x_50;
}
else
{
obj* x_51; 
x_51 = lean::cnstr_get(x_14, 0);
lean::inc(x_51);
lean::dec(x_14);
switch (lean::obj_tag(x_51)) {
case 0:
{
obj* x_54; obj* x_57; obj* x_58; 
x_54 = lean::cnstr_get(x_51, 0);
lean::inc(x_54);
lean::dec(x_51);
if (lean::is_scalar(x_43)) {
 x_57 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_57 = x_43;
}
lean::cnstr_set(x_57, 0, x_54);
x_58 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_58, 0, x_5);
lean::cnstr_set(x_58, 1, x_47);
lean::cnstr_set(x_58, 2, x_57);
return x_58;
}
case 3:
{
obj* x_60; obj* x_61; 
lean::dec(x_43);
x_60 = lean::box(0);
x_61 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_61, 0, x_5);
lean::cnstr_set(x_61, 1, x_47);
lean::cnstr_set(x_61, 2, x_60);
return x_61;
}
default:
{
obj* x_64; obj* x_65; 
lean::dec(x_51);
lean::dec(x_43);
x_64 = lean::box(0);
x_65 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_65, 0, x_5);
lean::cnstr_set(x_65, 1, x_47);
lean::cnstr_set(x_65, 2, x_64);
return x_65;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; 
x_36 = l_lean_parser_syntax_as__node___main(x_28);
if (lean::obj_tag(x_36) == 0)
{
obj* x_37; 
x_37 = lean::box(0);
if (lean::obj_tag(x_27) == 0)
{
obj* x_38; obj* x_39; 
x_38 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_39 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_39, 0, x_18);
lean::cnstr_set(x_39, 1, x_38);
lean::cnstr_set(x_39, 2, x_37);
return x_39;
}
else
{
obj* x_40; 
x_40 = lean::cnstr_get(x_27, 0);
lean::inc(x_40);
lean::dec(x_27);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_43; obj* x_46; obj* x_47; obj* x_48; 
x_43 = lean::cnstr_get(x_40, 0);
lean::inc(x_43);
lean::dec(x_40);
x_46 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_46, 0, x_43);
x_47 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_48 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_48, 0, x_18);
lean::cnstr_set(x_48, 1, x_47);
lean::cnstr_set(x_48, 2, x_46);
return x_48;
}
case 3:
{
obj* x_49; obj* x_50; 
x_49 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_50 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_50, 0, x_18);
lean::cnstr_set(x_50, 1, x_49);
lean::cnstr_set(x_50, 2, x_37);
return x_50;
}
default:
{
obj* x_52; obj* x_53; 
lean::dec(x_40);
x_52 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_53 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_53, 0, x_18);
lean::cnstr_set(x_53, 1, x_52);
lean::cnstr_set(x_53, 2, x_37);
return x_53;
}
}
}
}
else
{
obj* x_54; obj* x_56; obj* x_57; obj* x_60; 
x_54 = lean::cnstr_get(x_36, 0);
if (lean::is_exclusive(x_36)) {
 lean::cnstr_set(x_36, 0, lean::box(0));
 x_56 = x_36;
} else {
 lean::inc(x_54);
 lean::dec(x_36);
 x_56 = lean::box(0);
}
x_57 = lean::cnstr_get(x_54, 1);
lean::inc(x_57);
lean::dec(x_54);
x_60 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__1(x_57);
if (lean::obj_tag(x_27) == 0)
{
obj* x_62; obj* x_63; 
lean::dec(x_56);
x_62 = lean::box(0);
x_63 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_63, 0, x_18);
lean::cnstr_set(x_63, 1, x_60);
lean::cnstr_set(x_63, 2, x_62);
return x_63;
}
else
{
obj* x_64; 
x_64 = lean::cnstr_get(x_27, 0);
lean::inc(x_64);
lean::dec(x_27);
switch (lean::obj_tag(x_64)) {
case 0:
{
obj* x_67; obj* x_70; obj* x_71; 
x_67 = lean::cnstr_get(x_64, 0);
lean::inc(x_67);
lean::dec(x_64);
if (lean::is_scalar(x_56)) {
 x_70 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_70 = x_56;
}
lean::cnstr_set(x_70, 0, x_67);
x_71 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_71, 0, x_18);
lean::cnstr_set(x_71, 1, x_60);
lean::cnstr_set(x_71, 2, x_70);
return x_71;
}
case 3:
{
obj* x_73; obj* x_74; 
lean::dec(x_56);
x_73 = lean::box(0);
x_74 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_74, 0, x_18);
lean::cnstr_set(x_74, 1, x_60);
lean::cnstr_set(x_74, 2, x_73);
return x_74;
}
default:
{
obj* x_77; obj* x_78; 
lean::dec(x_64);
lean::dec(x_56);
x_77 = lean::box(0);
x_78 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_78, 0, x_18);
lean::cnstr_set(x_78, 1, x_60);
lean::cnstr_set(x_78, 2, x_77);
return x_78;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_9 = l_option_map___rarg(x_8, x_1);
x_10 = lean::box(3);
x_11 = l_option_get__or__else___main___rarg(x_9, x_10);
x_12 = l_list_map___main___at_lean_parser_term_anonymous__constructor_has__view_x_27___spec__2(x_3);
x_13 = l_list_join___main___rarg(x_12);
x_14 = l_lean_parser_no__kind;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
x_16 = l_option_map___rarg(x_8, x_5);
x_17 = l_option_get__or__else___main___rarg(x_16, x_10);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_15);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_11);
lean::cnstr_set(x_21, 1, x_20);
x_22 = l_lean_parser_term_anonymous__constructor;
x_23 = l_lean_parser_syntax_mk__node(x_22, x_21);
return x_23;
}
}
obj* _init_l_lean_parser_term_anonymous__constructor_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_anonymous__constructor_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_anonymous__constructor_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_0 = lean::mk_string("\xe2\x9f\xa8");
x_1 = l_lean_parser_max__prec;
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::mk_string(",");
x_4 = lean::mk_nat_obj(0u);
x_5 = l_lean_parser_symbol_tokens___rarg(x_3, x_4);
x_6 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_7 = l_lean_parser_combinators_sep__by_tokens___rarg(x_6, x_5);
x_8 = lean::mk_string("\xe2\x9f\xa9");
x_9 = l_lean_parser_symbol_tokens___rarg(x_8, x_4);
x_10 = lean::box(0);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_9, x_10);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_7, x_11);
x_13 = l_lean_parser_list_cons_tokens___rarg(x_2, x_12);
x_14 = l_lean_parser_tokens___rarg(x_13);
return x_14;
}
}
obj* _init_l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_12; uint8 x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_0 = lean::mk_string("\xe2\x9f\xa8");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::mk_string(",");
x_9 = l_string_trim(x_8);
lean::inc(x_9);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_11, 0, x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_12, 0, x_9);
lean::closure_set(x_12, 1, x_6);
lean::closure_set(x_12, 2, x_11);
x_13 = 1;
x_14 = lean::box(x_13);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__1___boxed), 8, 3);
lean::closure_set(x_15, 0, x_7);
lean::closure_set(x_15, 1, x_12);
lean::closure_set(x_15, 2, x_14);
x_16 = lean::mk_string("\xe2\x9f\xa9");
x_17 = l_string_trim(x_16);
lean::inc(x_17);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_19, 0, x_17);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_20, 0, x_17);
lean::closure_set(x_20, 1, x_6);
lean::closure_set(x_20, 2, x_19);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_15);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_5);
lean::cnstr_set(x_24, 1, x_23);
x_25 = l_lean_parser_term__parser__m_monad;
x_26 = l_lean_parser_term__parser__m_monad__except;
x_27 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_28 = l_lean_parser_term__parser__m_alternative;
x_29 = l_lean_parser_term_anonymous__constructor;
x_30 = l_lean_parser_term_anonymous__constructor_has__view;
x_31 = l_lean_parser_combinators_node_view___rarg(x_25, x_26, x_27, x_28, x_29, x_24, x_30);
return x_31;
}
}
obj* _init_l_lean_parser_term_anonymous__constructor_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_12; uint8 x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_0 = lean::mk_string("\xe2\x9f\xa8");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::mk_string(",");
x_9 = l_string_trim(x_8);
lean::inc(x_9);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_11, 0, x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_12, 0, x_9);
lean::closure_set(x_12, 1, x_6);
lean::closure_set(x_12, 2, x_11);
x_13 = 1;
x_14 = lean::box(x_13);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__1___boxed), 8, 3);
lean::closure_set(x_15, 0, x_7);
lean::closure_set(x_15, 1, x_12);
lean::closure_set(x_15, 2, x_14);
x_16 = lean::mk_string("\xe2\x9f\xa9");
x_17 = l_string_trim(x_16);
lean::inc(x_17);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_19, 0, x_17);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_20, 0, x_17);
lean::closure_set(x_20, 1, x_6);
lean::closure_set(x_20, 2, x_19);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_15);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_5);
lean::cnstr_set(x_24, 1, x_23);
return x_24;
}
}
obj* l_lean_parser_term_anonymous__constructor_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_anonymous__constructor;
x_6 = l_lean_parser_term_anonymous__constructor_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_explicit__binder__content() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("explicit_binder_content");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; obj* x_9; obj* x_12; obj* x_13; 
x_8 = l_lean_parser_term_binder__content_has__view;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_0);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
else
{
obj* x_14; obj* x_15; obj* x_18; obj* x_19; 
x_14 = l_lean_parser_command_notation__like_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_0);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
}
}
obj* _init_l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("explicit_binder_content");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__2;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; obj* x_69; obj* x_72; obj* x_73; 
x_68 = l_lean_parser_term_binder__content_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_1);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
else
{
obj* x_74; obj* x_75; obj* x_78; obj* x_79; 
x_74 = l_lean_parser_command_notation__like_has__view;
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
lean::dec(x_74);
x_78 = lean::apply_1(x_75, x_1);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
}
}
obj* l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_command_notation__like_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_lean_parser_term_explicit__binder__content;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_lean_parser_term_binder__content_has__view;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_26 = l_lean_parser_syntax_mk__node(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_lean_parser_term_explicit__binder__content;
x_29 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_lean_parser_term_explicit__binder__content_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_explicit__binder__content_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_explicit__binder__content_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_explicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("explicit_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_term_explicit__binder__content_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_7 = lean::box(0);
x_8 = lean::box(3);
x_4 = x_7;
x_5 = x_8;
goto lbl_6;
lbl_3:
{
obj* x_9; obj* x_10; obj* x_13; 
x_9 = l_lean_parser_term_explicit__binder__content_has__view;
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
x_13 = lean::apply_1(x_10, x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_14; obj* x_15; 
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_15, 0, x_0);
lean::cnstr_set(x_15, 1, x_13);
lean::cnstr_set(x_15, 2, x_14);
return x_15;
}
else
{
obj* x_16; 
x_16 = lean::cnstr_get(x_2, 0);
lean::inc(x_16);
lean::dec(x_2);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_19; obj* x_22; obj* x_23; 
x_19 = lean::cnstr_get(x_16, 0);
lean::inc(x_19);
lean::dec(x_16);
x_22 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
x_23 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_23, 0, x_0);
lean::cnstr_set(x_23, 1, x_13);
lean::cnstr_set(x_23, 2, x_22);
return x_23;
}
case 3:
{
obj* x_24; obj* x_25; 
x_24 = lean::box(0);
x_25 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_25, 0, x_0);
lean::cnstr_set(x_25, 1, x_13);
lean::cnstr_set(x_25, 2, x_24);
return x_25;
}
default:
{
obj* x_27; obj* x_28; 
lean::dec(x_16);
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_28, 0, x_0);
lean::cnstr_set(x_28, 1, x_13);
lean::cnstr_set(x_28, 2, x_27);
return x_28;
}
}
}
}
lbl_6:
{
obj* x_29; 
switch (lean::obj_tag(x_5)) {
case 0:
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_5, 0);
lean::inc(x_31);
lean::dec(x_5);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_31);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_34;
goto lbl_30;
}
else
{
obj* x_35; obj* x_37; 
x_35 = lean::cnstr_get(x_4, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_4, 1);
lean::inc(x_37);
lean::dec(x_4);
x_0 = x_34;
x_1 = x_35;
x_2 = x_37;
goto lbl_3;
}
}
case 3:
{
obj* x_40; 
x_40 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_40;
goto lbl_30;
}
else
{
obj* x_41; obj* x_43; 
x_41 = lean::cnstr_get(x_4, 0);
lean::inc(x_41);
x_43 = lean::cnstr_get(x_4, 1);
lean::inc(x_43);
lean::dec(x_4);
x_0 = x_40;
x_1 = x_41;
x_2 = x_43;
goto lbl_3;
}
}
default:
{
obj* x_47; 
lean::dec(x_5);
x_47 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_47;
goto lbl_30;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_4, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_4, 1);
lean::inc(x_50);
lean::dec(x_4);
x_0 = x_47;
x_1 = x_48;
x_2 = x_50;
goto lbl_3;
}
}
}
lbl_30:
{
if (lean::obj_tag(x_4) == 0)
{
obj* x_53; obj* x_54; obj* x_55; 
x_53 = lean::box(0);
x_54 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_29);
lean::cnstr_set(x_55, 1, x_54);
lean::cnstr_set(x_55, 2, x_53);
return x_55;
}
else
{
obj* x_56; 
x_56 = lean::cnstr_get(x_4, 0);
lean::inc(x_56);
lean::dec(x_4);
switch (lean::obj_tag(x_56)) {
case 0:
{
obj* x_59; obj* x_62; obj* x_63; obj* x_64; 
x_59 = lean::cnstr_get(x_56, 0);
lean::inc(x_59);
lean::dec(x_56);
x_62 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_62, 0, x_59);
x_63 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
x_64 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_64, 0, x_29);
lean::cnstr_set(x_64, 1, x_63);
lean::cnstr_set(x_64, 2, x_62);
return x_64;
}
case 3:
{
obj* x_65; obj* x_66; obj* x_67; 
x_65 = lean::box(0);
x_66 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
x_67 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_67, 0, x_29);
lean::cnstr_set(x_67, 1, x_66);
lean::cnstr_set(x_67, 2, x_65);
return x_67;
}
default:
{
obj* x_69; obj* x_70; obj* x_71; 
lean::dec(x_56);
x_69 = lean::box(0);
x_70 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
x_71 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_71, 0, x_29);
lean::cnstr_set(x_71, 1, x_70);
lean::cnstr_set(x_71, 2, x_69);
return x_71;
}
}
}
}
}
}
}
obj* l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_9; 
x_9 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__2;
return x_9;
}
else
{
obj* x_10; obj* x_13; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
lean::dec(x_10);
if (lean::obj_tag(x_13) == 0)
{
obj* x_16; 
x_16 = lean::box(3);
x_5 = x_13;
x_6 = x_16;
goto lbl_7;
}
else
{
obj* x_17; obj* x_19; 
x_17 = lean::cnstr_get(x_13, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_13, 1);
lean::inc(x_19);
lean::dec(x_13);
x_5 = x_19;
x_6 = x_17;
goto lbl_7;
}
}
lbl_4:
{
obj* x_22; obj* x_23; obj* x_26; 
x_22 = l_lean_parser_term_explicit__binder__content_has__view;
x_23 = lean::cnstr_get(x_22, 0);
lean::inc(x_23);
lean::dec(x_22);
x_26 = lean::apply_1(x_23, x_2);
if (lean::obj_tag(x_3) == 0)
{
obj* x_27; obj* x_28; 
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_28, 0, x_1);
lean::cnstr_set(x_28, 1, x_26);
lean::cnstr_set(x_28, 2, x_27);
return x_28;
}
else
{
obj* x_29; 
x_29 = lean::cnstr_get(x_3, 0);
lean::inc(x_29);
lean::dec(x_3);
switch (lean::obj_tag(x_29)) {
case 0:
{
obj* x_32; obj* x_35; obj* x_36; 
x_32 = lean::cnstr_get(x_29, 0);
lean::inc(x_32);
lean::dec(x_29);
x_35 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_35, 0, x_32);
x_36 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_36, 0, x_1);
lean::cnstr_set(x_36, 1, x_26);
lean::cnstr_set(x_36, 2, x_35);
return x_36;
}
case 3:
{
obj* x_37; obj* x_38; 
x_37 = lean::box(0);
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_1);
lean::cnstr_set(x_38, 1, x_26);
lean::cnstr_set(x_38, 2, x_37);
return x_38;
}
default:
{
obj* x_40; obj* x_41; 
lean::dec(x_29);
x_40 = lean::box(0);
x_41 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_41, 0, x_1);
lean::cnstr_set(x_41, 1, x_26);
lean::cnstr_set(x_41, 2, x_40);
return x_41;
}
}
}
}
lbl_7:
{
obj* x_42; 
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_44; obj* x_47; 
x_44 = lean::cnstr_get(x_6, 0);
lean::inc(x_44);
lean::dec(x_6);
x_47 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_47, 0, x_44);
if (lean::obj_tag(x_5) == 0)
{
x_42 = x_47;
goto lbl_43;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_5, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_5, 1);
lean::inc(x_50);
lean::dec(x_5);
x_1 = x_47;
x_2 = x_48;
x_3 = x_50;
goto lbl_4;
}
}
case 3:
{
obj* x_53; 
x_53 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_42 = x_53;
goto lbl_43;
}
else
{
obj* x_54; obj* x_56; 
x_54 = lean::cnstr_get(x_5, 0);
lean::inc(x_54);
x_56 = lean::cnstr_get(x_5, 1);
lean::inc(x_56);
lean::dec(x_5);
x_1 = x_53;
x_2 = x_54;
x_3 = x_56;
goto lbl_4;
}
}
default:
{
obj* x_60; 
lean::dec(x_6);
x_60 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_42 = x_60;
goto lbl_43;
}
else
{
obj* x_61; obj* x_63; 
x_61 = lean::cnstr_get(x_5, 0);
lean::inc(x_61);
x_63 = lean::cnstr_get(x_5, 1);
lean::inc(x_63);
lean::dec(x_5);
x_1 = x_60;
x_2 = x_61;
x_3 = x_63;
goto lbl_4;
}
}
}
lbl_43:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_66; obj* x_67; obj* x_68; 
x_66 = lean::box(0);
x_67 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
x_68 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_68, 0, x_42);
lean::cnstr_set(x_68, 1, x_67);
lean::cnstr_set(x_68, 2, x_66);
return x_68;
}
else
{
obj* x_69; 
x_69 = lean::cnstr_get(x_5, 0);
lean::inc(x_69);
lean::dec(x_5);
switch (lean::obj_tag(x_69)) {
case 0:
{
obj* x_72; obj* x_75; obj* x_76; obj* x_77; 
x_72 = lean::cnstr_get(x_69, 0);
lean::inc(x_72);
lean::dec(x_69);
x_75 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_75, 0, x_72);
x_76 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
x_77 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_77, 0, x_42);
lean::cnstr_set(x_77, 1, x_76);
lean::cnstr_set(x_77, 2, x_75);
return x_77;
}
case 3:
{
obj* x_78; obj* x_79; obj* x_80; 
x_78 = lean::box(0);
x_79 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
x_80 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_80, 0, x_42);
lean::cnstr_set(x_80, 1, x_79);
lean::cnstr_set(x_80, 2, x_78);
return x_80;
}
default:
{
obj* x_82; obj* x_83; obj* x_84; 
lean::dec(x_69);
x_82 = lean::box(0);
x_83 = l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1;
x_84 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_84, 0, x_42);
lean::cnstr_set(x_84, 1, x_83);
lean::cnstr_set(x_84, 2, x_82);
return x_84;
}
}
}
}
}
}
}
obj* l_lean_parser_term_explicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_9 = l_option_map___rarg(x_8, x_1);
x_10 = lean::box(3);
x_11 = l_option_get__or__else___main___rarg(x_9, x_10);
x_12 = l_lean_parser_term_explicit__binder__content_has__view;
x_13 = lean::cnstr_get(x_12, 1);
lean::inc(x_13);
lean::dec(x_12);
x_16 = lean::apply_1(x_13, x_3);
x_17 = l_option_map___rarg(x_8, x_5);
x_18 = l_option_get__or__else___main___rarg(x_17, x_10);
x_19 = lean::box(0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_18);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_16);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_11);
lean::cnstr_set(x_22, 1, x_21);
x_23 = l_lean_parser_term_explicit__binder;
x_24 = l_lean_parser_syntax_mk__node(x_23, x_22);
return x_24;
}
}
obj* _init_l_lean_parser_term_explicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_explicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_explicit__binder_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_implicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("implicit_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_term_binder__content_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_7 = lean::box(0);
x_8 = lean::box(3);
x_4 = x_7;
x_5 = x_8;
goto lbl_6;
lbl_3:
{
obj* x_9; obj* x_10; obj* x_13; 
x_9 = l_lean_parser_term_binder__content_has__view;
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
x_13 = lean::apply_1(x_10, x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_14; obj* x_15; 
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_15, 0, x_0);
lean::cnstr_set(x_15, 1, x_13);
lean::cnstr_set(x_15, 2, x_14);
return x_15;
}
else
{
obj* x_16; 
x_16 = lean::cnstr_get(x_2, 0);
lean::inc(x_16);
lean::dec(x_2);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_19; obj* x_22; obj* x_23; 
x_19 = lean::cnstr_get(x_16, 0);
lean::inc(x_19);
lean::dec(x_16);
x_22 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
x_23 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_23, 0, x_0);
lean::cnstr_set(x_23, 1, x_13);
lean::cnstr_set(x_23, 2, x_22);
return x_23;
}
case 3:
{
obj* x_24; obj* x_25; 
x_24 = lean::box(0);
x_25 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_25, 0, x_0);
lean::cnstr_set(x_25, 1, x_13);
lean::cnstr_set(x_25, 2, x_24);
return x_25;
}
default:
{
obj* x_27; obj* x_28; 
lean::dec(x_16);
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_28, 0, x_0);
lean::cnstr_set(x_28, 1, x_13);
lean::cnstr_set(x_28, 2, x_27);
return x_28;
}
}
}
}
lbl_6:
{
obj* x_29; 
switch (lean::obj_tag(x_5)) {
case 0:
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_5, 0);
lean::inc(x_31);
lean::dec(x_5);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_31);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_34;
goto lbl_30;
}
else
{
obj* x_35; obj* x_37; 
x_35 = lean::cnstr_get(x_4, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_4, 1);
lean::inc(x_37);
lean::dec(x_4);
x_0 = x_34;
x_1 = x_35;
x_2 = x_37;
goto lbl_3;
}
}
case 3:
{
obj* x_40; 
x_40 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_40;
goto lbl_30;
}
else
{
obj* x_41; obj* x_43; 
x_41 = lean::cnstr_get(x_4, 0);
lean::inc(x_41);
x_43 = lean::cnstr_get(x_4, 1);
lean::inc(x_43);
lean::dec(x_4);
x_0 = x_40;
x_1 = x_41;
x_2 = x_43;
goto lbl_3;
}
}
default:
{
obj* x_47; 
lean::dec(x_5);
x_47 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_47;
goto lbl_30;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_4, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_4, 1);
lean::inc(x_50);
lean::dec(x_4);
x_0 = x_47;
x_1 = x_48;
x_2 = x_50;
goto lbl_3;
}
}
}
lbl_30:
{
if (lean::obj_tag(x_4) == 0)
{
obj* x_53; obj* x_54; obj* x_55; 
x_53 = lean::box(0);
x_54 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_29);
lean::cnstr_set(x_55, 1, x_54);
lean::cnstr_set(x_55, 2, x_53);
return x_55;
}
else
{
obj* x_56; 
x_56 = lean::cnstr_get(x_4, 0);
lean::inc(x_56);
lean::dec(x_4);
switch (lean::obj_tag(x_56)) {
case 0:
{
obj* x_59; obj* x_62; obj* x_63; obj* x_64; 
x_59 = lean::cnstr_get(x_56, 0);
lean::inc(x_59);
lean::dec(x_56);
x_62 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_62, 0, x_59);
x_63 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_64 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_64, 0, x_29);
lean::cnstr_set(x_64, 1, x_63);
lean::cnstr_set(x_64, 2, x_62);
return x_64;
}
case 3:
{
obj* x_65; obj* x_66; obj* x_67; 
x_65 = lean::box(0);
x_66 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_67 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_67, 0, x_29);
lean::cnstr_set(x_67, 1, x_66);
lean::cnstr_set(x_67, 2, x_65);
return x_67;
}
default:
{
obj* x_69; obj* x_70; obj* x_71; 
lean::dec(x_56);
x_69 = lean::box(0);
x_70 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_71 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_71, 0, x_29);
lean::cnstr_set(x_71, 1, x_70);
lean::cnstr_set(x_71, 2, x_69);
return x_71;
}
}
}
}
}
}
}
obj* l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_9; 
x_9 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__2;
return x_9;
}
else
{
obj* x_10; obj* x_13; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
lean::dec(x_10);
if (lean::obj_tag(x_13) == 0)
{
obj* x_16; 
x_16 = lean::box(3);
x_5 = x_13;
x_6 = x_16;
goto lbl_7;
}
else
{
obj* x_17; obj* x_19; 
x_17 = lean::cnstr_get(x_13, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_13, 1);
lean::inc(x_19);
lean::dec(x_13);
x_5 = x_19;
x_6 = x_17;
goto lbl_7;
}
}
lbl_4:
{
obj* x_22; obj* x_23; obj* x_26; 
x_22 = l_lean_parser_term_binder__content_has__view;
x_23 = lean::cnstr_get(x_22, 0);
lean::inc(x_23);
lean::dec(x_22);
x_26 = lean::apply_1(x_23, x_2);
if (lean::obj_tag(x_3) == 0)
{
obj* x_27; obj* x_28; 
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_28, 0, x_1);
lean::cnstr_set(x_28, 1, x_26);
lean::cnstr_set(x_28, 2, x_27);
return x_28;
}
else
{
obj* x_29; 
x_29 = lean::cnstr_get(x_3, 0);
lean::inc(x_29);
lean::dec(x_3);
switch (lean::obj_tag(x_29)) {
case 0:
{
obj* x_32; obj* x_35; obj* x_36; 
x_32 = lean::cnstr_get(x_29, 0);
lean::inc(x_32);
lean::dec(x_29);
x_35 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_35, 0, x_32);
x_36 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_36, 0, x_1);
lean::cnstr_set(x_36, 1, x_26);
lean::cnstr_set(x_36, 2, x_35);
return x_36;
}
case 3:
{
obj* x_37; obj* x_38; 
x_37 = lean::box(0);
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_1);
lean::cnstr_set(x_38, 1, x_26);
lean::cnstr_set(x_38, 2, x_37);
return x_38;
}
default:
{
obj* x_40; obj* x_41; 
lean::dec(x_29);
x_40 = lean::box(0);
x_41 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_41, 0, x_1);
lean::cnstr_set(x_41, 1, x_26);
lean::cnstr_set(x_41, 2, x_40);
return x_41;
}
}
}
}
lbl_7:
{
obj* x_42; 
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_44; obj* x_47; 
x_44 = lean::cnstr_get(x_6, 0);
lean::inc(x_44);
lean::dec(x_6);
x_47 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_47, 0, x_44);
if (lean::obj_tag(x_5) == 0)
{
x_42 = x_47;
goto lbl_43;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_5, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_5, 1);
lean::inc(x_50);
lean::dec(x_5);
x_1 = x_47;
x_2 = x_48;
x_3 = x_50;
goto lbl_4;
}
}
case 3:
{
obj* x_53; 
x_53 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_42 = x_53;
goto lbl_43;
}
else
{
obj* x_54; obj* x_56; 
x_54 = lean::cnstr_get(x_5, 0);
lean::inc(x_54);
x_56 = lean::cnstr_get(x_5, 1);
lean::inc(x_56);
lean::dec(x_5);
x_1 = x_53;
x_2 = x_54;
x_3 = x_56;
goto lbl_4;
}
}
default:
{
obj* x_60; 
lean::dec(x_6);
x_60 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_42 = x_60;
goto lbl_43;
}
else
{
obj* x_61; obj* x_63; 
x_61 = lean::cnstr_get(x_5, 0);
lean::inc(x_61);
x_63 = lean::cnstr_get(x_5, 1);
lean::inc(x_63);
lean::dec(x_5);
x_1 = x_60;
x_2 = x_61;
x_3 = x_63;
goto lbl_4;
}
}
}
lbl_43:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_66; obj* x_67; obj* x_68; 
x_66 = lean::box(0);
x_67 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_68 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_68, 0, x_42);
lean::cnstr_set(x_68, 1, x_67);
lean::cnstr_set(x_68, 2, x_66);
return x_68;
}
else
{
obj* x_69; 
x_69 = lean::cnstr_get(x_5, 0);
lean::inc(x_69);
lean::dec(x_5);
switch (lean::obj_tag(x_69)) {
case 0:
{
obj* x_72; obj* x_75; obj* x_76; obj* x_77; 
x_72 = lean::cnstr_get(x_69, 0);
lean::inc(x_72);
lean::dec(x_69);
x_75 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_75, 0, x_72);
x_76 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_77 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_77, 0, x_42);
lean::cnstr_set(x_77, 1, x_76);
lean::cnstr_set(x_77, 2, x_75);
return x_77;
}
case 3:
{
obj* x_78; obj* x_79; obj* x_80; 
x_78 = lean::box(0);
x_79 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_80 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_80, 0, x_42);
lean::cnstr_set(x_80, 1, x_79);
lean::cnstr_set(x_80, 2, x_78);
return x_80;
}
default:
{
obj* x_82; obj* x_83; obj* x_84; 
lean::dec(x_69);
x_82 = lean::box(0);
x_83 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_84 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_84, 0, x_42);
lean::cnstr_set(x_84, 1, x_83);
lean::cnstr_set(x_84, 2, x_82);
return x_84;
}
}
}
}
}
}
}
obj* l_lean_parser_term_implicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_9 = l_option_map___rarg(x_8, x_1);
x_10 = lean::box(3);
x_11 = l_option_get__or__else___main___rarg(x_9, x_10);
x_12 = l_lean_parser_term_binder__content_has__view;
x_13 = lean::cnstr_get(x_12, 1);
lean::inc(x_13);
lean::dec(x_12);
x_16 = lean::apply_1(x_13, x_3);
x_17 = l_option_map___rarg(x_8, x_5);
x_18 = l_option_get__or__else___main___rarg(x_17, x_10);
x_19 = lean::box(0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_18);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_16);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_11);
lean::cnstr_set(x_22, 1, x_21);
x_23 = l_lean_parser_term_implicit__binder;
x_24 = l_lean_parser_syntax_mk__node(x_23, x_22);
return x_24;
}
}
obj* _init_l_lean_parser_term_implicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_implicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_implicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_implicit__binder_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_strict__implicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("strict_implicit_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_7 = lean::box(0);
x_8 = lean::box(3);
x_4 = x_7;
x_5 = x_8;
goto lbl_6;
lbl_3:
{
obj* x_9; obj* x_10; obj* x_13; 
x_9 = l_lean_parser_term_binder__content_has__view;
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
x_13 = lean::apply_1(x_10, x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_14; obj* x_15; 
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_15, 0, x_0);
lean::cnstr_set(x_15, 1, x_13);
lean::cnstr_set(x_15, 2, x_14);
return x_15;
}
else
{
obj* x_16; 
x_16 = lean::cnstr_get(x_2, 0);
lean::inc(x_16);
lean::dec(x_2);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_19; obj* x_22; obj* x_23; 
x_19 = lean::cnstr_get(x_16, 0);
lean::inc(x_19);
lean::dec(x_16);
x_22 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
x_23 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_23, 0, x_0);
lean::cnstr_set(x_23, 1, x_13);
lean::cnstr_set(x_23, 2, x_22);
return x_23;
}
case 3:
{
obj* x_24; obj* x_25; 
x_24 = lean::box(0);
x_25 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_25, 0, x_0);
lean::cnstr_set(x_25, 1, x_13);
lean::cnstr_set(x_25, 2, x_24);
return x_25;
}
default:
{
obj* x_27; obj* x_28; 
lean::dec(x_16);
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_28, 0, x_0);
lean::cnstr_set(x_28, 1, x_13);
lean::cnstr_set(x_28, 2, x_27);
return x_28;
}
}
}
}
lbl_6:
{
obj* x_29; 
switch (lean::obj_tag(x_5)) {
case 0:
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_5, 0);
lean::inc(x_31);
lean::dec(x_5);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_31);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_34;
goto lbl_30;
}
else
{
obj* x_35; obj* x_37; 
x_35 = lean::cnstr_get(x_4, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_4, 1);
lean::inc(x_37);
lean::dec(x_4);
x_0 = x_34;
x_1 = x_35;
x_2 = x_37;
goto lbl_3;
}
}
case 3:
{
obj* x_40; 
x_40 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_40;
goto lbl_30;
}
else
{
obj* x_41; obj* x_43; 
x_41 = lean::cnstr_get(x_4, 0);
lean::inc(x_41);
x_43 = lean::cnstr_get(x_4, 1);
lean::inc(x_43);
lean::dec(x_4);
x_0 = x_40;
x_1 = x_41;
x_2 = x_43;
goto lbl_3;
}
}
default:
{
obj* x_47; 
lean::dec(x_5);
x_47 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_47;
goto lbl_30;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_4, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_4, 1);
lean::inc(x_50);
lean::dec(x_4);
x_0 = x_47;
x_1 = x_48;
x_2 = x_50;
goto lbl_3;
}
}
}
lbl_30:
{
if (lean::obj_tag(x_4) == 0)
{
obj* x_53; obj* x_54; obj* x_55; 
x_53 = lean::box(0);
x_54 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_29);
lean::cnstr_set(x_55, 1, x_54);
lean::cnstr_set(x_55, 2, x_53);
return x_55;
}
else
{
obj* x_56; 
x_56 = lean::cnstr_get(x_4, 0);
lean::inc(x_56);
lean::dec(x_4);
switch (lean::obj_tag(x_56)) {
case 0:
{
obj* x_59; obj* x_62; obj* x_63; obj* x_64; 
x_59 = lean::cnstr_get(x_56, 0);
lean::inc(x_59);
lean::dec(x_56);
x_62 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_62, 0, x_59);
x_63 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_64 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_64, 0, x_29);
lean::cnstr_set(x_64, 1, x_63);
lean::cnstr_set(x_64, 2, x_62);
return x_64;
}
case 3:
{
obj* x_65; obj* x_66; obj* x_67; 
x_65 = lean::box(0);
x_66 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_67 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_67, 0, x_29);
lean::cnstr_set(x_67, 1, x_66);
lean::cnstr_set(x_67, 2, x_65);
return x_67;
}
default:
{
obj* x_69; obj* x_70; obj* x_71; 
lean::dec(x_56);
x_69 = lean::box(0);
x_70 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_71 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_71, 0, x_29);
lean::cnstr_set(x_71, 1, x_70);
lean::cnstr_set(x_71, 2, x_69);
return x_71;
}
}
}
}
}
}
}
obj* l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_9; 
x_9 = l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1___closed__1;
return x_9;
}
else
{
obj* x_10; obj* x_13; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
lean::dec(x_10);
if (lean::obj_tag(x_13) == 0)
{
obj* x_16; 
x_16 = lean::box(3);
x_5 = x_13;
x_6 = x_16;
goto lbl_7;
}
else
{
obj* x_17; obj* x_19; 
x_17 = lean::cnstr_get(x_13, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_13, 1);
lean::inc(x_19);
lean::dec(x_13);
x_5 = x_19;
x_6 = x_17;
goto lbl_7;
}
}
lbl_4:
{
obj* x_22; obj* x_23; obj* x_26; 
x_22 = l_lean_parser_term_binder__content_has__view;
x_23 = lean::cnstr_get(x_22, 0);
lean::inc(x_23);
lean::dec(x_22);
x_26 = lean::apply_1(x_23, x_2);
if (lean::obj_tag(x_3) == 0)
{
obj* x_27; obj* x_28; 
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_28, 0, x_1);
lean::cnstr_set(x_28, 1, x_26);
lean::cnstr_set(x_28, 2, x_27);
return x_28;
}
else
{
obj* x_29; 
x_29 = lean::cnstr_get(x_3, 0);
lean::inc(x_29);
lean::dec(x_3);
switch (lean::obj_tag(x_29)) {
case 0:
{
obj* x_32; obj* x_35; obj* x_36; 
x_32 = lean::cnstr_get(x_29, 0);
lean::inc(x_32);
lean::dec(x_29);
x_35 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_35, 0, x_32);
x_36 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_36, 0, x_1);
lean::cnstr_set(x_36, 1, x_26);
lean::cnstr_set(x_36, 2, x_35);
return x_36;
}
case 3:
{
obj* x_37; obj* x_38; 
x_37 = lean::box(0);
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_1);
lean::cnstr_set(x_38, 1, x_26);
lean::cnstr_set(x_38, 2, x_37);
return x_38;
}
default:
{
obj* x_40; obj* x_41; 
lean::dec(x_29);
x_40 = lean::box(0);
x_41 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_41, 0, x_1);
lean::cnstr_set(x_41, 1, x_26);
lean::cnstr_set(x_41, 2, x_40);
return x_41;
}
}
}
}
lbl_7:
{
obj* x_42; 
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_44; obj* x_47; 
x_44 = lean::cnstr_get(x_6, 0);
lean::inc(x_44);
lean::dec(x_6);
x_47 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_47, 0, x_44);
if (lean::obj_tag(x_5) == 0)
{
x_42 = x_47;
goto lbl_43;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_5, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_5, 1);
lean::inc(x_50);
lean::dec(x_5);
x_1 = x_47;
x_2 = x_48;
x_3 = x_50;
goto lbl_4;
}
}
case 3:
{
obj* x_53; 
x_53 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_42 = x_53;
goto lbl_43;
}
else
{
obj* x_54; obj* x_56; 
x_54 = lean::cnstr_get(x_5, 0);
lean::inc(x_54);
x_56 = lean::cnstr_get(x_5, 1);
lean::inc(x_56);
lean::dec(x_5);
x_1 = x_53;
x_2 = x_54;
x_3 = x_56;
goto lbl_4;
}
}
default:
{
obj* x_60; 
lean::dec(x_6);
x_60 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_42 = x_60;
goto lbl_43;
}
else
{
obj* x_61; obj* x_63; 
x_61 = lean::cnstr_get(x_5, 0);
lean::inc(x_61);
x_63 = lean::cnstr_get(x_5, 1);
lean::inc(x_63);
lean::dec(x_5);
x_1 = x_60;
x_2 = x_61;
x_3 = x_63;
goto lbl_4;
}
}
}
lbl_43:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_66; obj* x_67; obj* x_68; 
x_66 = lean::box(0);
x_67 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_68 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_68, 0, x_42);
lean::cnstr_set(x_68, 1, x_67);
lean::cnstr_set(x_68, 2, x_66);
return x_68;
}
else
{
obj* x_69; 
x_69 = lean::cnstr_get(x_5, 0);
lean::inc(x_69);
lean::dec(x_5);
switch (lean::obj_tag(x_69)) {
case 0:
{
obj* x_72; obj* x_75; obj* x_76; obj* x_77; 
x_72 = lean::cnstr_get(x_69, 0);
lean::inc(x_72);
lean::dec(x_69);
x_75 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_75, 0, x_72);
x_76 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_77 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_77, 0, x_42);
lean::cnstr_set(x_77, 1, x_76);
lean::cnstr_set(x_77, 2, x_75);
return x_77;
}
case 3:
{
obj* x_78; obj* x_79; obj* x_80; 
x_78 = lean::box(0);
x_79 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_80 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_80, 0, x_42);
lean::cnstr_set(x_80, 1, x_79);
lean::cnstr_set(x_80, 2, x_78);
return x_80;
}
default:
{
obj* x_82; obj* x_83; obj* x_84; 
lean::dec(x_69);
x_82 = lean::box(0);
x_83 = l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1;
x_84 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_84, 0, x_42);
lean::cnstr_set(x_84, 1, x_83);
lean::cnstr_set(x_84, 2, x_82);
return x_84;
}
}
}
}
}
}
}
obj* l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_9 = l_option_map___rarg(x_8, x_1);
x_10 = lean::box(3);
x_11 = l_option_get__or__else___main___rarg(x_9, x_10);
x_12 = l_lean_parser_term_binder__content_has__view;
x_13 = lean::cnstr_get(x_12, 1);
lean::inc(x_13);
lean::dec(x_12);
x_16 = lean::apply_1(x_13, x_3);
x_17 = l_option_map___rarg(x_8, x_5);
x_18 = l_option_get__or__else___main___rarg(x_17, x_10);
x_19 = lean::box(0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_18);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_16);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_11);
lean::cnstr_set(x_22, 1, x_21);
x_23 = l_lean_parser_term_strict__implicit__binder;
x_24 = l_lean_parser_syntax_mk__node(x_23, x_22);
return x_24;
}
}
obj* _init_l_lean_parser_term_strict__implicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_strict__implicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_strict__implicit__binder_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_inst__implicit__named__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("inst_implicit_named_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
x_4 = lean_name_mk_string(x_0, x_1);
x_5 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_3);
lean::cnstr_set(x_5, 2, x_4);
lean::cnstr_set(x_5, 3, x_0);
lean::cnstr_set(x_5, 4, x_0);
x_6 = lean::box(3);
x_7 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_0);
lean::cnstr_set(x_7, 2, x_6);
return x_7;
}
}
obj* _init_l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 1:
{
obj* x_7; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_10; 
x_10 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_11; obj* x_12; 
x_11 = lean::box(3);
x_12 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_12, 0, x_7);
lean::cnstr_set(x_12, 1, x_10);
lean::cnstr_set(x_12, 2, x_11);
return x_12;
}
else
{
obj* x_13; obj* x_16; 
x_13 = lean::cnstr_get(x_0, 0);
lean::inc(x_13);
lean::dec(x_0);
x_16 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_16, 0, x_7);
lean::cnstr_set(x_16, 1, x_10);
lean::cnstr_set(x_16, 2, x_13);
return x_16;
}
}
else
{
obj* x_17; obj* x_19; 
x_17 = lean::cnstr_get(x_0, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_0, 1);
lean::inc(x_19);
lean::dec(x_0);
switch (lean::obj_tag(x_17)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_17, 0);
lean::inc(x_22);
lean::dec(x_17);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
if (lean::obj_tag(x_19) == 0)
{
obj* x_26; obj* x_27; 
x_26 = lean::box(3);
x_27 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_27, 0, x_7);
lean::cnstr_set(x_27, 1, x_25);
lean::cnstr_set(x_27, 2, x_26);
return x_27;
}
else
{
obj* x_28; obj* x_31; 
x_28 = lean::cnstr_get(x_19, 0);
lean::inc(x_28);
lean::dec(x_19);
x_31 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_31, 0, x_7);
lean::cnstr_set(x_31, 1, x_25);
lean::cnstr_set(x_31, 2, x_28);
return x_31;
}
}
case 3:
{
obj* x_32; 
x_32 = lean::box(0);
if (lean::obj_tag(x_19) == 0)
{
obj* x_33; obj* x_34; 
x_33 = lean::box(3);
x_34 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_34, 0, x_7);
lean::cnstr_set(x_34, 1, x_32);
lean::cnstr_set(x_34, 2, x_33);
return x_34;
}
else
{
obj* x_35; obj* x_38; 
x_35 = lean::cnstr_get(x_19, 0);
lean::inc(x_35);
lean::dec(x_19);
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_7);
lean::cnstr_set(x_38, 1, x_32);
lean::cnstr_set(x_38, 2, x_35);
return x_38;
}
}
default:
{
obj* x_40; 
lean::dec(x_17);
x_40 = lean::box(0);
if (lean::obj_tag(x_19) == 0)
{
obj* x_41; obj* x_42; 
x_41 = lean::box(3);
x_42 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_42, 0, x_7);
lean::cnstr_set(x_42, 1, x_40);
lean::cnstr_set(x_42, 2, x_41);
return x_42;
}
else
{
obj* x_43; obj* x_46; 
x_43 = lean::cnstr_get(x_19, 0);
lean::inc(x_43);
lean::dec(x_19);
x_46 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_46, 0, x_7);
lean::cnstr_set(x_46, 1, x_40);
lean::cnstr_set(x_46, 2, x_43);
return x_46;
}
}
}
}
}
case 3:
{
obj* x_47; 
x_47 = lean::box(0);
x_5 = x_47;
goto lbl_6;
}
default:
{
obj* x_49; 
lean::dec(x_1);
x_49 = lean::box(0);
x_5 = x_49;
goto lbl_6;
}
}
lbl_6:
{
obj* x_51; 
lean::dec(x_5);
x_51 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_52; 
x_52 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_56; obj* x_57; 
x_53 = lean::cnstr_get(x_0, 0);
lean::inc(x_53);
lean::dec(x_0);
x_56 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_57 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_57, 0, x_56);
lean::cnstr_set(x_57, 1, x_51);
lean::cnstr_set(x_57, 2, x_53);
return x_57;
}
}
else
{
obj* x_58; obj* x_60; 
x_58 = lean::cnstr_get(x_0, 0);
lean::inc(x_58);
x_60 = lean::cnstr_get(x_0, 1);
lean::inc(x_60);
lean::dec(x_0);
switch (lean::obj_tag(x_58)) {
case 0:
{
obj* x_63; obj* x_66; 
x_63 = lean::cnstr_get(x_58, 0);
lean::inc(x_63);
lean::dec(x_58);
x_66 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_66, 0, x_63);
if (lean::obj_tag(x_60) == 0)
{
obj* x_67; obj* x_68; obj* x_69; 
x_67 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_68 = lean::box(3);
x_69 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_69, 0, x_67);
lean::cnstr_set(x_69, 1, x_66);
lean::cnstr_set(x_69, 2, x_68);
return x_69;
}
else
{
obj* x_70; obj* x_73; obj* x_74; 
x_70 = lean::cnstr_get(x_60, 0);
lean::inc(x_70);
lean::dec(x_60);
x_73 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_74 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_66);
lean::cnstr_set(x_74, 2, x_70);
return x_74;
}
}
case 3:
{
if (lean::obj_tag(x_60) == 0)
{
obj* x_75; 
x_75 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
return x_75;
}
else
{
obj* x_76; obj* x_79; obj* x_80; 
x_76 = lean::cnstr_get(x_60, 0);
lean::inc(x_76);
lean::dec(x_60);
x_79 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_80 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_80, 0, x_79);
lean::cnstr_set(x_80, 1, x_51);
lean::cnstr_set(x_80, 2, x_76);
return x_80;
}
}
default:
{
lean::dec(x_58);
if (lean::obj_tag(x_60) == 0)
{
obj* x_82; 
x_82 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
return x_82;
}
else
{
obj* x_83; obj* x_86; obj* x_87; 
x_83 = lean::cnstr_get(x_60, 0);
lean::inc(x_83);
lean::dec(x_60);
x_86 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_87 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_87, 0, x_86);
lean::cnstr_set(x_87, 1, x_51);
lean::cnstr_set(x_87, 2, x_83);
return x_87;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 1:
{
obj* x_20; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_23; 
x_23 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_24; obj* x_25; 
x_24 = lean::box(3);
x_25 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_25, 0, x_20);
lean::cnstr_set(x_25, 1, x_23);
lean::cnstr_set(x_25, 2, x_24);
return x_25;
}
else
{
obj* x_26; obj* x_29; 
x_26 = lean::cnstr_get(x_1, 0);
lean::inc(x_26);
lean::dec(x_1);
x_29 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_29, 0, x_20);
lean::cnstr_set(x_29, 1, x_23);
lean::cnstr_set(x_29, 2, x_26);
return x_29;
}
}
else
{
obj* x_30; obj* x_32; 
x_30 = lean::cnstr_get(x_1, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_1, 1);
lean::inc(x_32);
lean::dec(x_1);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_35; obj* x_38; 
x_35 = lean::cnstr_get(x_30, 0);
lean::inc(x_35);
lean::dec(x_30);
x_38 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_38, 0, x_35);
if (lean::obj_tag(x_32) == 0)
{
obj* x_39; obj* x_40; 
x_39 = lean::box(3);
x_40 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_40, 0, x_20);
lean::cnstr_set(x_40, 1, x_38);
lean::cnstr_set(x_40, 2, x_39);
return x_40;
}
else
{
obj* x_41; obj* x_44; 
x_41 = lean::cnstr_get(x_32, 0);
lean::inc(x_41);
lean::dec(x_32);
x_44 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_44, 0, x_20);
lean::cnstr_set(x_44, 1, x_38);
lean::cnstr_set(x_44, 2, x_41);
return x_44;
}
}
case 3:
{
obj* x_45; 
x_45 = lean::box(0);
if (lean::obj_tag(x_32) == 0)
{
obj* x_46; obj* x_47; 
x_46 = lean::box(3);
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_20);
lean::cnstr_set(x_47, 1, x_45);
lean::cnstr_set(x_47, 2, x_46);
return x_47;
}
else
{
obj* x_48; obj* x_51; 
x_48 = lean::cnstr_get(x_32, 0);
lean::inc(x_48);
lean::dec(x_32);
x_51 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_51, 0, x_20);
lean::cnstr_set(x_51, 1, x_45);
lean::cnstr_set(x_51, 2, x_48);
return x_51;
}
}
default:
{
obj* x_53; 
lean::dec(x_30);
x_53 = lean::box(0);
if (lean::obj_tag(x_32) == 0)
{
obj* x_54; obj* x_55; 
x_54 = lean::box(3);
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_20);
lean::cnstr_set(x_55, 1, x_53);
lean::cnstr_set(x_55, 2, x_54);
return x_55;
}
else
{
obj* x_56; obj* x_59; 
x_56 = lean::cnstr_get(x_32, 0);
lean::inc(x_56);
lean::dec(x_32);
x_59 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_59, 0, x_20);
lean::cnstr_set(x_59, 1, x_53);
lean::cnstr_set(x_59, 2, x_56);
return x_59;
}
}
}
}
}
case 3:
{
obj* x_60; 
x_60 = lean::box(0);
x_18 = x_60;
goto lbl_19;
}
default:
{
obj* x_62; 
lean::dec(x_2);
x_62 = lean::box(0);
x_18 = x_62;
goto lbl_19;
}
}
lbl_19:
{
obj* x_64; 
lean::dec(x_18);
x_64 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_65; 
x_65 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
return x_65;
}
else
{
obj* x_66; obj* x_69; obj* x_70; 
x_66 = lean::cnstr_get(x_1, 0);
lean::inc(x_66);
lean::dec(x_1);
x_69 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_70 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_70, 0, x_69);
lean::cnstr_set(x_70, 1, x_64);
lean::cnstr_set(x_70, 2, x_66);
return x_70;
}
}
else
{
obj* x_71; obj* x_73; 
x_71 = lean::cnstr_get(x_1, 0);
lean::inc(x_71);
x_73 = lean::cnstr_get(x_1, 1);
lean::inc(x_73);
lean::dec(x_1);
switch (lean::obj_tag(x_71)) {
case 0:
{
obj* x_76; obj* x_79; 
x_76 = lean::cnstr_get(x_71, 0);
lean::inc(x_76);
lean::dec(x_71);
x_79 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_79, 0, x_76);
if (lean::obj_tag(x_73) == 0)
{
obj* x_80; obj* x_81; obj* x_82; 
x_80 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_81 = lean::box(3);
x_82 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_82, 0, x_80);
lean::cnstr_set(x_82, 1, x_79);
lean::cnstr_set(x_82, 2, x_81);
return x_82;
}
else
{
obj* x_83; obj* x_86; obj* x_87; 
x_83 = lean::cnstr_get(x_73, 0);
lean::inc(x_83);
lean::dec(x_73);
x_86 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_87 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_87, 0, x_86);
lean::cnstr_set(x_87, 1, x_79);
lean::cnstr_set(x_87, 2, x_83);
return x_87;
}
}
case 3:
{
if (lean::obj_tag(x_73) == 0)
{
obj* x_88; 
x_88 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
return x_88;
}
else
{
obj* x_89; obj* x_92; obj* x_93; 
x_89 = lean::cnstr_get(x_73, 0);
lean::inc(x_89);
lean::dec(x_73);
x_92 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_93 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_93, 0, x_92);
lean::cnstr_set(x_93, 1, x_64);
lean::cnstr_set(x_93, 2, x_89);
return x_93;
}
}
default:
{
lean::dec(x_71);
if (lean::obj_tag(x_73) == 0)
{
obj* x_95; 
x_95 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1;
return x_95;
}
else
{
obj* x_96; obj* x_99; obj* x_100; 
x_96 = lean::cnstr_get(x_73, 0);
lean::inc(x_96);
lean::dec(x_73);
x_99 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_100 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_100, 0, x_99);
lean::cnstr_set(x_100, 1, x_64);
lean::cnstr_set(x_100, 2, x_96);
return x_100;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_1);
x_9 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_10 = l_option_map___rarg(x_9, x_3);
x_11 = lean::box(3);
x_12 = l_option_get__or__else___main___rarg(x_10, x_11);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_5);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_12);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_8);
lean::cnstr_set(x_16, 1, x_15);
x_17 = l_lean_parser_term_inst__implicit__named__binder;
x_18 = l_lean_parser_syntax_mk__node(x_17, x_16);
return x_18;
}
}
obj* _init_l_lean_parser_term_inst__implicit__named__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_inst__implicit__named__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_inst__implicit__named__binder_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_inst__implicit__anonymous__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("inst_implicit_anonymous_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::box(3);
return x_2;
}
else
{
obj* x_3; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_9; 
x_9 = lean::box(3);
return x_9;
}
else
{
obj* x_10; 
x_10 = lean::cnstr_get(x_6, 0);
lean::inc(x_10);
lean::dec(x_6);
return x_10;
}
}
}
}
obj* l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_1 = lean::box(0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = l_lean_parser_term_inst__implicit__anonymous__binder;
x_4 = l_lean_parser_syntax_mk__node(x_3, x_2);
return x_4;
}
}
obj* _init_l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_inst__implicit__anonymous__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder__content() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("inst_implicit_binder_content");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; obj* x_9; obj* x_12; obj* x_13; 
x_8 = l_lean_parser_term_inst__implicit__anonymous__binder_has__view;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_0);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
else
{
obj* x_14; obj* x_15; obj* x_18; obj* x_19; 
x_14 = l_lean_parser_term_inst__implicit__named__binder_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_0);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("inst_implicit_binder_content");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__2;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; obj* x_69; obj* x_72; obj* x_73; 
x_68 = l_lean_parser_term_inst__implicit__anonymous__binder_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_1);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
else
{
obj* x_74; obj* x_75; obj* x_78; obj* x_79; 
x_74 = l_lean_parser_term_inst__implicit__named__binder_has__view;
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
lean::dec(x_74);
x_78 = lean::apply_1(x_75, x_1);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
}
}
obj* l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_inst__implicit__named__binder_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_lean_parser_term_inst__implicit__binder__content;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_lean_parser_term_inst__implicit__anonymous__binder_has__view;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_26 = l_lean_parser_syntax_mk__node(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_lean_parser_term_inst__implicit__binder__content;
x_29 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder__content_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder__content_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_inst__implicit__binder__content_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("inst_implicit_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_term_inst__implicit__binder__content_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_7 = lean::box(0);
x_8 = lean::box(3);
x_4 = x_7;
x_5 = x_8;
goto lbl_6;
lbl_3:
{
obj* x_9; obj* x_10; obj* x_13; 
x_9 = l_lean_parser_term_inst__implicit__binder__content_has__view;
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
x_13 = lean::apply_1(x_10, x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_14; obj* x_15; 
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_15, 0, x_0);
lean::cnstr_set(x_15, 1, x_13);
lean::cnstr_set(x_15, 2, x_14);
return x_15;
}
else
{
obj* x_16; 
x_16 = lean::cnstr_get(x_2, 0);
lean::inc(x_16);
lean::dec(x_2);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_19; obj* x_22; obj* x_23; 
x_19 = lean::cnstr_get(x_16, 0);
lean::inc(x_19);
lean::dec(x_16);
x_22 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
x_23 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_23, 0, x_0);
lean::cnstr_set(x_23, 1, x_13);
lean::cnstr_set(x_23, 2, x_22);
return x_23;
}
case 3:
{
obj* x_24; obj* x_25; 
x_24 = lean::box(0);
x_25 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_25, 0, x_0);
lean::cnstr_set(x_25, 1, x_13);
lean::cnstr_set(x_25, 2, x_24);
return x_25;
}
default:
{
obj* x_27; obj* x_28; 
lean::dec(x_16);
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_28, 0, x_0);
lean::cnstr_set(x_28, 1, x_13);
lean::cnstr_set(x_28, 2, x_27);
return x_28;
}
}
}
}
lbl_6:
{
obj* x_29; 
switch (lean::obj_tag(x_5)) {
case 0:
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_5, 0);
lean::inc(x_31);
lean::dec(x_5);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_31);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_34;
goto lbl_30;
}
else
{
obj* x_35; obj* x_37; 
x_35 = lean::cnstr_get(x_4, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_4, 1);
lean::inc(x_37);
lean::dec(x_4);
x_0 = x_34;
x_1 = x_35;
x_2 = x_37;
goto lbl_3;
}
}
case 3:
{
obj* x_40; 
x_40 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_40;
goto lbl_30;
}
else
{
obj* x_41; obj* x_43; 
x_41 = lean::cnstr_get(x_4, 0);
lean::inc(x_41);
x_43 = lean::cnstr_get(x_4, 1);
lean::inc(x_43);
lean::dec(x_4);
x_0 = x_40;
x_1 = x_41;
x_2 = x_43;
goto lbl_3;
}
}
default:
{
obj* x_47; 
lean::dec(x_5);
x_47 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_29 = x_47;
goto lbl_30;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_4, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_4, 1);
lean::inc(x_50);
lean::dec(x_4);
x_0 = x_47;
x_1 = x_48;
x_2 = x_50;
goto lbl_3;
}
}
}
lbl_30:
{
if (lean::obj_tag(x_4) == 0)
{
obj* x_53; obj* x_54; obj* x_55; 
x_53 = lean::box(0);
x_54 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_29);
lean::cnstr_set(x_55, 1, x_54);
lean::cnstr_set(x_55, 2, x_53);
return x_55;
}
else
{
obj* x_56; 
x_56 = lean::cnstr_get(x_4, 0);
lean::inc(x_56);
lean::dec(x_4);
switch (lean::obj_tag(x_56)) {
case 0:
{
obj* x_59; obj* x_62; obj* x_63; obj* x_64; 
x_59 = lean::cnstr_get(x_56, 0);
lean::inc(x_59);
lean::dec(x_56);
x_62 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_62, 0, x_59);
x_63 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
x_64 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_64, 0, x_29);
lean::cnstr_set(x_64, 1, x_63);
lean::cnstr_set(x_64, 2, x_62);
return x_64;
}
case 3:
{
obj* x_65; obj* x_66; obj* x_67; 
x_65 = lean::box(0);
x_66 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
x_67 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_67, 0, x_29);
lean::cnstr_set(x_67, 1, x_66);
lean::cnstr_set(x_67, 2, x_65);
return x_67;
}
default:
{
obj* x_69; obj* x_70; obj* x_71; 
lean::dec(x_56);
x_69 = lean::box(0);
x_70 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
x_71 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_71, 0, x_29);
lean::cnstr_set(x_71, 1, x_70);
lean::cnstr_set(x_71, 2, x_69);
return x_71;
}
}
}
}
}
}
}
obj* l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_9; 
x_9 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__2;
return x_9;
}
else
{
obj* x_10; obj* x_13; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
lean::dec(x_10);
if (lean::obj_tag(x_13) == 0)
{
obj* x_16; 
x_16 = lean::box(3);
x_5 = x_13;
x_6 = x_16;
goto lbl_7;
}
else
{
obj* x_17; obj* x_19; 
x_17 = lean::cnstr_get(x_13, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_13, 1);
lean::inc(x_19);
lean::dec(x_13);
x_5 = x_19;
x_6 = x_17;
goto lbl_7;
}
}
lbl_4:
{
obj* x_22; obj* x_23; obj* x_26; 
x_22 = l_lean_parser_term_inst__implicit__binder__content_has__view;
x_23 = lean::cnstr_get(x_22, 0);
lean::inc(x_23);
lean::dec(x_22);
x_26 = lean::apply_1(x_23, x_2);
if (lean::obj_tag(x_3) == 0)
{
obj* x_27; obj* x_28; 
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_28, 0, x_1);
lean::cnstr_set(x_28, 1, x_26);
lean::cnstr_set(x_28, 2, x_27);
return x_28;
}
else
{
obj* x_29; 
x_29 = lean::cnstr_get(x_3, 0);
lean::inc(x_29);
lean::dec(x_3);
switch (lean::obj_tag(x_29)) {
case 0:
{
obj* x_32; obj* x_35; obj* x_36; 
x_32 = lean::cnstr_get(x_29, 0);
lean::inc(x_32);
lean::dec(x_29);
x_35 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_35, 0, x_32);
x_36 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_36, 0, x_1);
lean::cnstr_set(x_36, 1, x_26);
lean::cnstr_set(x_36, 2, x_35);
return x_36;
}
case 3:
{
obj* x_37; obj* x_38; 
x_37 = lean::box(0);
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_1);
lean::cnstr_set(x_38, 1, x_26);
lean::cnstr_set(x_38, 2, x_37);
return x_38;
}
default:
{
obj* x_40; obj* x_41; 
lean::dec(x_29);
x_40 = lean::box(0);
x_41 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_41, 0, x_1);
lean::cnstr_set(x_41, 1, x_26);
lean::cnstr_set(x_41, 2, x_40);
return x_41;
}
}
}
}
lbl_7:
{
obj* x_42; 
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_44; obj* x_47; 
x_44 = lean::cnstr_get(x_6, 0);
lean::inc(x_44);
lean::dec(x_6);
x_47 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_47, 0, x_44);
if (lean::obj_tag(x_5) == 0)
{
x_42 = x_47;
goto lbl_43;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_5, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_5, 1);
lean::inc(x_50);
lean::dec(x_5);
x_1 = x_47;
x_2 = x_48;
x_3 = x_50;
goto lbl_4;
}
}
case 3:
{
obj* x_53; 
x_53 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_42 = x_53;
goto lbl_43;
}
else
{
obj* x_54; obj* x_56; 
x_54 = lean::cnstr_get(x_5, 0);
lean::inc(x_54);
x_56 = lean::cnstr_get(x_5, 1);
lean::inc(x_56);
lean::dec(x_5);
x_1 = x_53;
x_2 = x_54;
x_3 = x_56;
goto lbl_4;
}
}
default:
{
obj* x_60; 
lean::dec(x_6);
x_60 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_42 = x_60;
goto lbl_43;
}
else
{
obj* x_61; obj* x_63; 
x_61 = lean::cnstr_get(x_5, 0);
lean::inc(x_61);
x_63 = lean::cnstr_get(x_5, 1);
lean::inc(x_63);
lean::dec(x_5);
x_1 = x_60;
x_2 = x_61;
x_3 = x_63;
goto lbl_4;
}
}
}
lbl_43:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_66; obj* x_67; obj* x_68; 
x_66 = lean::box(0);
x_67 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
x_68 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_68, 0, x_42);
lean::cnstr_set(x_68, 1, x_67);
lean::cnstr_set(x_68, 2, x_66);
return x_68;
}
else
{
obj* x_69; 
x_69 = lean::cnstr_get(x_5, 0);
lean::inc(x_69);
lean::dec(x_5);
switch (lean::obj_tag(x_69)) {
case 0:
{
obj* x_72; obj* x_75; obj* x_76; obj* x_77; 
x_72 = lean::cnstr_get(x_69, 0);
lean::inc(x_72);
lean::dec(x_69);
x_75 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_75, 0, x_72);
x_76 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
x_77 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_77, 0, x_42);
lean::cnstr_set(x_77, 1, x_76);
lean::cnstr_set(x_77, 2, x_75);
return x_77;
}
case 3:
{
obj* x_78; obj* x_79; obj* x_80; 
x_78 = lean::box(0);
x_79 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
x_80 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_80, 0, x_42);
lean::cnstr_set(x_80, 1, x_79);
lean::cnstr_set(x_80, 2, x_78);
return x_80;
}
default:
{
obj* x_82; obj* x_83; obj* x_84; 
lean::dec(x_69);
x_82 = lean::box(0);
x_83 = l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1;
x_84 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_84, 0, x_42);
lean::cnstr_set(x_84, 1, x_83);
lean::cnstr_set(x_84, 2, x_82);
return x_84;
}
}
}
}
}
}
}
obj* l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_9 = l_option_map___rarg(x_8, x_1);
x_10 = lean::box(3);
x_11 = l_option_get__or__else___main___rarg(x_9, x_10);
x_12 = l_lean_parser_term_inst__implicit__binder__content_has__view;
x_13 = lean::cnstr_get(x_12, 1);
lean::inc(x_13);
lean::dec(x_12);
x_16 = lean::apply_1(x_13, x_3);
x_17 = l_option_map___rarg(x_8, x_5);
x_18 = l_option_get__or__else___main___rarg(x_17, x_10);
x_19 = lean::box(0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_18);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_16);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_11);
lean::cnstr_set(x_22, 1, x_21);
x_23 = l_lean_parser_term_inst__implicit__binder;
x_24 = l_lean_parser_syntax_mk__node(x_23, x_22);
return x_24;
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_inst__implicit__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_inst__implicit__binder_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_bracketed__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("bracketed_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
if (x_6 == 0)
{
obj* x_7; uint8 x_8; 
x_7 = lean::mk_nat_obj(1u);
x_8 = lean::nat_dec_eq(x_1, x_7);
if (x_8 == 0)
{
obj* x_9; uint8 x_10; 
x_9 = lean::mk_nat_obj(2u);
x_10 = lean::nat_dec_eq(x_1, x_9);
if (x_10 == 0)
{
obj* x_11; uint8 x_12; 
x_11 = lean::mk_nat_obj(3u);
x_12 = lean::nat_dec_eq(x_1, x_11);
lean::dec(x_1);
if (x_12 == 0)
{
obj* x_14; obj* x_15; obj* x_18; obj* x_19; 
x_14 = l_lean_parser_term_anonymous__constructor_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_0);
x_19 = lean::alloc_cnstr(4, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
else
{
obj* x_20; obj* x_21; obj* x_24; obj* x_25; 
x_20 = l_lean_parser_term_inst__implicit__binder_has__view;
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
lean::dec(x_20);
x_24 = lean::apply_1(x_21, x_0);
x_25 = lean::alloc_cnstr(3, 1, 0);
lean::cnstr_set(x_25, 0, x_24);
return x_25;
}
}
else
{
obj* x_27; obj* x_28; obj* x_31; obj* x_32; 
lean::dec(x_1);
x_27 = l_lean_parser_term_strict__implicit__binder_has__view;
x_28 = lean::cnstr_get(x_27, 0);
lean::inc(x_28);
lean::dec(x_27);
x_31 = lean::apply_1(x_28, x_0);
x_32 = lean::alloc_cnstr(2, 1, 0);
lean::cnstr_set(x_32, 0, x_31);
return x_32;
}
}
else
{
obj* x_34; obj* x_35; obj* x_38; obj* x_39; 
lean::dec(x_1);
x_34 = l_lean_parser_term_implicit__binder_has__view;
x_35 = lean::cnstr_get(x_34, 0);
lean::inc(x_35);
lean::dec(x_34);
x_38 = lean::apply_1(x_35, x_0);
x_39 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_39, 0, x_38);
return x_39;
}
}
else
{
obj* x_41; obj* x_42; obj* x_45; obj* x_46; 
lean::dec(x_1);
x_41 = l_lean_parser_term_explicit__binder_has__view;
x_42 = lean::cnstr_get(x_41, 0);
lean::inc(x_42);
lean::dec(x_41);
x_45 = lean::apply_1(x_42, x_0);
x_46 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_46, 0, x_45);
return x_46;
}
}
}
}
obj* _init_l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("bracketed_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__2;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
if (x_66 == 0)
{
obj* x_67; uint8 x_68; 
x_67 = lean::mk_nat_obj(1u);
x_68 = lean::nat_dec_eq(x_2, x_67);
if (x_68 == 0)
{
obj* x_69; uint8 x_70; 
x_69 = lean::mk_nat_obj(2u);
x_70 = lean::nat_dec_eq(x_2, x_69);
if (x_70 == 0)
{
obj* x_71; uint8 x_72; 
x_71 = lean::mk_nat_obj(3u);
x_72 = lean::nat_dec_eq(x_2, x_71);
lean::dec(x_2);
if (x_72 == 0)
{
obj* x_74; obj* x_75; obj* x_78; obj* x_79; 
x_74 = l_lean_parser_term_anonymous__constructor_has__view;
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
lean::dec(x_74);
x_78 = lean::apply_1(x_75, x_1);
x_79 = lean::alloc_cnstr(4, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
else
{
obj* x_80; obj* x_81; obj* x_84; obj* x_85; 
x_80 = l_lean_parser_term_inst__implicit__binder_has__view;
x_81 = lean::cnstr_get(x_80, 0);
lean::inc(x_81);
lean::dec(x_80);
x_84 = lean::apply_1(x_81, x_1);
x_85 = lean::alloc_cnstr(3, 1, 0);
lean::cnstr_set(x_85, 0, x_84);
return x_85;
}
}
else
{
obj* x_87; obj* x_88; obj* x_91; obj* x_92; 
lean::dec(x_2);
x_87 = l_lean_parser_term_strict__implicit__binder_has__view;
x_88 = lean::cnstr_get(x_87, 0);
lean::inc(x_88);
lean::dec(x_87);
x_91 = lean::apply_1(x_88, x_1);
x_92 = lean::alloc_cnstr(2, 1, 0);
lean::cnstr_set(x_92, 0, x_91);
return x_92;
}
}
else
{
obj* x_94; obj* x_95; obj* x_98; obj* x_99; 
lean::dec(x_2);
x_94 = l_lean_parser_term_implicit__binder_has__view;
x_95 = lean::cnstr_get(x_94, 0);
lean::inc(x_95);
lean::dec(x_94);
x_98 = lean::apply_1(x_95, x_1);
x_99 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_99, 0, x_98);
return x_99;
}
}
else
{
obj* x_101; obj* x_102; obj* x_105; obj* x_106; 
lean::dec(x_2);
x_101 = l_lean_parser_term_explicit__binder_has__view;
x_102 = lean::cnstr_get(x_101, 0);
lean::inc(x_102);
lean::dec(x_101);
x_105 = lean::apply_1(x_102, x_1);
x_106 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_106, 0, x_105);
return x_106;
}
}
}
}
obj* l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_explicit__binder_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_lean_parser_term_bracketed__binder;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
case 1:
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_lean_parser_term_implicit__binder_has__view;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_26 = l_lean_parser_syntax_mk__node(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_lean_parser_term_bracketed__binder;
x_29 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_29;
}
case 2:
{
obj* x_30; obj* x_33; obj* x_34; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; 
x_30 = lean::cnstr_get(x_0, 0);
lean::inc(x_30);
lean::dec(x_0);
x_33 = l_lean_parser_term_strict__implicit__binder_has__view;
x_34 = lean::cnstr_get(x_33, 1);
lean::inc(x_34);
lean::dec(x_33);
x_37 = lean::apply_1(x_34, x_30);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_1);
x_39 = l_lean_parser_number_has__view_x_27___lambda__2___closed__1;
x_40 = l_lean_parser_syntax_mk__node(x_39, x_38);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_1);
x_42 = l_lean_parser_term_bracketed__binder;
x_43 = l_lean_parser_syntax_mk__node(x_42, x_41);
return x_43;
}
case 3:
{
obj* x_44; obj* x_47; obj* x_48; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; 
x_44 = lean::cnstr_get(x_0, 0);
lean::inc(x_44);
lean::dec(x_0);
x_47 = l_lean_parser_term_inst__implicit__binder_has__view;
x_48 = lean::cnstr_get(x_47, 1);
lean::inc(x_48);
lean::dec(x_47);
x_51 = lean::apply_1(x_48, x_44);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_1);
x_53 = l_lean_parser_number_has__view_x_27___lambda__2___closed__2;
x_54 = l_lean_parser_syntax_mk__node(x_53, x_52);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_1);
x_56 = l_lean_parser_term_bracketed__binder;
x_57 = l_lean_parser_syntax_mk__node(x_56, x_55);
return x_57;
}
default:
{
obj* x_58; obj* x_61; obj* x_62; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; 
x_58 = lean::cnstr_get(x_0, 0);
lean::inc(x_58);
lean::dec(x_0);
x_61 = l_lean_parser_term_anonymous__constructor_has__view;
x_62 = lean::cnstr_get(x_61, 1);
lean::inc(x_62);
lean::dec(x_61);
x_65 = lean::apply_1(x_62, x_58);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_65);
lean::cnstr_set(x_66, 1, x_1);
x_67 = l_lean_parser_command_mixfix_kind_has__view_x_27___lambda__2___closed__1;
x_68 = l_lean_parser_syntax_mk__node(x_67, x_66);
x_69 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_69, 0, x_68);
lean::cnstr_set(x_69, 1, x_1);
x_70 = l_lean_parser_term_bracketed__binder;
x_71 = l_lean_parser_syntax_mk__node(x_70, x_69);
return x_71;
}
}
}
}
obj* _init_l_lean_parser_term_bracketed__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_bracketed__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_bracketed__binder_has__view_x_27;
return x_0;
}
}
obj* l_list_map___main___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__2___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_14; 
x_6 = lean::cnstr_get(x_0, 0);
x_8 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_10 = x_0;
} else {
 lean::inc(x_6);
 lean::inc(x_8);
 lean::dec(x_0);
 x_10 = lean::box(0);
}
x_11 = lean::apply_5(x_8, x_1, x_2, x_3, x_4, x_5);
x_12 = lean::cnstr_get(x_11, 0);
lean::inc(x_12);
x_14 = lean::cnstr_get(x_11, 1);
lean::inc(x_14);
lean::dec(x_11);
if (lean::obj_tag(x_12) == 0)
{
obj* x_17; obj* x_19; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_17 = lean::cnstr_get(x_12, 0);
x_19 = lean::cnstr_get(x_12, 1);
x_21 = lean::cnstr_get(x_12, 2);
if (lean::is_exclusive(x_12)) {
 x_23 = x_12;
} else {
 lean::inc(x_17);
 lean::inc(x_19);
 lean::inc(x_21);
 lean::dec(x_12);
 x_23 = lean::box(0);
}
x_24 = lean::box(0);
x_25 = lean_name_mk_numeral(x_24, x_6);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_17);
lean::cnstr_set(x_26, 1, x_24);
x_27 = l_lean_parser_syntax_mk__node(x_25, x_26);
x_28 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_23)) {
 x_29 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_29 = x_23;
}
lean::cnstr_set(x_29, 0, x_27);
lean::cnstr_set(x_29, 1, x_19);
lean::cnstr_set(x_29, 2, x_28);
x_30 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_29);
if (lean::is_scalar(x_10)) {
 x_31 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_31 = x_10;
}
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_14);
return x_31;
}
else
{
obj* x_33; uint8 x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
lean::dec(x_6);
x_33 = lean::cnstr_get(x_12, 0);
x_35 = lean::cnstr_get_scalar<uint8>(x_12, sizeof(void*)*1);
if (lean::is_exclusive(x_12)) {
 x_36 = x_12;
} else {
 lean::inc(x_33);
 lean::dec(x_12);
 x_36 = lean::box(0);
}
if (lean::is_scalar(x_36)) {
 x_37 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_37 = x_36;
}
lean::cnstr_set(x_37, 0, x_33);
lean::cnstr_set_scalar(x_37, sizeof(void*)*1, x_35);
x_38 = x_37;
if (lean::is_scalar(x_10)) {
 x_39 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_39 = x_10;
}
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_14);
return x_39;
}
}
}
obj* l_list_map___main___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__2(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_list_map___main___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__2___lambda__1), 6, 1);
lean::closure_set(x_7, 0, x_2);
x_8 = l_list_map___main___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__2(x_4);
if (lean::is_scalar(x_6)) {
 x_9 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_9 = x_6;
}
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
return x_9;
}
}
}
obj* l_lean_parser_parsec__t_lookahead___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__4(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_15; obj* x_16; obj* x_18; 
lean::inc(x_6);
x_15 = lean::apply_5(x_1, x_3, x_4, x_5, x_6, x_7);
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_15, 1);
lean::inc(x_18);
lean::dec(x_15);
if (lean::obj_tag(x_16) == 0)
{
obj* x_21; obj* x_23; obj* x_25; obj* x_27; obj* x_28; 
x_21 = lean::cnstr_get(x_16, 0);
x_23 = lean::cnstr_get(x_16, 1);
x_25 = lean::cnstr_get(x_16, 2);
if (lean::is_exclusive(x_16)) {
 lean::cnstr_set(x_16, 0, lean::box(0));
 lean::cnstr_set(x_16, 1, lean::box(0));
 lean::cnstr_set(x_16, 2, lean::box(0));
 x_27 = x_16;
} else {
 lean::inc(x_21);
 lean::inc(x_23);
 lean::inc(x_25);
 lean::dec(x_16);
 x_27 = lean::box(0);
}
if (lean::obj_tag(x_2) == 0)
{
obj* x_30; obj* x_32; obj* x_34; 
x_30 = lean::cnstr_get(x_2, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_2, 1);
lean::inc(x_32);
x_34 = lean::cnstr_get(x_2, 2);
lean::inc(x_34);
if (lean::obj_tag(x_34) == 0)
{
obj* x_37; obj* x_38; uint8 x_40; 
lean::dec(x_27);
x_37 = lean::string_iterator_offset(x_23);
x_38 = lean::string_iterator_offset(x_32);
lean::dec(x_32);
x_40 = lean::nat_dec_lt(x_37, x_38);
if (x_40 == 0)
{
uint8 x_41; 
x_41 = lean::nat_dec_lt(x_38, x_37);
lean::dec(x_37);
lean::dec(x_38);
if (x_41 == 0)
{
obj* x_44; obj* x_46; obj* x_47; obj* x_48; obj* x_49; 
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_21);
lean::cnstr_set(x_44, 1, x_30);
lean::inc(x_23);
x_46 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_46, 0, x_44);
lean::cnstr_set(x_46, 1, x_23);
lean::cnstr_set(x_46, 2, x_34);
x_47 = l_lean_parser_finish__comment__block___closed__2;
x_48 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_48, 0, x_46);
lean::cnstr_set(x_48, 1, x_23);
lean::cnstr_set(x_48, 2, x_47);
x_49 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_48);
x_11 = x_49;
x_12 = x_18;
goto lbl_13;
}
else
{
obj* x_51; obj* x_52; obj* x_54; obj* x_55; obj* x_56; obj* x_57; 
lean::dec(x_30);
x_51 = lean::box(0);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_21);
lean::cnstr_set(x_52, 1, x_51);
lean::inc(x_23);
x_54 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_54, 0, x_52);
lean::cnstr_set(x_54, 1, x_23);
lean::cnstr_set(x_54, 2, x_34);
x_55 = l_lean_parser_finish__comment__block___closed__2;
x_56 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_56, 0, x_54);
lean::cnstr_set(x_56, 1, x_23);
lean::cnstr_set(x_56, 2, x_55);
x_57 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_56);
x_11 = x_57;
x_12 = x_18;
goto lbl_13;
}
}
else
{
obj* x_62; obj* x_64; obj* x_65; 
lean::dec(x_21);
lean::dec(x_30);
lean::dec(x_37);
lean::dec(x_38);
x_62 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_2);
x_64 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_64, 0, x_2);
lean::cnstr_set(x_64, 1, x_23);
lean::cnstr_set(x_64, 2, x_62);
x_65 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_64);
x_11 = x_65;
x_12 = x_18;
goto lbl_13;
}
}
else
{
obj* x_69; 
lean::dec(x_34);
lean::dec(x_30);
lean::dec(x_32);
x_69 = lean::box(0);
x_28 = x_69;
goto lbl_29;
}
}
else
{
obj* x_70; 
x_70 = lean::box(0);
x_28 = x_70;
goto lbl_29;
}
lbl_29:
{
obj* x_72; obj* x_73; obj* x_75; obj* x_76; obj* x_77; obj* x_78; 
lean::dec(x_28);
x_72 = lean::box(0);
x_73 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_73, 0, x_21);
lean::cnstr_set(x_73, 1, x_72);
lean::inc(x_23);
if (lean::is_scalar(x_27)) {
 x_75 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_75 = x_27;
}
lean::cnstr_set(x_75, 0, x_73);
lean::cnstr_set(x_75, 1, x_23);
lean::cnstr_set(x_75, 2, x_72);
x_76 = l_lean_parser_finish__comment__block___closed__2;
x_77 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_77, 0, x_75);
lean::cnstr_set(x_77, 1, x_23);
lean::cnstr_set(x_77, 2, x_76);
x_78 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_77);
x_11 = x_78;
x_12 = x_18;
goto lbl_13;
}
}
else
{
obj* x_79; uint8 x_81; obj* x_82; obj* x_83; obj* x_84; 
x_79 = lean::cnstr_get(x_16, 0);
x_81 = lean::cnstr_get_scalar<uint8>(x_16, sizeof(void*)*1);
if (lean::is_exclusive(x_16)) {
 x_82 = x_16;
} else {
 lean::inc(x_79);
 lean::dec(x_16);
 x_82 = lean::box(0);
}
if (lean::is_scalar(x_82)) {
 x_83 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_83 = x_82;
}
lean::cnstr_set(x_83, 0, x_79);
lean::cnstr_set_scalar(x_83, sizeof(void*)*1, x_81);
x_84 = x_83;
x_11 = x_84;
x_12 = x_18;
goto lbl_13;
}
lbl_10:
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_85; obj* x_87; obj* x_88; obj* x_89; obj* x_90; 
x_85 = lean::cnstr_get(x_8, 0);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_release(x_8, 1);
 lean::cnstr_release(x_8, 2);
 x_87 = x_8;
} else {
 lean::inc(x_85);
 lean::dec(x_8);
 x_87 = lean::box(0);
}
x_88 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_87)) {
 x_89 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_89 = x_87;
}
lean::cnstr_set(x_89, 0, x_85);
lean::cnstr_set(x_89, 1, x_6);
lean::cnstr_set(x_89, 2, x_88);
x_90 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_90, 0, x_89);
lean::cnstr_set(x_90, 1, x_9);
return x_90;
}
else
{
obj* x_92; 
lean::dec(x_6);
x_92 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_92, 0, x_8);
lean::cnstr_set(x_92, 1, x_9);
return x_92;
}
}
lbl_13:
{
if (lean::obj_tag(x_11) == 0)
{
lean::dec(x_0);
lean::dec(x_2);
x_8 = x_11;
x_9 = x_12;
goto lbl_10;
}
else
{
obj* x_95; obj* x_97; obj* x_98; 
x_95 = lean::cnstr_get(x_11, 0);
if (lean::is_exclusive(x_11)) {
 lean::cnstr_set(x_11, 0, lean::box(0));
 x_97 = x_11;
} else {
 lean::inc(x_95);
 lean::dec(x_11);
 x_97 = lean::box(0);
}
x_98 = lean::cnstr_get(x_95, 0);
lean::inc(x_98);
if (lean::obj_tag(x_2) == 0)
{
obj* x_103; obj* x_104; 
lean::dec(x_0);
lean::dec(x_95);
lean::dec(x_97);
x_103 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_104 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_104, 0, x_2);
lean::cnstr_set(x_104, 1, x_98);
lean::cnstr_set(x_104, 2, x_103);
x_8 = x_104;
x_9 = x_12;
goto lbl_10;
}
else
{
obj* x_105; obj* x_107; obj* x_108; obj* x_110; uint8 x_112; 
x_105 = lean::cnstr_get(x_2, 0);
lean::inc(x_105);
x_107 = lean::string_iterator_offset(x_98);
x_108 = lean::cnstr_get(x_105, 0);
lean::inc(x_108);
x_110 = lean::string_iterator_offset(x_108);
lean::dec(x_108);
x_112 = lean::nat_dec_lt(x_107, x_110);
if (x_112 == 0)
{
uint8 x_114; 
lean::dec(x_2);
x_114 = lean::nat_dec_lt(x_110, x_107);
lean::dec(x_110);
if (x_114 == 0)
{
obj* x_116; obj* x_117; uint8 x_119; 
x_116 = l_lean_parser_parsec__t_merge___rarg(x_95, x_105);
x_117 = lean::string_iterator_offset(x_0);
lean::dec(x_0);
x_119 = lean::nat_dec_lt(x_117, x_107);
lean::dec(x_107);
lean::dec(x_117);
if (x_119 == 0)
{
uint8 x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; 
x_122 = 0;
if (lean::is_scalar(x_97)) {
 x_123 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_123 = x_97;
}
lean::cnstr_set(x_123, 0, x_116);
lean::cnstr_set_scalar(x_123, sizeof(void*)*1, x_122);
x_124 = x_123;
x_125 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_126 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_126, 0, x_124);
lean::cnstr_set(x_126, 1, x_98);
lean::cnstr_set(x_126, 2, x_125);
x_8 = x_126;
x_9 = x_12;
goto lbl_10;
}
else
{
uint8 x_127; obj* x_128; obj* x_129; obj* x_130; obj* x_131; 
x_127 = 1;
if (lean::is_scalar(x_97)) {
 x_128 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_128 = x_97;
}
lean::cnstr_set(x_128, 0, x_116);
lean::cnstr_set_scalar(x_128, sizeof(void*)*1, x_127);
x_129 = x_128;
x_130 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_131 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_131, 0, x_129);
lean::cnstr_set(x_131, 1, x_98);
lean::cnstr_set(x_131, 2, x_130);
x_8 = x_131;
x_9 = x_12;
goto lbl_10;
}
}
else
{
uint8 x_135; obj* x_136; obj* x_137; obj* x_138; obj* x_139; 
lean::dec(x_0);
lean::dec(x_105);
lean::dec(x_107);
x_135 = 1;
if (lean::is_scalar(x_97)) {
 x_136 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_136 = x_97;
}
lean::cnstr_set(x_136, 0, x_95);
lean::cnstr_set_scalar(x_136, sizeof(void*)*1, x_135);
x_137 = x_136;
x_138 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_139 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_139, 0, x_137);
lean::cnstr_set(x_139, 1, x_98);
lean::cnstr_set(x_139, 2, x_138);
x_8 = x_139;
x_9 = x_12;
goto lbl_10;
}
}
else
{
obj* x_146; obj* x_147; 
lean::dec(x_0);
lean::dec(x_105);
lean::dec(x_107);
lean::dec(x_95);
lean::dec(x_97);
lean::dec(x_110);
x_146 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_147 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_147, 0, x_2);
lean::cnstr_set(x_147, 1, x_98);
lean::cnstr_set(x_147, 2, x_146);
x_8 = x_147;
x_9 = x_12;
goto lbl_10;
}
}
}
}
}
}
obj* l_list_mfoldr___main___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__5(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
x_10 = lean::box(0);
x_11 = l_list_mfoldr___main___at_lean_parser_monad__parsec_longest__match___spec__2___rarg___closed__1;
x_12 = l_mjoin___rarg___closed__1;
x_13 = l_lean_parser_monad__parsec_error___at_lean_parser_number_x_27___spec__12___rarg(x_11, x_12, x_10, x_10, x_0);
x_14 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_15 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set(x_15, 1, x_5);
lean::cnstr_set(x_15, 2, x_14);
x_16 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_6);
return x_16;
}
else
{
obj* x_17; obj* x_19; obj* x_26; obj* x_27; obj* x_29; obj* x_31; 
x_17 = lean::cnstr_get(x_1, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_1, 1);
lean::inc(x_19);
lean::dec(x_1);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_0);
x_26 = l_list_mfoldr___main___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__5(x_0, x_19, x_2, x_3, x_4, x_5, x_6);
x_27 = lean::cnstr_get(x_26, 0);
x_29 = lean::cnstr_get(x_26, 1);
if (lean::is_exclusive(x_26)) {
 lean::cnstr_set(x_26, 0, lean::box(0));
 lean::cnstr_set(x_26, 1, lean::box(0));
 x_31 = x_26;
} else {
 lean::inc(x_27);
 lean::inc(x_29);
 lean::dec(x_26);
 x_31 = lean::box(0);
}
if (lean::obj_tag(x_27) == 0)
{
obj* x_32; obj* x_34; obj* x_36; obj* x_39; obj* x_40; obj* x_42; obj* x_45; obj* x_46; 
x_32 = lean::cnstr_get(x_27, 0);
lean::inc(x_32);
x_34 = lean::cnstr_get(x_27, 1);
lean::inc(x_34);
x_36 = lean::cnstr_get(x_27, 2);
lean::inc(x_36);
lean::dec(x_27);
x_39 = l_lean_parser_parsec__t_lookahead___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__4(x_0, x_17, x_32, x_2, x_3, x_4, x_34, x_29);
x_40 = lean::cnstr_get(x_39, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_39, 1);
lean::inc(x_42);
lean::dec(x_39);
x_45 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_36, x_40);
if (lean::is_scalar(x_31)) {
 x_46 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_46 = x_31;
}
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_42);
return x_46;
}
else
{
obj* x_52; uint8 x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; 
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_2);
lean::dec(x_17);
x_52 = lean::cnstr_get(x_27, 0);
x_54 = lean::cnstr_get_scalar<uint8>(x_27, sizeof(void*)*1);
if (lean::is_exclusive(x_27)) {
 x_55 = x_27;
} else {
 lean::inc(x_52);
 lean::dec(x_27);
 x_55 = lean::box(0);
}
if (lean::is_scalar(x_55)) {
 x_56 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_56 = x_55;
}
lean::cnstr_set(x_56, 0, x_52);
lean::cnstr_set_scalar(x_56, sizeof(void*)*1, x_54);
x_57 = x_56;
if (lean::is_scalar(x_31)) {
 x_58 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_58 = x_31;
}
lean::cnstr_set(x_58, 0, x_57);
lean::cnstr_set(x_58, 1, x_29);
return x_58;
}
}
}
}
obj* l_lean_parser_monad__parsec_longest__match___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__3(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_15; 
x_6 = lean::mk_nat_obj(0u);
x_7 = l_list_enum__from___main___rarg(x_6, x_0);
x_8 = l_list_map___main___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__2(x_7);
lean::inc(x_4);
x_10 = l_list_mfoldr___main___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__5(x_4, x_8, x_1, x_2, x_3, x_4, x_5);
x_11 = lean::cnstr_get(x_10, 0);
x_13 = lean::cnstr_get(x_10, 1);
if (lean::is_exclusive(x_10)) {
 lean::cnstr_set(x_10, 0, lean::box(0));
 lean::cnstr_set(x_10, 1, lean::box(0));
 x_15 = x_10;
} else {
 lean::inc(x_11);
 lean::inc(x_13);
 lean::dec(x_10);
 x_15 = lean::box(0);
}
if (lean::obj_tag(x_11) == 0)
{
obj* x_16; obj* x_18; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_16 = lean::cnstr_get(x_11, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_11, 2);
lean::inc(x_18);
lean::dec(x_11);
x_21 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_18, x_16);
x_22 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_23 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_22, x_21);
if (lean::is_scalar(x_15)) {
 x_24 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_24 = x_15;
}
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_13);
return x_24;
}
else
{
obj* x_25; uint8 x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_25 = lean::cnstr_get(x_11, 0);
x_27 = lean::cnstr_get_scalar<uint8>(x_11, sizeof(void*)*1);
if (lean::is_exclusive(x_11)) {
 x_28 = x_11;
} else {
 lean::inc(x_25);
 lean::dec(x_11);
 x_28 = lean::box(0);
}
if (lean::is_scalar(x_28)) {
 x_29 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_29 = x_28;
}
lean::cnstr_set(x_29, 0, x_25);
lean::cnstr_set_scalar(x_29, sizeof(void*)*1, x_27);
x_30 = x_29;
x_31 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_32 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_31, x_30);
if (lean::is_scalar(x_15)) {
 x_33 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_33 = x_15;
}
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_13);
return x_33;
}
}
}
obj* l_lean_parser_combinators_longest__choice___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_9; obj* x_10; obj* x_12; obj* x_14; 
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_9 = l_lean_parser_monad__parsec_longest__match___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__3(x_0, x_1, x_2, x_3, x_4, x_5);
x_10 = lean::cnstr_get(x_9, 0);
x_12 = lean::cnstr_get(x_9, 1);
if (lean::is_exclusive(x_9)) {
 lean::cnstr_set(x_9, 0, lean::box(0));
 lean::cnstr_set(x_9, 1, lean::box(0));
 x_14 = x_9;
} else {
 lean::inc(x_10);
 lean::inc(x_12);
 lean::dec(x_9);
 x_14 = lean::box(0);
}
if (lean::obj_tag(x_10) == 0)
{
obj* x_15; obj* x_17; obj* x_19; obj* x_21; 
x_15 = lean::cnstr_get(x_10, 0);
x_17 = lean::cnstr_get(x_10, 1);
x_19 = lean::cnstr_get(x_10, 2);
if (lean::is_exclusive(x_10)) {
 lean::cnstr_set(x_10, 0, lean::box(0));
 lean::cnstr_set(x_10, 1, lean::box(0));
 lean::cnstr_set(x_10, 2, lean::box(0));
 x_21 = x_10;
} else {
 lean::inc(x_15);
 lean::inc(x_17);
 lean::inc(x_19);
 lean::dec(x_10);
 x_21 = lean::box(0);
}
if (lean::obj_tag(x_15) == 0)
{
obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_29; obj* x_32; obj* x_33; 
lean::dec(x_21);
x_23 = lean::box(0);
x_24 = l___private_init_lean_parser_combinators_1__many1__aux___main___rarg___closed__1;
x_25 = l_mjoin___rarg___closed__1;
x_26 = l_lean_parser_monad__parsec_error___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__4___rarg(x_24, x_25, x_23, x_23, x_1, x_2, x_3, x_17, x_12);
x_27 = lean::cnstr_get(x_26, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_26, 1);
lean::inc(x_29);
lean::dec(x_26);
x_32 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_27);
if (lean::is_scalar(x_14)) {
 x_33 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_33 = x_14;
}
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_29);
return x_33;
}
else
{
obj* x_37; obj* x_40; obj* x_41; obj* x_42; obj* x_43; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_37 = lean::cnstr_get(x_15, 0);
lean::inc(x_37);
lean::dec(x_15);
x_40 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_21)) {
 x_41 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_41 = x_21;
}
lean::cnstr_set(x_41, 0, x_37);
lean::cnstr_set(x_41, 1, x_17);
lean::cnstr_set(x_41, 2, x_40);
x_42 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_41);
if (lean::is_scalar(x_14)) {
 x_43 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_43 = x_14;
}
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_12);
return x_43;
}
}
else
{
obj* x_47; uint8 x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_47 = lean::cnstr_get(x_10, 0);
x_49 = lean::cnstr_get_scalar<uint8>(x_10, sizeof(void*)*1);
if (lean::is_exclusive(x_10)) {
 x_50 = x_10;
} else {
 lean::inc(x_47);
 lean::dec(x_10);
 x_50 = lean::box(0);
}
if (lean::is_scalar(x_50)) {
 x_51 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_51 = x_50;
}
lean::cnstr_set(x_51, 0, x_47);
lean::cnstr_set_scalar(x_51, sizeof(void*)*1, x_49);
x_52 = x_51;
if (lean::is_scalar(x_14)) {
 x_53 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_53 = x_14;
}
lean::cnstr_set(x_53, 0, x_52);
lean::cnstr_set(x_53, 1, x_12);
return x_53;
}
}
}
obj* _init_l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; 
x_0 = lean::mk_string("(");
x_1 = lean::mk_nat_obj(0u);
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::box(0);
x_4 = l_lean_parser_term_binder__content_parser_lean_parser_has__tokens;
x_5 = l_lean_parser_list_cons_tokens___rarg(x_4, x_3);
x_6 = l_lean_parser_command_notation__like_parser_lean_parser_has__tokens;
x_7 = l_lean_parser_list_cons_tokens___rarg(x_6, x_5);
x_8 = l_lean_parser_tokens___rarg(x_7);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_8, x_3);
x_10 = l_lean_parser_tokens___rarg(x_9);
x_11 = lean::mk_string(")");
x_12 = l_lean_parser_symbol_tokens___rarg(x_11, x_1);
x_13 = l_lean_parser_list_cons_tokens___rarg(x_12, x_3);
x_14 = l_lean_parser_list_cons_tokens___rarg(x_10, x_13);
x_15 = l_lean_parser_list_cons_tokens___rarg(x_2, x_14);
x_16 = l_lean_parser_tokens___rarg(x_15);
x_17 = lean::mk_string("{");
x_18 = l_lean_parser_symbol_tokens___rarg(x_17, x_1);
x_19 = lean::mk_string("}");
x_20 = l_lean_parser_symbol_tokens___rarg(x_19, x_1);
x_21 = l_lean_parser_list_cons_tokens___rarg(x_20, x_3);
x_22 = l_lean_parser_list_cons_tokens___rarg(x_4, x_21);
x_23 = l_lean_parser_list_cons_tokens___rarg(x_18, x_22);
x_24 = l_lean_parser_tokens___rarg(x_23);
x_25 = lean::mk_string("\xe2\xa6\x83");
x_26 = l_lean_parser_symbol_tokens___rarg(x_25, x_1);
x_27 = lean::mk_string("\xe2\xa6\x84");
x_28 = l_lean_parser_symbol_tokens___rarg(x_27, x_1);
x_29 = l_lean_parser_list_cons_tokens___rarg(x_28, x_3);
x_30 = l_lean_parser_list_cons_tokens___rarg(x_4, x_29);
x_31 = l_lean_parser_list_cons_tokens___rarg(x_26, x_30);
x_32 = l_lean_parser_tokens___rarg(x_31);
x_33 = lean::mk_string("[");
x_34 = l_lean_parser_symbol_tokens___rarg(x_33, x_1);
x_35 = lean::mk_string(" : ");
x_36 = l_lean_parser_symbol_tokens___rarg(x_35, x_1);
x_37 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_38 = l_lean_parser_list_cons_tokens___rarg(x_37, x_3);
lean::inc(x_38);
x_40 = l_lean_parser_list_cons_tokens___rarg(x_36, x_38);
x_41 = l_lean_parser_list_cons_tokens___rarg(x_3, x_40);
x_42 = l_lean_parser_tokens___rarg(x_41);
x_43 = l_lean_parser_tokens___rarg(x_38);
x_44 = l_lean_parser_list_cons_tokens___rarg(x_43, x_3);
x_45 = l_lean_parser_list_cons_tokens___rarg(x_42, x_44);
x_46 = l_lean_parser_tokens___rarg(x_45);
x_47 = l_lean_parser_list_cons_tokens___rarg(x_46, x_3);
x_48 = l_lean_parser_tokens___rarg(x_47);
x_49 = lean::mk_string("]");
x_50 = l_lean_parser_symbol_tokens___rarg(x_49, x_1);
x_51 = l_lean_parser_list_cons_tokens___rarg(x_50, x_3);
x_52 = l_lean_parser_list_cons_tokens___rarg(x_48, x_51);
x_53 = l_lean_parser_list_cons_tokens___rarg(x_34, x_52);
x_54 = l_lean_parser_tokens___rarg(x_53);
x_55 = l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__tokens;
x_56 = l_lean_parser_list_cons_tokens___rarg(x_55, x_3);
x_57 = l_lean_parser_list_cons_tokens___rarg(x_54, x_56);
x_58 = l_lean_parser_list_cons_tokens___rarg(x_32, x_57);
x_59 = l_lean_parser_list_cons_tokens___rarg(x_24, x_58);
x_60 = l_lean_parser_list_cons_tokens___rarg(x_16, x_59);
x_61 = l_lean_parser_tokens___rarg(x_60);
x_62 = l_lean_parser_list_cons_tokens___rarg(x_61, x_3);
x_63 = l_lean_parser_tokens___rarg(x_62);
return x_63;
}
}
obj* _init_l_lean_parser_term_bracketed__binder_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_34; obj* x_35; obj* x_36; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; 
x_0 = lean::mk_string("(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::box(0);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__content_parser), 5, 0);
lean::inc(x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_6);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_command_notation__like_parser), 5, 0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_10);
lean::cnstr_set(x_11, 1, x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_12, 0, x_11);
lean::closure_set(x_12, 1, x_4);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_6);
x_14 = l_lean_parser_term_explicit__binder__content;
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_15, 0, x_14);
lean::closure_set(x_15, 1, x_13);
x_16 = lean::mk_string(")");
x_17 = l_string_trim(x_16);
lean::inc(x_17);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_19, 0, x_17);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_20, 0, x_17);
lean::closure_set(x_20, 1, x_4);
lean::closure_set(x_20, 2, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_6);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_15);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_5);
lean::cnstr_set(x_23, 1, x_22);
x_24 = l_lean_parser_term_explicit__binder;
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_25, 0, x_24);
lean::closure_set(x_25, 1, x_23);
x_26 = lean::mk_string("{");
x_27 = l_string_trim(x_26);
lean::inc(x_27);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_29, 0, x_27);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_30, 0, x_27);
lean::closure_set(x_30, 1, x_4);
lean::closure_set(x_30, 2, x_29);
x_31 = lean::mk_string("}");
x_32 = l_string_trim(x_31);
lean::inc(x_32);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_34, 0, x_32);
x_35 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_35, 0, x_32);
lean::closure_set(x_35, 1, x_4);
lean::closure_set(x_35, 2, x_34);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_6);
lean::inc(x_7);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_7);
lean::cnstr_set(x_38, 1, x_36);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_30);
lean::cnstr_set(x_39, 1, x_38);
x_40 = l_lean_parser_term_implicit__binder;
x_41 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_41, 0, x_40);
lean::closure_set(x_41, 1, x_39);
x_42 = lean::mk_string("\xe2\xa6\x83");
x_43 = l_string_trim(x_42);
lean::inc(x_43);
x_45 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_45, 0, x_43);
x_46 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_46, 0, x_43);
lean::closure_set(x_46, 1, x_4);
lean::closure_set(x_46, 2, x_45);
x_47 = lean::mk_string("\xe2\xa6\x84");
x_48 = l_string_trim(x_47);
lean::inc(x_48);
x_50 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_50, 0, x_48);
x_51 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_51, 0, x_48);
lean::closure_set(x_51, 1, x_4);
lean::closure_set(x_51, 2, x_50);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_6);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_7);
lean::cnstr_set(x_53, 1, x_52);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_46);
lean::cnstr_set(x_54, 1, x_53);
x_55 = l_lean_parser_term_strict__implicit__binder;
x_56 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_56, 0, x_55);
lean::closure_set(x_56, 1, x_54);
x_57 = lean::mk_string("[");
x_58 = l_string_trim(x_57);
lean::inc(x_58);
x_60 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_60, 0, x_58);
x_61 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_61, 0, x_58);
lean::closure_set(x_61, 1, x_4);
lean::closure_set(x_61, 2, x_60);
x_62 = lean::mk_string(" : ");
x_63 = l_string_trim(x_62);
lean::inc(x_63);
x_65 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_65, 0, x_63);
x_66 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_66, 0, x_63);
lean::closure_set(x_66, 1, x_4);
lean::closure_set(x_66, 2, x_65);
x_67 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_67, 0, x_4);
x_68 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_68, 0, x_67);
lean::cnstr_set(x_68, 1, x_6);
lean::inc(x_68);
x_70 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_70, 0, x_66);
lean::cnstr_set(x_70, 1, x_68);
x_71 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
x_72 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_72, 0, x_71);
lean::cnstr_set(x_72, 1, x_70);
x_73 = l_lean_parser_term_inst__implicit__named__binder;
x_74 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_74, 0, x_73);
lean::closure_set(x_74, 1, x_72);
x_75 = l_lean_parser_term_inst__implicit__anonymous__binder;
x_76 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_76, 0, x_75);
lean::closure_set(x_76, 1, x_68);
x_77 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_77, 0, x_76);
lean::cnstr_set(x_77, 1, x_6);
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_74);
lean::cnstr_set(x_78, 1, x_77);
x_79 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_longest__choice___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__1), 6, 1);
lean::closure_set(x_79, 0, x_78);
x_80 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_80, 0, x_79);
lean::cnstr_set(x_80, 1, x_6);
x_81 = l_lean_parser_term_inst__implicit__binder__content;
x_82 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_82, 0, x_81);
lean::closure_set(x_82, 1, x_80);
x_83 = lean::mk_string("]");
x_84 = l_string_trim(x_83);
lean::inc(x_84);
x_86 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_86, 0, x_84);
x_87 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_87, 0, x_84);
lean::closure_set(x_87, 1, x_4);
lean::closure_set(x_87, 2, x_86);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_87);
lean::cnstr_set(x_88, 1, x_6);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_82);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_61);
lean::cnstr_set(x_90, 1, x_89);
x_91 = l_lean_parser_term_inst__implicit__binder;
x_92 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_92, 0, x_91);
lean::closure_set(x_92, 1, x_90);
x_93 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_anonymous__constructor_parser), 5, 0);
x_94 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_94, 0, x_93);
lean::cnstr_set(x_94, 1, x_6);
x_95 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_95, 0, x_92);
lean::cnstr_set(x_95, 1, x_94);
x_96 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_96, 0, x_56);
lean::cnstr_set(x_96, 1, x_95);
x_97 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_97, 0, x_41);
lean::cnstr_set(x_97, 1, x_96);
x_98 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_98, 0, x_25);
lean::cnstr_set(x_98, 1, x_97);
x_99 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_99, 0, x_98);
lean::closure_set(x_99, 1, x_4);
x_100 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_100, 0, x_99);
lean::cnstr_set(x_100, 1, x_6);
x_101 = l_lean_parser_term__parser__m_monad;
x_102 = l_lean_parser_term__parser__m_monad__except;
x_103 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_104 = l_lean_parser_term__parser__m_alternative;
x_105 = l_lean_parser_term_bracketed__binder;
x_106 = l_lean_parser_term_bracketed__binder_has__view;
x_107 = l_lean_parser_combinators_node_view___rarg(x_101, x_102, x_103, x_104, x_105, x_100, x_106);
return x_107;
}
}
obj* _init_l_lean_parser_term_bracketed__binder_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_34; obj* x_35; obj* x_36; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; 
x_0 = lean::mk_string("(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::box(0);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__content_parser), 5, 0);
lean::inc(x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_6);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_command_notation__like_parser), 5, 0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_10);
lean::cnstr_set(x_11, 1, x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_12, 0, x_11);
lean::closure_set(x_12, 1, x_4);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_6);
x_14 = l_lean_parser_term_explicit__binder__content;
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_15, 0, x_14);
lean::closure_set(x_15, 1, x_13);
x_16 = lean::mk_string(")");
x_17 = l_string_trim(x_16);
lean::inc(x_17);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_19, 0, x_17);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_20, 0, x_17);
lean::closure_set(x_20, 1, x_4);
lean::closure_set(x_20, 2, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_6);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_15);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_5);
lean::cnstr_set(x_23, 1, x_22);
x_24 = l_lean_parser_term_explicit__binder;
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_25, 0, x_24);
lean::closure_set(x_25, 1, x_23);
x_26 = lean::mk_string("{");
x_27 = l_string_trim(x_26);
lean::inc(x_27);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_29, 0, x_27);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_30, 0, x_27);
lean::closure_set(x_30, 1, x_4);
lean::closure_set(x_30, 2, x_29);
x_31 = lean::mk_string("}");
x_32 = l_string_trim(x_31);
lean::inc(x_32);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_34, 0, x_32);
x_35 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_35, 0, x_32);
lean::closure_set(x_35, 1, x_4);
lean::closure_set(x_35, 2, x_34);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_6);
lean::inc(x_7);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_7);
lean::cnstr_set(x_38, 1, x_36);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_30);
lean::cnstr_set(x_39, 1, x_38);
x_40 = l_lean_parser_term_implicit__binder;
x_41 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_41, 0, x_40);
lean::closure_set(x_41, 1, x_39);
x_42 = lean::mk_string("\xe2\xa6\x83");
x_43 = l_string_trim(x_42);
lean::inc(x_43);
x_45 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_45, 0, x_43);
x_46 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_46, 0, x_43);
lean::closure_set(x_46, 1, x_4);
lean::closure_set(x_46, 2, x_45);
x_47 = lean::mk_string("\xe2\xa6\x84");
x_48 = l_string_trim(x_47);
lean::inc(x_48);
x_50 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_50, 0, x_48);
x_51 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_51, 0, x_48);
lean::closure_set(x_51, 1, x_4);
lean::closure_set(x_51, 2, x_50);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_6);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_7);
lean::cnstr_set(x_53, 1, x_52);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_46);
lean::cnstr_set(x_54, 1, x_53);
x_55 = l_lean_parser_term_strict__implicit__binder;
x_56 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_56, 0, x_55);
lean::closure_set(x_56, 1, x_54);
x_57 = lean::mk_string("[");
x_58 = l_string_trim(x_57);
lean::inc(x_58);
x_60 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_60, 0, x_58);
x_61 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_61, 0, x_58);
lean::closure_set(x_61, 1, x_4);
lean::closure_set(x_61, 2, x_60);
x_62 = lean::mk_string(" : ");
x_63 = l_string_trim(x_62);
lean::inc(x_63);
x_65 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_65, 0, x_63);
x_66 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_66, 0, x_63);
lean::closure_set(x_66, 1, x_4);
lean::closure_set(x_66, 2, x_65);
x_67 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_67, 0, x_4);
x_68 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_68, 0, x_67);
lean::cnstr_set(x_68, 1, x_6);
lean::inc(x_68);
x_70 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_70, 0, x_66);
lean::cnstr_set(x_70, 1, x_68);
x_71 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
x_72 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_72, 0, x_71);
lean::cnstr_set(x_72, 1, x_70);
x_73 = l_lean_parser_term_inst__implicit__named__binder;
x_74 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_74, 0, x_73);
lean::closure_set(x_74, 1, x_72);
x_75 = l_lean_parser_term_inst__implicit__anonymous__binder;
x_76 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_76, 0, x_75);
lean::closure_set(x_76, 1, x_68);
x_77 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_77, 0, x_76);
lean::cnstr_set(x_77, 1, x_6);
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_74);
lean::cnstr_set(x_78, 1, x_77);
x_79 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_longest__choice___at_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens___spec__1), 6, 1);
lean::closure_set(x_79, 0, x_78);
x_80 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_80, 0, x_79);
lean::cnstr_set(x_80, 1, x_6);
x_81 = l_lean_parser_term_inst__implicit__binder__content;
x_82 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_82, 0, x_81);
lean::closure_set(x_82, 1, x_80);
x_83 = lean::mk_string("]");
x_84 = l_string_trim(x_83);
lean::inc(x_84);
x_86 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_86, 0, x_84);
x_87 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_87, 0, x_84);
lean::closure_set(x_87, 1, x_4);
lean::closure_set(x_87, 2, x_86);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_87);
lean::cnstr_set(x_88, 1, x_6);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_82);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_61);
lean::cnstr_set(x_90, 1, x_89);
x_91 = l_lean_parser_term_inst__implicit__binder;
x_92 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_92, 0, x_91);
lean::closure_set(x_92, 1, x_90);
x_93 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_anonymous__constructor_parser), 5, 0);
x_94 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_94, 0, x_93);
lean::cnstr_set(x_94, 1, x_6);
x_95 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_95, 0, x_92);
lean::cnstr_set(x_95, 1, x_94);
x_96 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_96, 0, x_56);
lean::cnstr_set(x_96, 1, x_95);
x_97 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_97, 0, x_41);
lean::cnstr_set(x_97, 1, x_96);
x_98 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_98, 0, x_25);
lean::cnstr_set(x_98, 1, x_97);
x_99 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_99, 0, x_98);
lean::closure_set(x_99, 1, x_4);
x_100 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_100, 0, x_99);
lean::cnstr_set(x_100, 1, x_6);
return x_100;
}
}
obj* l_lean_parser_term_bracketed__binder_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_bracketed__binder;
x_6 = l_lean_parser_term_bracketed__binder_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; obj* x_9; obj* x_12; obj* x_13; 
x_8 = l_lean_parser_term_binder__content_has__view;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_0);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
else
{
obj* x_14; obj* x_15; obj* x_18; obj* x_19; 
x_14 = l_lean_parser_term_bracketed__binder_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_0);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
}
}
obj* _init_l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__2;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; obj* x_69; obj* x_72; obj* x_73; 
x_68 = l_lean_parser_term_binder__content_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_1);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
else
{
obj* x_74; obj* x_75; obj* x_78; obj* x_79; 
x_74 = l_lean_parser_term_bracketed__binder_has__view;
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
lean::dec(x_74);
x_78 = lean::apply_1(x_75, x_1);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
}
}
obj* l_lean_parser_term_binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_bracketed__binder_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_lean_parser_term_binder;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_lean_parser_term_binder__content_has__view;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_26 = l_lean_parser_syntax_mk__node(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_lean_parser_term_binder;
x_29 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_lean_parser_term_binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binder_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_binder_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = l_lean_parser_term_binder__content_parser_lean_parser_has__tokens;
x_2 = l_lean_parser_list_cons_tokens___rarg(x_1, x_0);
x_3 = l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens;
x_4 = l_lean_parser_list_cons_tokens___rarg(x_3, x_2);
x_5 = l_lean_parser_tokens___rarg(x_4);
x_6 = l_lean_parser_list_cons_tokens___rarg(x_5, x_0);
x_7 = l_lean_parser_tokens___rarg(x_6);
return x_7;
}
}
obj* _init_l_lean_parser_term_binder_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__content_parser), 5, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_6, 0, x_4);
lean::closure_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
x_8 = l_lean_parser_term__parser__m_monad;
x_9 = l_lean_parser_term__parser__m_monad__except;
x_10 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_11 = l_lean_parser_term__parser__m_alternative;
x_12 = l_lean_parser_term_binder;
x_13 = l_lean_parser_term_binder_has__view;
x_14 = l_lean_parser_combinators_node_view___rarg(x_8, x_9, x_10, x_11, x_12, x_7, x_13);
return x_14;
}
}
obj* _init_l_lean_parser_term_binder_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__content_parser), 5, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_6, 0, x_4);
lean::closure_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
return x_7;
}
}
obj* l_lean_parser_term_binder_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_binder;
x_6 = l_lean_parser_term_binder_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_binders__types() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binders_types");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_binders__types_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
lean::dec(x_5);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
x_10 = l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1;
return x_10;
}
else
{
obj* x_11; obj* x_14; obj* x_15; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
lean::dec(x_6);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_11);
return x_15;
}
}
else
{
obj* x_16; obj* x_18; 
x_16 = lean::cnstr_get(x_6, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_6, 1);
lean::inc(x_18);
lean::dec(x_6);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_21; obj* x_24; 
x_21 = lean::cnstr_get(x_16, 0);
lean::inc(x_21);
lean::dec(x_16);
if (lean::is_scalar(x_5)) {
 x_24 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_24 = x_5;
}
lean::cnstr_set(x_24, 0, x_21);
if (lean::obj_tag(x_18) == 0)
{
obj* x_25; obj* x_26; 
x_25 = lean::box(3);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_30; 
x_27 = lean::cnstr_get(x_18, 0);
lean::inc(x_27);
lean::dec(x_18);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_24);
lean::cnstr_set(x_30, 1, x_27);
return x_30;
}
}
case 3:
{
lean::dec(x_5);
if (lean::obj_tag(x_18) == 0)
{
obj* x_32; 
x_32 = l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1;
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_18, 0);
lean::inc(x_33);
lean::dec(x_18);
x_36 = lean::box(0);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_33);
return x_37;
}
}
default:
{
lean::dec(x_5);
lean::dec(x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_40; 
x_40 = l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1;
return x_40;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_18, 0);
lean::inc(x_41);
lean::dec(x_18);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
}
}
}
}
}
obj* l_lean_parser_term_binders__types_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_7 = l_option_map___rarg(x_6, x_1);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_3);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_9);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_lean_parser_term_binders__types;
x_14 = l_lean_parser_syntax_mk__node(x_13, x_12);
return x_14;
}
}
obj* _init_l_lean_parser_term_binders__types_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__types_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__types_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_binders__types_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binders__types_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_mixed__binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("mixed_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; obj* x_9; obj* x_12; obj* x_13; 
x_8 = l_lean_parser_term_binder__ident_has__view;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_0);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
else
{
obj* x_14; obj* x_15; obj* x_18; obj* x_19; 
x_14 = l_lean_parser_term_bracketed__binder_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_0);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
}
}
obj* _init_l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("mixed_binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__2;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; obj* x_69; obj* x_72; obj* x_73; 
x_68 = l_lean_parser_term_binder__ident_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_1);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
else
{
obj* x_74; obj* x_75; obj* x_78; obj* x_79; 
x_74 = l_lean_parser_term_bracketed__binder_has__view;
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
lean::dec(x_74);
x_78 = lean::apply_1(x_75, x_1);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
}
}
obj* l_lean_parser_term_mixed__binder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_bracketed__binder_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_lean_parser_term_mixed__binder;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_lean_parser_term_binder__ident_has__view;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_26 = l_lean_parser_syntax_mk__node(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_lean_parser_term_mixed__binder;
x_29 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_lean_parser_term_mixed__binder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_mixed__binder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_mixed__binder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_mixed__binder_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_binders__remainder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binders_remainder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = l_lean_parser_term_mixed__binder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_mixed__binder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; 
x_8 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_9; 
x_9 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__1;
return x_9;
}
else
{
obj* x_10; obj* x_13; obj* x_16; obj* x_17; obj* x_18; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
lean::dec(x_10);
x_16 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__2;
x_17 = l_list_map___main___rarg(x_16, x_13);
x_18 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_18, 0, x_17);
return x_18;
}
}
else
{
obj* x_19; obj* x_20; obj* x_23; obj* x_24; 
x_19 = l_lean_parser_term_binders__types_has__view;
x_20 = lean::cnstr_get(x_19, 0);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_0);
x_24 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_24, 0, x_23);
return x_24;
}
}
}
}
obj* _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binders_remainder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__4;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; 
x_68 = l_lean_parser_syntax_as__node___main(x_1);
if (lean::obj_tag(x_68) == 0)
{
obj* x_69; 
x_69 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__1;
return x_69;
}
else
{
obj* x_70; obj* x_73; obj* x_76; obj* x_77; obj* x_78; 
x_70 = lean::cnstr_get(x_68, 0);
lean::inc(x_70);
lean::dec(x_68);
x_73 = lean::cnstr_get(x_70, 1);
lean::inc(x_73);
lean::dec(x_70);
x_76 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__2;
x_77 = l_list_map___main___rarg(x_76, x_73);
x_78 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_78, 0, x_77);
return x_78;
}
}
else
{
obj* x_79; obj* x_80; obj* x_83; obj* x_84; 
x_79 = l_lean_parser_term_binders__types_has__view;
x_80 = lean::cnstr_get(x_79, 0);
lean::inc(x_80);
lean::dec(x_79);
x_83 = lean::apply_1(x_80, x_1);
x_84 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_84, 0, x_83);
return x_84;
}
}
}
}
obj* _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_mixed__binder_has__view;
x_1 = lean::cnstr_get(x_0, 1);
lean::inc(x_1);
lean::dec(x_0);
return x_1;
}
}
obj* l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_binders__types_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_lean_parser_term_binders__remainder;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2___closed__1;
x_20 = l_list_map___main___rarg(x_19, x_16);
x_21 = l_lean_parser_no__kind;
x_22 = l_lean_parser_syntax_mk__node(x_21, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_1);
x_24 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_25 = l_lean_parser_syntax_mk__node(x_24, x_23);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_lean_parser_term_binders__remainder;
x_28 = l_lean_parser_syntax_mk__node(x_27, x_26);
return x_28;
}
}
}
obj* _init_l_lean_parser_term_binders__remainder_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_binders__remainder_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binders__remainder_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_binders__ext() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binders_ext");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_12; obj* x_13; obj* x_14; 
x_0 = l_lean_parser_term_binder__ident_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = l_lean_parser_term_binders__remainder_has__view;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_4);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
x_14 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_14, 0, x_7);
lean::cnstr_set(x_14, 1, x_13);
return x_14;
}
}
obj* _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = l_lean_parser_term_binder__ident_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_6);
return x_8;
}
}
obj* _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2;
return x_10;
}
else
{
obj* x_11; obj* x_13; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_6, 1);
lean::inc(x_13);
lean::dec(x_6);
if (lean::obj_tag(x_13) == 0)
{
obj* x_16; obj* x_17; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_16 = l_lean_parser_term_binders__remainder_has__view;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
lean::dec(x_16);
x_20 = lean::apply_1(x_17, x_11);
if (lean::is_scalar(x_5)) {
 x_21 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_21 = x_5;
}
lean::cnstr_set(x_21, 0, x_20);
x_22 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3;
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_21);
return x_23;
}
else
{
obj* x_27; 
lean::dec(x_11);
lean::dec(x_13);
lean::dec(x_5);
x_27 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1;
return x_27;
}
}
}
}
}
obj* _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_lean_parser_term_binders__remainder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__5() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
x_5 = l_lean_parser_syntax_as__node___main(x_1);
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_6; 
x_6 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__3;
return x_6;
}
else
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_0, 0);
lean::inc(x_7);
lean::dec(x_0);
x_10 = l_lean_parser_syntax_as__node___main(x_7);
if (lean::obj_tag(x_10) == 0)
{
obj* x_11; 
x_11 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1;
return x_11;
}
else
{
obj* x_12; obj* x_14; obj* x_15; 
x_12 = lean::cnstr_get(x_10, 0);
if (lean::is_exclusive(x_10)) {
 lean::cnstr_set(x_10, 0, lean::box(0));
 x_14 = x_10;
} else {
 lean::inc(x_12);
 lean::dec(x_10);
 x_14 = lean::box(0);
}
x_15 = lean::cnstr_get(x_12, 1);
lean::inc(x_15);
lean::dec(x_12);
if (lean::obj_tag(x_15) == 0)
{
obj* x_19; 
lean::dec(x_14);
x_19 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_15, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_15, 1);
lean::inc(x_22);
lean::dec(x_15);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; obj* x_26; obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
x_25 = l_lean_parser_term_binders__remainder_has__view;
x_26 = lean::cnstr_get(x_25, 0);
lean::inc(x_26);
lean::dec(x_25);
x_29 = lean::apply_1(x_26, x_20);
if (lean::is_scalar(x_14)) {
 x_30 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_30 = x_14;
}
lean::cnstr_set(x_30, 0, x_29);
x_31 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3;
x_32 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_30);
return x_32;
}
else
{
obj* x_36; 
lean::dec(x_20);
lean::dec(x_22);
lean::dec(x_14);
x_36 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1;
return x_36;
}
}
}
}
}
else
{
obj* x_37; obj* x_39; obj* x_40; obj* x_43; obj* x_44; 
x_37 = lean::cnstr_get(x_5, 0);
if (lean::is_exclusive(x_5)) {
 lean::cnstr_set(x_5, 0, lean::box(0));
 x_39 = x_5;
} else {
 lean::inc(x_37);
 lean::dec(x_5);
 x_39 = lean::box(0);
}
x_40 = lean::cnstr_get(x_37, 1);
lean::inc(x_40);
lean::dec(x_37);
x_43 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4;
x_44 = l_list_map___main___rarg(x_43, x_40);
if (lean::obj_tag(x_0) == 0)
{
obj* x_45; obj* x_46; 
x_45 = lean::box(3);
x_46 = l_lean_parser_syntax_as__node___main(x_45);
if (lean::obj_tag(x_46) == 0)
{
obj* x_48; obj* x_49; 
lean::dec(x_39);
x_48 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
x_49 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_49, 0, x_44);
lean::cnstr_set(x_49, 1, x_48);
return x_49;
}
else
{
obj* x_50; obj* x_53; 
x_50 = lean::cnstr_get(x_46, 0);
lean::inc(x_50);
lean::dec(x_46);
x_53 = lean::cnstr_get(x_50, 1);
lean::inc(x_53);
lean::dec(x_50);
if (lean::obj_tag(x_53) == 0)
{
obj* x_57; obj* x_58; 
lean::dec(x_39);
x_57 = lean::box(0);
x_58 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_58, 0, x_44);
lean::cnstr_set(x_58, 1, x_57);
return x_58;
}
else
{
obj* x_59; obj* x_61; 
x_59 = lean::cnstr_get(x_53, 0);
lean::inc(x_59);
x_61 = lean::cnstr_get(x_53, 1);
lean::inc(x_61);
lean::dec(x_53);
if (lean::obj_tag(x_61) == 0)
{
obj* x_64; obj* x_65; obj* x_68; obj* x_69; obj* x_70; 
x_64 = l_lean_parser_term_binders__remainder_has__view;
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
lean::dec(x_64);
x_68 = lean::apply_1(x_65, x_59);
if (lean::is_scalar(x_39)) {
 x_69 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_69 = x_39;
}
lean::cnstr_set(x_69, 0, x_68);
x_70 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_70, 0, x_44);
lean::cnstr_set(x_70, 1, x_69);
return x_70;
}
else
{
obj* x_74; obj* x_75; 
lean::dec(x_39);
lean::dec(x_59);
lean::dec(x_61);
x_74 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
x_75 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_75, 0, x_44);
lean::cnstr_set(x_75, 1, x_74);
return x_75;
}
}
}
}
else
{
obj* x_76; obj* x_79; 
x_76 = lean::cnstr_get(x_0, 0);
lean::inc(x_76);
lean::dec(x_0);
x_79 = l_lean_parser_syntax_as__node___main(x_76);
if (lean::obj_tag(x_79) == 0)
{
obj* x_81; obj* x_82; 
lean::dec(x_39);
x_81 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
x_82 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_82, 0, x_44);
lean::cnstr_set(x_82, 1, x_81);
return x_82;
}
else
{
obj* x_83; obj* x_86; 
x_83 = lean::cnstr_get(x_79, 0);
lean::inc(x_83);
lean::dec(x_79);
x_86 = lean::cnstr_get(x_83, 1);
lean::inc(x_86);
lean::dec(x_83);
if (lean::obj_tag(x_86) == 0)
{
obj* x_90; obj* x_91; 
lean::dec(x_39);
x_90 = lean::box(0);
x_91 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_91, 0, x_44);
lean::cnstr_set(x_91, 1, x_90);
return x_91;
}
else
{
obj* x_92; obj* x_94; 
x_92 = lean::cnstr_get(x_86, 0);
lean::inc(x_92);
x_94 = lean::cnstr_get(x_86, 1);
lean::inc(x_94);
lean::dec(x_86);
if (lean::obj_tag(x_94) == 0)
{
obj* x_97; obj* x_98; obj* x_101; obj* x_102; obj* x_103; 
x_97 = l_lean_parser_term_binders__remainder_has__view;
x_98 = lean::cnstr_get(x_97, 0);
lean::inc(x_98);
lean::dec(x_97);
x_101 = lean::apply_1(x_98, x_92);
if (lean::is_scalar(x_39)) {
 x_102 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_102 = x_39;
}
lean::cnstr_set(x_102, 0, x_101);
x_103 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_103, 0, x_44);
lean::cnstr_set(x_103, 1, x_102);
return x_103;
}
else
{
obj* x_107; obj* x_108; 
lean::dec(x_39);
lean::dec(x_92);
lean::dec(x_94);
x_107 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
x_108 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_108, 0, x_44);
lean::cnstr_set(x_108, 1, x_107);
return x_108;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__5;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
x_18 = l_lean_parser_syntax_as__node___main(x_2);
if (lean::obj_tag(x_18) == 0)
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__3;
return x_19;
}
else
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_1, 0);
lean::inc(x_20);
lean::dec(x_1);
x_23 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_23) == 0)
{
obj* x_24; 
x_24 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1;
return x_24;
}
else
{
obj* x_25; obj* x_27; obj* x_28; 
x_25 = lean::cnstr_get(x_23, 0);
if (lean::is_exclusive(x_23)) {
 lean::cnstr_set(x_23, 0, lean::box(0));
 x_27 = x_23;
} else {
 lean::inc(x_25);
 lean::dec(x_23);
 x_27 = lean::box(0);
}
x_28 = lean::cnstr_get(x_25, 1);
lean::inc(x_28);
lean::dec(x_25);
if (lean::obj_tag(x_28) == 0)
{
obj* x_32; 
lean::dec(x_27);
x_32 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2;
return x_32;
}
else
{
obj* x_33; obj* x_35; 
x_33 = lean::cnstr_get(x_28, 0);
lean::inc(x_33);
x_35 = lean::cnstr_get(x_28, 1);
lean::inc(x_35);
lean::dec(x_28);
if (lean::obj_tag(x_35) == 0)
{
obj* x_38; obj* x_39; obj* x_42; obj* x_43; obj* x_44; obj* x_45; 
x_38 = l_lean_parser_term_binders__remainder_has__view;
x_39 = lean::cnstr_get(x_38, 0);
lean::inc(x_39);
lean::dec(x_38);
x_42 = lean::apply_1(x_39, x_33);
if (lean::is_scalar(x_27)) {
 x_43 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_43 = x_27;
}
lean::cnstr_set(x_43, 0, x_42);
x_44 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3;
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_43);
return x_45;
}
else
{
obj* x_49; 
lean::dec(x_35);
lean::dec(x_27);
lean::dec(x_33);
x_49 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1;
return x_49;
}
}
}
}
}
else
{
obj* x_50; obj* x_52; obj* x_53; obj* x_56; obj* x_57; 
x_50 = lean::cnstr_get(x_18, 0);
if (lean::is_exclusive(x_18)) {
 lean::cnstr_set(x_18, 0, lean::box(0));
 x_52 = x_18;
} else {
 lean::inc(x_50);
 lean::dec(x_18);
 x_52 = lean::box(0);
}
x_53 = lean::cnstr_get(x_50, 1);
lean::inc(x_53);
lean::dec(x_50);
x_56 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4;
x_57 = l_list_map___main___rarg(x_56, x_53);
if (lean::obj_tag(x_1) == 0)
{
obj* x_58; obj* x_59; 
x_58 = lean::box(3);
x_59 = l_lean_parser_syntax_as__node___main(x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_61; obj* x_62; 
lean::dec(x_52);
x_61 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
x_62 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_62, 0, x_57);
lean::cnstr_set(x_62, 1, x_61);
return x_62;
}
else
{
obj* x_63; obj* x_66; 
x_63 = lean::cnstr_get(x_59, 0);
lean::inc(x_63);
lean::dec(x_59);
x_66 = lean::cnstr_get(x_63, 1);
lean::inc(x_66);
lean::dec(x_63);
if (lean::obj_tag(x_66) == 0)
{
obj* x_70; obj* x_71; 
lean::dec(x_52);
x_70 = lean::box(0);
x_71 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_71, 0, x_57);
lean::cnstr_set(x_71, 1, x_70);
return x_71;
}
else
{
obj* x_72; obj* x_74; 
x_72 = lean::cnstr_get(x_66, 0);
lean::inc(x_72);
x_74 = lean::cnstr_get(x_66, 1);
lean::inc(x_74);
lean::dec(x_66);
if (lean::obj_tag(x_74) == 0)
{
obj* x_77; obj* x_78; obj* x_81; obj* x_82; obj* x_83; 
x_77 = l_lean_parser_term_binders__remainder_has__view;
x_78 = lean::cnstr_get(x_77, 0);
lean::inc(x_78);
lean::dec(x_77);
x_81 = lean::apply_1(x_78, x_72);
if (lean::is_scalar(x_52)) {
 x_82 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_82 = x_52;
}
lean::cnstr_set(x_82, 0, x_81);
x_83 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_83, 0, x_57);
lean::cnstr_set(x_83, 1, x_82);
return x_83;
}
else
{
obj* x_87; obj* x_88; 
lean::dec(x_52);
lean::dec(x_72);
lean::dec(x_74);
x_87 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
x_88 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_88, 0, x_57);
lean::cnstr_set(x_88, 1, x_87);
return x_88;
}
}
}
}
else
{
obj* x_89; obj* x_92; 
x_89 = lean::cnstr_get(x_1, 0);
lean::inc(x_89);
lean::dec(x_1);
x_92 = l_lean_parser_syntax_as__node___main(x_89);
if (lean::obj_tag(x_92) == 0)
{
obj* x_94; obj* x_95; 
lean::dec(x_52);
x_94 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
x_95 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_95, 0, x_57);
lean::cnstr_set(x_95, 1, x_94);
return x_95;
}
else
{
obj* x_96; obj* x_99; 
x_96 = lean::cnstr_get(x_92, 0);
lean::inc(x_96);
lean::dec(x_92);
x_99 = lean::cnstr_get(x_96, 1);
lean::inc(x_99);
lean::dec(x_96);
if (lean::obj_tag(x_99) == 0)
{
obj* x_103; obj* x_104; 
lean::dec(x_52);
x_103 = lean::box(0);
x_104 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_104, 0, x_57);
lean::cnstr_set(x_104, 1, x_103);
return x_104;
}
else
{
obj* x_105; obj* x_107; 
x_105 = lean::cnstr_get(x_99, 0);
lean::inc(x_105);
x_107 = lean::cnstr_get(x_99, 1);
lean::inc(x_107);
lean::dec(x_99);
if (lean::obj_tag(x_107) == 0)
{
obj* x_110; obj* x_111; obj* x_114; obj* x_115; obj* x_116; 
x_110 = l_lean_parser_term_binders__remainder_has__view;
x_111 = lean::cnstr_get(x_110, 0);
lean::inc(x_111);
lean::dec(x_110);
x_114 = lean::apply_1(x_111, x_105);
if (lean::is_scalar(x_52)) {
 x_115 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_115 = x_52;
}
lean::cnstr_set(x_115, 0, x_114);
x_116 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_116, 0, x_57);
lean::cnstr_set(x_116, 1, x_115);
return x_116;
}
else
{
obj* x_120; obj* x_121; 
lean::dec(x_52);
lean::dec(x_107);
lean::dec(x_105);
x_120 = l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4;
x_121 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_121, 0, x_57);
lean::cnstr_set(x_121, 1, x_120);
return x_121;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_binders__ext_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__1;
x_7 = l_list_map___main___rarg(x_6, x_1);
x_8 = l_lean_parser_no__kind;
x_9 = l_lean_parser_syntax_mk__node(x_8, x_7);
if (lean::obj_tag(x_3) == 0)
{
obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_10 = l_lean_parser_detail__ident_has__view_x_27___lambda__2___closed__1;
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_9);
lean::cnstr_set(x_11, 1, x_10);
x_12 = l_lean_parser_term_binders__ext;
x_13 = l_lean_parser_syntax_mk__node(x_12, x_11);
return x_13;
}
else
{
obj* x_14; obj* x_17; obj* x_18; obj* x_19; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_14 = lean::cnstr_get(x_3, 0);
lean::inc(x_14);
lean::dec(x_3);
x_17 = lean::box(0);
x_18 = l_lean_parser_term_binders__remainder_has__view;
x_19 = lean::cnstr_get(x_18, 1);
lean::inc(x_19);
lean::dec(x_18);
x_22 = lean::apply_1(x_19, x_14);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_17);
x_24 = l_lean_parser_syntax_mk__node(x_8, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_17);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_9);
lean::cnstr_set(x_26, 1, x_25);
x_27 = l_lean_parser_term_binders__ext;
x_28 = l_lean_parser_syntax_mk__node(x_27, x_26);
return x_28;
}
}
}
obj* _init_l_lean_parser_term_binders__ext_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__ext_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__ext_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_binders__ext_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binders__ext_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_binders__ext_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_0 = l_lean_parser_term_binder__ident_parser_lean_parser_has__tokens;
x_1 = l_lean_parser_tokens___rarg(x_0);
x_2 = lean::mk_string(":");
x_3 = lean::mk_nat_obj(0u);
x_4 = l_lean_parser_symbol_tokens___rarg(x_2, x_3);
x_5 = lean::box(0);
x_6 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_7 = l_lean_parser_list_cons_tokens___rarg(x_6, x_5);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_4, x_7);
x_9 = l_lean_parser_tokens___rarg(x_8);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_0, x_5);
x_11 = l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens;
x_12 = l_lean_parser_list_cons_tokens___rarg(x_11, x_10);
x_13 = l_lean_parser_tokens___rarg(x_12);
x_14 = l_lean_parser_list_cons_tokens___rarg(x_13, x_5);
x_15 = l_lean_parser_tokens___rarg(x_14);
x_16 = l_lean_parser_tokens___rarg(x_15);
x_17 = l_lean_parser_list_cons_tokens___rarg(x_16, x_5);
x_18 = l_lean_parser_list_cons_tokens___rarg(x_9, x_17);
x_19 = l_lean_parser_tokens___rarg(x_18);
x_20 = l_lean_parser_list_cons_tokens___rarg(x_19, x_5);
x_21 = l_lean_parser_tokens___rarg(x_20);
x_22 = l_lean_parser_tokens___rarg(x_21);
x_23 = l_lean_parser_list_cons_tokens___rarg(x_22, x_5);
x_24 = l_lean_parser_list_cons_tokens___rarg(x_1, x_23);
x_25 = l_lean_parser_tokens___rarg(x_24);
return x_25;
}
}
obj* _init_l_lean_parser_term_binders__ext_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_2; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__ident_parser), 5, 0);
lean::inc(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser_lean_parser_has__tokens___spec__1), 6, 1);
lean::closure_set(x_2, 0, x_0);
x_3 = lean::mk_string(":");
x_4 = l_string_trim(x_3);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::mk_nat_obj(0u);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_8, 0, x_4);
lean::closure_set(x_8, 1, x_7);
lean::closure_set(x_8, 2, x_6);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_9);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_8);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_lean_parser_term_binders__types;
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_14, 0, x_13);
lean::closure_set(x_14, 1, x_12);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_0);
lean::cnstr_set(x_15, 1, x_10);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_15);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_18, 0, x_17);
lean::closure_set(x_18, 1, x_7);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_10);
x_20 = l_lean_parser_term_mixed__binder;
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_21, 0, x_20);
lean::closure_set(x_21, 1, x_19);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many1___at_lean_parser_command_notation__spec_parser_lean_parser_has__tokens___spec__2), 6, 1);
lean::closure_set(x_22, 0, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_10);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_14);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_25, 0, x_24);
lean::closure_set(x_25, 1, x_7);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_10);
x_27 = l_lean_parser_term_binders__remainder;
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_28, 0, x_27);
lean::closure_set(x_28, 1, x_26);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_29, 0, x_28);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_10);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_2);
lean::cnstr_set(x_31, 1, x_30);
x_32 = l_lean_parser_term__parser__m_monad;
x_33 = l_lean_parser_term__parser__m_monad__except;
x_34 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_35 = l_lean_parser_term__parser__m_alternative;
x_36 = l_lean_parser_term_binders__ext;
x_37 = l_lean_parser_term_binders__ext_has__view;
x_38 = l_lean_parser_combinators_node_view___rarg(x_32, x_33, x_34, x_35, x_36, x_31, x_37);
return x_38;
}
}
obj* _init_l_lean_parser_term_binders__ext_parser___closed__1() {
_start:
{
obj* x_0; obj* x_2; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binder__ident_parser), 5, 0);
lean::inc(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser_lean_parser_has__tokens___spec__1), 6, 1);
lean::closure_set(x_2, 0, x_0);
x_3 = lean::mk_string(":");
x_4 = l_string_trim(x_3);
lean::inc(x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::mk_nat_obj(0u);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_8, 0, x_4);
lean::closure_set(x_8, 1, x_7);
lean::closure_set(x_8, 2, x_6);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_9);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_8);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_lean_parser_term_binders__types;
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_14, 0, x_13);
lean::closure_set(x_14, 1, x_12);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_0);
lean::cnstr_set(x_15, 1, x_10);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_15);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_18, 0, x_17);
lean::closure_set(x_18, 1, x_7);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_10);
x_20 = l_lean_parser_term_mixed__binder;
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_21, 0, x_20);
lean::closure_set(x_21, 1, x_19);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many1___at_lean_parser_command_notation__spec_parser_lean_parser_has__tokens___spec__2), 6, 1);
lean::closure_set(x_22, 0, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_10);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_14);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_25, 0, x_24);
lean::closure_set(x_25, 1, x_7);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_10);
x_27 = l_lean_parser_term_binders__remainder;
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_28, 0, x_27);
lean::closure_set(x_28, 1, x_26);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_29, 0, x_28);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_10);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_2);
lean::cnstr_set(x_31, 1, x_30);
return x_31;
}
}
obj* l_lean_parser_term_binders__ext_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_binders__ext;
x_6 = l_lean_parser_term_binders__ext_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_binders() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binders");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; obj* x_9; obj* x_12; obj* x_13; 
x_8 = l_lean_parser_term_simple__binder_has__view;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_0);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
else
{
obj* x_14; obj* x_15; obj* x_18; obj* x_19; 
x_14 = l_lean_parser_term_binders__ext_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_0);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
}
}
obj* _init_l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binders");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_binders_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__2;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; obj* x_69; obj* x_72; obj* x_73; 
x_68 = l_lean_parser_term_simple__binder_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_1);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
else
{
obj* x_74; obj* x_75; obj* x_78; obj* x_79; 
x_74 = l_lean_parser_term_binders__ext_has__view;
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
lean::dec(x_74);
x_78 = lean::apply_1(x_75, x_1);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
}
}
obj* l_lean_parser_term_binders_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_binders__ext_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_lean_parser_term_binders;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_lean_parser_term_simple__binder_has__view;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_26 = l_lean_parser_syntax_mk__node(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_lean_parser_term_binders;
x_29 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_lean_parser_term_binders_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_binders_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_binders_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_binders_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = l_lean_parser_term_simple__binder_parser_lean_parser_has__tokens;
x_2 = l_lean_parser_list_cons_tokens___rarg(x_1, x_0);
x_3 = l_lean_parser_term_binders__ext_parser_lean_parser_has__tokens;
x_4 = l_lean_parser_list_cons_tokens___rarg(x_3, x_2);
x_5 = l_lean_parser_tokens___rarg(x_4);
x_6 = l_lean_parser_list_cons_tokens___rarg(x_5, x_0);
x_7 = l_lean_parser_tokens___rarg(x_6);
return x_7;
}
}
obj* _init_l_lean_parser_term_binders_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__binder_parser), 5, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__ext_parser), 5, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_6, 0, x_4);
lean::closure_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
x_8 = l_lean_parser_term__parser__m_monad;
x_9 = l_lean_parser_term__parser__m_monad__except;
x_10 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_11 = l_lean_parser_term__parser__m_alternative;
x_12 = l_lean_parser_term_binders;
x_13 = l_lean_parser_term_binders_has__view;
x_14 = l_lean_parser_combinators_node_view___rarg(x_8, x_9, x_10, x_11, x_12, x_7, x_13);
return x_14;
}
}
obj* _init_l_lean_parser_term_binders_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__binder_parser), 5, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders__ext_parser), 5, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_6, 0, x_4);
lean::closure_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
return x_7;
}
}
obj* l_lean_parser_term_binders_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_binders;
x_6 = l_lean_parser_term_binders_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_bracketed__binders() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("bracketed_binders");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = l_lean_parser_term_simple__binder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_simple__binder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = l_lean_parser_term_bracketed__binder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_bracketed__binder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; 
x_8 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_9; 
x_9 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__1;
return x_9;
}
else
{
obj* x_10; obj* x_13; obj* x_16; obj* x_17; obj* x_18; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
lean::dec(x_10);
x_16 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__2;
x_17 = l_list_map___main___rarg(x_16, x_13);
x_18 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_18, 0, x_17);
return x_18;
}
}
else
{
obj* x_19; 
x_19 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_19) == 0)
{
obj* x_20; 
x_20 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__3;
return x_20;
}
else
{
obj* x_21; obj* x_24; obj* x_27; obj* x_28; obj* x_29; 
x_21 = lean::cnstr_get(x_19, 0);
lean::inc(x_21);
lean::dec(x_19);
x_24 = lean::cnstr_get(x_21, 1);
lean::inc(x_24);
lean::dec(x_21);
x_27 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4;
x_28 = l_list_map___main___rarg(x_27, x_24);
x_29 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_29, 0, x_28);
return x_29;
}
}
}
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__6() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("bracketed_binders");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__6;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; 
x_68 = l_lean_parser_syntax_as__node___main(x_1);
if (lean::obj_tag(x_68) == 0)
{
obj* x_69; 
x_69 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__1;
return x_69;
}
else
{
obj* x_70; obj* x_73; obj* x_76; obj* x_77; obj* x_78; 
x_70 = lean::cnstr_get(x_68, 0);
lean::inc(x_70);
lean::dec(x_68);
x_73 = lean::cnstr_get(x_70, 1);
lean::inc(x_73);
lean::dec(x_70);
x_76 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__2;
x_77 = l_list_map___main___rarg(x_76, x_73);
x_78 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_78, 0, x_77);
return x_78;
}
}
else
{
obj* x_79; 
x_79 = l_lean_parser_syntax_as__node___main(x_1);
if (lean::obj_tag(x_79) == 0)
{
obj* x_80; 
x_80 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__3;
return x_80;
}
else
{
obj* x_81; obj* x_84; obj* x_87; obj* x_88; obj* x_89; 
x_81 = lean::cnstr_get(x_79, 0);
lean::inc(x_81);
lean::dec(x_79);
x_84 = lean::cnstr_get(x_81, 1);
lean::inc(x_84);
lean::dec(x_81);
x_87 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4;
x_88 = l_list_map___main___rarg(x_87, x_84);
x_89 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_89, 0, x_88);
return x_89;
}
}
}
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_bracketed__binder_has__view;
x_1 = lean::cnstr_get(x_0, 1);
lean::inc(x_1);
lean::dec(x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_lean_parser_term_simple__binder_has__view;
x_1 = lean::cnstr_get(x_0, 1);
lean::inc(x_1);
lean::dec(x_0);
return x_1;
}
}
obj* l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__1;
x_6 = l_list_map___main___rarg(x_5, x_2);
x_7 = l_lean_parser_no__kind;
x_8 = l_lean_parser_syntax_mk__node(x_7, x_6);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_1);
x_10 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_11 = l_lean_parser_syntax_mk__node(x_10, x_9);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_1);
x_13 = l_lean_parser_term_bracketed__binders;
x_14 = l_lean_parser_syntax_mk__node(x_13, x_12);
return x_14;
}
else
{
obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_15 = lean::cnstr_get(x_0, 0);
lean::inc(x_15);
lean::dec(x_0);
x_18 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__2;
x_19 = l_list_map___main___rarg(x_18, x_15);
x_20 = l_lean_parser_no__kind;
x_21 = l_lean_parser_syntax_mk__node(x_20, x_19);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_1);
x_23 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_24 = l_lean_parser_syntax_mk__node(x_23, x_22);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_1);
x_26 = l_lean_parser_term_bracketed__binders;
x_27 = l_lean_parser_syntax_mk__node(x_26, x_25);
return x_27;
}
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_bracketed__binders_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens;
x_1 = l_lean_parser_tokens___rarg(x_0);
x_2 = l_lean_parser_term_simple__binder_parser_lean_parser_has__tokens;
x_3 = l_lean_parser_tokens___rarg(x_2);
x_4 = lean::box(0);
x_5 = l_lean_parser_list_cons_tokens___rarg(x_3, x_4);
x_6 = l_lean_parser_list_cons_tokens___rarg(x_1, x_5);
x_7 = l_lean_parser_tokens___rarg(x_6);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_7, x_4);
x_9 = l_lean_parser_tokens___rarg(x_8);
return x_9;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser_lean_parser_has__tokens___spec__1), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__binder_parser), 5, 0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser_lean_parser_has__tokens___spec__1), 6, 1);
lean::closure_set(x_3, 0, x_2);
x_4 = lean::box(0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_3);
lean::cnstr_set(x_5, 1, x_4);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_1);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_nat_obj(0u);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_8, 0, x_6);
lean::closure_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_4);
x_10 = l_lean_parser_term__parser__m_monad;
x_11 = l_lean_parser_term__parser__m_monad__except;
x_12 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_13 = l_lean_parser_term__parser__m_alternative;
x_14 = l_lean_parser_term_bracketed__binders;
x_15 = l_lean_parser_term_bracketed__binders_has__view;
x_16 = l_lean_parser_combinators_node_view___rarg(x_10, x_11, x_12, x_13, x_14, x_9, x_15);
return x_16;
}
}
obj* _init_l_lean_parser_term_bracketed__binders_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser_lean_parser_has__tokens___spec__1), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_simple__binder_parser), 5, 0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser_lean_parser_has__tokens___spec__1), 6, 1);
lean::closure_set(x_3, 0, x_2);
x_4 = lean::box(0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_3);
lean::cnstr_set(x_5, 1, x_4);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_1);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::mk_nat_obj(0u);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_8, 0, x_6);
lean::closure_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_4);
return x_9;
}
}
obj* l_lean_parser_term_bracketed__binders_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_bracketed__binders;
x_6 = l_lean_parser_term_bracketed__binders_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_lambda() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("lambda");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_lambda_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_8; 
x_8 = lean::box(3);
x_5 = x_0;
x_6 = x_8;
goto lbl_7;
}
else
{
obj* x_9; obj* x_11; 
x_9 = lean::cnstr_get(x_0, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 1);
lean::inc(x_11);
lean::dec(x_0);
x_5 = x_11;
x_6 = x_9;
goto lbl_7;
}
lbl_7:
{
obj* x_14; obj* x_15; obj* x_18; 
x_14 = l_lean_parser_term_binders_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_6);
if (lean::obj_tag(x_5) == 0)
{
obj* x_19; 
x_19 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
obj* x_20; obj* x_21; 
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_21, 0, x_1);
lean::cnstr_set(x_21, 1, x_18);
lean::cnstr_set(x_21, 2, x_19);
lean::cnstr_set(x_21, 3, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_5, 0);
lean::inc(x_22);
lean::dec(x_5);
x_25 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_25, 0, x_1);
lean::cnstr_set(x_25, 1, x_18);
lean::cnstr_set(x_25, 2, x_19);
lean::cnstr_set(x_25, 3, x_22);
return x_25;
}
}
else
{
obj* x_26; obj* x_28; 
x_26 = lean::cnstr_get(x_5, 0);
lean::inc(x_26);
x_28 = lean::cnstr_get(x_5, 1);
lean::inc(x_28);
lean::dec(x_5);
switch (lean::obj_tag(x_26)) {
case 0:
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_26, 0);
lean::inc(x_31);
lean::dec(x_26);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_31);
if (lean::obj_tag(x_28) == 0)
{
obj* x_35; obj* x_36; 
x_35 = lean::box(3);
x_36 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_36, 0, x_1);
lean::cnstr_set(x_36, 1, x_18);
lean::cnstr_set(x_36, 2, x_34);
lean::cnstr_set(x_36, 3, x_35);
return x_36;
}
else
{
obj* x_37; obj* x_40; 
x_37 = lean::cnstr_get(x_28, 0);
lean::inc(x_37);
lean::dec(x_28);
x_40 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_40, 0, x_1);
lean::cnstr_set(x_40, 1, x_18);
lean::cnstr_set(x_40, 2, x_34);
lean::cnstr_set(x_40, 3, x_37);
return x_40;
}
}
case 3:
{
obj* x_41; 
x_41 = lean::box(0);
if (lean::obj_tag(x_28) == 0)
{
obj* x_42; obj* x_43; 
x_42 = lean::box(3);
x_43 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_43, 0, x_1);
lean::cnstr_set(x_43, 1, x_18);
lean::cnstr_set(x_43, 2, x_41);
lean::cnstr_set(x_43, 3, x_42);
return x_43;
}
else
{
obj* x_44; obj* x_47; 
x_44 = lean::cnstr_get(x_28, 0);
lean::inc(x_44);
lean::dec(x_28);
x_47 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_47, 0, x_1);
lean::cnstr_set(x_47, 1, x_18);
lean::cnstr_set(x_47, 2, x_41);
lean::cnstr_set(x_47, 3, x_44);
return x_47;
}
}
default:
{
obj* x_49; 
lean::dec(x_26);
x_49 = lean::box(0);
if (lean::obj_tag(x_28) == 0)
{
obj* x_50; obj* x_51; 
x_50 = lean::box(3);
x_51 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_51, 0, x_1);
lean::cnstr_set(x_51, 1, x_18);
lean::cnstr_set(x_51, 2, x_49);
lean::cnstr_set(x_51, 3, x_50);
return x_51;
}
else
{
obj* x_52; obj* x_55; 
x_52 = lean::cnstr_get(x_28, 0);
lean::inc(x_52);
lean::dec(x_28);
x_55 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_55, 0, x_1);
lean::cnstr_set(x_55, 1, x_18);
lean::cnstr_set(x_55, 2, x_49);
lean::cnstr_set(x_55, 3, x_52);
return x_55;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_lambda_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_lambda_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; obj* x_19; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_21; 
x_21 = lean::box(3);
x_18 = x_1;
x_19 = x_21;
goto lbl_20;
}
else
{
obj* x_22; obj* x_24; 
x_22 = lean::cnstr_get(x_1, 0);
lean::inc(x_22);
x_24 = lean::cnstr_get(x_1, 1);
lean::inc(x_24);
lean::dec(x_1);
x_18 = x_24;
x_19 = x_22;
goto lbl_20;
}
lbl_20:
{
obj* x_27; obj* x_28; obj* x_31; 
x_27 = l_lean_parser_term_binders_has__view;
x_28 = lean::cnstr_get(x_27, 0);
lean::inc(x_28);
lean::dec(x_27);
x_31 = lean::apply_1(x_28, x_19);
if (lean::obj_tag(x_18) == 0)
{
obj* x_32; 
x_32 = lean::box(0);
if (lean::obj_tag(x_18) == 0)
{
obj* x_33; obj* x_34; 
x_33 = lean::box(3);
x_34 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_34, 0, x_2);
lean::cnstr_set(x_34, 1, x_31);
lean::cnstr_set(x_34, 2, x_32);
lean::cnstr_set(x_34, 3, x_33);
return x_34;
}
else
{
obj* x_35; obj* x_38; 
x_35 = lean::cnstr_get(x_18, 0);
lean::inc(x_35);
lean::dec(x_18);
x_38 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_38, 0, x_2);
lean::cnstr_set(x_38, 1, x_31);
lean::cnstr_set(x_38, 2, x_32);
lean::cnstr_set(x_38, 3, x_35);
return x_38;
}
}
else
{
obj* x_39; obj* x_41; 
x_39 = lean::cnstr_get(x_18, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_18, 1);
lean::inc(x_41);
lean::dec(x_18);
switch (lean::obj_tag(x_39)) {
case 0:
{
obj* x_44; obj* x_47; 
x_44 = lean::cnstr_get(x_39, 0);
lean::inc(x_44);
lean::dec(x_39);
x_47 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_47, 0, x_44);
if (lean::obj_tag(x_41) == 0)
{
obj* x_48; obj* x_49; 
x_48 = lean::box(3);
x_49 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_49, 0, x_2);
lean::cnstr_set(x_49, 1, x_31);
lean::cnstr_set(x_49, 2, x_47);
lean::cnstr_set(x_49, 3, x_48);
return x_49;
}
else
{
obj* x_50; obj* x_53; 
x_50 = lean::cnstr_get(x_41, 0);
lean::inc(x_50);
lean::dec(x_41);
x_53 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_53, 0, x_2);
lean::cnstr_set(x_53, 1, x_31);
lean::cnstr_set(x_53, 2, x_47);
lean::cnstr_set(x_53, 3, x_50);
return x_53;
}
}
case 3:
{
obj* x_54; 
x_54 = lean::box(0);
if (lean::obj_tag(x_41) == 0)
{
obj* x_55; obj* x_56; 
x_55 = lean::box(3);
x_56 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_56, 0, x_2);
lean::cnstr_set(x_56, 1, x_31);
lean::cnstr_set(x_56, 2, x_54);
lean::cnstr_set(x_56, 3, x_55);
return x_56;
}
else
{
obj* x_57; obj* x_60; 
x_57 = lean::cnstr_get(x_41, 0);
lean::inc(x_57);
lean::dec(x_41);
x_60 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_60, 0, x_2);
lean::cnstr_set(x_60, 1, x_31);
lean::cnstr_set(x_60, 2, x_54);
lean::cnstr_set(x_60, 3, x_57);
return x_60;
}
}
default:
{
obj* x_62; 
lean::dec(x_39);
x_62 = lean::box(0);
if (lean::obj_tag(x_41) == 0)
{
obj* x_63; obj* x_64; 
x_63 = lean::box(3);
x_64 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_64, 0, x_2);
lean::cnstr_set(x_64, 1, x_31);
lean::cnstr_set(x_64, 2, x_62);
lean::cnstr_set(x_64, 3, x_63);
return x_64;
}
else
{
obj* x_65; obj* x_68; 
x_65 = lean::cnstr_get(x_41, 0);
lean::inc(x_65);
lean::dec(x_41);
x_68 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_68, 0, x_2);
lean::cnstr_set(x_68, 1, x_31);
lean::cnstr_set(x_68, 2, x_62);
lean::cnstr_set(x_68, 3, x_65);
return x_68;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_lambda_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_10; obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
lean::dec(x_0);
x_10 = l_lean_parser_term_binders_has__view;
x_11 = lean::cnstr_get(x_10, 1);
lean::inc(x_11);
lean::dec(x_10);
x_14 = lean::apply_1(x_11, x_3);
x_15 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_16 = l_option_map___rarg(x_15, x_5);
x_17 = lean::box(3);
x_18 = l_option_get__or__else___main___rarg(x_16, x_17);
x_19 = lean::box(0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_7);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_18);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_14);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_1);
lean::cnstr_set(x_23, 1, x_22);
x_24 = l_lean_parser_term_lambda;
x_25 = l_lean_parser_syntax_mk__node(x_24, x_23);
return x_25;
}
}
obj* _init_l_lean_parser_term_lambda_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_lambda_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_lambda_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_lambda_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_lambda_has__view_x_27;
return x_0;
}
}
obj* l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser_lean_parser_has__tokens___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_10; obj* x_12; obj* x_14; obj* x_15; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
lean::dec(x_5);
lean::dec(x_3);
x_10 = l_string_trim(x_0);
lean::inc(x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_12, 0, x_10);
lean::inc(x_2);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol_lean_parser_has__tokens___spec__1), 6, 3);
lean::closure_set(x_14, 0, x_10);
lean::closure_set(x_14, 1, x_2);
lean::closure_set(x_14, 2, x_12);
x_15 = l_string_trim(x_1);
lean::inc(x_15);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_17, 0, x_15);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol_lean_parser_has__tokens___spec__1), 6, 3);
lean::closure_set(x_18, 0, x_15);
lean::closure_set(x_18, 1, x_2);
lean::closure_set(x_18, 2, x_17);
x_19 = lean::box(0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_18);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_14);
lean::cnstr_set(x_21, 1, x_20);
x_22 = l_lean_parser_combinators_any__of___at_lean_parser_unicode__symbol_lean_parser_has__tokens___spec__2(x_21, x_4, x_6, x_7);
return x_22;
}
}
obj* _init_l_lean_parser_term_lambda_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_0 = lean::mk_string("\xce\xbb");
x_1 = lean::mk_string("fun");
x_2 = l_lean_parser_max__prec;
x_3 = l_lean_parser_unicode__symbol_lean_parser_has__tokens___rarg(x_0, x_1, x_2);
x_4 = lean::mk_string(",");
x_5 = lean::mk_nat_obj(0u);
x_6 = l_lean_parser_symbol_tokens___rarg(x_4, x_5);
x_7 = lean::box(0);
x_8 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_9 = l_lean_parser_list_cons_tokens___rarg(x_8, x_7);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_6, x_9);
x_11 = l_lean_parser_term_binders_parser_lean_parser_has__tokens;
x_12 = l_lean_parser_list_cons_tokens___rarg(x_11, x_10);
x_13 = l_lean_parser_list_cons_tokens___rarg(x_3, x_12);
x_14 = l_lean_parser_tokens___rarg(x_13);
return x_14;
}
}
obj* _init_l_lean_parser_term_lambda_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_0 = lean::mk_string("\xce\xbb");
x_1 = lean::mk_string("fun");
x_2 = l_lean_parser_max__prec;
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
lean::closure_set(x_3, 2, x_2);
x_4 = lean::mk_string(",");
x_5 = l_string_trim(x_4);
lean::inc(x_5);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::mk_nat_obj(0u);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_9, 0, x_5);
lean::closure_set(x_9, 1, x_8);
lean::closure_set(x_9, 2, x_7);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_9);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_parser), 5, 0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_13);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_3);
lean::cnstr_set(x_16, 1, x_15);
x_17 = l_lean_parser_term__parser__m_monad;
x_18 = l_lean_parser_term__parser__m_monad__except;
x_19 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_20 = l_lean_parser_term__parser__m_alternative;
x_21 = l_lean_parser_term_lambda;
x_22 = l_lean_parser_term_lambda_has__view;
x_23 = l_lean_parser_combinators_node_view___rarg(x_17, x_18, x_19, x_20, x_21, x_16, x_22);
return x_23;
}
}
obj* _init_l_lean_parser_term_lambda_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_0 = lean::mk_string("\xce\xbb");
x_1 = lean::mk_string("fun");
x_2 = l_lean_parser_max__prec;
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
lean::closure_set(x_3, 2, x_2);
x_4 = lean::mk_string(",");
x_5 = l_string_trim(x_4);
lean::inc(x_5);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::mk_nat_obj(0u);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_9, 0, x_5);
lean::closure_set(x_9, 1, x_8);
lean::closure_set(x_9, 2, x_7);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_9);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_parser), 5, 0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_13);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_3);
lean::cnstr_set(x_16, 1, x_15);
return x_16;
}
}
obj* l_lean_parser_term_lambda_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_lambda;
x_6 = l_lean_parser_term_lambda_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_assume__anonymous() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("assume_anonymous");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
lean::dec(x_5);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
x_10 = l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1;
return x_10;
}
else
{
obj* x_11; obj* x_14; obj* x_15; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
lean::dec(x_6);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_11);
return x_15;
}
}
else
{
obj* x_16; obj* x_18; 
x_16 = lean::cnstr_get(x_6, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_6, 1);
lean::inc(x_18);
lean::dec(x_6);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_21; obj* x_24; 
x_21 = lean::cnstr_get(x_16, 0);
lean::inc(x_21);
lean::dec(x_16);
if (lean::is_scalar(x_5)) {
 x_24 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_24 = x_5;
}
lean::cnstr_set(x_24, 0, x_21);
if (lean::obj_tag(x_18) == 0)
{
obj* x_25; obj* x_26; 
x_25 = lean::box(3);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_30; 
x_27 = lean::cnstr_get(x_18, 0);
lean::inc(x_27);
lean::dec(x_18);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_24);
lean::cnstr_set(x_30, 1, x_27);
return x_30;
}
}
case 3:
{
lean::dec(x_5);
if (lean::obj_tag(x_18) == 0)
{
obj* x_32; 
x_32 = l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1;
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_18, 0);
lean::inc(x_33);
lean::dec(x_18);
x_36 = lean::box(0);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_33);
return x_37;
}
}
default:
{
lean::dec(x_5);
lean::dec(x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_40; 
x_40 = l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1;
return x_40;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_18, 0);
lean::inc(x_41);
lean::dec(x_18);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
}
}
}
}
}
obj* l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_7 = l_option_map___rarg(x_6, x_1);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_3);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_9);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_lean_parser_term_assume__anonymous;
x_14 = l_lean_parser_syntax_mk__node(x_13, x_12);
return x_14;
}
}
obj* _init_l_lean_parser_term_assume__anonymous_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_assume__anonymous_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_assume__anonymous_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_assume__binders() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("assume_binders");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; obj* x_9; obj* x_12; obj* x_13; 
x_8 = l_lean_parser_term_binders_has__view;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_0);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
else
{
obj* x_14; obj* x_15; obj* x_18; obj* x_19; 
x_14 = l_lean_parser_term_assume__anonymous_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_0);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
}
}
obj* _init_l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("assume_binders");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_assume__binders_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__2;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; obj* x_69; obj* x_72; obj* x_73; 
x_68 = l_lean_parser_term_binders_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_1);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
else
{
obj* x_74; obj* x_75; obj* x_78; obj* x_79; 
x_74 = l_lean_parser_term_assume__anonymous_has__view;
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
lean::dec(x_74);
x_78 = lean::apply_1(x_75, x_1);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
}
}
obj* l_lean_parser_term_assume__binders_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_assume__anonymous_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_lean_parser_term_assume__binders;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_lean_parser_term_binders_has__view;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_26 = l_lean_parser_syntax_mk__node(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_lean_parser_term_assume__binders;
x_29 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_lean_parser_term_assume__binders_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_assume__binders_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_assume__binders_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_assume__binders_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_assume__binders_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_assume() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("assume");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_assume_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = lean::box(3);
x_14 = x_0;
x_15 = x_17;
goto lbl_16;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
x_14 = x_20;
x_15 = x_18;
goto lbl_16;
}
lbl_16:
{
obj* x_23; obj* x_24; obj* x_27; 
x_23 = l_lean_parser_term_assume__binders_has__view;
x_24 = lean::cnstr_get(x_23, 0);
lean::inc(x_24);
lean::dec(x_23);
x_27 = lean::apply_1(x_24, x_15);
if (lean::obj_tag(x_14) == 0)
{
obj* x_28; 
x_28 = lean::box(0);
if (lean::obj_tag(x_14) == 0)
{
obj* x_29; obj* x_30; 
x_29 = lean::box(3);
x_30 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_30, 0, x_5);
lean::cnstr_set(x_30, 1, x_27);
lean::cnstr_set(x_30, 2, x_28);
lean::cnstr_set(x_30, 3, x_29);
return x_30;
}
else
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_14, 0);
lean::inc(x_31);
lean::dec(x_14);
x_34 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_34, 0, x_5);
lean::cnstr_set(x_34, 1, x_27);
lean::cnstr_set(x_34, 2, x_28);
lean::cnstr_set(x_34, 3, x_31);
return x_34;
}
}
else
{
obj* x_35; obj* x_37; 
x_35 = lean::cnstr_get(x_14, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_14, 1);
lean::inc(x_37);
lean::dec(x_14);
switch (lean::obj_tag(x_35)) {
case 0:
{
obj* x_40; obj* x_43; 
x_40 = lean::cnstr_get(x_35, 0);
lean::inc(x_40);
lean::dec(x_35);
x_43 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_43, 0, x_40);
if (lean::obj_tag(x_37) == 0)
{
obj* x_44; obj* x_45; 
x_44 = lean::box(3);
x_45 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_45, 0, x_5);
lean::cnstr_set(x_45, 1, x_27);
lean::cnstr_set(x_45, 2, x_43);
lean::cnstr_set(x_45, 3, x_44);
return x_45;
}
else
{
obj* x_46; obj* x_49; 
x_46 = lean::cnstr_get(x_37, 0);
lean::inc(x_46);
lean::dec(x_37);
x_49 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_49, 0, x_5);
lean::cnstr_set(x_49, 1, x_27);
lean::cnstr_set(x_49, 2, x_43);
lean::cnstr_set(x_49, 3, x_46);
return x_49;
}
}
case 3:
{
obj* x_50; 
x_50 = lean::box(0);
if (lean::obj_tag(x_37) == 0)
{
obj* x_51; obj* x_52; 
x_51 = lean::box(3);
x_52 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_52, 0, x_5);
lean::cnstr_set(x_52, 1, x_27);
lean::cnstr_set(x_52, 2, x_50);
lean::cnstr_set(x_52, 3, x_51);
return x_52;
}
else
{
obj* x_53; obj* x_56; 
x_53 = lean::cnstr_get(x_37, 0);
lean::inc(x_53);
lean::dec(x_37);
x_56 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_56, 0, x_5);
lean::cnstr_set(x_56, 1, x_27);
lean::cnstr_set(x_56, 2, x_50);
lean::cnstr_set(x_56, 3, x_53);
return x_56;
}
}
default:
{
obj* x_58; 
lean::dec(x_35);
x_58 = lean::box(0);
if (lean::obj_tag(x_37) == 0)
{
obj* x_59; obj* x_60; 
x_59 = lean::box(3);
x_60 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_60, 0, x_5);
lean::cnstr_set(x_60, 1, x_27);
lean::cnstr_set(x_60, 2, x_58);
lean::cnstr_set(x_60, 3, x_59);
return x_60;
}
else
{
obj* x_61; obj* x_64; 
x_61 = lean::cnstr_get(x_37, 0);
lean::inc(x_61);
lean::dec(x_37);
x_64 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_64, 0, x_5);
lean::cnstr_set(x_64, 1, x_27);
lean::cnstr_set(x_64, 2, x_58);
lean::cnstr_set(x_64, 3, x_61);
return x_64;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_assume_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_assume_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; obj* x_37; obj* x_40; 
x_36 = l_lean_parser_term_assume__binders_has__view;
x_37 = lean::cnstr_get(x_36, 0);
lean::inc(x_37);
lean::dec(x_36);
x_40 = lean::apply_1(x_37, x_28);
if (lean::obj_tag(x_27) == 0)
{
obj* x_41; 
x_41 = lean::box(0);
if (lean::obj_tag(x_27) == 0)
{
obj* x_42; obj* x_43; 
x_42 = lean::box(3);
x_43 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_43, 0, x_18);
lean::cnstr_set(x_43, 1, x_40);
lean::cnstr_set(x_43, 2, x_41);
lean::cnstr_set(x_43, 3, x_42);
return x_43;
}
else
{
obj* x_44; obj* x_47; 
x_44 = lean::cnstr_get(x_27, 0);
lean::inc(x_44);
lean::dec(x_27);
x_47 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_47, 0, x_18);
lean::cnstr_set(x_47, 1, x_40);
lean::cnstr_set(x_47, 2, x_41);
lean::cnstr_set(x_47, 3, x_44);
return x_47;
}
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_27, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_27, 1);
lean::inc(x_50);
lean::dec(x_27);
switch (lean::obj_tag(x_48)) {
case 0:
{
obj* x_53; obj* x_56; 
x_53 = lean::cnstr_get(x_48, 0);
lean::inc(x_53);
lean::dec(x_48);
x_56 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_56, 0, x_53);
if (lean::obj_tag(x_50) == 0)
{
obj* x_57; obj* x_58; 
x_57 = lean::box(3);
x_58 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_58, 0, x_18);
lean::cnstr_set(x_58, 1, x_40);
lean::cnstr_set(x_58, 2, x_56);
lean::cnstr_set(x_58, 3, x_57);
return x_58;
}
else
{
obj* x_59; obj* x_62; 
x_59 = lean::cnstr_get(x_50, 0);
lean::inc(x_59);
lean::dec(x_50);
x_62 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_62, 0, x_18);
lean::cnstr_set(x_62, 1, x_40);
lean::cnstr_set(x_62, 2, x_56);
lean::cnstr_set(x_62, 3, x_59);
return x_62;
}
}
case 3:
{
obj* x_63; 
x_63 = lean::box(0);
if (lean::obj_tag(x_50) == 0)
{
obj* x_64; obj* x_65; 
x_64 = lean::box(3);
x_65 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_65, 0, x_18);
lean::cnstr_set(x_65, 1, x_40);
lean::cnstr_set(x_65, 2, x_63);
lean::cnstr_set(x_65, 3, x_64);
return x_65;
}
else
{
obj* x_66; obj* x_69; 
x_66 = lean::cnstr_get(x_50, 0);
lean::inc(x_66);
lean::dec(x_50);
x_69 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_69, 0, x_18);
lean::cnstr_set(x_69, 1, x_40);
lean::cnstr_set(x_69, 2, x_63);
lean::cnstr_set(x_69, 3, x_66);
return x_69;
}
}
default:
{
obj* x_71; 
lean::dec(x_48);
x_71 = lean::box(0);
if (lean::obj_tag(x_50) == 0)
{
obj* x_72; obj* x_73; 
x_72 = lean::box(3);
x_73 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_73, 0, x_18);
lean::cnstr_set(x_73, 1, x_40);
lean::cnstr_set(x_73, 2, x_71);
lean::cnstr_set(x_73, 3, x_72);
return x_73;
}
else
{
obj* x_74; obj* x_77; 
x_74 = lean::cnstr_get(x_50, 0);
lean::inc(x_74);
lean::dec(x_50);
x_77 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_77, 0, x_18);
lean::cnstr_set(x_77, 1, x_40);
lean::cnstr_set(x_77, 2, x_71);
lean::cnstr_set(x_77, 3, x_74);
return x_77;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_assume_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
lean::dec(x_0);
x_10 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_11 = l_option_map___rarg(x_10, x_1);
x_12 = lean::box(3);
x_13 = l_option_get__or__else___main___rarg(x_11, x_12);
x_14 = l_lean_parser_term_assume__binders_has__view;
x_15 = lean::cnstr_get(x_14, 1);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_3);
x_19 = l_option_map___rarg(x_10, x_5);
x_20 = l_option_get__or__else___main___rarg(x_19, x_12);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_7);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_20);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_18);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_13);
lean::cnstr_set(x_25, 1, x_24);
x_26 = l_lean_parser_term_assume;
x_27 = l_lean_parser_syntax_mk__node(x_26, x_25);
return x_27;
}
}
obj* _init_l_lean_parser_term_assume_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_assume_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_assume_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_assume_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_assume_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_assume_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_0 = lean::mk_string("assume ");
x_1 = l_lean_parser_max__prec;
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::mk_string(": ");
x_4 = lean::mk_nat_obj(0u);
x_5 = l_lean_parser_symbol_tokens___rarg(x_3, x_4);
x_6 = lean::box(0);
x_7 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_8 = l_lean_parser_list_cons_tokens___rarg(x_7, x_6);
lean::inc(x_8);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_5, x_8);
x_11 = l_lean_parser_tokens___rarg(x_10);
x_12 = l_lean_parser_term_binders_parser_lean_parser_has__tokens;
x_13 = l_lean_parser_list_cons_tokens___rarg(x_12, x_6);
x_14 = l_lean_parser_list_cons_tokens___rarg(x_11, x_13);
x_15 = l_lean_parser_tokens___rarg(x_14);
x_16 = l_lean_parser_list_cons_tokens___rarg(x_15, x_6);
x_17 = l_lean_parser_tokens___rarg(x_16);
x_18 = lean::mk_string(", ");
x_19 = l_lean_parser_symbol_tokens___rarg(x_18, x_4);
x_20 = l_lean_parser_list_cons_tokens___rarg(x_19, x_8);
x_21 = l_lean_parser_list_cons_tokens___rarg(x_17, x_20);
x_22 = l_lean_parser_list_cons_tokens___rarg(x_2, x_21);
x_23 = l_lean_parser_tokens___rarg(x_22);
return x_23;
}
}
obj* _init_l_lean_parser_term_assume_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; 
x_0 = lean::mk_string("assume ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_string(": ");
x_7 = l_string_trim(x_6);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::mk_nat_obj(0u);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_7);
lean::closure_set(x_11, 1, x_10);
lean::closure_set(x_11, 2, x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_12, 0, x_10);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
lean::inc(x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_11);
lean::cnstr_set(x_16, 1, x_14);
x_17 = l_lean_parser_term_assume__anonymous;
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_18, 0, x_17);
lean::closure_set(x_18, 1, x_16);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_parser), 5, 0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_13);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_18);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_22, 0, x_21);
lean::closure_set(x_22, 1, x_10);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_13);
x_24 = l_lean_parser_term_assume__binders;
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_25, 0, x_24);
lean::closure_set(x_25, 1, x_23);
x_26 = lean::mk_string(", ");
x_27 = l_string_trim(x_26);
lean::inc(x_27);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_29, 0, x_27);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_30, 0, x_27);
lean::closure_set(x_30, 1, x_10);
lean::closure_set(x_30, 2, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_14);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_25);
lean::cnstr_set(x_32, 1, x_31);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_5);
lean::cnstr_set(x_33, 1, x_32);
x_34 = l_lean_parser_term__parser__m_monad;
x_35 = l_lean_parser_term__parser__m_monad__except;
x_36 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_37 = l_lean_parser_term__parser__m_alternative;
x_38 = l_lean_parser_term_assume;
x_39 = l_lean_parser_term_assume_has__view;
x_40 = l_lean_parser_combinators_node_view___rarg(x_34, x_35, x_36, x_37, x_38, x_33, x_39);
return x_40;
}
}
obj* _init_l_lean_parser_term_assume_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_0 = lean::mk_string("assume ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_string(": ");
x_7 = l_string_trim(x_6);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::mk_nat_obj(0u);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_7);
lean::closure_set(x_11, 1, x_10);
lean::closure_set(x_11, 2, x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_12, 0, x_10);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
lean::inc(x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_11);
lean::cnstr_set(x_16, 1, x_14);
x_17 = l_lean_parser_term_assume__anonymous;
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_18, 0, x_17);
lean::closure_set(x_18, 1, x_16);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_parser), 5, 0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_13);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_18);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_22, 0, x_21);
lean::closure_set(x_22, 1, x_10);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_13);
x_24 = l_lean_parser_term_assume__binders;
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_25, 0, x_24);
lean::closure_set(x_25, 1, x_23);
x_26 = lean::mk_string(", ");
x_27 = l_string_trim(x_26);
lean::inc(x_27);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_29, 0, x_27);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_30, 0, x_27);
lean::closure_set(x_30, 1, x_10);
lean::closure_set(x_30, 2, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_14);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_25);
lean::cnstr_set(x_32, 1, x_31);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_5);
lean::cnstr_set(x_33, 1, x_32);
return x_33;
}
}
obj* l_lean_parser_term_assume_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_assume;
x_6 = l_lean_parser_term_assume_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_pi() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("pi");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_pi_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_8; 
x_8 = lean::box(3);
x_5 = x_0;
x_6 = x_8;
goto lbl_7;
}
else
{
obj* x_9; obj* x_11; 
x_9 = lean::cnstr_get(x_0, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 1);
lean::inc(x_11);
lean::dec(x_0);
x_5 = x_11;
x_6 = x_9;
goto lbl_7;
}
lbl_7:
{
obj* x_14; obj* x_15; obj* x_18; 
x_14 = l_lean_parser_term_binders_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_6);
if (lean::obj_tag(x_5) == 0)
{
obj* x_19; 
x_19 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
obj* x_20; obj* x_21; 
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_21, 0, x_1);
lean::cnstr_set(x_21, 1, x_18);
lean::cnstr_set(x_21, 2, x_19);
lean::cnstr_set(x_21, 3, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_5, 0);
lean::inc(x_22);
lean::dec(x_5);
x_25 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_25, 0, x_1);
lean::cnstr_set(x_25, 1, x_18);
lean::cnstr_set(x_25, 2, x_19);
lean::cnstr_set(x_25, 3, x_22);
return x_25;
}
}
else
{
obj* x_26; obj* x_28; 
x_26 = lean::cnstr_get(x_5, 0);
lean::inc(x_26);
x_28 = lean::cnstr_get(x_5, 1);
lean::inc(x_28);
lean::dec(x_5);
switch (lean::obj_tag(x_26)) {
case 0:
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_26, 0);
lean::inc(x_31);
lean::dec(x_26);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_31);
if (lean::obj_tag(x_28) == 0)
{
obj* x_35; obj* x_36; 
x_35 = lean::box(3);
x_36 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_36, 0, x_1);
lean::cnstr_set(x_36, 1, x_18);
lean::cnstr_set(x_36, 2, x_34);
lean::cnstr_set(x_36, 3, x_35);
return x_36;
}
else
{
obj* x_37; obj* x_40; 
x_37 = lean::cnstr_get(x_28, 0);
lean::inc(x_37);
lean::dec(x_28);
x_40 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_40, 0, x_1);
lean::cnstr_set(x_40, 1, x_18);
lean::cnstr_set(x_40, 2, x_34);
lean::cnstr_set(x_40, 3, x_37);
return x_40;
}
}
case 3:
{
obj* x_41; 
x_41 = lean::box(0);
if (lean::obj_tag(x_28) == 0)
{
obj* x_42; obj* x_43; 
x_42 = lean::box(3);
x_43 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_43, 0, x_1);
lean::cnstr_set(x_43, 1, x_18);
lean::cnstr_set(x_43, 2, x_41);
lean::cnstr_set(x_43, 3, x_42);
return x_43;
}
else
{
obj* x_44; obj* x_47; 
x_44 = lean::cnstr_get(x_28, 0);
lean::inc(x_44);
lean::dec(x_28);
x_47 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_47, 0, x_1);
lean::cnstr_set(x_47, 1, x_18);
lean::cnstr_set(x_47, 2, x_41);
lean::cnstr_set(x_47, 3, x_44);
return x_47;
}
}
default:
{
obj* x_49; 
lean::dec(x_26);
x_49 = lean::box(0);
if (lean::obj_tag(x_28) == 0)
{
obj* x_50; obj* x_51; 
x_50 = lean::box(3);
x_51 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_51, 0, x_1);
lean::cnstr_set(x_51, 1, x_18);
lean::cnstr_set(x_51, 2, x_49);
lean::cnstr_set(x_51, 3, x_50);
return x_51;
}
else
{
obj* x_52; obj* x_55; 
x_52 = lean::cnstr_get(x_28, 0);
lean::inc(x_52);
lean::dec(x_28);
x_55 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_55, 0, x_1);
lean::cnstr_set(x_55, 1, x_18);
lean::cnstr_set(x_55, 2, x_49);
lean::cnstr_set(x_55, 3, x_52);
return x_55;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_pi_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_pi_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; obj* x_19; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_21; 
x_21 = lean::box(3);
x_18 = x_1;
x_19 = x_21;
goto lbl_20;
}
else
{
obj* x_22; obj* x_24; 
x_22 = lean::cnstr_get(x_1, 0);
lean::inc(x_22);
x_24 = lean::cnstr_get(x_1, 1);
lean::inc(x_24);
lean::dec(x_1);
x_18 = x_24;
x_19 = x_22;
goto lbl_20;
}
lbl_20:
{
obj* x_27; obj* x_28; obj* x_31; 
x_27 = l_lean_parser_term_binders_has__view;
x_28 = lean::cnstr_get(x_27, 0);
lean::inc(x_28);
lean::dec(x_27);
x_31 = lean::apply_1(x_28, x_19);
if (lean::obj_tag(x_18) == 0)
{
obj* x_32; 
x_32 = lean::box(0);
if (lean::obj_tag(x_18) == 0)
{
obj* x_33; obj* x_34; 
x_33 = lean::box(3);
x_34 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_34, 0, x_2);
lean::cnstr_set(x_34, 1, x_31);
lean::cnstr_set(x_34, 2, x_32);
lean::cnstr_set(x_34, 3, x_33);
return x_34;
}
else
{
obj* x_35; obj* x_38; 
x_35 = lean::cnstr_get(x_18, 0);
lean::inc(x_35);
lean::dec(x_18);
x_38 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_38, 0, x_2);
lean::cnstr_set(x_38, 1, x_31);
lean::cnstr_set(x_38, 2, x_32);
lean::cnstr_set(x_38, 3, x_35);
return x_38;
}
}
else
{
obj* x_39; obj* x_41; 
x_39 = lean::cnstr_get(x_18, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_18, 1);
lean::inc(x_41);
lean::dec(x_18);
switch (lean::obj_tag(x_39)) {
case 0:
{
obj* x_44; obj* x_47; 
x_44 = lean::cnstr_get(x_39, 0);
lean::inc(x_44);
lean::dec(x_39);
x_47 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_47, 0, x_44);
if (lean::obj_tag(x_41) == 0)
{
obj* x_48; obj* x_49; 
x_48 = lean::box(3);
x_49 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_49, 0, x_2);
lean::cnstr_set(x_49, 1, x_31);
lean::cnstr_set(x_49, 2, x_47);
lean::cnstr_set(x_49, 3, x_48);
return x_49;
}
else
{
obj* x_50; obj* x_53; 
x_50 = lean::cnstr_get(x_41, 0);
lean::inc(x_50);
lean::dec(x_41);
x_53 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_53, 0, x_2);
lean::cnstr_set(x_53, 1, x_31);
lean::cnstr_set(x_53, 2, x_47);
lean::cnstr_set(x_53, 3, x_50);
return x_53;
}
}
case 3:
{
obj* x_54; 
x_54 = lean::box(0);
if (lean::obj_tag(x_41) == 0)
{
obj* x_55; obj* x_56; 
x_55 = lean::box(3);
x_56 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_56, 0, x_2);
lean::cnstr_set(x_56, 1, x_31);
lean::cnstr_set(x_56, 2, x_54);
lean::cnstr_set(x_56, 3, x_55);
return x_56;
}
else
{
obj* x_57; obj* x_60; 
x_57 = lean::cnstr_get(x_41, 0);
lean::inc(x_57);
lean::dec(x_41);
x_60 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_60, 0, x_2);
lean::cnstr_set(x_60, 1, x_31);
lean::cnstr_set(x_60, 2, x_54);
lean::cnstr_set(x_60, 3, x_57);
return x_60;
}
}
default:
{
obj* x_62; 
lean::dec(x_39);
x_62 = lean::box(0);
if (lean::obj_tag(x_41) == 0)
{
obj* x_63; obj* x_64; 
x_63 = lean::box(3);
x_64 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_64, 0, x_2);
lean::cnstr_set(x_64, 1, x_31);
lean::cnstr_set(x_64, 2, x_62);
lean::cnstr_set(x_64, 3, x_63);
return x_64;
}
else
{
obj* x_65; obj* x_68; 
x_65 = lean::cnstr_get(x_41, 0);
lean::inc(x_65);
lean::dec(x_41);
x_68 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_68, 0, x_2);
lean::cnstr_set(x_68, 1, x_31);
lean::cnstr_set(x_68, 2, x_62);
lean::cnstr_set(x_68, 3, x_65);
return x_68;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_pi_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_10; obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
lean::dec(x_0);
x_10 = l_lean_parser_term_binders_has__view;
x_11 = lean::cnstr_get(x_10, 1);
lean::inc(x_11);
lean::dec(x_10);
x_14 = lean::apply_1(x_11, x_3);
x_15 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_16 = l_option_map___rarg(x_15, x_5);
x_17 = lean::box(3);
x_18 = l_option_get__or__else___main___rarg(x_16, x_17);
x_19 = lean::box(0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_7);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_18);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_14);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_1);
lean::cnstr_set(x_23, 1, x_22);
x_24 = l_lean_parser_term_pi;
x_25 = l_lean_parser_syntax_mk__node(x_24, x_23);
return x_25;
}
}
obj* _init_l_lean_parser_term_pi_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_pi_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_pi_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_pi_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_pi_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_pi_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
x_0 = lean::mk_string("\xce\xa0");
x_1 = lean::mk_string("Pi");
x_2 = l_lean_parser_max__prec;
x_3 = l_lean_parser_unicode__symbol_lean_parser_has__tokens___rarg(x_0, x_1, x_2);
x_4 = lean::mk_string("\xe2\x88\x80");
x_5 = lean::mk_string("forall");
x_6 = l_lean_parser_unicode__symbol_lean_parser_has__tokens___rarg(x_4, x_5, x_2);
x_7 = lean::box(0);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_6, x_7);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_3, x_8);
x_10 = l_lean_parser_tokens___rarg(x_9);
x_11 = lean::mk_string(",");
x_12 = lean::mk_nat_obj(0u);
x_13 = l_lean_parser_symbol_tokens___rarg(x_11, x_12);
x_14 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_15 = l_lean_parser_list_cons_tokens___rarg(x_14, x_7);
x_16 = l_lean_parser_list_cons_tokens___rarg(x_13, x_15);
x_17 = l_lean_parser_term_binders_parser_lean_parser_has__tokens;
x_18 = l_lean_parser_list_cons_tokens___rarg(x_17, x_16);
x_19 = l_lean_parser_list_cons_tokens___rarg(x_10, x_18);
x_20 = l_lean_parser_tokens___rarg(x_19);
return x_20;
}
}
obj* _init_l_lean_parser_term_pi_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_0 = lean::mk_string("\xce\xa0");
x_1 = lean::mk_string("Pi");
x_2 = l_lean_parser_max__prec;
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
lean::closure_set(x_3, 2, x_2);
x_4 = lean::mk_string("\xe2\x88\x80");
x_5 = lean::mk_string("forall");
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_4);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_2);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_3);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_any__of___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__1), 6, 1);
lean::closure_set(x_10, 0, x_9);
x_11 = lean::mk_string(",");
x_12 = l_string_trim(x_11);
lean::inc(x_12);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_14, 0, x_12);
x_15 = lean::mk_nat_obj(0u);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_16, 0, x_12);
lean::closure_set(x_16, 1, x_15);
lean::closure_set(x_16, 2, x_14);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_17, 0, x_15);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_7);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_16);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_parser), 5, 0);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_19);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_10);
lean::cnstr_set(x_22, 1, x_21);
x_23 = l_lean_parser_term__parser__m_monad;
x_24 = l_lean_parser_term__parser__m_monad__except;
x_25 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_26 = l_lean_parser_term__parser__m_alternative;
x_27 = l_lean_parser_term_pi;
x_28 = l_lean_parser_term_pi_has__view;
x_29 = l_lean_parser_combinators_node_view___rarg(x_23, x_24, x_25, x_26, x_27, x_22, x_28);
return x_29;
}
}
obj* _init_l_lean_parser_term_pi_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_0 = lean::mk_string("\xce\xa0");
x_1 = lean::mk_string("Pi");
x_2 = l_lean_parser_max__prec;
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
lean::closure_set(x_3, 2, x_2);
x_4 = lean::mk_string("\xe2\x88\x80");
x_5 = lean::mk_string("forall");
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_lambda_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_6, 0, x_4);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_2);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_3);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_any__of___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__1), 6, 1);
lean::closure_set(x_10, 0, x_9);
x_11 = lean::mk_string(",");
x_12 = l_string_trim(x_11);
lean::inc(x_12);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_14, 0, x_12);
x_15 = lean::mk_nat_obj(0u);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_16, 0, x_12);
lean::closure_set(x_16, 1, x_15);
lean::closure_set(x_16, 2, x_14);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_17, 0, x_15);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_7);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_16);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_binders_parser), 5, 0);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_19);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_10);
lean::cnstr_set(x_22, 1, x_21);
return x_22;
}
}
obj* l_lean_parser_term_pi_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_pi;
x_6 = l_lean_parser_term_pi_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_explicit__modifier() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("explicit_modifier");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(0);
x_1 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(0);
x_1 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_8; obj* x_11; obj* x_12; 
x_8 = lean::cnstr_get(x_0, 0);
lean::inc(x_8);
lean::dec(x_0);
x_11 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_11, 0, x_8);
x_12 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_12, 0, x_11);
return x_12;
}
case 3:
{
obj* x_13; 
x_13 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1;
return x_13;
}
default:
{
obj* x_15; 
lean::dec(x_0);
x_15 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1;
return x_15;
}
}
}
else
{
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_16; obj* x_19; obj* x_20; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_19, 0, x_16);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_19);
return x_20;
}
case 3:
{
obj* x_21; 
x_21 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2;
return x_21;
}
default:
{
obj* x_23; 
lean::dec(x_0);
x_23 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2;
return x_23;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("explicit_modifier");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__4;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_68; obj* x_71; obj* x_72; 
x_68 = lean::cnstr_get(x_1, 0);
lean::inc(x_68);
lean::dec(x_1);
x_71 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_71, 0, x_68);
x_72 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_72, 0, x_71);
return x_72;
}
case 3:
{
obj* x_73; 
x_73 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1;
return x_73;
}
default:
{
obj* x_75; 
lean::dec(x_1);
x_75 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1;
return x_75;
}
}
}
else
{
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_76; obj* x_79; obj* x_80; 
x_76 = lean::cnstr_get(x_1, 0);
lean::inc(x_76);
lean::dec(x_1);
x_79 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_79, 0, x_76);
x_80 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_80, 0, x_79);
return x_80;
}
case 3:
{
obj* x_81; 
x_81 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2;
return x_81;
}
default:
{
obj* x_83; 
lean::dec(x_1);
x_83 = l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2;
return x_83;
}
}
}
}
}
}
obj* l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_6 = l_option_map___rarg(x_5, x_2);
x_7 = lean::box(3);
x_8 = l_option_get__or__else___main___rarg(x_6, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_1);
x_10 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_11 = l_lean_parser_syntax_mk__node(x_10, x_9);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_1);
x_13 = l_lean_parser_term_explicit__modifier;
x_14 = l_lean_parser_syntax_mk__node(x_13, x_12);
return x_14;
}
else
{
obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_15 = lean::cnstr_get(x_0, 0);
lean::inc(x_15);
lean::dec(x_0);
x_18 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_19 = l_option_map___rarg(x_18, x_15);
x_20 = lean::box(3);
x_21 = l_option_get__or__else___main___rarg(x_19, x_20);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_1);
x_23 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_24 = l_lean_parser_syntax_mk__node(x_23, x_22);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_1);
x_26 = l_lean_parser_term_explicit__modifier;
x_27 = l_lean_parser_syntax_mk__node(x_26, x_25);
return x_27;
}
}
}
obj* _init_l_lean_parser_term_explicit__modifier_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_explicit__modifier_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_explicit__modifier_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_explicit() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("explicit");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_10; obj* x_11; 
x_0 = l_lean_parser_term_explicit__modifier_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = l_lean_parser_ident__univs_has__view;
x_7 = lean::cnstr_get(x_6, 0);
lean::inc(x_7);
lean::dec(x_6);
x_10 = lean::apply_1(x_7, x_4);
x_11 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_11, 0, x_5);
lean::cnstr_set(x_11, 1, x_10);
return x_11;
}
}
obj* _init_l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_term_explicit__modifier_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_ident__univs_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
return x_5;
}
}
obj* l_lean_parser_term_explicit_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
if (lean::obj_tag(x_6) == 0)
{
obj* x_9; 
x_9 = l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__1;
return x_9;
}
else
{
obj* x_10; obj* x_13; obj* x_14; obj* x_17; obj* x_18; obj* x_19; 
x_10 = lean::cnstr_get(x_6, 0);
lean::inc(x_10);
lean::dec(x_6);
x_13 = l_lean_parser_ident__univs_has__view;
x_14 = lean::cnstr_get(x_13, 0);
lean::inc(x_14);
lean::dec(x_13);
x_17 = lean::apply_1(x_14, x_10);
x_18 = l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__2;
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_17);
return x_19;
}
}
else
{
obj* x_20; obj* x_22; obj* x_25; obj* x_26; obj* x_29; 
x_20 = lean::cnstr_get(x_6, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_6, 1);
lean::inc(x_22);
lean::dec(x_6);
x_25 = l_lean_parser_term_explicit__modifier_has__view;
x_26 = lean::cnstr_get(x_25, 0);
lean::inc(x_26);
lean::dec(x_25);
x_29 = lean::apply_1(x_26, x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_30; obj* x_31; 
x_30 = l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__3;
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_29);
lean::cnstr_set(x_31, 1, x_30);
return x_31;
}
else
{
obj* x_32; obj* x_35; obj* x_36; obj* x_39; obj* x_40; 
x_32 = lean::cnstr_get(x_22, 0);
lean::inc(x_32);
lean::dec(x_22);
x_35 = l_lean_parser_ident__univs_has__view;
x_36 = lean::cnstr_get(x_35, 0);
lean::inc(x_36);
lean::dec(x_35);
x_39 = lean::apply_1(x_36, x_32);
x_40 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_40, 0, x_29);
lean::cnstr_set(x_40, 1, x_39);
return x_40;
}
}
}
}
}
obj* l_lean_parser_term_explicit_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_10; obj* x_11; obj* x_12; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_term_explicit__modifier_has__view;
x_7 = lean::cnstr_get(x_6, 1);
lean::inc(x_7);
lean::dec(x_6);
x_10 = lean::apply_1(x_7, x_1);
x_11 = l_lean_parser_ident__univs_has__view;
x_12 = lean::cnstr_get(x_11, 1);
lean::inc(x_12);
lean::dec(x_11);
x_15 = lean::apply_1(x_12, x_3);
x_16 = lean::box(0);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_10);
lean::cnstr_set(x_18, 1, x_17);
x_19 = l_lean_parser_term_explicit;
x_20 = l_lean_parser_syntax_mk__node(x_19, x_18);
return x_20;
}
}
obj* _init_l_lean_parser_term_explicit_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_explicit_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_explicit_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_explicit_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_0 = lean::mk_string("@");
x_1 = l_lean_parser_max__prec;
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::mk_string("@@");
x_4 = l_lean_parser_symbol_tokens___rarg(x_3, x_1);
x_5 = lean::box(0);
x_6 = l_lean_parser_list_cons_tokens___rarg(x_4, x_5);
x_7 = l_lean_parser_list_cons_tokens___rarg(x_2, x_6);
x_8 = l_lean_parser_tokens___rarg(x_7);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_8, x_5);
x_10 = l_lean_parser_tokens___rarg(x_9);
x_11 = l_lean_parser_ident__univs_parser_lean_parser_has__tokens;
x_12 = l_lean_parser_list_cons_tokens___rarg(x_11, x_5);
x_13 = l_lean_parser_list_cons_tokens___rarg(x_10, x_12);
x_14 = l_lean_parser_tokens___rarg(x_13);
return x_14;
}
}
obj* _init_l_lean_parser_term_explicit_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_0 = lean::mk_string("@");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_string("@@");
x_7 = l_string_trim(x_6);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_10, 0, x_7);
lean::closure_set(x_10, 1, x_4);
lean::closure_set(x_10, 2, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_5);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::mk_nat_obj(0u);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_15, 0, x_13);
lean::closure_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_11);
x_17 = l_lean_parser_term_explicit__modifier;
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_18, 0, x_17);
lean::closure_set(x_18, 1, x_16);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univs_parser), 5, 0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_11);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_18);
lean::cnstr_set(x_21, 1, x_20);
x_22 = l_lean_parser_term__parser__m_monad;
x_23 = l_lean_parser_term__parser__m_monad__except;
x_24 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_25 = l_lean_parser_term__parser__m_alternative;
x_26 = l_lean_parser_term_explicit;
x_27 = l_lean_parser_term_explicit_has__view;
x_28 = l_lean_parser_combinators_node_view___rarg(x_22, x_23, x_24, x_25, x_26, x_21, x_27);
return x_28;
}
}
obj* _init_l_lean_parser_term_explicit_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
x_0 = lean::mk_string("@");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_string("@@");
x_7 = l_string_trim(x_6);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_10, 0, x_7);
lean::closure_set(x_10, 1, x_4);
lean::closure_set(x_10, 2, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_5);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::mk_nat_obj(0u);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_15, 0, x_13);
lean::closure_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_11);
x_17 = l_lean_parser_term_explicit__modifier;
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_18, 0, x_17);
lean::closure_set(x_18, 1, x_16);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univs_parser), 5, 0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_11);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_18);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
}
obj* l_lean_parser_term_explicit_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_explicit;
x_6 = l_lean_parser_term_explicit_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_from() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("from");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_from_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
lean::dec(x_5);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
x_10 = l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1;
return x_10;
}
else
{
obj* x_11; obj* x_14; obj* x_15; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
lean::dec(x_6);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_11);
return x_15;
}
}
else
{
obj* x_16; obj* x_18; 
x_16 = lean::cnstr_get(x_6, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_6, 1);
lean::inc(x_18);
lean::dec(x_6);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_21; obj* x_24; 
x_21 = lean::cnstr_get(x_16, 0);
lean::inc(x_21);
lean::dec(x_16);
if (lean::is_scalar(x_5)) {
 x_24 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_24 = x_5;
}
lean::cnstr_set(x_24, 0, x_21);
if (lean::obj_tag(x_18) == 0)
{
obj* x_25; obj* x_26; 
x_25 = lean::box(3);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_30; 
x_27 = lean::cnstr_get(x_18, 0);
lean::inc(x_27);
lean::dec(x_18);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_24);
lean::cnstr_set(x_30, 1, x_27);
return x_30;
}
}
case 3:
{
lean::dec(x_5);
if (lean::obj_tag(x_18) == 0)
{
obj* x_32; 
x_32 = l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1;
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_18, 0);
lean::inc(x_33);
lean::dec(x_18);
x_36 = lean::box(0);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_33);
return x_37;
}
}
default:
{
lean::dec(x_5);
lean::dec(x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_40; 
x_40 = l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1;
return x_40;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_18, 0);
lean::inc(x_41);
lean::dec(x_18);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
}
}
}
}
}
obj* l_lean_parser_term_from_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_7 = l_option_map___rarg(x_6, x_1);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_3);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_9);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_lean_parser_term_from;
x_14 = l_lean_parser_syntax_mk__node(x_13, x_12);
return x_14;
}
}
obj* _init_l_lean_parser_term_from_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_from_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_from_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_from_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_from_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_from_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::mk_string("from ");
x_1 = lean::mk_nat_obj(0u);
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::box(0);
x_4 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_5 = l_lean_parser_list_cons_tokens___rarg(x_4, x_3);
x_6 = l_lean_parser_list_cons_tokens___rarg(x_2, x_5);
x_7 = l_lean_parser_tokens___rarg(x_6);
return x_7;
}
}
obj* _init_l_lean_parser_term_from_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_0 = lean::mk_string("from ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_5);
lean::cnstr_set(x_9, 1, x_8);
x_10 = l_lean_parser_term__parser__m_monad;
x_11 = l_lean_parser_term__parser__m_monad__except;
x_12 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_13 = l_lean_parser_term__parser__m_alternative;
x_14 = l_lean_parser_term_from;
x_15 = l_lean_parser_term_from_has__view;
x_16 = l_lean_parser_combinators_node_view___rarg(x_10, x_11, x_12, x_13, x_14, x_9, x_15);
return x_16;
}
}
obj* _init_l_lean_parser_term_from_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::mk_string("from ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_5);
lean::cnstr_set(x_9, 1, x_8);
return x_9;
}
}
obj* l_lean_parser_term_from_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_from;
x_6 = l_lean_parser_term_from_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_let__lhs__id() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("let_lhs_id");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = l_lean_parser_term_bracketed__binder_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
return x_7;
}
}
obj* _init_l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 1:
{
obj* x_7; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_5 = x_7;
goto lbl_6;
}
case 3:
{
obj* x_10; 
x_10 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_5 = x_10;
goto lbl_6;
}
default:
{
obj* x_12; 
lean::dec(x_1);
x_12 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_5 = x_12;
goto lbl_6;
}
}
lbl_6:
{
obj* x_13; obj* x_14; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_16; 
x_16 = lean::box(3);
x_13 = x_0;
x_14 = x_16;
goto lbl_15;
}
else
{
obj* x_17; obj* x_19; 
x_17 = lean::cnstr_get(x_0, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_0, 1);
lean::inc(x_19);
lean::dec(x_0);
x_13 = x_19;
x_14 = x_17;
goto lbl_15;
}
lbl_15:
{
obj* x_22; 
x_22 = l_lean_parser_syntax_as__node___main(x_14);
if (lean::obj_tag(x_22) == 0)
{
if (lean::obj_tag(x_13) == 0)
{
obj* x_23; obj* x_24; 
x_23 = lean::box(3);
x_24 = l_lean_parser_syntax_as__node___main(x_23);
if (lean::obj_tag(x_24) == 0)
{
obj* x_25; obj* x_26; obj* x_27; 
x_25 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_26 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_27 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_27, 0, x_5);
lean::cnstr_set(x_27, 1, x_25);
lean::cnstr_set(x_27, 2, x_26);
return x_27;
}
else
{
obj* x_28; obj* x_30; obj* x_31; 
x_28 = lean::cnstr_get(x_24, 0);
if (lean::is_exclusive(x_24)) {
 lean::cnstr_set(x_24, 0, lean::box(0));
 x_30 = x_24;
} else {
 lean::inc(x_28);
 lean::dec(x_24);
 x_30 = lean::box(0);
}
x_31 = lean::cnstr_get(x_28, 1);
lean::inc(x_31);
lean::dec(x_28);
if (lean::obj_tag(x_31) == 0)
{
obj* x_35; obj* x_36; obj* x_37; 
lean::dec(x_30);
x_35 = lean::box(0);
x_36 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_37 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_37, 0, x_5);
lean::cnstr_set(x_37, 1, x_36);
lean::cnstr_set(x_37, 2, x_35);
return x_37;
}
else
{
obj* x_38; obj* x_40; 
x_38 = lean::cnstr_get(x_31, 0);
lean::inc(x_38);
x_40 = lean::cnstr_get(x_31, 1);
lean::inc(x_40);
lean::dec(x_31);
if (lean::obj_tag(x_40) == 0)
{
obj* x_43; obj* x_44; obj* x_47; obj* x_48; obj* x_49; obj* x_50; 
x_43 = l_lean_parser_term_type__spec_has__view;
x_44 = lean::cnstr_get(x_43, 0);
lean::inc(x_44);
lean::dec(x_43);
x_47 = lean::apply_1(x_44, x_38);
if (lean::is_scalar(x_30)) {
 x_48 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_48 = x_30;
}
lean::cnstr_set(x_48, 0, x_47);
x_49 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_50 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_50, 0, x_5);
lean::cnstr_set(x_50, 1, x_49);
lean::cnstr_set(x_50, 2, x_48);
return x_50;
}
else
{
obj* x_54; obj* x_55; obj* x_56; 
lean::dec(x_38);
lean::dec(x_40);
lean::dec(x_30);
x_54 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_55 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_56 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_56, 0, x_5);
lean::cnstr_set(x_56, 1, x_54);
lean::cnstr_set(x_56, 2, x_55);
return x_56;
}
}
}
}
else
{
obj* x_57; obj* x_60; 
x_57 = lean::cnstr_get(x_13, 0);
lean::inc(x_57);
lean::dec(x_13);
x_60 = l_lean_parser_syntax_as__node___main(x_57);
if (lean::obj_tag(x_60) == 0)
{
obj* x_61; obj* x_62; obj* x_63; 
x_61 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_62 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_63 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_63, 0, x_5);
lean::cnstr_set(x_63, 1, x_61);
lean::cnstr_set(x_63, 2, x_62);
return x_63;
}
else
{
obj* x_64; obj* x_66; obj* x_67; 
x_64 = lean::cnstr_get(x_60, 0);
if (lean::is_exclusive(x_60)) {
 lean::cnstr_set(x_60, 0, lean::box(0));
 x_66 = x_60;
} else {
 lean::inc(x_64);
 lean::dec(x_60);
 x_66 = lean::box(0);
}
x_67 = lean::cnstr_get(x_64, 1);
lean::inc(x_67);
lean::dec(x_64);
if (lean::obj_tag(x_67) == 0)
{
obj* x_71; obj* x_72; obj* x_73; 
lean::dec(x_66);
x_71 = lean::box(0);
x_72 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_73 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_73, 0, x_5);
lean::cnstr_set(x_73, 1, x_72);
lean::cnstr_set(x_73, 2, x_71);
return x_73;
}
else
{
obj* x_74; obj* x_76; 
x_74 = lean::cnstr_get(x_67, 0);
lean::inc(x_74);
x_76 = lean::cnstr_get(x_67, 1);
lean::inc(x_76);
lean::dec(x_67);
if (lean::obj_tag(x_76) == 0)
{
obj* x_79; obj* x_80; obj* x_83; obj* x_84; obj* x_85; obj* x_86; 
x_79 = l_lean_parser_term_type__spec_has__view;
x_80 = lean::cnstr_get(x_79, 0);
lean::inc(x_80);
lean::dec(x_79);
x_83 = lean::apply_1(x_80, x_74);
if (lean::is_scalar(x_66)) {
 x_84 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_84 = x_66;
}
lean::cnstr_set(x_84, 0, x_83);
x_85 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_86 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_86, 0, x_5);
lean::cnstr_set(x_86, 1, x_85);
lean::cnstr_set(x_86, 2, x_84);
return x_86;
}
else
{
obj* x_90; obj* x_91; obj* x_92; 
lean::dec(x_66);
lean::dec(x_74);
lean::dec(x_76);
x_90 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_91 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_92 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_92, 0, x_5);
lean::cnstr_set(x_92, 1, x_90);
lean::cnstr_set(x_92, 2, x_91);
return x_92;
}
}
}
}
}
else
{
obj* x_93; obj* x_95; obj* x_96; obj* x_99; obj* x_100; 
x_93 = lean::cnstr_get(x_22, 0);
if (lean::is_exclusive(x_22)) {
 lean::cnstr_set(x_22, 0, lean::box(0));
 x_95 = x_22;
} else {
 lean::inc(x_93);
 lean::dec(x_22);
 x_95 = lean::box(0);
}
x_96 = lean::cnstr_get(x_93, 1);
lean::inc(x_96);
lean::dec(x_93);
x_99 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4;
x_100 = l_list_map___main___rarg(x_99, x_96);
if (lean::obj_tag(x_13) == 0)
{
obj* x_101; obj* x_102; 
x_101 = lean::box(3);
x_102 = l_lean_parser_syntax_as__node___main(x_101);
if (lean::obj_tag(x_102) == 0)
{
obj* x_104; obj* x_105; 
lean::dec(x_95);
x_104 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_105 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_105, 0, x_5);
lean::cnstr_set(x_105, 1, x_100);
lean::cnstr_set(x_105, 2, x_104);
return x_105;
}
else
{
obj* x_106; obj* x_109; 
x_106 = lean::cnstr_get(x_102, 0);
lean::inc(x_106);
lean::dec(x_102);
x_109 = lean::cnstr_get(x_106, 1);
lean::inc(x_109);
lean::dec(x_106);
if (lean::obj_tag(x_109) == 0)
{
obj* x_113; obj* x_114; 
lean::dec(x_95);
x_113 = lean::box(0);
x_114 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_114, 0, x_5);
lean::cnstr_set(x_114, 1, x_100);
lean::cnstr_set(x_114, 2, x_113);
return x_114;
}
else
{
obj* x_115; obj* x_117; 
x_115 = lean::cnstr_get(x_109, 0);
lean::inc(x_115);
x_117 = lean::cnstr_get(x_109, 1);
lean::inc(x_117);
lean::dec(x_109);
if (lean::obj_tag(x_117) == 0)
{
obj* x_120; obj* x_121; obj* x_124; obj* x_125; obj* x_126; 
x_120 = l_lean_parser_term_type__spec_has__view;
x_121 = lean::cnstr_get(x_120, 0);
lean::inc(x_121);
lean::dec(x_120);
x_124 = lean::apply_1(x_121, x_115);
if (lean::is_scalar(x_95)) {
 x_125 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_125 = x_95;
}
lean::cnstr_set(x_125, 0, x_124);
x_126 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_126, 0, x_5);
lean::cnstr_set(x_126, 1, x_100);
lean::cnstr_set(x_126, 2, x_125);
return x_126;
}
else
{
obj* x_130; obj* x_131; 
lean::dec(x_95);
lean::dec(x_117);
lean::dec(x_115);
x_130 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_131 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_131, 0, x_5);
lean::cnstr_set(x_131, 1, x_100);
lean::cnstr_set(x_131, 2, x_130);
return x_131;
}
}
}
}
else
{
obj* x_132; obj* x_135; 
x_132 = lean::cnstr_get(x_13, 0);
lean::inc(x_132);
lean::dec(x_13);
x_135 = l_lean_parser_syntax_as__node___main(x_132);
if (lean::obj_tag(x_135) == 0)
{
obj* x_137; obj* x_138; 
lean::dec(x_95);
x_137 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_138 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_138, 0, x_5);
lean::cnstr_set(x_138, 1, x_100);
lean::cnstr_set(x_138, 2, x_137);
return x_138;
}
else
{
obj* x_139; obj* x_142; 
x_139 = lean::cnstr_get(x_135, 0);
lean::inc(x_139);
lean::dec(x_135);
x_142 = lean::cnstr_get(x_139, 1);
lean::inc(x_142);
lean::dec(x_139);
if (lean::obj_tag(x_142) == 0)
{
obj* x_146; obj* x_147; 
lean::dec(x_95);
x_146 = lean::box(0);
x_147 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_147, 0, x_5);
lean::cnstr_set(x_147, 1, x_100);
lean::cnstr_set(x_147, 2, x_146);
return x_147;
}
else
{
obj* x_148; obj* x_150; 
x_148 = lean::cnstr_get(x_142, 0);
lean::inc(x_148);
x_150 = lean::cnstr_get(x_142, 1);
lean::inc(x_150);
lean::dec(x_142);
if (lean::obj_tag(x_150) == 0)
{
obj* x_153; obj* x_154; obj* x_157; obj* x_158; obj* x_159; 
x_153 = l_lean_parser_term_type__spec_has__view;
x_154 = lean::cnstr_get(x_153, 0);
lean::inc(x_154);
lean::dec(x_153);
x_157 = lean::apply_1(x_154, x_148);
if (lean::is_scalar(x_95)) {
 x_158 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_158 = x_95;
}
lean::cnstr_set(x_158, 0, x_157);
x_159 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_159, 0, x_5);
lean::cnstr_set(x_159, 1, x_100);
lean::cnstr_set(x_159, 2, x_158);
return x_159;
}
else
{
obj* x_163; obj* x_164; 
lean::dec(x_148);
lean::dec(x_150);
lean::dec(x_95);
x_163 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_164 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_164, 0, x_5);
lean::cnstr_set(x_164, 1, x_100);
lean::cnstr_set(x_164, 2, x_163);
return x_164;
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 1:
{
obj* x_20; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_18 = x_20;
goto lbl_19;
}
case 3:
{
obj* x_23; 
x_23 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_18 = x_23;
goto lbl_19;
}
default:
{
obj* x_25; 
lean::dec(x_2);
x_25 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_18 = x_25;
goto lbl_19;
}
}
lbl_19:
{
obj* x_26; obj* x_27; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_29; 
x_29 = lean::box(3);
x_26 = x_1;
x_27 = x_29;
goto lbl_28;
}
else
{
obj* x_30; obj* x_32; 
x_30 = lean::cnstr_get(x_1, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_1, 1);
lean::inc(x_32);
lean::dec(x_1);
x_26 = x_32;
x_27 = x_30;
goto lbl_28;
}
lbl_28:
{
obj* x_35; 
x_35 = l_lean_parser_syntax_as__node___main(x_27);
if (lean::obj_tag(x_35) == 0)
{
if (lean::obj_tag(x_26) == 0)
{
obj* x_36; obj* x_37; 
x_36 = lean::box(3);
x_37 = l_lean_parser_syntax_as__node___main(x_36);
if (lean::obj_tag(x_37) == 0)
{
obj* x_38; obj* x_39; obj* x_40; 
x_38 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_39 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_40 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_40, 0, x_18);
lean::cnstr_set(x_40, 1, x_38);
lean::cnstr_set(x_40, 2, x_39);
return x_40;
}
else
{
obj* x_41; obj* x_43; obj* x_44; 
x_41 = lean::cnstr_get(x_37, 0);
if (lean::is_exclusive(x_37)) {
 lean::cnstr_set(x_37, 0, lean::box(0));
 x_43 = x_37;
} else {
 lean::inc(x_41);
 lean::dec(x_37);
 x_43 = lean::box(0);
}
x_44 = lean::cnstr_get(x_41, 1);
lean::inc(x_44);
lean::dec(x_41);
if (lean::obj_tag(x_44) == 0)
{
obj* x_48; obj* x_49; obj* x_50; 
lean::dec(x_43);
x_48 = lean::box(0);
x_49 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_50 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_50, 0, x_18);
lean::cnstr_set(x_50, 1, x_49);
lean::cnstr_set(x_50, 2, x_48);
return x_50;
}
else
{
obj* x_51; obj* x_53; 
x_51 = lean::cnstr_get(x_44, 0);
lean::inc(x_51);
x_53 = lean::cnstr_get(x_44, 1);
lean::inc(x_53);
lean::dec(x_44);
if (lean::obj_tag(x_53) == 0)
{
obj* x_56; obj* x_57; obj* x_60; obj* x_61; obj* x_62; obj* x_63; 
x_56 = l_lean_parser_term_type__spec_has__view;
x_57 = lean::cnstr_get(x_56, 0);
lean::inc(x_57);
lean::dec(x_56);
x_60 = lean::apply_1(x_57, x_51);
if (lean::is_scalar(x_43)) {
 x_61 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_61 = x_43;
}
lean::cnstr_set(x_61, 0, x_60);
x_62 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_63 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_63, 0, x_18);
lean::cnstr_set(x_63, 1, x_62);
lean::cnstr_set(x_63, 2, x_61);
return x_63;
}
else
{
obj* x_67; obj* x_68; obj* x_69; 
lean::dec(x_51);
lean::dec(x_43);
lean::dec(x_53);
x_67 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_68 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_69 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_69, 0, x_18);
lean::cnstr_set(x_69, 1, x_67);
lean::cnstr_set(x_69, 2, x_68);
return x_69;
}
}
}
}
else
{
obj* x_70; obj* x_73; 
x_70 = lean::cnstr_get(x_26, 0);
lean::inc(x_70);
lean::dec(x_26);
x_73 = l_lean_parser_syntax_as__node___main(x_70);
if (lean::obj_tag(x_73) == 0)
{
obj* x_74; obj* x_75; obj* x_76; 
x_74 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_75 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_76 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_76, 0, x_18);
lean::cnstr_set(x_76, 1, x_74);
lean::cnstr_set(x_76, 2, x_75);
return x_76;
}
else
{
obj* x_77; obj* x_79; obj* x_80; 
x_77 = lean::cnstr_get(x_73, 0);
if (lean::is_exclusive(x_73)) {
 lean::cnstr_set(x_73, 0, lean::box(0));
 x_79 = x_73;
} else {
 lean::inc(x_77);
 lean::dec(x_73);
 x_79 = lean::box(0);
}
x_80 = lean::cnstr_get(x_77, 1);
lean::inc(x_80);
lean::dec(x_77);
if (lean::obj_tag(x_80) == 0)
{
obj* x_84; obj* x_85; obj* x_86; 
lean::dec(x_79);
x_84 = lean::box(0);
x_85 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_86 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_86, 0, x_18);
lean::cnstr_set(x_86, 1, x_85);
lean::cnstr_set(x_86, 2, x_84);
return x_86;
}
else
{
obj* x_87; obj* x_89; 
x_87 = lean::cnstr_get(x_80, 0);
lean::inc(x_87);
x_89 = lean::cnstr_get(x_80, 1);
lean::inc(x_89);
lean::dec(x_80);
if (lean::obj_tag(x_89) == 0)
{
obj* x_92; obj* x_93; obj* x_96; obj* x_97; obj* x_98; obj* x_99; 
x_92 = l_lean_parser_term_type__spec_has__view;
x_93 = lean::cnstr_get(x_92, 0);
lean::inc(x_93);
lean::dec(x_92);
x_96 = lean::apply_1(x_93, x_87);
if (lean::is_scalar(x_79)) {
 x_97 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_97 = x_79;
}
lean::cnstr_set(x_97, 0, x_96);
x_98 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_99 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_99, 0, x_18);
lean::cnstr_set(x_99, 1, x_98);
lean::cnstr_set(x_99, 2, x_97);
return x_99;
}
else
{
obj* x_103; obj* x_104; obj* x_105; 
lean::dec(x_89);
lean::dec(x_79);
lean::dec(x_87);
x_103 = l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1;
x_104 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_105 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_105, 0, x_18);
lean::cnstr_set(x_105, 1, x_103);
lean::cnstr_set(x_105, 2, x_104);
return x_105;
}
}
}
}
}
else
{
obj* x_106; obj* x_108; obj* x_109; obj* x_112; obj* x_113; 
x_106 = lean::cnstr_get(x_35, 0);
if (lean::is_exclusive(x_35)) {
 lean::cnstr_set(x_35, 0, lean::box(0));
 x_108 = x_35;
} else {
 lean::inc(x_106);
 lean::dec(x_35);
 x_108 = lean::box(0);
}
x_109 = lean::cnstr_get(x_106, 1);
lean::inc(x_109);
lean::dec(x_106);
x_112 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4;
x_113 = l_list_map___main___rarg(x_112, x_109);
if (lean::obj_tag(x_26) == 0)
{
obj* x_114; obj* x_115; 
x_114 = lean::box(3);
x_115 = l_lean_parser_syntax_as__node___main(x_114);
if (lean::obj_tag(x_115) == 0)
{
obj* x_117; obj* x_118; 
lean::dec(x_108);
x_117 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_118 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_118, 0, x_18);
lean::cnstr_set(x_118, 1, x_113);
lean::cnstr_set(x_118, 2, x_117);
return x_118;
}
else
{
obj* x_119; obj* x_122; 
x_119 = lean::cnstr_get(x_115, 0);
lean::inc(x_119);
lean::dec(x_115);
x_122 = lean::cnstr_get(x_119, 1);
lean::inc(x_122);
lean::dec(x_119);
if (lean::obj_tag(x_122) == 0)
{
obj* x_126; obj* x_127; 
lean::dec(x_108);
x_126 = lean::box(0);
x_127 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_127, 0, x_18);
lean::cnstr_set(x_127, 1, x_113);
lean::cnstr_set(x_127, 2, x_126);
return x_127;
}
else
{
obj* x_128; obj* x_130; 
x_128 = lean::cnstr_get(x_122, 0);
lean::inc(x_128);
x_130 = lean::cnstr_get(x_122, 1);
lean::inc(x_130);
lean::dec(x_122);
if (lean::obj_tag(x_130) == 0)
{
obj* x_133; obj* x_134; obj* x_137; obj* x_138; obj* x_139; 
x_133 = l_lean_parser_term_type__spec_has__view;
x_134 = lean::cnstr_get(x_133, 0);
lean::inc(x_134);
lean::dec(x_133);
x_137 = lean::apply_1(x_134, x_128);
if (lean::is_scalar(x_108)) {
 x_138 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_138 = x_108;
}
lean::cnstr_set(x_138, 0, x_137);
x_139 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_139, 0, x_18);
lean::cnstr_set(x_139, 1, x_113);
lean::cnstr_set(x_139, 2, x_138);
return x_139;
}
else
{
obj* x_143; obj* x_144; 
lean::dec(x_130);
lean::dec(x_128);
lean::dec(x_108);
x_143 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_144 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_144, 0, x_18);
lean::cnstr_set(x_144, 1, x_113);
lean::cnstr_set(x_144, 2, x_143);
return x_144;
}
}
}
}
else
{
obj* x_145; obj* x_148; 
x_145 = lean::cnstr_get(x_26, 0);
lean::inc(x_145);
lean::dec(x_26);
x_148 = l_lean_parser_syntax_as__node___main(x_145);
if (lean::obj_tag(x_148) == 0)
{
obj* x_150; obj* x_151; 
lean::dec(x_108);
x_150 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_151 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_151, 0, x_18);
lean::cnstr_set(x_151, 1, x_113);
lean::cnstr_set(x_151, 2, x_150);
return x_151;
}
else
{
obj* x_152; obj* x_155; 
x_152 = lean::cnstr_get(x_148, 0);
lean::inc(x_152);
lean::dec(x_148);
x_155 = lean::cnstr_get(x_152, 1);
lean::inc(x_155);
lean::dec(x_152);
if (lean::obj_tag(x_155) == 0)
{
obj* x_159; obj* x_160; 
lean::dec(x_108);
x_159 = lean::box(0);
x_160 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_160, 0, x_18);
lean::cnstr_set(x_160, 1, x_113);
lean::cnstr_set(x_160, 2, x_159);
return x_160;
}
else
{
obj* x_161; obj* x_163; 
x_161 = lean::cnstr_get(x_155, 0);
lean::inc(x_161);
x_163 = lean::cnstr_get(x_155, 1);
lean::inc(x_163);
lean::dec(x_155);
if (lean::obj_tag(x_163) == 0)
{
obj* x_166; obj* x_167; obj* x_170; obj* x_171; obj* x_172; 
x_166 = l_lean_parser_term_type__spec_has__view;
x_167 = lean::cnstr_get(x_166, 0);
lean::inc(x_167);
lean::dec(x_166);
x_170 = lean::apply_1(x_167, x_161);
if (lean::is_scalar(x_108)) {
 x_171 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_171 = x_108;
}
lean::cnstr_set(x_171, 0, x_170);
x_172 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_172, 0, x_18);
lean::cnstr_set(x_172, 1, x_113);
lean::cnstr_set(x_172, 2, x_171);
return x_172;
}
else
{
obj* x_176; obj* x_177; 
lean::dec(x_161);
lean::dec(x_163);
lean::dec(x_108);
x_176 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_177 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_177, 0, x_18);
lean::cnstr_set(x_177, 1, x_113);
lean::cnstr_set(x_177, 2, x_176);
return x_177;
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_1);
x_9 = l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__1;
x_10 = l_list_map___main___rarg(x_9, x_3);
x_11 = l_lean_parser_no__kind;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
if (lean::obj_tag(x_5) == 0)
{
obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_13 = l_lean_parser_detail__ident_has__view_x_27___lambda__2___closed__1;
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_8);
lean::cnstr_set(x_15, 1, x_14);
x_16 = l_lean_parser_term_let__lhs__id;
x_17 = l_lean_parser_syntax_mk__node(x_16, x_15);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_22; obj* x_23; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_18 = lean::cnstr_get(x_5, 0);
lean::inc(x_18);
lean::dec(x_5);
x_21 = lean::box(0);
x_22 = l_lean_parser_term_type__spec_has__view;
x_23 = lean::cnstr_get(x_22, 1);
lean::inc(x_23);
lean::dec(x_22);
x_26 = lean::apply_1(x_23, x_18);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_21);
x_28 = l_lean_parser_syntax_mk__node(x_11, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_21);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_12);
lean::cnstr_set(x_30, 1, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_8);
lean::cnstr_set(x_31, 1, x_30);
x_32 = l_lean_parser_term_let__lhs__id;
x_33 = l_lean_parser_syntax_mk__node(x_32, x_31);
return x_33;
}
}
}
obj* _init_l_lean_parser_term_let__lhs__id_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_let__lhs__id_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_let__lhs__id_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_let__lhs() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("let_lhs");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; 
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_0);
return x_8;
}
else
{
obj* x_9; obj* x_10; obj* x_13; obj* x_14; 
x_9 = l_lean_parser_term_let__lhs__id_has__view;
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
x_13 = lean::apply_1(x_10, x_0);
x_14 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
return x_14;
}
}
}
}
obj* _init_l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("let_lhs");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_let__lhs_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__2;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; 
x_68 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_68, 0, x_1);
return x_68;
}
else
{
obj* x_69; obj* x_70; obj* x_73; obj* x_74; 
x_69 = l_lean_parser_term_let__lhs__id_has__view;
x_70 = lean::cnstr_get(x_69, 0);
lean::inc(x_70);
lean::dec(x_69);
x_73 = lean::apply_1(x_70, x_1);
x_74 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_74, 0, x_73);
return x_74;
}
}
}
}
obj* l_lean_parser_term_let__lhs_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_let__lhs__id_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_lean_parser_term_let__lhs;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_16);
lean::cnstr_set(x_19, 1, x_1);
x_20 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_21 = l_lean_parser_syntax_mk__node(x_20, x_19);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_1);
x_23 = l_lean_parser_term_let__lhs;
x_24 = l_lean_parser_syntax_mk__node(x_23, x_22);
return x_24;
}
}
}
obj* _init_l_lean_parser_term_let__lhs_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_let__lhs_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_let__lhs_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_let__lhs_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_let__lhs_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_let() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("let");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_let_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = lean::box(3);
x_14 = x_0;
x_15 = x_17;
goto lbl_16;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
x_14 = x_20;
x_15 = x_18;
goto lbl_16;
}
lbl_16:
{
obj* x_23; obj* x_24; obj* x_27; obj* x_28; obj* x_29; 
x_23 = l_lean_parser_term_let__lhs_has__view;
x_24 = lean::cnstr_get(x_23, 0);
lean::inc(x_24);
lean::dec(x_23);
x_27 = lean::apply_1(x_24, x_15);
if (lean::obj_tag(x_14) == 0)
{
obj* x_31; 
x_31 = lean::box(3);
x_28 = x_14;
x_29 = x_31;
goto lbl_30;
}
else
{
obj* x_32; obj* x_34; 
x_32 = lean::cnstr_get(x_14, 0);
lean::inc(x_32);
x_34 = lean::cnstr_get(x_14, 1);
lean::inc(x_34);
lean::dec(x_14);
x_28 = x_34;
x_29 = x_32;
goto lbl_30;
}
lbl_30:
{
obj* x_37; 
switch (lean::obj_tag(x_29)) {
case 0:
{
obj* x_39; obj* x_42; 
x_39 = lean::cnstr_get(x_29, 0);
lean::inc(x_39);
lean::dec(x_29);
x_42 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_42, 0, x_39);
x_37 = x_42;
goto lbl_38;
}
case 3:
{
obj* x_43; 
x_43 = lean::box(0);
x_37 = x_43;
goto lbl_38;
}
default:
{
obj* x_45; 
lean::dec(x_29);
x_45 = lean::box(0);
x_37 = x_45;
goto lbl_38;
}
}
lbl_38:
{
obj* x_46; obj* x_47; 
if (lean::obj_tag(x_28) == 0)
{
obj* x_49; 
x_49 = lean::box(3);
x_46 = x_28;
x_47 = x_49;
goto lbl_48;
}
else
{
obj* x_50; obj* x_52; 
x_50 = lean::cnstr_get(x_28, 0);
lean::inc(x_50);
x_52 = lean::cnstr_get(x_28, 1);
lean::inc(x_52);
lean::dec(x_28);
x_46 = x_52;
x_47 = x_50;
goto lbl_48;
}
lbl_48:
{
if (lean::obj_tag(x_46) == 0)
{
obj* x_55; 
x_55 = lean::box(0);
if (lean::obj_tag(x_46) == 0)
{
obj* x_56; obj* x_57; 
x_56 = lean::box(3);
x_57 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_57, 0, x_5);
lean::cnstr_set(x_57, 1, x_27);
lean::cnstr_set(x_57, 2, x_37);
lean::cnstr_set(x_57, 3, x_47);
lean::cnstr_set(x_57, 4, x_55);
lean::cnstr_set(x_57, 5, x_56);
return x_57;
}
else
{
obj* x_58; obj* x_61; 
x_58 = lean::cnstr_get(x_46, 0);
lean::inc(x_58);
lean::dec(x_46);
x_61 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_61, 0, x_5);
lean::cnstr_set(x_61, 1, x_27);
lean::cnstr_set(x_61, 2, x_37);
lean::cnstr_set(x_61, 3, x_47);
lean::cnstr_set(x_61, 4, x_55);
lean::cnstr_set(x_61, 5, x_58);
return x_61;
}
}
else
{
obj* x_62; obj* x_64; 
x_62 = lean::cnstr_get(x_46, 0);
lean::inc(x_62);
x_64 = lean::cnstr_get(x_46, 1);
lean::inc(x_64);
lean::dec(x_46);
switch (lean::obj_tag(x_62)) {
case 0:
{
obj* x_67; obj* x_70; 
x_67 = lean::cnstr_get(x_62, 0);
lean::inc(x_67);
lean::dec(x_62);
x_70 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_70, 0, x_67);
if (lean::obj_tag(x_64) == 0)
{
obj* x_71; obj* x_72; 
x_71 = lean::box(3);
x_72 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_72, 0, x_5);
lean::cnstr_set(x_72, 1, x_27);
lean::cnstr_set(x_72, 2, x_37);
lean::cnstr_set(x_72, 3, x_47);
lean::cnstr_set(x_72, 4, x_70);
lean::cnstr_set(x_72, 5, x_71);
return x_72;
}
else
{
obj* x_73; obj* x_76; 
x_73 = lean::cnstr_get(x_64, 0);
lean::inc(x_73);
lean::dec(x_64);
x_76 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_76, 0, x_5);
lean::cnstr_set(x_76, 1, x_27);
lean::cnstr_set(x_76, 2, x_37);
lean::cnstr_set(x_76, 3, x_47);
lean::cnstr_set(x_76, 4, x_70);
lean::cnstr_set(x_76, 5, x_73);
return x_76;
}
}
case 3:
{
obj* x_77; 
x_77 = lean::box(0);
if (lean::obj_tag(x_64) == 0)
{
obj* x_78; obj* x_79; 
x_78 = lean::box(3);
x_79 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_79, 0, x_5);
lean::cnstr_set(x_79, 1, x_27);
lean::cnstr_set(x_79, 2, x_37);
lean::cnstr_set(x_79, 3, x_47);
lean::cnstr_set(x_79, 4, x_77);
lean::cnstr_set(x_79, 5, x_78);
return x_79;
}
else
{
obj* x_80; obj* x_83; 
x_80 = lean::cnstr_get(x_64, 0);
lean::inc(x_80);
lean::dec(x_64);
x_83 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_83, 0, x_5);
lean::cnstr_set(x_83, 1, x_27);
lean::cnstr_set(x_83, 2, x_37);
lean::cnstr_set(x_83, 3, x_47);
lean::cnstr_set(x_83, 4, x_77);
lean::cnstr_set(x_83, 5, x_80);
return x_83;
}
}
default:
{
obj* x_85; 
lean::dec(x_62);
x_85 = lean::box(0);
if (lean::obj_tag(x_64) == 0)
{
obj* x_86; obj* x_87; 
x_86 = lean::box(3);
x_87 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_87, 0, x_5);
lean::cnstr_set(x_87, 1, x_27);
lean::cnstr_set(x_87, 2, x_37);
lean::cnstr_set(x_87, 3, x_47);
lean::cnstr_set(x_87, 4, x_85);
lean::cnstr_set(x_87, 5, x_86);
return x_87;
}
else
{
obj* x_88; obj* x_91; 
x_88 = lean::cnstr_get(x_64, 0);
lean::inc(x_88);
lean::dec(x_64);
x_91 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_91, 0, x_5);
lean::cnstr_set(x_91, 1, x_27);
lean::cnstr_set(x_91, 2, x_37);
lean::cnstr_set(x_91, 3, x_47);
lean::cnstr_set(x_91, 4, x_85);
lean::cnstr_set(x_91, 5, x_88);
return x_91;
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_let_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_let_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; obj* x_37; obj* x_40; obj* x_41; obj* x_42; 
x_36 = l_lean_parser_term_let__lhs_has__view;
x_37 = lean::cnstr_get(x_36, 0);
lean::inc(x_37);
lean::dec(x_36);
x_40 = lean::apply_1(x_37, x_28);
if (lean::obj_tag(x_27) == 0)
{
obj* x_44; 
x_44 = lean::box(3);
x_41 = x_27;
x_42 = x_44;
goto lbl_43;
}
else
{
obj* x_45; obj* x_47; 
x_45 = lean::cnstr_get(x_27, 0);
lean::inc(x_45);
x_47 = lean::cnstr_get(x_27, 1);
lean::inc(x_47);
lean::dec(x_27);
x_41 = x_47;
x_42 = x_45;
goto lbl_43;
}
lbl_43:
{
obj* x_50; 
switch (lean::obj_tag(x_42)) {
case 0:
{
obj* x_52; obj* x_55; 
x_52 = lean::cnstr_get(x_42, 0);
lean::inc(x_52);
lean::dec(x_42);
x_55 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_55, 0, x_52);
x_50 = x_55;
goto lbl_51;
}
case 3:
{
obj* x_56; 
x_56 = lean::box(0);
x_50 = x_56;
goto lbl_51;
}
default:
{
obj* x_58; 
lean::dec(x_42);
x_58 = lean::box(0);
x_50 = x_58;
goto lbl_51;
}
}
lbl_51:
{
obj* x_59; obj* x_60; 
if (lean::obj_tag(x_41) == 0)
{
obj* x_62; 
x_62 = lean::box(3);
x_59 = x_41;
x_60 = x_62;
goto lbl_61;
}
else
{
obj* x_63; obj* x_65; 
x_63 = lean::cnstr_get(x_41, 0);
lean::inc(x_63);
x_65 = lean::cnstr_get(x_41, 1);
lean::inc(x_65);
lean::dec(x_41);
x_59 = x_65;
x_60 = x_63;
goto lbl_61;
}
lbl_61:
{
if (lean::obj_tag(x_59) == 0)
{
obj* x_68; 
x_68 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
obj* x_69; obj* x_70; 
x_69 = lean::box(3);
x_70 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_70, 0, x_18);
lean::cnstr_set(x_70, 1, x_40);
lean::cnstr_set(x_70, 2, x_50);
lean::cnstr_set(x_70, 3, x_60);
lean::cnstr_set(x_70, 4, x_68);
lean::cnstr_set(x_70, 5, x_69);
return x_70;
}
else
{
obj* x_71; obj* x_74; 
x_71 = lean::cnstr_get(x_59, 0);
lean::inc(x_71);
lean::dec(x_59);
x_74 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_74, 0, x_18);
lean::cnstr_set(x_74, 1, x_40);
lean::cnstr_set(x_74, 2, x_50);
lean::cnstr_set(x_74, 3, x_60);
lean::cnstr_set(x_74, 4, x_68);
lean::cnstr_set(x_74, 5, x_71);
return x_74;
}
}
else
{
obj* x_75; obj* x_77; 
x_75 = lean::cnstr_get(x_59, 0);
lean::inc(x_75);
x_77 = lean::cnstr_get(x_59, 1);
lean::inc(x_77);
lean::dec(x_59);
switch (lean::obj_tag(x_75)) {
case 0:
{
obj* x_80; obj* x_83; 
x_80 = lean::cnstr_get(x_75, 0);
lean::inc(x_80);
lean::dec(x_75);
x_83 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_83, 0, x_80);
if (lean::obj_tag(x_77) == 0)
{
obj* x_84; obj* x_85; 
x_84 = lean::box(3);
x_85 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_85, 0, x_18);
lean::cnstr_set(x_85, 1, x_40);
lean::cnstr_set(x_85, 2, x_50);
lean::cnstr_set(x_85, 3, x_60);
lean::cnstr_set(x_85, 4, x_83);
lean::cnstr_set(x_85, 5, x_84);
return x_85;
}
else
{
obj* x_86; obj* x_89; 
x_86 = lean::cnstr_get(x_77, 0);
lean::inc(x_86);
lean::dec(x_77);
x_89 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_89, 0, x_18);
lean::cnstr_set(x_89, 1, x_40);
lean::cnstr_set(x_89, 2, x_50);
lean::cnstr_set(x_89, 3, x_60);
lean::cnstr_set(x_89, 4, x_83);
lean::cnstr_set(x_89, 5, x_86);
return x_89;
}
}
case 3:
{
obj* x_90; 
x_90 = lean::box(0);
if (lean::obj_tag(x_77) == 0)
{
obj* x_91; obj* x_92; 
x_91 = lean::box(3);
x_92 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_92, 0, x_18);
lean::cnstr_set(x_92, 1, x_40);
lean::cnstr_set(x_92, 2, x_50);
lean::cnstr_set(x_92, 3, x_60);
lean::cnstr_set(x_92, 4, x_90);
lean::cnstr_set(x_92, 5, x_91);
return x_92;
}
else
{
obj* x_93; obj* x_96; 
x_93 = lean::cnstr_get(x_77, 0);
lean::inc(x_93);
lean::dec(x_77);
x_96 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_96, 0, x_18);
lean::cnstr_set(x_96, 1, x_40);
lean::cnstr_set(x_96, 2, x_50);
lean::cnstr_set(x_96, 3, x_60);
lean::cnstr_set(x_96, 4, x_90);
lean::cnstr_set(x_96, 5, x_93);
return x_96;
}
}
default:
{
obj* x_98; 
lean::dec(x_75);
x_98 = lean::box(0);
if (lean::obj_tag(x_77) == 0)
{
obj* x_99; obj* x_100; 
x_99 = lean::box(3);
x_100 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_100, 0, x_18);
lean::cnstr_set(x_100, 1, x_40);
lean::cnstr_set(x_100, 2, x_50);
lean::cnstr_set(x_100, 3, x_60);
lean::cnstr_set(x_100, 4, x_98);
lean::cnstr_set(x_100, 5, x_99);
return x_100;
}
else
{
obj* x_101; obj* x_104; 
x_101 = lean::cnstr_get(x_77, 0);
lean::inc(x_101);
lean::dec(x_77);
x_104 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_104, 0, x_18);
lean::cnstr_set(x_104, 1, x_40);
lean::cnstr_set(x_104, 2, x_50);
lean::cnstr_set(x_104, 3, x_60);
lean::cnstr_set(x_104, 4, x_98);
lean::cnstr_set(x_104, 5, x_101);
return x_104;
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_let_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
lean::dec(x_0);
x_14 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_15 = l_option_map___rarg(x_14, x_1);
x_16 = lean::box(3);
x_17 = l_option_get__or__else___main___rarg(x_15, x_16);
x_18 = l_lean_parser_term_let__lhs_has__view;
x_19 = lean::cnstr_get(x_18, 1);
lean::inc(x_19);
lean::dec(x_18);
x_22 = lean::apply_1(x_19, x_3);
x_23 = l_option_map___rarg(x_14, x_5);
x_24 = l_option_get__or__else___main___rarg(x_23, x_16);
x_25 = l_option_map___rarg(x_14, x_9);
x_26 = l_option_get__or__else___main___rarg(x_25, x_16);
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_11);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_26);
lean::cnstr_set(x_29, 1, x_28);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_7);
lean::cnstr_set(x_30, 1, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_24);
lean::cnstr_set(x_31, 1, x_30);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_22);
lean::cnstr_set(x_32, 1, x_31);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_17);
lean::cnstr_set(x_33, 1, x_32);
x_34 = l_lean_parser_term_let;
x_35 = l_lean_parser_syntax_mk__node(x_34, x_33);
return x_35;
}
}
obj* _init_l_lean_parser_term_let_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_let_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_let_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_let_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_let_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_let_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_0 = lean::mk_string("let ");
x_1 = lean::mk_nat_obj(0u);
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::box(0);
x_4 = l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens;
x_5 = l_lean_parser_tokens___rarg(x_4);
x_6 = l_lean_parser_term_opt__type_parser_lean_parser_has__tokens;
x_7 = l_lean_parser_list_cons_tokens___rarg(x_6, x_3);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_5, x_7);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_3, x_8);
x_10 = l_lean_parser_tokens___rarg(x_9);
x_11 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_12 = l_lean_parser_list_cons_tokens___rarg(x_11, x_3);
lean::inc(x_12);
x_14 = l_lean_parser_list_cons_tokens___rarg(x_10, x_12);
x_15 = l_lean_parser_tokens___rarg(x_14);
x_16 = l_lean_parser_list_cons_tokens___rarg(x_15, x_3);
x_17 = l_lean_parser_tokens___rarg(x_16);
x_18 = lean::mk_string(" := ");
x_19 = l_lean_parser_symbol_tokens___rarg(x_18, x_1);
x_20 = lean::mk_string(" in ");
x_21 = l_lean_parser_symbol_tokens___rarg(x_20, x_1);
x_22 = l_lean_parser_list_cons_tokens___rarg(x_21, x_12);
x_23 = l_lean_parser_list_cons_tokens___rarg(x_11, x_22);
x_24 = l_lean_parser_list_cons_tokens___rarg(x_19, x_23);
x_25 = l_lean_parser_list_cons_tokens___rarg(x_17, x_24);
x_26 = l_lean_parser_list_cons_tokens___rarg(x_2, x_25);
x_27 = l_lean_parser_tokens___rarg(x_26);
return x_27;
}
}
obj* _init_l_lean_parser_term_let_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; 
x_0 = lean::mk_string("let ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser_lean_parser_has__tokens___spec__1), 6, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::box(0);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_8);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_7);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_11);
x_14 = l_lean_parser_term_let__lhs__id;
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_15, 0, x_14);
lean::closure_set(x_15, 1, x_13);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_16, 0, x_4);
lean::inc(x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_8);
lean::inc(x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_15);
lean::cnstr_set(x_20, 1, x_18);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_21, 0, x_20);
lean::closure_set(x_21, 1, x_4);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_8);
x_23 = l_lean_parser_term_let__lhs;
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_24, 0, x_23);
lean::closure_set(x_24, 1, x_22);
x_25 = lean::mk_string(" := ");
x_26 = l_string_trim(x_25);
lean::inc(x_26);
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_28, 0, x_26);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_29, 0, x_26);
lean::closure_set(x_29, 1, x_4);
lean::closure_set(x_29, 2, x_28);
x_30 = lean::mk_string(" in ");
x_31 = l_string_trim(x_30);
lean::inc(x_31);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_33, 0, x_31);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_34, 0, x_31);
lean::closure_set(x_34, 1, x_4);
lean::closure_set(x_34, 2, x_33);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_18);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_16);
lean::cnstr_set(x_36, 1, x_35);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_29);
lean::cnstr_set(x_37, 1, x_36);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_24);
lean::cnstr_set(x_38, 1, x_37);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_5);
lean::cnstr_set(x_39, 1, x_38);
x_40 = l_lean_parser_term__parser__m_monad;
x_41 = l_lean_parser_term__parser__m_monad__except;
x_42 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_43 = l_lean_parser_term__parser__m_alternative;
x_44 = l_lean_parser_term_let;
x_45 = l_lean_parser_term_let_has__view;
x_46 = l_lean_parser_combinators_node_view___rarg(x_40, x_41, x_42, x_43, x_44, x_39, x_45);
return x_46;
}
}
obj* _init_l_lean_parser_term_let_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_0 = lean::mk_string("let ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_bracketed__binder_parser), 5, 0);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_many___at_lean_parser_command_notation__spec_parser_lean_parser_has__tokens___spec__1), 6, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::box(0);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_8);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_7);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_11);
x_14 = l_lean_parser_term_let__lhs__id;
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_15, 0, x_14);
lean::closure_set(x_15, 1, x_13);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_16, 0, x_4);
lean::inc(x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_8);
lean::inc(x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_15);
lean::cnstr_set(x_20, 1, x_18);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_21, 0, x_20);
lean::closure_set(x_21, 1, x_4);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_8);
x_23 = l_lean_parser_term_let__lhs;
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_24, 0, x_23);
lean::closure_set(x_24, 1, x_22);
x_25 = lean::mk_string(" := ");
x_26 = l_string_trim(x_25);
lean::inc(x_26);
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_28, 0, x_26);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_29, 0, x_26);
lean::closure_set(x_29, 1, x_4);
lean::closure_set(x_29, 2, x_28);
x_30 = lean::mk_string(" in ");
x_31 = l_string_trim(x_30);
lean::inc(x_31);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_33, 0, x_31);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_34, 0, x_31);
lean::closure_set(x_34, 1, x_4);
lean::closure_set(x_34, 2, x_33);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_18);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_16);
lean::cnstr_set(x_36, 1, x_35);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_29);
lean::cnstr_set(x_37, 1, x_36);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_24);
lean::cnstr_set(x_38, 1, x_37);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_5);
lean::cnstr_set(x_39, 1, x_38);
return x_39;
}
}
obj* l_lean_parser_term_let_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_let;
x_6 = l_lean_parser_term_let_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_opt__ident() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("opt_ident");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
x_4 = lean_name_mk_string(x_0, x_1);
x_5 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_3);
lean::cnstr_set(x_5, 2, x_4);
lean::cnstr_set(x_5, 3, x_0);
lean::cnstr_set(x_5, 4, x_0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_0);
return x_6;
}
}
obj* _init_l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 1:
{
obj* x_7; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_10; obj* x_11; 
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_11, 0, x_7);
lean::cnstr_set(x_11, 1, x_10);
return x_11;
}
else
{
obj* x_12; 
x_12 = lean::cnstr_get(x_0, 0);
lean::inc(x_12);
lean::dec(x_0);
switch (lean::obj_tag(x_12)) {
case 0:
{
obj* x_15; obj* x_18; obj* x_19; 
x_15 = lean::cnstr_get(x_12, 0);
lean::inc(x_15);
lean::dec(x_12);
x_18 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_18, 0, x_15);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_7);
lean::cnstr_set(x_19, 1, x_18);
return x_19;
}
case 3:
{
obj* x_20; obj* x_21; 
x_20 = lean::box(0);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_7);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
default:
{
obj* x_23; obj* x_24; 
lean::dec(x_12);
x_23 = lean::box(0);
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_7);
lean::cnstr_set(x_24, 1, x_23);
return x_24;
}
}
}
}
case 3:
{
obj* x_25; 
x_25 = lean::box(0);
x_5 = x_25;
goto lbl_6;
}
default:
{
obj* x_27; 
lean::dec(x_1);
x_27 = lean::box(0);
x_5 = x_27;
goto lbl_6;
}
}
lbl_6:
{
lean::dec(x_5);
if (lean::obj_tag(x_0) == 0)
{
obj* x_29; 
x_29 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
return x_29;
}
else
{
obj* x_30; 
x_30 = lean::cnstr_get(x_0, 0);
lean::inc(x_30);
lean::dec(x_0);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_33; obj* x_36; obj* x_37; obj* x_38; 
x_33 = lean::cnstr_get(x_30, 0);
lean::inc(x_33);
lean::dec(x_30);
x_36 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_36, 0, x_33);
x_37 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_38 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_36);
return x_38;
}
case 3:
{
obj* x_39; 
x_39 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_41; 
lean::dec(x_30);
x_41 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
return x_41;
}
}
}
}
}
}
}
obj* l_lean_parser_term_opt__ident_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 1:
{
obj* x_20; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_23; obj* x_24; 
x_23 = lean::box(0);
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_20);
lean::cnstr_set(x_24, 1, x_23);
return x_24;
}
else
{
obj* x_25; 
x_25 = lean::cnstr_get(x_1, 0);
lean::inc(x_25);
lean::dec(x_1);
switch (lean::obj_tag(x_25)) {
case 0:
{
obj* x_28; obj* x_31; obj* x_32; 
x_28 = lean::cnstr_get(x_25, 0);
lean::inc(x_28);
lean::dec(x_25);
x_31 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_31, 0, x_28);
x_32 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_32, 0, x_20);
lean::cnstr_set(x_32, 1, x_31);
return x_32;
}
case 3:
{
obj* x_33; obj* x_34; 
x_33 = lean::box(0);
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_20);
lean::cnstr_set(x_34, 1, x_33);
return x_34;
}
default:
{
obj* x_36; obj* x_37; 
lean::dec(x_25);
x_36 = lean::box(0);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_20);
lean::cnstr_set(x_37, 1, x_36);
return x_37;
}
}
}
}
case 3:
{
obj* x_38; 
x_38 = lean::box(0);
x_18 = x_38;
goto lbl_19;
}
default:
{
obj* x_40; 
lean::dec(x_2);
x_40 = lean::box(0);
x_18 = x_40;
goto lbl_19;
}
}
lbl_19:
{
lean::dec(x_18);
if (lean::obj_tag(x_1) == 0)
{
obj* x_42; 
x_42 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
return x_42;
}
else
{
obj* x_43; 
x_43 = lean::cnstr_get(x_1, 0);
lean::inc(x_43);
lean::dec(x_1);
switch (lean::obj_tag(x_43)) {
case 0:
{
obj* x_46; obj* x_49; obj* x_50; obj* x_51; 
x_46 = lean::cnstr_get(x_43, 0);
lean::inc(x_46);
lean::dec(x_43);
x_49 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_49, 0, x_46);
x_50 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_51 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_51, 0, x_50);
lean::cnstr_set(x_51, 1, x_49);
return x_51;
}
case 3:
{
obj* x_52; 
x_52 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
return x_52;
}
default:
{
obj* x_54; 
lean::dec(x_43);
x_54 = l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1;
return x_54;
}
}
}
}
}
}
}
obj* l_lean_parser_term_opt__ident_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_1);
x_7 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_8 = l_option_map___rarg(x_7, x_3);
x_9 = lean::box(3);
x_10 = l_option_get__or__else___main___rarg(x_8, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_6);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_lean_parser_term_opt__ident;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
}
obj* _init_l_lean_parser_term_opt__ident_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_opt__ident_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_opt__ident_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_opt__ident_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string(" : ");
x_2 = lean::mk_nat_obj(0u);
x_3 = l_lean_parser_symbol_tokens___rarg(x_1, x_2);
x_4 = l_lean_parser_list_cons_tokens___rarg(x_3, x_0);
x_5 = l_lean_parser_list_cons_tokens___rarg(x_0, x_4);
x_6 = l_lean_parser_tokens___rarg(x_5);
x_7 = l_lean_parser_tokens___rarg(x_6);
x_8 = l_lean_parser_tokens___rarg(x_7);
return x_8;
}
}
obj* l_lean_parser_term_opt__ident_parser_lean_parser_has__view___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_14; 
x_6 = l_lean_parser_term_opt__ident;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_6, x_0, x_1, x_2, x_3, x_4, x_5);
x_8 = lean::cnstr_get(x_7, 0);
x_10 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 x_12 = x_7;
} else {
 lean::inc(x_8);
 lean::inc(x_10);
 lean::dec(x_7);
 x_12 = lean::box(0);
}
x_13 = l_lean_parser_parsec__t_try__mk__res___rarg(x_8);
if (lean::is_scalar(x_12)) {
 x_14 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_14 = x_12;
}
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_10);
return x_14;
}
}
obj* _init_l_lean_parser_term_opt__ident_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_0 = lean::mk_string(" : ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_lean_parser_term_opt__ident;
lean::inc(x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_12, 0, x_10);
lean::closure_set(x_12, 1, x_9);
lean::inc(x_9);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_parser_lean_parser_has__view___lambda__1), 6, 1);
lean::closure_set(x_14, 0, x_9);
x_15 = l_lean_parser_term__parser__m_monad;
x_16 = l_lean_parser_term__parser__m_monad__except;
x_17 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_18 = l_lean_parser_term__parser__m_alternative;
x_19 = l_lean_parser_term_opt__ident_has__view;
x_20 = l_lean_parser_combinators_node_view___rarg(x_15, x_16, x_17, x_18, x_10, x_9, x_19);
x_21 = l_lean_parser_combinators_try_view___rarg(x_17, x_18, x_12, x_20);
x_22 = l_lean_parser_combinators_optional_view___rarg(x_15, x_16, x_17, x_18, x_14, x_21);
return x_22;
}
}
obj* _init_l_lean_parser_term_opt__ident_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_0 = lean::mk_string(" : ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_parser_lean_parser_has__view___lambda__1), 6, 1);
lean::closure_set(x_10, 0, x_9);
return x_10;
}
}
obj* l_lean_parser_term_opt__ident_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; 
x_5 = l_lean_parser_term_opt__ident_parser___closed__1;
x_6 = l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7(x_5, x_0, x_1, x_2, x_3, x_4);
return x_6;
}
}
obj* _init_l_lean_parser_term_have__term() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("have_term");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_have__term_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
lean::dec(x_5);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
x_10 = l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1;
return x_10;
}
else
{
obj* x_11; obj* x_14; obj* x_15; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
lean::dec(x_6);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_11);
return x_15;
}
}
else
{
obj* x_16; obj* x_18; 
x_16 = lean::cnstr_get(x_6, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_6, 1);
lean::inc(x_18);
lean::dec(x_6);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_21; obj* x_24; 
x_21 = lean::cnstr_get(x_16, 0);
lean::inc(x_21);
lean::dec(x_16);
if (lean::is_scalar(x_5)) {
 x_24 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_24 = x_5;
}
lean::cnstr_set(x_24, 0, x_21);
if (lean::obj_tag(x_18) == 0)
{
obj* x_25; obj* x_26; 
x_25 = lean::box(3);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_30; 
x_27 = lean::cnstr_get(x_18, 0);
lean::inc(x_27);
lean::dec(x_18);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_24);
lean::cnstr_set(x_30, 1, x_27);
return x_30;
}
}
case 3:
{
lean::dec(x_5);
if (lean::obj_tag(x_18) == 0)
{
obj* x_32; 
x_32 = l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1;
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_18, 0);
lean::inc(x_33);
lean::dec(x_18);
x_36 = lean::box(0);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_33);
return x_37;
}
}
default:
{
lean::dec(x_5);
lean::dec(x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_40; 
x_40 = l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1;
return x_40;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_18, 0);
lean::inc(x_41);
lean::dec(x_18);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
}
}
}
}
}
obj* l_lean_parser_term_have__term_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_7 = l_option_map___rarg(x_6, x_1);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_3);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_9);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_lean_parser_term_have__term;
x_14 = l_lean_parser_syntax_mk__node(x_13, x_12);
return x_14;
}
}
obj* _init_l_lean_parser_term_have__term_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have__term_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have__term_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_have__term_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_have__term_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_have__from() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("have_from");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_term_from_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = l_lean_parser_term_from_has__view;
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_0);
lean::cnstr_set(x_7, 1, x_6);
return x_7;
}
}
obj* _init_l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_5; obj* x_8; 
x_5 = lean::cnstr_get(x_1, 0);
lean::inc(x_5);
lean::dec(x_1);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_5);
if (lean::obj_tag(x_0) == 0)
{
obj* x_9; obj* x_10; 
x_9 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
x_10 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_9);
return x_10;
}
else
{
obj* x_11; obj* x_14; obj* x_15; obj* x_18; obj* x_19; 
x_11 = lean::cnstr_get(x_0, 0);
lean::inc(x_11);
lean::dec(x_0);
x_14 = l_lean_parser_term_from_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_11);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_8);
lean::cnstr_set(x_19, 1, x_18);
return x_19;
}
}
case 3:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_20; 
x_20 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2;
return x_20;
}
else
{
obj* x_21; obj* x_24; obj* x_25; obj* x_26; obj* x_29; obj* x_30; 
x_21 = lean::cnstr_get(x_0, 0);
lean::inc(x_21);
lean::dec(x_0);
x_24 = lean::box(0);
x_25 = l_lean_parser_term_from_has__view;
x_26 = lean::cnstr_get(x_25, 0);
lean::inc(x_26);
lean::dec(x_25);
x_29 = lean::apply_1(x_26, x_21);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_24);
lean::cnstr_set(x_30, 1, x_29);
return x_30;
}
}
default:
{
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_32; 
x_32 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2;
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_37; obj* x_38; obj* x_41; obj* x_42; 
x_33 = lean::cnstr_get(x_0, 0);
lean::inc(x_33);
lean::dec(x_0);
x_36 = lean::box(0);
x_37 = l_lean_parser_term_from_has__view;
x_38 = lean::cnstr_get(x_37, 0);
lean::inc(x_38);
lean::dec(x_37);
x_41 = lean::apply_1(x_38, x_33);
x_42 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_42, 0, x_36);
lean::cnstr_set(x_42, 1, x_41);
return x_42;
}
}
}
}
}
}
obj* l_lean_parser_term_have__from_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__3;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_18; obj* x_21; 
x_18 = lean::cnstr_get(x_2, 0);
lean::inc(x_18);
lean::dec(x_2);
x_21 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_21, 0, x_18);
if (lean::obj_tag(x_1) == 0)
{
obj* x_22; obj* x_23; 
x_22 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_21);
lean::cnstr_set(x_23, 1, x_22);
return x_23;
}
else
{
obj* x_24; obj* x_27; obj* x_28; obj* x_31; obj* x_32; 
x_24 = lean::cnstr_get(x_1, 0);
lean::inc(x_24);
lean::dec(x_1);
x_27 = l_lean_parser_term_from_has__view;
x_28 = lean::cnstr_get(x_27, 0);
lean::inc(x_28);
lean::dec(x_27);
x_31 = lean::apply_1(x_28, x_24);
x_32 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_32, 0, x_21);
lean::cnstr_set(x_32, 1, x_31);
return x_32;
}
}
case 3:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_33; 
x_33 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2;
return x_33;
}
else
{
obj* x_34; obj* x_37; obj* x_38; obj* x_39; obj* x_42; obj* x_43; 
x_34 = lean::cnstr_get(x_1, 0);
lean::inc(x_34);
lean::dec(x_1);
x_37 = lean::box(0);
x_38 = l_lean_parser_term_from_has__view;
x_39 = lean::cnstr_get(x_38, 0);
lean::inc(x_39);
lean::dec(x_38);
x_42 = lean::apply_1(x_39, x_34);
x_43 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_43, 0, x_37);
lean::cnstr_set(x_43, 1, x_42);
return x_43;
}
}
default:
{
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_45; 
x_45 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2;
return x_45;
}
else
{
obj* x_46; obj* x_49; obj* x_50; obj* x_51; obj* x_54; obj* x_55; 
x_46 = lean::cnstr_get(x_1, 0);
lean::inc(x_46);
lean::dec(x_1);
x_49 = lean::box(0);
x_50 = l_lean_parser_term_from_has__view;
x_51 = lean::cnstr_get(x_50, 0);
lean::inc(x_51);
lean::dec(x_50);
x_54 = lean::apply_1(x_51, x_46);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_49);
lean::cnstr_set(x_55, 1, x_54);
return x_55;
}
}
}
}
}
}
obj* l_lean_parser_term_have__from_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_7 = l_option_map___rarg(x_6, x_1);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
x_10 = l_lean_parser_term_from_has__view;
x_11 = lean::cnstr_get(x_10, 1);
lean::inc(x_11);
lean::dec(x_10);
x_14 = lean::apply_1(x_11, x_3);
x_15 = lean::box(0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_14);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_9);
lean::cnstr_set(x_17, 1, x_16);
x_18 = l_lean_parser_term_have__from;
x_19 = l_lean_parser_syntax_mk__node(x_18, x_17);
return x_19;
}
}
obj* _init_l_lean_parser_term_have__from_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have__from_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have__from_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_have__from_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_have__from_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_have__proof() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("have_proof");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; obj* x_9; obj* x_12; obj* x_13; 
x_8 = l_lean_parser_term_have__from_has__view;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_0);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
else
{
obj* x_14; obj* x_15; obj* x_18; obj* x_19; 
x_14 = l_lean_parser_term_have__term_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_0);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
}
}
obj* _init_l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("have_proof");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_have__proof_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__2;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; obj* x_69; obj* x_72; obj* x_73; 
x_68 = l_lean_parser_term_have__from_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_1);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
else
{
obj* x_74; obj* x_75; obj* x_78; obj* x_79; 
x_74 = l_lean_parser_term_have__term_has__view;
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
lean::dec(x_74);
x_78 = lean::apply_1(x_75, x_1);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
}
}
obj* l_lean_parser_term_have__proof_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_have__term_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_lean_parser_term_have__proof;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_lean_parser_term_have__from_has__view;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_26 = l_lean_parser_syntax_mk__node(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_lean_parser_term_have__proof;
x_29 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_lean_parser_term_have__proof_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have__proof_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have__proof_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_have__proof_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_have__proof_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_have() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("have");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_lean_parser_term_opt__ident_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_have_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = lean::box(3);
x_14 = x_0;
x_15 = x_17;
goto lbl_16;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
x_14 = x_20;
x_15 = x_18;
goto lbl_16;
}
lbl_16:
{
obj* x_23; obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_15);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
x_23 = x_26;
goto lbl_24;
}
else
{
obj* x_27; obj* x_29; obj* x_30; 
x_27 = lean::cnstr_get(x_25, 0);
if (lean::is_exclusive(x_25)) {
 lean::cnstr_set(x_25, 0, lean::box(0));
 x_29 = x_25;
} else {
 lean::inc(x_27);
 lean::dec(x_25);
 x_29 = lean::box(0);
}
x_30 = lean::cnstr_get(x_27, 1);
lean::inc(x_30);
lean::dec(x_27);
if (lean::obj_tag(x_30) == 0)
{
obj* x_34; 
lean::dec(x_29);
x_34 = lean::box(0);
x_23 = x_34;
goto lbl_24;
}
else
{
obj* x_35; obj* x_37; 
x_35 = lean::cnstr_get(x_30, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_30, 1);
lean::inc(x_37);
lean::dec(x_30);
if (lean::obj_tag(x_37) == 0)
{
obj* x_40; obj* x_41; obj* x_44; obj* x_45; 
x_40 = l_lean_parser_term_opt__ident_has__view;
x_41 = lean::cnstr_get(x_40, 0);
lean::inc(x_41);
lean::dec(x_40);
x_44 = lean::apply_1(x_41, x_35);
if (lean::is_scalar(x_29)) {
 x_45 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_45 = x_29;
}
lean::cnstr_set(x_45, 0, x_44);
x_23 = x_45;
goto lbl_24;
}
else
{
obj* x_49; 
lean::dec(x_29);
lean::dec(x_35);
lean::dec(x_37);
x_49 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
x_23 = x_49;
goto lbl_24;
}
}
}
lbl_24:
{
obj* x_50; obj* x_51; 
if (lean::obj_tag(x_14) == 0)
{
obj* x_53; 
x_53 = lean::box(3);
x_50 = x_14;
x_51 = x_53;
goto lbl_52;
}
else
{
obj* x_54; obj* x_56; 
x_54 = lean::cnstr_get(x_14, 0);
lean::inc(x_54);
x_56 = lean::cnstr_get(x_14, 1);
lean::inc(x_56);
lean::dec(x_14);
x_50 = x_56;
x_51 = x_54;
goto lbl_52;
}
lbl_52:
{
obj* x_59; obj* x_60; 
if (lean::obj_tag(x_50) == 0)
{
obj* x_62; 
x_62 = lean::box(3);
x_59 = x_50;
x_60 = x_62;
goto lbl_61;
}
else
{
obj* x_63; obj* x_65; 
x_63 = lean::cnstr_get(x_50, 0);
lean::inc(x_63);
x_65 = lean::cnstr_get(x_50, 1);
lean::inc(x_65);
lean::dec(x_50);
x_59 = x_65;
x_60 = x_63;
goto lbl_61;
}
lbl_61:
{
obj* x_68; obj* x_69; obj* x_72; 
x_68 = l_lean_parser_term_have__proof_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_60);
if (lean::obj_tag(x_59) == 0)
{
obj* x_73; 
x_73 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
obj* x_74; obj* x_75; 
x_74 = lean::box(3);
x_75 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_75, 0, x_5);
lean::cnstr_set(x_75, 1, x_23);
lean::cnstr_set(x_75, 2, x_51);
lean::cnstr_set(x_75, 3, x_72);
lean::cnstr_set(x_75, 4, x_73);
lean::cnstr_set(x_75, 5, x_74);
return x_75;
}
else
{
obj* x_76; obj* x_79; 
x_76 = lean::cnstr_get(x_59, 0);
lean::inc(x_76);
lean::dec(x_59);
x_79 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_79, 0, x_5);
lean::cnstr_set(x_79, 1, x_23);
lean::cnstr_set(x_79, 2, x_51);
lean::cnstr_set(x_79, 3, x_72);
lean::cnstr_set(x_79, 4, x_73);
lean::cnstr_set(x_79, 5, x_76);
return x_79;
}
}
else
{
obj* x_80; obj* x_82; 
x_80 = lean::cnstr_get(x_59, 0);
lean::inc(x_80);
x_82 = lean::cnstr_get(x_59, 1);
lean::inc(x_82);
lean::dec(x_59);
switch (lean::obj_tag(x_80)) {
case 0:
{
obj* x_85; obj* x_88; 
x_85 = lean::cnstr_get(x_80, 0);
lean::inc(x_85);
lean::dec(x_80);
x_88 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_88, 0, x_85);
if (lean::obj_tag(x_82) == 0)
{
obj* x_89; obj* x_90; 
x_89 = lean::box(3);
x_90 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_90, 0, x_5);
lean::cnstr_set(x_90, 1, x_23);
lean::cnstr_set(x_90, 2, x_51);
lean::cnstr_set(x_90, 3, x_72);
lean::cnstr_set(x_90, 4, x_88);
lean::cnstr_set(x_90, 5, x_89);
return x_90;
}
else
{
obj* x_91; obj* x_94; 
x_91 = lean::cnstr_get(x_82, 0);
lean::inc(x_91);
lean::dec(x_82);
x_94 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_94, 0, x_5);
lean::cnstr_set(x_94, 1, x_23);
lean::cnstr_set(x_94, 2, x_51);
lean::cnstr_set(x_94, 3, x_72);
lean::cnstr_set(x_94, 4, x_88);
lean::cnstr_set(x_94, 5, x_91);
return x_94;
}
}
case 3:
{
obj* x_95; 
x_95 = lean::box(0);
if (lean::obj_tag(x_82) == 0)
{
obj* x_96; obj* x_97; 
x_96 = lean::box(3);
x_97 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_97, 0, x_5);
lean::cnstr_set(x_97, 1, x_23);
lean::cnstr_set(x_97, 2, x_51);
lean::cnstr_set(x_97, 3, x_72);
lean::cnstr_set(x_97, 4, x_95);
lean::cnstr_set(x_97, 5, x_96);
return x_97;
}
else
{
obj* x_98; obj* x_101; 
x_98 = lean::cnstr_get(x_82, 0);
lean::inc(x_98);
lean::dec(x_82);
x_101 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_101, 0, x_5);
lean::cnstr_set(x_101, 1, x_23);
lean::cnstr_set(x_101, 2, x_51);
lean::cnstr_set(x_101, 3, x_72);
lean::cnstr_set(x_101, 4, x_95);
lean::cnstr_set(x_101, 5, x_98);
return x_101;
}
}
default:
{
obj* x_103; 
lean::dec(x_80);
x_103 = lean::box(0);
if (lean::obj_tag(x_82) == 0)
{
obj* x_104; obj* x_105; 
x_104 = lean::box(3);
x_105 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_105, 0, x_5);
lean::cnstr_set(x_105, 1, x_23);
lean::cnstr_set(x_105, 2, x_51);
lean::cnstr_set(x_105, 3, x_72);
lean::cnstr_set(x_105, 4, x_103);
lean::cnstr_set(x_105, 5, x_104);
return x_105;
}
else
{
obj* x_106; obj* x_109; 
x_106 = lean::cnstr_get(x_82, 0);
lean::inc(x_106);
lean::dec(x_82);
x_109 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_109, 0, x_5);
lean::cnstr_set(x_109, 1, x_23);
lean::cnstr_set(x_109, 2, x_51);
lean::cnstr_set(x_109, 3, x_72);
lean::cnstr_set(x_109, 4, x_103);
lean::cnstr_set(x_109, 5, x_106);
return x_109;
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_have_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; obj* x_38; 
x_38 = l_lean_parser_syntax_as__node___main(x_28);
if (lean::obj_tag(x_38) == 0)
{
obj* x_39; 
x_39 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
x_36 = x_39;
goto lbl_37;
}
else
{
obj* x_40; obj* x_42; obj* x_43; 
x_40 = lean::cnstr_get(x_38, 0);
if (lean::is_exclusive(x_38)) {
 lean::cnstr_set(x_38, 0, lean::box(0));
 x_42 = x_38;
} else {
 lean::inc(x_40);
 lean::dec(x_38);
 x_42 = lean::box(0);
}
x_43 = lean::cnstr_get(x_40, 1);
lean::inc(x_43);
lean::dec(x_40);
if (lean::obj_tag(x_43) == 0)
{
obj* x_47; 
lean::dec(x_42);
x_47 = lean::box(0);
x_36 = x_47;
goto lbl_37;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_43, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_43, 1);
lean::inc(x_50);
lean::dec(x_43);
if (lean::obj_tag(x_50) == 0)
{
obj* x_53; obj* x_54; obj* x_57; obj* x_58; 
x_53 = l_lean_parser_term_opt__ident_has__view;
x_54 = lean::cnstr_get(x_53, 0);
lean::inc(x_54);
lean::dec(x_53);
x_57 = lean::apply_1(x_54, x_48);
if (lean::is_scalar(x_42)) {
 x_58 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_58 = x_42;
}
lean::cnstr_set(x_58, 0, x_57);
x_36 = x_58;
goto lbl_37;
}
else
{
obj* x_62; 
lean::dec(x_42);
lean::dec(x_48);
lean::dec(x_50);
x_62 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
x_36 = x_62;
goto lbl_37;
}
}
}
lbl_37:
{
obj* x_63; obj* x_64; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_66; 
x_66 = lean::box(3);
x_63 = x_27;
x_64 = x_66;
goto lbl_65;
}
else
{
obj* x_67; obj* x_69; 
x_67 = lean::cnstr_get(x_27, 0);
lean::inc(x_67);
x_69 = lean::cnstr_get(x_27, 1);
lean::inc(x_69);
lean::dec(x_27);
x_63 = x_69;
x_64 = x_67;
goto lbl_65;
}
lbl_65:
{
obj* x_72; obj* x_73; 
if (lean::obj_tag(x_63) == 0)
{
obj* x_75; 
x_75 = lean::box(3);
x_72 = x_63;
x_73 = x_75;
goto lbl_74;
}
else
{
obj* x_76; obj* x_78; 
x_76 = lean::cnstr_get(x_63, 0);
lean::inc(x_76);
x_78 = lean::cnstr_get(x_63, 1);
lean::inc(x_78);
lean::dec(x_63);
x_72 = x_78;
x_73 = x_76;
goto lbl_74;
}
lbl_74:
{
obj* x_81; obj* x_82; obj* x_85; 
x_81 = l_lean_parser_term_have__proof_has__view;
x_82 = lean::cnstr_get(x_81, 0);
lean::inc(x_82);
lean::dec(x_81);
x_85 = lean::apply_1(x_82, x_73);
if (lean::obj_tag(x_72) == 0)
{
obj* x_86; 
x_86 = lean::box(0);
if (lean::obj_tag(x_72) == 0)
{
obj* x_87; obj* x_88; 
x_87 = lean::box(3);
x_88 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_88, 0, x_18);
lean::cnstr_set(x_88, 1, x_36);
lean::cnstr_set(x_88, 2, x_64);
lean::cnstr_set(x_88, 3, x_85);
lean::cnstr_set(x_88, 4, x_86);
lean::cnstr_set(x_88, 5, x_87);
return x_88;
}
else
{
obj* x_89; obj* x_92; 
x_89 = lean::cnstr_get(x_72, 0);
lean::inc(x_89);
lean::dec(x_72);
x_92 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_92, 0, x_18);
lean::cnstr_set(x_92, 1, x_36);
lean::cnstr_set(x_92, 2, x_64);
lean::cnstr_set(x_92, 3, x_85);
lean::cnstr_set(x_92, 4, x_86);
lean::cnstr_set(x_92, 5, x_89);
return x_92;
}
}
else
{
obj* x_93; obj* x_95; 
x_93 = lean::cnstr_get(x_72, 0);
lean::inc(x_93);
x_95 = lean::cnstr_get(x_72, 1);
lean::inc(x_95);
lean::dec(x_72);
switch (lean::obj_tag(x_93)) {
case 0:
{
obj* x_98; obj* x_101; 
x_98 = lean::cnstr_get(x_93, 0);
lean::inc(x_98);
lean::dec(x_93);
x_101 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_101, 0, x_98);
if (lean::obj_tag(x_95) == 0)
{
obj* x_102; obj* x_103; 
x_102 = lean::box(3);
x_103 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_103, 0, x_18);
lean::cnstr_set(x_103, 1, x_36);
lean::cnstr_set(x_103, 2, x_64);
lean::cnstr_set(x_103, 3, x_85);
lean::cnstr_set(x_103, 4, x_101);
lean::cnstr_set(x_103, 5, x_102);
return x_103;
}
else
{
obj* x_104; obj* x_107; 
x_104 = lean::cnstr_get(x_95, 0);
lean::inc(x_104);
lean::dec(x_95);
x_107 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_107, 0, x_18);
lean::cnstr_set(x_107, 1, x_36);
lean::cnstr_set(x_107, 2, x_64);
lean::cnstr_set(x_107, 3, x_85);
lean::cnstr_set(x_107, 4, x_101);
lean::cnstr_set(x_107, 5, x_104);
return x_107;
}
}
case 3:
{
obj* x_108; 
x_108 = lean::box(0);
if (lean::obj_tag(x_95) == 0)
{
obj* x_109; obj* x_110; 
x_109 = lean::box(3);
x_110 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_110, 0, x_18);
lean::cnstr_set(x_110, 1, x_36);
lean::cnstr_set(x_110, 2, x_64);
lean::cnstr_set(x_110, 3, x_85);
lean::cnstr_set(x_110, 4, x_108);
lean::cnstr_set(x_110, 5, x_109);
return x_110;
}
else
{
obj* x_111; obj* x_114; 
x_111 = lean::cnstr_get(x_95, 0);
lean::inc(x_111);
lean::dec(x_95);
x_114 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_114, 0, x_18);
lean::cnstr_set(x_114, 1, x_36);
lean::cnstr_set(x_114, 2, x_64);
lean::cnstr_set(x_114, 3, x_85);
lean::cnstr_set(x_114, 4, x_108);
lean::cnstr_set(x_114, 5, x_111);
return x_114;
}
}
default:
{
obj* x_116; 
lean::dec(x_93);
x_116 = lean::box(0);
if (lean::obj_tag(x_95) == 0)
{
obj* x_117; obj* x_118; 
x_117 = lean::box(3);
x_118 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_118, 0, x_18);
lean::cnstr_set(x_118, 1, x_36);
lean::cnstr_set(x_118, 2, x_64);
lean::cnstr_set(x_118, 3, x_85);
lean::cnstr_set(x_118, 4, x_116);
lean::cnstr_set(x_118, 5, x_117);
return x_118;
}
else
{
obj* x_119; obj* x_122; 
x_119 = lean::cnstr_get(x_95, 0);
lean::inc(x_119);
lean::dec(x_95);
x_122 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_122, 0, x_18);
lean::cnstr_set(x_122, 1, x_36);
lean::cnstr_set(x_122, 2, x_64);
lean::cnstr_set(x_122, 3, x_85);
lean::cnstr_set(x_122, 4, x_116);
lean::cnstr_set(x_122, 5, x_119);
return x_122;
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_have_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
lean::dec(x_0);
x_14 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_15 = l_option_map___rarg(x_14, x_1);
x_16 = lean::box(3);
x_17 = l_option_get__or__else___main___rarg(x_15, x_16);
x_18 = l_lean_parser_term_have__proof_has__view;
x_19 = lean::cnstr_get(x_18, 1);
lean::inc(x_19);
lean::dec(x_18);
x_22 = lean::apply_1(x_19, x_7);
x_23 = l_option_map___rarg(x_14, x_9);
x_24 = l_option_get__or__else___main___rarg(x_23, x_16);
x_25 = lean::box(0);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_11);
lean::cnstr_set(x_26, 1, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_24);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_22);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_5);
lean::cnstr_set(x_29, 1, x_28);
if (lean::obj_tag(x_3) == 0)
{
obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_30 = l_lean_parser_combinators_many___rarg___closed__1;
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_29);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_17);
lean::cnstr_set(x_32, 1, x_31);
x_33 = l_lean_parser_term_have;
x_34 = l_lean_parser_syntax_mk__node(x_33, x_32);
return x_34;
}
else
{
obj* x_35; obj* x_38; obj* x_39; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; 
x_35 = lean::cnstr_get(x_3, 0);
lean::inc(x_35);
lean::dec(x_3);
x_38 = l_lean_parser_term_opt__ident_has__view;
x_39 = lean::cnstr_get(x_38, 1);
lean::inc(x_39);
lean::dec(x_38);
x_42 = lean::apply_1(x_39, x_35);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_25);
x_44 = l_lean_parser_no__kind;
x_45 = l_lean_parser_syntax_mk__node(x_44, x_43);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_29);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_17);
lean::cnstr_set(x_47, 1, x_46);
x_48 = l_lean_parser_term_have;
x_49 = l_lean_parser_syntax_mk__node(x_48, x_47);
return x_49;
}
}
}
obj* _init_l_lean_parser_term_have_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_have_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_have_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_have_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_0 = lean::mk_string("have ");
x_1 = lean::mk_nat_obj(0u);
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::mk_string(" := ");
x_4 = l_lean_parser_symbol_tokens___rarg(x_3, x_1);
x_5 = lean::box(0);
x_6 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_7 = l_lean_parser_list_cons_tokens___rarg(x_6, x_5);
lean::inc(x_7);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_4, x_7);
x_10 = l_lean_parser_tokens___rarg(x_9);
x_11 = lean::mk_string(", ");
x_12 = l_lean_parser_symbol_tokens___rarg(x_11, x_1);
x_13 = l_lean_parser_term_from_parser_lean_parser_has__tokens;
x_14 = l_lean_parser_list_cons_tokens___rarg(x_13, x_5);
lean::inc(x_12);
x_16 = l_lean_parser_list_cons_tokens___rarg(x_12, x_14);
x_17 = l_lean_parser_tokens___rarg(x_16);
x_18 = l_lean_parser_list_cons_tokens___rarg(x_17, x_5);
x_19 = l_lean_parser_list_cons_tokens___rarg(x_10, x_18);
x_20 = l_lean_parser_tokens___rarg(x_19);
x_21 = l_lean_parser_list_cons_tokens___rarg(x_20, x_5);
x_22 = l_lean_parser_tokens___rarg(x_21);
x_23 = l_lean_parser_list_cons_tokens___rarg(x_12, x_7);
x_24 = l_lean_parser_list_cons_tokens___rarg(x_22, x_23);
x_25 = l_lean_parser_list_cons_tokens___rarg(x_6, x_24);
x_26 = l_lean_parser_term_opt__ident_parser_lean_parser_has__tokens;
x_27 = l_lean_parser_list_cons_tokens___rarg(x_26, x_25);
x_28 = l_lean_parser_list_cons_tokens___rarg(x_2, x_27);
x_29 = l_lean_parser_tokens___rarg(x_28);
return x_29;
}
}
obj* _init_l_lean_parser_term_have_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; 
x_0 = lean::mk_string("have ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::mk_string(" := ");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_8);
lean::closure_set(x_11, 1, x_4);
lean::closure_set(x_11, 2, x_10);
x_12 = lean::box(0);
lean::inc(x_6);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_6);
lean::cnstr_set(x_14, 1, x_12);
lean::inc(x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_11);
lean::cnstr_set(x_16, 1, x_14);
x_17 = l_lean_parser_term_have__term;
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_18, 0, x_17);
lean::closure_set(x_18, 1, x_16);
x_19 = lean::mk_string(", ");
x_20 = l_string_trim(x_19);
lean::inc(x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_22, 0, x_20);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_23, 0, x_20);
lean::closure_set(x_23, 1, x_4);
lean::closure_set(x_23, 2, x_22);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_from_parser), 5, 0);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_12);
lean::inc(x_23);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_23);
lean::cnstr_set(x_27, 1, x_25);
x_28 = l_lean_parser_term_have__from;
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_29, 0, x_28);
lean::closure_set(x_29, 1, x_27);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_12);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_18);
lean::cnstr_set(x_31, 1, x_30);
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_32, 0, x_31);
lean::closure_set(x_32, 1, x_4);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_12);
x_34 = l_lean_parser_term_have__proof;
x_35 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_35, 0, x_34);
lean::closure_set(x_35, 1, x_33);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_23);
lean::cnstr_set(x_36, 1, x_14);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_35);
lean::cnstr_set(x_37, 1, x_36);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_6);
lean::cnstr_set(x_38, 1, x_37);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_parser), 5, 0);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_38);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_5);
lean::cnstr_set(x_41, 1, x_40);
x_42 = l_lean_parser_term__parser__m_monad;
x_43 = l_lean_parser_term__parser__m_monad__except;
x_44 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_45 = l_lean_parser_term__parser__m_alternative;
x_46 = l_lean_parser_term_have;
x_47 = l_lean_parser_term_have_has__view;
x_48 = l_lean_parser_combinators_node_view___rarg(x_42, x_43, x_44, x_45, x_46, x_41, x_47);
return x_48;
}
}
obj* _init_l_lean_parser_term_have_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; 
x_0 = lean::mk_string("have ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::mk_string(" := ");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_8);
lean::closure_set(x_11, 1, x_4);
lean::closure_set(x_11, 2, x_10);
x_12 = lean::box(0);
lean::inc(x_6);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_6);
lean::cnstr_set(x_14, 1, x_12);
lean::inc(x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_11);
lean::cnstr_set(x_16, 1, x_14);
x_17 = l_lean_parser_term_have__term;
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_18, 0, x_17);
lean::closure_set(x_18, 1, x_16);
x_19 = lean::mk_string(", ");
x_20 = l_string_trim(x_19);
lean::inc(x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_22, 0, x_20);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_23, 0, x_20);
lean::closure_set(x_23, 1, x_4);
lean::closure_set(x_23, 2, x_22);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_from_parser), 5, 0);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_12);
lean::inc(x_23);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_23);
lean::cnstr_set(x_27, 1, x_25);
x_28 = l_lean_parser_term_have__from;
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_29, 0, x_28);
lean::closure_set(x_29, 1, x_27);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_12);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_18);
lean::cnstr_set(x_31, 1, x_30);
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_32, 0, x_31);
lean::closure_set(x_32, 1, x_4);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_12);
x_34 = l_lean_parser_term_have__proof;
x_35 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_35, 0, x_34);
lean::closure_set(x_35, 1, x_33);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_23);
lean::cnstr_set(x_36, 1, x_14);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_35);
lean::cnstr_set(x_37, 1, x_36);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_6);
lean::cnstr_set(x_38, 1, x_37);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_parser), 5, 0);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_38);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_5);
lean::cnstr_set(x_41, 1, x_40);
return x_41;
}
}
obj* l_lean_parser_term_have_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_have;
x_6 = l_lean_parser_term_have_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_show() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("show");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_show_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = lean::box(3);
x_14 = x_0;
x_15 = x_17;
goto lbl_16;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
x_14 = x_20;
x_15 = x_18;
goto lbl_16;
}
lbl_16:
{
obj* x_23; obj* x_24; 
if (lean::obj_tag(x_14) == 0)
{
obj* x_26; 
x_26 = lean::box(3);
x_23 = x_14;
x_24 = x_26;
goto lbl_25;
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_14, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_14, 1);
lean::inc(x_29);
lean::dec(x_14);
x_23 = x_29;
x_24 = x_27;
goto lbl_25;
}
lbl_25:
{
switch (lean::obj_tag(x_24)) {
case 0:
{
obj* x_32; obj* x_35; 
x_32 = lean::cnstr_get(x_24, 0);
lean::inc(x_32);
lean::dec(x_24);
x_35 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_35, 0, x_32);
if (lean::obj_tag(x_23) == 0)
{
obj* x_36; obj* x_37; 
x_36 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
x_37 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_37, 0, x_5);
lean::cnstr_set(x_37, 1, x_15);
lean::cnstr_set(x_37, 2, x_35);
lean::cnstr_set(x_37, 3, x_36);
return x_37;
}
else
{
obj* x_38; obj* x_41; obj* x_42; obj* x_45; obj* x_46; 
x_38 = lean::cnstr_get(x_23, 0);
lean::inc(x_38);
lean::dec(x_23);
x_41 = l_lean_parser_term_from_has__view;
x_42 = lean::cnstr_get(x_41, 0);
lean::inc(x_42);
lean::dec(x_41);
x_45 = lean::apply_1(x_42, x_38);
x_46 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_46, 0, x_5);
lean::cnstr_set(x_46, 1, x_15);
lean::cnstr_set(x_46, 2, x_35);
lean::cnstr_set(x_46, 3, x_45);
return x_46;
}
}
case 3:
{
obj* x_47; 
x_47 = lean::box(0);
if (lean::obj_tag(x_23) == 0)
{
obj* x_48; obj* x_49; 
x_48 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
x_49 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_49, 0, x_5);
lean::cnstr_set(x_49, 1, x_15);
lean::cnstr_set(x_49, 2, x_47);
lean::cnstr_set(x_49, 3, x_48);
return x_49;
}
else
{
obj* x_50; obj* x_53; obj* x_54; obj* x_57; obj* x_58; 
x_50 = lean::cnstr_get(x_23, 0);
lean::inc(x_50);
lean::dec(x_23);
x_53 = l_lean_parser_term_from_has__view;
x_54 = lean::cnstr_get(x_53, 0);
lean::inc(x_54);
lean::dec(x_53);
x_57 = lean::apply_1(x_54, x_50);
x_58 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_58, 0, x_5);
lean::cnstr_set(x_58, 1, x_15);
lean::cnstr_set(x_58, 2, x_47);
lean::cnstr_set(x_58, 3, x_57);
return x_58;
}
}
default:
{
obj* x_60; 
lean::dec(x_24);
x_60 = lean::box(0);
if (lean::obj_tag(x_23) == 0)
{
obj* x_61; obj* x_62; 
x_61 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
x_62 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_62, 0, x_5);
lean::cnstr_set(x_62, 1, x_15);
lean::cnstr_set(x_62, 2, x_60);
lean::cnstr_set(x_62, 3, x_61);
return x_62;
}
else
{
obj* x_63; obj* x_66; obj* x_67; obj* x_70; obj* x_71; 
x_63 = lean::cnstr_get(x_23, 0);
lean::inc(x_63);
lean::dec(x_23);
x_66 = l_lean_parser_term_from_has__view;
x_67 = lean::cnstr_get(x_66, 0);
lean::inc(x_67);
lean::dec(x_66);
x_70 = lean::apply_1(x_67, x_63);
x_71 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_71, 0, x_5);
lean::cnstr_set(x_71, 1, x_15);
lean::cnstr_set(x_71, 2, x_60);
lean::cnstr_set(x_71, 3, x_70);
return x_71;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_show_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_show_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; obj* x_37; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_39; 
x_39 = lean::box(3);
x_36 = x_27;
x_37 = x_39;
goto lbl_38;
}
else
{
obj* x_40; obj* x_42; 
x_40 = lean::cnstr_get(x_27, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_27, 1);
lean::inc(x_42);
lean::dec(x_27);
x_36 = x_42;
x_37 = x_40;
goto lbl_38;
}
lbl_38:
{
switch (lean::obj_tag(x_37)) {
case 0:
{
obj* x_45; obj* x_48; 
x_45 = lean::cnstr_get(x_37, 0);
lean::inc(x_45);
lean::dec(x_37);
x_48 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_48, 0, x_45);
if (lean::obj_tag(x_36) == 0)
{
obj* x_49; obj* x_50; 
x_49 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
x_50 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_50, 0, x_18);
lean::cnstr_set(x_50, 1, x_28);
lean::cnstr_set(x_50, 2, x_48);
lean::cnstr_set(x_50, 3, x_49);
return x_50;
}
else
{
obj* x_51; obj* x_54; obj* x_55; obj* x_58; obj* x_59; 
x_51 = lean::cnstr_get(x_36, 0);
lean::inc(x_51);
lean::dec(x_36);
x_54 = l_lean_parser_term_from_has__view;
x_55 = lean::cnstr_get(x_54, 0);
lean::inc(x_55);
lean::dec(x_54);
x_58 = lean::apply_1(x_55, x_51);
x_59 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_59, 0, x_18);
lean::cnstr_set(x_59, 1, x_28);
lean::cnstr_set(x_59, 2, x_48);
lean::cnstr_set(x_59, 3, x_58);
return x_59;
}
}
case 3:
{
obj* x_60; 
x_60 = lean::box(0);
if (lean::obj_tag(x_36) == 0)
{
obj* x_61; obj* x_62; 
x_61 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
x_62 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_62, 0, x_18);
lean::cnstr_set(x_62, 1, x_28);
lean::cnstr_set(x_62, 2, x_60);
lean::cnstr_set(x_62, 3, x_61);
return x_62;
}
else
{
obj* x_63; obj* x_66; obj* x_67; obj* x_70; obj* x_71; 
x_63 = lean::cnstr_get(x_36, 0);
lean::inc(x_63);
lean::dec(x_36);
x_66 = l_lean_parser_term_from_has__view;
x_67 = lean::cnstr_get(x_66, 0);
lean::inc(x_67);
lean::dec(x_66);
x_70 = lean::apply_1(x_67, x_63);
x_71 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_71, 0, x_18);
lean::cnstr_set(x_71, 1, x_28);
lean::cnstr_set(x_71, 2, x_60);
lean::cnstr_set(x_71, 3, x_70);
return x_71;
}
}
default:
{
obj* x_73; 
lean::dec(x_37);
x_73 = lean::box(0);
if (lean::obj_tag(x_36) == 0)
{
obj* x_74; obj* x_75; 
x_74 = l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1;
x_75 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_75, 0, x_18);
lean::cnstr_set(x_75, 1, x_28);
lean::cnstr_set(x_75, 2, x_73);
lean::cnstr_set(x_75, 3, x_74);
return x_75;
}
else
{
obj* x_76; obj* x_79; obj* x_80; obj* x_83; obj* x_84; 
x_76 = lean::cnstr_get(x_36, 0);
lean::inc(x_76);
lean::dec(x_36);
x_79 = l_lean_parser_term_from_has__view;
x_80 = lean::cnstr_get(x_79, 0);
lean::inc(x_80);
lean::dec(x_79);
x_83 = lean::apply_1(x_80, x_76);
x_84 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_84, 0, x_18);
lean::cnstr_set(x_84, 1, x_28);
lean::cnstr_set(x_84, 2, x_73);
lean::cnstr_set(x_84, 3, x_83);
return x_84;
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_show_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
lean::dec(x_0);
x_10 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_11 = l_option_map___rarg(x_10, x_1);
x_12 = lean::box(3);
x_13 = l_option_get__or__else___main___rarg(x_11, x_12);
x_14 = l_option_map___rarg(x_10, x_5);
x_15 = l_option_get__or__else___main___rarg(x_14, x_12);
x_16 = l_lean_parser_term_from_has__view;
x_17 = lean::cnstr_get(x_16, 1);
lean::inc(x_17);
lean::dec(x_16);
x_20 = lean::apply_1(x_17, x_7);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_15);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_3);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_13);
lean::cnstr_set(x_25, 1, x_24);
x_26 = l_lean_parser_term_show;
x_27 = l_lean_parser_syntax_mk__node(x_26, x_25);
return x_27;
}
}
obj* _init_l_lean_parser_term_show_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_show_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_show_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_show_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_show_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_show_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_0 = lean::mk_string("show ");
x_1 = lean::mk_nat_obj(0u);
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::mk_string(", ");
x_4 = l_lean_parser_symbol_tokens___rarg(x_3, x_1);
x_5 = lean::box(0);
x_6 = l_lean_parser_term_from_parser_lean_parser_has__tokens;
x_7 = l_lean_parser_list_cons_tokens___rarg(x_6, x_5);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_4, x_7);
x_9 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_10 = l_lean_parser_list_cons_tokens___rarg(x_9, x_8);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_2, x_10);
x_12 = l_lean_parser_tokens___rarg(x_11);
return x_12;
}
}
obj* _init_l_lean_parser_term_show_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_0 = lean::mk_string("show ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::mk_string(", ");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_8);
lean::closure_set(x_11, 1, x_4);
lean::closure_set(x_11, 2, x_10);
x_12 = lean::box(0);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_from_parser), 5, 0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_12);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_11);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_6);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_5);
lean::cnstr_set(x_17, 1, x_16);
x_18 = l_lean_parser_term__parser__m_monad;
x_19 = l_lean_parser_term__parser__m_monad__except;
x_20 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_21 = l_lean_parser_term__parser__m_alternative;
x_22 = l_lean_parser_term_show;
x_23 = l_lean_parser_term_show_has__view;
x_24 = l_lean_parser_combinators_node_view___rarg(x_18, x_19, x_20, x_21, x_22, x_17, x_23);
return x_24;
}
}
obj* _init_l_lean_parser_term_show_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_0 = lean::mk_string("show ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::mk_string(", ");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_8);
lean::closure_set(x_11, 1, x_4);
lean::closure_set(x_11, 2, x_10);
x_12 = lean::box(0);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_from_parser), 5, 0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_12);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_11);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_6);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_5);
lean::cnstr_set(x_17, 1, x_16);
return x_17;
}
}
obj* l_lean_parser_term_show_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_show;
x_6 = l_lean_parser_term_show_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_match__equation() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("match_equation");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_list_map___main___at_lean_parser_term_match__equation_has__view_x_27___spec__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_12; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
x_7 = lean::cnstr_get(x_2, 0);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_2, 1);
lean::inc(x_9);
lean::dec(x_2);
x_12 = l_list_map___main___at_lean_parser_term_match__equation_has__view_x_27___spec__1(x_4);
if (lean::obj_tag(x_9) == 0)
{
obj* x_13; obj* x_14; obj* x_15; 
x_13 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_14 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_14 = x_6;
}
lean::cnstr_set(x_14, 0, x_7);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_12);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_16 = lean::cnstr_get(x_9, 0);
lean::inc(x_16);
lean::dec(x_9);
x_19 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_20 = l_option_map___rarg(x_19, x_16);
x_21 = lean::box(3);
x_22 = l_option_get__or__else___main___rarg(x_20, x_21);
x_23 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_24 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_24 = x_6;
}
lean::cnstr_set(x_24, 0, x_22);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_7);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_12);
return x_26;
}
}
}
}
obj* _init_l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_3, 0, x_2);
lean::cnstr_set(x_3, 1, x_0);
x_4 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_0);
lean::cnstr_set(x_4, 2, x_1);
return x_4;
}
}
obj* _init_l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
x_5 = l_lean_parser_syntax_as__node___main(x_1);
if (lean::obj_tag(x_5) == 0)
{
obj* x_6; 
x_6 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_7; 
x_7 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
return x_7;
}
else
{
obj* x_8; obj* x_11; obj* x_12; 
x_8 = lean::cnstr_get(x_0, 0);
lean::inc(x_8);
lean::dec(x_0);
x_11 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_12 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_6);
lean::cnstr_set(x_12, 2, x_8);
return x_12;
}
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_0, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_0, 1);
lean::inc(x_15);
lean::dec(x_0);
switch (lean::obj_tag(x_13)) {
case 0:
{
obj* x_18; obj* x_21; 
x_18 = lean::cnstr_get(x_13, 0);
lean::inc(x_18);
lean::dec(x_13);
x_21 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_21, 0, x_18);
if (lean::obj_tag(x_15) == 0)
{
obj* x_22; obj* x_23; obj* x_24; 
x_22 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_23 = lean::box(3);
x_24 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_24, 0, x_22);
lean::cnstr_set(x_24, 1, x_21);
lean::cnstr_set(x_24, 2, x_23);
return x_24;
}
else
{
obj* x_25; obj* x_28; obj* x_29; 
x_25 = lean::cnstr_get(x_15, 0);
lean::inc(x_25);
lean::dec(x_15);
x_28 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_29 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_21);
lean::cnstr_set(x_29, 2, x_25);
return x_29;
}
}
case 3:
{
if (lean::obj_tag(x_15) == 0)
{
obj* x_30; 
x_30 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
return x_30;
}
else
{
obj* x_31; obj* x_34; obj* x_35; 
x_31 = lean::cnstr_get(x_15, 0);
lean::inc(x_31);
lean::dec(x_15);
x_34 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_35 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_6);
lean::cnstr_set(x_35, 2, x_31);
return x_35;
}
}
default:
{
lean::dec(x_13);
if (lean::obj_tag(x_15) == 0)
{
obj* x_37; 
x_37 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
return x_37;
}
else
{
obj* x_38; obj* x_41; obj* x_42; 
x_38 = lean::cnstr_get(x_15, 0);
lean::inc(x_38);
lean::dec(x_15);
x_41 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_42 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_6);
lean::cnstr_set(x_42, 2, x_38);
return x_42;
}
}
}
}
}
else
{
obj* x_43; obj* x_45; obj* x_46; obj* x_49; 
x_43 = lean::cnstr_get(x_5, 0);
if (lean::is_exclusive(x_5)) {
 lean::cnstr_set(x_5, 0, lean::box(0));
 x_45 = x_5;
} else {
 lean::inc(x_43);
 lean::dec(x_5);
 x_45 = lean::box(0);
}
x_46 = lean::cnstr_get(x_43, 1);
lean::inc(x_46);
lean::dec(x_43);
x_49 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_46);
if (lean::obj_tag(x_0) == 0)
{
obj* x_51; 
lean::dec(x_45);
x_51 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_52; obj* x_53; 
x_52 = lean::box(3);
x_53 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_53, 0, x_49);
lean::cnstr_set(x_53, 1, x_51);
lean::cnstr_set(x_53, 2, x_52);
return x_53;
}
else
{
obj* x_54; obj* x_57; 
x_54 = lean::cnstr_get(x_0, 0);
lean::inc(x_54);
lean::dec(x_0);
x_57 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_57, 0, x_49);
lean::cnstr_set(x_57, 1, x_51);
lean::cnstr_set(x_57, 2, x_54);
return x_57;
}
}
else
{
obj* x_58; obj* x_60; 
x_58 = lean::cnstr_get(x_0, 0);
lean::inc(x_58);
x_60 = lean::cnstr_get(x_0, 1);
lean::inc(x_60);
lean::dec(x_0);
switch (lean::obj_tag(x_58)) {
case 0:
{
obj* x_63; obj* x_66; 
x_63 = lean::cnstr_get(x_58, 0);
lean::inc(x_63);
lean::dec(x_58);
if (lean::is_scalar(x_45)) {
 x_66 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_66 = x_45;
}
lean::cnstr_set(x_66, 0, x_63);
if (lean::obj_tag(x_60) == 0)
{
obj* x_67; obj* x_68; 
x_67 = lean::box(3);
x_68 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_68, 0, x_49);
lean::cnstr_set(x_68, 1, x_66);
lean::cnstr_set(x_68, 2, x_67);
return x_68;
}
else
{
obj* x_69; obj* x_72; 
x_69 = lean::cnstr_get(x_60, 0);
lean::inc(x_69);
lean::dec(x_60);
x_72 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_72, 0, x_49);
lean::cnstr_set(x_72, 1, x_66);
lean::cnstr_set(x_72, 2, x_69);
return x_72;
}
}
case 3:
{
obj* x_74; 
lean::dec(x_45);
x_74 = lean::box(0);
if (lean::obj_tag(x_60) == 0)
{
obj* x_75; obj* x_76; 
x_75 = lean::box(3);
x_76 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_76, 0, x_49);
lean::cnstr_set(x_76, 1, x_74);
lean::cnstr_set(x_76, 2, x_75);
return x_76;
}
else
{
obj* x_77; obj* x_80; 
x_77 = lean::cnstr_get(x_60, 0);
lean::inc(x_77);
lean::dec(x_60);
x_80 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_80, 0, x_49);
lean::cnstr_set(x_80, 1, x_74);
lean::cnstr_set(x_80, 2, x_77);
return x_80;
}
}
default:
{
obj* x_83; 
lean::dec(x_45);
lean::dec(x_58);
x_83 = lean::box(0);
if (lean::obj_tag(x_60) == 0)
{
obj* x_84; obj* x_85; 
x_84 = lean::box(3);
x_85 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_85, 0, x_49);
lean::cnstr_set(x_85, 1, x_83);
lean::cnstr_set(x_85, 2, x_84);
return x_85;
}
else
{
obj* x_86; obj* x_89; 
x_86 = lean::cnstr_get(x_60, 0);
lean::inc(x_86);
lean::dec(x_60);
x_89 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_89, 0, x_49);
lean::cnstr_set(x_89, 1, x_83);
lean::cnstr_set(x_89, 2, x_86);
return x_89;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_match__equation_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
x_18 = l_lean_parser_syntax_as__node___main(x_2);
if (lean::obj_tag(x_18) == 0)
{
obj* x_19; 
x_19 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_20; 
x_20 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
return x_20;
}
else
{
obj* x_21; obj* x_24; obj* x_25; 
x_21 = lean::cnstr_get(x_1, 0);
lean::inc(x_21);
lean::dec(x_1);
x_24 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_25 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_19);
lean::cnstr_set(x_25, 2, x_21);
return x_25;
}
}
else
{
obj* x_26; obj* x_28; 
x_26 = lean::cnstr_get(x_1, 0);
lean::inc(x_26);
x_28 = lean::cnstr_get(x_1, 1);
lean::inc(x_28);
lean::dec(x_1);
switch (lean::obj_tag(x_26)) {
case 0:
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_26, 0);
lean::inc(x_31);
lean::dec(x_26);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_31);
if (lean::obj_tag(x_28) == 0)
{
obj* x_35; obj* x_36; obj* x_37; 
x_35 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_36 = lean::box(3);
x_37 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_37, 0, x_35);
lean::cnstr_set(x_37, 1, x_34);
lean::cnstr_set(x_37, 2, x_36);
return x_37;
}
else
{
obj* x_38; obj* x_41; obj* x_42; 
x_38 = lean::cnstr_get(x_28, 0);
lean::inc(x_38);
lean::dec(x_28);
x_41 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_42 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_34);
lean::cnstr_set(x_42, 2, x_38);
return x_42;
}
}
case 3:
{
if (lean::obj_tag(x_28) == 0)
{
obj* x_43; 
x_43 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
return x_43;
}
else
{
obj* x_44; obj* x_47; obj* x_48; 
x_44 = lean::cnstr_get(x_28, 0);
lean::inc(x_44);
lean::dec(x_28);
x_47 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_48 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_48, 0, x_47);
lean::cnstr_set(x_48, 1, x_19);
lean::cnstr_set(x_48, 2, x_44);
return x_48;
}
}
default:
{
lean::dec(x_26);
if (lean::obj_tag(x_28) == 0)
{
obj* x_50; 
x_50 = l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1;
return x_50;
}
else
{
obj* x_51; obj* x_54; obj* x_55; 
x_51 = lean::cnstr_get(x_28, 0);
lean::inc(x_51);
lean::dec(x_28);
x_54 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_19);
lean::cnstr_set(x_55, 2, x_51);
return x_55;
}
}
}
}
}
else
{
obj* x_56; obj* x_58; obj* x_59; obj* x_62; 
x_56 = lean::cnstr_get(x_18, 0);
if (lean::is_exclusive(x_18)) {
 lean::cnstr_set(x_18, 0, lean::box(0));
 x_58 = x_18;
} else {
 lean::inc(x_56);
 lean::dec(x_18);
 x_58 = lean::box(0);
}
x_59 = lean::cnstr_get(x_56, 1);
lean::inc(x_59);
lean::dec(x_56);
x_62 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_59);
if (lean::obj_tag(x_1) == 0)
{
obj* x_64; 
lean::dec(x_58);
x_64 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_65; obj* x_66; 
x_65 = lean::box(3);
x_66 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_66, 0, x_62);
lean::cnstr_set(x_66, 1, x_64);
lean::cnstr_set(x_66, 2, x_65);
return x_66;
}
else
{
obj* x_67; obj* x_70; 
x_67 = lean::cnstr_get(x_1, 0);
lean::inc(x_67);
lean::dec(x_1);
x_70 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_70, 0, x_62);
lean::cnstr_set(x_70, 1, x_64);
lean::cnstr_set(x_70, 2, x_67);
return x_70;
}
}
else
{
obj* x_71; obj* x_73; 
x_71 = lean::cnstr_get(x_1, 0);
lean::inc(x_71);
x_73 = lean::cnstr_get(x_1, 1);
lean::inc(x_73);
lean::dec(x_1);
switch (lean::obj_tag(x_71)) {
case 0:
{
obj* x_76; obj* x_79; 
x_76 = lean::cnstr_get(x_71, 0);
lean::inc(x_76);
lean::dec(x_71);
if (lean::is_scalar(x_58)) {
 x_79 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_79 = x_58;
}
lean::cnstr_set(x_79, 0, x_76);
if (lean::obj_tag(x_73) == 0)
{
obj* x_80; obj* x_81; 
x_80 = lean::box(3);
x_81 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_81, 0, x_62);
lean::cnstr_set(x_81, 1, x_79);
lean::cnstr_set(x_81, 2, x_80);
return x_81;
}
else
{
obj* x_82; obj* x_85; 
x_82 = lean::cnstr_get(x_73, 0);
lean::inc(x_82);
lean::dec(x_73);
x_85 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_85, 0, x_62);
lean::cnstr_set(x_85, 1, x_79);
lean::cnstr_set(x_85, 2, x_82);
return x_85;
}
}
case 3:
{
obj* x_87; 
lean::dec(x_58);
x_87 = lean::box(0);
if (lean::obj_tag(x_73) == 0)
{
obj* x_88; obj* x_89; 
x_88 = lean::box(3);
x_89 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_89, 0, x_62);
lean::cnstr_set(x_89, 1, x_87);
lean::cnstr_set(x_89, 2, x_88);
return x_89;
}
else
{
obj* x_90; obj* x_93; 
x_90 = lean::cnstr_get(x_73, 0);
lean::inc(x_90);
lean::dec(x_73);
x_93 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_93, 0, x_62);
lean::cnstr_set(x_93, 1, x_87);
lean::cnstr_set(x_93, 2, x_90);
return x_93;
}
}
default:
{
obj* x_96; 
lean::dec(x_71);
lean::dec(x_58);
x_96 = lean::box(0);
if (lean::obj_tag(x_73) == 0)
{
obj* x_97; obj* x_98; 
x_97 = lean::box(3);
x_98 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_98, 0, x_62);
lean::cnstr_set(x_98, 1, x_96);
lean::cnstr_set(x_98, 2, x_97);
return x_98;
}
else
{
obj* x_99; obj* x_102; 
x_99 = lean::cnstr_get(x_73, 0);
lean::inc(x_99);
lean::dec(x_73);
x_102 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_102, 0, x_62);
lean::cnstr_set(x_102, 1, x_96);
lean::cnstr_set(x_102, 2, x_99);
return x_102;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_match__equation_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_list_map___main___at_lean_parser_term_match__equation_has__view_x_27___spec__1(x_1);
x_9 = l_list_join___main___rarg(x_8);
x_10 = l_lean_parser_no__kind;
x_11 = l_lean_parser_syntax_mk__node(x_10, x_9);
x_12 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_13 = l_option_map___rarg(x_12, x_3);
x_14 = lean::box(3);
x_15 = l_option_get__or__else___main___rarg(x_13, x_14);
x_16 = lean::box(0);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_5);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_15);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_11);
lean::cnstr_set(x_19, 1, x_18);
x_20 = l_lean_parser_term_match__equation;
x_21 = l_lean_parser_syntax_mk__node(x_20, x_19);
return x_21;
}
}
obj* _init_l_lean_parser_term_match__equation_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_match__equation_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_match__equation_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_match__equation_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_match__equation_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_match() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("match");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1(obj* x_0, obj* x_1, uint8 x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; uint8 x_13; obj* x_14; obj* x_15; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_8 = lean::string_iterator_remaining(x_6);
x_9 = lean::box(0);
x_10 = lean::mk_nat_obj(1u);
x_11 = lean::nat_add(x_8, x_10);
lean::dec(x_8);
x_13 = 0;
x_14 = l___private_init_lean_parser_combinators_2__sep__by__aux___main___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__2(x_0, x_1, x_2, x_13, x_9, x_11, x_3, x_4, x_5, x_6, x_7);
x_15 = lean::cnstr_get(x_14, 0);
x_17 = lean::cnstr_get(x_14, 1);
if (lean::is_exclusive(x_14)) {
 x_19 = x_14;
} else {
 lean::inc(x_15);
 lean::inc(x_17);
 lean::dec(x_14);
 x_19 = lean::box(0);
}
x_20 = l_lean_parser_finish__comment__block___closed__2;
x_21 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_20, x_15);
if (lean::is_scalar(x_19)) {
 x_22 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_22 = x_19;
}
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_17);
return x_22;
}
}
obj* l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_match_has__view_x_27___spec__2(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
if (lean::obj_tag(x_4) == 0)
{
obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_7 = l_lean_parser_term_match__equation_has__view;
x_8 = lean::cnstr_get(x_7, 0);
lean::inc(x_8);
lean::dec(x_7);
x_11 = lean::apply_1(x_8, x_2);
x_12 = lean::box(0);
x_13 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set(x_13, 1, x_12);
if (lean::is_scalar(x_6)) {
 x_14 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_14 = x_6;
}
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_12);
return x_14;
}
else
{
obj* x_15; obj* x_17; obj* x_20; obj* x_21; obj* x_24; obj* x_25; 
x_15 = lean::cnstr_get(x_4, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_4, 1);
lean::inc(x_17);
lean::dec(x_4);
x_20 = l_lean_parser_term_match__equation_has__view;
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
lean::dec(x_20);
x_24 = lean::apply_1(x_21, x_2);
x_25 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_match_has__view_x_27___spec__2(x_17);
switch (lean::obj_tag(x_15)) {
case 0:
{
obj* x_26; obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
x_26 = lean::cnstr_get(x_15, 0);
lean::inc(x_26);
lean::dec(x_15);
x_29 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_29, 0, x_26);
x_30 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_30, 0, x_29);
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_24);
lean::cnstr_set(x_31, 1, x_30);
if (lean::is_scalar(x_6)) {
 x_32 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_32 = x_6;
}
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_25);
return x_32;
}
case 3:
{
obj* x_33; obj* x_34; obj* x_35; 
x_33 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_24);
lean::cnstr_set(x_34, 1, x_33);
if (lean::is_scalar(x_6)) {
 x_35 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_35 = x_6;
}
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_25);
return x_35;
}
default:
{
obj* x_37; obj* x_38; obj* x_39; 
lean::dec(x_15);
x_37 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_38 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_38, 0, x_24);
lean::cnstr_set(x_38, 1, x_37);
if (lean::is_scalar(x_6)) {
 x_39 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_39 = x_6;
}
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_25);
return x_39;
}
}
}
}
}
}
obj* l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__3(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_12; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
x_7 = lean::cnstr_get(x_2, 0);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_2, 1);
lean::inc(x_9);
lean::dec(x_2);
x_12 = l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__3(x_4);
if (lean::obj_tag(x_9) == 0)
{
obj* x_13; obj* x_14; obj* x_15; 
x_13 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_14 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_14 = x_6;
}
lean::cnstr_set(x_14, 0, x_7);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_12);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_16 = lean::cnstr_get(x_9, 0);
lean::inc(x_16);
lean::dec(x_9);
x_19 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_20 = l_option_map___rarg(x_19, x_16);
x_21 = lean::box(3);
x_22 = l_option_get__or__else___main___rarg(x_20, x_21);
x_23 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_24 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_24 = x_6;
}
lean::cnstr_set(x_24, 0, x_22);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_7);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_12);
return x_26;
}
}
}
}
obj* l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__4(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_12; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
x_7 = lean::cnstr_get(x_2, 0);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_2, 1);
lean::inc(x_9);
lean::dec(x_2);
x_12 = l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__4(x_4);
if (lean::obj_tag(x_9) == 0)
{
obj* x_13; obj* x_14; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
x_13 = l_lean_parser_term_match__equation_has__view;
x_14 = lean::cnstr_get(x_13, 1);
lean::inc(x_14);
lean::dec(x_13);
x_17 = lean::apply_1(x_14, x_7);
x_18 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_19 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_19 = x_6;
}
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_12);
return x_20;
}
else
{
obj* x_21; obj* x_24; obj* x_25; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; 
x_21 = lean::cnstr_get(x_9, 0);
lean::inc(x_21);
lean::dec(x_9);
x_24 = l_lean_parser_term_match__equation_has__view;
x_25 = lean::cnstr_get(x_24, 1);
lean::inc(x_25);
lean::dec(x_24);
x_28 = lean::apply_1(x_25, x_7);
x_29 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_30 = l_option_map___rarg(x_29, x_21);
x_31 = lean::box(3);
x_32 = l_option_get__or__else___main___rarg(x_30, x_31);
x_33 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_34 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_34 = x_6;
}
lean::cnstr_set(x_34, 0, x_32);
lean::cnstr_set(x_34, 1, x_33);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_28);
lean::cnstr_set(x_35, 1, x_34);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_12);
return x_36;
}
}
}
}
obj* _init_l_lean_parser_term_match_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = l_lean_parser_term_match__equation_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_6);
return x_8;
}
}
obj* _init_l_lean_parser_term_match_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = lean::box(3);
x_14 = x_0;
x_15 = x_17;
goto lbl_16;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
x_14 = x_20;
x_15 = x_18;
goto lbl_16;
}
lbl_16:
{
obj* x_23; obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_15);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_23 = x_26;
goto lbl_24;
}
else
{
obj* x_27; obj* x_30; obj* x_33; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 1);
lean::inc(x_30);
lean::dec(x_27);
x_33 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_30);
x_23 = x_33;
goto lbl_24;
}
lbl_24:
{
obj* x_34; obj* x_35; 
if (lean::obj_tag(x_14) == 0)
{
obj* x_37; 
x_37 = lean::box(3);
x_34 = x_14;
x_35 = x_37;
goto lbl_36;
}
else
{
obj* x_38; obj* x_40; 
x_38 = lean::cnstr_get(x_14, 0);
lean::inc(x_38);
x_40 = lean::cnstr_get(x_14, 1);
lean::inc(x_40);
lean::dec(x_14);
x_34 = x_40;
x_35 = x_38;
goto lbl_36;
}
lbl_36:
{
obj* x_43; obj* x_45; 
x_45 = l_lean_parser_syntax_as__node___main(x_35);
if (lean::obj_tag(x_45) == 0)
{
obj* x_46; 
x_46 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_43 = x_46;
goto lbl_44;
}
else
{
obj* x_47; obj* x_49; obj* x_50; 
x_47 = lean::cnstr_get(x_45, 0);
if (lean::is_exclusive(x_45)) {
 lean::cnstr_set(x_45, 0, lean::box(0));
 x_49 = x_45;
} else {
 lean::inc(x_47);
 lean::dec(x_45);
 x_49 = lean::box(0);
}
x_50 = lean::cnstr_get(x_47, 1);
lean::inc(x_50);
lean::dec(x_47);
if (lean::obj_tag(x_50) == 0)
{
obj* x_54; 
lean::dec(x_49);
x_54 = lean::box(0);
x_43 = x_54;
goto lbl_44;
}
else
{
obj* x_55; obj* x_57; 
x_55 = lean::cnstr_get(x_50, 0);
lean::inc(x_55);
x_57 = lean::cnstr_get(x_50, 1);
lean::inc(x_57);
lean::dec(x_50);
if (lean::obj_tag(x_57) == 0)
{
obj* x_60; obj* x_61; obj* x_64; obj* x_65; 
x_60 = l_lean_parser_term_type__spec_has__view;
x_61 = lean::cnstr_get(x_60, 0);
lean::inc(x_61);
lean::dec(x_60);
x_64 = lean::apply_1(x_61, x_55);
if (lean::is_scalar(x_49)) {
 x_65 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_65 = x_49;
}
lean::cnstr_set(x_65, 0, x_64);
x_43 = x_65;
goto lbl_44;
}
else
{
obj* x_69; 
lean::dec(x_57);
lean::dec(x_49);
lean::dec(x_55);
x_69 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_43 = x_69;
goto lbl_44;
}
}
}
lbl_44:
{
obj* x_70; obj* x_71; 
if (lean::obj_tag(x_34) == 0)
{
obj* x_73; 
x_73 = lean::box(3);
x_70 = x_34;
x_71 = x_73;
goto lbl_72;
}
else
{
obj* x_74; obj* x_76; 
x_74 = lean::cnstr_get(x_34, 0);
lean::inc(x_74);
x_76 = lean::cnstr_get(x_34, 1);
lean::inc(x_76);
lean::dec(x_34);
x_70 = x_76;
x_71 = x_74;
goto lbl_72;
}
lbl_72:
{
obj* x_79; 
switch (lean::obj_tag(x_71)) {
case 0:
{
obj* x_81; obj* x_84; 
x_81 = lean::cnstr_get(x_71, 0);
lean::inc(x_81);
lean::dec(x_71);
x_84 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_84, 0, x_81);
x_79 = x_84;
goto lbl_80;
}
case 3:
{
obj* x_85; 
x_85 = lean::box(0);
x_79 = x_85;
goto lbl_80;
}
default:
{
obj* x_87; 
lean::dec(x_71);
x_87 = lean::box(0);
x_79 = x_87;
goto lbl_80;
}
}
lbl_80:
{
obj* x_88; obj* x_89; 
if (lean::obj_tag(x_70) == 0)
{
obj* x_91; 
x_91 = lean::box(3);
x_88 = x_70;
x_89 = x_91;
goto lbl_90;
}
else
{
obj* x_92; obj* x_94; 
x_92 = lean::cnstr_get(x_70, 0);
lean::inc(x_92);
x_94 = lean::cnstr_get(x_70, 1);
lean::inc(x_94);
lean::dec(x_70);
x_88 = x_94;
x_89 = x_92;
goto lbl_90;
}
lbl_90:
{
obj* x_97; obj* x_99; 
x_99 = l_lean_parser_syntax_as__node___main(x_89);
if (lean::obj_tag(x_99) == 0)
{
obj* x_100; 
x_100 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_97 = x_100;
goto lbl_98;
}
else
{
obj* x_101; obj* x_103; obj* x_104; 
x_101 = lean::cnstr_get(x_99, 0);
if (lean::is_exclusive(x_99)) {
 lean::cnstr_set(x_99, 0, lean::box(0));
 x_103 = x_99;
} else {
 lean::inc(x_101);
 lean::dec(x_99);
 x_103 = lean::box(0);
}
x_104 = lean::cnstr_get(x_101, 1);
lean::inc(x_104);
lean::dec(x_101);
if (lean::obj_tag(x_104) == 0)
{
obj* x_108; 
lean::dec(x_103);
x_108 = lean::box(0);
x_97 = x_108;
goto lbl_98;
}
else
{
obj* x_109; obj* x_111; 
x_109 = lean::cnstr_get(x_104, 0);
lean::inc(x_109);
x_111 = lean::cnstr_get(x_104, 1);
lean::inc(x_111);
lean::dec(x_104);
if (lean::obj_tag(x_111) == 0)
{
switch (lean::obj_tag(x_109)) {
case 0:
{
obj* x_114; obj* x_117; obj* x_118; 
x_114 = lean::cnstr_get(x_109, 0);
lean::inc(x_114);
lean::dec(x_109);
if (lean::is_scalar(x_103)) {
 x_117 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_117 = x_103;
}
lean::cnstr_set(x_117, 0, x_114);
x_118 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_118, 0, x_117);
x_97 = x_118;
goto lbl_98;
}
case 3:
{
obj* x_120; 
lean::dec(x_103);
x_120 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_97 = x_120;
goto lbl_98;
}
default:
{
obj* x_123; 
lean::dec(x_109);
lean::dec(x_103);
x_123 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_97 = x_123;
goto lbl_98;
}
}
}
else
{
obj* x_127; 
lean::dec(x_111);
lean::dec(x_109);
lean::dec(x_103);
x_127 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_97 = x_127;
goto lbl_98;
}
}
}
lbl_98:
{
obj* x_128; 
if (lean::obj_tag(x_88) == 0)
{
obj* x_130; 
x_130 = lean::box(3);
x_128 = x_130;
goto lbl_129;
}
else
{
obj* x_131; 
x_131 = lean::cnstr_get(x_88, 0);
lean::inc(x_131);
lean::dec(x_88);
x_128 = x_131;
goto lbl_129;
}
lbl_129:
{
obj* x_134; 
x_134 = l_lean_parser_syntax_as__node___main(x_128);
if (lean::obj_tag(x_134) == 0)
{
obj* x_135; obj* x_136; 
x_135 = l_lean_parser_term_match_has__view_x_27___lambda__1___closed__1;
x_136 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_136, 0, x_5);
lean::cnstr_set(x_136, 1, x_23);
lean::cnstr_set(x_136, 2, x_43);
lean::cnstr_set(x_136, 3, x_79);
lean::cnstr_set(x_136, 4, x_97);
lean::cnstr_set(x_136, 5, x_135);
return x_136;
}
else
{
obj* x_137; obj* x_140; obj* x_143; obj* x_144; 
x_137 = lean::cnstr_get(x_134, 0);
lean::inc(x_137);
lean::dec(x_134);
x_140 = lean::cnstr_get(x_137, 1);
lean::inc(x_140);
lean::dec(x_137);
x_143 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_match_has__view_x_27___spec__2(x_140);
x_144 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_144, 0, x_5);
lean::cnstr_set(x_144, 1, x_23);
lean::cnstr_set(x_144, 2, x_43);
lean::cnstr_set(x_144, 3, x_79);
lean::cnstr_set(x_144, 4, x_97);
lean::cnstr_set(x_144, 5, x_143);
return x_144;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_match_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_match_has__view_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; obj* x_38; 
x_38 = l_lean_parser_syntax_as__node___main(x_28);
if (lean::obj_tag(x_38) == 0)
{
obj* x_39; 
x_39 = l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1;
x_36 = x_39;
goto lbl_37;
}
else
{
obj* x_40; obj* x_43; obj* x_46; 
x_40 = lean::cnstr_get(x_38, 0);
lean::inc(x_40);
lean::dec(x_38);
x_43 = lean::cnstr_get(x_40, 1);
lean::inc(x_43);
lean::dec(x_40);
x_46 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_tuple_has__view_x_27___spec__1(x_43);
x_36 = x_46;
goto lbl_37;
}
lbl_37:
{
obj* x_47; obj* x_48; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_50; 
x_50 = lean::box(3);
x_47 = x_27;
x_48 = x_50;
goto lbl_49;
}
else
{
obj* x_51; obj* x_53; 
x_51 = lean::cnstr_get(x_27, 0);
lean::inc(x_51);
x_53 = lean::cnstr_get(x_27, 1);
lean::inc(x_53);
lean::dec(x_27);
x_47 = x_53;
x_48 = x_51;
goto lbl_49;
}
lbl_49:
{
obj* x_56; obj* x_58; 
x_58 = l_lean_parser_syntax_as__node___main(x_48);
if (lean::obj_tag(x_58) == 0)
{
obj* x_59; 
x_59 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_56 = x_59;
goto lbl_57;
}
else
{
obj* x_60; obj* x_62; obj* x_63; 
x_60 = lean::cnstr_get(x_58, 0);
if (lean::is_exclusive(x_58)) {
 lean::cnstr_set(x_58, 0, lean::box(0));
 x_62 = x_58;
} else {
 lean::inc(x_60);
 lean::dec(x_58);
 x_62 = lean::box(0);
}
x_63 = lean::cnstr_get(x_60, 1);
lean::inc(x_63);
lean::dec(x_60);
if (lean::obj_tag(x_63) == 0)
{
obj* x_67; 
lean::dec(x_62);
x_67 = lean::box(0);
x_56 = x_67;
goto lbl_57;
}
else
{
obj* x_68; obj* x_70; 
x_68 = lean::cnstr_get(x_63, 0);
lean::inc(x_68);
x_70 = lean::cnstr_get(x_63, 1);
lean::inc(x_70);
lean::dec(x_63);
if (lean::obj_tag(x_70) == 0)
{
obj* x_73; obj* x_74; obj* x_77; obj* x_78; 
x_73 = l_lean_parser_term_type__spec_has__view;
x_74 = lean::cnstr_get(x_73, 0);
lean::inc(x_74);
lean::dec(x_73);
x_77 = lean::apply_1(x_74, x_68);
if (lean::is_scalar(x_62)) {
 x_78 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_78 = x_62;
}
lean::cnstr_set(x_78, 0, x_77);
x_56 = x_78;
goto lbl_57;
}
else
{
obj* x_82; 
lean::dec(x_62);
lean::dec(x_70);
lean::dec(x_68);
x_82 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_56 = x_82;
goto lbl_57;
}
}
}
lbl_57:
{
obj* x_83; obj* x_84; 
if (lean::obj_tag(x_47) == 0)
{
obj* x_86; 
x_86 = lean::box(3);
x_83 = x_47;
x_84 = x_86;
goto lbl_85;
}
else
{
obj* x_87; obj* x_89; 
x_87 = lean::cnstr_get(x_47, 0);
lean::inc(x_87);
x_89 = lean::cnstr_get(x_47, 1);
lean::inc(x_89);
lean::dec(x_47);
x_83 = x_89;
x_84 = x_87;
goto lbl_85;
}
lbl_85:
{
obj* x_92; 
switch (lean::obj_tag(x_84)) {
case 0:
{
obj* x_94; obj* x_97; 
x_94 = lean::cnstr_get(x_84, 0);
lean::inc(x_94);
lean::dec(x_84);
x_97 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_97, 0, x_94);
x_92 = x_97;
goto lbl_93;
}
case 3:
{
obj* x_98; 
x_98 = lean::box(0);
x_92 = x_98;
goto lbl_93;
}
default:
{
obj* x_100; 
lean::dec(x_84);
x_100 = lean::box(0);
x_92 = x_100;
goto lbl_93;
}
}
lbl_93:
{
obj* x_101; obj* x_102; 
if (lean::obj_tag(x_83) == 0)
{
obj* x_104; 
x_104 = lean::box(3);
x_101 = x_83;
x_102 = x_104;
goto lbl_103;
}
else
{
obj* x_105; obj* x_107; 
x_105 = lean::cnstr_get(x_83, 0);
lean::inc(x_105);
x_107 = lean::cnstr_get(x_83, 1);
lean::inc(x_107);
lean::dec(x_83);
x_101 = x_107;
x_102 = x_105;
goto lbl_103;
}
lbl_103:
{
obj* x_110; obj* x_112; 
x_112 = l_lean_parser_syntax_as__node___main(x_102);
if (lean::obj_tag(x_112) == 0)
{
obj* x_113; 
x_113 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_110 = x_113;
goto lbl_111;
}
else
{
obj* x_114; obj* x_116; obj* x_117; 
x_114 = lean::cnstr_get(x_112, 0);
if (lean::is_exclusive(x_112)) {
 lean::cnstr_set(x_112, 0, lean::box(0));
 x_116 = x_112;
} else {
 lean::inc(x_114);
 lean::dec(x_112);
 x_116 = lean::box(0);
}
x_117 = lean::cnstr_get(x_114, 1);
lean::inc(x_117);
lean::dec(x_114);
if (lean::obj_tag(x_117) == 0)
{
obj* x_121; 
lean::dec(x_116);
x_121 = lean::box(0);
x_110 = x_121;
goto lbl_111;
}
else
{
obj* x_122; obj* x_124; 
x_122 = lean::cnstr_get(x_117, 0);
lean::inc(x_122);
x_124 = lean::cnstr_get(x_117, 1);
lean::inc(x_124);
lean::dec(x_117);
if (lean::obj_tag(x_124) == 0)
{
switch (lean::obj_tag(x_122)) {
case 0:
{
obj* x_127; obj* x_130; obj* x_131; 
x_127 = lean::cnstr_get(x_122, 0);
lean::inc(x_127);
lean::dec(x_122);
if (lean::is_scalar(x_116)) {
 x_130 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_130 = x_116;
}
lean::cnstr_set(x_130, 0, x_127);
x_131 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_131, 0, x_130);
x_110 = x_131;
goto lbl_111;
}
case 3:
{
obj* x_133; 
lean::dec(x_116);
x_133 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_110 = x_133;
goto lbl_111;
}
default:
{
obj* x_136; 
lean::dec(x_122);
lean::dec(x_116);
x_136 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_110 = x_136;
goto lbl_111;
}
}
}
else
{
obj* x_140; 
lean::dec(x_122);
lean::dec(x_116);
lean::dec(x_124);
x_140 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_110 = x_140;
goto lbl_111;
}
}
}
lbl_111:
{
obj* x_141; 
if (lean::obj_tag(x_101) == 0)
{
obj* x_143; 
x_143 = lean::box(3);
x_141 = x_143;
goto lbl_142;
}
else
{
obj* x_144; 
x_144 = lean::cnstr_get(x_101, 0);
lean::inc(x_144);
lean::dec(x_101);
x_141 = x_144;
goto lbl_142;
}
lbl_142:
{
obj* x_147; 
x_147 = l_lean_parser_syntax_as__node___main(x_141);
if (lean::obj_tag(x_147) == 0)
{
obj* x_148; obj* x_149; 
x_148 = l_lean_parser_term_match_has__view_x_27___lambda__1___closed__1;
x_149 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_149, 0, x_18);
lean::cnstr_set(x_149, 1, x_36);
lean::cnstr_set(x_149, 2, x_56);
lean::cnstr_set(x_149, 3, x_92);
lean::cnstr_set(x_149, 4, x_110);
lean::cnstr_set(x_149, 5, x_148);
return x_149;
}
else
{
obj* x_150; obj* x_153; obj* x_156; obj* x_157; 
x_150 = lean::cnstr_get(x_147, 0);
lean::inc(x_150);
lean::dec(x_147);
x_153 = lean::cnstr_get(x_150, 1);
lean::inc(x_153);
lean::dec(x_150);
x_156 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_match_has__view_x_27___spec__2(x_153);
x_157 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_157, 0, x_18);
lean::cnstr_set(x_157, 1, x_36);
lean::cnstr_set(x_157, 2, x_56);
lean::cnstr_set(x_157, 3, x_92);
lean::cnstr_set(x_157, 4, x_110);
lean::cnstr_set(x_157, 5, x_156);
return x_157;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_match_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
lean::dec(x_0);
x_14 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_15 = l_option_map___rarg(x_14, x_1);
x_16 = lean::box(3);
x_17 = l_option_get__or__else___main___rarg(x_15, x_16);
x_18 = l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__3(x_3);
x_19 = l_list_join___main___rarg(x_18);
x_20 = l_lean_parser_no__kind;
x_21 = l_lean_parser_syntax_mk__node(x_20, x_19);
x_22 = l_option_map___rarg(x_14, x_7);
x_23 = l_option_get__or__else___main___rarg(x_22, x_16);
x_24 = l_list_map___main___at_lean_parser_term_match_has__view_x_27___spec__4(x_11);
x_25 = l_list_join___main___rarg(x_24);
x_26 = l_lean_parser_syntax_mk__node(x_20, x_25);
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_26);
lean::cnstr_set(x_28, 1, x_27);
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; 
x_29 = l_lean_parser_combinators_many___rarg___closed__1;
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_28);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_23);
lean::cnstr_set(x_31, 1, x_30);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_29);
lean::cnstr_set(x_32, 1, x_31);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_21);
lean::cnstr_set(x_33, 1, x_32);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_17);
lean::cnstr_set(x_34, 1, x_33);
x_35 = l_lean_parser_term_match;
x_36 = l_lean_parser_syntax_mk__node(x_35, x_34);
return x_36;
}
else
{
obj* x_37; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; 
x_37 = lean::cnstr_get(x_9, 0);
lean::inc(x_37);
lean::dec(x_9);
x_40 = l_option_map___rarg(x_14, x_37);
x_41 = l_option_get__or__else___main___rarg(x_40, x_16);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_27);
x_43 = l_lean_parser_syntax_mk__node(x_20, x_42);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_43);
lean::cnstr_set(x_44, 1, x_28);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_23);
lean::cnstr_set(x_45, 1, x_44);
x_46 = l_lean_parser_combinators_many___rarg___closed__1;
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_46);
lean::cnstr_set(x_47, 1, x_45);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_21);
lean::cnstr_set(x_48, 1, x_47);
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_17);
lean::cnstr_set(x_49, 1, x_48);
x_50 = l_lean_parser_term_match;
x_51 = l_lean_parser_syntax_mk__node(x_50, x_49);
return x_51;
}
}
else
{
obj* x_52; obj* x_55; obj* x_56; obj* x_59; obj* x_60; obj* x_61; 
x_52 = lean::cnstr_get(x_5, 0);
lean::inc(x_52);
lean::dec(x_5);
x_55 = l_lean_parser_term_type__spec_has__view;
x_56 = lean::cnstr_get(x_55, 1);
lean::inc(x_56);
lean::dec(x_55);
x_59 = lean::apply_1(x_56, x_52);
x_60 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_60, 0, x_59);
lean::cnstr_set(x_60, 1, x_27);
x_61 = l_lean_parser_syntax_mk__node(x_20, x_60);
if (lean::obj_tag(x_9) == 0)
{
obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; 
x_62 = l_lean_parser_combinators_many___rarg___closed__1;
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_62);
lean::cnstr_set(x_63, 1, x_28);
x_64 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_64, 0, x_23);
lean::cnstr_set(x_64, 1, x_63);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_61);
lean::cnstr_set(x_65, 1, x_64);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_21);
lean::cnstr_set(x_66, 1, x_65);
x_67 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_67, 0, x_17);
lean::cnstr_set(x_67, 1, x_66);
x_68 = l_lean_parser_term_match;
x_69 = l_lean_parser_syntax_mk__node(x_68, x_67);
return x_69;
}
else
{
obj* x_70; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; 
x_70 = lean::cnstr_get(x_9, 0);
lean::inc(x_70);
lean::dec(x_9);
x_73 = l_option_map___rarg(x_14, x_70);
x_74 = l_option_get__or__else___main___rarg(x_73, x_16);
x_75 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_75, 0, x_74);
lean::cnstr_set(x_75, 1, x_27);
x_76 = l_lean_parser_syntax_mk__node(x_20, x_75);
x_77 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_77, 0, x_76);
lean::cnstr_set(x_77, 1, x_28);
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_23);
lean::cnstr_set(x_78, 1, x_77);
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_61);
lean::cnstr_set(x_79, 1, x_78);
x_80 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_80, 0, x_21);
lean::cnstr_set(x_80, 1, x_79);
x_81 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_81, 0, x_17);
lean::cnstr_set(x_81, 1, x_80);
x_82 = l_lean_parser_term_match;
x_83 = l_lean_parser_syntax_mk__node(x_82, x_81);
return x_83;
}
}
}
}
obj* _init_l_lean_parser_term_match_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_match_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_match_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
uint8 x_8; obj* x_9; 
x_8 = lean::unbox(x_2);
x_9 = l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1(x_0, x_1, x_8, x_3, x_4, x_5, x_6, x_7);
return x_9;
}
}
obj* _init_l_lean_parser_term_match_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_match_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_match_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_0 = lean::mk_string("match ");
x_1 = lean::mk_nat_obj(0u);
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::mk_string(", ");
x_4 = l_lean_parser_symbol_tokens___rarg(x_3, x_1);
x_5 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_6 = l_lean_parser_combinators_sep__by1_tokens___rarg(x_5, x_4);
x_7 = lean::mk_string(" with ");
x_8 = l_lean_parser_symbol_tokens___rarg(x_7, x_1);
x_9 = lean::mk_string(" | ");
x_10 = l_lean_parser_symbol_tokens___rarg(x_9, x_1);
lean::inc(x_10);
x_12 = l_lean_parser_tokens___rarg(x_10);
x_13 = lean::mk_string(":=");
x_14 = l_lean_parser_symbol_tokens___rarg(x_13, x_1);
x_15 = lean::box(0);
x_16 = l_lean_parser_list_cons_tokens___rarg(x_5, x_15);
x_17 = l_lean_parser_list_cons_tokens___rarg(x_14, x_16);
lean::inc(x_6);
x_19 = l_lean_parser_list_cons_tokens___rarg(x_6, x_17);
x_20 = l_lean_parser_tokens___rarg(x_19);
x_21 = l_lean_parser_combinators_sep__by1_tokens___rarg(x_20, x_10);
x_22 = l_lean_parser_list_cons_tokens___rarg(x_21, x_15);
x_23 = l_lean_parser_list_cons_tokens___rarg(x_12, x_22);
x_24 = l_lean_parser_list_cons_tokens___rarg(x_8, x_23);
x_25 = l_lean_parser_term_opt__type_parser_lean_parser_has__tokens;
x_26 = l_lean_parser_list_cons_tokens___rarg(x_25, x_24);
x_27 = l_lean_parser_list_cons_tokens___rarg(x_6, x_26);
x_28 = l_lean_parser_list_cons_tokens___rarg(x_2, x_27);
x_29 = l_lean_parser_tokens___rarg(x_28);
return x_29;
}
}
obj* _init_l_lean_parser_term_match_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; uint8 x_12; obj* x_13; obj* x_16; obj* x_17; obj* x_18; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_25; obj* x_26; obj* x_28; obj* x_29; obj* x_30; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; 
x_0 = lean::mk_string("match ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::mk_string(", ");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_8);
lean::closure_set(x_11, 1, x_4);
lean::closure_set(x_11, 2, x_10);
x_12 = 0;
x_13 = lean::box(x_12);
lean::inc(x_13);
lean::inc(x_6);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1___boxed), 8, 3);
lean::closure_set(x_16, 0, x_6);
lean::closure_set(x_16, 1, x_11);
lean::closure_set(x_16, 2, x_13);
x_17 = lean::mk_string(" with ");
x_18 = l_string_trim(x_17);
lean::inc(x_18);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_20, 0, x_18);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_21, 0, x_18);
lean::closure_set(x_21, 1, x_4);
lean::closure_set(x_21, 2, x_20);
x_22 = lean::mk_string(" | ");
x_23 = l_string_trim(x_22);
lean::inc(x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_25, 0, x_23);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_26, 0, x_23);
lean::closure_set(x_26, 1, x_4);
lean::closure_set(x_26, 2, x_25);
lean::inc(x_26);
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_28, 0, x_26);
x_29 = lean::mk_string(":=");
x_30 = l_string_trim(x_29);
lean::inc(x_30);
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_32, 0, x_30);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_33, 0, x_30);
lean::closure_set(x_33, 1, x_4);
lean::closure_set(x_33, 2, x_32);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_6);
lean::cnstr_set(x_35, 1, x_34);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_33);
lean::cnstr_set(x_36, 1, x_35);
lean::inc(x_16);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_16);
lean::cnstr_set(x_38, 1, x_36);
x_39 = l_lean_parser_term_match__equation;
x_40 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_40, 0, x_39);
lean::closure_set(x_40, 1, x_38);
x_41 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1___boxed), 8, 3);
lean::closure_set(x_41, 0, x_40);
lean::closure_set(x_41, 1, x_26);
lean::closure_set(x_41, 2, x_13);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_34);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_28);
lean::cnstr_set(x_43, 1, x_42);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_21);
lean::cnstr_set(x_44, 1, x_43);
x_45 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_44);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_16);
lean::cnstr_set(x_47, 1, x_46);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_5);
lean::cnstr_set(x_48, 1, x_47);
x_49 = l_lean_parser_term__parser__m_monad;
x_50 = l_lean_parser_term__parser__m_monad__except;
x_51 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_52 = l_lean_parser_term__parser__m_alternative;
x_53 = l_lean_parser_term_match;
x_54 = l_lean_parser_term_match_has__view;
x_55 = l_lean_parser_combinators_node_view___rarg(x_49, x_50, x_51, x_52, x_53, x_48, x_54);
return x_55;
}
}
obj* _init_l_lean_parser_term_match_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; uint8 x_12; obj* x_13; obj* x_16; obj* x_17; obj* x_18; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_25; obj* x_26; obj* x_28; obj* x_29; obj* x_30; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; 
x_0 = lean::mk_string("match ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::mk_string(", ");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_8);
lean::closure_set(x_11, 1, x_4);
lean::closure_set(x_11, 2, x_10);
x_12 = 0;
x_13 = lean::box(x_12);
lean::inc(x_13);
lean::inc(x_6);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1___boxed), 8, 3);
lean::closure_set(x_16, 0, x_6);
lean::closure_set(x_16, 1, x_11);
lean::closure_set(x_16, 2, x_13);
x_17 = lean::mk_string(" with ");
x_18 = l_string_trim(x_17);
lean::inc(x_18);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_20, 0, x_18);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_21, 0, x_18);
lean::closure_set(x_21, 1, x_4);
lean::closure_set(x_21, 2, x_20);
x_22 = lean::mk_string(" | ");
x_23 = l_string_trim(x_22);
lean::inc(x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_25, 0, x_23);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_26, 0, x_23);
lean::closure_set(x_26, 1, x_4);
lean::closure_set(x_26, 2, x_25);
lean::inc(x_26);
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_28, 0, x_26);
x_29 = lean::mk_string(":=");
x_30 = l_string_trim(x_29);
lean::inc(x_30);
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_32, 0, x_30);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_33, 0, x_30);
lean::closure_set(x_33, 1, x_4);
lean::closure_set(x_33, 2, x_32);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_6);
lean::cnstr_set(x_35, 1, x_34);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_33);
lean::cnstr_set(x_36, 1, x_35);
lean::inc(x_16);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_16);
lean::cnstr_set(x_38, 1, x_36);
x_39 = l_lean_parser_term_match__equation;
x_40 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_40, 0, x_39);
lean::closure_set(x_40, 1, x_38);
x_41 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by1___at_lean_parser_term_match_has__view_x_27___spec__1___boxed), 8, 3);
lean::closure_set(x_41, 0, x_40);
lean::closure_set(x_41, 1, x_26);
lean::closure_set(x_41, 2, x_13);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_34);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_28);
lean::cnstr_set(x_43, 1, x_42);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_21);
lean::cnstr_set(x_44, 1, x_43);
x_45 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_44);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_16);
lean::cnstr_set(x_47, 1, x_46);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_5);
lean::cnstr_set(x_48, 1, x_47);
return x_48;
}
}
obj* l_lean_parser_term_match_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_match;
x_6 = l_lean_parser_term_match_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_if() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("if");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_if_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = lean::box(3);
x_14 = x_0;
x_15 = x_17;
goto lbl_16;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
x_14 = x_20;
x_15 = x_18;
goto lbl_16;
}
lbl_16:
{
obj* x_23; obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_15);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
x_23 = x_26;
goto lbl_24;
}
else
{
obj* x_27; obj* x_29; obj* x_30; 
x_27 = lean::cnstr_get(x_25, 0);
if (lean::is_exclusive(x_25)) {
 lean::cnstr_set(x_25, 0, lean::box(0));
 x_29 = x_25;
} else {
 lean::inc(x_27);
 lean::dec(x_25);
 x_29 = lean::box(0);
}
x_30 = lean::cnstr_get(x_27, 1);
lean::inc(x_30);
lean::dec(x_27);
if (lean::obj_tag(x_30) == 0)
{
obj* x_34; 
lean::dec(x_29);
x_34 = lean::box(0);
x_23 = x_34;
goto lbl_24;
}
else
{
obj* x_35; obj* x_37; 
x_35 = lean::cnstr_get(x_30, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_30, 1);
lean::inc(x_37);
lean::dec(x_30);
if (lean::obj_tag(x_37) == 0)
{
obj* x_40; obj* x_41; obj* x_44; obj* x_45; 
x_40 = l_lean_parser_term_opt__ident_has__view;
x_41 = lean::cnstr_get(x_40, 0);
lean::inc(x_41);
lean::dec(x_40);
x_44 = lean::apply_1(x_41, x_35);
if (lean::is_scalar(x_29)) {
 x_45 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_45 = x_29;
}
lean::cnstr_set(x_45, 0, x_44);
x_23 = x_45;
goto lbl_24;
}
else
{
obj* x_49; 
lean::dec(x_29);
lean::dec(x_35);
lean::dec(x_37);
x_49 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
x_23 = x_49;
goto lbl_24;
}
}
}
lbl_24:
{
obj* x_50; obj* x_51; 
if (lean::obj_tag(x_14) == 0)
{
obj* x_53; 
x_53 = lean::box(3);
x_50 = x_14;
x_51 = x_53;
goto lbl_52;
}
else
{
obj* x_54; obj* x_56; 
x_54 = lean::cnstr_get(x_14, 0);
lean::inc(x_54);
x_56 = lean::cnstr_get(x_14, 1);
lean::inc(x_56);
lean::dec(x_14);
x_50 = x_56;
x_51 = x_54;
goto lbl_52;
}
lbl_52:
{
obj* x_59; obj* x_60; 
if (lean::obj_tag(x_50) == 0)
{
obj* x_62; 
x_62 = lean::box(3);
x_59 = x_50;
x_60 = x_62;
goto lbl_61;
}
else
{
obj* x_63; obj* x_65; 
x_63 = lean::cnstr_get(x_50, 0);
lean::inc(x_63);
x_65 = lean::cnstr_get(x_50, 1);
lean::inc(x_65);
lean::dec(x_50);
x_59 = x_65;
x_60 = x_63;
goto lbl_61;
}
lbl_61:
{
obj* x_68; 
switch (lean::obj_tag(x_60)) {
case 0:
{
obj* x_70; obj* x_73; 
x_70 = lean::cnstr_get(x_60, 0);
lean::inc(x_70);
lean::dec(x_60);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_70);
x_68 = x_73;
goto lbl_69;
}
case 3:
{
obj* x_74; 
x_74 = lean::box(0);
x_68 = x_74;
goto lbl_69;
}
default:
{
obj* x_76; 
lean::dec(x_60);
x_76 = lean::box(0);
x_68 = x_76;
goto lbl_69;
}
}
lbl_69:
{
obj* x_77; obj* x_78; 
if (lean::obj_tag(x_59) == 0)
{
obj* x_80; 
x_80 = lean::box(3);
x_77 = x_59;
x_78 = x_80;
goto lbl_79;
}
else
{
obj* x_81; obj* x_83; 
x_81 = lean::cnstr_get(x_59, 0);
lean::inc(x_81);
x_83 = lean::cnstr_get(x_59, 1);
lean::inc(x_83);
lean::dec(x_59);
x_77 = x_83;
x_78 = x_81;
goto lbl_79;
}
lbl_79:
{
if (lean::obj_tag(x_77) == 0)
{
obj* x_86; 
x_86 = lean::box(0);
if (lean::obj_tag(x_77) == 0)
{
obj* x_87; obj* x_88; 
x_87 = lean::box(3);
x_88 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_88, 0, x_5);
lean::cnstr_set(x_88, 1, x_23);
lean::cnstr_set(x_88, 2, x_51);
lean::cnstr_set(x_88, 3, x_68);
lean::cnstr_set(x_88, 4, x_78);
lean::cnstr_set(x_88, 5, x_86);
lean::cnstr_set(x_88, 6, x_87);
return x_88;
}
else
{
obj* x_89; obj* x_92; 
x_89 = lean::cnstr_get(x_77, 0);
lean::inc(x_89);
lean::dec(x_77);
x_92 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_92, 0, x_5);
lean::cnstr_set(x_92, 1, x_23);
lean::cnstr_set(x_92, 2, x_51);
lean::cnstr_set(x_92, 3, x_68);
lean::cnstr_set(x_92, 4, x_78);
lean::cnstr_set(x_92, 5, x_86);
lean::cnstr_set(x_92, 6, x_89);
return x_92;
}
}
else
{
obj* x_93; obj* x_95; 
x_93 = lean::cnstr_get(x_77, 0);
lean::inc(x_93);
x_95 = lean::cnstr_get(x_77, 1);
lean::inc(x_95);
lean::dec(x_77);
switch (lean::obj_tag(x_93)) {
case 0:
{
obj* x_98; obj* x_101; 
x_98 = lean::cnstr_get(x_93, 0);
lean::inc(x_98);
lean::dec(x_93);
x_101 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_101, 0, x_98);
if (lean::obj_tag(x_95) == 0)
{
obj* x_102; obj* x_103; 
x_102 = lean::box(3);
x_103 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_103, 0, x_5);
lean::cnstr_set(x_103, 1, x_23);
lean::cnstr_set(x_103, 2, x_51);
lean::cnstr_set(x_103, 3, x_68);
lean::cnstr_set(x_103, 4, x_78);
lean::cnstr_set(x_103, 5, x_101);
lean::cnstr_set(x_103, 6, x_102);
return x_103;
}
else
{
obj* x_104; obj* x_107; 
x_104 = lean::cnstr_get(x_95, 0);
lean::inc(x_104);
lean::dec(x_95);
x_107 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_107, 0, x_5);
lean::cnstr_set(x_107, 1, x_23);
lean::cnstr_set(x_107, 2, x_51);
lean::cnstr_set(x_107, 3, x_68);
lean::cnstr_set(x_107, 4, x_78);
lean::cnstr_set(x_107, 5, x_101);
lean::cnstr_set(x_107, 6, x_104);
return x_107;
}
}
case 3:
{
obj* x_108; 
x_108 = lean::box(0);
if (lean::obj_tag(x_95) == 0)
{
obj* x_109; obj* x_110; 
x_109 = lean::box(3);
x_110 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_110, 0, x_5);
lean::cnstr_set(x_110, 1, x_23);
lean::cnstr_set(x_110, 2, x_51);
lean::cnstr_set(x_110, 3, x_68);
lean::cnstr_set(x_110, 4, x_78);
lean::cnstr_set(x_110, 5, x_108);
lean::cnstr_set(x_110, 6, x_109);
return x_110;
}
else
{
obj* x_111; obj* x_114; 
x_111 = lean::cnstr_get(x_95, 0);
lean::inc(x_111);
lean::dec(x_95);
x_114 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_114, 0, x_5);
lean::cnstr_set(x_114, 1, x_23);
lean::cnstr_set(x_114, 2, x_51);
lean::cnstr_set(x_114, 3, x_68);
lean::cnstr_set(x_114, 4, x_78);
lean::cnstr_set(x_114, 5, x_108);
lean::cnstr_set(x_114, 6, x_111);
return x_114;
}
}
default:
{
obj* x_116; 
lean::dec(x_93);
x_116 = lean::box(0);
if (lean::obj_tag(x_95) == 0)
{
obj* x_117; obj* x_118; 
x_117 = lean::box(3);
x_118 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_118, 0, x_5);
lean::cnstr_set(x_118, 1, x_23);
lean::cnstr_set(x_118, 2, x_51);
lean::cnstr_set(x_118, 3, x_68);
lean::cnstr_set(x_118, 4, x_78);
lean::cnstr_set(x_118, 5, x_116);
lean::cnstr_set(x_118, 6, x_117);
return x_118;
}
else
{
obj* x_119; obj* x_122; 
x_119 = lean::cnstr_get(x_95, 0);
lean::inc(x_119);
lean::dec(x_95);
x_122 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_122, 0, x_5);
lean::cnstr_set(x_122, 1, x_23);
lean::cnstr_set(x_122, 2, x_51);
lean::cnstr_set(x_122, 3, x_68);
lean::cnstr_set(x_122, 4, x_78);
lean::cnstr_set(x_122, 5, x_116);
lean::cnstr_set(x_122, 6, x_119);
return x_122;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_if_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_if_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; obj* x_38; 
x_38 = l_lean_parser_syntax_as__node___main(x_28);
if (lean::obj_tag(x_38) == 0)
{
obj* x_39; 
x_39 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
x_36 = x_39;
goto lbl_37;
}
else
{
obj* x_40; obj* x_42; obj* x_43; 
x_40 = lean::cnstr_get(x_38, 0);
if (lean::is_exclusive(x_38)) {
 lean::cnstr_set(x_38, 0, lean::box(0));
 x_42 = x_38;
} else {
 lean::inc(x_40);
 lean::dec(x_38);
 x_42 = lean::box(0);
}
x_43 = lean::cnstr_get(x_40, 1);
lean::inc(x_43);
lean::dec(x_40);
if (lean::obj_tag(x_43) == 0)
{
obj* x_47; 
lean::dec(x_42);
x_47 = lean::box(0);
x_36 = x_47;
goto lbl_37;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_43, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_43, 1);
lean::inc(x_50);
lean::dec(x_43);
if (lean::obj_tag(x_50) == 0)
{
obj* x_53; obj* x_54; obj* x_57; obj* x_58; 
x_53 = l_lean_parser_term_opt__ident_has__view;
x_54 = lean::cnstr_get(x_53, 0);
lean::inc(x_54);
lean::dec(x_53);
x_57 = lean::apply_1(x_54, x_48);
if (lean::is_scalar(x_42)) {
 x_58 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_58 = x_42;
}
lean::cnstr_set(x_58, 0, x_57);
x_36 = x_58;
goto lbl_37;
}
else
{
obj* x_62; 
lean::dec(x_42);
lean::dec(x_48);
lean::dec(x_50);
x_62 = l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1;
x_36 = x_62;
goto lbl_37;
}
}
}
lbl_37:
{
obj* x_63; obj* x_64; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_66; 
x_66 = lean::box(3);
x_63 = x_27;
x_64 = x_66;
goto lbl_65;
}
else
{
obj* x_67; obj* x_69; 
x_67 = lean::cnstr_get(x_27, 0);
lean::inc(x_67);
x_69 = lean::cnstr_get(x_27, 1);
lean::inc(x_69);
lean::dec(x_27);
x_63 = x_69;
x_64 = x_67;
goto lbl_65;
}
lbl_65:
{
obj* x_72; obj* x_73; 
if (lean::obj_tag(x_63) == 0)
{
obj* x_75; 
x_75 = lean::box(3);
x_72 = x_63;
x_73 = x_75;
goto lbl_74;
}
else
{
obj* x_76; obj* x_78; 
x_76 = lean::cnstr_get(x_63, 0);
lean::inc(x_76);
x_78 = lean::cnstr_get(x_63, 1);
lean::inc(x_78);
lean::dec(x_63);
x_72 = x_78;
x_73 = x_76;
goto lbl_74;
}
lbl_74:
{
obj* x_81; 
switch (lean::obj_tag(x_73)) {
case 0:
{
obj* x_83; obj* x_86; 
x_83 = lean::cnstr_get(x_73, 0);
lean::inc(x_83);
lean::dec(x_73);
x_86 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_86, 0, x_83);
x_81 = x_86;
goto lbl_82;
}
case 3:
{
obj* x_87; 
x_87 = lean::box(0);
x_81 = x_87;
goto lbl_82;
}
default:
{
obj* x_89; 
lean::dec(x_73);
x_89 = lean::box(0);
x_81 = x_89;
goto lbl_82;
}
}
lbl_82:
{
obj* x_90; obj* x_91; 
if (lean::obj_tag(x_72) == 0)
{
obj* x_93; 
x_93 = lean::box(3);
x_90 = x_72;
x_91 = x_93;
goto lbl_92;
}
else
{
obj* x_94; obj* x_96; 
x_94 = lean::cnstr_get(x_72, 0);
lean::inc(x_94);
x_96 = lean::cnstr_get(x_72, 1);
lean::inc(x_96);
lean::dec(x_72);
x_90 = x_96;
x_91 = x_94;
goto lbl_92;
}
lbl_92:
{
if (lean::obj_tag(x_90) == 0)
{
obj* x_99; 
x_99 = lean::box(0);
if (lean::obj_tag(x_90) == 0)
{
obj* x_100; obj* x_101; 
x_100 = lean::box(3);
x_101 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_101, 0, x_18);
lean::cnstr_set(x_101, 1, x_36);
lean::cnstr_set(x_101, 2, x_64);
lean::cnstr_set(x_101, 3, x_81);
lean::cnstr_set(x_101, 4, x_91);
lean::cnstr_set(x_101, 5, x_99);
lean::cnstr_set(x_101, 6, x_100);
return x_101;
}
else
{
obj* x_102; obj* x_105; 
x_102 = lean::cnstr_get(x_90, 0);
lean::inc(x_102);
lean::dec(x_90);
x_105 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_105, 0, x_18);
lean::cnstr_set(x_105, 1, x_36);
lean::cnstr_set(x_105, 2, x_64);
lean::cnstr_set(x_105, 3, x_81);
lean::cnstr_set(x_105, 4, x_91);
lean::cnstr_set(x_105, 5, x_99);
lean::cnstr_set(x_105, 6, x_102);
return x_105;
}
}
else
{
obj* x_106; obj* x_108; 
x_106 = lean::cnstr_get(x_90, 0);
lean::inc(x_106);
x_108 = lean::cnstr_get(x_90, 1);
lean::inc(x_108);
lean::dec(x_90);
switch (lean::obj_tag(x_106)) {
case 0:
{
obj* x_111; obj* x_114; 
x_111 = lean::cnstr_get(x_106, 0);
lean::inc(x_111);
lean::dec(x_106);
x_114 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_114, 0, x_111);
if (lean::obj_tag(x_108) == 0)
{
obj* x_115; obj* x_116; 
x_115 = lean::box(3);
x_116 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_116, 0, x_18);
lean::cnstr_set(x_116, 1, x_36);
lean::cnstr_set(x_116, 2, x_64);
lean::cnstr_set(x_116, 3, x_81);
lean::cnstr_set(x_116, 4, x_91);
lean::cnstr_set(x_116, 5, x_114);
lean::cnstr_set(x_116, 6, x_115);
return x_116;
}
else
{
obj* x_117; obj* x_120; 
x_117 = lean::cnstr_get(x_108, 0);
lean::inc(x_117);
lean::dec(x_108);
x_120 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_120, 0, x_18);
lean::cnstr_set(x_120, 1, x_36);
lean::cnstr_set(x_120, 2, x_64);
lean::cnstr_set(x_120, 3, x_81);
lean::cnstr_set(x_120, 4, x_91);
lean::cnstr_set(x_120, 5, x_114);
lean::cnstr_set(x_120, 6, x_117);
return x_120;
}
}
case 3:
{
obj* x_121; 
x_121 = lean::box(0);
if (lean::obj_tag(x_108) == 0)
{
obj* x_122; obj* x_123; 
x_122 = lean::box(3);
x_123 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_123, 0, x_18);
lean::cnstr_set(x_123, 1, x_36);
lean::cnstr_set(x_123, 2, x_64);
lean::cnstr_set(x_123, 3, x_81);
lean::cnstr_set(x_123, 4, x_91);
lean::cnstr_set(x_123, 5, x_121);
lean::cnstr_set(x_123, 6, x_122);
return x_123;
}
else
{
obj* x_124; obj* x_127; 
x_124 = lean::cnstr_get(x_108, 0);
lean::inc(x_124);
lean::dec(x_108);
x_127 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_127, 0, x_18);
lean::cnstr_set(x_127, 1, x_36);
lean::cnstr_set(x_127, 2, x_64);
lean::cnstr_set(x_127, 3, x_81);
lean::cnstr_set(x_127, 4, x_91);
lean::cnstr_set(x_127, 5, x_121);
lean::cnstr_set(x_127, 6, x_124);
return x_127;
}
}
default:
{
obj* x_129; 
lean::dec(x_106);
x_129 = lean::box(0);
if (lean::obj_tag(x_108) == 0)
{
obj* x_130; obj* x_131; 
x_130 = lean::box(3);
x_131 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_131, 0, x_18);
lean::cnstr_set(x_131, 1, x_36);
lean::cnstr_set(x_131, 2, x_64);
lean::cnstr_set(x_131, 3, x_81);
lean::cnstr_set(x_131, 4, x_91);
lean::cnstr_set(x_131, 5, x_129);
lean::cnstr_set(x_131, 6, x_130);
return x_131;
}
else
{
obj* x_132; obj* x_135; 
x_132 = lean::cnstr_get(x_108, 0);
lean::inc(x_132);
lean::dec(x_108);
x_135 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_135, 0, x_18);
lean::cnstr_set(x_135, 1, x_36);
lean::cnstr_set(x_135, 2, x_64);
lean::cnstr_set(x_135, 3, x_81);
lean::cnstr_set(x_135, 4, x_91);
lean::cnstr_set(x_135, 5, x_129);
lean::cnstr_set(x_135, 6, x_132);
return x_135;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_if_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_13; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_0, 6);
lean::inc(x_13);
lean::dec(x_0);
x_16 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_17 = l_option_map___rarg(x_16, x_1);
x_18 = lean::box(3);
x_19 = l_option_get__or__else___main___rarg(x_17, x_18);
x_20 = l_option_map___rarg(x_16, x_7);
x_21 = l_option_get__or__else___main___rarg(x_20, x_18);
x_22 = l_option_map___rarg(x_16, x_11);
x_23 = l_option_get__or__else___main___rarg(x_22, x_18);
x_24 = lean::box(0);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_13);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_23);
lean::cnstr_set(x_26, 1, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_9);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_21);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_5);
lean::cnstr_set(x_29, 1, x_28);
if (lean::obj_tag(x_3) == 0)
{
obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_30 = l_lean_parser_combinators_many___rarg___closed__1;
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_29);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_19);
lean::cnstr_set(x_32, 1, x_31);
x_33 = l_lean_parser_term_if;
x_34 = l_lean_parser_syntax_mk__node(x_33, x_32);
return x_34;
}
else
{
obj* x_35; obj* x_38; obj* x_39; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; 
x_35 = lean::cnstr_get(x_3, 0);
lean::inc(x_35);
lean::dec(x_3);
x_38 = l_lean_parser_term_opt__ident_has__view;
x_39 = lean::cnstr_get(x_38, 1);
lean::inc(x_39);
lean::dec(x_38);
x_42 = lean::apply_1(x_39, x_35);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_24);
x_44 = l_lean_parser_no__kind;
x_45 = l_lean_parser_syntax_mk__node(x_44, x_43);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_29);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_19);
lean::cnstr_set(x_47, 1, x_46);
x_48 = l_lean_parser_term_if;
x_49 = l_lean_parser_syntax_mk__node(x_48, x_47);
return x_49;
}
}
}
obj* _init_l_lean_parser_term_if_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_if_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_if_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_if_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_if_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_if_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_0 = lean::mk_string("if ");
x_1 = lean::mk_nat_obj(0u);
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::mk_string(" then ");
x_4 = l_lean_parser_symbol_tokens___rarg(x_3, x_1);
x_5 = lean::mk_string(" else ");
x_6 = l_lean_parser_symbol_tokens___rarg(x_5, x_1);
x_7 = lean::box(0);
x_8 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_9 = l_lean_parser_list_cons_tokens___rarg(x_8, x_7);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_6, x_9);
x_11 = l_lean_parser_list_cons_tokens___rarg(x_8, x_10);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_4, x_11);
x_13 = l_lean_parser_list_cons_tokens___rarg(x_8, x_12);
x_14 = l_lean_parser_term_opt__ident_parser_lean_parser_has__tokens;
x_15 = l_lean_parser_list_cons_tokens___rarg(x_14, x_13);
x_16 = l_lean_parser_list_cons_tokens___rarg(x_2, x_15);
x_17 = l_lean_parser_tokens___rarg(x_16);
return x_17;
}
}
obj* _init_l_lean_parser_term_if_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_0 = lean::mk_string("if ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::mk_string(" then ");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_8);
lean::closure_set(x_11, 1, x_4);
lean::closure_set(x_11, 2, x_10);
x_12 = lean::mk_string(" else ");
x_13 = l_string_trim(x_12);
lean::inc(x_13);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_15, 0, x_13);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_16, 0, x_13);
lean::closure_set(x_16, 1, x_4);
lean::closure_set(x_16, 2, x_15);
x_17 = lean::box(0);
lean::inc(x_6);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_6);
lean::cnstr_set(x_19, 1, x_17);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_16);
lean::cnstr_set(x_20, 1, x_19);
lean::inc(x_6);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_6);
lean::cnstr_set(x_22, 1, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_11);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_6);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_parser), 5, 0);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_5);
lean::cnstr_set(x_27, 1, x_26);
x_28 = l_lean_parser_term__parser__m_monad;
x_29 = l_lean_parser_term__parser__m_monad__except;
x_30 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_31 = l_lean_parser_term__parser__m_alternative;
x_32 = l_lean_parser_term_if;
x_33 = l_lean_parser_term_if_has__view;
x_34 = l_lean_parser_combinators_node_view___rarg(x_28, x_29, x_30, x_31, x_32, x_27, x_33);
return x_34;
}
}
obj* _init_l_lean_parser_term_if_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_0 = lean::mk_string("if ");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::mk_nat_obj(0u);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_6, 0, x_4);
x_7 = lean::mk_string(" then ");
x_8 = l_string_trim(x_7);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_8);
lean::closure_set(x_11, 1, x_4);
lean::closure_set(x_11, 2, x_10);
x_12 = lean::mk_string(" else ");
x_13 = l_string_trim(x_12);
lean::inc(x_13);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_15, 0, x_13);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_16, 0, x_13);
lean::closure_set(x_16, 1, x_4);
lean::closure_set(x_16, 2, x_15);
x_17 = lean::box(0);
lean::inc(x_6);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_6);
lean::cnstr_set(x_19, 1, x_17);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_16);
lean::cnstr_set(x_20, 1, x_19);
lean::inc(x_6);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_6);
lean::cnstr_set(x_22, 1, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_11);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_6);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__ident_parser), 5, 0);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_5);
lean::cnstr_set(x_27, 1, x_26);
return x_27;
}
}
obj* l_lean_parser_term_if_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_if;
x_6 = l_lean_parser_term_if_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_struct__inst__type() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("struct_inst_type");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
x_4 = lean_name_mk_string(x_0, x_1);
x_5 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_3);
lean::cnstr_set(x_5, 2, x_4);
lean::cnstr_set(x_5, 3, x_0);
lean::cnstr_set(x_5, 4, x_0);
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_0);
return x_6;
}
}
obj* _init_l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 1:
{
obj* x_7; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_10; obj* x_11; 
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_11, 0, x_7);
lean::cnstr_set(x_11, 1, x_10);
return x_11;
}
else
{
obj* x_12; 
x_12 = lean::cnstr_get(x_0, 0);
lean::inc(x_12);
lean::dec(x_0);
switch (lean::obj_tag(x_12)) {
case 0:
{
obj* x_15; obj* x_18; obj* x_19; 
x_15 = lean::cnstr_get(x_12, 0);
lean::inc(x_15);
lean::dec(x_12);
x_18 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_18, 0, x_15);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_7);
lean::cnstr_set(x_19, 1, x_18);
return x_19;
}
case 3:
{
obj* x_20; obj* x_21; 
x_20 = lean::box(0);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_7);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
default:
{
obj* x_23; obj* x_24; 
lean::dec(x_12);
x_23 = lean::box(0);
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_7);
lean::cnstr_set(x_24, 1, x_23);
return x_24;
}
}
}
}
case 3:
{
obj* x_25; 
x_25 = lean::box(0);
x_5 = x_25;
goto lbl_6;
}
default:
{
obj* x_27; 
lean::dec(x_1);
x_27 = lean::box(0);
x_5 = x_27;
goto lbl_6;
}
}
lbl_6:
{
lean::dec(x_5);
if (lean::obj_tag(x_0) == 0)
{
obj* x_29; 
x_29 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
return x_29;
}
else
{
obj* x_30; 
x_30 = lean::cnstr_get(x_0, 0);
lean::inc(x_30);
lean::dec(x_0);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_33; obj* x_36; obj* x_37; obj* x_38; 
x_33 = lean::cnstr_get(x_30, 0);
lean::inc(x_33);
lean::dec(x_30);
x_36 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_36, 0, x_33);
x_37 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_38 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_36);
return x_38;
}
case 3:
{
obj* x_39; 
x_39 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_41; 
lean::dec(x_30);
x_41 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
return x_41;
}
}
}
}
}
}
}
obj* l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 1:
{
obj* x_20; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_23; obj* x_24; 
x_23 = lean::box(0);
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_20);
lean::cnstr_set(x_24, 1, x_23);
return x_24;
}
else
{
obj* x_25; 
x_25 = lean::cnstr_get(x_1, 0);
lean::inc(x_25);
lean::dec(x_1);
switch (lean::obj_tag(x_25)) {
case 0:
{
obj* x_28; obj* x_31; obj* x_32; 
x_28 = lean::cnstr_get(x_25, 0);
lean::inc(x_28);
lean::dec(x_25);
x_31 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_31, 0, x_28);
x_32 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_32, 0, x_20);
lean::cnstr_set(x_32, 1, x_31);
return x_32;
}
case 3:
{
obj* x_33; obj* x_34; 
x_33 = lean::box(0);
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_20);
lean::cnstr_set(x_34, 1, x_33);
return x_34;
}
default:
{
obj* x_36; obj* x_37; 
lean::dec(x_25);
x_36 = lean::box(0);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_20);
lean::cnstr_set(x_37, 1, x_36);
return x_37;
}
}
}
}
case 3:
{
obj* x_38; 
x_38 = lean::box(0);
x_18 = x_38;
goto lbl_19;
}
default:
{
obj* x_40; 
lean::dec(x_2);
x_40 = lean::box(0);
x_18 = x_40;
goto lbl_19;
}
}
lbl_19:
{
lean::dec(x_18);
if (lean::obj_tag(x_1) == 0)
{
obj* x_42; 
x_42 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
return x_42;
}
else
{
obj* x_43; 
x_43 = lean::cnstr_get(x_1, 0);
lean::inc(x_43);
lean::dec(x_1);
switch (lean::obj_tag(x_43)) {
case 0:
{
obj* x_46; obj* x_49; obj* x_50; obj* x_51; 
x_46 = lean::cnstr_get(x_43, 0);
lean::inc(x_46);
lean::dec(x_43);
x_49 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_49, 0, x_46);
x_50 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_51 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_51, 0, x_50);
lean::cnstr_set(x_51, 1, x_49);
return x_51;
}
case 3:
{
obj* x_52; 
x_52 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
return x_52;
}
default:
{
obj* x_54; 
lean::dec(x_43);
x_54 = l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1;
return x_54;
}
}
}
}
}
}
}
obj* l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_1);
x_7 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_8 = l_option_map___rarg(x_7, x_3);
x_9 = lean::box(3);
x_10 = l_option_get__or__else___main___rarg(x_8, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_6);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_lean_parser_term_struct__inst__type;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
}
obj* _init_l_lean_parser_term_struct__inst__type_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_struct__inst__type_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_struct__inst__type_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_struct__inst__with() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("struct_inst_with");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
return x_2;
}
}
obj* l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1;
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
lean::dec(x_6);
switch (lean::obj_tag(x_11)) {
case 0:
{
obj* x_14; obj* x_17; obj* x_18; obj* x_19; 
x_14 = lean::cnstr_get(x_11, 0);
lean::inc(x_14);
lean::dec(x_11);
if (lean::is_scalar(x_5)) {
 x_17 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_17 = x_5;
}
lean::cnstr_set(x_17, 0, x_14);
x_18 = lean::box(3);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_17);
return x_19;
}
case 3:
{
obj* x_21; 
lean::dec(x_5);
x_21 = l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1;
return x_21;
}
default:
{
obj* x_24; 
lean::dec(x_11);
lean::dec(x_5);
x_24 = l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1;
return x_24;
}
}
}
}
else
{
obj* x_25; obj* x_27; 
x_25 = lean::cnstr_get(x_6, 0);
lean::inc(x_25);
x_27 = lean::cnstr_get(x_6, 1);
lean::inc(x_27);
lean::dec(x_6);
if (lean::obj_tag(x_27) == 0)
{
obj* x_31; obj* x_32; 
lean::dec(x_5);
x_31 = lean::box(0);
x_32 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_32, 0, x_25);
lean::cnstr_set(x_32, 1, x_31);
return x_32;
}
else
{
obj* x_33; 
x_33 = lean::cnstr_get(x_27, 0);
lean::inc(x_33);
lean::dec(x_27);
switch (lean::obj_tag(x_33)) {
case 0:
{
obj* x_36; obj* x_39; obj* x_40; 
x_36 = lean::cnstr_get(x_33, 0);
lean::inc(x_36);
lean::dec(x_33);
if (lean::is_scalar(x_5)) {
 x_39 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_39 = x_5;
}
lean::cnstr_set(x_39, 0, x_36);
x_40 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_40, 0, x_25);
lean::cnstr_set(x_40, 1, x_39);
return x_40;
}
case 3:
{
obj* x_42; obj* x_43; 
lean::dec(x_5);
x_42 = lean::box(0);
x_43 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_43, 0, x_25);
lean::cnstr_set(x_43, 1, x_42);
return x_43;
}
default:
{
obj* x_46; obj* x_47; 
lean::dec(x_5);
lean::dec(x_33);
x_46 = lean::box(0);
x_47 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_47, 0, x_25);
lean::cnstr_set(x_47, 1, x_46);
return x_47;
}
}
}
}
}
}
}
obj* l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_7 = l_option_map___rarg(x_6, x_3);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_9);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_1);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_lean_parser_term_struct__inst__with;
x_14 = l_lean_parser_syntax_mk__node(x_13, x_12);
return x_14;
}
}
obj* _init_l_lean_parser_term_struct__inst__with_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_struct__inst__with_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_struct__inst__with_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_struct__inst__field() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("struct_inst_field");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
x_4 = lean_name_mk_string(x_0, x_1);
x_5 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_3);
lean::cnstr_set(x_5, 2, x_4);
lean::cnstr_set(x_5, 3, x_0);
lean::cnstr_set(x_5, 4, x_0);
x_6 = lean::box(3);
x_7 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_0);
lean::cnstr_set(x_7, 2, x_6);
return x_7;
}
}
obj* _init_l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 1:
{
obj* x_7; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
if (lean::obj_tag(x_0) == 0)
{
obj* x_10; 
x_10 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_11; obj* x_12; 
x_11 = lean::box(3);
x_12 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_12, 0, x_7);
lean::cnstr_set(x_12, 1, x_10);
lean::cnstr_set(x_12, 2, x_11);
return x_12;
}
else
{
obj* x_13; obj* x_16; 
x_13 = lean::cnstr_get(x_0, 0);
lean::inc(x_13);
lean::dec(x_0);
x_16 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_16, 0, x_7);
lean::cnstr_set(x_16, 1, x_10);
lean::cnstr_set(x_16, 2, x_13);
return x_16;
}
}
else
{
obj* x_17; obj* x_19; 
x_17 = lean::cnstr_get(x_0, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_0, 1);
lean::inc(x_19);
lean::dec(x_0);
switch (lean::obj_tag(x_17)) {
case 0:
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_17, 0);
lean::inc(x_22);
lean::dec(x_17);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
if (lean::obj_tag(x_19) == 0)
{
obj* x_26; obj* x_27; 
x_26 = lean::box(3);
x_27 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_27, 0, x_7);
lean::cnstr_set(x_27, 1, x_25);
lean::cnstr_set(x_27, 2, x_26);
return x_27;
}
else
{
obj* x_28; obj* x_31; 
x_28 = lean::cnstr_get(x_19, 0);
lean::inc(x_28);
lean::dec(x_19);
x_31 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_31, 0, x_7);
lean::cnstr_set(x_31, 1, x_25);
lean::cnstr_set(x_31, 2, x_28);
return x_31;
}
}
case 3:
{
obj* x_32; 
x_32 = lean::box(0);
if (lean::obj_tag(x_19) == 0)
{
obj* x_33; obj* x_34; 
x_33 = lean::box(3);
x_34 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_34, 0, x_7);
lean::cnstr_set(x_34, 1, x_32);
lean::cnstr_set(x_34, 2, x_33);
return x_34;
}
else
{
obj* x_35; obj* x_38; 
x_35 = lean::cnstr_get(x_19, 0);
lean::inc(x_35);
lean::dec(x_19);
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_7);
lean::cnstr_set(x_38, 1, x_32);
lean::cnstr_set(x_38, 2, x_35);
return x_38;
}
}
default:
{
obj* x_40; 
lean::dec(x_17);
x_40 = lean::box(0);
if (lean::obj_tag(x_19) == 0)
{
obj* x_41; obj* x_42; 
x_41 = lean::box(3);
x_42 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_42, 0, x_7);
lean::cnstr_set(x_42, 1, x_40);
lean::cnstr_set(x_42, 2, x_41);
return x_42;
}
else
{
obj* x_43; obj* x_46; 
x_43 = lean::cnstr_get(x_19, 0);
lean::inc(x_43);
lean::dec(x_19);
x_46 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_46, 0, x_7);
lean::cnstr_set(x_46, 1, x_40);
lean::cnstr_set(x_46, 2, x_43);
return x_46;
}
}
}
}
}
case 3:
{
obj* x_47; 
x_47 = lean::box(0);
x_5 = x_47;
goto lbl_6;
}
default:
{
obj* x_49; 
lean::dec(x_1);
x_49 = lean::box(0);
x_5 = x_49;
goto lbl_6;
}
}
lbl_6:
{
obj* x_51; 
lean::dec(x_5);
x_51 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_52; 
x_52 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_56; obj* x_57; 
x_53 = lean::cnstr_get(x_0, 0);
lean::inc(x_53);
lean::dec(x_0);
x_56 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_57 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_57, 0, x_56);
lean::cnstr_set(x_57, 1, x_51);
lean::cnstr_set(x_57, 2, x_53);
return x_57;
}
}
else
{
obj* x_58; obj* x_60; 
x_58 = lean::cnstr_get(x_0, 0);
lean::inc(x_58);
x_60 = lean::cnstr_get(x_0, 1);
lean::inc(x_60);
lean::dec(x_0);
switch (lean::obj_tag(x_58)) {
case 0:
{
obj* x_63; obj* x_66; 
x_63 = lean::cnstr_get(x_58, 0);
lean::inc(x_63);
lean::dec(x_58);
x_66 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_66, 0, x_63);
if (lean::obj_tag(x_60) == 0)
{
obj* x_67; obj* x_68; obj* x_69; 
x_67 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_68 = lean::box(3);
x_69 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_69, 0, x_67);
lean::cnstr_set(x_69, 1, x_66);
lean::cnstr_set(x_69, 2, x_68);
return x_69;
}
else
{
obj* x_70; obj* x_73; obj* x_74; 
x_70 = lean::cnstr_get(x_60, 0);
lean::inc(x_70);
lean::dec(x_60);
x_73 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_74 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_66);
lean::cnstr_set(x_74, 2, x_70);
return x_74;
}
}
case 3:
{
if (lean::obj_tag(x_60) == 0)
{
obj* x_75; 
x_75 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
return x_75;
}
else
{
obj* x_76; obj* x_79; obj* x_80; 
x_76 = lean::cnstr_get(x_60, 0);
lean::inc(x_76);
lean::dec(x_60);
x_79 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_80 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_80, 0, x_79);
lean::cnstr_set(x_80, 1, x_51);
lean::cnstr_set(x_80, 2, x_76);
return x_80;
}
}
default:
{
lean::dec(x_58);
if (lean::obj_tag(x_60) == 0)
{
obj* x_82; 
x_82 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
return x_82;
}
else
{
obj* x_83; obj* x_86; obj* x_87; 
x_83 = lean::cnstr_get(x_60, 0);
lean::inc(x_83);
lean::dec(x_60);
x_86 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_87 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_87, 0, x_86);
lean::cnstr_set(x_87, 1, x_51);
lean::cnstr_set(x_87, 2, x_83);
return x_87;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 1:
{
obj* x_20; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_23; 
x_23 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_24; obj* x_25; 
x_24 = lean::box(3);
x_25 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_25, 0, x_20);
lean::cnstr_set(x_25, 1, x_23);
lean::cnstr_set(x_25, 2, x_24);
return x_25;
}
else
{
obj* x_26; obj* x_29; 
x_26 = lean::cnstr_get(x_1, 0);
lean::inc(x_26);
lean::dec(x_1);
x_29 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_29, 0, x_20);
lean::cnstr_set(x_29, 1, x_23);
lean::cnstr_set(x_29, 2, x_26);
return x_29;
}
}
else
{
obj* x_30; obj* x_32; 
x_30 = lean::cnstr_get(x_1, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_1, 1);
lean::inc(x_32);
lean::dec(x_1);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_35; obj* x_38; 
x_35 = lean::cnstr_get(x_30, 0);
lean::inc(x_35);
lean::dec(x_30);
x_38 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_38, 0, x_35);
if (lean::obj_tag(x_32) == 0)
{
obj* x_39; obj* x_40; 
x_39 = lean::box(3);
x_40 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_40, 0, x_20);
lean::cnstr_set(x_40, 1, x_38);
lean::cnstr_set(x_40, 2, x_39);
return x_40;
}
else
{
obj* x_41; obj* x_44; 
x_41 = lean::cnstr_get(x_32, 0);
lean::inc(x_41);
lean::dec(x_32);
x_44 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_44, 0, x_20);
lean::cnstr_set(x_44, 1, x_38);
lean::cnstr_set(x_44, 2, x_41);
return x_44;
}
}
case 3:
{
obj* x_45; 
x_45 = lean::box(0);
if (lean::obj_tag(x_32) == 0)
{
obj* x_46; obj* x_47; 
x_46 = lean::box(3);
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_20);
lean::cnstr_set(x_47, 1, x_45);
lean::cnstr_set(x_47, 2, x_46);
return x_47;
}
else
{
obj* x_48; obj* x_51; 
x_48 = lean::cnstr_get(x_32, 0);
lean::inc(x_48);
lean::dec(x_32);
x_51 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_51, 0, x_20);
lean::cnstr_set(x_51, 1, x_45);
lean::cnstr_set(x_51, 2, x_48);
return x_51;
}
}
default:
{
obj* x_53; 
lean::dec(x_30);
x_53 = lean::box(0);
if (lean::obj_tag(x_32) == 0)
{
obj* x_54; obj* x_55; 
x_54 = lean::box(3);
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_20);
lean::cnstr_set(x_55, 1, x_53);
lean::cnstr_set(x_55, 2, x_54);
return x_55;
}
else
{
obj* x_56; obj* x_59; 
x_56 = lean::cnstr_get(x_32, 0);
lean::inc(x_56);
lean::dec(x_32);
x_59 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_59, 0, x_20);
lean::cnstr_set(x_59, 1, x_53);
lean::cnstr_set(x_59, 2, x_56);
return x_59;
}
}
}
}
}
case 3:
{
obj* x_60; 
x_60 = lean::box(0);
x_18 = x_60;
goto lbl_19;
}
default:
{
obj* x_62; 
lean::dec(x_2);
x_62 = lean::box(0);
x_18 = x_62;
goto lbl_19;
}
}
lbl_19:
{
obj* x_64; 
lean::dec(x_18);
x_64 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_65; 
x_65 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
return x_65;
}
else
{
obj* x_66; obj* x_69; obj* x_70; 
x_66 = lean::cnstr_get(x_1, 0);
lean::inc(x_66);
lean::dec(x_1);
x_69 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_70 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_70, 0, x_69);
lean::cnstr_set(x_70, 1, x_64);
lean::cnstr_set(x_70, 2, x_66);
return x_70;
}
}
else
{
obj* x_71; obj* x_73; 
x_71 = lean::cnstr_get(x_1, 0);
lean::inc(x_71);
x_73 = lean::cnstr_get(x_1, 1);
lean::inc(x_73);
lean::dec(x_1);
switch (lean::obj_tag(x_71)) {
case 0:
{
obj* x_76; obj* x_79; 
x_76 = lean::cnstr_get(x_71, 0);
lean::inc(x_76);
lean::dec(x_71);
x_79 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_79, 0, x_76);
if (lean::obj_tag(x_73) == 0)
{
obj* x_80; obj* x_81; obj* x_82; 
x_80 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_81 = lean::box(3);
x_82 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_82, 0, x_80);
lean::cnstr_set(x_82, 1, x_79);
lean::cnstr_set(x_82, 2, x_81);
return x_82;
}
else
{
obj* x_83; obj* x_86; obj* x_87; 
x_83 = lean::cnstr_get(x_73, 0);
lean::inc(x_83);
lean::dec(x_73);
x_86 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_87 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_87, 0, x_86);
lean::cnstr_set(x_87, 1, x_79);
lean::cnstr_set(x_87, 2, x_83);
return x_87;
}
}
case 3:
{
if (lean::obj_tag(x_73) == 0)
{
obj* x_88; 
x_88 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
return x_88;
}
else
{
obj* x_89; obj* x_92; obj* x_93; 
x_89 = lean::cnstr_get(x_73, 0);
lean::inc(x_89);
lean::dec(x_73);
x_92 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_93 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_93, 0, x_92);
lean::cnstr_set(x_93, 1, x_64);
lean::cnstr_set(x_93, 2, x_89);
return x_93;
}
}
default:
{
lean::dec(x_71);
if (lean::obj_tag(x_73) == 0)
{
obj* x_95; 
x_95 = l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1;
return x_95;
}
else
{
obj* x_96; obj* x_99; obj* x_100; 
x_96 = lean::cnstr_get(x_73, 0);
lean::inc(x_96);
lean::dec(x_73);
x_99 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_100 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_100, 0, x_99);
lean::cnstr_set(x_100, 1, x_64);
lean::cnstr_set(x_100, 2, x_96);
return x_100;
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_1);
x_9 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_10 = l_option_map___rarg(x_9, x_3);
x_11 = lean::box(3);
x_12 = l_option_get__or__else___main___rarg(x_10, x_11);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_5);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_12);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_8);
lean::cnstr_set(x_16, 1, x_15);
x_17 = l_lean_parser_term_struct__inst__field;
x_18 = l_lean_parser_syntax_mk__node(x_17, x_16);
return x_18;
}
}
obj* _init_l_lean_parser_term_struct__inst__field_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_struct__inst__field_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_struct__inst__field_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_struct__inst__source() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("struct_inst_source");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_2; 
x_2 = lean::box(0);
x_0 = x_2;
goto lbl_1;
lbl_1:
{
obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = l_lean_parser_syntax_as__node___main(x_3);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; obj* x_6; 
x_5 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1;
x_6 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_6, 0, x_0);
lean::cnstr_set(x_6, 1, x_5);
return x_6;
}
else
{
obj* x_7; obj* x_9; obj* x_10; 
x_7 = lean::cnstr_get(x_4, 0);
if (lean::is_exclusive(x_4)) {
 lean::cnstr_set(x_4, 0, lean::box(0));
 x_9 = x_4;
} else {
 lean::inc(x_7);
 lean::dec(x_4);
 x_9 = lean::box(0);
}
x_10 = lean::cnstr_get(x_7, 1);
lean::inc(x_10);
lean::dec(x_7);
if (lean::obj_tag(x_10) == 0)
{
obj* x_14; obj* x_15; 
lean::dec(x_9);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_0);
lean::cnstr_set(x_15, 1, x_14);
return x_15;
}
else
{
obj* x_16; obj* x_18; 
x_16 = lean::cnstr_get(x_10, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_10, 1);
lean::inc(x_18);
lean::dec(x_10);
if (lean::obj_tag(x_18) == 0)
{
obj* x_21; obj* x_22; 
if (lean::is_scalar(x_9)) {
 x_21 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_21 = x_9;
}
lean::cnstr_set(x_21, 0, x_16);
x_22 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_22, 0, x_0);
lean::cnstr_set(x_22, 1, x_21);
return x_22;
}
else
{
obj* x_26; obj* x_27; 
lean::dec(x_9);
lean::dec(x_18);
lean::dec(x_16);
x_26 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1;
x_27 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_27, 0, x_0);
lean::cnstr_set(x_27, 1, x_26);
return x_27;
}
}
}
}
}
}
obj* l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_4; obj* x_6; 
x_6 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_6) == 0)
{
obj* x_7; 
x_7 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2;
return x_7;
}
else
{
obj* x_8; obj* x_10; obj* x_11; 
x_8 = lean::cnstr_get(x_6, 0);
if (lean::is_exclusive(x_6)) {
 lean::cnstr_set(x_6, 0, lean::box(0));
 x_10 = x_6;
} else {
 lean::inc(x_8);
 lean::dec(x_6);
 x_10 = lean::box(0);
}
x_11 = lean::cnstr_get(x_8, 1);
lean::inc(x_11);
lean::dec(x_8);
if (lean::obj_tag(x_11) == 0)
{
lean::dec(x_10);
if (lean::obj_tag(x_11) == 0)
{
obj* x_15; 
x_15 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2;
return x_15;
}
else
{
obj* x_16; obj* x_19; 
x_16 = lean::cnstr_get(x_11, 0);
lean::inc(x_16);
lean::dec(x_11);
x_19 = lean::box(0);
x_3 = x_19;
x_4 = x_16;
goto lbl_5;
}
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
switch (lean::obj_tag(x_20)) {
case 0:
{
obj* x_25; obj* x_28; 
x_25 = lean::cnstr_get(x_20, 0);
lean::inc(x_25);
lean::dec(x_20);
if (lean::is_scalar(x_10)) {
 x_28 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_28 = x_10;
}
lean::cnstr_set(x_28, 0, x_25);
if (lean::obj_tag(x_22) == 0)
{
x_1 = x_28;
goto lbl_2;
}
else
{
obj* x_29; 
x_29 = lean::cnstr_get(x_22, 0);
lean::inc(x_29);
lean::dec(x_22);
x_3 = x_28;
x_4 = x_29;
goto lbl_5;
}
}
case 3:
{
lean::dec(x_10);
if (lean::obj_tag(x_22) == 0)
{
obj* x_33; 
x_33 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2;
return x_33;
}
else
{
obj* x_34; obj* x_37; 
x_34 = lean::cnstr_get(x_22, 0);
lean::inc(x_34);
lean::dec(x_22);
x_37 = lean::box(0);
x_3 = x_37;
x_4 = x_34;
goto lbl_5;
}
}
default:
{
lean::dec(x_10);
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_40; 
x_40 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2;
return x_40;
}
else
{
obj* x_41; obj* x_44; 
x_41 = lean::cnstr_get(x_22, 0);
lean::inc(x_41);
lean::dec(x_22);
x_44 = lean::box(0);
x_3 = x_44;
x_4 = x_41;
goto lbl_5;
}
}
}
}
}
lbl_2:
{
obj* x_45; obj* x_46; 
x_45 = lean::box(3);
x_46 = l_lean_parser_syntax_as__node___main(x_45);
if (lean::obj_tag(x_46) == 0)
{
obj* x_47; obj* x_48; 
x_47 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1;
x_48 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_48, 0, x_1);
lean::cnstr_set(x_48, 1, x_47);
return x_48;
}
else
{
obj* x_49; obj* x_51; obj* x_52; 
x_49 = lean::cnstr_get(x_46, 0);
if (lean::is_exclusive(x_46)) {
 lean::cnstr_set(x_46, 0, lean::box(0));
 x_51 = x_46;
} else {
 lean::inc(x_49);
 lean::dec(x_46);
 x_51 = lean::box(0);
}
x_52 = lean::cnstr_get(x_49, 1);
lean::inc(x_52);
lean::dec(x_49);
if (lean::obj_tag(x_52) == 0)
{
obj* x_56; obj* x_57; 
lean::dec(x_51);
x_56 = lean::box(0);
x_57 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_57, 0, x_1);
lean::cnstr_set(x_57, 1, x_56);
return x_57;
}
else
{
obj* x_58; obj* x_60; 
x_58 = lean::cnstr_get(x_52, 0);
lean::inc(x_58);
x_60 = lean::cnstr_get(x_52, 1);
lean::inc(x_60);
lean::dec(x_52);
if (lean::obj_tag(x_60) == 0)
{
obj* x_63; obj* x_64; 
if (lean::is_scalar(x_51)) {
 x_63 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_63 = x_51;
}
lean::cnstr_set(x_63, 0, x_58);
x_64 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_64, 0, x_1);
lean::cnstr_set(x_64, 1, x_63);
return x_64;
}
else
{
obj* x_68; obj* x_69; 
lean::dec(x_58);
lean::dec(x_60);
lean::dec(x_51);
x_68 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1;
x_69 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_69, 0, x_1);
lean::cnstr_set(x_69, 1, x_68);
return x_69;
}
}
}
}
lbl_5:
{
obj* x_70; 
x_70 = l_lean_parser_syntax_as__node___main(x_4);
if (lean::obj_tag(x_70) == 0)
{
obj* x_71; obj* x_72; 
x_71 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1;
x_72 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_72, 0, x_3);
lean::cnstr_set(x_72, 1, x_71);
return x_72;
}
else
{
obj* x_73; obj* x_75; obj* x_76; 
x_73 = lean::cnstr_get(x_70, 0);
if (lean::is_exclusive(x_70)) {
 lean::cnstr_set(x_70, 0, lean::box(0));
 x_75 = x_70;
} else {
 lean::inc(x_73);
 lean::dec(x_70);
 x_75 = lean::box(0);
}
x_76 = lean::cnstr_get(x_73, 1);
lean::inc(x_76);
lean::dec(x_73);
if (lean::obj_tag(x_76) == 0)
{
obj* x_80; obj* x_81; 
lean::dec(x_75);
x_80 = lean::box(0);
x_81 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_81, 0, x_3);
lean::cnstr_set(x_81, 1, x_80);
return x_81;
}
else
{
obj* x_82; obj* x_84; 
x_82 = lean::cnstr_get(x_76, 0);
lean::inc(x_82);
x_84 = lean::cnstr_get(x_76, 1);
lean::inc(x_84);
lean::dec(x_76);
if (lean::obj_tag(x_84) == 0)
{
obj* x_87; obj* x_88; 
if (lean::is_scalar(x_75)) {
 x_87 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_87 = x_75;
}
lean::cnstr_set(x_87, 0, x_82);
x_88 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_88, 0, x_3);
lean::cnstr_set(x_88, 1, x_87);
return x_88;
}
else
{
obj* x_92; obj* x_93; 
lean::dec(x_75);
lean::dec(x_82);
lean::dec(x_84);
x_92 = l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1;
x_93 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_93, 0, x_3);
lean::cnstr_set(x_93, 1, x_92);
return x_93;
}
}
}
}
}
}
obj* l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_7 = l_option_map___rarg(x_6, x_1);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
if (lean::obj_tag(x_3) == 0)
{
obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_10 = l_lean_parser_detail__ident_has__view_x_27___lambda__2___closed__1;
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_9);
lean::cnstr_set(x_11, 1, x_10);
x_12 = l_lean_parser_term_struct__inst__source;
x_13 = l_lean_parser_syntax_mk__node(x_12, x_11);
return x_13;
}
else
{
obj* x_14; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_14 = lean::cnstr_get(x_3, 0);
lean::inc(x_14);
lean::dec(x_3);
x_17 = lean::box(0);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_14);
lean::cnstr_set(x_18, 1, x_17);
x_19 = l_lean_parser_no__kind;
x_20 = l_lean_parser_syntax_mk__node(x_19, x_18);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_17);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_9);
lean::cnstr_set(x_22, 1, x_21);
x_23 = l_lean_parser_term_struct__inst__source;
x_24 = l_lean_parser_syntax_mk__node(x_23, x_22);
return x_24;
}
}
}
obj* _init_l_lean_parser_term_struct__inst__source_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_struct__inst__source_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_struct__inst__source_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_struct__inst__item() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("struct_inst_item");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; obj* x_9; obj* x_12; obj* x_13; 
x_8 = l_lean_parser_term_struct__inst__source_has__view;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_0);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
else
{
obj* x_14; obj* x_15; obj* x_18; obj* x_19; 
x_14 = l_lean_parser_term_struct__inst__field_has__view;
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_0);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_18);
return x_19;
}
}
}
}
obj* _init_l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("struct_inst_item");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__2;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; obj* x_69; obj* x_72; obj* x_73; 
x_68 = l_lean_parser_term_struct__inst__source_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_1);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
else
{
obj* x_74; obj* x_75; obj* x_78; obj* x_79; 
x_74 = l_lean_parser_term_struct__inst__field_has__view;
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
lean::dec(x_74);
x_78 = lean::apply_1(x_75, x_1);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
}
}
obj* l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_lean_parser_term_struct__inst__field_has__view;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_12 = l_lean_parser_syntax_mk__node(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_lean_parser_term_struct__inst__item;
x_15 = l_lean_parser_syntax_mk__node(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_lean_parser_term_struct__inst__source_has__view;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_26 = l_lean_parser_syntax_mk__node(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_lean_parser_term_struct__inst__item;
x_29 = l_lean_parser_syntax_mk__node(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_lean_parser_term_struct__inst__item_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_struct__inst__item_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_struct__inst__item_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_struct__inst() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("struct_inst");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
if (lean::obj_tag(x_4) == 0)
{
obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_7 = l_lean_parser_term_struct__inst__item_has__view;
x_8 = lean::cnstr_get(x_7, 0);
lean::inc(x_8);
lean::dec(x_7);
x_11 = lean::apply_1(x_8, x_2);
x_12 = lean::box(0);
x_13 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set(x_13, 1, x_12);
if (lean::is_scalar(x_6)) {
 x_14 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_14 = x_6;
}
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_12);
return x_14;
}
else
{
obj* x_15; obj* x_17; obj* x_20; obj* x_21; obj* x_24; obj* x_25; 
x_15 = lean::cnstr_get(x_4, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_4, 1);
lean::inc(x_17);
lean::dec(x_4);
x_20 = l_lean_parser_term_struct__inst__item_has__view;
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
lean::dec(x_20);
x_24 = lean::apply_1(x_21, x_2);
x_25 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__1(x_17);
switch (lean::obj_tag(x_15)) {
case 0:
{
obj* x_26; obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
x_26 = lean::cnstr_get(x_15, 0);
lean::inc(x_26);
lean::dec(x_15);
x_29 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_29, 0, x_26);
x_30 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_30, 0, x_29);
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_24);
lean::cnstr_set(x_31, 1, x_30);
if (lean::is_scalar(x_6)) {
 x_32 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_32 = x_6;
}
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_25);
return x_32;
}
case 3:
{
obj* x_33; obj* x_34; obj* x_35; 
x_33 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_24);
lean::cnstr_set(x_34, 1, x_33);
if (lean::is_scalar(x_6)) {
 x_35 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_35 = x_6;
}
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_25);
return x_35;
}
default:
{
obj* x_37; obj* x_38; obj* x_39; 
lean::dec(x_15);
x_37 = l_lean_parser_command_notation_has__view_x_27___lambda__1___closed__1;
x_38 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_38, 0, x_24);
lean::cnstr_set(x_38, 1, x_37);
if (lean::is_scalar(x_6)) {
 x_39 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_39 = x_6;
}
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_25);
return x_39;
}
}
}
}
}
}
obj* l_list_map___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__2(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_12; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
x_7 = lean::cnstr_get(x_2, 0);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_2, 1);
lean::inc(x_9);
lean::dec(x_2);
x_12 = l_list_map___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__2(x_4);
if (lean::obj_tag(x_9) == 0)
{
obj* x_13; obj* x_14; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
x_13 = l_lean_parser_term_struct__inst__item_has__view;
x_14 = lean::cnstr_get(x_13, 1);
lean::inc(x_14);
lean::dec(x_13);
x_17 = lean::apply_1(x_14, x_7);
x_18 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_19 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_19 = x_6;
}
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_12);
return x_20;
}
else
{
obj* x_21; obj* x_24; obj* x_25; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; 
x_21 = lean::cnstr_get(x_9, 0);
lean::inc(x_21);
lean::dec(x_9);
x_24 = l_lean_parser_term_struct__inst__item_has__view;
x_25 = lean::cnstr_get(x_24, 1);
lean::inc(x_25);
lean::dec(x_24);
x_28 = lean::apply_1(x_25, x_7);
x_29 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_30 = l_option_map___rarg(x_29, x_21);
x_31 = lean::box(3);
x_32 = l_option_get__or__else___main___rarg(x_30, x_31);
x_33 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_34 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_34 = x_6;
}
lean::cnstr_set(x_34, 0, x_32);
lean::cnstr_set(x_34, 1, x_33);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_28);
lean::cnstr_set(x_35, 1, x_34);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_12);
return x_36;
}
}
}
}
obj* _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = l_lean_parser_term_struct__inst__item_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_6);
return x_8;
}
}
obj* _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_lean_parser_term_struct__inst__with_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_lean_parser_term_struct__inst__type_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = lean::box(3);
x_14 = x_0;
x_15 = x_17;
goto lbl_16;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
x_14 = x_20;
x_15 = x_18;
goto lbl_16;
}
lbl_16:
{
obj* x_23; obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_15);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3;
x_23 = x_26;
goto lbl_24;
}
else
{
obj* x_27; obj* x_29; obj* x_30; 
x_27 = lean::cnstr_get(x_25, 0);
if (lean::is_exclusive(x_25)) {
 lean::cnstr_set(x_25, 0, lean::box(0));
 x_29 = x_25;
} else {
 lean::inc(x_27);
 lean::dec(x_25);
 x_29 = lean::box(0);
}
x_30 = lean::cnstr_get(x_27, 1);
lean::inc(x_30);
lean::dec(x_27);
if (lean::obj_tag(x_30) == 0)
{
obj* x_34; 
lean::dec(x_29);
x_34 = lean::box(0);
x_23 = x_34;
goto lbl_24;
}
else
{
obj* x_35; obj* x_37; 
x_35 = lean::cnstr_get(x_30, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_30, 1);
lean::inc(x_37);
lean::dec(x_30);
if (lean::obj_tag(x_37) == 0)
{
obj* x_40; obj* x_41; obj* x_44; obj* x_45; 
x_40 = l_lean_parser_term_struct__inst__type_has__view;
x_41 = lean::cnstr_get(x_40, 0);
lean::inc(x_41);
lean::dec(x_40);
x_44 = lean::apply_1(x_41, x_35);
if (lean::is_scalar(x_29)) {
 x_45 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_45 = x_29;
}
lean::cnstr_set(x_45, 0, x_44);
x_23 = x_45;
goto lbl_24;
}
else
{
obj* x_49; 
lean::dec(x_29);
lean::dec(x_35);
lean::dec(x_37);
x_49 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3;
x_23 = x_49;
goto lbl_24;
}
}
}
lbl_24:
{
obj* x_50; obj* x_51; 
if (lean::obj_tag(x_14) == 0)
{
obj* x_53; 
x_53 = lean::box(3);
x_50 = x_14;
x_51 = x_53;
goto lbl_52;
}
else
{
obj* x_54; obj* x_56; 
x_54 = lean::cnstr_get(x_14, 0);
lean::inc(x_54);
x_56 = lean::cnstr_get(x_14, 1);
lean::inc(x_56);
lean::dec(x_14);
x_50 = x_56;
x_51 = x_54;
goto lbl_52;
}
lbl_52:
{
obj* x_59; obj* x_61; 
x_61 = l_lean_parser_syntax_as__node___main(x_51);
if (lean::obj_tag(x_61) == 0)
{
obj* x_62; 
x_62 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2;
x_59 = x_62;
goto lbl_60;
}
else
{
obj* x_63; obj* x_65; obj* x_66; 
x_63 = lean::cnstr_get(x_61, 0);
if (lean::is_exclusive(x_61)) {
 lean::cnstr_set(x_61, 0, lean::box(0));
 x_65 = x_61;
} else {
 lean::inc(x_63);
 lean::dec(x_61);
 x_65 = lean::box(0);
}
x_66 = lean::cnstr_get(x_63, 1);
lean::inc(x_66);
lean::dec(x_63);
if (lean::obj_tag(x_66) == 0)
{
obj* x_70; 
lean::dec(x_65);
x_70 = lean::box(0);
x_59 = x_70;
goto lbl_60;
}
else
{
obj* x_71; obj* x_73; 
x_71 = lean::cnstr_get(x_66, 0);
lean::inc(x_71);
x_73 = lean::cnstr_get(x_66, 1);
lean::inc(x_73);
lean::dec(x_66);
if (lean::obj_tag(x_73) == 0)
{
obj* x_76; obj* x_77; obj* x_80; obj* x_81; 
x_76 = l_lean_parser_term_struct__inst__with_has__view;
x_77 = lean::cnstr_get(x_76, 0);
lean::inc(x_77);
lean::dec(x_76);
x_80 = lean::apply_1(x_77, x_71);
if (lean::is_scalar(x_65)) {
 x_81 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_81 = x_65;
}
lean::cnstr_set(x_81, 0, x_80);
x_59 = x_81;
goto lbl_60;
}
else
{
obj* x_85; 
lean::dec(x_65);
lean::dec(x_73);
lean::dec(x_71);
x_85 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2;
x_59 = x_85;
goto lbl_60;
}
}
}
lbl_60:
{
obj* x_86; obj* x_87; 
if (lean::obj_tag(x_50) == 0)
{
obj* x_89; 
x_89 = lean::box(3);
x_86 = x_50;
x_87 = x_89;
goto lbl_88;
}
else
{
obj* x_90; obj* x_92; 
x_90 = lean::cnstr_get(x_50, 0);
lean::inc(x_90);
x_92 = lean::cnstr_get(x_50, 1);
lean::inc(x_92);
lean::dec(x_50);
x_86 = x_92;
x_87 = x_90;
goto lbl_88;
}
lbl_88:
{
obj* x_95; 
x_95 = l_lean_parser_syntax_as__node___main(x_87);
if (lean::obj_tag(x_95) == 0)
{
obj* x_96; 
x_96 = lean::box(0);
if (lean::obj_tag(x_86) == 0)
{
obj* x_97; obj* x_98; 
x_97 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
x_98 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_98, 0, x_5);
lean::cnstr_set(x_98, 1, x_23);
lean::cnstr_set(x_98, 2, x_59);
lean::cnstr_set(x_98, 3, x_97);
lean::cnstr_set(x_98, 4, x_96);
return x_98;
}
else
{
obj* x_99; 
x_99 = lean::cnstr_get(x_86, 0);
lean::inc(x_99);
lean::dec(x_86);
switch (lean::obj_tag(x_99)) {
case 0:
{
obj* x_102; obj* x_105; obj* x_106; obj* x_107; 
x_102 = lean::cnstr_get(x_99, 0);
lean::inc(x_102);
lean::dec(x_99);
x_105 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_105, 0, x_102);
x_106 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
x_107 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_107, 0, x_5);
lean::cnstr_set(x_107, 1, x_23);
lean::cnstr_set(x_107, 2, x_59);
lean::cnstr_set(x_107, 3, x_106);
lean::cnstr_set(x_107, 4, x_105);
return x_107;
}
case 3:
{
obj* x_108; obj* x_109; 
x_108 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
x_109 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_109, 0, x_5);
lean::cnstr_set(x_109, 1, x_23);
lean::cnstr_set(x_109, 2, x_59);
lean::cnstr_set(x_109, 3, x_108);
lean::cnstr_set(x_109, 4, x_96);
return x_109;
}
default:
{
obj* x_111; obj* x_112; 
lean::dec(x_99);
x_111 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
x_112 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_112, 0, x_5);
lean::cnstr_set(x_112, 1, x_23);
lean::cnstr_set(x_112, 2, x_59);
lean::cnstr_set(x_112, 3, x_111);
lean::cnstr_set(x_112, 4, x_96);
return x_112;
}
}
}
}
else
{
obj* x_113; obj* x_115; obj* x_116; obj* x_119; 
x_113 = lean::cnstr_get(x_95, 0);
if (lean::is_exclusive(x_95)) {
 lean::cnstr_set(x_95, 0, lean::box(0));
 x_115 = x_95;
} else {
 lean::inc(x_113);
 lean::dec(x_95);
 x_115 = lean::box(0);
}
x_116 = lean::cnstr_get(x_113, 1);
lean::inc(x_116);
lean::dec(x_113);
x_119 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__1(x_116);
if (lean::obj_tag(x_86) == 0)
{
obj* x_121; obj* x_122; 
lean::dec(x_115);
x_121 = lean::box(0);
x_122 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_122, 0, x_5);
lean::cnstr_set(x_122, 1, x_23);
lean::cnstr_set(x_122, 2, x_59);
lean::cnstr_set(x_122, 3, x_119);
lean::cnstr_set(x_122, 4, x_121);
return x_122;
}
else
{
obj* x_123; 
x_123 = lean::cnstr_get(x_86, 0);
lean::inc(x_123);
lean::dec(x_86);
switch (lean::obj_tag(x_123)) {
case 0:
{
obj* x_126; obj* x_129; obj* x_130; 
x_126 = lean::cnstr_get(x_123, 0);
lean::inc(x_126);
lean::dec(x_123);
if (lean::is_scalar(x_115)) {
 x_129 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_129 = x_115;
}
lean::cnstr_set(x_129, 0, x_126);
x_130 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_130, 0, x_5);
lean::cnstr_set(x_130, 1, x_23);
lean::cnstr_set(x_130, 2, x_59);
lean::cnstr_set(x_130, 3, x_119);
lean::cnstr_set(x_130, 4, x_129);
return x_130;
}
case 3:
{
obj* x_132; obj* x_133; 
lean::dec(x_115);
x_132 = lean::box(0);
x_133 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_133, 0, x_5);
lean::cnstr_set(x_133, 1, x_23);
lean::cnstr_set(x_133, 2, x_59);
lean::cnstr_set(x_133, 3, x_119);
lean::cnstr_set(x_133, 4, x_132);
return x_133;
}
default:
{
obj* x_136; obj* x_137; 
lean::dec(x_123);
lean::dec(x_115);
x_136 = lean::box(0);
x_137 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_137, 0, x_5);
lean::cnstr_set(x_137, 1, x_23);
lean::cnstr_set(x_137, 2, x_59);
lean::cnstr_set(x_137, 3, x_119);
lean::cnstr_set(x_137, 4, x_136);
return x_137;
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__4;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; obj* x_38; 
x_38 = l_lean_parser_syntax_as__node___main(x_28);
if (lean::obj_tag(x_38) == 0)
{
obj* x_39; 
x_39 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3;
x_36 = x_39;
goto lbl_37;
}
else
{
obj* x_40; obj* x_42; obj* x_43; 
x_40 = lean::cnstr_get(x_38, 0);
if (lean::is_exclusive(x_38)) {
 lean::cnstr_set(x_38, 0, lean::box(0));
 x_42 = x_38;
} else {
 lean::inc(x_40);
 lean::dec(x_38);
 x_42 = lean::box(0);
}
x_43 = lean::cnstr_get(x_40, 1);
lean::inc(x_43);
lean::dec(x_40);
if (lean::obj_tag(x_43) == 0)
{
obj* x_47; 
lean::dec(x_42);
x_47 = lean::box(0);
x_36 = x_47;
goto lbl_37;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_43, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_43, 1);
lean::inc(x_50);
lean::dec(x_43);
if (lean::obj_tag(x_50) == 0)
{
obj* x_53; obj* x_54; obj* x_57; obj* x_58; 
x_53 = l_lean_parser_term_struct__inst__type_has__view;
x_54 = lean::cnstr_get(x_53, 0);
lean::inc(x_54);
lean::dec(x_53);
x_57 = lean::apply_1(x_54, x_48);
if (lean::is_scalar(x_42)) {
 x_58 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_58 = x_42;
}
lean::cnstr_set(x_58, 0, x_57);
x_36 = x_58;
goto lbl_37;
}
else
{
obj* x_62; 
lean::dec(x_42);
lean::dec(x_48);
lean::dec(x_50);
x_62 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3;
x_36 = x_62;
goto lbl_37;
}
}
}
lbl_37:
{
obj* x_63; obj* x_64; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_66; 
x_66 = lean::box(3);
x_63 = x_27;
x_64 = x_66;
goto lbl_65;
}
else
{
obj* x_67; obj* x_69; 
x_67 = lean::cnstr_get(x_27, 0);
lean::inc(x_67);
x_69 = lean::cnstr_get(x_27, 1);
lean::inc(x_69);
lean::dec(x_27);
x_63 = x_69;
x_64 = x_67;
goto lbl_65;
}
lbl_65:
{
obj* x_72; obj* x_74; 
x_74 = l_lean_parser_syntax_as__node___main(x_64);
if (lean::obj_tag(x_74) == 0)
{
obj* x_75; 
x_75 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2;
x_72 = x_75;
goto lbl_73;
}
else
{
obj* x_76; obj* x_78; obj* x_79; 
x_76 = lean::cnstr_get(x_74, 0);
if (lean::is_exclusive(x_74)) {
 lean::cnstr_set(x_74, 0, lean::box(0));
 x_78 = x_74;
} else {
 lean::inc(x_76);
 lean::dec(x_74);
 x_78 = lean::box(0);
}
x_79 = lean::cnstr_get(x_76, 1);
lean::inc(x_79);
lean::dec(x_76);
if (lean::obj_tag(x_79) == 0)
{
obj* x_83; 
lean::dec(x_78);
x_83 = lean::box(0);
x_72 = x_83;
goto lbl_73;
}
else
{
obj* x_84; obj* x_86; 
x_84 = lean::cnstr_get(x_79, 0);
lean::inc(x_84);
x_86 = lean::cnstr_get(x_79, 1);
lean::inc(x_86);
lean::dec(x_79);
if (lean::obj_tag(x_86) == 0)
{
obj* x_89; obj* x_90; obj* x_93; obj* x_94; 
x_89 = l_lean_parser_term_struct__inst__with_has__view;
x_90 = lean::cnstr_get(x_89, 0);
lean::inc(x_90);
lean::dec(x_89);
x_93 = lean::apply_1(x_90, x_84);
if (lean::is_scalar(x_78)) {
 x_94 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_94 = x_78;
}
lean::cnstr_set(x_94, 0, x_93);
x_72 = x_94;
goto lbl_73;
}
else
{
obj* x_98; 
lean::dec(x_86);
lean::dec(x_78);
lean::dec(x_84);
x_98 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2;
x_72 = x_98;
goto lbl_73;
}
}
}
lbl_73:
{
obj* x_99; obj* x_100; 
if (lean::obj_tag(x_63) == 0)
{
obj* x_102; 
x_102 = lean::box(3);
x_99 = x_63;
x_100 = x_102;
goto lbl_101;
}
else
{
obj* x_103; obj* x_105; 
x_103 = lean::cnstr_get(x_63, 0);
lean::inc(x_103);
x_105 = lean::cnstr_get(x_63, 1);
lean::inc(x_105);
lean::dec(x_63);
x_99 = x_105;
x_100 = x_103;
goto lbl_101;
}
lbl_101:
{
obj* x_108; 
x_108 = l_lean_parser_syntax_as__node___main(x_100);
if (lean::obj_tag(x_108) == 0)
{
obj* x_109; 
x_109 = lean::box(0);
if (lean::obj_tag(x_99) == 0)
{
obj* x_110; obj* x_111; 
x_110 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
x_111 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_111, 0, x_18);
lean::cnstr_set(x_111, 1, x_36);
lean::cnstr_set(x_111, 2, x_72);
lean::cnstr_set(x_111, 3, x_110);
lean::cnstr_set(x_111, 4, x_109);
return x_111;
}
else
{
obj* x_112; 
x_112 = lean::cnstr_get(x_99, 0);
lean::inc(x_112);
lean::dec(x_99);
switch (lean::obj_tag(x_112)) {
case 0:
{
obj* x_115; obj* x_118; obj* x_119; obj* x_120; 
x_115 = lean::cnstr_get(x_112, 0);
lean::inc(x_115);
lean::dec(x_112);
x_118 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_118, 0, x_115);
x_119 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
x_120 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_120, 0, x_18);
lean::cnstr_set(x_120, 1, x_36);
lean::cnstr_set(x_120, 2, x_72);
lean::cnstr_set(x_120, 3, x_119);
lean::cnstr_set(x_120, 4, x_118);
return x_120;
}
case 3:
{
obj* x_121; obj* x_122; 
x_121 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
x_122 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_122, 0, x_18);
lean::cnstr_set(x_122, 1, x_36);
lean::cnstr_set(x_122, 2, x_72);
lean::cnstr_set(x_122, 3, x_121);
lean::cnstr_set(x_122, 4, x_109);
return x_122;
}
default:
{
obj* x_124; obj* x_125; 
lean::dec(x_112);
x_124 = l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1;
x_125 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_125, 0, x_18);
lean::cnstr_set(x_125, 1, x_36);
lean::cnstr_set(x_125, 2, x_72);
lean::cnstr_set(x_125, 3, x_124);
lean::cnstr_set(x_125, 4, x_109);
return x_125;
}
}
}
}
else
{
obj* x_126; obj* x_128; obj* x_129; obj* x_132; 
x_126 = lean::cnstr_get(x_108, 0);
if (lean::is_exclusive(x_108)) {
 lean::cnstr_set(x_108, 0, lean::box(0));
 x_128 = x_108;
} else {
 lean::inc(x_126);
 lean::dec(x_108);
 x_128 = lean::box(0);
}
x_129 = lean::cnstr_get(x_126, 1);
lean::inc(x_129);
lean::dec(x_126);
x_132 = l___private_init_lean_parser_combinators_3__sep__by_view__aux___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__1(x_129);
if (lean::obj_tag(x_99) == 0)
{
obj* x_134; obj* x_135; 
lean::dec(x_128);
x_134 = lean::box(0);
x_135 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_135, 0, x_18);
lean::cnstr_set(x_135, 1, x_36);
lean::cnstr_set(x_135, 2, x_72);
lean::cnstr_set(x_135, 3, x_132);
lean::cnstr_set(x_135, 4, x_134);
return x_135;
}
else
{
obj* x_136; 
x_136 = lean::cnstr_get(x_99, 0);
lean::inc(x_136);
lean::dec(x_99);
switch (lean::obj_tag(x_136)) {
case 0:
{
obj* x_139; obj* x_142; obj* x_143; 
x_139 = lean::cnstr_get(x_136, 0);
lean::inc(x_139);
lean::dec(x_136);
if (lean::is_scalar(x_128)) {
 x_142 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_142 = x_128;
}
lean::cnstr_set(x_142, 0, x_139);
x_143 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_143, 0, x_18);
lean::cnstr_set(x_143, 1, x_36);
lean::cnstr_set(x_143, 2, x_72);
lean::cnstr_set(x_143, 3, x_132);
lean::cnstr_set(x_143, 4, x_142);
return x_143;
}
case 3:
{
obj* x_145; obj* x_146; 
lean::dec(x_128);
x_145 = lean::box(0);
x_146 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_146, 0, x_18);
lean::cnstr_set(x_146, 1, x_36);
lean::cnstr_set(x_146, 2, x_72);
lean::cnstr_set(x_146, 3, x_132);
lean::cnstr_set(x_146, 4, x_145);
return x_146;
}
default:
{
obj* x_149; obj* x_150; 
lean::dec(x_136);
lean::dec(x_128);
x_149 = lean::box(0);
x_150 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_150, 0, x_18);
lean::cnstr_set(x_150, 1, x_36);
lean::cnstr_set(x_150, 2, x_72);
lean::cnstr_set(x_150, 3, x_132);
lean::cnstr_set(x_150, 4, x_149);
return x_150;
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_struct__inst_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_13 = l_option_map___rarg(x_12, x_1);
x_14 = lean::box(3);
x_15 = l_option_get__or__else___main___rarg(x_13, x_14);
x_16 = l_list_map___main___at_lean_parser_term_struct__inst_has__view_x_27___spec__2(x_7);
x_17 = l_list_join___main___rarg(x_16);
x_18 = l_lean_parser_no__kind;
x_19 = l_lean_parser_syntax_mk__node(x_18, x_17);
x_20 = l_option_map___rarg(x_12, x_9);
x_21 = l_option_get__or__else___main___rarg(x_20, x_14);
x_22 = lean::box(0);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_21);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_19);
lean::cnstr_set(x_24, 1, x_23);
if (lean::obj_tag(x_3) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; 
x_25 = l_lean_parser_combinators_many___rarg___closed__1;
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_25);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_15);
lean::cnstr_set(x_28, 1, x_27);
x_29 = l_lean_parser_term_struct__inst;
x_30 = l_lean_parser_syntax_mk__node(x_29, x_28);
return x_30;
}
else
{
obj* x_31; obj* x_34; obj* x_35; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; 
x_31 = lean::cnstr_get(x_5, 0);
lean::inc(x_31);
lean::dec(x_5);
x_34 = l_lean_parser_term_struct__inst__with_has__view;
x_35 = lean::cnstr_get(x_34, 1);
lean::inc(x_35);
lean::dec(x_34);
x_38 = lean::apply_1(x_35, x_31);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_22);
x_40 = l_lean_parser_syntax_mk__node(x_18, x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_24);
x_42 = l_lean_parser_combinators_many___rarg___closed__1;
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_41);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_15);
lean::cnstr_set(x_44, 1, x_43);
x_45 = l_lean_parser_term_struct__inst;
x_46 = l_lean_parser_syntax_mk__node(x_45, x_44);
return x_46;
}
}
else
{
obj* x_47; obj* x_50; obj* x_51; obj* x_54; obj* x_55; obj* x_56; 
x_47 = lean::cnstr_get(x_3, 0);
lean::inc(x_47);
lean::dec(x_3);
x_50 = l_lean_parser_term_struct__inst__type_has__view;
x_51 = lean::cnstr_get(x_50, 1);
lean::inc(x_51);
lean::dec(x_50);
x_54 = lean::apply_1(x_51, x_47);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_22);
x_56 = l_lean_parser_syntax_mk__node(x_18, x_55);
if (lean::obj_tag(x_5) == 0)
{
obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; 
x_57 = l_lean_parser_combinators_many___rarg___closed__1;
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_57);
lean::cnstr_set(x_58, 1, x_24);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_56);
lean::cnstr_set(x_59, 1, x_58);
x_60 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_60, 0, x_15);
lean::cnstr_set(x_60, 1, x_59);
x_61 = l_lean_parser_term_struct__inst;
x_62 = l_lean_parser_syntax_mk__node(x_61, x_60);
return x_62;
}
else
{
obj* x_63; obj* x_66; obj* x_67; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; 
x_63 = lean::cnstr_get(x_5, 0);
lean::inc(x_63);
lean::dec(x_5);
x_66 = l_lean_parser_term_struct__inst__with_has__view;
x_67 = lean::cnstr_get(x_66, 1);
lean::inc(x_67);
lean::dec(x_66);
x_70 = lean::apply_1(x_67, x_63);
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_70);
lean::cnstr_set(x_71, 1, x_22);
x_72 = l_lean_parser_syntax_mk__node(x_18, x_71);
x_73 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_73, 0, x_72);
lean::cnstr_set(x_73, 1, x_24);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_56);
lean::cnstr_set(x_74, 1, x_73);
x_75 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_75, 0, x_15);
lean::cnstr_set(x_75, 1, x_74);
x_76 = l_lean_parser_term_struct__inst;
x_77 = l_lean_parser_syntax_mk__node(x_76, x_75);
return x_77;
}
}
}
}
obj* _init_l_lean_parser_term_struct__inst_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_struct__inst_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_struct__inst_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_struct__inst_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; 
x_0 = lean::mk_string("{");
x_1 = l_lean_parser_max__prec;
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::box(0);
x_4 = lean::mk_string(" . ");
x_5 = lean::mk_nat_obj(0u);
x_6 = l_lean_parser_symbol_tokens___rarg(x_4, x_5);
x_7 = l_lean_parser_list_cons_tokens___rarg(x_6, x_3);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_3, x_7);
x_9 = l_lean_parser_tokens___rarg(x_8);
x_10 = l_lean_parser_tokens___rarg(x_9);
x_11 = l_lean_parser_tokens___rarg(x_10);
x_12 = lean::mk_string(" with ");
x_13 = l_lean_parser_symbol_tokens___rarg(x_12, x_5);
x_14 = l_lean_parser_list_cons_tokens___rarg(x_13, x_3);
x_15 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_16 = l_lean_parser_list_cons_tokens___rarg(x_15, x_14);
x_17 = l_lean_parser_tokens___rarg(x_16);
x_18 = l_lean_parser_tokens___rarg(x_17);
x_19 = l_lean_parser_tokens___rarg(x_18);
x_20 = lean::mk_string(" := ");
x_21 = l_lean_parser_symbol_tokens___rarg(x_20, x_5);
x_22 = l_lean_parser_list_cons_tokens___rarg(x_15, x_3);
x_23 = l_lean_parser_list_cons_tokens___rarg(x_21, x_22);
x_24 = l_lean_parser_list_cons_tokens___rarg(x_3, x_23);
x_25 = l_lean_parser_tokens___rarg(x_24);
x_26 = lean::mk_string("..");
x_27 = l_lean_parser_symbol_tokens___rarg(x_26, x_5);
x_28 = l_lean_parser_tokens___rarg(x_15);
x_29 = l_lean_parser_list_cons_tokens___rarg(x_28, x_3);
x_30 = l_lean_parser_list_cons_tokens___rarg(x_27, x_29);
x_31 = l_lean_parser_tokens___rarg(x_30);
x_32 = l_lean_parser_list_cons_tokens___rarg(x_31, x_3);
x_33 = l_lean_parser_list_cons_tokens___rarg(x_25, x_32);
x_34 = l_lean_parser_tokens___rarg(x_33);
x_35 = l_lean_parser_list_cons_tokens___rarg(x_34, x_3);
x_36 = l_lean_parser_tokens___rarg(x_35);
x_37 = lean::mk_string(", ");
x_38 = l_lean_parser_symbol_tokens___rarg(x_37, x_5);
x_39 = l_lean_parser_combinators_sep__by_tokens___rarg(x_36, x_38);
x_40 = lean::mk_string("}");
x_41 = l_lean_parser_symbol_tokens___rarg(x_40, x_5);
x_42 = l_lean_parser_list_cons_tokens___rarg(x_41, x_3);
x_43 = l_lean_parser_list_cons_tokens___rarg(x_39, x_42);
x_44 = l_lean_parser_list_cons_tokens___rarg(x_19, x_43);
x_45 = l_lean_parser_list_cons_tokens___rarg(x_11, x_44);
x_46 = l_lean_parser_list_cons_tokens___rarg(x_2, x_45);
x_47 = l_lean_parser_tokens___rarg(x_46);
return x_47;
}
}
obj* l_lean_parser_term_struct__inst_parser_lean_parser_has__view___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_14; 
x_6 = l_lean_parser_term_struct__inst__type;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_6, x_0, x_1, x_2, x_3, x_4, x_5);
x_8 = lean::cnstr_get(x_7, 0);
x_10 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 x_12 = x_7;
} else {
 lean::inc(x_8);
 lean::inc(x_10);
 lean::dec(x_7);
 x_12 = lean::box(0);
}
x_13 = l_lean_parser_parsec__t_try__mk__res___rarg(x_8);
if (lean::is_scalar(x_12)) {
 x_14 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_14 = x_12;
}
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_10);
return x_14;
}
}
obj* l_lean_parser_term_struct__inst_parser_lean_parser_has__view___lambda__2(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_14; 
x_6 = l_lean_parser_term_struct__inst__with;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_6, x_0, x_1, x_2, x_3, x_4, x_5);
x_8 = lean::cnstr_get(x_7, 0);
x_10 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 x_12 = x_7;
} else {
 lean::inc(x_8);
 lean::inc(x_10);
 lean::dec(x_7);
 x_12 = lean::box(0);
}
x_13 = l_lean_parser_parsec__t_try__mk__res___rarg(x_8);
if (lean::is_scalar(x_12)) {
 x_14 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_14 = x_12;
}
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_10);
return x_14;
}
}
obj* _init_l_lean_parser_term_struct__inst_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_60; obj* x_61; uint8 x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; 
x_0 = lean::mk_string("{");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_string(" . ");
x_7 = l_string_trim(x_6);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::mk_nat_obj(0u);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_7);
lean::closure_set(x_11, 1, x_10);
lean::closure_set(x_11, 2, x_9);
x_12 = lean::box(0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
lean::inc(x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_14);
lean::cnstr_set(x_16, 1, x_13);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst_parser_lean_parser_has__view___lambda__1), 6, 1);
lean::closure_set(x_17, 0, x_16);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_18, 0, x_17);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_19, 0, x_10);
x_20 = lean::mk_string(" with ");
x_21 = l_string_trim(x_20);
lean::inc(x_21);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_23, 0, x_21);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_24, 0, x_21);
lean::closure_set(x_24, 1, x_10);
lean::closure_set(x_24, 2, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_12);
lean::inc(x_19);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_19);
lean::cnstr_set(x_27, 1, x_25);
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst_parser_lean_parser_has__view___lambda__2), 6, 1);
lean::closure_set(x_28, 0, x_27);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_29, 0, x_28);
x_30 = lean::mk_string(" := ");
x_31 = l_string_trim(x_30);
lean::inc(x_31);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_33, 0, x_31);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_34, 0, x_31);
lean::closure_set(x_34, 1, x_10);
lean::closure_set(x_34, 2, x_33);
lean::inc(x_19);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_19);
lean::cnstr_set(x_36, 1, x_12);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_34);
lean::cnstr_set(x_37, 1, x_36);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_14);
lean::cnstr_set(x_38, 1, x_37);
x_39 = l_lean_parser_term_struct__inst__field;
x_40 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_40, 0, x_39);
lean::closure_set(x_40, 1, x_38);
x_41 = lean::mk_string("..");
x_42 = l_string_trim(x_41);
lean::inc(x_42);
x_44 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_44, 0, x_42);
x_45 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_45, 0, x_42);
lean::closure_set(x_45, 1, x_10);
lean::closure_set(x_45, 2, x_44);
x_46 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_46, 0, x_19);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_46);
lean::cnstr_set(x_47, 1, x_12);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_45);
lean::cnstr_set(x_48, 1, x_47);
x_49 = l_lean_parser_term_struct__inst__source;
x_50 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_50, 0, x_49);
lean::closure_set(x_50, 1, x_48);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_50);
lean::cnstr_set(x_51, 1, x_12);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_40);
lean::cnstr_set(x_52, 1, x_51);
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_53, 0, x_52);
lean::closure_set(x_53, 1, x_10);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_12);
x_55 = l_lean_parser_term_struct__inst__item;
x_56 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_56, 0, x_55);
lean::closure_set(x_56, 1, x_54);
x_57 = lean::mk_string(", ");
x_58 = l_string_trim(x_57);
lean::inc(x_58);
x_60 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_60, 0, x_58);
x_61 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_61, 0, x_58);
lean::closure_set(x_61, 1, x_10);
lean::closure_set(x_61, 2, x_60);
x_62 = 1;
x_63 = lean::box(x_62);
x_64 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__1___boxed), 8, 3);
lean::closure_set(x_64, 0, x_56);
lean::closure_set(x_64, 1, x_61);
lean::closure_set(x_64, 2, x_63);
x_65 = lean::mk_string("}");
x_66 = l_string_trim(x_65);
lean::inc(x_66);
x_68 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_68, 0, x_66);
x_69 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_69, 0, x_66);
lean::closure_set(x_69, 1, x_10);
lean::closure_set(x_69, 2, x_68);
x_70 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_70, 0, x_69);
lean::cnstr_set(x_70, 1, x_12);
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_64);
lean::cnstr_set(x_71, 1, x_70);
x_72 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_72, 0, x_29);
lean::cnstr_set(x_72, 1, x_71);
x_73 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_73, 0, x_18);
lean::cnstr_set(x_73, 1, x_72);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_5);
lean::cnstr_set(x_74, 1, x_73);
x_75 = l_lean_parser_term__parser__m_monad;
x_76 = l_lean_parser_term__parser__m_monad__except;
x_77 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_78 = l_lean_parser_term__parser__m_alternative;
x_79 = l_lean_parser_term_struct__inst;
x_80 = l_lean_parser_term_struct__inst_has__view;
x_81 = l_lean_parser_combinators_node_view___rarg(x_75, x_76, x_77, x_78, x_79, x_74, x_80);
return x_81;
}
}
obj* _init_l_lean_parser_term_struct__inst_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_60; obj* x_61; uint8 x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; 
x_0 = lean::mk_string("{");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_string(" . ");
x_7 = l_string_trim(x_6);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::mk_nat_obj(0u);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_7);
lean::closure_set(x_11, 1, x_10);
lean::closure_set(x_11, 2, x_9);
x_12 = lean::box(0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
lean::inc(x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_14);
lean::cnstr_set(x_16, 1, x_13);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst_parser_lean_parser_has__view___lambda__1), 6, 1);
lean::closure_set(x_17, 0, x_16);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_18, 0, x_17);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_19, 0, x_10);
x_20 = lean::mk_string(" with ");
x_21 = l_string_trim(x_20);
lean::inc(x_21);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_23, 0, x_21);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_24, 0, x_21);
lean::closure_set(x_24, 1, x_10);
lean::closure_set(x_24, 2, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_12);
lean::inc(x_19);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_19);
lean::cnstr_set(x_27, 1, x_25);
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst_parser_lean_parser_has__view___lambda__2), 6, 1);
lean::closure_set(x_28, 0, x_27);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_29, 0, x_28);
x_30 = lean::mk_string(" := ");
x_31 = l_string_trim(x_30);
lean::inc(x_31);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_33, 0, x_31);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_34, 0, x_31);
lean::closure_set(x_34, 1, x_10);
lean::closure_set(x_34, 2, x_33);
lean::inc(x_19);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_19);
lean::cnstr_set(x_36, 1, x_12);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_34);
lean::cnstr_set(x_37, 1, x_36);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_14);
lean::cnstr_set(x_38, 1, x_37);
x_39 = l_lean_parser_term_struct__inst__field;
x_40 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_40, 0, x_39);
lean::closure_set(x_40, 1, x_38);
x_41 = lean::mk_string("..");
x_42 = l_string_trim(x_41);
lean::inc(x_42);
x_44 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_44, 0, x_42);
x_45 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_45, 0, x_42);
lean::closure_set(x_45, 1, x_10);
lean::closure_set(x_45, 2, x_44);
x_46 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_optional___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__7), 6, 1);
lean::closure_set(x_46, 0, x_19);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_46);
lean::cnstr_set(x_47, 1, x_12);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_45);
lean::cnstr_set(x_48, 1, x_47);
x_49 = l_lean_parser_term_struct__inst__source;
x_50 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_50, 0, x_49);
lean::closure_set(x_50, 1, x_48);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_50);
lean::cnstr_set(x_51, 1, x_12);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_40);
lean::cnstr_set(x_52, 1, x_51);
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__3), 7, 2);
lean::closure_set(x_53, 0, x_52);
lean::closure_set(x_53, 1, x_10);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_12);
x_55 = l_lean_parser_term_struct__inst__item;
x_56 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1), 7, 2);
lean::closure_set(x_56, 0, x_55);
lean::closure_set(x_56, 1, x_54);
x_57 = lean::mk_string(", ");
x_58 = l_string_trim(x_57);
lean::inc(x_58);
x_60 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_60, 0, x_58);
x_61 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_61, 0, x_58);
lean::closure_set(x_61, 1, x_10);
lean::closure_set(x_61, 2, x_60);
x_62 = 1;
x_63 = lean::box(x_62);
x_64 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_sep__by___at_lean_parser_term_paren_parser_lean_parser_has__tokens___spec__1___boxed), 8, 3);
lean::closure_set(x_64, 0, x_56);
lean::closure_set(x_64, 1, x_61);
lean::closure_set(x_64, 2, x_63);
x_65 = lean::mk_string("}");
x_66 = l_string_trim(x_65);
lean::inc(x_66);
x_68 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_68, 0, x_66);
x_69 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_69, 0, x_66);
lean::closure_set(x_69, 1, x_10);
lean::closure_set(x_69, 2, x_68);
x_70 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_70, 0, x_69);
lean::cnstr_set(x_70, 1, x_12);
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_64);
lean::cnstr_set(x_71, 1, x_70);
x_72 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_72, 0, x_29);
lean::cnstr_set(x_72, 1, x_71);
x_73 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_73, 0, x_18);
lean::cnstr_set(x_73, 1, x_72);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_5);
lean::cnstr_set(x_74, 1, x_73);
return x_74;
}
}
obj* l_lean_parser_term_struct__inst_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_struct__inst;
x_6 = l_lean_parser_term_struct__inst_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_subtype() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("subtype");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_subtype_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; 
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_7; obj* x_10; 
x_7 = lean::cnstr_get(x_1, 0);
lean::inc(x_7);
lean::dec(x_1);
x_10 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_10, 0, x_7);
x_5 = x_10;
goto lbl_6;
}
case 3:
{
obj* x_11; 
x_11 = lean::box(0);
x_5 = x_11;
goto lbl_6;
}
default:
{
obj* x_13; 
lean::dec(x_1);
x_13 = lean::box(0);
x_5 = x_13;
goto lbl_6;
}
}
lbl_6:
{
obj* x_14; obj* x_15; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_17; 
x_17 = lean::box(3);
x_14 = x_0;
x_15 = x_17;
goto lbl_16;
}
else
{
obj* x_18; obj* x_20; 
x_18 = lean::cnstr_get(x_0, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_0, 1);
lean::inc(x_20);
lean::dec(x_0);
x_14 = x_20;
x_15 = x_18;
goto lbl_16;
}
lbl_16:
{
obj* x_23; 
switch (lean::obj_tag(x_15)) {
case 1:
{
obj* x_25; 
x_25 = lean::cnstr_get(x_15, 0);
lean::inc(x_25);
lean::dec(x_15);
x_23 = x_25;
goto lbl_24;
}
case 3:
{
obj* x_28; 
x_28 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_23 = x_28;
goto lbl_24;
}
default:
{
obj* x_30; 
lean::dec(x_15);
x_30 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_23 = x_30;
goto lbl_24;
}
}
lbl_24:
{
obj* x_31; obj* x_32; 
if (lean::obj_tag(x_14) == 0)
{
obj* x_34; 
x_34 = lean::box(3);
x_31 = x_14;
x_32 = x_34;
goto lbl_33;
}
else
{
obj* x_35; obj* x_37; 
x_35 = lean::cnstr_get(x_14, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_14, 1);
lean::inc(x_37);
lean::dec(x_14);
x_31 = x_37;
x_32 = x_35;
goto lbl_33;
}
lbl_33:
{
obj* x_40; obj* x_42; 
x_42 = l_lean_parser_syntax_as__node___main(x_32);
if (lean::obj_tag(x_42) == 0)
{
obj* x_43; 
x_43 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_40 = x_43;
goto lbl_41;
}
else
{
obj* x_44; obj* x_46; obj* x_47; 
x_44 = lean::cnstr_get(x_42, 0);
if (lean::is_exclusive(x_42)) {
 lean::cnstr_set(x_42, 0, lean::box(0));
 x_46 = x_42;
} else {
 lean::inc(x_44);
 lean::dec(x_42);
 x_46 = lean::box(0);
}
x_47 = lean::cnstr_get(x_44, 1);
lean::inc(x_47);
lean::dec(x_44);
if (lean::obj_tag(x_47) == 0)
{
obj* x_51; 
lean::dec(x_46);
x_51 = lean::box(0);
x_40 = x_51;
goto lbl_41;
}
else
{
obj* x_52; obj* x_54; 
x_52 = lean::cnstr_get(x_47, 0);
lean::inc(x_52);
x_54 = lean::cnstr_get(x_47, 1);
lean::inc(x_54);
lean::dec(x_47);
if (lean::obj_tag(x_54) == 0)
{
obj* x_57; obj* x_58; obj* x_61; obj* x_62; 
x_57 = l_lean_parser_term_type__spec_has__view;
x_58 = lean::cnstr_get(x_57, 0);
lean::inc(x_58);
lean::dec(x_57);
x_61 = lean::apply_1(x_58, x_52);
if (lean::is_scalar(x_46)) {
 x_62 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_62 = x_46;
}
lean::cnstr_set(x_62, 0, x_61);
x_40 = x_62;
goto lbl_41;
}
else
{
obj* x_66; 
lean::dec(x_54);
lean::dec(x_46);
lean::dec(x_52);
x_66 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_40 = x_66;
goto lbl_41;
}
}
}
lbl_41:
{
obj* x_67; obj* x_68; obj* x_69; obj* x_71; obj* x_72; 
if (lean::obj_tag(x_31) == 0)
{
obj* x_74; 
x_74 = lean::box(3);
x_71 = x_31;
x_72 = x_74;
goto lbl_73;
}
else
{
obj* x_75; obj* x_77; 
x_75 = lean::cnstr_get(x_31, 0);
lean::inc(x_75);
x_77 = lean::cnstr_get(x_31, 1);
lean::inc(x_77);
lean::dec(x_31);
x_71 = x_77;
x_72 = x_75;
goto lbl_73;
}
lbl_70:
{
if (lean::obj_tag(x_69) == 0)
{
obj* x_80; obj* x_81; 
x_80 = lean::box(0);
x_81 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_81, 0, x_5);
lean::cnstr_set(x_81, 1, x_23);
lean::cnstr_set(x_81, 2, x_40);
lean::cnstr_set(x_81, 3, x_67);
lean::cnstr_set(x_81, 4, x_68);
lean::cnstr_set(x_81, 5, x_80);
return x_81;
}
else
{
obj* x_82; 
x_82 = lean::cnstr_get(x_69, 0);
lean::inc(x_82);
lean::dec(x_69);
switch (lean::obj_tag(x_82)) {
case 0:
{
obj* x_85; obj* x_88; obj* x_89; 
x_85 = lean::cnstr_get(x_82, 0);
lean::inc(x_85);
lean::dec(x_82);
x_88 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_88, 0, x_85);
x_89 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_89, 0, x_5);
lean::cnstr_set(x_89, 1, x_23);
lean::cnstr_set(x_89, 2, x_40);
lean::cnstr_set(x_89, 3, x_67);
lean::cnstr_set(x_89, 4, x_68);
lean::cnstr_set(x_89, 5, x_88);
return x_89;
}
case 3:
{
obj* x_90; obj* x_91; 
x_90 = lean::box(0);
x_91 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_91, 0, x_5);
lean::cnstr_set(x_91, 1, x_23);
lean::cnstr_set(x_91, 2, x_40);
lean::cnstr_set(x_91, 3, x_67);
lean::cnstr_set(x_91, 4, x_68);
lean::cnstr_set(x_91, 5, x_90);
return x_91;
}
default:
{
obj* x_93; obj* x_94; 
lean::dec(x_82);
x_93 = lean::box(0);
x_94 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_94, 0, x_5);
lean::cnstr_set(x_94, 1, x_23);
lean::cnstr_set(x_94, 2, x_40);
lean::cnstr_set(x_94, 3, x_67);
lean::cnstr_set(x_94, 4, x_68);
lean::cnstr_set(x_94, 5, x_93);
return x_94;
}
}
}
}
lbl_73:
{
obj* x_95; 
switch (lean::obj_tag(x_72)) {
case 0:
{
obj* x_97; obj* x_100; 
x_97 = lean::cnstr_get(x_72, 0);
lean::inc(x_97);
lean::dec(x_72);
x_100 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_100, 0, x_97);
if (lean::obj_tag(x_71) == 0)
{
x_95 = x_100;
goto lbl_96;
}
else
{
obj* x_101; obj* x_103; 
x_101 = lean::cnstr_get(x_71, 0);
lean::inc(x_101);
x_103 = lean::cnstr_get(x_71, 1);
lean::inc(x_103);
lean::dec(x_71);
x_67 = x_100;
x_68 = x_101;
x_69 = x_103;
goto lbl_70;
}
}
case 3:
{
obj* x_106; 
x_106 = lean::box(0);
if (lean::obj_tag(x_71) == 0)
{
x_95 = x_106;
goto lbl_96;
}
else
{
obj* x_107; obj* x_109; 
x_107 = lean::cnstr_get(x_71, 0);
lean::inc(x_107);
x_109 = lean::cnstr_get(x_71, 1);
lean::inc(x_109);
lean::dec(x_71);
x_67 = x_106;
x_68 = x_107;
x_69 = x_109;
goto lbl_70;
}
}
default:
{
obj* x_113; 
lean::dec(x_72);
x_113 = lean::box(0);
if (lean::obj_tag(x_71) == 0)
{
x_95 = x_113;
goto lbl_96;
}
else
{
obj* x_114; obj* x_116; 
x_114 = lean::cnstr_get(x_71, 0);
lean::inc(x_114);
x_116 = lean::cnstr_get(x_71, 1);
lean::inc(x_116);
lean::dec(x_71);
x_67 = x_113;
x_68 = x_114;
x_69 = x_116;
goto lbl_70;
}
}
}
lbl_96:
{
if (lean::obj_tag(x_71) == 0)
{
obj* x_119; obj* x_120; obj* x_121; 
x_119 = lean::box(0);
x_120 = lean::box(3);
x_121 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_121, 0, x_5);
lean::cnstr_set(x_121, 1, x_23);
lean::cnstr_set(x_121, 2, x_40);
lean::cnstr_set(x_121, 3, x_95);
lean::cnstr_set(x_121, 4, x_120);
lean::cnstr_set(x_121, 5, x_119);
return x_121;
}
else
{
obj* x_122; 
x_122 = lean::cnstr_get(x_71, 0);
lean::inc(x_122);
lean::dec(x_71);
switch (lean::obj_tag(x_122)) {
case 0:
{
obj* x_125; obj* x_128; obj* x_129; obj* x_130; 
x_125 = lean::cnstr_get(x_122, 0);
lean::inc(x_125);
lean::dec(x_122);
x_128 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_128, 0, x_125);
x_129 = lean::box(3);
x_130 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_130, 0, x_5);
lean::cnstr_set(x_130, 1, x_23);
lean::cnstr_set(x_130, 2, x_40);
lean::cnstr_set(x_130, 3, x_95);
lean::cnstr_set(x_130, 4, x_129);
lean::cnstr_set(x_130, 5, x_128);
return x_130;
}
case 3:
{
obj* x_131; obj* x_132; obj* x_133; 
x_131 = lean::box(0);
x_132 = lean::box(3);
x_133 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_133, 0, x_5);
lean::cnstr_set(x_133, 1, x_23);
lean::cnstr_set(x_133, 2, x_40);
lean::cnstr_set(x_133, 3, x_95);
lean::cnstr_set(x_133, 4, x_132);
lean::cnstr_set(x_133, 5, x_131);
return x_133;
}
default:
{
obj* x_135; obj* x_136; obj* x_137; 
lean::dec(x_122);
x_135 = lean::box(0);
x_136 = lean::box(3);
x_137 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_137, 0, x_5);
lean::cnstr_set(x_137, 1, x_23);
lean::cnstr_set(x_137, 2, x_40);
lean::cnstr_set(x_137, 3, x_95);
lean::cnstr_set(x_137, 4, x_136);
lean::cnstr_set(x_137, 5, x_135);
return x_137;
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_subtype_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_subtype_has__view_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; 
switch (lean::obj_tag(x_28)) {
case 1:
{
obj* x_38; 
x_38 = lean::cnstr_get(x_28, 0);
lean::inc(x_38);
lean::dec(x_28);
x_36 = x_38;
goto lbl_37;
}
case 3:
{
obj* x_41; 
x_41 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_36 = x_41;
goto lbl_37;
}
default:
{
obj* x_43; 
lean::dec(x_28);
x_43 = l_lean_parser_ident_parser_view___rarg___lambda__1___closed__1;
x_36 = x_43;
goto lbl_37;
}
}
lbl_37:
{
obj* x_44; obj* x_45; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_47; 
x_47 = lean::box(3);
x_44 = x_27;
x_45 = x_47;
goto lbl_46;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_27, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_27, 1);
lean::inc(x_50);
lean::dec(x_27);
x_44 = x_50;
x_45 = x_48;
goto lbl_46;
}
lbl_46:
{
obj* x_53; obj* x_55; 
x_55 = l_lean_parser_syntax_as__node___main(x_45);
if (lean::obj_tag(x_55) == 0)
{
obj* x_56; 
x_56 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_53 = x_56;
goto lbl_54;
}
else
{
obj* x_57; obj* x_59; obj* x_60; 
x_57 = lean::cnstr_get(x_55, 0);
if (lean::is_exclusive(x_55)) {
 lean::cnstr_set(x_55, 0, lean::box(0));
 x_59 = x_55;
} else {
 lean::inc(x_57);
 lean::dec(x_55);
 x_59 = lean::box(0);
}
x_60 = lean::cnstr_get(x_57, 1);
lean::inc(x_60);
lean::dec(x_57);
if (lean::obj_tag(x_60) == 0)
{
obj* x_64; 
lean::dec(x_59);
x_64 = lean::box(0);
x_53 = x_64;
goto lbl_54;
}
else
{
obj* x_65; obj* x_67; 
x_65 = lean::cnstr_get(x_60, 0);
lean::inc(x_65);
x_67 = lean::cnstr_get(x_60, 1);
lean::inc(x_67);
lean::dec(x_60);
if (lean::obj_tag(x_67) == 0)
{
obj* x_70; obj* x_71; obj* x_74; obj* x_75; 
x_70 = l_lean_parser_term_type__spec_has__view;
x_71 = lean::cnstr_get(x_70, 0);
lean::inc(x_71);
lean::dec(x_70);
x_74 = lean::apply_1(x_71, x_65);
if (lean::is_scalar(x_59)) {
 x_75 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_75 = x_59;
}
lean::cnstr_set(x_75, 0, x_74);
x_53 = x_75;
goto lbl_54;
}
else
{
obj* x_79; 
lean::dec(x_65);
lean::dec(x_67);
lean::dec(x_59);
x_79 = l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2;
x_53 = x_79;
goto lbl_54;
}
}
}
lbl_54:
{
obj* x_80; obj* x_81; obj* x_82; obj* x_84; obj* x_85; 
if (lean::obj_tag(x_44) == 0)
{
obj* x_87; 
x_87 = lean::box(3);
x_84 = x_44;
x_85 = x_87;
goto lbl_86;
}
else
{
obj* x_88; obj* x_90; 
x_88 = lean::cnstr_get(x_44, 0);
lean::inc(x_88);
x_90 = lean::cnstr_get(x_44, 1);
lean::inc(x_90);
lean::dec(x_44);
x_84 = x_90;
x_85 = x_88;
goto lbl_86;
}
lbl_83:
{
if (lean::obj_tag(x_82) == 0)
{
obj* x_93; obj* x_94; 
x_93 = lean::box(0);
x_94 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_94, 0, x_18);
lean::cnstr_set(x_94, 1, x_36);
lean::cnstr_set(x_94, 2, x_53);
lean::cnstr_set(x_94, 3, x_80);
lean::cnstr_set(x_94, 4, x_81);
lean::cnstr_set(x_94, 5, x_93);
return x_94;
}
else
{
obj* x_95; 
x_95 = lean::cnstr_get(x_82, 0);
lean::inc(x_95);
lean::dec(x_82);
switch (lean::obj_tag(x_95)) {
case 0:
{
obj* x_98; obj* x_101; obj* x_102; 
x_98 = lean::cnstr_get(x_95, 0);
lean::inc(x_98);
lean::dec(x_95);
x_101 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_101, 0, x_98);
x_102 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_102, 0, x_18);
lean::cnstr_set(x_102, 1, x_36);
lean::cnstr_set(x_102, 2, x_53);
lean::cnstr_set(x_102, 3, x_80);
lean::cnstr_set(x_102, 4, x_81);
lean::cnstr_set(x_102, 5, x_101);
return x_102;
}
case 3:
{
obj* x_103; obj* x_104; 
x_103 = lean::box(0);
x_104 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_104, 0, x_18);
lean::cnstr_set(x_104, 1, x_36);
lean::cnstr_set(x_104, 2, x_53);
lean::cnstr_set(x_104, 3, x_80);
lean::cnstr_set(x_104, 4, x_81);
lean::cnstr_set(x_104, 5, x_103);
return x_104;
}
default:
{
obj* x_106; obj* x_107; 
lean::dec(x_95);
x_106 = lean::box(0);
x_107 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_107, 0, x_18);
lean::cnstr_set(x_107, 1, x_36);
lean::cnstr_set(x_107, 2, x_53);
lean::cnstr_set(x_107, 3, x_80);
lean::cnstr_set(x_107, 4, x_81);
lean::cnstr_set(x_107, 5, x_106);
return x_107;
}
}
}
}
lbl_86:
{
obj* x_108; 
switch (lean::obj_tag(x_85)) {
case 0:
{
obj* x_110; obj* x_113; 
x_110 = lean::cnstr_get(x_85, 0);
lean::inc(x_110);
lean::dec(x_85);
x_113 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_113, 0, x_110);
if (lean::obj_tag(x_84) == 0)
{
x_108 = x_113;
goto lbl_109;
}
else
{
obj* x_114; obj* x_116; 
x_114 = lean::cnstr_get(x_84, 0);
lean::inc(x_114);
x_116 = lean::cnstr_get(x_84, 1);
lean::inc(x_116);
lean::dec(x_84);
x_80 = x_113;
x_81 = x_114;
x_82 = x_116;
goto lbl_83;
}
}
case 3:
{
obj* x_119; 
x_119 = lean::box(0);
if (lean::obj_tag(x_84) == 0)
{
x_108 = x_119;
goto lbl_109;
}
else
{
obj* x_120; obj* x_122; 
x_120 = lean::cnstr_get(x_84, 0);
lean::inc(x_120);
x_122 = lean::cnstr_get(x_84, 1);
lean::inc(x_122);
lean::dec(x_84);
x_80 = x_119;
x_81 = x_120;
x_82 = x_122;
goto lbl_83;
}
}
default:
{
obj* x_126; 
lean::dec(x_85);
x_126 = lean::box(0);
if (lean::obj_tag(x_84) == 0)
{
x_108 = x_126;
goto lbl_109;
}
else
{
obj* x_127; obj* x_129; 
x_127 = lean::cnstr_get(x_84, 0);
lean::inc(x_127);
x_129 = lean::cnstr_get(x_84, 1);
lean::inc(x_129);
lean::dec(x_84);
x_80 = x_126;
x_81 = x_127;
x_82 = x_129;
goto lbl_83;
}
}
}
lbl_109:
{
if (lean::obj_tag(x_84) == 0)
{
obj* x_132; obj* x_133; obj* x_134; 
x_132 = lean::box(0);
x_133 = lean::box(3);
x_134 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_134, 0, x_18);
lean::cnstr_set(x_134, 1, x_36);
lean::cnstr_set(x_134, 2, x_53);
lean::cnstr_set(x_134, 3, x_108);
lean::cnstr_set(x_134, 4, x_133);
lean::cnstr_set(x_134, 5, x_132);
return x_134;
}
else
{
obj* x_135; 
x_135 = lean::cnstr_get(x_84, 0);
lean::inc(x_135);
lean::dec(x_84);
switch (lean::obj_tag(x_135)) {
case 0:
{
obj* x_138; obj* x_141; obj* x_142; obj* x_143; 
x_138 = lean::cnstr_get(x_135, 0);
lean::inc(x_138);
lean::dec(x_135);
x_141 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_141, 0, x_138);
x_142 = lean::box(3);
x_143 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_143, 0, x_18);
lean::cnstr_set(x_143, 1, x_36);
lean::cnstr_set(x_143, 2, x_53);
lean::cnstr_set(x_143, 3, x_108);
lean::cnstr_set(x_143, 4, x_142);
lean::cnstr_set(x_143, 5, x_141);
return x_143;
}
case 3:
{
obj* x_144; obj* x_145; obj* x_146; 
x_144 = lean::box(0);
x_145 = lean::box(3);
x_146 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_146, 0, x_18);
lean::cnstr_set(x_146, 1, x_36);
lean::cnstr_set(x_146, 2, x_53);
lean::cnstr_set(x_146, 3, x_108);
lean::cnstr_set(x_146, 4, x_145);
lean::cnstr_set(x_146, 5, x_144);
return x_146;
}
default:
{
obj* x_148; obj* x_149; obj* x_150; 
lean::dec(x_135);
x_148 = lean::box(0);
x_149 = lean::box(3);
x_150 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_150, 0, x_18);
lean::cnstr_set(x_150, 1, x_36);
lean::cnstr_set(x_150, 2, x_53);
lean::cnstr_set(x_150, 3, x_108);
lean::cnstr_set(x_150, 4, x_149);
lean::cnstr_set(x_150, 5, x_148);
return x_150;
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* l_lean_parser_term_subtype_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
lean::dec(x_0);
x_14 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_15 = l_option_map___rarg(x_14, x_1);
x_16 = lean::box(3);
x_17 = l_option_get__or__else___main___rarg(x_15, x_16);
x_18 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_18, 0, x_3);
x_19 = l_option_map___rarg(x_14, x_7);
x_20 = l_option_get__or__else___main___rarg(x_19, x_16);
x_21 = l_option_map___rarg(x_14, x_11);
x_22 = l_option_get__or__else___main___rarg(x_21, x_16);
x_23 = lean::box(0);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_22);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_9);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_20);
lean::cnstr_set(x_26, 1, x_25);
if (lean::obj_tag(x_5) == 0)
{
obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
x_27 = l_lean_parser_combinators_many___rarg___closed__1;
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_26);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_18);
lean::cnstr_set(x_29, 1, x_28);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_17);
lean::cnstr_set(x_30, 1, x_29);
x_31 = l_lean_parser_term_subtype;
x_32 = l_lean_parser_syntax_mk__node(x_31, x_30);
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_37; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; 
x_33 = lean::cnstr_get(x_5, 0);
lean::inc(x_33);
lean::dec(x_5);
x_36 = l_lean_parser_term_type__spec_has__view;
x_37 = lean::cnstr_get(x_36, 1);
lean::inc(x_37);
lean::dec(x_36);
x_40 = lean::apply_1(x_37, x_33);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_23);
x_42 = l_lean_parser_no__kind;
x_43 = l_lean_parser_syntax_mk__node(x_42, x_41);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_43);
lean::cnstr_set(x_44, 1, x_26);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_18);
lean::cnstr_set(x_45, 1, x_44);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_17);
lean::cnstr_set(x_46, 1, x_45);
x_47 = l_lean_parser_term_subtype;
x_48 = l_lean_parser_syntax_mk__node(x_47, x_46);
return x_48;
}
}
}
obj* _init_l_lean_parser_term_subtype_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_subtype_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_subtype_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_subtype_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_subtype_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_subtype_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_0 = lean::mk_string("{");
x_1 = l_lean_parser_max__prec;
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::box(0);
x_4 = lean::mk_string("//");
x_5 = lean::mk_nat_obj(0u);
x_6 = l_lean_parser_symbol_tokens___rarg(x_4, x_5);
x_7 = lean::mk_string("}");
x_8 = l_lean_parser_symbol_tokens___rarg(x_7, x_5);
x_9 = l_lean_parser_list_cons_tokens___rarg(x_8, x_3);
x_10 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_11 = l_lean_parser_list_cons_tokens___rarg(x_10, x_9);
x_12 = l_lean_parser_list_cons_tokens___rarg(x_6, x_11);
x_13 = l_lean_parser_term_opt__type_parser_lean_parser_has__tokens;
x_14 = l_lean_parser_list_cons_tokens___rarg(x_13, x_12);
x_15 = l_lean_parser_list_cons_tokens___rarg(x_3, x_14);
x_16 = l_lean_parser_list_cons_tokens___rarg(x_2, x_15);
x_17 = l_lean_parser_tokens___rarg(x_16);
return x_17;
}
}
obj* _init_l_lean_parser_term_subtype_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_0 = lean::mk_string("{");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_string("//");
x_7 = l_string_trim(x_6);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::mk_nat_obj(0u);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_7);
lean::closure_set(x_11, 1, x_10);
lean::closure_set(x_11, 2, x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_12, 0, x_10);
x_13 = lean::mk_string("}");
x_14 = l_string_trim(x_13);
lean::inc(x_14);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_16, 0, x_14);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_17, 0, x_14);
lean::closure_set(x_17, 1, x_10);
lean::closure_set(x_17, 2, x_16);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_12);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_11);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_21);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_23);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_5);
lean::cnstr_set(x_26, 1, x_25);
x_27 = l_lean_parser_term__parser__m_monad;
x_28 = l_lean_parser_term__parser__m_monad__except;
x_29 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_30 = l_lean_parser_term__parser__m_alternative;
x_31 = l_lean_parser_term_subtype;
x_32 = l_lean_parser_term_subtype_has__view;
x_33 = l_lean_parser_combinators_node_view___rarg(x_27, x_28, x_29, x_30, x_31, x_26, x_32);
return x_33;
}
}
obj* _init_l_lean_parser_term_subtype_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_0 = lean::mk_string("{");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_string("//");
x_7 = l_string_trim(x_6);
lean::inc(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_9, 0, x_7);
x_10 = lean::mk_nat_obj(0u);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_11, 0, x_7);
lean::closure_set(x_11, 1, x_10);
lean::closure_set(x_11, 2, x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_12, 0, x_10);
x_13 = lean::mk_string("}");
x_14 = l_string_trim(x_13);
lean::inc(x_14);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_16, 0, x_14);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_17, 0, x_14);
lean::closure_set(x_17, 1, x_10);
lean::closure_set(x_17, 2, x_16);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_12);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_11);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_opt__type_parser), 5, 0);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_21);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4), 1, 0);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_23);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_5);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
}
obj* l_lean_parser_term_subtype_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_subtype;
x_6 = l_lean_parser_term_subtype_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_inaccessible() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("inaccessible");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_inaccessible_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_8; 
x_7 = lean::box(0);
x_8 = lean::box(3);
x_4 = x_7;
x_5 = x_8;
goto lbl_6;
lbl_3:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_9; obj* x_10; 
x_9 = lean::box(0);
x_10 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_10, 0, x_0);
lean::cnstr_set(x_10, 1, x_1);
lean::cnstr_set(x_10, 2, x_9);
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_2, 0);
lean::inc(x_11);
lean::dec(x_2);
switch (lean::obj_tag(x_11)) {
case 0:
{
obj* x_14; obj* x_17; obj* x_18; 
x_14 = lean::cnstr_get(x_11, 0);
lean::inc(x_14);
lean::dec(x_11);
x_17 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_17, 0, x_14);
x_18 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_18, 0, x_0);
lean::cnstr_set(x_18, 1, x_1);
lean::cnstr_set(x_18, 2, x_17);
return x_18;
}
case 3:
{
obj* x_19; obj* x_20; 
x_19 = lean::box(0);
x_20 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_20, 0, x_0);
lean::cnstr_set(x_20, 1, x_1);
lean::cnstr_set(x_20, 2, x_19);
return x_20;
}
default:
{
obj* x_22; obj* x_23; 
lean::dec(x_11);
x_22 = lean::box(0);
x_23 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_23, 0, x_0);
lean::cnstr_set(x_23, 1, x_1);
lean::cnstr_set(x_23, 2, x_22);
return x_23;
}
}
}
}
lbl_6:
{
obj* x_24; 
switch (lean::obj_tag(x_5)) {
case 0:
{
obj* x_26; obj* x_29; 
x_26 = lean::cnstr_get(x_5, 0);
lean::inc(x_26);
lean::dec(x_5);
x_29 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_29, 0, x_26);
if (lean::obj_tag(x_4) == 0)
{
x_24 = x_29;
goto lbl_25;
}
else
{
obj* x_30; obj* x_32; 
x_30 = lean::cnstr_get(x_4, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_4, 1);
lean::inc(x_32);
lean::dec(x_4);
x_0 = x_29;
x_1 = x_30;
x_2 = x_32;
goto lbl_3;
}
}
case 3:
{
obj* x_35; 
x_35 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_24 = x_35;
goto lbl_25;
}
else
{
obj* x_36; obj* x_38; 
x_36 = lean::cnstr_get(x_4, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_4, 1);
lean::inc(x_38);
lean::dec(x_4);
x_0 = x_35;
x_1 = x_36;
x_2 = x_38;
goto lbl_3;
}
}
default:
{
obj* x_42; 
lean::dec(x_5);
x_42 = lean::box(0);
if (lean::obj_tag(x_4) == 0)
{
x_24 = x_42;
goto lbl_25;
}
else
{
obj* x_43; obj* x_45; 
x_43 = lean::cnstr_get(x_4, 0);
lean::inc(x_43);
x_45 = lean::cnstr_get(x_4, 1);
lean::inc(x_45);
lean::dec(x_4);
x_0 = x_42;
x_1 = x_43;
x_2 = x_45;
goto lbl_3;
}
}
}
lbl_25:
{
if (lean::obj_tag(x_4) == 0)
{
obj* x_48; obj* x_49; obj* x_50; 
x_48 = lean::box(0);
x_49 = lean::box(3);
x_50 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_50, 0, x_24);
lean::cnstr_set(x_50, 1, x_49);
lean::cnstr_set(x_50, 2, x_48);
return x_50;
}
else
{
obj* x_51; 
x_51 = lean::cnstr_get(x_4, 0);
lean::inc(x_51);
lean::dec(x_4);
switch (lean::obj_tag(x_51)) {
case 0:
{
obj* x_54; obj* x_57; obj* x_58; obj* x_59; 
x_54 = lean::cnstr_get(x_51, 0);
lean::inc(x_54);
lean::dec(x_51);
x_57 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_57, 0, x_54);
x_58 = lean::box(3);
x_59 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_59, 0, x_24);
lean::cnstr_set(x_59, 1, x_58);
lean::cnstr_set(x_59, 2, x_57);
return x_59;
}
case 3:
{
obj* x_60; obj* x_61; obj* x_62; 
x_60 = lean::box(0);
x_61 = lean::box(3);
x_62 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_62, 0, x_24);
lean::cnstr_set(x_62, 1, x_61);
lean::cnstr_set(x_62, 2, x_60);
return x_62;
}
default:
{
obj* x_64; obj* x_65; obj* x_66; 
lean::dec(x_51);
x_64 = lean::box(0);
x_65 = lean::box(3);
x_66 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_66, 0, x_24);
lean::cnstr_set(x_66, 1, x_65);
lean::cnstr_set(x_66, 2, x_64);
return x_66;
}
}
}
}
}
}
}
obj* l_lean_parser_term_inaccessible_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_9; 
x_9 = l_lean_parser_term_inaccessible_has__view_x_27___lambda__1___closed__1;
return x_9;
}
else
{
obj* x_10; obj* x_13; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
lean::dec(x_10);
if (lean::obj_tag(x_13) == 0)
{
obj* x_16; 
x_16 = lean::box(3);
x_5 = x_13;
x_6 = x_16;
goto lbl_7;
}
else
{
obj* x_17; obj* x_19; 
x_17 = lean::cnstr_get(x_13, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_13, 1);
lean::inc(x_19);
lean::dec(x_13);
x_5 = x_19;
x_6 = x_17;
goto lbl_7;
}
}
lbl_4:
{
if (lean::obj_tag(x_3) == 0)
{
obj* x_22; obj* x_23; 
x_22 = lean::box(0);
x_23 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_23, 0, x_1);
lean::cnstr_set(x_23, 1, x_2);
lean::cnstr_set(x_23, 2, x_22);
return x_23;
}
else
{
obj* x_24; 
x_24 = lean::cnstr_get(x_3, 0);
lean::inc(x_24);
lean::dec(x_3);
switch (lean::obj_tag(x_24)) {
case 0:
{
obj* x_27; obj* x_30; obj* x_31; 
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
lean::dec(x_24);
x_30 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_30, 0, x_27);
x_31 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_31, 0, x_1);
lean::cnstr_set(x_31, 1, x_2);
lean::cnstr_set(x_31, 2, x_30);
return x_31;
}
case 3:
{
obj* x_32; obj* x_33; 
x_32 = lean::box(0);
x_33 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_33, 0, x_1);
lean::cnstr_set(x_33, 1, x_2);
lean::cnstr_set(x_33, 2, x_32);
return x_33;
}
default:
{
obj* x_35; obj* x_36; 
lean::dec(x_24);
x_35 = lean::box(0);
x_36 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_36, 0, x_1);
lean::cnstr_set(x_36, 1, x_2);
lean::cnstr_set(x_36, 2, x_35);
return x_36;
}
}
}
}
lbl_7:
{
obj* x_37; 
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_39; obj* x_42; 
x_39 = lean::cnstr_get(x_6, 0);
lean::inc(x_39);
lean::dec(x_6);
x_42 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_42, 0, x_39);
if (lean::obj_tag(x_5) == 0)
{
x_37 = x_42;
goto lbl_38;
}
else
{
obj* x_43; obj* x_45; 
x_43 = lean::cnstr_get(x_5, 0);
lean::inc(x_43);
x_45 = lean::cnstr_get(x_5, 1);
lean::inc(x_45);
lean::dec(x_5);
x_1 = x_42;
x_2 = x_43;
x_3 = x_45;
goto lbl_4;
}
}
case 3:
{
obj* x_48; 
x_48 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_37 = x_48;
goto lbl_38;
}
else
{
obj* x_49; obj* x_51; 
x_49 = lean::cnstr_get(x_5, 0);
lean::inc(x_49);
x_51 = lean::cnstr_get(x_5, 1);
lean::inc(x_51);
lean::dec(x_5);
x_1 = x_48;
x_2 = x_49;
x_3 = x_51;
goto lbl_4;
}
}
default:
{
obj* x_55; 
lean::dec(x_6);
x_55 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
x_37 = x_55;
goto lbl_38;
}
else
{
obj* x_56; obj* x_58; 
x_56 = lean::cnstr_get(x_5, 0);
lean::inc(x_56);
x_58 = lean::cnstr_get(x_5, 1);
lean::inc(x_58);
lean::dec(x_5);
x_1 = x_55;
x_2 = x_56;
x_3 = x_58;
goto lbl_4;
}
}
}
lbl_38:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_61; obj* x_62; obj* x_63; 
x_61 = lean::box(0);
x_62 = lean::box(3);
x_63 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_63, 0, x_37);
lean::cnstr_set(x_63, 1, x_62);
lean::cnstr_set(x_63, 2, x_61);
return x_63;
}
else
{
obj* x_64; 
x_64 = lean::cnstr_get(x_5, 0);
lean::inc(x_64);
lean::dec(x_5);
switch (lean::obj_tag(x_64)) {
case 0:
{
obj* x_67; obj* x_70; obj* x_71; obj* x_72; 
x_67 = lean::cnstr_get(x_64, 0);
lean::inc(x_67);
lean::dec(x_64);
x_70 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_70, 0, x_67);
x_71 = lean::box(3);
x_72 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_72, 0, x_37);
lean::cnstr_set(x_72, 1, x_71);
lean::cnstr_set(x_72, 2, x_70);
return x_72;
}
case 3:
{
obj* x_73; obj* x_74; obj* x_75; 
x_73 = lean::box(0);
x_74 = lean::box(3);
x_75 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_75, 0, x_37);
lean::cnstr_set(x_75, 1, x_74);
lean::cnstr_set(x_75, 2, x_73);
return x_75;
}
default:
{
obj* x_77; obj* x_78; obj* x_79; 
lean::dec(x_64);
x_77 = lean::box(0);
x_78 = lean::box(3);
x_79 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_79, 0, x_37);
lean::cnstr_set(x_79, 1, x_78);
lean::cnstr_set(x_79, 2, x_77);
return x_79;
}
}
}
}
}
}
}
obj* l_lean_parser_term_inaccessible_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_9 = l_option_map___rarg(x_8, x_1);
x_10 = lean::box(3);
x_11 = l_option_get__or__else___main___rarg(x_9, x_10);
x_12 = l_option_map___rarg(x_8, x_5);
x_13 = l_option_get__or__else___main___rarg(x_12, x_10);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_3);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_11);
lean::cnstr_set(x_17, 1, x_16);
x_18 = l_lean_parser_term_inaccessible;
x_19 = l_lean_parser_syntax_mk__node(x_18, x_17);
return x_19;
}
}
obj* _init_l_lean_parser_term_inaccessible_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inaccessible_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inaccessible_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_inaccessible_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_inaccessible_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_inaccessible_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_0 = lean::mk_string(".(");
x_1 = l_lean_parser_max__prec;
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::mk_string(")");
x_4 = lean::mk_nat_obj(0u);
x_5 = l_lean_parser_symbol_tokens___rarg(x_3, x_4);
x_6 = lean::box(0);
x_7 = l_lean_parser_list_cons_tokens___rarg(x_5, x_6);
x_8 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_9 = l_lean_parser_list_cons_tokens___rarg(x_8, x_7);
x_10 = l_lean_parser_list_cons_tokens___rarg(x_2, x_9);
x_11 = l_lean_parser_tokens___rarg(x_10);
return x_11;
}
}
obj* _init_l_lean_parser_term_inaccessible_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_0 = lean::mk_string(".(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::mk_string(")");
x_9 = l_string_trim(x_8);
lean::inc(x_9);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_11, 0, x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_12, 0, x_9);
lean::closure_set(x_12, 1, x_6);
lean::closure_set(x_12, 2, x_11);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_7);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_5);
lean::cnstr_set(x_16, 1, x_15);
x_17 = l_lean_parser_term__parser__m_monad;
x_18 = l_lean_parser_term__parser__m_monad__except;
x_19 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_20 = l_lean_parser_term__parser__m_alternative;
x_21 = l_lean_parser_term_inaccessible;
x_22 = l_lean_parser_term_inaccessible_has__view;
x_23 = l_lean_parser_combinators_node_view___rarg(x_17, x_18, x_19, x_20, x_21, x_16, x_22);
return x_23;
}
}
obj* _init_l_lean_parser_term_inaccessible_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_0 = lean::mk_string(".(");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::mk_string(")");
x_9 = l_string_trim(x_8);
lean::inc(x_9);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_11, 0, x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_12, 0, x_9);
lean::closure_set(x_12, 1, x_6);
lean::closure_set(x_12, 2, x_11);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_7);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_5);
lean::cnstr_set(x_16, 1, x_15);
return x_16;
}
}
obj* l_lean_parser_term_inaccessible_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_inaccessible;
x_6 = l_lean_parser_term_inaccessible_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_anonymous__inaccessible() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("anonymous_inaccessible");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_anonymous__inaccessible_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_1 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_2 = l_option_map___rarg(x_1, x_0);
x_3 = lean::box(3);
x_4 = l_option_get__or__else___main___rarg(x_2, x_3);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = l_lean_parser_term_anonymous__inaccessible;
x_8 = l_lean_parser_syntax_mk__node(x_7, x_6);
return x_8;
}
}
obj* _init_l_lean_parser_term_anonymous__inaccessible_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_string__lit_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_anonymous__inaccessible_has__view_x_27___lambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_anonymous__inaccessible_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_anonymous__inaccessible_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; 
x_0 = lean::mk_string("._");
x_1 = l_lean_parser_max__prec;
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::box(0);
x_4 = l_lean_parser_list_cons_tokens___rarg(x_2, x_3);
x_5 = l_lean_parser_tokens___rarg(x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_0 = lean::mk_string("._");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = l_lean_parser_term__parser__m_monad;
x_9 = l_lean_parser_term__parser__m_monad__except;
x_10 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_11 = l_lean_parser_term__parser__m_alternative;
x_12 = l_lean_parser_term_anonymous__inaccessible;
x_13 = l_lean_parser_term_anonymous__inaccessible_has__view;
x_14 = l_lean_parser_combinators_node_view___rarg(x_8, x_9, x_10, x_11, x_12, x_7, x_13);
return x_14;
}
}
obj* _init_l_lean_parser_term_anonymous__inaccessible_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::mk_string("._");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
return x_7;
}
}
obj* l_lean_parser_term_anonymous__inaccessible_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_anonymous__inaccessible;
x_6 = l_lean_parser_term_anonymous__inaccessible_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_sorry() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("sorry");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_sorry_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_1 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_2 = l_option_map___rarg(x_1, x_0);
x_3 = lean::box(3);
x_4 = l_option_get__or__else___main___rarg(x_2, x_3);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = l_lean_parser_term_sorry;
x_8 = l_lean_parser_syntax_mk__node(x_7, x_6);
return x_8;
}
}
obj* _init_l_lean_parser_term_sorry_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_string__lit_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sorry_has__view_x_27___lambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_sorry_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_sorry_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_sorry_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; 
x_0 = lean::mk_string("sorry");
x_1 = l_lean_parser_max__prec;
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::box(0);
x_4 = l_lean_parser_list_cons_tokens___rarg(x_2, x_3);
x_5 = l_lean_parser_tokens___rarg(x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_sorry_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_0 = lean::mk_string("sorry");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = l_lean_parser_term__parser__m_monad;
x_9 = l_lean_parser_term__parser__m_monad__except;
x_10 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_11 = l_lean_parser_term__parser__m_alternative;
x_12 = l_lean_parser_term_sorry;
x_13 = l_lean_parser_term_sorry_has__view;
x_14 = l_lean_parser_combinators_node_view___rarg(x_8, x_9, x_10, x_11, x_12, x_7, x_13);
return x_14;
}
}
obj* _init_l_lean_parser_term_sorry_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::mk_string("sorry");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
return x_7;
}
}
obj* l_lean_parser_term_sorry_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_sorry;
x_6 = l_lean_parser_term_sorry_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_term_borrowed() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("borrowed");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_borrowed_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_lean_parser_term_borrowed_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_borrowed_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
lean::dec(x_5);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
x_10 = l_lean_parser_term_borrowed_has__view_x_27___lambda__1___closed__1;
return x_10;
}
else
{
obj* x_11; obj* x_14; obj* x_15; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
lean::dec(x_6);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_11);
return x_15;
}
}
else
{
obj* x_16; obj* x_18; 
x_16 = lean::cnstr_get(x_6, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_6, 1);
lean::inc(x_18);
lean::dec(x_6);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_21; obj* x_24; 
x_21 = lean::cnstr_get(x_16, 0);
lean::inc(x_21);
lean::dec(x_16);
if (lean::is_scalar(x_5)) {
 x_24 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_24 = x_5;
}
lean::cnstr_set(x_24, 0, x_21);
if (lean::obj_tag(x_18) == 0)
{
obj* x_25; obj* x_26; 
x_25 = lean::box(3);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_30; 
x_27 = lean::cnstr_get(x_18, 0);
lean::inc(x_27);
lean::dec(x_18);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_24);
lean::cnstr_set(x_30, 1, x_27);
return x_30;
}
}
case 3:
{
lean::dec(x_5);
if (lean::obj_tag(x_18) == 0)
{
obj* x_32; 
x_32 = l_lean_parser_term_borrowed_has__view_x_27___lambda__1___closed__1;
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_18, 0);
lean::inc(x_33);
lean::dec(x_18);
x_36 = lean::box(0);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_33);
return x_37;
}
}
default:
{
lean::dec(x_5);
lean::dec(x_16);
if (lean::obj_tag(x_18) == 0)
{
obj* x_40; 
x_40 = l_lean_parser_term_borrowed_has__view_x_27___lambda__1___closed__1;
return x_40;
}
else
{
obj* x_41; obj* x_44; obj* x_45; 
x_41 = lean::cnstr_get(x_18, 0);
lean::inc(x_41);
lean::dec(x_18);
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_41);
return x_45;
}
}
}
}
}
}
}
obj* l_lean_parser_term_borrowed_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_7 = l_option_map___rarg(x_6, x_1);
x_8 = lean::box(3);
x_9 = l_option_get__or__else___main___rarg(x_7, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_3);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_9);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_lean_parser_term_borrowed;
x_14 = l_lean_parser_syntax_mk__node(x_13, x_12);
return x_14;
}
}
obj* _init_l_lean_parser_term_borrowed_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_borrowed_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_borrowed_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_borrowed_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_borrowed_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_borrowed_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::mk_string("@&");
x_1 = l_lean_parser_max__prec;
x_2 = l_lean_parser_symbol_tokens___rarg(x_0, x_1);
x_3 = lean::box(0);
x_4 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_5 = l_lean_parser_list_cons_tokens___rarg(x_4, x_3);
x_6 = l_lean_parser_list_cons_tokens___rarg(x_2, x_5);
x_7 = l_lean_parser_tokens___rarg(x_6);
return x_7;
}
}
obj* _init_l_lean_parser_term_borrowed_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_0 = lean::mk_string("@&");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_5);
lean::cnstr_set(x_10, 1, x_9);
x_11 = l_lean_parser_term__parser__m_monad;
x_12 = l_lean_parser_term__parser__m_monad__except;
x_13 = l_lean_parser_term__parser__m_lean_parser_monad__parsec;
x_14 = l_lean_parser_term__parser__m_alternative;
x_15 = l_lean_parser_term_borrowed;
x_16 = l_lean_parser_term_borrowed_has__view;
x_17 = l_lean_parser_combinators_node_view___rarg(x_11, x_12, x_13, x_14, x_15, x_10, x_16);
return x_17;
}
}
obj* _init_l_lean_parser_term_borrowed_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_0 = lean::mk_string("@&");
x_1 = l_string_trim(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_command_notation__spec_precedence__term_parser_lean_parser_has__tokens___spec__1), 8, 3);
lean::closure_set(x_5, 0, x_1);
lean::closure_set(x_5, 1, x_4);
lean::closure_set(x_5, 2, x_3);
x_6 = lean::mk_nat_obj(0u);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_parser), 6, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_5);
lean::cnstr_set(x_10, 1, x_9);
return x_10;
}
}
obj* l_lean_parser_term_borrowed_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_lean_parser_term_borrowed;
x_6 = l_lean_parser_term_borrowed_parser___closed__1;
x_7 = l_lean_parser_combinators_node___at_lean_parser_command_notation__spec_precedence__lit_parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens___spec__1___rarg___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::mk_string("string");
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_1, 0, x_0);
return x_1;
}
}
obj* l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens___spec__1___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_7; obj* x_8; obj* x_10; obj* x_12; 
lean::dec(x_1);
lean::inc(x_2);
lean::inc(x_0);
x_7 = l_lean_parser_token(x_0, x_2, x_3);
x_8 = lean::cnstr_get(x_7, 0);
x_10 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_set(x_7, 0, lean::box(0));
 lean::cnstr_set(x_7, 1, lean::box(0));
 x_12 = x_7;
} else {
 lean::inc(x_8);
 lean::inc(x_10);
 lean::dec(x_7);
 x_12 = lean::box(0);
}
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; obj* x_15; obj* x_17; obj* x_19; obj* x_21; 
x_13 = lean::cnstr_get(x_8, 0);
x_15 = lean::cnstr_get(x_8, 1);
x_17 = lean::cnstr_get(x_8, 2);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_set(x_8, 0, lean::box(0));
 lean::cnstr_set(x_8, 1, lean::box(0));
 lean::cnstr_set(x_8, 2, lean::box(0));
 x_19 = x_8;
} else {
 lean::inc(x_13);
 lean::inc(x_15);
 lean::inc(x_17);
 lean::dec(x_8);
 x_19 = lean::box(0);
}
lean::inc(x_13);
x_21 = l_lean_parser_try__view___at_lean_parser_string__lit_parser___spec__1(x_13);
if (lean::obj_tag(x_21) == 0)
{
obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_31; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; 
lean::dec(x_13);
lean::dec(x_19);
x_24 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_24, 0, x_2);
x_25 = lean::box(0);
x_26 = l_string_join___closed__1;
x_27 = l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens___spec__1___rarg___closed__1;
x_28 = l_lean_parser_monad__parsec_error___at___private_init_lean_parser_token_1__finish__comment__block__aux___main___spec__1___rarg(x_26, x_27, x_24, x_25, x_0, x_15, x_10);
x_29 = lean::cnstr_get(x_28, 0);
lean::inc(x_29);
x_31 = lean::cnstr_get(x_28, 1);
lean::inc(x_31);
lean::dec(x_28);
x_34 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_35 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_34, x_29);
x_36 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_35);
x_37 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_34, x_36);
x_38 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_37, x_27);
x_39 = l_lean_parser_parsec__t_try__mk__res___rarg(x_38);
if (lean::is_scalar(x_12)) {
 x_40 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_40 = x_12;
}
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_31);
return x_40;
}
else
{
obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; 
lean::dec(x_0);
lean::dec(x_2);
lean::dec(x_21);
x_44 = l_lean_parser_finish__comment__block___closed__2;
if (lean::is_scalar(x_19)) {
 x_45 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_45 = x_19;
}
lean::cnstr_set(x_45, 0, x_13);
lean::cnstr_set(x_45, 1, x_15);
lean::cnstr_set(x_45, 2, x_44);
x_46 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_45);
x_47 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_48 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_47, x_46);
x_49 = l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens___spec__1___rarg___closed__1;
x_50 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_48, x_49);
x_51 = l_lean_parser_parsec__t_try__mk__res___rarg(x_50);
if (lean::is_scalar(x_12)) {
 x_52 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_52 = x_12;
}
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_10);
return x_52;
}
}
else
{
obj* x_55; uint8 x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; 
lean::dec(x_0);
lean::dec(x_2);
x_55 = lean::cnstr_get(x_8, 0);
x_57 = lean::cnstr_get_scalar<uint8>(x_8, sizeof(void*)*1);
if (lean::is_exclusive(x_8)) {
 x_58 = x_8;
} else {
 lean::inc(x_55);
 lean::dec(x_8);
 x_58 = lean::box(0);
}
if (lean::is_scalar(x_58)) {
 x_59 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_59 = x_58;
}
lean::cnstr_set(x_59, 0, x_55);
lean::cnstr_set_scalar(x_59, sizeof(void*)*1, x_57);
x_60 = x_59;
x_61 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_62 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_61, x_60);
x_63 = l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens___spec__1___rarg___closed__1;
x_64 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_62, x_63);
x_65 = l_lean_parser_parsec__t_try__mk__res___rarg(x_64);
if (lean::is_scalar(x_12)) {
 x_66 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_66 = x_12;
}
lean::cnstr_set(x_66, 0, x_65);
lean::cnstr_set(x_66, 1, x_10);
return x_66;
}
}
}
obj* l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens___spec__1(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens___spec__1___rarg), 4, 0);
return x_2;
}
}
obj* _init_l_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; 
x_0 = lean::box(0);
x_1 = l_lean_parser_term_borrowed_parser_lean_parser_has__tokens;
x_2 = l_lean_parser_token__map__cons_tokens___rarg(x_1, x_0);
x_3 = l_lean_parser_term_sorry_parser_lean_parser_has__tokens;
x_4 = l_lean_parser_token__map__cons_tokens___rarg(x_3, x_2);
x_5 = l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__tokens;
x_6 = l_lean_parser_token__map__cons_tokens___rarg(x_5, x_4);
x_7 = l_lean_parser_term_inaccessible_parser_lean_parser_has__tokens;
x_8 = l_lean_parser_token__map__cons_tokens___rarg(x_7, x_6);
x_9 = l_lean_parser_term_subtype_parser_lean_parser_has__tokens;
x_10 = l_lean_parser_token__map__cons_tokens___rarg(x_9, x_8);
x_11 = l_lean_parser_term_struct__inst_parser_lean_parser_has__tokens;
x_12 = l_lean_parser_token__map__cons_tokens___rarg(x_11, x_10);
x_13 = l_lean_parser_term_if_parser_lean_parser_has__tokens;
x_14 = l_lean_parser_token__map__cons_tokens___rarg(x_13, x_12);
x_15 = l_lean_parser_term_match_parser_lean_parser_has__tokens;
x_16 = l_lean_parser_token__map__cons_tokens___rarg(x_15, x_14);
x_17 = l_lean_parser_term_assume_parser_lean_parser_has__tokens;
x_18 = l_lean_parser_token__map__cons_tokens___rarg(x_17, x_16);
x_19 = l_lean_parser_term_show_parser_lean_parser_has__tokens;
x_20 = l_lean_parser_token__map__cons_tokens___rarg(x_19, x_18);
x_21 = l_lean_parser_term_have_parser_lean_parser_has__tokens;
x_22 = l_lean_parser_token__map__cons_tokens___rarg(x_21, x_20);
x_23 = l_lean_parser_term_let_parser_lean_parser_has__tokens;
x_24 = l_lean_parser_token__map__cons_tokens___rarg(x_23, x_22);
x_25 = l_lean_parser_term_explicit_parser_lean_parser_has__tokens;
x_26 = l_lean_parser_token__map__cons_tokens___rarg(x_25, x_24);
x_27 = l_lean_parser_token__map__cons_tokens___rarg(x_25, x_26);
x_28 = l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__tokens;
x_29 = l_lean_parser_token__map__cons_tokens___rarg(x_28, x_27);
x_30 = l_lean_parser_term_pi_parser_lean_parser_has__tokens;
x_31 = l_lean_parser_token__map__cons_tokens___rarg(x_30, x_29);
x_32 = l_lean_parser_token__map__cons_tokens___rarg(x_30, x_31);
x_33 = l_lean_parser_token__map__cons_tokens___rarg(x_30, x_32);
x_34 = l_lean_parser_token__map__cons_tokens___rarg(x_30, x_33);
x_35 = l_lean_parser_term_lambda_parser_lean_parser_has__tokens;
x_36 = l_lean_parser_token__map__cons_tokens___rarg(x_35, x_34);
x_37 = l_lean_parser_token__map__cons_tokens___rarg(x_35, x_36);
x_38 = l_lean_parser_term_sort_parser_lean_parser_has__tokens;
x_39 = l_lean_parser_token__map__cons_tokens___rarg(x_38, x_37);
x_40 = l_lean_parser_token__map__cons_tokens___rarg(x_38, x_39);
x_41 = l_lean_parser_term_hole_parser_lean_parser_has__tokens;
x_42 = l_lean_parser_token__map__cons_tokens___rarg(x_41, x_40);
x_43 = l_lean_parser_term_paren_parser_lean_parser_has__tokens;
x_44 = l_lean_parser_token__map__cons_tokens___rarg(x_43, x_42);
x_45 = l_lean_parser_token__map__cons_tokens___rarg(x_0, x_44);
x_46 = l_lean_parser_token__map__cons_tokens___rarg(x_0, x_45);
x_47 = l_lean_parser_ident__univs_parser_lean_parser_has__tokens;
x_48 = l_lean_parser_token__map__cons_tokens___rarg(x_47, x_46);
return x_48;
}
}
obj* _init_l_lean_parser_term_builtin__leading__parsers() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_39; obj* x_40; obj* x_41; obj* x_43; obj* x_44; obj* x_45; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; obj* x_129; obj* x_130; obj* x_131; obj* x_132; obj* x_133; obj* x_134; obj* x_135; obj* x_136; obj* x_137; obj* x_138; 
x_0 = lean::box(0);
x_1 = lean::mk_string("ident");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident__univs_parser), 5, 0);
x_4 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = l_lean_parser_number;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_number_parser___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__1), 1, 0);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = l_lean_parser_string__lit;
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens___spec__1), 1, 0);
x_10 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::mk_string("(");
x_12 = lean_name_mk_string(x_0, x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_paren_parser), 5, 0);
x_14 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::mk_string("_");
x_16 = lean_name_mk_string(x_0, x_15);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_hole_parser), 5, 0);
x_18 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::mk_string("Sort");
x_20 = lean_name_mk_string(x_0, x_19);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort_parser), 5, 0);
lean::inc(x_21);
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_20);
lean::cnstr_set(x_23, 1, x_21);
x_24 = lean::mk_string("Type");
x_25 = lean_name_mk_string(x_0, x_24);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_21);
x_27 = lean::mk_string("\xce\xbb");
x_28 = lean_name_mk_string(x_0, x_27);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_lambda_parser), 5, 0);
lean::inc(x_29);
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_29);
x_32 = lean::mk_string("fun");
x_33 = lean_name_mk_string(x_0, x_32);
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_29);
x_35 = lean::mk_string("\xce\xa0");
x_36 = lean_name_mk_string(x_0, x_35);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_pi_parser), 5, 0);
lean::inc(x_37);
x_39 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_39, 0, x_36);
lean::cnstr_set(x_39, 1, x_37);
x_40 = lean::mk_string("Pi");
x_41 = lean_name_mk_string(x_0, x_40);
lean::inc(x_37);
x_43 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_43, 0, x_41);
lean::cnstr_set(x_43, 1, x_37);
x_44 = lean::mk_string("\xe2\x88\x80");
x_45 = lean_name_mk_string(x_0, x_44);
lean::inc(x_37);
x_47 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_47, 0, x_45);
lean::cnstr_set(x_47, 1, x_37);
x_48 = lean::mk_string("forall");
x_49 = lean_name_mk_string(x_0, x_48);
x_50 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_37);
x_51 = lean::mk_string("\xe2\x9f\xa8");
x_52 = lean_name_mk_string(x_0, x_51);
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_anonymous__constructor_parser), 5, 0);
x_54 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_54, 0, x_52);
lean::cnstr_set(x_54, 1, x_53);
x_55 = lean::mk_string("@");
x_56 = lean_name_mk_string(x_0, x_55);
x_57 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_explicit_parser), 5, 0);
lean::inc(x_57);
x_59 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_59, 0, x_56);
lean::cnstr_set(x_59, 1, x_57);
x_60 = lean::mk_string("@@");
x_61 = lean_name_mk_string(x_0, x_60);
x_62 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_62, 0, x_61);
lean::cnstr_set(x_62, 1, x_57);
x_63 = lean::mk_string("let");
x_64 = lean_name_mk_string(x_0, x_63);
x_65 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_let_parser), 5, 0);
x_66 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_66, 0, x_64);
lean::cnstr_set(x_66, 1, x_65);
x_67 = lean::mk_string("have");
x_68 = lean_name_mk_string(x_0, x_67);
x_69 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_have_parser), 5, 0);
x_70 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_70, 0, x_68);
lean::cnstr_set(x_70, 1, x_69);
x_71 = lean::mk_string("show");
x_72 = lean_name_mk_string(x_0, x_71);
x_73 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_show_parser), 5, 0);
x_74 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_74, 0, x_72);
lean::cnstr_set(x_74, 1, x_73);
x_75 = lean::mk_string("assume");
x_76 = lean_name_mk_string(x_0, x_75);
x_77 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_assume_parser), 5, 0);
x_78 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_78, 0, x_76);
lean::cnstr_set(x_78, 1, x_77);
x_79 = lean::mk_string("match");
x_80 = lean_name_mk_string(x_0, x_79);
x_81 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_match_parser), 5, 0);
x_82 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_82, 0, x_80);
lean::cnstr_set(x_82, 1, x_81);
x_83 = lean::mk_string("if");
x_84 = lean_name_mk_string(x_0, x_83);
x_85 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_if_parser), 5, 0);
x_86 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_86, 0, x_84);
lean::cnstr_set(x_86, 1, x_85);
x_87 = lean::mk_string("{");
x_88 = lean_name_mk_string(x_0, x_87);
x_89 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_struct__inst_parser), 5, 0);
lean::inc(x_88);
x_91 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_91, 0, x_88);
lean::cnstr_set(x_91, 1, x_89);
x_92 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_subtype_parser), 5, 0);
x_93 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_93, 0, x_88);
lean::cnstr_set(x_93, 1, x_92);
x_94 = lean::mk_string(".(");
x_95 = lean_name_mk_string(x_0, x_94);
x_96 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_inaccessible_parser), 5, 0);
x_97 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_97, 0, x_95);
lean::cnstr_set(x_97, 1, x_96);
x_98 = lean::mk_string("._");
x_99 = lean_name_mk_string(x_0, x_98);
x_100 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_anonymous__inaccessible_parser), 5, 0);
x_101 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_101, 0, x_99);
lean::cnstr_set(x_101, 1, x_100);
x_102 = lean::mk_string("sorry");
x_103 = lean_name_mk_string(x_0, x_102);
x_104 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sorry_parser), 5, 0);
x_105 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_105, 0, x_103);
lean::cnstr_set(x_105, 1, x_104);
x_106 = lean::mk_string("@&");
x_107 = lean_name_mk_string(x_0, x_106);
x_108 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_borrowed_parser), 5, 0);
x_109 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_109, 0, x_107);
lean::cnstr_set(x_109, 1, x_108);
x_110 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_110, 0, x_109);
lean::cnstr_set(x_110, 1, x_0);
x_111 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_111, 0, x_105);
lean::cnstr_set(x_111, 1, x_110);
x_112 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_112, 0, x_101);
lean::cnstr_set(x_112, 1, x_111);
x_113 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_113, 0, x_97);
lean::cnstr_set(x_113, 1, x_112);
x_114 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_114, 0, x_93);
lean::cnstr_set(x_114, 1, x_113);
x_115 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_115, 0, x_91);
lean::cnstr_set(x_115, 1, x_114);
x_116 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_116, 0, x_86);
lean::cnstr_set(x_116, 1, x_115);
x_117 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_117, 0, x_82);
lean::cnstr_set(x_117, 1, x_116);
x_118 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_118, 0, x_78);
lean::cnstr_set(x_118, 1, x_117);
x_119 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_119, 0, x_74);
lean::cnstr_set(x_119, 1, x_118);
x_120 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_120, 0, x_70);
lean::cnstr_set(x_120, 1, x_119);
x_121 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_121, 0, x_66);
lean::cnstr_set(x_121, 1, x_120);
x_122 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_122, 0, x_62);
lean::cnstr_set(x_122, 1, x_121);
x_123 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_123, 0, x_59);
lean::cnstr_set(x_123, 1, x_122);
x_124 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_124, 0, x_54);
lean::cnstr_set(x_124, 1, x_123);
x_125 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_125, 0, x_50);
lean::cnstr_set(x_125, 1, x_124);
x_126 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_126, 0, x_47);
lean::cnstr_set(x_126, 1, x_125);
x_127 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_127, 0, x_43);
lean::cnstr_set(x_127, 1, x_126);
x_128 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_128, 0, x_39);
lean::cnstr_set(x_128, 1, x_127);
x_129 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_129, 0, x_34);
lean::cnstr_set(x_129, 1, x_128);
x_130 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_130, 0, x_31);
lean::cnstr_set(x_130, 1, x_129);
x_131 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_131, 0, x_26);
lean::cnstr_set(x_131, 1, x_130);
x_132 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_132, 0, x_23);
lean::cnstr_set(x_132, 1, x_131);
x_133 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_133, 0, x_18);
lean::cnstr_set(x_133, 1, x_132);
x_134 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_134, 0, x_14);
lean::cnstr_set(x_134, 1, x_133);
x_135 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_135, 0, x_10);
lean::cnstr_set(x_135, 1, x_134);
x_136 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_136, 0, x_7);
lean::cnstr_set(x_136, 1, x_135);
x_137 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_137, 0, x_4);
lean::cnstr_set(x_137, 1, x_136);
x_138 = l_lean_parser_token__map_of__list___main___rarg(x_137);
return x_138;
}
}
obj* _init_l_lean_parser_term_sort__app() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("sort_app");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_sort__app_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1, 0, x_0);
lean::cnstr_set(x_1, 1, x_0);
return x_1;
}
}
obj* l_lean_parser_term_sort__app_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_sort__app_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
if (lean::obj_tag(x_6) == 0)
{
obj* x_9; 
x_9 = l_lean_parser_term_sort__app_has__view_x_27___lambda__1___closed__1;
return x_9;
}
else
{
obj* x_10; obj* x_13; obj* x_14; 
x_10 = lean::cnstr_get(x_6, 0);
lean::inc(x_10);
lean::dec(x_6);
x_13 = lean::box(3);
x_14 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_10);
return x_14;
}
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_6, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_6, 1);
lean::inc(x_17);
lean::dec(x_6);
if (lean::obj_tag(x_17) == 0)
{
obj* x_20; obj* x_21; 
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_15);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_17, 0);
lean::inc(x_22);
lean::dec(x_17);
x_25 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_25, 0, x_15);
lean::cnstr_set(x_25, 1, x_22);
return x_25;
}
}
}
}
}
obj* l_lean_parser_term_sort__app_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_1);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_lean_parser_term_sort__app;
x_10 = l_lean_parser_syntax_mk__node(x_9, x_8);
return x_10;
}
}
obj* _init_l_lean_parser_term_sort__app_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort__app_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort__app_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_sort__app_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_sort__app_has__view_x_27;
return x_0;
}
}
obj* l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__1___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_12; obj* x_13; obj* x_15; obj* x_17; 
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
x_12 = lean::apply_6(x_0, x_2, x_3, x_4, x_5, x_6, x_7);
x_13 = lean::cnstr_get(x_12, 0);
x_15 = lean::cnstr_get(x_12, 1);
if (lean::is_exclusive(x_12)) {
 lean::cnstr_set(x_12, 0, lean::box(0));
 lean::cnstr_set(x_12, 1, lean::box(0));
 x_17 = x_12;
} else {
 lean::inc(x_13);
 lean::inc(x_15);
 lean::dec(x_12);
 x_17 = lean::box(0);
}
if (lean::obj_tag(x_13) == 0)
{
obj* x_18; obj* x_20; obj* x_22; obj* x_25; obj* x_26; obj* x_28; obj* x_31; obj* x_32; 
x_18 = lean::cnstr_get(x_13, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_13, 1);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_13, 2);
lean::inc(x_22);
lean::dec(x_13);
x_25 = lean::apply_7(x_1, x_18, x_2, x_3, x_4, x_5, x_20, x_15);
x_26 = lean::cnstr_get(x_25, 0);
lean::inc(x_26);
x_28 = lean::cnstr_get(x_25, 1);
lean::inc(x_28);
lean::dec(x_25);
x_31 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_22, x_26);
if (lean::is_scalar(x_17)) {
 x_32 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_32 = x_17;
}
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_28);
return x_32;
}
else
{
obj* x_38; uint8 x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_38 = lean::cnstr_get(x_13, 0);
x_40 = lean::cnstr_get_scalar<uint8>(x_13, sizeof(void*)*1);
if (lean::is_exclusive(x_13)) {
 x_41 = x_13;
} else {
 lean::inc(x_38);
 lean::dec(x_13);
 x_41 = lean::box(0);
}
if (lean::is_scalar(x_41)) {
 x_42 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_42 = x_41;
}
lean::cnstr_set(x_42, 0, x_38);
lean::cnstr_set_scalar(x_42, sizeof(void*)*1, x_40);
x_43 = x_42;
if (lean::is_scalar(x_17)) {
 x_44 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_44 = x_17;
}
lean::cnstr_set(x_44, 0, x_43);
lean::cnstr_set(x_44, 1, x_15);
return x_44;
}
}
}
obj* l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__1(obj* x_0, obj* x_1) {
_start:
{
obj* x_4; 
lean::dec(x_1);
lean::dec(x_0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__1___rarg), 8, 0);
return x_4;
}
}
obj* l_reader__t_lift___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__2___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_8; 
lean::dec(x_1);
x_8 = lean::apply_5(x_0, x_2, x_3, x_4, x_5, x_6);
return x_8;
}
}
obj* l_reader__t_lift___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__2(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__2___rarg), 7, 0);
return x_2;
}
}
obj* l_list_mfoldl___main___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__4(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_14; obj* x_15; obj* x_16; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_0);
x_14 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_15 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_15, 0, x_1);
lean::cnstr_set(x_15, 1, x_7);
lean::cnstr_set(x_15, 2, x_14);
x_16 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_8);
return x_16;
}
else
{
obj* x_17; obj* x_19; obj* x_21; obj* x_22; obj* x_23; obj* x_29; obj* x_30; obj* x_32; 
x_17 = lean::cnstr_get(x_2, 0);
x_19 = lean::cnstr_get(x_2, 1);
if (lean::is_exclusive(x_2)) {
 lean::cnstr_set(x_2, 0, lean::box(0));
 lean::cnstr_set(x_2, 1, lean::box(0));
 x_21 = x_2;
} else {
 lean::inc(x_17);
 lean::inc(x_19);
 lean::dec(x_2);
 x_21 = lean::box(0);
}
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
x_29 = lean::apply_6(x_17, x_3, x_4, x_5, x_6, x_7, x_8);
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_29, 1);
lean::inc(x_32);
lean::dec(x_29);
if (lean::obj_tag(x_30) == 0)
{
x_22 = x_30;
x_23 = x_32;
goto lbl_24;
}
else
{
obj* x_35; uint8 x_37; obj* x_38; 
x_35 = lean::cnstr_get(x_30, 0);
x_37 = lean::cnstr_get_scalar<uint8>(x_30, sizeof(void*)*1);
if (lean::is_exclusive(x_30)) {
 lean::cnstr_set(x_30, 0, lean::box(0));
 x_38 = x_30;
} else {
 lean::inc(x_35);
 lean::dec(x_30);
 x_38 = lean::box(0);
}
if (lean::obj_tag(x_1) == 0)
{
if (x_37 == 0)
{
uint8 x_39; obj* x_40; obj* x_41; 
x_39 = 0;
if (lean::is_scalar(x_38)) {
 x_40 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_40 = x_38;
}
lean::cnstr_set(x_40, 0, x_35);
lean::cnstr_set_scalar(x_40, sizeof(void*)*1, x_39);
x_41 = x_40;
x_22 = x_41;
x_23 = x_32;
goto lbl_24;
}
else
{
obj* x_42; obj* x_43; 
if (lean::is_scalar(x_38)) {
 x_42 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_42 = x_38;
}
lean::cnstr_set(x_42, 0, x_35);
lean::cnstr_set_scalar(x_42, sizeof(void*)*1, x_37);
x_43 = x_42;
x_22 = x_43;
x_23 = x_32;
goto lbl_24;
}
}
else
{
obj* x_44; obj* x_46; obj* x_48; obj* x_49; obj* x_51; obj* x_53; obj* x_56; obj* x_58; obj* x_59; obj* x_60; 
x_44 = lean::cnstr_get(x_35, 3);
lean::inc(x_44);
x_46 = l_option_get___main___at_lean_parser_run___spec__2(x_44);
lean::inc(x_1);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_46);
lean::cnstr_set(x_48, 1, x_1);
x_49 = lean::cnstr_get(x_35, 0);
lean::inc(x_49);
x_51 = lean::cnstr_get(x_35, 1);
lean::inc(x_51);
x_53 = lean::cnstr_get(x_35, 2);
lean::inc(x_53);
lean::dec(x_35);
x_56 = l_list_reverse___rarg(x_48);
lean::inc(x_0);
x_58 = l_lean_parser_syntax_mk__node(x_0, x_56);
x_59 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_59, 0, x_58);
x_60 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_60, 0, x_49);
lean::cnstr_set(x_60, 1, x_51);
lean::cnstr_set(x_60, 2, x_53);
lean::cnstr_set(x_60, 3, x_59);
if (x_37 == 0)
{
uint8 x_61; obj* x_62; obj* x_63; 
x_61 = 0;
if (lean::is_scalar(x_38)) {
 x_62 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_62 = x_38;
}
lean::cnstr_set(x_62, 0, x_60);
lean::cnstr_set_scalar(x_62, sizeof(void*)*1, x_61);
x_63 = x_62;
x_22 = x_63;
x_23 = x_32;
goto lbl_24;
}
else
{
obj* x_64; obj* x_65; 
if (lean::is_scalar(x_38)) {
 x_64 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_64 = x_38;
}
lean::cnstr_set(x_64, 0, x_60);
lean::cnstr_set_scalar(x_64, sizeof(void*)*1, x_37);
x_65 = x_64;
x_22 = x_65;
x_23 = x_32;
goto lbl_24;
}
}
}
lbl_24:
{
if (lean::obj_tag(x_22) == 0)
{
obj* x_66; obj* x_68; obj* x_70; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; 
x_66 = lean::cnstr_get(x_22, 0);
x_68 = lean::cnstr_get(x_22, 1);
x_70 = lean::cnstr_get(x_22, 2);
if (lean::is_exclusive(x_22)) {
 x_72 = x_22;
} else {
 lean::inc(x_66);
 lean::inc(x_68);
 lean::inc(x_70);
 lean::dec(x_22);
 x_72 = lean::box(0);
}
if (lean::is_scalar(x_21)) {
 x_73 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_73 = x_21;
}
lean::cnstr_set(x_73, 0, x_66);
lean::cnstr_set(x_73, 1, x_1);
x_74 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_72)) {
 x_75 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_75 = x_72;
}
lean::cnstr_set(x_75, 0, x_73);
lean::cnstr_set(x_75, 1, x_68);
lean::cnstr_set(x_75, 2, x_74);
x_76 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_70, x_75);
if (lean::obj_tag(x_76) == 0)
{
obj* x_77; obj* x_79; obj* x_81; obj* x_84; obj* x_85; obj* x_87; obj* x_89; obj* x_90; obj* x_91; 
x_77 = lean::cnstr_get(x_76, 0);
lean::inc(x_77);
x_79 = lean::cnstr_get(x_76, 1);
lean::inc(x_79);
x_81 = lean::cnstr_get(x_76, 2);
lean::inc(x_81);
lean::dec(x_76);
x_84 = l_list_mfoldl___main___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__4(x_0, x_77, x_19, x_3, x_4, x_5, x_6, x_79, x_23);
x_85 = lean::cnstr_get(x_84, 0);
x_87 = lean::cnstr_get(x_84, 1);
if (lean::is_exclusive(x_84)) {
 x_89 = x_84;
} else {
 lean::inc(x_85);
 lean::inc(x_87);
 lean::dec(x_84);
 x_89 = lean::box(0);
}
x_90 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_81, x_85);
if (lean::is_scalar(x_89)) {
 x_91 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_91 = x_89;
}
lean::cnstr_set(x_91, 0, x_90);
lean::cnstr_set(x_91, 1, x_87);
return x_91;
}
else
{
obj* x_98; uint8 x_100; obj* x_101; obj* x_102; obj* x_103; obj* x_104; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_19);
x_98 = lean::cnstr_get(x_76, 0);
x_100 = lean::cnstr_get_scalar<uint8>(x_76, sizeof(void*)*1);
if (lean::is_exclusive(x_76)) {
 x_101 = x_76;
} else {
 lean::inc(x_98);
 lean::dec(x_76);
 x_101 = lean::box(0);
}
if (lean::is_scalar(x_101)) {
 x_102 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_102 = x_101;
}
lean::cnstr_set(x_102, 0, x_98);
lean::cnstr_set_scalar(x_102, sizeof(void*)*1, x_100);
x_103 = x_102;
x_104 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_104, 0, x_103);
lean::cnstr_set(x_104, 1, x_23);
return x_104;
}
}
else
{
obj* x_113; uint8 x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_19);
lean::dec(x_21);
x_113 = lean::cnstr_get(x_22, 0);
x_115 = lean::cnstr_get_scalar<uint8>(x_22, sizeof(void*)*1);
if (lean::is_exclusive(x_22)) {
 x_116 = x_22;
} else {
 lean::inc(x_113);
 lean::dec(x_22);
 x_116 = lean::box(0);
}
if (lean::is_scalar(x_116)) {
 x_117 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_117 = x_116;
}
lean::cnstr_set(x_117, 0, x_113);
lean::cnstr_set_scalar(x_117, sizeof(void*)*1, x_115);
x_118 = x_117;
x_119 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_119, 0, x_118);
lean::cnstr_set(x_119, 1, x_23);
return x_119;
}
}
}
}
}
obj* l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__3(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_15; 
x_8 = lean::box(0);
lean::inc(x_0);
x_10 = l_list_mfoldl___main___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__4(x_0, x_8, x_1, x_2, x_3, x_4, x_5, x_6, x_7);
x_11 = lean::cnstr_get(x_10, 0);
x_13 = lean::cnstr_get(x_10, 1);
if (lean::is_exclusive(x_10)) {
 lean::cnstr_set(x_10, 0, lean::box(0));
 lean::cnstr_set(x_10, 1, lean::box(0));
 x_15 = x_10;
} else {
 lean::inc(x_11);
 lean::inc(x_13);
 lean::dec(x_10);
 x_15 = lean::box(0);
}
if (lean::obj_tag(x_11) == 0)
{
obj* x_16; obj* x_18; obj* x_20; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_16 = lean::cnstr_get(x_11, 0);
x_18 = lean::cnstr_get(x_11, 1);
x_20 = lean::cnstr_get(x_11, 2);
if (lean::is_exclusive(x_11)) {
 x_22 = x_11;
} else {
 lean::inc(x_16);
 lean::inc(x_18);
 lean::inc(x_20);
 lean::dec(x_11);
 x_22 = lean::box(0);
}
x_23 = l_list_reverse___rarg(x_16);
x_24 = l_lean_parser_syntax_mk__node(x_0, x_23);
x_25 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_22)) {
 x_26 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_26 = x_22;
}
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_18);
lean::cnstr_set(x_26, 2, x_25);
x_27 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_20, x_26);
if (lean::is_scalar(x_15)) {
 x_28 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_28 = x_15;
}
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_13);
return x_28;
}
else
{
obj* x_30; uint8 x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; 
lean::dec(x_0);
x_30 = lean::cnstr_get(x_11, 0);
x_32 = lean::cnstr_get_scalar<uint8>(x_11, sizeof(void*)*1);
if (lean::is_exclusive(x_11)) {
 x_33 = x_11;
} else {
 lean::inc(x_30);
 lean::dec(x_11);
 x_33 = lean::box(0);
}
if (lean::is_scalar(x_33)) {
 x_34 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_34 = x_33;
}
lean::cnstr_set(x_34, 0, x_30);
lean::cnstr_set_scalar(x_34, sizeof(void*)*1, x_32);
x_35 = x_34;
if (lean::is_scalar(x_15)) {
 x_36 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_36 = x_15;
}
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_13);
return x_36;
}
}
}
obj* _init_l_lean_parser_term_sort__app_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = l_lean_parser_level_leading_parser_lean_parser_has__tokens;
x_1 = l_lean_parser_level_trailing_parser_lean_parser_has__tokens;
x_2 = l_list_append___rarg(x_0, x_1);
x_3 = l_lean_parser_tokens___rarg(x_2);
x_4 = lean::box(0);
x_5 = l_lean_parser_list_cons_tokens___rarg(x_3, x_4);
x_6 = l_lean_parser_term_lean_parser_has__tokens;
x_7 = l_lean_parser_list_cons_tokens___rarg(x_6, x_5);
x_8 = l_lean_parser_tokens___rarg(x_7);
x_9 = l_lean_parser_tokens___rarg(x_8);
return x_9;
}
}
obj* l_lean_parser_term_sort__app_parser_lean_parser_has__view___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_11; uint8 x_12; 
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_1);
x_11 = l_lean_parser_term_sort;
x_12 = l_lean_parser_syntax_is__of__kind___main(x_11, x_0);
if (x_12 == 0)
{
obj* x_13; 
x_13 = l_lean_parser_parsec__t_failure___at_lean_parser_token___spec__4___rarg(x_5, x_6);
return x_13;
}
else
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_14 = lean::box(0);
x_15 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_16 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_16, 0, x_14);
lean::cnstr_set(x_16, 1, x_5);
lean::cnstr_set(x_16, 2, x_15);
x_17 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_6);
return x_17;
}
}
}
obj* l_lean_parser_term_sort__app_parser_lean_parser_has__view___lambda__2(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; 
lean::dec(x_2);
x_6 = l_lean_parser_level__parser_run_lean_parser_has__view___closed__2;
x_7 = l_lean_parser_level__parser_run_lean_parser_has__view___closed__3;
x_8 = l_lean_parser_pratt__parser___at_lean_parser_level__parser_run___spec__1(x_6, x_7, x_0, x_1, x_3, x_4);
return x_8;
}
}
obj* _init_l_lean_parser_term_sort__app_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort__app_parser_lean_parser_has__view___lambda__1), 7, 0);
lean::inc(x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__1___rarg), 8, 2);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
x_4 = l_lean_parser_max__prec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_level_parser), 5, 1);
lean::closure_set(x_5, 0, x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort__app_parser_lean_parser_has__view___lambda__2), 5, 1);
lean::closure_set(x_6, 0, x_5);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__3___rarg), 6, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__2___rarg), 7, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::box(0);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_0);
lean::cnstr_set(x_11, 1, x_10);
x_12 = l_lean_parser_term_sort__app;
lean::inc(x_11);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__3), 8, 2);
lean::closure_set(x_14, 0, x_12);
lean::closure_set(x_14, 1, x_11);
x_15 = l_lean_parser_trailing__term__parser__m_monad;
x_16 = l_lean_parser_trailing__term__parser__m_monad__except;
x_17 = l_lean_parser_trailing__term__parser__m_lean_parser_monad__parsec;
x_18 = l_lean_parser_trailing__term__parser__m_alternative;
x_19 = l_lean_parser_term_sort__app_has__view;
x_20 = l_lean_parser_combinators_node_view___rarg(x_15, x_16, x_17, x_18, x_12, x_11, x_19);
x_21 = l_lean_parser_combinators_seq__right_view___rarg(x_18, lean::box(0), lean::box(0), x_3, x_14, x_20);
return x_21;
}
}
obj* _init_l_lean_parser_term_sort__app_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = l_lean_parser_max__prec;
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_level_parser), 5, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort__app_parser_lean_parser_has__view___lambda__2), 5, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__3___rarg), 6, 1);
lean::closure_set(x_3, 0, x_2);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__2___rarg), 7, 1);
lean::closure_set(x_4, 0, x_3);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_6);
return x_8;
}
}
obj* l_lean_parser_term_sort__app_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_10; obj* x_11; obj* x_13; obj* x_15; 
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
lean::inc(x_0);
x_10 = l_lean_parser_term_get__leading(x_0, x_1, x_2, x_3, x_4, x_5);
x_11 = lean::cnstr_get(x_10, 0);
x_13 = lean::cnstr_get(x_10, 1);
if (lean::is_exclusive(x_10)) {
 lean::cnstr_set(x_10, 0, lean::box(0));
 lean::cnstr_set(x_10, 1, lean::box(0));
 x_15 = x_10;
} else {
 lean::inc(x_11);
 lean::inc(x_13);
 lean::dec(x_10);
 x_15 = lean::box(0);
}
if (lean::obj_tag(x_11) == 0)
{
obj* x_16; obj* x_18; obj* x_20; obj* x_22; obj* x_23; uint8 x_24; uint8 x_25; 
x_16 = lean::cnstr_get(x_11, 0);
x_18 = lean::cnstr_get(x_11, 1);
x_20 = lean::cnstr_get(x_11, 2);
if (lean::is_exclusive(x_11)) {
 lean::cnstr_set(x_11, 0, lean::box(0));
 lean::cnstr_set(x_11, 1, lean::box(0));
 lean::cnstr_set(x_11, 2, lean::box(0));
 x_22 = x_11;
} else {
 lean::inc(x_16);
 lean::inc(x_18);
 lean::inc(x_20);
 lean::dec(x_11);
 x_22 = lean::box(0);
}
x_23 = l_lean_parser_term_sort;
x_24 = l_lean_parser_syntax_is__of__kind___main(x_23, x_16);
if (x_24 == 0)
{
uint8 x_27; 
x_27 = 0;
x_25 = x_27;
goto lbl_26;
}
else
{
uint8 x_28; 
x_28 = 1;
x_25 = x_28;
goto lbl_26;
}
lbl_26:
{
if (x_25 == 0)
{
obj* x_30; obj* x_31; obj* x_33; obj* x_36; 
lean::dec(x_22);
x_30 = l_lean_parser_parsec__t_failure___at_lean_parser_token___spec__4___rarg(x_18, x_13);
x_31 = lean::cnstr_get(x_30, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_30, 1);
lean::inc(x_33);
lean::dec(x_30);
x_36 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_20, x_31);
if (lean::obj_tag(x_36) == 0)
{
obj* x_37; obj* x_39; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_47; obj* x_50; obj* x_51; 
x_37 = lean::cnstr_get(x_36, 1);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_36, 2);
lean::inc(x_39);
lean::dec(x_36);
x_42 = l_lean_parser_term_sort__app;
x_43 = l_lean_parser_term_sort__app_parser___closed__1;
x_44 = l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__3(x_42, x_43, x_0, x_1, x_2, x_3, x_37, x_33);
x_45 = lean::cnstr_get(x_44, 0);
lean::inc(x_45);
x_47 = lean::cnstr_get(x_44, 1);
lean::inc(x_47);
lean::dec(x_44);
x_50 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_39, x_45);
if (lean::is_scalar(x_15)) {
 x_51 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_51 = x_15;
}
lean::cnstr_set(x_51, 0, x_50);
lean::cnstr_set(x_51, 1, x_47);
return x_51;
}
else
{
obj* x_56; uint8 x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_2);
x_56 = lean::cnstr_get(x_36, 0);
x_58 = lean::cnstr_get_scalar<uint8>(x_36, sizeof(void*)*1);
if (lean::is_exclusive(x_36)) {
 x_59 = x_36;
} else {
 lean::inc(x_56);
 lean::dec(x_36);
 x_59 = lean::box(0);
}
if (lean::is_scalar(x_59)) {
 x_60 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_60 = x_59;
}
lean::cnstr_set(x_60, 0, x_56);
lean::cnstr_set_scalar(x_60, sizeof(void*)*1, x_58);
x_61 = x_60;
if (lean::is_scalar(x_15)) {
 x_62 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_62 = x_15;
}
lean::cnstr_set(x_62, 0, x_61);
lean::cnstr_set(x_62, 1, x_33);
return x_62;
}
}
else
{
obj* x_63; obj* x_64; obj* x_65; obj* x_66; 
x_63 = lean::box(0);
x_64 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_22)) {
 x_65 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_65 = x_22;
}
lean::cnstr_set(x_65, 0, x_63);
lean::cnstr_set(x_65, 1, x_18);
lean::cnstr_set(x_65, 2, x_64);
x_66 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_20, x_65);
if (lean::obj_tag(x_66) == 0)
{
obj* x_67; obj* x_69; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_77; obj* x_80; obj* x_81; 
x_67 = lean::cnstr_get(x_66, 1);
lean::inc(x_67);
x_69 = lean::cnstr_get(x_66, 2);
lean::inc(x_69);
lean::dec(x_66);
x_72 = l_lean_parser_term_sort__app;
x_73 = l_lean_parser_term_sort__app_parser___closed__1;
x_74 = l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__3(x_72, x_73, x_0, x_1, x_2, x_3, x_67, x_13);
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
x_77 = lean::cnstr_get(x_74, 1);
lean::inc(x_77);
lean::dec(x_74);
x_80 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_69, x_75);
if (lean::is_scalar(x_15)) {
 x_81 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_81 = x_15;
}
lean::cnstr_set(x_81, 0, x_80);
lean::cnstr_set(x_81, 1, x_77);
return x_81;
}
else
{
obj* x_86; uint8 x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_2);
x_86 = lean::cnstr_get(x_66, 0);
x_88 = lean::cnstr_get_scalar<uint8>(x_66, sizeof(void*)*1);
if (lean::is_exclusive(x_66)) {
 x_89 = x_66;
} else {
 lean::inc(x_86);
 lean::dec(x_66);
 x_89 = lean::box(0);
}
if (lean::is_scalar(x_89)) {
 x_90 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_90 = x_89;
}
lean::cnstr_set(x_90, 0, x_86);
lean::cnstr_set_scalar(x_90, sizeof(void*)*1, x_88);
x_91 = x_90;
if (lean::is_scalar(x_15)) {
 x_92 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_92 = x_15;
}
lean::cnstr_set(x_92, 0, x_91);
lean::cnstr_set(x_92, 1, x_13);
return x_92;
}
}
}
}
else
{
obj* x_97; uint8 x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_2);
x_97 = lean::cnstr_get(x_11, 0);
x_99 = lean::cnstr_get_scalar<uint8>(x_11, sizeof(void*)*1);
if (lean::is_exclusive(x_11)) {
 x_100 = x_11;
} else {
 lean::inc(x_97);
 lean::dec(x_11);
 x_100 = lean::box(0);
}
if (lean::is_scalar(x_100)) {
 x_101 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_101 = x_100;
}
lean::cnstr_set(x_101, 0, x_97);
lean::cnstr_set_scalar(x_101, sizeof(void*)*1, x_99);
x_102 = x_101;
if (lean::is_scalar(x_15)) {
 x_103 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_103 = x_15;
}
lean::cnstr_set(x_103, 0, x_102);
lean::cnstr_set(x_103, 1, x_13);
return x_103;
}
}
}
obj* _init_l_lean_parser_term_app() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("app");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_app_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1, 0, x_0);
lean::cnstr_set(x_1, 1, x_0);
return x_1;
}
}
obj* l_lean_parser_term_app_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_app_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
if (lean::obj_tag(x_6) == 0)
{
obj* x_9; 
x_9 = l_lean_parser_term_app_has__view_x_27___lambda__1___closed__1;
return x_9;
}
else
{
obj* x_10; obj* x_13; obj* x_14; 
x_10 = lean::cnstr_get(x_6, 0);
lean::inc(x_10);
lean::dec(x_6);
x_13 = lean::box(3);
x_14 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_10);
return x_14;
}
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_6, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_6, 1);
lean::inc(x_17);
lean::dec(x_6);
if (lean::obj_tag(x_17) == 0)
{
obj* x_20; obj* x_21; 
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_15);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_17, 0);
lean::inc(x_22);
lean::dec(x_17);
x_25 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_25, 0, x_15);
lean::cnstr_set(x_25, 1, x_22);
return x_25;
}
}
}
}
}
obj* l_lean_parser_term_app_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_1);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_lean_parser_term_app;
x_10 = l_lean_parser_syntax_mk__node(x_9, x_8);
return x_10;
}
}
obj* _init_l_lean_parser_term_app_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_app_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_app_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_app_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_app_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_app_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_1 = l_lean_parser_tokens___rarg(x_0);
x_2 = lean::box(0);
x_3 = l_lean_parser_list_cons_tokens___rarg(x_1, x_2);
x_4 = l_lean_parser_term_lean_parser_has__tokens;
x_5 = l_lean_parser_list_cons_tokens___rarg(x_4, x_3);
x_6 = l_lean_parser_tokens___rarg(x_5);
return x_6;
}
}
obj* l_lean_parser_term_app_parser_lean_parser_has__view___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_7; obj* x_8; 
lean::dec(x_0);
x_7 = l_lean_parser_max__prec;
x_8 = l_lean_parser_term_parser(x_7, x_1, x_2, x_3, x_4, x_5);
return x_8;
}
}
obj* _init_l_lean_parser_term_app_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_app_parser_lean_parser_has__view___lambda__1), 6, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
x_5 = l_lean_parser_trailing__term__parser__m_monad;
x_6 = l_lean_parser_trailing__term__parser__m_monad__except;
x_7 = l_lean_parser_trailing__term__parser__m_lean_parser_monad__parsec;
x_8 = l_lean_parser_trailing__term__parser__m_alternative;
x_9 = l_lean_parser_term_app;
x_10 = l_lean_parser_term_app_has__view;
x_11 = l_lean_parser_combinators_node_view___rarg(x_5, x_6, x_7, x_8, x_9, x_4, x_10);
return x_11;
}
}
obj* _init_l_lean_parser_term_app_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_app_parser_lean_parser_has__view___lambda__1), 6, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
return x_4;
}
}
obj* l_lean_parser_term_app_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; 
x_6 = l_lean_parser_term_app;
x_7 = l_lean_parser_term_app_parser___closed__1;
x_8 = l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__3(x_6, x_7, x_0, x_1, x_2, x_3, x_4, x_5);
return x_8;
}
}
obj* l_list_foldl___main___at_lean_parser_term_mk__app___spec__1(obj* x_0, obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
return x_0;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_2 = lean::cnstr_get(x_1, 0);
x_4 = lean::cnstr_get(x_1, 1);
if (lean::is_exclusive(x_1)) {
 x_6 = x_1;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_1);
 x_6 = lean::box(0);
}
x_7 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_8 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_8 = x_6;
}
lean::cnstr_set(x_8, 0, x_2);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_0);
lean::cnstr_set(x_9, 1, x_8);
x_10 = l_lean_parser_term_app;
x_11 = l_lean_parser_syntax_mk__node(x_10, x_9);
x_0 = x_11;
x_1 = x_4;
goto _start;
}
}
}
obj* l_lean_parser_term_mk__app(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_list_foldl___main___at_lean_parser_term_mk__app___spec__1(x_0, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_arrow() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("arrow");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_arrow_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_1, 0, x_0);
lean::cnstr_set(x_1, 1, x_0);
lean::cnstr_set(x_1, 2, x_0);
return x_1;
}
}
obj* l_lean_parser_term_arrow_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_lean_parser_term_arrow_has__view_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
if (lean::obj_tag(x_6) == 0)
{
if (lean::obj_tag(x_6) == 0)
{
obj* x_9; 
x_9 = l_lean_parser_term_arrow_has__view_x_27___lambda__1___closed__1;
return x_9;
}
else
{
obj* x_10; obj* x_13; obj* x_14; 
x_10 = lean::cnstr_get(x_6, 0);
lean::inc(x_10);
lean::dec(x_6);
x_13 = lean::box(3);
x_14 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_13);
lean::cnstr_set(x_14, 2, x_10);
return x_14;
}
}
else
{
obj* x_15; obj* x_17; 
x_15 = lean::cnstr_get(x_6, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_6, 1);
lean::inc(x_17);
lean::dec(x_6);
if (lean::obj_tag(x_17) == 0)
{
obj* x_20; obj* x_21; 
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_15);
lean::cnstr_set(x_21, 2, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; obj* x_26; 
x_22 = lean::cnstr_get(x_17, 0);
lean::inc(x_22);
lean::dec(x_17);
x_25 = lean::box(3);
x_26 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_15);
lean::cnstr_set(x_26, 2, x_22);
return x_26;
}
}
}
else
{
obj* x_27; obj* x_29; 
x_27 = lean::cnstr_get(x_6, 0);
lean::inc(x_27);
x_29 = lean::cnstr_get(x_6, 1);
lean::inc(x_29);
lean::dec(x_6);
if (lean::obj_tag(x_29) == 0)
{
if (lean::obj_tag(x_29) == 0)
{
obj* x_32; obj* x_33; 
x_32 = lean::box(3);
x_33 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_33, 0, x_27);
lean::cnstr_set(x_33, 1, x_32);
lean::cnstr_set(x_33, 2, x_32);
return x_33;
}
else
{
obj* x_34; obj* x_37; obj* x_38; 
x_34 = lean::cnstr_get(x_29, 0);
lean::inc(x_34);
lean::dec(x_29);
x_37 = lean::box(3);
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_27);
lean::cnstr_set(x_38, 1, x_37);
lean::cnstr_set(x_38, 2, x_34);
return x_38;
}
}
else
{
obj* x_39; obj* x_41; 
x_39 = lean::cnstr_get(x_29, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_29, 1);
lean::inc(x_41);
lean::dec(x_29);
if (lean::obj_tag(x_41) == 0)
{
obj* x_44; obj* x_45; 
x_44 = lean::box(3);
x_45 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_45, 0, x_27);
lean::cnstr_set(x_45, 1, x_39);
lean::cnstr_set(x_45, 2, x_44);
return x_45;
}
else
{
obj* x_46; obj* x_49; 
x_46 = lean::cnstr_get(x_41, 0);
lean::inc(x_46);
lean::dec(x_41);
x_49 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_49, 0, x_27);
lean::cnstr_set(x_49, 1, x_39);
lean::cnstr_set(x_49, 2, x_46);
return x_49;
}
}
}
}
}
}
obj* l_lean_parser_term_arrow_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_5);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_3);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_1);
lean::cnstr_set(x_11, 1, x_10);
x_12 = l_lean_parser_term_arrow;
x_13 = l_lean_parser_syntax_mk__node(x_12, x_11);
return x_13;
}
}
obj* _init_l_lean_parser_term_arrow_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_arrow_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_arrow_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_arrow_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_arrow_has__view_x_27;
return x_0;
}
}
obj* l_lean_parser_unicode__symbol___at_lean_parser_term_arrow_parser_lean_parser_has__tokens___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
obj* x_12; obj* x_14; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
lean::dec(x_6);
lean::dec(x_4);
lean::dec(x_3);
x_12 = l_string_trim(x_0);
lean::inc(x_12);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_14, 0, x_12);
lean::inc(x_2);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol_lean_parser_has__tokens___spec__1), 6, 3);
lean::closure_set(x_16, 0, x_12);
lean::closure_set(x_16, 1, x_2);
lean::closure_set(x_16, 2, x_14);
x_17 = l_string_trim(x_1);
lean::inc(x_17);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_19, 0, x_17);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_symbol__core___at_lean_parser_unicode__symbol_lean_parser_has__tokens___spec__1), 6, 3);
lean::closure_set(x_20, 0, x_17);
lean::closure_set(x_20, 1, x_2);
lean::closure_set(x_20, 2, x_19);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_16);
lean::cnstr_set(x_23, 1, x_22);
x_24 = l_lean_parser_combinators_any__of___at_lean_parser_unicode__symbol_lean_parser_has__tokens___spec__2(x_23, x_5, x_7, x_8);
return x_24;
}
}
obj* _init_l_lean_parser_term_arrow_parser_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_0 = lean::mk_string("\xe2\x86\x92");
x_1 = lean::mk_string("->");
x_2 = lean::mk_nat_obj(25u);
x_3 = l_lean_parser_unicode__symbol_lean_parser_has__tokens___rarg(x_0, x_1, x_2);
x_4 = l_lean_parser_term_parser_lean_parser_has__tokens___closed__1;
x_5 = l_lean_parser_tokens___rarg(x_4);
x_6 = lean::box(0);
x_7 = l_lean_parser_list_cons_tokens___rarg(x_5, x_6);
x_8 = l_lean_parser_list_cons_tokens___rarg(x_3, x_7);
x_9 = l_lean_parser_term_lean_parser_has__tokens;
x_10 = l_lean_parser_list_cons_tokens___rarg(x_9, x_8);
x_11 = l_lean_parser_tokens___rarg(x_10);
return x_11;
}
}
obj* l_lean_parser_term_arrow_parser_lean_parser_has__view___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_7; obj* x_8; 
lean::dec(x_0);
x_7 = lean::mk_nat_obj(24u);
x_8 = l_lean_parser_term_parser(x_7, x_1, x_2, x_3, x_4, x_5);
return x_8;
}
}
obj* _init_l_lean_parser_term_arrow_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_0 = lean::mk_string("\xe2\x86\x92");
x_1 = lean::mk_string("->");
x_2 = lean::mk_nat_obj(25u);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_arrow_parser_lean_parser_has__tokens___spec__1), 9, 3);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
lean::closure_set(x_3, 2, x_2);
x_4 = lean::box(0);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_arrow_parser_lean_parser_has__view___lambda__1), 6, 0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_lean_parser_trailing__term__parser__m_monad;
x_11 = l_lean_parser_trailing__term__parser__m_monad__except;
x_12 = l_lean_parser_trailing__term__parser__m_lean_parser_monad__parsec;
x_13 = l_lean_parser_trailing__term__parser__m_alternative;
x_14 = l_lean_parser_term_arrow;
x_15 = l_lean_parser_term_arrow_has__view;
x_16 = l_lean_parser_combinators_node_view___rarg(x_10, x_11, x_12, x_13, x_14, x_9, x_15);
return x_16;
}
}
obj* _init_l_lean_parser_term_arrow_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::mk_string("\xe2\x86\x92");
x_1 = lean::mk_string("->");
x_2 = lean::mk_nat_obj(25u);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_unicode__symbol___at_lean_parser_term_arrow_parser_lean_parser_has__tokens___spec__1), 9, 3);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
lean::closure_set(x_3, 2, x_2);
x_4 = lean::box(0);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_arrow_parser_lean_parser_has__view___lambda__1), 6, 0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
return x_9;
}
}
obj* l_lean_parser_term_arrow_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; 
x_6 = l_lean_parser_term_arrow;
x_7 = l_lean_parser_term_arrow_parser___closed__1;
x_8 = l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__3(x_6, x_7, x_0, x_1, x_2, x_3, x_4, x_5);
return x_8;
}
}
obj* _init_l_lean_parser_term_projection__spec() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("projection_spec");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOT_AN_IDENT");
lean::inc(x_1);
x_3 = l_lean_parser_substring_of__string(x_1);
x_4 = lean_name_mk_string(x_0, x_1);
x_5 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_3);
lean::cnstr_set(x_5, 2, x_4);
lean::cnstr_set(x_5, 3, x_0);
lean::cnstr_set(x_5, 4, x_0);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__1;
return x_0;
}
}
obj* _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(3);
x_4 = lean::mk_nat_obj(0u);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; uint8 x_6; 
x_5 = lean::mk_nat_obj(0u);
x_6 = lean::nat_dec_eq(x_1, x_5);
lean::dec(x_1);
if (x_6 == 0)
{
obj* x_8; obj* x_9; obj* x_12; obj* x_13; 
x_8 = l_lean_parser_number_has__view;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_0);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
return x_13;
}
else
{
switch (lean::obj_tag(x_0)) {
case 1:
{
obj* x_14; obj* x_17; 
x_14 = lean::cnstr_get(x_0, 0);
lean::inc(x_14);
lean::dec(x_0);
x_17 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_17, 0, x_14);
return x_17;
}
case 3:
{
obj* x_18; 
x_18 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2;
return x_18;
}
default:
{
obj* x_20; 
lean::dec(x_0);
x_20 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2;
return x_20;
}
}
}
}
}
}
obj* _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("projection_spec");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_11; obj* x_14; uint8 x_15; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
lean::dec(x_6);
x_14 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__4;
x_15 = lean_name_dec_eq(x_9, x_14);
lean::dec(x_9);
if (x_15 == 0)
{
obj* x_18; 
lean::dec(x_11);
x_18 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
return x_18;
}
else
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_19; 
x_19 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
return x_19;
}
else
{
obj* x_20; obj* x_22; 
x_20 = lean::cnstr_get(x_11, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_11, 1);
lean::inc(x_22);
lean::dec(x_11);
if (lean::obj_tag(x_22) == 0)
{
obj* x_25; 
x_25 = l_lean_parser_syntax_as__node___main(x_20);
if (lean::obj_tag(x_25) == 0)
{
obj* x_26; 
x_26 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_32; 
x_27 = lean::cnstr_get(x_25, 0);
lean::inc(x_27);
lean::dec(x_25);
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_27, 1);
lean::inc(x_32);
lean::dec(x_27);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_36; 
lean::dec(x_32);
x_36 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
return x_36;
}
case 1:
{
obj* x_39; 
lean::dec(x_30);
lean::dec(x_32);
x_39 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
return x_39;
}
default:
{
obj* x_40; obj* x_42; obj* x_45; uint8 x_46; 
x_40 = lean::cnstr_get(x_30, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_30, 1);
lean::inc(x_42);
lean::dec(x_30);
x_45 = lean::box(0);
x_46 = lean_name_dec_eq(x_40, x_45);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_50; 
lean::dec(x_42);
lean::dec(x_32);
x_50 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
return x_50;
}
else
{
if (lean::obj_tag(x_32) == 0)
{
obj* x_52; 
lean::dec(x_42);
x_52 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
return x_52;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_32, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_32, 1);
lean::inc(x_55);
lean::dec(x_32);
if (lean::obj_tag(x_55) == 0)
{
x_1 = x_53;
x_2 = x_42;
goto lbl_3;
}
else
{
obj* x_61; 
lean::dec(x_42);
lean::dec(x_53);
lean::dec(x_55);
x_61 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
return x_61;
}
}
}
}
}
}
}
else
{
obj* x_64; 
lean::dec(x_20);
lean::dec(x_22);
x_64 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3;
return x_64;
}
}
}
}
lbl_3:
{
obj* x_65; uint8 x_66; 
x_65 = lean::mk_nat_obj(0u);
x_66 = lean::nat_dec_eq(x_2, x_65);
lean::dec(x_2);
if (x_66 == 0)
{
obj* x_68; obj* x_69; obj* x_72; obj* x_73; 
x_68 = l_lean_parser_number_has__view;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_1);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
else
{
switch (lean::obj_tag(x_1)) {
case 1:
{
obj* x_74; obj* x_77; 
x_74 = lean::cnstr_get(x_1, 0);
lean::inc(x_74);
lean::dec(x_1);
x_77 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_77, 0, x_74);
return x_77;
}
case 3:
{
obj* x_78; 
x_78 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2;
return x_78;
}
default:
{
obj* x_80; 
lean::dec(x_1);
x_80 = l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2;
return x_80;
}
}
}
}
}
}
obj* l_lean_parser_term_projection__spec_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_2);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_1);
x_7 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__1;
x_8 = l_lean_parser_syntax_mk__node(x_7, x_6);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_1);
x_10 = l_lean_parser_term_projection__spec;
x_11 = l_lean_parser_syntax_mk__node(x_10, x_9);
return x_11;
}
else
{
obj* x_12; obj* x_15; obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_12 = lean::cnstr_get(x_0, 0);
lean::inc(x_12);
lean::dec(x_0);
x_15 = l_lean_parser_number_has__view;
x_16 = lean::cnstr_get(x_15, 1);
lean::inc(x_16);
lean::dec(x_15);
x_19 = lean::apply_1(x_16, x_12);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_1);
x_21 = l_lean_parser_detail__ident__part_has__view_x_27___lambda__2___closed__2;
x_22 = l_lean_parser_syntax_mk__node(x_21, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_1);
x_24 = l_lean_parser_term_projection__spec;
x_25 = l_lean_parser_syntax_mk__node(x_24, x_23);
return x_25;
}
}
}
obj* _init_l_lean_parser_term_projection__spec_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_projection__spec_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_projection__spec_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_projection__spec_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_projection__spec_has__view_x_27;
return x_0;
}
}
obj* _init_l_lean_parser_term_projection() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("projection");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; 
x_0 = l_lean_parser_term_projection__spec_has__view;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_3 = lean::box(0);
x_4 = lean::box(3);
x_0 = x_3;
x_1 = x_4;
goto lbl_2;
lbl_2:
{
obj* x_5; obj* x_6; 
if (lean::obj_tag(x_0) == 0)
{
obj* x_8; 
x_8 = lean::box(3);
x_5 = x_0;
x_6 = x_8;
goto lbl_7;
}
else
{
obj* x_9; obj* x_11; 
x_9 = lean::cnstr_get(x_0, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 1);
lean::inc(x_11);
lean::dec(x_0);
x_5 = x_11;
x_6 = x_9;
goto lbl_7;
}
lbl_7:
{
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_14; obj* x_17; 
x_14 = lean::cnstr_get(x_6, 0);
lean::inc(x_14);
lean::dec(x_6);
x_17 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_17, 0, x_14);
if (lean::obj_tag(x_5) == 0)
{
obj* x_18; obj* x_19; 
x_18 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
x_19 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_19, 0, x_1);
lean::cnstr_set(x_19, 1, x_17);
lean::cnstr_set(x_19, 2, x_18);
return x_19;
}
else
{
obj* x_20; obj* x_23; obj* x_24; obj* x_27; obj* x_28; 
x_20 = lean::cnstr_get(x_5, 0);
lean::inc(x_20);
lean::dec(x_5);
x_23 = l_lean_parser_term_projection__spec_has__view;
x_24 = lean::cnstr_get(x_23, 0);
lean::inc(x_24);
lean::dec(x_23);
x_27 = lean::apply_1(x_24, x_20);
x_28 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_28, 0, x_1);
lean::cnstr_set(x_28, 1, x_17);
lean::cnstr_set(x_28, 2, x_27);
return x_28;
}
}
case 3:
{
obj* x_29; 
x_29 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
obj* x_30; obj* x_31; 
x_30 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
x_31 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_31, 0, x_1);
lean::cnstr_set(x_31, 1, x_29);
lean::cnstr_set(x_31, 2, x_30);
return x_31;
}
else
{
obj* x_32; obj* x_35; obj* x_36; obj* x_39; obj* x_40; 
x_32 = lean::cnstr_get(x_5, 0);
lean::inc(x_32);
lean::dec(x_5);
x_35 = l_lean_parser_term_projection__spec_has__view;
x_36 = lean::cnstr_get(x_35, 0);
lean::inc(x_36);
lean::dec(x_35);
x_39 = lean::apply_1(x_36, x_32);
x_40 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_40, 0, x_1);
lean::cnstr_set(x_40, 1, x_29);
lean::cnstr_set(x_40, 2, x_39);
return x_40;
}
}
default:
{
obj* x_42; 
lean::dec(x_6);
x_42 = lean::box(0);
if (lean::obj_tag(x_5) == 0)
{
obj* x_43; obj* x_44; 
x_43 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
x_44 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_44, 0, x_1);
lean::cnstr_set(x_44, 1, x_42);
lean::cnstr_set(x_44, 2, x_43);
return x_44;
}
else
{
obj* x_45; obj* x_48; obj* x_49; obj* x_52; obj* x_53; 
x_45 = lean::cnstr_get(x_5, 0);
lean::inc(x_45);
lean::dec(x_5);
x_48 = l_lean_parser_term_projection__spec_has__view;
x_49 = lean::cnstr_get(x_48, 0);
lean::inc(x_49);
lean::dec(x_48);
x_52 = lean::apply_1(x_49, x_45);
x_53 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_53, 0, x_1);
lean::cnstr_set(x_53, 1, x_42);
lean::cnstr_set(x_53, 2, x_52);
return x_53;
}
}
}
}
}
}
}
obj* l_lean_parser_term_projection_has__view_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_lean_parser_syntax_as__node___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; obj* x_19; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_21; 
x_21 = lean::box(3);
x_18 = x_1;
x_19 = x_21;
goto lbl_20;
}
else
{
obj* x_22; obj* x_24; 
x_22 = lean::cnstr_get(x_1, 0);
lean::inc(x_22);
x_24 = lean::cnstr_get(x_1, 1);
lean::inc(x_24);
lean::dec(x_1);
x_18 = x_24;
x_19 = x_22;
goto lbl_20;
}
lbl_20:
{
switch (lean::obj_tag(x_19)) {
case 0:
{
obj* x_27; obj* x_30; 
x_27 = lean::cnstr_get(x_19, 0);
lean::inc(x_27);
lean::dec(x_19);
x_30 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_30, 0, x_27);
if (lean::obj_tag(x_18) == 0)
{
obj* x_31; obj* x_32; 
x_31 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
x_32 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_32, 0, x_2);
lean::cnstr_set(x_32, 1, x_30);
lean::cnstr_set(x_32, 2, x_31);
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_37; obj* x_40; obj* x_41; 
x_33 = lean::cnstr_get(x_18, 0);
lean::inc(x_33);
lean::dec(x_18);
x_36 = l_lean_parser_term_projection__spec_has__view;
x_37 = lean::cnstr_get(x_36, 0);
lean::inc(x_37);
lean::dec(x_36);
x_40 = lean::apply_1(x_37, x_33);
x_41 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_41, 0, x_2);
lean::cnstr_set(x_41, 1, x_30);
lean::cnstr_set(x_41, 2, x_40);
return x_41;
}
}
case 3:
{
obj* x_42; 
x_42 = lean::box(0);
if (lean::obj_tag(x_18) == 0)
{
obj* x_43; obj* x_44; 
x_43 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
x_44 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_44, 0, x_2);
lean::cnstr_set(x_44, 1, x_42);
lean::cnstr_set(x_44, 2, x_43);
return x_44;
}
else
{
obj* x_45; obj* x_48; obj* x_49; obj* x_52; obj* x_53; 
x_45 = lean::cnstr_get(x_18, 0);
lean::inc(x_45);
lean::dec(x_18);
x_48 = l_lean_parser_term_projection__spec_has__view;
x_49 = lean::cnstr_get(x_48, 0);
lean::inc(x_49);
lean::dec(x_48);
x_52 = lean::apply_1(x_49, x_45);
x_53 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_53, 0, x_2);
lean::cnstr_set(x_53, 1, x_42);
lean::cnstr_set(x_53, 2, x_52);
return x_53;
}
}
default:
{
obj* x_55; 
lean::dec(x_19);
x_55 = lean::box(0);
if (lean::obj_tag(x_18) == 0)
{
obj* x_56; obj* x_57; 
x_56 = l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1;
x_57 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_57, 0, x_2);
lean::cnstr_set(x_57, 1, x_55);
lean::cnstr_set(x_57, 2, x_56);
return x_57;
}
else
{
obj* x_58; obj* x_61; obj* x_62; obj* x_65; obj* x_66; 
x_58 = lean::cnstr_get(x_18, 0);
lean::inc(x_58);
lean::dec(x_18);
x_61 = l_lean_parser_term_projection__spec_has__view;
x_62 = lean::cnstr_get(x_61, 0);
lean::inc(x_62);
lean::dec(x_61);
x_65 = lean::apply_1(x_62, x_58);
x_66 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_66, 0, x_2);
lean::cnstr_set(x_66, 1, x_55);
lean::cnstr_set(x_66, 2, x_65);
return x_66;
}
}
}
}
}
}
}
obj* l_lean_parser_term_projection_has__view_x_27___lambda__2(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_lean_parser_raw_view___rarg___lambda__3___closed__1;
x_9 = l_option_map___rarg(x_8, x_3);
x_10 = lean::box(3);
x_11 = l_option_get__or__else___main___rarg(x_9, x_10);
x_12 = l_lean_parser_term_projection__spec_has__view;
x_13 = lean::cnstr_get(x_12, 1);
lean::inc(x_13);
lean::dec(x_12);
x_16 = lean::apply_1(x_13, x_5);
x_17 = lean::box(0);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_11);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_1);
lean::cnstr_set(x_20, 1, x_19);
x_21 = l_lean_parser_term_projection;
x_22 = l_lean_parser_syntax_mk__node(x_21, x_20);
return x_22;
}
}
obj* _init_l_lean_parser_term_projection_has__view_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_projection_has__view_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_projection_has__view_x_27___lambda__2), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_lean_parser_term_projection_has__view() {
_start:
{
obj* x_0; 
x_0 = l_lean_parser_term_projection_has__view_x_27;
return x_0;
}
}
obj* l_lean_parser_monad__parsec_str__core___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
uint8 x_13; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
lean::inc(x_0);
x_13 = l_string_is__empty(x_0);
if (x_13 == 0)
{
obj* x_14; obj* x_16; obj* x_18; 
x_14 = lean::string_length(x_0);
lean::inc(x_0);
x_16 = lean::string_mk_iterator(x_0);
lean::inc(x_6);
x_18 = l___private_init_lean_parser_parsec_1__str__aux___main(x_14, x_16, x_6);
if (lean::obj_tag(x_18) == 0)
{
obj* x_20; obj* x_21; obj* x_22; uint8 x_23; obj* x_24; obj* x_25; obj* x_26; 
lean::dec(x_0);
x_20 = lean::box(0);
x_21 = l_string_join___closed__1;
x_22 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_22, 0, x_6);
lean::cnstr_set(x_22, 1, x_21);
lean::cnstr_set(x_22, 2, x_1);
lean::cnstr_set(x_22, 3, x_20);
x_23 = 0;
x_24 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_24, 0, x_22);
lean::cnstr_set_scalar(x_24, sizeof(void*)*1, x_23);
x_25 = x_24;
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_7);
return x_26;
}
else
{
obj* x_29; obj* x_32; obj* x_33; obj* x_34; 
lean::dec(x_1);
lean::dec(x_6);
x_29 = lean::cnstr_get(x_18, 0);
lean::inc(x_29);
lean::dec(x_18);
x_32 = lean::box(0);
x_33 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_33, 0, x_0);
lean::cnstr_set(x_33, 1, x_29);
lean::cnstr_set(x_33, 2, x_32);
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_7);
return x_34;
}
}
else
{
obj* x_37; obj* x_38; obj* x_39; obj* x_40; 
lean::dec(x_1);
lean::dec(x_0);
x_37 = l_string_join___closed__1;
x_38 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_39 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_39, 0, x_37);
lean::cnstr_set(x_39, 1, x_6);
lean::cnstr_set(x_39, 2, x_38);
x_40 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_7);
return x_40;
}
}
}
obj* l_lean_parser_ident_parser___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__2___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_7; obj* x_8; obj* x_10; obj* x_12; 
lean::dec(x_1);
lean::inc(x_2);
lean::inc(x_0);
x_7 = l_lean_parser_token(x_0, x_2, x_3);
x_8 = lean::cnstr_get(x_7, 0);
x_10 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_set(x_7, 0, lean::box(0));
 lean::cnstr_set(x_7, 1, lean::box(0));
 x_12 = x_7;
} else {
 lean::inc(x_8);
 lean::inc(x_10);
 lean::dec(x_7);
 x_12 = lean::box(0);
}
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; obj* x_15; obj* x_17; obj* x_19; obj* x_20; 
x_13 = lean::cnstr_get(x_8, 0);
x_15 = lean::cnstr_get(x_8, 1);
x_17 = lean::cnstr_get(x_8, 2);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_set(x_8, 0, lean::box(0));
 lean::cnstr_set(x_8, 1, lean::box(0));
 lean::cnstr_set(x_8, 2, lean::box(0));
 x_19 = x_8;
} else {
 lean::inc(x_13);
 lean::inc(x_15);
 lean::inc(x_17);
 lean::dec(x_8);
 x_19 = lean::box(0);
}
switch (lean::obj_tag(x_13)) {
case 1:
{
obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
lean::dec(x_12);
lean::dec(x_0);
lean::dec(x_2);
x_25 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_19)) {
 x_26 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_26 = x_19;
}
lean::cnstr_set(x_26, 0, x_13);
lean::cnstr_set(x_26, 1, x_15);
lean::cnstr_set(x_26, 2, x_25);
x_27 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_26);
x_28 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_27);
x_29 = l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4___rarg___closed__1;
x_30 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_28, x_29);
x_31 = l_lean_parser_parsec__t_try__mk__res___rarg(x_30);
x_32 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_10);
return x_32;
}
case 3:
{
obj* x_34; 
lean::dec(x_19);
x_34 = lean::box(0);
x_20 = x_34;
goto lbl_21;
}
default:
{
obj* x_37; 
lean::dec(x_13);
lean::dec(x_19);
x_37 = lean::box(0);
x_20 = x_37;
goto lbl_21;
}
}
lbl_21:
{
obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_46; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; 
lean::dec(x_20);
x_39 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_39, 0, x_2);
x_40 = lean::box(0);
x_41 = l_string_join___closed__1;
x_42 = l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4___rarg___closed__1;
x_43 = l_lean_parser_monad__parsec_error___at___private_init_lean_parser_token_1__finish__comment__block__aux___main___spec__1___rarg(x_41, x_42, x_39, x_40, x_0, x_15, x_10);
x_44 = lean::cnstr_get(x_43, 0);
lean::inc(x_44);
x_46 = lean::cnstr_get(x_43, 1);
lean::inc(x_46);
lean::dec(x_43);
x_49 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_44);
x_50 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_51 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_50, x_49);
x_52 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_51, x_42);
x_53 = l_lean_parser_parsec__t_try__mk__res___rarg(x_52);
if (lean::is_scalar(x_12)) {
 x_54 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_54 = x_12;
}
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_46);
return x_54;
}
}
else
{
obj* x_57; uint8 x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; 
lean::dec(x_0);
lean::dec(x_2);
x_57 = lean::cnstr_get(x_8, 0);
x_59 = lean::cnstr_get_scalar<uint8>(x_8, sizeof(void*)*1);
if (lean::is_exclusive(x_8)) {
 x_60 = x_8;
} else {
 lean::inc(x_57);
 lean::dec(x_8);
 x_60 = lean::box(0);
}
if (lean::is_scalar(x_60)) {
 x_61 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_61 = x_60;
}
lean::cnstr_set(x_61, 0, x_57);
lean::cnstr_set_scalar(x_61, sizeof(void*)*1, x_59);
x_62 = x_61;
x_63 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_64 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_63, x_62);
x_65 = l_lean_parser_ident_parser___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__4___rarg___closed__1;
x_66 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_64, x_65);
x_67 = l_lean_parser_parsec__t_try__mk__res___rarg(x_66);
if (lean::is_scalar(x_12)) {
 x_68 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_68 = x_12;
}
lean::cnstr_set(x_68, 0, x_67);
lean::cnstr_set(x_68, 1, x_10);
return x_68;
}
}
}
obj* l_lean_parser_ident_parser___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__2(obj* x_0, obj* x_1) {
_start:
{
obj* x_4; 
lean::dec(x_1);
lean::dec(x_0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__2___rarg), 4, 0);
return x_4;
}
}
obj* l_lean_parser_number_parser___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__3___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_7; obj* x_8; obj* x_10; obj* x_12; 
lean::dec(x_1);
lean::inc(x_2);
lean::inc(x_0);
x_7 = l_lean_parser_token(x_0, x_2, x_3);
x_8 = lean::cnstr_get(x_7, 0);
x_10 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_set(x_7, 0, lean::box(0));
 lean::cnstr_set(x_7, 1, lean::box(0));
 x_12 = x_7;
} else {
 lean::inc(x_8);
 lean::inc(x_10);
 lean::dec(x_7);
 x_12 = lean::box(0);
}
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; obj* x_15; obj* x_17; obj* x_19; obj* x_21; 
x_13 = lean::cnstr_get(x_8, 0);
x_15 = lean::cnstr_get(x_8, 1);
x_17 = lean::cnstr_get(x_8, 2);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_set(x_8, 0, lean::box(0));
 lean::cnstr_set(x_8, 1, lean::box(0));
 lean::cnstr_set(x_8, 2, lean::box(0));
 x_19 = x_8;
} else {
 lean::inc(x_13);
 lean::inc(x_15);
 lean::inc(x_17);
 lean::dec(x_8);
 x_19 = lean::box(0);
}
lean::inc(x_13);
x_21 = l_lean_parser_try__view___at_lean_parser_number_parser___spec__1(x_13);
if (lean::obj_tag(x_21) == 0)
{
obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_31; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; 
lean::dec(x_13);
lean::dec(x_19);
x_24 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_24, 0, x_2);
x_25 = lean::box(0);
x_26 = l_string_join___closed__1;
x_27 = l_lean_parser_number_parser___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__1___rarg___closed__1;
x_28 = l_lean_parser_monad__parsec_error___at___private_init_lean_parser_token_1__finish__comment__block__aux___main___spec__1___rarg(x_26, x_27, x_24, x_25, x_0, x_15, x_10);
x_29 = lean::cnstr_get(x_28, 0);
lean::inc(x_29);
x_31 = lean::cnstr_get(x_28, 1);
lean::inc(x_31);
lean::dec(x_28);
x_34 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_35 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_34, x_29);
x_36 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_35);
x_37 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_34, x_36);
x_38 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_37, x_27);
x_39 = l_lean_parser_parsec__t_try__mk__res___rarg(x_38);
if (lean::is_scalar(x_12)) {
 x_40 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_40 = x_12;
}
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_31);
return x_40;
}
else
{
obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; 
lean::dec(x_0);
lean::dec(x_2);
lean::dec(x_21);
x_44 = l_lean_parser_finish__comment__block___closed__2;
if (lean::is_scalar(x_19)) {
 x_45 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_45 = x_19;
}
lean::cnstr_set(x_45, 0, x_13);
lean::cnstr_set(x_45, 1, x_15);
lean::cnstr_set(x_45, 2, x_44);
x_46 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_45);
x_47 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_48 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_47, x_46);
x_49 = l_lean_parser_number_parser___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__1___rarg___closed__1;
x_50 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_48, x_49);
x_51 = l_lean_parser_parsec__t_try__mk__res___rarg(x_50);
if (lean::is_scalar(x_12)) {
 x_52 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_52 = x_12;
}
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_10);
return x_52;
}
}
else
{
obj* x_55; uint8 x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; 
lean::dec(x_0);
lean::dec(x_2);
x_55 = lean::cnstr_get(x_8, 0);
x_57 = lean::cnstr_get_scalar<uint8>(x_8, sizeof(void*)*1);
if (lean::is_exclusive(x_8)) {
 x_58 = x_8;
} else {
 lean::inc(x_55);
 lean::dec(x_8);
 x_58 = lean::box(0);
}
if (lean::is_scalar(x_58)) {
 x_59 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_59 = x_58;
}
lean::cnstr_set(x_59, 0, x_55);
lean::cnstr_set_scalar(x_59, sizeof(void*)*1, x_57);
x_60 = x_59;
x_61 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_62 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_61, x_60);
x_63 = l_lean_parser_number_parser___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__1___rarg___closed__1;
x_64 = l_lean_parser_parsec__t_labels__mk__res___rarg(x_62, x_63);
x_65 = l_lean_parser_parsec__t_try__mk__res___rarg(x_64);
if (lean::is_scalar(x_12)) {
 x_66 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_66 = x_12;
}
lean::cnstr_set(x_66, 0, x_65);
lean::cnstr_set(x_66, 1, x_10);
return x_66;
}
}
}
obj* l_lean_parser_number_parser___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__3(obj* x_0, obj* x_1) {
_start:
{
obj* x_4; 
lean::dec(x_1);
lean::dec(x_0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_number_parser___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__3___rarg), 4, 0);
return x_4;
}
}
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__5___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9) {
_start:
{
obj* x_14; obj* x_15; uint8 x_16; obj* x_17; obj* x_18; obj* x_19; 
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
x_14 = l_option_get__or__else___main___rarg(x_2, x_8);
x_15 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_0);
lean::cnstr_set(x_15, 2, x_1);
lean::cnstr_set(x_15, 3, x_3);
x_16 = 0;
x_17 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set_scalar(x_17, sizeof(void*)*1, x_16);
x_18 = x_17;
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_9);
return x_19;
}
}
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__5(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__5___rarg), 10, 0);
return x_2;
}
}
obj* l_lean_parser_combinators_choice__aux___main___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__4(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
lean::dec(x_1);
x_9 = lean::box(0);
x_10 = l_lean_parser_combinators_choice__aux___main___rarg___closed__1;
x_11 = l_mjoin___rarg___closed__1;
x_12 = l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__5___rarg(x_10, x_11, x_9, x_9, x_2, x_3, x_4, x_5, x_6, x_7);
return x_12;
}
else
{
obj* x_13; obj* x_15; obj* x_17; obj* x_23; obj* x_24; obj* x_26; obj* x_28; obj* x_29; obj* x_30; 
x_13 = lean::cnstr_get(x_0, 0);
x_15 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_17 = x_0;
} else {
 lean::inc(x_13);
 lean::inc(x_15);
 lean::dec(x_0);
 x_17 = lean::box(0);
}
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
x_23 = lean::apply_6(x_13, x_2, x_3, x_4, x_5, x_6, x_7);
x_24 = lean::cnstr_get(x_23, 0);
x_26 = lean::cnstr_get(x_23, 1);
if (lean::is_exclusive(x_23)) {
 lean::cnstr_set(x_23, 0, lean::box(0));
 lean::cnstr_set(x_23, 1, lean::box(0));
 x_28 = x_23;
} else {
 lean::inc(x_24);
 lean::inc(x_26);
 lean::dec(x_23);
 x_28 = lean::box(0);
}
x_29 = lean::mk_nat_obj(1u);
x_30 = lean::nat_add(x_1, x_29);
if (lean::obj_tag(x_24) == 0)
{
obj* x_31; obj* x_33; obj* x_35; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
x_31 = lean::cnstr_get(x_24, 0);
x_33 = lean::cnstr_get(x_24, 1);
x_35 = lean::cnstr_get(x_24, 2);
if (lean::is_exclusive(x_24)) {
 x_37 = x_24;
} else {
 lean::inc(x_31);
 lean::inc(x_33);
 lean::inc(x_35);
 lean::dec(x_24);
 x_37 = lean::box(0);
}
x_38 = lean::box(0);
x_39 = lean_name_mk_numeral(x_38, x_1);
if (lean::is_scalar(x_17)) {
 x_40 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_40 = x_17;
}
lean::cnstr_set(x_40, 0, x_31);
lean::cnstr_set(x_40, 1, x_38);
x_41 = l_lean_parser_syntax_mk__node(x_39, x_40);
x_42 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_37)) {
 x_43 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_43 = x_37;
}
lean::cnstr_set(x_43, 0, x_41);
lean::cnstr_set(x_43, 1, x_33);
lean::cnstr_set(x_43, 2, x_42);
x_44 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_35, x_43);
if (lean::obj_tag(x_44) == 0)
{
obj* x_52; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_30);
lean::dec(x_15);
if (lean::is_scalar(x_28)) {
 x_52 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_52 = x_28;
}
lean::cnstr_set(x_52, 0, x_44);
lean::cnstr_set(x_52, 1, x_26);
return x_52;
}
else
{
obj* x_53; uint8 x_55; 
x_53 = lean::cnstr_get(x_44, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get_scalar<uint8>(x_44, sizeof(void*)*1);
if (x_55 == 0)
{
obj* x_57; obj* x_58; obj* x_60; obj* x_63; obj* x_64; 
lean::dec(x_44);
x_57 = l_lean_parser_combinators_choice__aux___main___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__4(x_15, x_30, x_2, x_3, x_4, x_5, x_6, x_26);
x_58 = lean::cnstr_get(x_57, 0);
lean::inc(x_58);
x_60 = lean::cnstr_get(x_57, 1);
lean::inc(x_60);
lean::dec(x_57);
x_63 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_53, x_58);
if (lean::is_scalar(x_28)) {
 x_64 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_64 = x_28;
}
lean::cnstr_set(x_64, 0, x_63);
lean::cnstr_set(x_64, 1, x_60);
return x_64;
}
else
{
obj* x_73; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_53);
lean::dec(x_30);
lean::dec(x_15);
if (lean::is_scalar(x_28)) {
 x_73 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_73 = x_28;
}
lean::cnstr_set(x_73, 0, x_44);
lean::cnstr_set(x_73, 1, x_26);
return x_73;
}
}
}
else
{
obj* x_76; uint8 x_78; obj* x_79; 
lean::dec(x_1);
lean::dec(x_17);
x_76 = lean::cnstr_get(x_24, 0);
x_78 = lean::cnstr_get_scalar<uint8>(x_24, sizeof(void*)*1);
if (lean::is_exclusive(x_24)) {
 lean::cnstr_set(x_24, 0, lean::box(0));
 x_79 = x_24;
} else {
 lean::inc(x_76);
 lean::dec(x_24);
 x_79 = lean::box(0);
}
if (x_78 == 0)
{
obj* x_81; obj* x_82; obj* x_84; obj* x_87; obj* x_88; 
lean::dec(x_79);
x_81 = l_lean_parser_combinators_choice__aux___main___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__4(x_15, x_30, x_2, x_3, x_4, x_5, x_6, x_26);
x_82 = lean::cnstr_get(x_81, 0);
lean::inc(x_82);
x_84 = lean::cnstr_get(x_81, 1);
lean::inc(x_84);
lean::dec(x_81);
x_87 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_76, x_82);
if (lean::is_scalar(x_28)) {
 x_88 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_88 = x_28;
}
lean::cnstr_set(x_88, 0, x_87);
lean::cnstr_set(x_88, 1, x_84);
return x_88;
}
else
{
obj* x_96; obj* x_97; obj* x_98; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_30);
lean::dec(x_15);
if (lean::is_scalar(x_79)) {
 x_96 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_96 = x_79;
}
lean::cnstr_set(x_96, 0, x_76);
lean::cnstr_set_scalar(x_96, sizeof(void*)*1, x_78);
x_97 = x_96;
if (lean::is_scalar(x_28)) {
 x_98 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_98 = x_28;
}
lean::cnstr_set(x_98, 0, x_97);
lean::cnstr_set(x_98, 1, x_26);
return x_98;
}
}
}
}
}
obj* l_lean_parser_term_projection_parser_lean_parser_has__view___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_14; 
x_8 = l_lean_name_to__string___closed__1;
x_9 = l_lean_parser_monad__parsec_str__core___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__1(x_8, x_0, x_2, x_3, x_4, x_5, x_6, x_7);
x_10 = lean::cnstr_get(x_9, 0);
x_12 = lean::cnstr_get(x_9, 1);
if (lean::is_exclusive(x_9)) {
 lean::cnstr_set(x_9, 0, lean::box(0));
 lean::cnstr_set(x_9, 1, lean::box(0));
 x_14 = x_9;
} else {
 lean::inc(x_10);
 lean::inc(x_12);
 lean::dec(x_9);
 x_14 = lean::box(0);
}
if (lean::obj_tag(x_10) == 0)
{
obj* x_15; obj* x_17; obj* x_19; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_15 = lean::cnstr_get(x_10, 1);
x_17 = lean::cnstr_get(x_10, 2);
if (lean::is_exclusive(x_10)) {
 lean::cnstr_release(x_10, 0);
 x_19 = x_10;
} else {
 lean::inc(x_15);
 lean::inc(x_17);
 lean::dec(x_10);
 x_19 = lean::box(0);
}
lean::inc(x_15);
x_21 = l_lean_parser_mk__raw__res(x_1, x_15);
x_22 = l_lean_parser_finish__comment__block___closed__2;
if (lean::is_scalar(x_19)) {
 x_23 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_23 = x_19;
}
lean::cnstr_set(x_23, 0, x_21);
lean::cnstr_set(x_23, 1, x_15);
lean::cnstr_set(x_23, 2, x_22);
x_24 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_23);
if (lean::is_scalar(x_14)) {
 x_25 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_25 = x_14;
}
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_12);
return x_25;
}
else
{
obj* x_27; uint8 x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
lean::dec(x_1);
x_27 = lean::cnstr_get(x_10, 0);
x_29 = lean::cnstr_get_scalar<uint8>(x_10, sizeof(void*)*1);
if (lean::is_exclusive(x_10)) {
 x_30 = x_10;
} else {
 lean::inc(x_27);
 lean::dec(x_10);
 x_30 = lean::box(0);
}
if (lean::is_scalar(x_30)) {
 x_31 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_31 = x_30;
}
lean::cnstr_set(x_31, 0, x_27);
lean::cnstr_set_scalar(x_31, sizeof(void*)*1, x_29);
x_32 = x_31;
if (lean::is_scalar(x_14)) {
 x_33 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_33 = x_14;
}
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_12);
return x_33;
}
}
}
obj* _init_l_lean_parser_term_projection_parser_lean_parser_has__view() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_0 = lean::mk_string(".");
x_1 = l_string_quote(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_with__trailing___rarg___lambda__1), 2, 0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__1___rarg), 4, 1);
lean::closure_set(x_4, 0, x_3);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__2___rarg), 5, 1);
lean::closure_set(x_5, 0, x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__3___rarg), 6, 1);
lean::closure_set(x_6, 0, x_5);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__2___rarg), 7, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_projection_parser_lean_parser_has__view___lambda__1), 8, 1);
lean::closure_set(x_8, 0, x_2);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__1___rarg), 8, 2);
lean::closure_set(x_9, 0, x_7);
lean::closure_set(x_9, 1, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_number_parser___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__3), 2, 0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__2), 2, 0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_12);
x_15 = lean::mk_nat_obj(0u);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__4), 8, 2);
lean::closure_set(x_16, 0, x_14);
lean::closure_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_10);
x_18 = l_lean_parser_term_projection__spec;
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__3), 8, 2);
lean::closure_set(x_19, 0, x_18);
lean::closure_set(x_19, 1, x_17);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_10);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_9);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_21);
x_24 = l_lean_parser_term_projection;
lean::inc(x_23);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__3), 8, 2);
lean::closure_set(x_26, 0, x_24);
lean::closure_set(x_26, 1, x_23);
x_27 = l_lean_parser_trailing__term__parser__m_monad;
x_28 = l_lean_parser_trailing__term__parser__m_monad__except;
x_29 = l_lean_parser_trailing__term__parser__m_lean_parser_monad__parsec;
x_30 = l_lean_parser_trailing__term__parser__m_alternative;
x_31 = l_lean_parser_term_projection_has__view;
x_32 = l_lean_parser_combinators_node_view___rarg(x_27, x_28, x_29, x_30, x_24, x_23, x_31);
x_33 = l_lean_parser_combinators_try_view___rarg(x_29, x_30, x_26, x_32);
return x_33;
}
}
obj* _init_l_lean_parser_term_projection_parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_0 = lean::mk_string(".");
x_1 = l_string_quote(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_dlist_singleton___rarg), 2, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_with__trailing___rarg___lambda__1), 2, 0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__1___rarg), 4, 1);
lean::closure_set(x_4, 0, x_3);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__2___rarg), 5, 1);
lean::closure_set(x_5, 0, x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_command_notation__spec_symbol__quote_parser_lean_parser_has__tokens___spec__3___rarg), 6, 1);
lean::closure_set(x_6, 0, x_5);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_lift___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__2___rarg), 7, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_projection_parser_lean_parser_has__view___lambda__1), 8, 1);
lean::closure_set(x_8, 0, x_2);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_bind___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__1___rarg), 8, 2);
lean::closure_set(x_9, 0, x_7);
lean::closure_set(x_9, 1, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_number_parser___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__3), 2, 0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_ident_parser___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__2), 2, 0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_12);
x_15 = lean::mk_nat_obj(0u);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_choice__aux___main___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__4), 8, 2);
lean::closure_set(x_16, 0, x_14);
lean::closure_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_10);
x_18 = l_lean_parser_term_projection__spec;
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__3), 8, 2);
lean::closure_set(x_19, 0, x_18);
lean::closure_set(x_19, 1, x_17);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_10);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_9);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_get__leading), 6, 0);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_21);
return x_23;
}
}
obj* l_lean_parser_term_projection_parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_13; obj* x_14; obj* x_15; 
x_6 = l_lean_parser_term_projection;
x_7 = l_lean_parser_term_projection_parser___closed__1;
x_8 = l_lean_parser_combinators_node___at_lean_parser_term_sort__app_parser_lean_parser_has__tokens___spec__3(x_6, x_7, x_0, x_1, x_2, x_3, x_4, x_5);
x_9 = lean::cnstr_get(x_8, 0);
x_11 = lean::cnstr_get(x_8, 1);
if (lean::is_exclusive(x_8)) {
 x_13 = x_8;
} else {
 lean::inc(x_9);
 lean::inc(x_11);
 lean::dec(x_8);
 x_13 = lean::box(0);
}
x_14 = l_lean_parser_parsec__t_try__mk__res___rarg(x_9);
if (lean::is_scalar(x_13)) {
 x_15 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_15 = x_13;
}
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_11);
return x_15;
}
}
obj* _init_l_lean_parser_term_projection_tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_lean_parser_max__prec;
x_1 = lean::mk_nat_obj(1u);
x_2 = lean::nat_add(x_0, x_1);
x_3 = lean::box(0);
x_4 = lean::mk_string(".");
x_5 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_5, 0, x_4);
lean::cnstr_set(x_5, 1, x_2);
lean::cnstr_set(x_5, 2, x_3);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_3);
return x_6;
}
}
obj* _init_l_lean_parser_term_builtin__trailing__parsers_lean_parser_has__tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; 
x_0 = lean::box(0);
x_1 = l_lean_parser_term_projection_tokens;
x_2 = l_lean_parser_token__map__cons_tokens___rarg(x_1, x_0);
x_3 = l_lean_parser_term_arrow_parser_lean_parser_has__tokens;
x_4 = l_lean_parser_token__map__cons_tokens___rarg(x_3, x_2);
x_5 = l_lean_parser_token__map__cons_tokens___rarg(x_3, x_4);
return x_5;
}
}
obj* _init_l_lean_parser_term_builtin__trailing__parsers() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_0 = lean::box(0);
x_1 = lean::mk_string("\xe2\x86\x92");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_arrow_parser), 6, 0);
lean::inc(x_3);
x_5 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_5, 0, x_2);
lean::cnstr_set(x_5, 1, x_3);
x_6 = lean::mk_string("->");
x_7 = lean_name_mk_string(x_0, x_6);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_3);
x_9 = lean::mk_string(".");
x_10 = lean_name_mk_string(x_0, x_9);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_projection_parser), 6, 0);
x_12 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_8);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_5);
lean::cnstr_set(x_15, 1, x_14);
x_16 = l_lean_parser_token__map_of__list___main___rarg(x_15);
return x_16;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__2___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__2(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__2___rarg), 2, 0);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__3___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__3(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__3___rarg), 2, 0);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__4___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__4(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__4___rarg), 2, 0);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__5___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__5(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_init_lean_parser_term_1__trailing___spec__5___rarg), 2, 0);
return x_2;
}
}
obj* l_lean_parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_11; obj* x_12; obj* x_14; obj* x_16; 
lean::dec(x_4);
lean::dec(x_2);
lean::dec(x_1);
lean::inc(x_3);
x_11 = l_lean_parser_monad__parsec_observing___at_lean_parser_peek__token___spec__2(x_3, x_5, x_6);
x_12 = lean::cnstr_get(x_11, 0);
x_14 = lean::cnstr_get(x_11, 1);
if (lean::is_exclusive(x_11)) {
 lean::cnstr_set(x_11, 0, lean::box(0));
 lean::cnstr_set(x_11, 1, lean::box(0));
 x_16 = x_11;
} else {
 lean::inc(x_12);
 lean::inc(x_14);
 lean::dec(x_11);
 x_16 = lean::box(0);
}
if (lean::obj_tag(x_12) == 0)
{
obj* x_17; obj* x_19; obj* x_21; 
x_17 = lean::cnstr_get(x_12, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_12, 1);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_12, 2);
lean::inc(x_21);
lean::dec(x_12);
if (lean::obj_tag(x_17) == 0)
{
obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_32; obj* x_35; obj* x_36; 
lean::dec(x_0);
lean::dec(x_17);
x_26 = lean::box(0);
x_27 = l_string_join___closed__1;
x_28 = l_mjoin___rarg___closed__1;
x_29 = l_lean_parser_monad__parsec_error___at___private_init_lean_parser_token_1__finish__comment__block__aux___main___spec__1___rarg(x_27, x_28, x_26, x_26, x_3, x_19, x_14);
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_29, 1);
lean::inc(x_32);
lean::dec(x_29);
x_35 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_30);
if (lean::is_scalar(x_16)) {
 x_36 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_36 = x_16;
}
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_32);
return x_36;
}
else
{
obj* x_37; 
x_37 = lean::cnstr_get(x_17, 0);
lean::inc(x_37);
lean::dec(x_17);
switch (lean::obj_tag(x_37)) {
case 0:
{
obj* x_40; obj* x_43; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_52; obj* x_55; obj* x_56; obj* x_57; obj* x_58; 
x_40 = lean::cnstr_get(x_37, 0);
lean::inc(x_40);
lean::dec(x_37);
x_43 = lean::cnstr_get(x_40, 1);
lean::inc(x_43);
lean::dec(x_40);
x_46 = lean::box(0);
x_47 = lean_name_mk_string(x_46, x_43);
x_48 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_47);
x_49 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_48, x_3, x_19, x_14);
x_50 = lean::cnstr_get(x_49, 0);
lean::inc(x_50);
x_52 = lean::cnstr_get(x_49, 1);
lean::inc(x_52);
lean::dec(x_49);
x_55 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_56 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_55, x_50);
x_57 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_56);
if (lean::is_scalar(x_16)) {
 x_58 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_58 = x_16;
}
lean::cnstr_set(x_58, 0, x_57);
lean::cnstr_set(x_58, 1, x_52);
return x_58;
}
case 1:
{
obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_65; obj* x_68; obj* x_69; obj* x_70; obj* x_71; 
lean::dec(x_37);
x_60 = l_lean_parser_indexed___rarg___lambda__1___closed__1;
x_61 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_60);
x_62 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_61, x_3, x_19, x_14);
x_63 = lean::cnstr_get(x_62, 0);
lean::inc(x_63);
x_65 = lean::cnstr_get(x_62, 1);
lean::inc(x_65);
lean::dec(x_62);
x_68 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_69 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_68, x_63);
x_70 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_69);
if (lean::is_scalar(x_16)) {
 x_71 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_71 = x_16;
}
lean::cnstr_set(x_71, 0, x_70);
lean::cnstr_set(x_71, 1, x_65);
return x_71;
}
case 2:
{
obj* x_72; obj* x_75; obj* x_78; obj* x_79; obj* x_80; obj* x_82; obj* x_85; obj* x_86; obj* x_87; obj* x_88; 
x_72 = lean::cnstr_get(x_37, 0);
lean::inc(x_72);
lean::dec(x_37);
x_75 = lean::cnstr_get(x_72, 0);
lean::inc(x_75);
lean::dec(x_72);
x_78 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_75);
x_79 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_78, x_3, x_19, x_14);
x_80 = lean::cnstr_get(x_79, 0);
lean::inc(x_80);
x_82 = lean::cnstr_get(x_79, 1);
lean::inc(x_82);
lean::dec(x_79);
x_85 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_86 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_85, x_80);
x_87 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_86);
if (lean::is_scalar(x_16)) {
 x_88 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_88 = x_16;
}
lean::cnstr_set(x_88, 0, x_87);
lean::cnstr_set(x_88, 1, x_82);
return x_88;
}
default:
{
obj* x_89; obj* x_90; obj* x_91; obj* x_93; obj* x_94; obj* x_96; 
x_89 = lean::box(0);
x_90 = l_string_join___closed__1;
x_91 = l_mjoin___rarg___closed__1;
lean::inc(x_3);
x_93 = l_lean_parser_monad__parsec_error___at___private_init_lean_parser_token_1__finish__comment__block__aux___main___spec__1___rarg(x_90, x_91, x_89, x_89, x_3, x_19, x_14);
x_94 = lean::cnstr_get(x_93, 0);
lean::inc(x_94);
x_96 = lean::cnstr_get(x_93, 1);
lean::inc(x_96);
lean::dec(x_93);
if (lean::obj_tag(x_94) == 0)
{
obj* x_99; obj* x_101; obj* x_103; obj* x_106; obj* x_107; obj* x_108; obj* x_110; obj* x_113; obj* x_114; obj* x_115; 
x_99 = lean::cnstr_get(x_94, 0);
lean::inc(x_99);
x_101 = lean::cnstr_get(x_94, 1);
lean::inc(x_101);
x_103 = lean::cnstr_get(x_94, 2);
lean::inc(x_103);
lean::dec(x_94);
x_106 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_99);
x_107 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_106, x_3, x_101, x_96);
x_108 = lean::cnstr_get(x_107, 0);
lean::inc(x_108);
x_110 = lean::cnstr_get(x_107, 1);
lean::inc(x_110);
lean::dec(x_107);
x_113 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_103, x_108);
x_114 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_113);
if (lean::is_scalar(x_16)) {
 x_115 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_115 = x_16;
}
lean::cnstr_set(x_115, 0, x_114);
lean::cnstr_set(x_115, 1, x_110);
return x_115;
}
else
{
obj* x_118; uint8 x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; obj* x_125; 
lean::dec(x_3);
lean::dec(x_0);
x_118 = lean::cnstr_get(x_94, 0);
x_120 = lean::cnstr_get_scalar<uint8>(x_94, sizeof(void*)*1);
if (lean::is_exclusive(x_94)) {
 x_121 = x_94;
} else {
 lean::inc(x_118);
 lean::dec(x_94);
 x_121 = lean::box(0);
}
if (lean::is_scalar(x_121)) {
 x_122 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_122 = x_121;
}
lean::cnstr_set(x_122, 0, x_118);
lean::cnstr_set_scalar(x_122, sizeof(void*)*1, x_120);
x_123 = x_122;
x_124 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_123);
if (lean::is_scalar(x_16)) {
 x_125 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_125 = x_16;
}
lean::cnstr_set(x_125, 0, x_124);
lean::cnstr_set(x_125, 1, x_96);
return x_125;
}
}
}
}
}
else
{
obj* x_128; uint8 x_130; obj* x_131; obj* x_132; obj* x_133; obj* x_134; 
lean::dec(x_3);
lean::dec(x_0);
x_128 = lean::cnstr_get(x_12, 0);
x_130 = lean::cnstr_get_scalar<uint8>(x_12, sizeof(void*)*1);
if (lean::is_exclusive(x_12)) {
 x_131 = x_12;
} else {
 lean::inc(x_128);
 lean::dec(x_12);
 x_131 = lean::box(0);
}
if (lean::is_scalar(x_131)) {
 x_132 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_132 = x_131;
}
lean::cnstr_set(x_132, 0, x_128);
lean::cnstr_set_scalar(x_132, sizeof(void*)*1, x_130);
x_133 = x_132;
if (lean::is_scalar(x_16)) {
 x_134 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_134 = x_16;
}
lean::cnstr_set(x_134, 0, x_133);
lean::cnstr_set(x_134, 1, x_14);
return x_134;
}
}
}
obj* l_lean_parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___rarg), 7, 0);
return x_2;
}
}
obj* l_lean_parser_parsec__t_lookahead___at___private_init_lean_parser_term_1__trailing___spec__8(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_16; obj* x_17; obj* x_19; 
lean::inc(x_7);
x_16 = lean::apply_6(x_1, x_3, x_4, x_5, x_6, x_7, x_8);
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_16, 1);
lean::inc(x_19);
lean::dec(x_16);
if (lean::obj_tag(x_17) == 0)
{
obj* x_22; obj* x_24; obj* x_26; obj* x_28; obj* x_29; 
x_22 = lean::cnstr_get(x_17, 0);
x_24 = lean::cnstr_get(x_17, 1);
x_26 = lean::cnstr_get(x_17, 2);
if (lean::is_exclusive(x_17)) {
 lean::cnstr_set(x_17, 0, lean::box(0));
 lean::cnstr_set(x_17, 1, lean::box(0));
 lean::cnstr_set(x_17, 2, lean::box(0));
 x_28 = x_17;
} else {
 lean::inc(x_22);
 lean::inc(x_24);
 lean::inc(x_26);
 lean::dec(x_17);
 x_28 = lean::box(0);
}
if (lean::obj_tag(x_2) == 0)
{
obj* x_31; obj* x_33; obj* x_35; 
x_31 = lean::cnstr_get(x_2, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_2, 1);
lean::inc(x_33);
x_35 = lean::cnstr_get(x_2, 2);
lean::inc(x_35);
if (lean::obj_tag(x_35) == 0)
{
obj* x_38; obj* x_39; uint8 x_41; 
lean::dec(x_28);
x_38 = lean::string_iterator_offset(x_24);
x_39 = lean::string_iterator_offset(x_33);
lean::dec(x_33);
x_41 = lean::nat_dec_lt(x_38, x_39);
if (x_41 == 0)
{
uint8 x_42; 
x_42 = lean::nat_dec_lt(x_39, x_38);
lean::dec(x_38);
lean::dec(x_39);
if (x_42 == 0)
{
obj* x_45; obj* x_47; obj* x_48; obj* x_49; obj* x_50; 
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_22);
lean::cnstr_set(x_45, 1, x_31);
lean::inc(x_24);
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_45);
lean::cnstr_set(x_47, 1, x_24);
lean::cnstr_set(x_47, 2, x_35);
x_48 = l_lean_parser_finish__comment__block___closed__2;
x_49 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_49, 0, x_47);
lean::cnstr_set(x_49, 1, x_24);
lean::cnstr_set(x_49, 2, x_48);
x_50 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_26, x_49);
x_12 = x_50;
x_13 = x_19;
goto lbl_14;
}
else
{
obj* x_52; obj* x_53; obj* x_55; obj* x_56; obj* x_57; obj* x_58; 
lean::dec(x_31);
x_52 = lean::box(0);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_22);
lean::cnstr_set(x_53, 1, x_52);
lean::inc(x_24);
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_53);
lean::cnstr_set(x_55, 1, x_24);
lean::cnstr_set(x_55, 2, x_35);
x_56 = l_lean_parser_finish__comment__block___closed__2;
x_57 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_57, 0, x_55);
lean::cnstr_set(x_57, 1, x_24);
lean::cnstr_set(x_57, 2, x_56);
x_58 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_26, x_57);
x_12 = x_58;
x_13 = x_19;
goto lbl_14;
}
}
else
{
obj* x_63; obj* x_65; obj* x_66; 
lean::dec(x_22);
lean::dec(x_31);
lean::dec(x_38);
lean::dec(x_39);
x_63 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_2);
x_65 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_65, 0, x_2);
lean::cnstr_set(x_65, 1, x_24);
lean::cnstr_set(x_65, 2, x_63);
x_66 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_26, x_65);
x_12 = x_66;
x_13 = x_19;
goto lbl_14;
}
}
else
{
obj* x_70; 
lean::dec(x_33);
lean::dec(x_35);
lean::dec(x_31);
x_70 = lean::box(0);
x_29 = x_70;
goto lbl_30;
}
}
else
{
obj* x_71; 
x_71 = lean::box(0);
x_29 = x_71;
goto lbl_30;
}
lbl_30:
{
obj* x_73; obj* x_74; obj* x_76; obj* x_77; obj* x_78; obj* x_79; 
lean::dec(x_29);
x_73 = lean::box(0);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_22);
lean::cnstr_set(x_74, 1, x_73);
lean::inc(x_24);
if (lean::is_scalar(x_28)) {
 x_76 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_76 = x_28;
}
lean::cnstr_set(x_76, 0, x_74);
lean::cnstr_set(x_76, 1, x_24);
lean::cnstr_set(x_76, 2, x_73);
x_77 = l_lean_parser_finish__comment__block___closed__2;
x_78 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_78, 0, x_76);
lean::cnstr_set(x_78, 1, x_24);
lean::cnstr_set(x_78, 2, x_77);
x_79 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_26, x_78);
x_12 = x_79;
x_13 = x_19;
goto lbl_14;
}
}
else
{
obj* x_80; uint8 x_82; obj* x_83; obj* x_84; obj* x_85; 
x_80 = lean::cnstr_get(x_17, 0);
x_82 = lean::cnstr_get_scalar<uint8>(x_17, sizeof(void*)*1);
if (lean::is_exclusive(x_17)) {
 x_83 = x_17;
} else {
 lean::inc(x_80);
 lean::dec(x_17);
 x_83 = lean::box(0);
}
if (lean::is_scalar(x_83)) {
 x_84 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_84 = x_83;
}
lean::cnstr_set(x_84, 0, x_80);
lean::cnstr_set_scalar(x_84, sizeof(void*)*1, x_82);
x_85 = x_84;
x_12 = x_85;
x_13 = x_19;
goto lbl_14;
}
lbl_11:
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_86; obj* x_88; obj* x_89; obj* x_90; obj* x_91; 
x_86 = lean::cnstr_get(x_9, 0);
if (lean::is_exclusive(x_9)) {
 lean::cnstr_release(x_9, 1);
 lean::cnstr_release(x_9, 2);
 x_88 = x_9;
} else {
 lean::inc(x_86);
 lean::dec(x_9);
 x_88 = lean::box(0);
}
x_89 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_88)) {
 x_90 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_90 = x_88;
}
lean::cnstr_set(x_90, 0, x_86);
lean::cnstr_set(x_90, 1, x_7);
lean::cnstr_set(x_90, 2, x_89);
x_91 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_91, 0, x_90);
lean::cnstr_set(x_91, 1, x_10);
return x_91;
}
else
{
obj* x_93; 
lean::dec(x_7);
x_93 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_93, 0, x_9);
lean::cnstr_set(x_93, 1, x_10);
return x_93;
}
}
lbl_14:
{
if (lean::obj_tag(x_12) == 0)
{
lean::dec(x_0);
lean::dec(x_2);
x_9 = x_12;
x_10 = x_13;
goto lbl_11;
}
else
{
obj* x_96; obj* x_98; obj* x_99; 
x_96 = lean::cnstr_get(x_12, 0);
if (lean::is_exclusive(x_12)) {
 lean::cnstr_set(x_12, 0, lean::box(0));
 x_98 = x_12;
} else {
 lean::inc(x_96);
 lean::dec(x_12);
 x_98 = lean::box(0);
}
x_99 = lean::cnstr_get(x_96, 0);
lean::inc(x_99);
if (lean::obj_tag(x_2) == 0)
{
obj* x_104; obj* x_105; 
lean::dec(x_0);
lean::dec(x_96);
lean::dec(x_98);
x_104 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_105 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_105, 0, x_2);
lean::cnstr_set(x_105, 1, x_99);
lean::cnstr_set(x_105, 2, x_104);
x_9 = x_105;
x_10 = x_13;
goto lbl_11;
}
else
{
obj* x_106; obj* x_108; obj* x_109; obj* x_111; uint8 x_113; 
x_106 = lean::cnstr_get(x_2, 0);
lean::inc(x_106);
x_108 = lean::string_iterator_offset(x_99);
x_109 = lean::cnstr_get(x_106, 0);
lean::inc(x_109);
x_111 = lean::string_iterator_offset(x_109);
lean::dec(x_109);
x_113 = lean::nat_dec_lt(x_108, x_111);
if (x_113 == 0)
{
uint8 x_115; 
lean::dec(x_2);
x_115 = lean::nat_dec_lt(x_111, x_108);
lean::dec(x_111);
if (x_115 == 0)
{
obj* x_117; obj* x_118; uint8 x_120; 
x_117 = l_lean_parser_parsec__t_merge___rarg(x_96, x_106);
x_118 = lean::string_iterator_offset(x_0);
lean::dec(x_0);
x_120 = lean::nat_dec_lt(x_118, x_108);
lean::dec(x_108);
lean::dec(x_118);
if (x_120 == 0)
{
uint8 x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; 
x_123 = 0;
if (lean::is_scalar(x_98)) {
 x_124 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_124 = x_98;
}
lean::cnstr_set(x_124, 0, x_117);
lean::cnstr_set_scalar(x_124, sizeof(void*)*1, x_123);
x_125 = x_124;
x_126 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_127 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_127, 0, x_125);
lean::cnstr_set(x_127, 1, x_99);
lean::cnstr_set(x_127, 2, x_126);
x_9 = x_127;
x_10 = x_13;
goto lbl_11;
}
else
{
uint8 x_128; obj* x_129; obj* x_130; obj* x_131; obj* x_132; 
x_128 = 1;
if (lean::is_scalar(x_98)) {
 x_129 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_129 = x_98;
}
lean::cnstr_set(x_129, 0, x_117);
lean::cnstr_set_scalar(x_129, sizeof(void*)*1, x_128);
x_130 = x_129;
x_131 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_132 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_132, 0, x_130);
lean::cnstr_set(x_132, 1, x_99);
lean::cnstr_set(x_132, 2, x_131);
x_9 = x_132;
x_10 = x_13;
goto lbl_11;
}
}
else
{
uint8 x_136; obj* x_137; obj* x_138; obj* x_139; obj* x_140; 
lean::dec(x_0);
lean::dec(x_106);
lean::dec(x_108);
x_136 = 1;
if (lean::is_scalar(x_98)) {
 x_137 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_137 = x_98;
}
lean::cnstr_set(x_137, 0, x_96);
lean::cnstr_set_scalar(x_137, sizeof(void*)*1, x_136);
x_138 = x_137;
x_139 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_140 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_140, 0, x_138);
lean::cnstr_set(x_140, 1, x_99);
lean::cnstr_set(x_140, 2, x_139);
x_9 = x_140;
x_10 = x_13;
goto lbl_11;
}
}
else
{
obj* x_147; obj* x_148; 
lean::dec(x_0);
lean::dec(x_106);
lean::dec(x_111);
lean::dec(x_96);
lean::dec(x_108);
lean::dec(x_98);
x_147 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_148 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_148, 0, x_2);
lean::cnstr_set(x_148, 1, x_99);
lean::cnstr_set(x_148, 2, x_147);
x_9 = x_148;
x_10 = x_13;
goto lbl_11;
}
}
}
}
}
}
obj* l_list_mfoldr___main___at___private_init_lean_parser_term_1__trailing___spec__9(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
x_12 = lean::box(0);
x_13 = l_list_mfoldr___main___at_lean_parser_monad__parsec_longest__match___spec__2___rarg___closed__1;
x_14 = l_mjoin___rarg___closed__1;
x_15 = l_lean_parser_monad__parsec_error___at_lean_parser_number_x_27___spec__12___rarg(x_13, x_14, x_12, x_12, x_0);
x_16 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_17 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set(x_17, 1, x_6);
lean::cnstr_set(x_17, 2, x_16);
x_18 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_7);
return x_18;
}
else
{
obj* x_19; obj* x_21; obj* x_29; obj* x_30; obj* x_32; obj* x_34; 
x_19 = lean::cnstr_get(x_1, 0);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_1, 1);
lean::inc(x_21);
lean::dec(x_1);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_0);
x_29 = l_list_mfoldr___main___at___private_init_lean_parser_term_1__trailing___spec__9(x_0, x_21, x_2, x_3, x_4, x_5, x_6, x_7);
x_30 = lean::cnstr_get(x_29, 0);
x_32 = lean::cnstr_get(x_29, 1);
if (lean::is_exclusive(x_29)) {
 lean::cnstr_set(x_29, 0, lean::box(0));
 lean::cnstr_set(x_29, 1, lean::box(0));
 x_34 = x_29;
} else {
 lean::inc(x_30);
 lean::inc(x_32);
 lean::dec(x_29);
 x_34 = lean::box(0);
}
if (lean::obj_tag(x_30) == 0)
{
obj* x_35; obj* x_37; obj* x_39; obj* x_42; obj* x_43; obj* x_45; obj* x_48; obj* x_49; 
x_35 = lean::cnstr_get(x_30, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_30, 1);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_30, 2);
lean::inc(x_39);
lean::dec(x_30);
x_42 = l_lean_parser_parsec__t_lookahead___at___private_init_lean_parser_term_1__trailing___spec__8(x_0, x_19, x_35, x_2, x_3, x_4, x_5, x_37, x_32);
x_43 = lean::cnstr_get(x_42, 0);
lean::inc(x_43);
x_45 = lean::cnstr_get(x_42, 1);
lean::inc(x_45);
lean::dec(x_42);
x_48 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_39, x_43);
if (lean::is_scalar(x_34)) {
 x_49 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_49 = x_34;
}
lean::cnstr_set(x_49, 0, x_48);
lean::cnstr_set(x_49, 1, x_45);
return x_49;
}
else
{
obj* x_56; uint8 x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_2);
lean::dec(x_19);
x_56 = lean::cnstr_get(x_30, 0);
x_58 = lean::cnstr_get_scalar<uint8>(x_30, sizeof(void*)*1);
if (lean::is_exclusive(x_30)) {
 x_59 = x_30;
} else {
 lean::inc(x_56);
 lean::dec(x_30);
 x_59 = lean::box(0);
}
if (lean::is_scalar(x_59)) {
 x_60 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_60 = x_59;
}
lean::cnstr_set(x_60, 0, x_56);
lean::cnstr_set_scalar(x_60, sizeof(void*)*1, x_58);
x_61 = x_60;
if (lean::is_scalar(x_34)) {
 x_62 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_62 = x_34;
}
lean::cnstr_set(x_62, 0, x_61);
lean::cnstr_set(x_62, 1, x_32);
return x_62;
}
}
}
}
obj* l_lean_parser_monad__parsec_longest__match___at___private_init_lean_parser_term_1__trailing___spec__7(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_8; obj* x_9; obj* x_11; obj* x_13; 
lean::inc(x_5);
x_8 = l_list_mfoldr___main___at___private_init_lean_parser_term_1__trailing___spec__9(x_5, x_0, x_1, x_2, x_3, x_4, x_5, x_6);
x_9 = lean::cnstr_get(x_8, 0);
x_11 = lean::cnstr_get(x_8, 1);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_set(x_8, 0, lean::box(0));
 lean::cnstr_set(x_8, 1, lean::box(0));
 x_13 = x_8;
} else {
 lean::inc(x_9);
 lean::inc(x_11);
 lean::dec(x_8);
 x_13 = lean::box(0);
}
if (lean::obj_tag(x_9) == 0)
{
obj* x_14; obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_14 = lean::cnstr_get(x_9, 0);
lean::inc(x_14);
x_16 = lean::cnstr_get(x_9, 2);
lean::inc(x_16);
lean::dec(x_9);
x_19 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_14);
x_20 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_21 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_20, x_19);
if (lean::is_scalar(x_13)) {
 x_22 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_22 = x_13;
}
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_11);
return x_22;
}
else
{
obj* x_23; uint8 x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_23 = lean::cnstr_get(x_9, 0);
x_25 = lean::cnstr_get_scalar<uint8>(x_9, sizeof(void*)*1);
if (lean::is_exclusive(x_9)) {
 x_26 = x_9;
} else {
 lean::inc(x_23);
 lean::dec(x_9);
 x_26 = lean::box(0);
}
if (lean::is_scalar(x_26)) {
 x_27 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_27 = x_26;
}
lean::cnstr_set(x_27, 0, x_23);
lean::cnstr_set_scalar(x_27, sizeof(void*)*1, x_25);
x_28 = x_27;
x_29 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_30 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_29, x_28);
if (lean::is_scalar(x_13)) {
 x_31 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_31 = x_13;
}
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_11);
return x_31;
}
}
}
obj* l_lean_parser_combinators_longest__match___at___private_init_lean_parser_term_1__trailing___spec__6(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; obj* x_8; obj* x_10; obj* x_12; 
x_7 = l_lean_parser_monad__parsec_longest__match___at___private_init_lean_parser_term_1__trailing___spec__7(x_0, x_1, x_2, x_3, x_4, x_5, x_6);
x_8 = lean::cnstr_get(x_7, 0);
x_10 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_set(x_7, 0, lean::box(0));
 lean::cnstr_set(x_7, 1, lean::box(0));
 x_12 = x_7;
} else {
 lean::inc(x_8);
 lean::inc(x_10);
 lean::dec(x_7);
 x_12 = lean::box(0);
}
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; obj* x_15; obj* x_17; obj* x_19; obj* x_20; 
x_13 = lean::cnstr_get(x_8, 0);
x_15 = lean::cnstr_get(x_8, 1);
x_17 = lean::cnstr_get(x_8, 2);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_set(x_8, 0, lean::box(0));
 lean::cnstr_set(x_8, 1, lean::box(0));
 lean::cnstr_set(x_8, 2, lean::box(0));
 x_19 = x_8;
} else {
 lean::inc(x_13);
 lean::inc(x_15);
 lean::inc(x_17);
 lean::dec(x_8);
 x_19 = lean::box(0);
}
if (lean::obj_tag(x_13) == 0)
{
obj* x_22; 
x_22 = lean::box(0);
x_20 = x_22;
goto lbl_21;
}
else
{
obj* x_23; obj* x_25; 
x_23 = lean::cnstr_get(x_13, 0);
lean::inc(x_23);
x_25 = lean::cnstr_get(x_13, 1);
lean::inc(x_25);
if (lean::obj_tag(x_25) == 0)
{
obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
lean::dec(x_12);
lean::dec(x_13);
lean::dec(x_19);
x_30 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_31 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_31, 0, x_23);
lean::cnstr_set(x_31, 1, x_15);
lean::cnstr_set(x_31, 2, x_30);
x_32 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_31);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_10);
return x_33;
}
else
{
obj* x_36; 
lean::dec(x_23);
lean::dec(x_25);
x_36 = lean::box(0);
x_20 = x_36;
goto lbl_21;
}
}
lbl_21:
{
obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; 
lean::dec(x_20);
x_38 = l_lean_parser_choice;
x_39 = l_lean_parser_syntax_mk__node(x_38, x_13);
x_40 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_19)) {
 x_41 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_41 = x_19;
}
lean::cnstr_set(x_41, 0, x_39);
lean::cnstr_set(x_41, 1, x_15);
lean::cnstr_set(x_41, 2, x_40);
x_42 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_41);
if (lean::is_scalar(x_12)) {
 x_43 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_43 = x_12;
}
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_10);
return x_43;
}
}
else
{
obj* x_44; uint8 x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; 
x_44 = lean::cnstr_get(x_8, 0);
x_46 = lean::cnstr_get_scalar<uint8>(x_8, sizeof(void*)*1);
if (lean::is_exclusive(x_8)) {
 x_47 = x_8;
} else {
 lean::inc(x_44);
 lean::dec(x_8);
 x_47 = lean::box(0);
}
if (lean::is_scalar(x_47)) {
 x_48 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_48 = x_47;
}
lean::cnstr_set(x_48, 0, x_44);
lean::cnstr_set_scalar(x_48, sizeof(void*)*1, x_46);
x_49 = x_48;
if (lean::is_scalar(x_12)) {
 x_50 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_50 = x_12;
}
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_10);
return x_50;
}
}
}
obj* l_reader__t_orelse___at___private_init_lean_parser_term_1__trailing___spec__11___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_13; obj* x_14; obj* x_16; obj* x_18; 
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
x_13 = lean::apply_6(x_0, x_2, x_3, x_4, x_5, x_6, x_7);
x_14 = lean::cnstr_get(x_13, 0);
x_16 = lean::cnstr_get(x_13, 1);
if (lean::is_exclusive(x_13)) {
 lean::cnstr_set(x_13, 0, lean::box(0));
 lean::cnstr_set(x_13, 1, lean::box(0));
 x_18 = x_13;
} else {
 lean::inc(x_14);
 lean::inc(x_16);
 lean::dec(x_13);
 x_18 = lean::box(0);
}
if (lean::obj_tag(x_14) == 0)
{
obj* x_25; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_2);
if (lean::is_scalar(x_18)) {
 x_25 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_25 = x_18;
}
lean::cnstr_set(x_25, 0, x_14);
lean::cnstr_set(x_25, 1, x_16);
return x_25;
}
else
{
obj* x_26; uint8 x_28; 
x_26 = lean::cnstr_get(x_14, 0);
lean::inc(x_26);
x_28 = lean::cnstr_get_scalar<uint8>(x_14, sizeof(void*)*1);
if (x_28 == 0)
{
obj* x_30; obj* x_31; obj* x_33; obj* x_36; obj* x_37; 
lean::dec(x_14);
x_30 = lean::apply_6(x_1, x_2, x_3, x_4, x_5, x_6, x_16);
x_31 = lean::cnstr_get(x_30, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_30, 1);
lean::inc(x_33);
lean::dec(x_30);
x_36 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_26, x_31);
if (lean::is_scalar(x_18)) {
 x_37 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_37 = x_18;
}
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_33);
return x_37;
}
else
{
obj* x_45; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_26);
if (lean::is_scalar(x_18)) {
 x_45 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_45 = x_18;
}
lean::cnstr_set(x_45, 0, x_14);
lean::cnstr_set(x_45, 1, x_16);
return x_45;
}
}
}
}
obj* l_reader__t_orelse___at___private_init_lean_parser_term_1__trailing___spec__11(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_orelse___at___private_init_lean_parser_term_1__trailing___spec__11___rarg), 8, 0);
return x_2;
}
}
obj* l_list_foldl___main___at___private_init_lean_parser_term_1__trailing___spec__12(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_8; 
x_8 = lean::apply_6(x_0, x_2, x_3, x_4, x_5, x_6, x_7);
return x_8;
}
else
{
obj* x_9; obj* x_11; obj* x_14; 
x_9 = lean::cnstr_get(x_1, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_1, 1);
lean::inc(x_11);
lean::dec(x_1);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_reader__t_orelse___at___private_init_lean_parser_term_1__trailing___spec__11___rarg), 8, 2);
lean::closure_set(x_14, 0, x_0);
lean::closure_set(x_14, 1, x_9);
x_0 = x_14;
x_1 = x_11;
goto _start;
}
}
}
obj* l_lean_parser_combinators_any__of___at___private_init_lean_parser_term_1__trailing___spec__10(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_7 = lean::box(0);
x_8 = l_lean_parser_combinators_any__of___rarg___closed__1;
x_9 = l_mjoin___rarg___closed__1;
x_10 = l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__5___rarg(x_8, x_9, x_7, x_7, x_1, x_2, x_3, x_4, x_5, x_6);
return x_10;
}
else
{
obj* x_11; obj* x_13; obj* x_16; 
x_11 = lean::cnstr_get(x_0, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_0, 1);
lean::inc(x_13);
lean::dec(x_0);
x_16 = l_list_foldl___main___at___private_init_lean_parser_term_1__trailing___spec__12(x_11, x_13, x_1, x_2, x_3, x_4, x_5, x_6);
return x_16;
}
}
}
obj* l_list_foldr___main___at___private_init_lean_parser_term_1__trailing___spec__13(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_7 = lean::box(0);
x_8 = l_string_join___closed__1;
x_9 = l_mjoin___rarg___closed__1;
x_10 = l_lean_parser_monad__parsec_error___at_lean_parser_term_projection_parser_lean_parser_has__view___spec__5___rarg(x_8, x_9, x_7, x_7, x_1, x_2, x_3, x_4, x_5, x_6);
return x_10;
}
else
{
obj* x_11; obj* x_13; obj* x_16; obj* x_17; 
x_11 = lean::cnstr_get(x_0, 0);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_0, 1);
lean::inc(x_13);
lean::dec(x_0);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_list_foldr___main___at___private_init_lean_parser_term_1__trailing___spec__13), 7, 1);
lean::closure_set(x_16, 0, x_13);
x_17 = l_reader__t_orelse___at___private_init_lean_parser_term_1__trailing___spec__11___rarg(x_11, x_16, x_1, x_2, x_3, x_4, x_5, x_6);
return x_17;
}
}
}
obj* _init_l___private_init_lean_parser_term_1__trailing___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_app_parser), 6, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_term_sort__app_parser), 6, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
return x_4;
}
}
obj* l___private_init_lean_parser_term_1__trailing(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; obj* x_9; obj* x_12; obj* x_13; obj* x_20; obj* x_21; obj* x_23; 
x_7 = lean::cnstr_get(x_0, 4);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 2);
lean::inc(x_9);
lean::dec(x_0);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_20 = l_lean_parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___rarg(x_7, x_1, x_2, x_3, x_4, x_5, x_6);
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_20, 1);
lean::inc(x_23);
lean::dec(x_20);
if (lean::obj_tag(x_21) == 0)
{
obj* x_26; obj* x_28; obj* x_30; obj* x_37; obj* x_38; obj* x_40; obj* x_43; 
x_26 = lean::cnstr_get(x_21, 0);
lean::inc(x_26);
x_28 = lean::cnstr_get(x_21, 1);
lean::inc(x_28);
x_30 = lean::cnstr_get(x_21, 2);
lean::inc(x_30);
lean::dec(x_21);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_37 = l_list_foldr___main___at___private_init_lean_parser_term_1__trailing___spec__13(x_26, x_1, x_2, x_3, x_4, x_28, x_23);
x_38 = lean::cnstr_get(x_37, 0);
lean::inc(x_38);
x_40 = lean::cnstr_get(x_37, 1);
lean::inc(x_40);
lean::dec(x_37);
x_43 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_30, x_38);
x_12 = x_43;
x_13 = x_40;
goto lbl_14;
}
else
{
obj* x_44; uint8 x_46; obj* x_47; obj* x_48; obj* x_49; 
x_44 = lean::cnstr_get(x_21, 0);
x_46 = lean::cnstr_get_scalar<uint8>(x_21, sizeof(void*)*1);
if (lean::is_exclusive(x_21)) {
 x_47 = x_21;
} else {
 lean::inc(x_44);
 lean::dec(x_21);
 x_47 = lean::box(0);
}
if (lean::is_scalar(x_47)) {
 x_48 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_48 = x_47;
}
lean::cnstr_set(x_48, 0, x_44);
lean::cnstr_set_scalar(x_48, sizeof(void*)*1, x_46);
x_49 = x_48;
x_12 = x_49;
x_13 = x_23;
goto lbl_14;
}
lbl_14:
{
if (lean::obj_tag(x_12) == 0)
{
obj* x_56; 
lean::dec(x_5);
lean::dec(x_9);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_56 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_56, 0, x_12);
lean::cnstr_set(x_56, 1, x_13);
return x_56;
}
else
{
obj* x_57; uint8 x_59; 
x_57 = lean::cnstr_get(x_12, 0);
lean::inc(x_57);
x_59 = lean::cnstr_get_scalar<uint8>(x_12, sizeof(void*)*1);
if (x_59 == 0)
{
obj* x_66; obj* x_67; obj* x_69; obj* x_71; 
lean::dec(x_12);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_66 = l_lean_parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___rarg(x_9, x_1, x_2, x_3, x_4, x_5, x_13);
x_67 = lean::cnstr_get(x_66, 0);
x_69 = lean::cnstr_get(x_66, 1);
if (lean::is_exclusive(x_66)) {
 lean::cnstr_set(x_66, 0, lean::box(0));
 lean::cnstr_set(x_66, 1, lean::box(0));
 x_71 = x_66;
} else {
 lean::inc(x_67);
 lean::inc(x_69);
 lean::dec(x_66);
 x_71 = lean::box(0);
}
if (lean::obj_tag(x_67) == 0)
{
obj* x_72; obj* x_74; obj* x_76; obj* x_83; obj* x_84; obj* x_86; obj* x_89; 
x_72 = lean::cnstr_get(x_67, 0);
lean::inc(x_72);
x_74 = lean::cnstr_get(x_67, 1);
lean::inc(x_74);
x_76 = lean::cnstr_get(x_67, 2);
lean::inc(x_76);
lean::dec(x_67);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_83 = l_lean_parser_combinators_longest__match___at___private_init_lean_parser_term_1__trailing___spec__6(x_72, x_1, x_2, x_3, x_4, x_74, x_69);
x_84 = lean::cnstr_get(x_83, 0);
lean::inc(x_84);
x_86 = lean::cnstr_get(x_83, 1);
lean::inc(x_86);
lean::dec(x_83);
x_89 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_76, x_84);
if (lean::obj_tag(x_89) == 0)
{
obj* x_95; obj* x_96; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_95 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_57, x_89);
if (lean::is_scalar(x_71)) {
 x_96 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_96 = x_71;
}
lean::cnstr_set(x_96, 0, x_95);
lean::cnstr_set(x_96, 1, x_86);
return x_96;
}
else
{
obj* x_97; uint8 x_99; 
x_97 = lean::cnstr_get(x_89, 0);
lean::inc(x_97);
x_99 = lean::cnstr_get_scalar<uint8>(x_89, sizeof(void*)*1);
if (x_99 == 0)
{
obj* x_101; obj* x_102; obj* x_103; obj* x_105; obj* x_108; obj* x_109; obj* x_110; 
lean::dec(x_89);
x_101 = l___private_init_lean_parser_term_1__trailing___closed__1;
x_102 = l_lean_parser_combinators_any__of___at___private_init_lean_parser_term_1__trailing___spec__10(x_101, x_1, x_2, x_3, x_4, x_5, x_86);
x_103 = lean::cnstr_get(x_102, 0);
lean::inc(x_103);
x_105 = lean::cnstr_get(x_102, 1);
lean::inc(x_105);
lean::dec(x_102);
x_108 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_97, x_103);
x_109 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_57, x_108);
if (lean::is_scalar(x_71)) {
 x_110 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_110 = x_71;
}
lean::cnstr_set(x_110, 0, x_109);
lean::cnstr_set(x_110, 1, x_105);
return x_110;
}
else
{
obj* x_117; obj* x_118; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_97);
x_117 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_57, x_89);
if (lean::is_scalar(x_71)) {
 x_118 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_118 = x_71;
}
lean::cnstr_set(x_118, 0, x_117);
lean::cnstr_set(x_118, 1, x_86);
return x_118;
}
}
}
else
{
obj* x_119; uint8 x_121; obj* x_122; 
x_119 = lean::cnstr_get(x_67, 0);
x_121 = lean::cnstr_get_scalar<uint8>(x_67, sizeof(void*)*1);
if (lean::is_exclusive(x_67)) {
 lean::cnstr_set(x_67, 0, lean::box(0));
 x_122 = x_67;
} else {
 lean::inc(x_119);
 lean::dec(x_67);
 x_122 = lean::box(0);
}
if (x_121 == 0)
{
obj* x_124; obj* x_125; obj* x_126; obj* x_128; obj* x_131; obj* x_132; obj* x_133; 
lean::dec(x_122);
x_124 = l___private_init_lean_parser_term_1__trailing___closed__1;
x_125 = l_lean_parser_combinators_any__of___at___private_init_lean_parser_term_1__trailing___spec__10(x_124, x_1, x_2, x_3, x_4, x_5, x_69);
x_126 = lean::cnstr_get(x_125, 0);
lean::inc(x_126);
x_128 = lean::cnstr_get(x_125, 1);
lean::inc(x_128);
lean::dec(x_125);
x_131 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_119, x_126);
x_132 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_57, x_131);
if (lean::is_scalar(x_71)) {
 x_133 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_133 = x_71;
}
lean::cnstr_set(x_133, 0, x_132);
lean::cnstr_set(x_133, 1, x_128);
return x_133;
}
else
{
obj* x_139; obj* x_140; obj* x_141; obj* x_142; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
if (lean::is_scalar(x_122)) {
 x_139 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_139 = x_122;
}
lean::cnstr_set(x_139, 0, x_119);
lean::cnstr_set_scalar(x_139, sizeof(void*)*1, x_121);
x_140 = x_139;
x_141 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_57, x_140);
if (lean::is_scalar(x_71)) {
 x_142 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_142 = x_71;
}
lean::cnstr_set(x_142, 0, x_141);
lean::cnstr_set(x_142, 1, x_69);
return x_142;
}
}
}
else
{
obj* x_150; 
lean::dec(x_5);
lean::dec(x_9);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_57);
x_150 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_150, 0, x_12);
lean::cnstr_set(x_150, 1, x_13);
return x_150;
}
}
}
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__2___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__2(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__2___rarg), 2, 0);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__3___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__3(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__3___rarg), 2, 0);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__4___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__4(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__4___rarg), 2, 0);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__5___rarg(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_1);
return x_2;
}
}
obj* l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__5(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_rbmap_find___main___at___private_init_lean_parser_term_2__leading___spec__5___rarg), 2, 0);
return x_2;
}
}
obj* l_lean_parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_9; obj* x_10; obj* x_12; obj* x_14; 
lean::dec(x_3);
lean::dec(x_1);
lean::inc(x_2);
x_9 = l_lean_parser_monad__parsec_observing___at_lean_parser_peek__token___spec__2(x_2, x_4, x_5);
x_10 = lean::cnstr_get(x_9, 0);
x_12 = lean::cnstr_get(x_9, 1);
if (lean::is_exclusive(x_9)) {
 lean::cnstr_set(x_9, 0, lean::box(0));
 lean::cnstr_set(x_9, 1, lean::box(0));
 x_14 = x_9;
} else {
 lean::inc(x_10);
 lean::inc(x_12);
 lean::dec(x_9);
 x_14 = lean::box(0);
}
if (lean::obj_tag(x_10) == 0)
{
obj* x_15; obj* x_17; obj* x_19; 
x_15 = lean::cnstr_get(x_10, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_10, 1);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_10, 2);
lean::inc(x_19);
lean::dec(x_10);
if (lean::obj_tag(x_15) == 0)
{
obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_30; obj* x_33; obj* x_34; 
lean::dec(x_15);
lean::dec(x_0);
x_24 = lean::box(0);
x_25 = l_string_join___closed__1;
x_26 = l_mjoin___rarg___closed__1;
x_27 = l_lean_parser_monad__parsec_error___at___private_init_lean_parser_token_1__finish__comment__block__aux___main___spec__1___rarg(x_25, x_26, x_24, x_24, x_2, x_17, x_12);
x_28 = lean::cnstr_get(x_27, 0);
lean::inc(x_28);
x_30 = lean::cnstr_get(x_27, 1);
lean::inc(x_30);
lean::dec(x_27);
x_33 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_28);
if (lean::is_scalar(x_14)) {
 x_34 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_34 = x_14;
}
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_30);
return x_34;
}
else
{
obj* x_35; 
x_35 = lean::cnstr_get(x_15, 0);
lean::inc(x_35);
lean::dec(x_15);
switch (lean::obj_tag(x_35)) {
case 0:
{
obj* x_38; obj* x_41; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_50; obj* x_53; obj* x_54; obj* x_55; obj* x_56; 
x_38 = lean::cnstr_get(x_35, 0);
lean::inc(x_38);
lean::dec(x_35);
x_41 = lean::cnstr_get(x_38, 1);
lean::inc(x_41);
lean::dec(x_38);
x_44 = lean::box(0);
x_45 = lean_name_mk_string(x_44, x_41);
x_46 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_45);
x_47 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_46, x_2, x_17, x_12);
x_48 = lean::cnstr_get(x_47, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_47, 1);
lean::inc(x_50);
lean::dec(x_47);
x_53 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_54 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_53, x_48);
x_55 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_54);
if (lean::is_scalar(x_14)) {
 x_56 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_56 = x_14;
}
lean::cnstr_set(x_56, 0, x_55);
lean::cnstr_set(x_56, 1, x_50);
return x_56;
}
case 1:
{
obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_63; obj* x_66; obj* x_67; obj* x_68; obj* x_69; 
lean::dec(x_35);
x_58 = l_lean_parser_indexed___rarg___lambda__1___closed__1;
x_59 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_58);
x_60 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_59, x_2, x_17, x_12);
x_61 = lean::cnstr_get(x_60, 0);
lean::inc(x_61);
x_63 = lean::cnstr_get(x_60, 1);
lean::inc(x_63);
lean::dec(x_60);
x_66 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_67 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_66, x_61);
x_68 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_67);
if (lean::is_scalar(x_14)) {
 x_69 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_69 = x_14;
}
lean::cnstr_set(x_69, 0, x_68);
lean::cnstr_set(x_69, 1, x_63);
return x_69;
}
case 2:
{
obj* x_70; obj* x_73; obj* x_76; obj* x_77; obj* x_78; obj* x_80; obj* x_83; obj* x_84; obj* x_85; obj* x_86; 
x_70 = lean::cnstr_get(x_35, 0);
lean::inc(x_70);
lean::dec(x_35);
x_73 = lean::cnstr_get(x_70, 0);
lean::inc(x_73);
lean::dec(x_70);
x_76 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_73);
x_77 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_76, x_2, x_17, x_12);
x_78 = lean::cnstr_get(x_77, 0);
lean::inc(x_78);
x_80 = lean::cnstr_get(x_77, 1);
lean::inc(x_80);
lean::dec(x_77);
x_83 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_84 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_83, x_78);
x_85 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_84);
if (lean::is_scalar(x_14)) {
 x_86 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_86 = x_14;
}
lean::cnstr_set(x_86, 0, x_85);
lean::cnstr_set(x_86, 1, x_80);
return x_86;
}
default:
{
obj* x_87; obj* x_88; obj* x_89; obj* x_91; obj* x_92; obj* x_94; 
x_87 = lean::box(0);
x_88 = l_string_join___closed__1;
x_89 = l_mjoin___rarg___closed__1;
lean::inc(x_2);
x_91 = l_lean_parser_monad__parsec_error___at___private_init_lean_parser_token_1__finish__comment__block__aux___main___spec__1___rarg(x_88, x_89, x_87, x_87, x_2, x_17, x_12);
x_92 = lean::cnstr_get(x_91, 0);
lean::inc(x_92);
x_94 = lean::cnstr_get(x_91, 1);
lean::inc(x_94);
lean::dec(x_91);
if (lean::obj_tag(x_92) == 0)
{
obj* x_97; obj* x_99; obj* x_101; obj* x_104; obj* x_105; obj* x_106; obj* x_108; obj* x_111; obj* x_112; obj* x_113; 
x_97 = lean::cnstr_get(x_92, 0);
lean::inc(x_97);
x_99 = lean::cnstr_get(x_92, 1);
lean::inc(x_99);
x_101 = lean::cnstr_get(x_92, 2);
lean::inc(x_101);
lean::dec(x_92);
x_104 = l_rbnode_find___main___at_lean_parser_token__map_insert___spec__2___rarg(x_0, x_97);
x_105 = l_option_to__monad___main___at_lean_parser_indexed___spec__2___rarg(x_104, x_2, x_99, x_94);
x_106 = lean::cnstr_get(x_105, 0);
lean::inc(x_106);
x_108 = lean::cnstr_get(x_105, 1);
lean::inc(x_108);
lean::dec(x_105);
x_111 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_101, x_106);
x_112 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_111);
if (lean::is_scalar(x_14)) {
 x_113 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_113 = x_14;
}
lean::cnstr_set(x_113, 0, x_112);
lean::cnstr_set(x_113, 1, x_108);
return x_113;
}
else
{
obj* x_116; uint8 x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_123; 
lean::dec(x_0);
lean::dec(x_2);
x_116 = lean::cnstr_get(x_92, 0);
x_118 = lean::cnstr_get_scalar<uint8>(x_92, sizeof(void*)*1);
if (lean::is_exclusive(x_92)) {
 x_119 = x_92;
} else {
 lean::inc(x_116);
 lean::dec(x_92);
 x_119 = lean::box(0);
}
if (lean::is_scalar(x_119)) {
 x_120 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_120 = x_119;
}
lean::cnstr_set(x_120, 0, x_116);
lean::cnstr_set_scalar(x_120, sizeof(void*)*1, x_118);
x_121 = x_120;
x_122 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_121);
if (lean::is_scalar(x_14)) {
 x_123 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_123 = x_14;
}
lean::cnstr_set(x_123, 0, x_122);
lean::cnstr_set(x_123, 1, x_94);
return x_123;
}
}
}
}
}
else
{
obj* x_126; uint8 x_128; obj* x_129; obj* x_130; obj* x_131; obj* x_132; 
lean::dec(x_0);
lean::dec(x_2);
x_126 = lean::cnstr_get(x_10, 0);
x_128 = lean::cnstr_get_scalar<uint8>(x_10, sizeof(void*)*1);
if (lean::is_exclusive(x_10)) {
 x_129 = x_10;
} else {
 lean::inc(x_126);
 lean::dec(x_10);
 x_129 = lean::box(0);
}
if (lean::is_scalar(x_129)) {
 x_130 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_130 = x_129;
}
lean::cnstr_set(x_130, 0, x_126);
lean::cnstr_set_scalar(x_130, sizeof(void*)*1, x_128);
x_131 = x_130;
if (lean::is_scalar(x_14)) {
 x_132 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_132 = x_14;
}
lean::cnstr_set(x_132, 0, x_131);
lean::cnstr_set(x_132, 1, x_12);
return x_132;
}
}
}
obj* l_lean_parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg), 6, 0);
return x_2;
}
}
obj* l_list_foldr___main___at___private_init_lean_parser_term_2__leading___spec__6(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_6 = lean::box(0);
x_7 = l_string_join___closed__1;
x_8 = l_mjoin___rarg___closed__1;
x_9 = l_lean_parser_monad__parsec_error___at_lean_parser_command_notation__spec_precedence__lit_parser_lean_parser_has__tokens___spec__4___rarg(x_7, x_8, x_6, x_6, x_1, x_2, x_3, x_4, x_5);
return x_9;
}
else
{
obj* x_10; obj* x_12; obj* x_15; obj* x_16; 
x_10 = lean::cnstr_get(x_0, 0);
lean::inc(x_10);
x_12 = lean::cnstr_get(x_0, 1);
lean::inc(x_12);
lean::dec(x_0);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_list_foldr___main___at___private_init_lean_parser_term_2__leading___spec__6), 6, 1);
lean::closure_set(x_15, 0, x_12);
x_16 = l_reader__t_orelse___at_lean_parser_command_notation__spec_fold__action_parser_lean_parser_has__tokens___spec__2___rarg(x_10, x_15, x_1, x_2, x_3, x_4, x_5);
return x_16;
}
}
}
obj* l_lean_parser_parsec__t_lookahead___at___private_init_lean_parser_term_2__leading___spec__9(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_15; obj* x_16; obj* x_18; 
lean::inc(x_6);
x_15 = lean::apply_5(x_1, x_3, x_4, x_5, x_6, x_7);
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_15, 1);
lean::inc(x_18);
lean::dec(x_15);
if (lean::obj_tag(x_16) == 0)
{
obj* x_21; obj* x_23; obj* x_25; obj* x_27; obj* x_28; 
x_21 = lean::cnstr_get(x_16, 0);
x_23 = lean::cnstr_get(x_16, 1);
x_25 = lean::cnstr_get(x_16, 2);
if (lean::is_exclusive(x_16)) {
 lean::cnstr_set(x_16, 0, lean::box(0));
 lean::cnstr_set(x_16, 1, lean::box(0));
 lean::cnstr_set(x_16, 2, lean::box(0));
 x_27 = x_16;
} else {
 lean::inc(x_21);
 lean::inc(x_23);
 lean::inc(x_25);
 lean::dec(x_16);
 x_27 = lean::box(0);
}
if (lean::obj_tag(x_2) == 0)
{
obj* x_30; obj* x_32; obj* x_34; 
x_30 = lean::cnstr_get(x_2, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_2, 1);
lean::inc(x_32);
x_34 = lean::cnstr_get(x_2, 2);
lean::inc(x_34);
if (lean::obj_tag(x_34) == 0)
{
obj* x_37; obj* x_38; uint8 x_40; 
lean::dec(x_27);
x_37 = lean::string_iterator_offset(x_23);
x_38 = lean::string_iterator_offset(x_32);
lean::dec(x_32);
x_40 = lean::nat_dec_lt(x_37, x_38);
if (x_40 == 0)
{
uint8 x_41; 
x_41 = lean::nat_dec_lt(x_38, x_37);
lean::dec(x_37);
lean::dec(x_38);
if (x_41 == 0)
{
obj* x_44; obj* x_46; obj* x_47; obj* x_48; obj* x_49; 
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_21);
lean::cnstr_set(x_44, 1, x_30);
lean::inc(x_23);
x_46 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_46, 0, x_44);
lean::cnstr_set(x_46, 1, x_23);
lean::cnstr_set(x_46, 2, x_34);
x_47 = l_lean_parser_finish__comment__block___closed__2;
x_48 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_48, 0, x_46);
lean::cnstr_set(x_48, 1, x_23);
lean::cnstr_set(x_48, 2, x_47);
x_49 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_48);
x_11 = x_49;
x_12 = x_18;
goto lbl_13;
}
else
{
obj* x_51; obj* x_52; obj* x_54; obj* x_55; obj* x_56; obj* x_57; 
lean::dec(x_30);
x_51 = lean::box(0);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_21);
lean::cnstr_set(x_52, 1, x_51);
lean::inc(x_23);
x_54 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_54, 0, x_52);
lean::cnstr_set(x_54, 1, x_23);
lean::cnstr_set(x_54, 2, x_34);
x_55 = l_lean_parser_finish__comment__block___closed__2;
x_56 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_56, 0, x_54);
lean::cnstr_set(x_56, 1, x_23);
lean::cnstr_set(x_56, 2, x_55);
x_57 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_56);
x_11 = x_57;
x_12 = x_18;
goto lbl_13;
}
}
else
{
obj* x_62; obj* x_64; obj* x_65; 
lean::dec(x_21);
lean::dec(x_30);
lean::dec(x_37);
lean::dec(x_38);
x_62 = l_lean_parser_finish__comment__block___closed__2;
lean::inc(x_2);
x_64 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_64, 0, x_2);
lean::cnstr_set(x_64, 1, x_23);
lean::cnstr_set(x_64, 2, x_62);
x_65 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_64);
x_11 = x_65;
x_12 = x_18;
goto lbl_13;
}
}
else
{
obj* x_69; 
lean::dec(x_34);
lean::dec(x_30);
lean::dec(x_32);
x_69 = lean::box(0);
x_28 = x_69;
goto lbl_29;
}
}
else
{
obj* x_70; 
x_70 = lean::box(0);
x_28 = x_70;
goto lbl_29;
}
lbl_29:
{
obj* x_72; obj* x_73; obj* x_75; obj* x_76; obj* x_77; obj* x_78; 
lean::dec(x_28);
x_72 = lean::box(0);
x_73 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_73, 0, x_21);
lean::cnstr_set(x_73, 1, x_72);
lean::inc(x_23);
if (lean::is_scalar(x_27)) {
 x_75 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_75 = x_27;
}
lean::cnstr_set(x_75, 0, x_73);
lean::cnstr_set(x_75, 1, x_23);
lean::cnstr_set(x_75, 2, x_72);
x_76 = l_lean_parser_finish__comment__block___closed__2;
x_77 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_77, 0, x_75);
lean::cnstr_set(x_77, 1, x_23);
lean::cnstr_set(x_77, 2, x_76);
x_78 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_77);
x_11 = x_78;
x_12 = x_18;
goto lbl_13;
}
}
else
{
obj* x_79; uint8 x_81; obj* x_82; obj* x_83; obj* x_84; 
x_79 = lean::cnstr_get(x_16, 0);
x_81 = lean::cnstr_get_scalar<uint8>(x_16, sizeof(void*)*1);
if (lean::is_exclusive(x_16)) {
 x_82 = x_16;
} else {
 lean::inc(x_79);
 lean::dec(x_16);
 x_82 = lean::box(0);
}
if (lean::is_scalar(x_82)) {
 x_83 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_83 = x_82;
}
lean::cnstr_set(x_83, 0, x_79);
lean::cnstr_set_scalar(x_83, sizeof(void*)*1, x_81);
x_84 = x_83;
x_11 = x_84;
x_12 = x_18;
goto lbl_13;
}
lbl_10:
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_85; obj* x_87; obj* x_88; obj* x_89; obj* x_90; 
x_85 = lean::cnstr_get(x_8, 0);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_release(x_8, 1);
 lean::cnstr_release(x_8, 2);
 x_87 = x_8;
} else {
 lean::inc(x_85);
 lean::dec(x_8);
 x_87 = lean::box(0);
}
x_88 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_87)) {
 x_89 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_89 = x_87;
}
lean::cnstr_set(x_89, 0, x_85);
lean::cnstr_set(x_89, 1, x_6);
lean::cnstr_set(x_89, 2, x_88);
x_90 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_90, 0, x_89);
lean::cnstr_set(x_90, 1, x_9);
return x_90;
}
else
{
obj* x_92; 
lean::dec(x_6);
x_92 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_92, 0, x_8);
lean::cnstr_set(x_92, 1, x_9);
return x_92;
}
}
lbl_13:
{
if (lean::obj_tag(x_11) == 0)
{
lean::dec(x_0);
lean::dec(x_2);
x_8 = x_11;
x_9 = x_12;
goto lbl_10;
}
else
{
obj* x_95; obj* x_97; obj* x_98; 
x_95 = lean::cnstr_get(x_11, 0);
if (lean::is_exclusive(x_11)) {
 lean::cnstr_set(x_11, 0, lean::box(0));
 x_97 = x_11;
} else {
 lean::inc(x_95);
 lean::dec(x_11);
 x_97 = lean::box(0);
}
x_98 = lean::cnstr_get(x_95, 0);
lean::inc(x_98);
if (lean::obj_tag(x_2) == 0)
{
obj* x_103; obj* x_104; 
lean::dec(x_0);
lean::dec(x_95);
lean::dec(x_97);
x_103 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_104 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_104, 0, x_2);
lean::cnstr_set(x_104, 1, x_98);
lean::cnstr_set(x_104, 2, x_103);
x_8 = x_104;
x_9 = x_12;
goto lbl_10;
}
else
{
obj* x_105; obj* x_107; obj* x_108; obj* x_110; uint8 x_112; 
x_105 = lean::cnstr_get(x_2, 0);
lean::inc(x_105);
x_107 = lean::string_iterator_offset(x_98);
x_108 = lean::cnstr_get(x_105, 0);
lean::inc(x_108);
x_110 = lean::string_iterator_offset(x_108);
lean::dec(x_108);
x_112 = lean::nat_dec_lt(x_107, x_110);
if (x_112 == 0)
{
uint8 x_114; 
lean::dec(x_2);
x_114 = lean::nat_dec_lt(x_110, x_107);
lean::dec(x_110);
if (x_114 == 0)
{
obj* x_116; obj* x_117; uint8 x_119; 
x_116 = l_lean_parser_parsec__t_merge___rarg(x_95, x_105);
x_117 = lean::string_iterator_offset(x_0);
lean::dec(x_0);
x_119 = lean::nat_dec_lt(x_117, x_107);
lean::dec(x_107);
lean::dec(x_117);
if (x_119 == 0)
{
uint8 x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; 
x_122 = 0;
if (lean::is_scalar(x_97)) {
 x_123 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_123 = x_97;
}
lean::cnstr_set(x_123, 0, x_116);
lean::cnstr_set_scalar(x_123, sizeof(void*)*1, x_122);
x_124 = x_123;
x_125 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_126 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_126, 0, x_124);
lean::cnstr_set(x_126, 1, x_98);
lean::cnstr_set(x_126, 2, x_125);
x_8 = x_126;
x_9 = x_12;
goto lbl_10;
}
else
{
uint8 x_127; obj* x_128; obj* x_129; obj* x_130; obj* x_131; 
x_127 = 1;
if (lean::is_scalar(x_97)) {
 x_128 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_128 = x_97;
}
lean::cnstr_set(x_128, 0, x_116);
lean::cnstr_set_scalar(x_128, sizeof(void*)*1, x_127);
x_129 = x_128;
x_130 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_131 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_131, 0, x_129);
lean::cnstr_set(x_131, 1, x_98);
lean::cnstr_set(x_131, 2, x_130);
x_8 = x_131;
x_9 = x_12;
goto lbl_10;
}
}
else
{
uint8 x_135; obj* x_136; obj* x_137; obj* x_138; obj* x_139; 
lean::dec(x_0);
lean::dec(x_105);
lean::dec(x_107);
x_135 = 1;
if (lean::is_scalar(x_97)) {
 x_136 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_136 = x_97;
}
lean::cnstr_set(x_136, 0, x_95);
lean::cnstr_set_scalar(x_136, sizeof(void*)*1, x_135);
x_137 = x_136;
x_138 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_139 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_139, 0, x_137);
lean::cnstr_set(x_139, 1, x_98);
lean::cnstr_set(x_139, 2, x_138);
x_8 = x_139;
x_9 = x_12;
goto lbl_10;
}
}
else
{
obj* x_146; obj* x_147; 
lean::dec(x_0);
lean::dec(x_105);
lean::dec(x_107);
lean::dec(x_95);
lean::dec(x_97);
lean::dec(x_110);
x_146 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_147 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_147, 0, x_2);
lean::cnstr_set(x_147, 1, x_98);
lean::cnstr_set(x_147, 2, x_146);
x_8 = x_147;
x_9 = x_12;
goto lbl_10;
}
}
}
}
}
}
obj* l_list_mfoldr___main___at___private_init_lean_parser_term_2__leading___spec__10(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
x_10 = lean::box(0);
x_11 = l_list_mfoldr___main___at_lean_parser_monad__parsec_longest__match___spec__2___rarg___closed__1;
x_12 = l_mjoin___rarg___closed__1;
x_13 = l_lean_parser_monad__parsec_error___at_lean_parser_number_x_27___spec__12___rarg(x_11, x_12, x_10, x_10, x_0);
x_14 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_15 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set(x_15, 1, x_5);
lean::cnstr_set(x_15, 2, x_14);
x_16 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_6);
return x_16;
}
else
{
obj* x_17; obj* x_19; obj* x_26; obj* x_27; obj* x_29; obj* x_31; 
x_17 = lean::cnstr_get(x_1, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_1, 1);
lean::inc(x_19);
lean::dec(x_1);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_0);
x_26 = l_list_mfoldr___main___at___private_init_lean_parser_term_2__leading___spec__10(x_0, x_19, x_2, x_3, x_4, x_5, x_6);
x_27 = lean::cnstr_get(x_26, 0);
x_29 = lean::cnstr_get(x_26, 1);
if (lean::is_exclusive(x_26)) {
 lean::cnstr_set(x_26, 0, lean::box(0));
 lean::cnstr_set(x_26, 1, lean::box(0));
 x_31 = x_26;
} else {
 lean::inc(x_27);
 lean::inc(x_29);
 lean::dec(x_26);
 x_31 = lean::box(0);
}
if (lean::obj_tag(x_27) == 0)
{
obj* x_32; obj* x_34; obj* x_36; obj* x_39; obj* x_40; obj* x_42; obj* x_45; obj* x_46; 
x_32 = lean::cnstr_get(x_27, 0);
lean::inc(x_32);
x_34 = lean::cnstr_get(x_27, 1);
lean::inc(x_34);
x_36 = lean::cnstr_get(x_27, 2);
lean::inc(x_36);
lean::dec(x_27);
x_39 = l_lean_parser_parsec__t_lookahead___at___private_init_lean_parser_term_2__leading___spec__9(x_0, x_17, x_32, x_2, x_3, x_4, x_34, x_29);
x_40 = lean::cnstr_get(x_39, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_39, 1);
lean::inc(x_42);
lean::dec(x_39);
x_45 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_36, x_40);
if (lean::is_scalar(x_31)) {
 x_46 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_46 = x_31;
}
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_42);
return x_46;
}
else
{
obj* x_52; uint8 x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; 
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_2);
lean::dec(x_17);
x_52 = lean::cnstr_get(x_27, 0);
x_54 = lean::cnstr_get_scalar<uint8>(x_27, sizeof(void*)*1);
if (lean::is_exclusive(x_27)) {
 x_55 = x_27;
} else {
 lean::inc(x_52);
 lean::dec(x_27);
 x_55 = lean::box(0);
}
if (lean::is_scalar(x_55)) {
 x_56 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_56 = x_55;
}
lean::cnstr_set(x_56, 0, x_52);
lean::cnstr_set_scalar(x_56, sizeof(void*)*1, x_54);
x_57 = x_56;
if (lean::is_scalar(x_31)) {
 x_58 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_58 = x_31;
}
lean::cnstr_set(x_58, 0, x_57);
lean::cnstr_set(x_58, 1, x_29);
return x_58;
}
}
}
}
obj* l_lean_parser_monad__parsec_longest__match___at___private_init_lean_parser_term_2__leading___spec__8(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_7; obj* x_8; obj* x_10; obj* x_12; 
lean::inc(x_4);
x_7 = l_list_mfoldr___main___at___private_init_lean_parser_term_2__leading___spec__10(x_4, x_0, x_1, x_2, x_3, x_4, x_5);
x_8 = lean::cnstr_get(x_7, 0);
x_10 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_set(x_7, 0, lean::box(0));
 lean::cnstr_set(x_7, 1, lean::box(0));
 x_12 = x_7;
} else {
 lean::inc(x_8);
 lean::inc(x_10);
 lean::dec(x_7);
 x_12 = lean::box(0);
}
if (lean::obj_tag(x_8) == 0)
{
obj* x_13; obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
x_13 = lean::cnstr_get(x_8, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_8, 2);
lean::inc(x_15);
lean::dec(x_8);
x_18 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_15, x_13);
x_19 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_20 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_19, x_18);
if (lean::is_scalar(x_12)) {
 x_21 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_21 = x_12;
}
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_10);
return x_21;
}
else
{
obj* x_22; uint8 x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; 
x_22 = lean::cnstr_get(x_8, 0);
x_24 = lean::cnstr_get_scalar<uint8>(x_8, sizeof(void*)*1);
if (lean::is_exclusive(x_8)) {
 x_25 = x_8;
} else {
 lean::inc(x_22);
 lean::dec(x_8);
 x_25 = lean::box(0);
}
if (lean::is_scalar(x_25)) {
 x_26 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_26 = x_25;
}
lean::cnstr_set(x_26, 0, x_22);
lean::cnstr_set_scalar(x_26, sizeof(void*)*1, x_24);
x_27 = x_26;
x_28 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_29 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_28, x_27);
if (lean::is_scalar(x_12)) {
 x_30 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_30 = x_12;
}
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_10);
return x_30;
}
}
}
obj* l_lean_parser_combinators_longest__match___at___private_init_lean_parser_term_2__leading___spec__7(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_9; obj* x_11; 
x_6 = l_lean_parser_monad__parsec_longest__match___at___private_init_lean_parser_term_2__leading___spec__8(x_0, x_1, x_2, x_3, x_4, x_5);
x_7 = lean::cnstr_get(x_6, 0);
x_9 = lean::cnstr_get(x_6, 1);
if (lean::is_exclusive(x_6)) {
 lean::cnstr_set(x_6, 0, lean::box(0));
 lean::cnstr_set(x_6, 1, lean::box(0));
 x_11 = x_6;
} else {
 lean::inc(x_7);
 lean::inc(x_9);
 lean::dec(x_6);
 x_11 = lean::box(0);
}
if (lean::obj_tag(x_7) == 0)
{
obj* x_12; obj* x_14; obj* x_16; obj* x_18; obj* x_19; 
x_12 = lean::cnstr_get(x_7, 0);
x_14 = lean::cnstr_get(x_7, 1);
x_16 = lean::cnstr_get(x_7, 2);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_set(x_7, 0, lean::box(0));
 lean::cnstr_set(x_7, 1, lean::box(0));
 lean::cnstr_set(x_7, 2, lean::box(0));
 x_18 = x_7;
} else {
 lean::inc(x_12);
 lean::inc(x_14);
 lean::inc(x_16);
 lean::dec(x_7);
 x_18 = lean::box(0);
}
if (lean::obj_tag(x_12) == 0)
{
obj* x_21; 
x_21 = lean::box(0);
x_19 = x_21;
goto lbl_20;
}
else
{
obj* x_22; obj* x_24; 
x_22 = lean::cnstr_get(x_12, 0);
lean::inc(x_22);
x_24 = lean::cnstr_get(x_12, 1);
lean::inc(x_24);
if (lean::obj_tag(x_24) == 0)
{
obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
lean::dec(x_12);
lean::dec(x_11);
lean::dec(x_18);
x_29 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_30 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_30, 0, x_22);
lean::cnstr_set(x_30, 1, x_14);
lean::cnstr_set(x_30, 2, x_29);
x_31 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_30);
x_32 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_9);
return x_32;
}
else
{
obj* x_35; 
lean::dec(x_22);
lean::dec(x_24);
x_35 = lean::box(0);
x_19 = x_35;
goto lbl_20;
}
}
lbl_20:
{
obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
lean::dec(x_19);
x_37 = l_lean_parser_choice;
x_38 = l_lean_parser_syntax_mk__node(x_37, x_12);
x_39 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_18)) {
 x_40 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_40 = x_18;
}
lean::cnstr_set(x_40, 0, x_38);
lean::cnstr_set(x_40, 1, x_14);
lean::cnstr_set(x_40, 2, x_39);
x_41 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_40);
if (lean::is_scalar(x_11)) {
 x_42 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_42 = x_11;
}
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_9);
return x_42;
}
}
else
{
obj* x_43; uint8 x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; 
x_43 = lean::cnstr_get(x_7, 0);
x_45 = lean::cnstr_get_scalar<uint8>(x_7, sizeof(void*)*1);
if (lean::is_exclusive(x_7)) {
 x_46 = x_7;
} else {
 lean::inc(x_43);
 lean::dec(x_7);
 x_46 = lean::box(0);
}
if (lean::is_scalar(x_46)) {
 x_47 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_47 = x_46;
}
lean::cnstr_set(x_47, 0, x_43);
lean::cnstr_set_scalar(x_47, sizeof(void*)*1, x_45);
x_48 = x_47;
if (lean::is_scalar(x_11)) {
 x_49 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_49 = x_11;
}
lean::cnstr_set(x_49, 0, x_48);
lean::cnstr_set(x_49, 1, x_9);
return x_49;
}
}
}
obj* l___private_init_lean_parser_term_2__leading(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_12; obj* x_13; obj* x_15; obj* x_17; obj* x_18; 
x_6 = lean::cnstr_get(x_0, 3);
lean::inc(x_6);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_12 = l_lean_parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg(x_6, x_1, x_2, x_3, x_4, x_5);
x_13 = lean::cnstr_get(x_12, 0);
x_15 = lean::cnstr_get(x_12, 1);
if (lean::is_exclusive(x_12)) {
 lean::cnstr_set(x_12, 0, lean::box(0));
 lean::cnstr_set(x_12, 1, lean::box(0));
 x_17 = x_12;
} else {
 lean::inc(x_13);
 lean::inc(x_15);
 lean::dec(x_12);
 x_17 = lean::box(0);
}
x_18 = lean::cnstr_get(x_0, 1);
lean::inc(x_18);
lean::dec(x_0);
if (lean::obj_tag(x_13) == 0)
{
obj* x_21; obj* x_23; obj* x_25; obj* x_31; obj* x_32; obj* x_34; obj* x_37; 
x_21 = lean::cnstr_get(x_13, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_13, 1);
lean::inc(x_23);
x_25 = lean::cnstr_get(x_13, 2);
lean::inc(x_25);
lean::dec(x_13);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_31 = l_list_foldr___main___at___private_init_lean_parser_term_2__leading___spec__6(x_21, x_1, x_2, x_3, x_23, x_15);
x_32 = lean::cnstr_get(x_31, 0);
lean::inc(x_32);
x_34 = lean::cnstr_get(x_31, 1);
lean::inc(x_34);
lean::dec(x_31);
x_37 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_25, x_32);
if (lean::obj_tag(x_37) == 0)
{
obj* x_43; 
lean::dec(x_18);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
if (lean::is_scalar(x_17)) {
 x_43 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_43 = x_17;
}
lean::cnstr_set(x_43, 0, x_37);
lean::cnstr_set(x_43, 1, x_34);
return x_43;
}
else
{
obj* x_44; uint8 x_46; 
x_44 = lean::cnstr_get(x_37, 0);
lean::inc(x_44);
x_46 = lean::cnstr_get_scalar<uint8>(x_37, sizeof(void*)*1);
if (x_46 == 0)
{
obj* x_51; obj* x_52; obj* x_54; 
lean::dec(x_37);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_51 = l_lean_parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg(x_18, x_1, x_2, x_3, x_4, x_34);
x_52 = lean::cnstr_get(x_51, 0);
lean::inc(x_52);
x_54 = lean::cnstr_get(x_51, 1);
lean::inc(x_54);
lean::dec(x_51);
if (lean::obj_tag(x_52) == 0)
{
obj* x_57; obj* x_59; obj* x_61; obj* x_64; obj* x_65; obj* x_67; obj* x_70; obj* x_71; obj* x_72; 
x_57 = lean::cnstr_get(x_52, 0);
lean::inc(x_57);
x_59 = lean::cnstr_get(x_52, 1);
lean::inc(x_59);
x_61 = lean::cnstr_get(x_52, 2);
lean::inc(x_61);
lean::dec(x_52);
x_64 = l_lean_parser_combinators_longest__match___at___private_init_lean_parser_term_2__leading___spec__7(x_57, x_1, x_2, x_3, x_59, x_54);
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
x_67 = lean::cnstr_get(x_64, 1);
lean::inc(x_67);
lean::dec(x_64);
x_70 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_61, x_65);
x_71 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_44, x_70);
if (lean::is_scalar(x_17)) {
 x_72 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_72 = x_17;
}
lean::cnstr_set(x_72, 0, x_71);
lean::cnstr_set(x_72, 1, x_67);
return x_72;
}
else
{
obj* x_76; uint8 x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_76 = lean::cnstr_get(x_52, 0);
x_78 = lean::cnstr_get_scalar<uint8>(x_52, sizeof(void*)*1);
if (lean::is_exclusive(x_52)) {
 x_79 = x_52;
} else {
 lean::inc(x_76);
 lean::dec(x_52);
 x_79 = lean::box(0);
}
if (lean::is_scalar(x_79)) {
 x_80 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_80 = x_79;
}
lean::cnstr_set(x_80, 0, x_76);
lean::cnstr_set_scalar(x_80, sizeof(void*)*1, x_78);
x_81 = x_80;
x_82 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_44, x_81);
if (lean::is_scalar(x_17)) {
 x_83 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_83 = x_17;
}
lean::cnstr_set(x_83, 0, x_82);
lean::cnstr_set(x_83, 1, x_54);
return x_83;
}
}
else
{
obj* x_90; 
lean::dec(x_18);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_44);
if (lean::is_scalar(x_17)) {
 x_90 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_90 = x_17;
}
lean::cnstr_set(x_90, 0, x_37);
lean::cnstr_set(x_90, 1, x_34);
return x_90;
}
}
}
else
{
obj* x_91; uint8 x_93; obj* x_94; 
x_91 = lean::cnstr_get(x_13, 0);
x_93 = lean::cnstr_get_scalar<uint8>(x_13, sizeof(void*)*1);
if (lean::is_exclusive(x_13)) {
 lean::cnstr_set(x_13, 0, lean::box(0));
 x_94 = x_13;
} else {
 lean::inc(x_91);
 lean::dec(x_13);
 x_94 = lean::box(0);
}
if (x_93 == 0)
{
obj* x_98; obj* x_99; obj* x_101; 
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_98 = l_lean_parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg(x_18, x_1, x_2, x_3, x_4, x_15);
x_99 = lean::cnstr_get(x_98, 0);
lean::inc(x_99);
x_101 = lean::cnstr_get(x_98, 1);
lean::inc(x_101);
lean::dec(x_98);
if (lean::obj_tag(x_99) == 0)
{
obj* x_105; obj* x_107; obj* x_109; obj* x_112; obj* x_113; obj* x_115; obj* x_118; obj* x_119; obj* x_120; 
lean::dec(x_94);
x_105 = lean::cnstr_get(x_99, 0);
lean::inc(x_105);
x_107 = lean::cnstr_get(x_99, 1);
lean::inc(x_107);
x_109 = lean::cnstr_get(x_99, 2);
lean::inc(x_109);
lean::dec(x_99);
x_112 = l_lean_parser_combinators_longest__match___at___private_init_lean_parser_term_2__leading___spec__7(x_105, x_1, x_2, x_3, x_107, x_101);
x_113 = lean::cnstr_get(x_112, 0);
lean::inc(x_113);
x_115 = lean::cnstr_get(x_112, 1);
lean::inc(x_115);
lean::dec(x_112);
x_118 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_109, x_113);
x_119 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_91, x_118);
if (lean::is_scalar(x_17)) {
 x_120 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_120 = x_17;
}
lean::cnstr_set(x_120, 0, x_119);
lean::cnstr_set(x_120, 1, x_115);
return x_120;
}
else
{
obj* x_124; uint8 x_126; obj* x_128; obj* x_129; obj* x_130; obj* x_131; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_124 = lean::cnstr_get(x_99, 0);
lean::inc(x_124);
x_126 = lean::cnstr_get_scalar<uint8>(x_99, sizeof(void*)*1);
lean::dec(x_99);
if (lean::is_scalar(x_94)) {
 x_128 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_128 = x_94;
}
lean::cnstr_set(x_128, 0, x_124);
lean::cnstr_set_scalar(x_128, sizeof(void*)*1, x_126);
x_129 = x_128;
x_130 = l_lean_parser_parsec__t_orelse__mk__res___rarg(x_91, x_129);
if (lean::is_scalar(x_17)) {
 x_131 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_131 = x_17;
}
lean::cnstr_set(x_131, 0, x_130);
lean::cnstr_set(x_131, 1, x_101);
return x_131;
}
}
else
{
obj* x_137; obj* x_138; obj* x_139; 
lean::dec(x_18);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
if (lean::is_scalar(x_94)) {
 x_137 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_137 = x_94;
}
lean::cnstr_set(x_137, 0, x_91);
lean::cnstr_set_scalar(x_137, sizeof(void*)*1, x_93);
x_138 = x_137;
if (lean::is_scalar(x_17)) {
 x_139 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_139 = x_17;
}
lean::cnstr_set(x_139, 0, x_138);
lean::cnstr_set(x_139, 1, x_15);
return x_139;
}
}
}
}
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
obj* x_12; obj* x_13; uint8 x_14; obj* x_15; obj* x_16; obj* x_17; 
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
x_12 = l_option_get__or__else___main___rarg(x_2, x_7);
x_13 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_0);
lean::cnstr_set(x_13, 2, x_1);
lean::cnstr_set(x_13, 3, x_3);
x_14 = 0;
x_15 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set_scalar(x_15, sizeof(void*)*1, x_14);
x_16 = x_15;
x_17 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_8);
return x_17;
}
}
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3___rarg), 9, 0);
return x_2;
}
}
obj* l_lean_parser_curr__lbp___at_lean_parser_term__parser_run___spec__4(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_6; obj* x_7; obj* x_9; obj* x_11; 
lean::inc(x_1);
x_6 = l_lean_parser_monad__parsec_observing___at_lean_parser_peek__token___spec__2(x_1, x_3, x_4);
x_7 = lean::cnstr_get(x_6, 0);
x_9 = lean::cnstr_get(x_6, 1);
if (lean::is_exclusive(x_6)) {
 lean::cnstr_set(x_6, 0, lean::box(0));
 lean::cnstr_set(x_6, 1, lean::box(0));
 x_11 = x_6;
} else {
 lean::inc(x_7);
 lean::inc(x_9);
 lean::dec(x_6);
 x_11 = lean::box(0);
}
if (lean::obj_tag(x_7) == 0)
{
obj* x_12; obj* x_14; obj* x_16; obj* x_18; 
x_12 = lean::cnstr_get(x_7, 0);
x_14 = lean::cnstr_get(x_7, 1);
x_16 = lean::cnstr_get(x_7, 2);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_set(x_7, 0, lean::box(0));
 lean::cnstr_set(x_7, 1, lean::box(0));
 lean::cnstr_set(x_7, 2, lean::box(0));
 x_18 = x_7;
} else {
 lean::inc(x_12);
 lean::inc(x_14);
 lean::inc(x_16);
 lean::dec(x_7);
 x_18 = lean::box(0);
}
if (lean::obj_tag(x_12) == 0)
{
obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
lean::dec(x_12);
lean::dec(x_1);
lean::dec(x_0);
lean::dec(x_2);
x_23 = lean::mk_nat_obj(0u);
x_24 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_18)) {
 x_25 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_25 = x_18;
}
lean::cnstr_set(x_25, 0, x_23);
lean::cnstr_set(x_25, 1, x_14);
lean::cnstr_set(x_25, 2, x_24);
x_26 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_25);
if (lean::is_scalar(x_11)) {
 x_27 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_27 = x_11;
}
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_9);
return x_27;
}
else
{
obj* x_28; 
x_28 = lean::cnstr_get(x_12, 0);
lean::inc(x_28);
lean::dec(x_12);
switch (lean::obj_tag(x_28)) {
case 0:
{
obj* x_31; obj* x_34; obj* x_37; obj* x_39; obj* x_40; 
x_31 = lean::cnstr_get(x_28, 0);
lean::inc(x_31);
lean::dec(x_28);
x_34 = lean::cnstr_get(x_31, 1);
lean::inc(x_34);
lean::dec(x_31);
x_37 = lean::cnstr_get(x_1, 1);
lean::inc(x_37);
x_39 = lean::string_mk_iterator(x_34);
x_40 = l_lean_parser_trie_match__prefix___rarg(x_37, x_39);
if (lean::obj_tag(x_40) == 0)
{
obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_48; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; 
lean::dec(x_18);
x_42 = lean::box(0);
x_43 = l_lean_parser_curr__lbp___rarg___lambda__1___closed__1;
x_44 = l_mjoin___rarg___closed__1;
x_45 = l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3___rarg(x_43, x_44, x_42, x_42, x_0, x_1, x_2, x_14, x_9);
x_46 = lean::cnstr_get(x_45, 0);
lean::inc(x_46);
x_48 = lean::cnstr_get(x_45, 1);
lean::inc(x_48);
lean::dec(x_45);
x_51 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_52 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_51, x_46);
x_53 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_51, x_52);
x_54 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_53);
if (lean::is_scalar(x_11)) {
 x_55 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_55 = x_11;
}
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_48);
return x_55;
}
else
{
obj* x_59; obj* x_62; obj* x_65; obj* x_68; obj* x_69; obj* x_70; obj* x_71; 
lean::dec(x_1);
lean::dec(x_0);
lean::dec(x_2);
x_59 = lean::cnstr_get(x_40, 0);
lean::inc(x_59);
lean::dec(x_40);
x_62 = lean::cnstr_get(x_59, 1);
lean::inc(x_62);
lean::dec(x_59);
x_65 = lean::cnstr_get(x_62, 1);
lean::inc(x_65);
lean::dec(x_62);
x_68 = l_lean_parser_match__token___closed__2;
if (lean::is_scalar(x_18)) {
 x_69 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_69 = x_18;
}
lean::cnstr_set(x_69, 0, x_65);
lean::cnstr_set(x_69, 1, x_14);
lean::cnstr_set(x_69, 2, x_68);
x_70 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_69);
if (lean::is_scalar(x_11)) {
 x_71 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_71 = x_11;
}
lean::cnstr_set(x_71, 0, x_70);
lean::cnstr_set(x_71, 1, x_9);
return x_71;
}
}
case 1:
{
obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; 
lean::dec(x_1);
lean::dec(x_0);
lean::dec(x_2);
lean::dec(x_28);
x_76 = l_lean_parser_max__prec;
x_77 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_18)) {
 x_78 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_78 = x_18;
}
lean::cnstr_set(x_78, 0, x_76);
lean::cnstr_set(x_78, 1, x_14);
lean::cnstr_set(x_78, 2, x_77);
x_79 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_78);
if (lean::is_scalar(x_11)) {
 x_80 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_80 = x_11;
}
lean::cnstr_set(x_80, 0, x_79);
lean::cnstr_set(x_80, 1, x_9);
return x_80;
}
case 2:
{
obj* x_81; obj* x_84; obj* x_87; uint8 x_88; 
x_81 = lean::cnstr_get(x_28, 0);
lean::inc(x_81);
lean::dec(x_28);
x_84 = lean::cnstr_get(x_81, 0);
lean::inc(x_84);
lean::dec(x_81);
x_87 = l_lean_parser_number_has__view_x_27___lambda__1___closed__6;
x_88 = lean_name_dec_eq(x_84, x_87);
if (x_88 == 0)
{
obj* x_89; uint8 x_90; 
x_89 = l_lean_parser_curr__lbp___rarg___lambda__3___closed__1;
x_90 = lean_name_dec_eq(x_84, x_89);
lean::dec(x_84);
if (x_90 == 0)
{
obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_99; obj* x_102; obj* x_103; 
lean::dec(x_18);
x_93 = lean::box(0);
x_94 = l_lean_parser_curr__lbp___rarg___lambda__3___closed__2;
x_95 = l_mjoin___rarg___closed__1;
x_96 = l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3___rarg(x_94, x_95, x_93, x_93, x_0, x_1, x_2, x_14, x_9);
x_97 = lean::cnstr_get(x_96, 0);
lean::inc(x_97);
x_99 = lean::cnstr_get(x_96, 1);
lean::inc(x_99);
lean::dec(x_96);
x_102 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_97);
if (lean::is_scalar(x_11)) {
 x_103 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_103 = x_11;
}
lean::cnstr_set(x_103, 0, x_102);
lean::cnstr_set(x_103, 1, x_99);
return x_103;
}
else
{
obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; 
lean::dec(x_1);
lean::dec(x_0);
lean::dec(x_2);
x_107 = l_lean_parser_max__prec;
x_108 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_18)) {
 x_109 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_109 = x_18;
}
lean::cnstr_set(x_109, 0, x_107);
lean::cnstr_set(x_109, 1, x_14);
lean::cnstr_set(x_109, 2, x_108);
x_110 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_109);
if (lean::is_scalar(x_11)) {
 x_111 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_111 = x_11;
}
lean::cnstr_set(x_111, 0, x_110);
lean::cnstr_set(x_111, 1, x_9);
return x_111;
}
}
else
{
obj* x_116; obj* x_117; obj* x_118; obj* x_119; obj* x_120; 
lean::dec(x_1);
lean::dec(x_0);
lean::dec(x_2);
lean::dec(x_84);
x_116 = l_lean_parser_max__prec;
x_117 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_18)) {
 x_118 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_118 = x_18;
}
lean::cnstr_set(x_118, 0, x_116);
lean::cnstr_set(x_118, 1, x_14);
lean::cnstr_set(x_118, 2, x_117);
x_119 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_118);
if (lean::is_scalar(x_11)) {
 x_120 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_120 = x_11;
}
lean::cnstr_set(x_120, 0, x_119);
lean::cnstr_set(x_120, 1, x_9);
return x_120;
}
}
default:
{
obj* x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_128; obj* x_131; obj* x_132; 
lean::dec(x_18);
x_122 = lean::box(0);
x_123 = l_lean_parser_curr__lbp___rarg___lambda__3___closed__2;
x_124 = l_mjoin___rarg___closed__1;
x_125 = l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3___rarg(x_123, x_124, x_122, x_122, x_0, x_1, x_2, x_14, x_9);
x_126 = lean::cnstr_get(x_125, 0);
lean::inc(x_126);
x_128 = lean::cnstr_get(x_125, 1);
lean::inc(x_128);
lean::dec(x_125);
x_131 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_16, x_126);
if (lean::is_scalar(x_11)) {
 x_132 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_132 = x_11;
}
lean::cnstr_set(x_132, 0, x_131);
lean::cnstr_set(x_132, 1, x_128);
return x_132;
}
}
}
}
else
{
obj* x_136; uint8 x_138; obj* x_139; obj* x_140; obj* x_141; obj* x_142; 
lean::dec(x_1);
lean::dec(x_0);
lean::dec(x_2);
x_136 = lean::cnstr_get(x_7, 0);
x_138 = lean::cnstr_get_scalar<uint8>(x_7, sizeof(void*)*1);
if (lean::is_exclusive(x_7)) {
 x_139 = x_7;
} else {
 lean::inc(x_136);
 lean::dec(x_7);
 x_139 = lean::box(0);
}
if (lean::is_scalar(x_139)) {
 x_140 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_140 = x_139;
}
lean::cnstr_set(x_140, 0, x_136);
lean::cnstr_set_scalar(x_140, sizeof(void*)*1, x_138);
x_141 = x_140;
if (lean::is_scalar(x_11)) {
 x_142 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_142 = x_11;
}
lean::cnstr_set(x_142, 0, x_141);
lean::cnstr_set(x_142, 1, x_9);
return x_142;
}
}
}
obj* l___private_init_lean_parser_pratt_1__trailing__loop___main___at_lean_parser_term__parser_run___spec__2(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
obj* x_9; uint8 x_10; 
x_9 = lean::mk_nat_obj(0u);
x_10 = lean::nat_dec_eq(x_2, x_9);
if (x_10 == 0)
{
obj* x_14; obj* x_15; obj* x_17; obj* x_19; 
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_4);
x_14 = l_lean_parser_curr__lbp___at_lean_parser_term__parser_run___spec__4(x_4, x_5, x_6, x_7, x_8);
x_15 = lean::cnstr_get(x_14, 0);
x_17 = lean::cnstr_get(x_14, 1);
if (lean::is_exclusive(x_14)) {
 lean::cnstr_set(x_14, 0, lean::box(0));
 lean::cnstr_set(x_14, 1, lean::box(0));
 x_19 = x_14;
} else {
 lean::inc(x_15);
 lean::inc(x_17);
 lean::dec(x_14);
 x_19 = lean::box(0);
}
if (lean::obj_tag(x_15) == 0)
{
obj* x_20; obj* x_22; obj* x_24; obj* x_26; uint8 x_27; 
x_20 = lean::cnstr_get(x_15, 0);
x_22 = lean::cnstr_get(x_15, 1);
x_24 = lean::cnstr_get(x_15, 2);
if (lean::is_exclusive(x_15)) {
 lean::cnstr_set(x_15, 0, lean::box(0));
 lean::cnstr_set(x_15, 1, lean::box(0));
 lean::cnstr_set(x_15, 2, lean::box(0));
 x_26 = x_15;
} else {
 lean::inc(x_20);
 lean::inc(x_22);
 lean::inc(x_24);
 lean::dec(x_15);
 x_26 = lean::box(0);
}
x_27 = lean::nat_dec_lt(x_1, x_20);
lean::dec(x_20);
if (x_27 == 0)
{
obj* x_35; obj* x_36; obj* x_37; obj* x_38; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_2);
x_35 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
if (lean::is_scalar(x_26)) {
 x_36 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_36 = x_26;
}
lean::cnstr_set(x_36, 0, x_3);
lean::cnstr_set(x_36, 1, x_22);
lean::cnstr_set(x_36, 2, x_35);
x_37 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_24, x_36);
if (lean::is_scalar(x_19)) {
 x_38 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_38 = x_19;
}
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_17);
return x_38;
}
else
{
obj* x_40; obj* x_41; obj* x_47; obj* x_48; obj* x_50; 
lean::dec(x_26);
x_40 = lean::mk_nat_obj(1u);
x_41 = lean::nat_sub(x_2, x_40);
lean::dec(x_2);
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_0);
x_47 = lean::apply_6(x_0, x_3, x_4, x_5, x_6, x_22, x_17);
x_48 = lean::cnstr_get(x_47, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_47, 1);
lean::inc(x_50);
lean::dec(x_47);
if (lean::obj_tag(x_48) == 0)
{
obj* x_53; obj* x_55; obj* x_57; obj* x_60; obj* x_61; obj* x_63; obj* x_66; obj* x_67; obj* x_68; 
x_53 = lean::cnstr_get(x_48, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_48, 1);
lean::inc(x_55);
x_57 = lean::cnstr_get(x_48, 2);
lean::inc(x_57);
lean::dec(x_48);
x_60 = l___private_init_lean_parser_pratt_1__trailing__loop___main___at_lean_parser_term__parser_run___spec__2(x_0, x_1, x_41, x_53, x_4, x_5, x_6, x_55, x_50);
x_61 = lean::cnstr_get(x_60, 0);
lean::inc(x_61);
x_63 = lean::cnstr_get(x_60, 1);
lean::inc(x_63);
lean::dec(x_60);
x_66 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_57, x_61);
x_67 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_24, x_66);
if (lean::is_scalar(x_19)) {
 x_68 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_68 = x_19;
}
lean::cnstr_set(x_68, 0, x_67);
lean::cnstr_set(x_68, 1, x_63);
return x_68;
}
else
{
obj* x_75; uint8 x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_41);
x_75 = lean::cnstr_get(x_48, 0);
x_77 = lean::cnstr_get_scalar<uint8>(x_48, sizeof(void*)*1);
if (lean::is_exclusive(x_48)) {
 x_78 = x_48;
} else {
 lean::inc(x_75);
 lean::dec(x_48);
 x_78 = lean::box(0);
}
if (lean::is_scalar(x_78)) {
 x_79 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_79 = x_78;
}
lean::cnstr_set(x_79, 0, x_75);
lean::cnstr_set_scalar(x_79, sizeof(void*)*1, x_77);
x_80 = x_79;
x_81 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_24, x_80);
if (lean::is_scalar(x_19)) {
 x_82 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_82 = x_19;
}
lean::cnstr_set(x_82, 0, x_81);
lean::cnstr_set(x_82, 1, x_50);
return x_82;
}
}
}
else
{
obj* x_90; uint8 x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_2);
x_90 = lean::cnstr_get(x_15, 0);
x_92 = lean::cnstr_get_scalar<uint8>(x_15, sizeof(void*)*1);
if (lean::is_exclusive(x_15)) {
 x_93 = x_15;
} else {
 lean::inc(x_90);
 lean::dec(x_15);
 x_93 = lean::box(0);
}
if (lean::is_scalar(x_93)) {
 x_94 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_94 = x_93;
}
lean::cnstr_set(x_94, 0, x_90);
lean::cnstr_set_scalar(x_94, sizeof(void*)*1, x_92);
x_95 = x_94;
if (lean::is_scalar(x_19)) {
 x_96 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_96 = x_19;
}
lean::cnstr_set(x_96, 0, x_95);
lean::cnstr_set(x_96, 1, x_17);
return x_96;
}
}
else
{
obj* x_101; obj* x_102; obj* x_103; obj* x_104; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_2);
x_101 = lean::box(0);
x_102 = l___private_init_lean_parser_combinators_1__many1__aux___main___rarg___closed__1;
x_103 = l_mjoin___rarg___closed__1;
x_104 = l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__3___rarg(x_102, x_103, x_101, x_101, x_4, x_5, x_6, x_7, x_8);
return x_104;
}
}
}
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__6___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_10; obj* x_11; uint8 x_12; obj* x_13; obj* x_14; obj* x_15; 
lean::dec(x_5);
lean::dec(x_4);
x_10 = l_option_get__or__else___main___rarg(x_2, x_6);
x_11 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_11, 0, x_10);
lean::cnstr_set(x_11, 1, x_0);
lean::cnstr_set(x_11, 2, x_1);
lean::cnstr_set(x_11, 3, x_3);
x_12 = 0;
x_13 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set_scalar(x_13, sizeof(void*)*1, x_12);
x_14 = x_13;
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_7);
return x_15;
}
}
obj* l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__6(obj* x_0) {
_start:
{
obj* x_2; 
lean::dec(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__6___rarg), 8, 0);
return x_2;
}
}
obj* l___private_init_lean_parser_rec_1__run__aux___at_lean_parser_term__parser_run___spec__8(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; 
x_8 = l___private_init_lean_parser_rec_1__run__aux___main___rarg(x_0, x_1, x_2, x_3);
x_9 = lean::apply_4(x_8, x_4, x_5, x_6, x_7);
return x_9;
}
}
obj* l_lean_parser_rec__t_run___at_lean_parser_term__parser_run___spec__7(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; 
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l___private_init_lean_parser_rec_1__run__aux___at_lean_parser_term__parser_run___spec__8), 8, 3);
lean::closure_set(x_8, 0, x_1);
lean::closure_set(x_8, 1, x_2);
lean::closure_set(x_8, 2, x_3);
x_9 = lean::apply_5(x_0, x_8, x_4, x_5, x_6, x_7);
return x_9;
}
}
obj* l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = l_lean_parser_rec__t_run__parsec___rarg___lambda__1___closed__1;
x_8 = l_mjoin___rarg___closed__1;
x_9 = l_lean_parser_monad__parsec_error___at_lean_parser_term__parser_run___spec__6___rarg(x_7, x_8, x_6, x_6, x_1, x_2, x_3, x_4);
return x_9;
}
}
obj* _init_l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___closed__1() {
_start:
{
obj* x_0; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___lambda__1), 5, 0);
return x_0;
}
}
obj* l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_6 = lean::string_iterator_remaining(x_4);
x_7 = lean::mk_nat_obj(1u);
x_8 = lean::nat_add(x_6, x_7);
lean::dec(x_6);
x_10 = l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___closed__1;
x_11 = l_lean_parser_rec__t_run___at_lean_parser_term__parser_run___spec__7(x_0, x_10, x_1, x_8, x_2, x_3, x_4, x_5);
x_12 = lean::cnstr_get(x_11, 0);
x_14 = lean::cnstr_get(x_11, 1);
if (lean::is_exclusive(x_11)) {
 x_16 = x_11;
} else {
 lean::inc(x_12);
 lean::inc(x_14);
 lean::dec(x_11);
 x_16 = lean::box(0);
}
x_17 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_18 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_17, x_12);
if (lean::is_scalar(x_16)) {
 x_19 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_19 = x_16;
}
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_14);
return x_19;
}
}
obj* l_lean_parser_pratt__parser___at_lean_parser_term__parser_run___spec__1___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_11; obj* x_12; obj* x_14; obj* x_16; 
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
x_11 = lean::apply_5(x_0, x_3, x_4, x_5, x_6, x_7);
x_12 = lean::cnstr_get(x_11, 0);
x_14 = lean::cnstr_get(x_11, 1);
if (lean::is_exclusive(x_11)) {
 lean::cnstr_set(x_11, 0, lean::box(0));
 lean::cnstr_set(x_11, 1, lean::box(0));
 x_16 = x_11;
} else {
 lean::inc(x_12);
 lean::inc(x_14);
 lean::dec(x_11);
 x_16 = lean::box(0);
}
if (lean::obj_tag(x_12) == 0)
{
obj* x_17; obj* x_19; obj* x_21; obj* x_24; obj* x_25; obj* x_26; obj* x_28; obj* x_29; obj* x_31; obj* x_34; obj* x_35; obj* x_36; obj* x_37; 
x_17 = lean::cnstr_get(x_12, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_12, 1);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_12, 2);
lean::inc(x_21);
lean::dec(x_12);
x_24 = lean::string_iterator_remaining(x_19);
x_25 = lean::mk_nat_obj(1u);
x_26 = lean::nat_add(x_24, x_25);
lean::dec(x_24);
x_28 = l___private_init_lean_parser_pratt_1__trailing__loop___main___at_lean_parser_term__parser_run___spec__2(x_1, x_2, x_26, x_17, x_3, x_4, x_5, x_19, x_14);
x_29 = lean::cnstr_get(x_28, 0);
lean::inc(x_29);
x_31 = lean::cnstr_get(x_28, 1);
lean::inc(x_31);
lean::dec(x_28);
x_34 = l_lean_parser_finish__comment__block___closed__2;
x_35 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_34, x_29);
x_36 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_21, x_35);
if (lean::is_scalar(x_16)) {
 x_37 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_37 = x_16;
}
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_31);
return x_37;
}
else
{
obj* x_43; uint8 x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_43 = lean::cnstr_get(x_12, 0);
x_45 = lean::cnstr_get_scalar<uint8>(x_12, sizeof(void*)*1);
if (lean::is_exclusive(x_12)) {
 x_46 = x_12;
} else {
 lean::inc(x_43);
 lean::dec(x_12);
 x_46 = lean::box(0);
}
if (lean::is_scalar(x_46)) {
 x_47 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_47 = x_46;
}
lean::cnstr_set(x_47, 0, x_43);
lean::cnstr_set_scalar(x_47, sizeof(void*)*1, x_45);
x_48 = x_47;
if (lean::is_scalar(x_16)) {
 x_49 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_49 = x_16;
}
lean::cnstr_set(x_49, 0, x_48);
lean::cnstr_set(x_49, 1, x_14);
return x_49;
}
}
}
obj* l_lean_parser_pratt__parser___at_lean_parser_term__parser_run___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; obj* x_8; 
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_lean_parser_pratt__parser___at_lean_parser_term__parser_run___spec__1___lambda__1), 8, 2);
lean::closure_set(x_7, 0, x_0);
lean::closure_set(x_7, 1, x_1);
x_8 = l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5(x_2, x_7, x_3, x_4, x_5, x_6);
return x_8;
}
}
obj* l_lean_parser_term__parser_run(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_6; obj* x_8; obj* x_9; obj* x_12; obj* x_13; obj* x_15; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
lean::inc(x_1);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l___private_init_lean_parser_term_2__leading), 6, 1);
lean::closure_set(x_6, 0, x_1);
lean::inc(x_1);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l___private_init_lean_parser_term_1__trailing), 7, 1);
lean::closure_set(x_8, 0, x_1);
x_9 = lean::cnstr_get(x_1, 0);
lean::inc(x_9);
lean::dec(x_1);
x_12 = l_lean_parser_pratt__parser___at_lean_parser_term__parser_run___spec__1(x_6, x_8, x_0, x_9, x_2, x_3, x_4);
x_13 = lean::cnstr_get(x_12, 0);
x_15 = lean::cnstr_get(x_12, 1);
if (lean::is_exclusive(x_12)) {
 x_17 = x_12;
} else {
 lean::inc(x_13);
 lean::inc(x_15);
 lean::dec(x_12);
 x_17 = lean::box(0);
}
x_18 = l_lean_parser_parsec_result_mk__eps___rarg___closed__1;
x_19 = l_lean_parser_parsec__t_bind__mk__res___rarg(x_18, x_13);
if (lean::is_scalar(x_17)) {
 x_20 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_20 = x_17;
}
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_15);
return x_20;
}
}
void initialize_init_lean_parser_level();
void initialize_init_lean_parser_notation();
void initialize_init_lean_expr();
static bool _G_initialized = false;
void initialize_init_lean_parser_term() {
 if (_G_initialized) return;
 _G_initialized = true;
 initialize_init_lean_parser_level();
 initialize_init_lean_parser_notation();
 initialize_init_lean_expr();
 l_lean_parser_ident__univ__spec = _init_l_lean_parser_ident__univ__spec();
lean::mark_persistent(l_lean_parser_ident__univ__spec);
 l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_ident__univ__spec_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_ident__univ__spec_has__view_x_27 = _init_l_lean_parser_ident__univ__spec_has__view_x_27();
lean::mark_persistent(l_lean_parser_ident__univ__spec_has__view_x_27);
 l_lean_parser_ident__univ__spec_has__view = _init_l_lean_parser_ident__univ__spec_has__view();
lean::mark_persistent(l_lean_parser_ident__univ__spec_has__view);
 l_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens = _init_l_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_ident__univ__spec_parser_lean_parser_has__tokens);
 l_lean_parser_ident__univ__spec_parser_lean_parser_has__view = _init_l_lean_parser_ident__univ__spec_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_ident__univ__spec_parser_lean_parser_has__view);
 l_lean_parser_ident__univ__spec_parser___closed__1 = _init_l_lean_parser_ident__univ__spec_parser___closed__1();
lean::mark_persistent(l_lean_parser_ident__univ__spec_parser___closed__1);
 l_lean_parser_ident__univs = _init_l_lean_parser_ident__univs();
lean::mark_persistent(l_lean_parser_ident__univs);
 l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__3();
lean::mark_persistent(l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__3);
 l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4();
lean::mark_persistent(l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__4);
 l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__5 = _init_l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__5();
lean::mark_persistent(l_lean_parser_ident__univs_has__view_x_27___lambda__1___closed__5);
 l_lean_parser_ident__univs_has__view_x_27 = _init_l_lean_parser_ident__univs_has__view_x_27();
lean::mark_persistent(l_lean_parser_ident__univs_has__view_x_27);
 l_lean_parser_ident__univs_has__view = _init_l_lean_parser_ident__univs_has__view();
lean::mark_persistent(l_lean_parser_ident__univs_has__view);
 l_lean_parser_ident__univs_parser_lean_parser_has__tokens = _init_l_lean_parser_ident__univs_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_ident__univs_parser_lean_parser_has__tokens);
 l_lean_parser_ident__univs_parser_lean_parser_has__view = _init_l_lean_parser_ident__univs_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_ident__univs_parser_lean_parser_has__view);
 l_lean_parser_ident__univs_parser___closed__1 = _init_l_lean_parser_ident__univs_parser___closed__1();
lean::mark_persistent(l_lean_parser_ident__univs_parser___closed__1);
 l_lean_parser_term_lean_parser_has__tokens = _init_l_lean_parser_term_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_lean_parser_has__tokens);
 l_lean_parser_term_lean_parser_has__view = _init_l_lean_parser_term_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_lean_parser_has__view);
 l_lean_parser_term_tuple = _init_l_lean_parser_term_tuple();
lean::mark_persistent(l_lean_parser_term_tuple);
 l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__3();
lean::mark_persistent(l_lean_parser_term_tuple_has__view_x_27___lambda__1___closed__3);
 l_lean_parser_term_tuple_has__view_x_27 = _init_l_lean_parser_term_tuple_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_tuple_has__view_x_27);
 l_lean_parser_term_tuple_has__view = _init_l_lean_parser_term_tuple_has__view();
lean::mark_persistent(l_lean_parser_term_tuple_has__view);
 l_lean_parser_term_typed = _init_l_lean_parser_term_typed();
lean::mark_persistent(l_lean_parser_term_typed);
 l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_typed_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_typed_has__view_x_27 = _init_l_lean_parser_term_typed_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_typed_has__view_x_27);
 l_lean_parser_term_typed_has__view = _init_l_lean_parser_term_typed_has__view();
lean::mark_persistent(l_lean_parser_term_typed_has__view);
 l_lean_parser_term_paren__special = _init_l_lean_parser_term_paren__special();
lean::mark_persistent(l_lean_parser_term_paren__special);
 l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_paren__special_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_paren__special_has__view_x_27 = _init_l_lean_parser_term_paren__special_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_paren__special_has__view_x_27);
 l_lean_parser_term_paren__special_has__view = _init_l_lean_parser_term_paren__special_has__view();
lean::mark_persistent(l_lean_parser_term_paren__special_has__view);
 l_lean_parser_term_paren__content = _init_l_lean_parser_term_paren__content();
lean::mark_persistent(l_lean_parser_term_paren__content);
 l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_paren__content_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_paren__content_has__view_x_27 = _init_l_lean_parser_term_paren__content_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_paren__content_has__view_x_27);
 l_lean_parser_term_paren__content_has__view = _init_l_lean_parser_term_paren__content_has__view();
lean::mark_persistent(l_lean_parser_term_paren__content_has__view);
 l_lean_parser_term_paren = _init_l_lean_parser_term_paren();
lean::mark_persistent(l_lean_parser_term_paren);
 l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_paren_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_paren_has__view_x_27 = _init_l_lean_parser_term_paren_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_paren_has__view_x_27);
 l_lean_parser_term_paren_has__view = _init_l_lean_parser_term_paren_has__view();
lean::mark_persistent(l_lean_parser_term_paren_has__view);
 l_lean_parser_term_paren_parser_lean_parser_has__tokens = _init_l_lean_parser_term_paren_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_paren_parser_lean_parser_has__tokens);
 l_lean_parser_term_paren_parser_lean_parser_has__view = _init_l_lean_parser_term_paren_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_paren_parser_lean_parser_has__view);
 l_lean_parser_term_paren_parser___closed__1 = _init_l_lean_parser_term_paren_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_paren_parser___closed__1);
 l_lean_parser_term_hole = _init_l_lean_parser_term_hole();
lean::mark_persistent(l_lean_parser_term_hole);
 l_lean_parser_term_hole_has__view_x_27 = _init_l_lean_parser_term_hole_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_hole_has__view_x_27);
 l_lean_parser_term_hole_has__view = _init_l_lean_parser_term_hole_has__view();
lean::mark_persistent(l_lean_parser_term_hole_has__view);
 l_lean_parser_term_hole_parser_lean_parser_has__tokens = _init_l_lean_parser_term_hole_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_hole_parser_lean_parser_has__tokens);
 l_lean_parser_term_hole_parser_lean_parser_has__view = _init_l_lean_parser_term_hole_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_hole_parser_lean_parser_has__view);
 l_lean_parser_term_hole_parser___closed__1 = _init_l_lean_parser_term_hole_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_hole_parser___closed__1);
 l_lean_parser_term_sort = _init_l_lean_parser_term_sort();
lean::mark_persistent(l_lean_parser_term_sort);
 l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3();
lean::mark_persistent(l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__3);
 l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__4();
lean::mark_persistent(l_lean_parser_term_sort_has__view_x_27___lambda__1___closed__4);
 l_lean_parser_term_sort_has__view_x_27 = _init_l_lean_parser_term_sort_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_sort_has__view_x_27);
 l_lean_parser_term_sort_has__view = _init_l_lean_parser_term_sort_has__view();
lean::mark_persistent(l_lean_parser_term_sort_has__view);
 l_lean_parser_term_sort_parser_lean_parser_has__tokens = _init_l_lean_parser_term_sort_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_sort_parser_lean_parser_has__tokens);
 l_lean_parser_term_sort_parser_lean_parser_has__view = _init_l_lean_parser_term_sort_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_sort_parser_lean_parser_has__view);
 l_lean_parser_term_sort_parser___closed__1 = _init_l_lean_parser_term_sort_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_sort_parser___closed__1);
 l_lean_parser_term_type__spec = _init_l_lean_parser_term_type__spec();
lean::mark_persistent(l_lean_parser_term_type__spec);
 l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_type__spec_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_type__spec_has__view_x_27 = _init_l_lean_parser_term_type__spec_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_type__spec_has__view_x_27);
 l_lean_parser_term_type__spec_has__view = _init_l_lean_parser_term_type__spec_has__view();
lean::mark_persistent(l_lean_parser_term_type__spec_has__view);
 l_lean_parser_term_type__spec_parser_lean_parser_has__tokens = _init_l_lean_parser_term_type__spec_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_type__spec_parser_lean_parser_has__tokens);
 l_lean_parser_term_type__spec_parser_lean_parser_has__view = _init_l_lean_parser_term_type__spec_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_type__spec_parser_lean_parser_has__view);
 l_lean_parser_term_type__spec_parser___closed__1 = _init_l_lean_parser_term_type__spec_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_type__spec_parser___closed__1);
 l_lean_parser_term_opt__type_parser_lean_parser_has__tokens = _init_l_lean_parser_term_opt__type_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_opt__type_parser_lean_parser_has__tokens);
 l_lean_parser_term_opt__type_parser_lean_parser_has__view = _init_l_lean_parser_term_opt__type_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_opt__type_parser_lean_parser_has__view);
 l_lean_parser_term_opt__type_parser___closed__1 = _init_l_lean_parser_term_opt__type_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_opt__type_parser___closed__1);
 l_lean_parser_term_opt__type_view__default = _init_l_lean_parser_term_opt__type_view__default();
lean::mark_persistent(l_lean_parser_term_opt__type_view__default);
 l_lean_parser_term_binder__ident = _init_l_lean_parser_term_binder__ident();
lean::mark_persistent(l_lean_parser_term_binder__ident);
 l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3();
lean::mark_persistent(l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__3);
 l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__4();
lean::mark_persistent(l_lean_parser_term_binder__ident_has__view_x_27___lambda__1___closed__4);
 l_lean_parser_term_binder__ident_has__view_x_27 = _init_l_lean_parser_term_binder__ident_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_binder__ident_has__view_x_27);
 l_lean_parser_term_binder__ident_has__view = _init_l_lean_parser_term_binder__ident_has__view();
lean::mark_persistent(l_lean_parser_term_binder__ident_has__view);
 l_lean_parser_term_binder__ident_parser_lean_parser_has__tokens = _init_l_lean_parser_term_binder__ident_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_binder__ident_parser_lean_parser_has__tokens);
 l_lean_parser_term_binder__ident_parser_lean_parser_has__view = _init_l_lean_parser_term_binder__ident_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_binder__ident_parser_lean_parser_has__view);
 l_lean_parser_term_binder__ident_parser___closed__1 = _init_l_lean_parser_term_binder__ident_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_binder__ident_parser___closed__1);
 l_lean_parser_term_binder__default__val = _init_l_lean_parser_term_binder__default__val();
lean::mark_persistent(l_lean_parser_term_binder__default__val);
 l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_binder__default__val_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_binder__default__val_has__view_x_27 = _init_l_lean_parser_term_binder__default__val_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_binder__default__val_has__view_x_27);
 l_lean_parser_term_binder__default__val_has__view = _init_l_lean_parser_term_binder__default__val_has__view();
lean::mark_persistent(l_lean_parser_term_binder__default__val_has__view);
 l_lean_parser_term_binder__default__tac = _init_l_lean_parser_term_binder__default__tac();
lean::mark_persistent(l_lean_parser_term_binder__default__tac);
 l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_binder__default__tac_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_binder__default__tac_has__view_x_27 = _init_l_lean_parser_term_binder__default__tac_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_binder__default__tac_has__view_x_27);
 l_lean_parser_term_binder__default__tac_has__view = _init_l_lean_parser_term_binder__default__tac_has__view();
lean::mark_persistent(l_lean_parser_term_binder__default__tac_has__view);
 l_lean_parser_term_binder__default = _init_l_lean_parser_term_binder__default();
lean::mark_persistent(l_lean_parser_term_binder__default);
 l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_binder__default_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_binder__default_has__view_x_27 = _init_l_lean_parser_term_binder__default_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_binder__default_has__view_x_27);
 l_lean_parser_term_binder__default_has__view = _init_l_lean_parser_term_binder__default_has__view();
lean::mark_persistent(l_lean_parser_term_binder__default_has__view);
 l_lean_parser_term_binder__default_parser_lean_parser_has__tokens = _init_l_lean_parser_term_binder__default_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_binder__default_parser_lean_parser_has__tokens);
 l_lean_parser_term_binder__default_parser_lean_parser_has__view = _init_l_lean_parser_term_binder__default_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_binder__default_parser_lean_parser_has__view);
 l_lean_parser_term_binder__default_parser___closed__1 = _init_l_lean_parser_term_binder__default_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_binder__default_parser___closed__1);
 l_lean_parser_term_binder__content = _init_l_lean_parser_term_binder__content();
lean::mark_persistent(l_lean_parser_term_binder__content);
 l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3();
lean::mark_persistent(l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__3);
 l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4();
lean::mark_persistent(l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__4);
 l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__5 = _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__5();
lean::mark_persistent(l_lean_parser_term_binder__content_has__view_x_27___lambda__1___closed__5);
 l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__1 = _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__1();
lean::mark_persistent(l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__1);
 l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__2 = _init_l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__2();
lean::mark_persistent(l_lean_parser_term_binder__content_has__view_x_27___lambda__2___closed__2);
 l_lean_parser_term_binder__content_has__view_x_27 = _init_l_lean_parser_term_binder__content_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_binder__content_has__view_x_27);
 l_lean_parser_term_binder__content_has__view = _init_l_lean_parser_term_binder__content_has__view();
lean::mark_persistent(l_lean_parser_term_binder__content_has__view);
 l_lean_parser_term_binder__content_parser_lean_parser_has__tokens = _init_l_lean_parser_term_binder__content_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_binder__content_parser_lean_parser_has__tokens);
 l_lean_parser_term_binder__content_parser_lean_parser_has__view = _init_l_lean_parser_term_binder__content_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_binder__content_parser_lean_parser_has__view);
 l_lean_parser_term_binder__content_parser___closed__1 = _init_l_lean_parser_term_binder__content_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_binder__content_parser___closed__1);
 l_lean_parser_term_simple__explicit__binder = _init_l_lean_parser_term_simple__explicit__binder();
lean::mark_persistent(l_lean_parser_term_simple__explicit__binder);
 l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_simple__explicit__binder_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_simple__explicit__binder_has__view_x_27 = _init_l_lean_parser_term_simple__explicit__binder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_simple__explicit__binder_has__view_x_27);
 l_lean_parser_term_simple__explicit__binder_has__view = _init_l_lean_parser_term_simple__explicit__binder_has__view();
lean::mark_persistent(l_lean_parser_term_simple__explicit__binder_has__view);
 l_lean_parser_term_simple__implicit__binder = _init_l_lean_parser_term_simple__implicit__binder();
lean::mark_persistent(l_lean_parser_term_simple__implicit__binder);
 l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_simple__implicit__binder_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_simple__implicit__binder_has__view_x_27 = _init_l_lean_parser_term_simple__implicit__binder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_simple__implicit__binder_has__view_x_27);
 l_lean_parser_term_simple__implicit__binder_has__view = _init_l_lean_parser_term_simple__implicit__binder_has__view();
lean::mark_persistent(l_lean_parser_term_simple__implicit__binder_has__view);
 l_lean_parser_term_simple__strict__implicit__binder = _init_l_lean_parser_term_simple__strict__implicit__binder();
lean::mark_persistent(l_lean_parser_term_simple__strict__implicit__binder);
 l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27 = _init_l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_simple__strict__implicit__binder_has__view_x_27);
 l_lean_parser_term_simple__strict__implicit__binder_has__view = _init_l_lean_parser_term_simple__strict__implicit__binder_has__view();
lean::mark_persistent(l_lean_parser_term_simple__strict__implicit__binder_has__view);
 l_lean_parser_term_simple__inst__implicit__binder = _init_l_lean_parser_term_simple__inst__implicit__binder();
lean::mark_persistent(l_lean_parser_term_simple__inst__implicit__binder);
 l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27 = _init_l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_simple__inst__implicit__binder_has__view_x_27);
 l_lean_parser_term_simple__inst__implicit__binder_has__view = _init_l_lean_parser_term_simple__inst__implicit__binder_has__view();
lean::mark_persistent(l_lean_parser_term_simple__inst__implicit__binder_has__view);
 l_lean_parser_term_simple__binder = _init_l_lean_parser_term_simple__binder();
lean::mark_persistent(l_lean_parser_term_simple__binder);
 l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_simple__binder_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_simple__binder_has__view_x_27 = _init_l_lean_parser_term_simple__binder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_simple__binder_has__view_x_27);
 l_lean_parser_term_simple__binder_has__view = _init_l_lean_parser_term_simple__binder_has__view();
lean::mark_persistent(l_lean_parser_term_simple__binder_has__view);
 l_lean_parser_term_simple__binder_parser_lean_parser_has__tokens = _init_l_lean_parser_term_simple__binder_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_simple__binder_parser_lean_parser_has__tokens);
 l_lean_parser_term_simple__binder_parser_lean_parser_has__view = _init_l_lean_parser_term_simple__binder_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_simple__binder_parser_lean_parser_has__view);
 l_lean_parser_term_simple__binder_parser___closed__1 = _init_l_lean_parser_term_simple__binder_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_simple__binder_parser___closed__1);
 l_lean_parser_term_anonymous__constructor = _init_l_lean_parser_term_anonymous__constructor();
lean::mark_persistent(l_lean_parser_term_anonymous__constructor);
 l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_anonymous__constructor_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_anonymous__constructor_has__view_x_27 = _init_l_lean_parser_term_anonymous__constructor_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_anonymous__constructor_has__view_x_27);
 l_lean_parser_term_anonymous__constructor_has__view = _init_l_lean_parser_term_anonymous__constructor_has__view();
lean::mark_persistent(l_lean_parser_term_anonymous__constructor_has__view);
 l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__tokens = _init_l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__tokens);
 l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__view = _init_l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_anonymous__constructor_parser_lean_parser_has__view);
 l_lean_parser_term_anonymous__constructor_parser___closed__1 = _init_l_lean_parser_term_anonymous__constructor_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_anonymous__constructor_parser___closed__1);
 l_lean_parser_term_explicit__binder__content = _init_l_lean_parser_term_explicit__binder__content();
lean::mark_persistent(l_lean_parser_term_explicit__binder__content);
 l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_explicit__binder__content_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_explicit__binder__content_has__view_x_27 = _init_l_lean_parser_term_explicit__binder__content_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_explicit__binder__content_has__view_x_27);
 l_lean_parser_term_explicit__binder__content_has__view = _init_l_lean_parser_term_explicit__binder__content_has__view();
lean::mark_persistent(l_lean_parser_term_explicit__binder__content_has__view);
 l_lean_parser_term_explicit__binder = _init_l_lean_parser_term_explicit__binder();
lean::mark_persistent(l_lean_parser_term_explicit__binder);
 l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_explicit__binder_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_explicit__binder_has__view_x_27 = _init_l_lean_parser_term_explicit__binder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_explicit__binder_has__view_x_27);
 l_lean_parser_term_explicit__binder_has__view = _init_l_lean_parser_term_explicit__binder_has__view();
lean::mark_persistent(l_lean_parser_term_explicit__binder_has__view);
 l_lean_parser_term_implicit__binder = _init_l_lean_parser_term_implicit__binder();
lean::mark_persistent(l_lean_parser_term_implicit__binder);
 l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_implicit__binder_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_implicit__binder_has__view_x_27 = _init_l_lean_parser_term_implicit__binder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_implicit__binder_has__view_x_27);
 l_lean_parser_term_implicit__binder_has__view = _init_l_lean_parser_term_implicit__binder_has__view();
lean::mark_persistent(l_lean_parser_term_implicit__binder_has__view);
 l_lean_parser_term_strict__implicit__binder = _init_l_lean_parser_term_strict__implicit__binder();
lean::mark_persistent(l_lean_parser_term_strict__implicit__binder);
 l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_strict__implicit__binder_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_strict__implicit__binder_has__view_x_27 = _init_l_lean_parser_term_strict__implicit__binder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_strict__implicit__binder_has__view_x_27);
 l_lean_parser_term_strict__implicit__binder_has__view = _init_l_lean_parser_term_strict__implicit__binder_has__view();
lean::mark_persistent(l_lean_parser_term_strict__implicit__binder_has__view);
 l_lean_parser_term_inst__implicit__named__binder = _init_l_lean_parser_term_inst__implicit__named__binder();
lean::mark_persistent(l_lean_parser_term_inst__implicit__named__binder);
 l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_inst__implicit__named__binder_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_inst__implicit__named__binder_has__view_x_27 = _init_l_lean_parser_term_inst__implicit__named__binder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_inst__implicit__named__binder_has__view_x_27);
 l_lean_parser_term_inst__implicit__named__binder_has__view = _init_l_lean_parser_term_inst__implicit__named__binder_has__view();
lean::mark_persistent(l_lean_parser_term_inst__implicit__named__binder_has__view);
 l_lean_parser_term_inst__implicit__anonymous__binder = _init_l_lean_parser_term_inst__implicit__anonymous__binder();
lean::mark_persistent(l_lean_parser_term_inst__implicit__anonymous__binder);
 l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27 = _init_l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_inst__implicit__anonymous__binder_has__view_x_27);
 l_lean_parser_term_inst__implicit__anonymous__binder_has__view = _init_l_lean_parser_term_inst__implicit__anonymous__binder_has__view();
lean::mark_persistent(l_lean_parser_term_inst__implicit__anonymous__binder_has__view);
 l_lean_parser_term_inst__implicit__binder__content = _init_l_lean_parser_term_inst__implicit__binder__content();
lean::mark_persistent(l_lean_parser_term_inst__implicit__binder__content);
 l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_inst__implicit__binder__content_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_inst__implicit__binder__content_has__view_x_27 = _init_l_lean_parser_term_inst__implicit__binder__content_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_inst__implicit__binder__content_has__view_x_27);
 l_lean_parser_term_inst__implicit__binder__content_has__view = _init_l_lean_parser_term_inst__implicit__binder__content_has__view();
lean::mark_persistent(l_lean_parser_term_inst__implicit__binder__content_has__view);
 l_lean_parser_term_inst__implicit__binder = _init_l_lean_parser_term_inst__implicit__binder();
lean::mark_persistent(l_lean_parser_term_inst__implicit__binder);
 l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_inst__implicit__binder_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_inst__implicit__binder_has__view_x_27 = _init_l_lean_parser_term_inst__implicit__binder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_inst__implicit__binder_has__view_x_27);
 l_lean_parser_term_inst__implicit__binder_has__view = _init_l_lean_parser_term_inst__implicit__binder_has__view();
lean::mark_persistent(l_lean_parser_term_inst__implicit__binder_has__view);
 l_lean_parser_term_bracketed__binder = _init_l_lean_parser_term_bracketed__binder();
lean::mark_persistent(l_lean_parser_term_bracketed__binder);
 l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_bracketed__binder_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_bracketed__binder_has__view_x_27 = _init_l_lean_parser_term_bracketed__binder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_bracketed__binder_has__view_x_27);
 l_lean_parser_term_bracketed__binder_has__view = _init_l_lean_parser_term_bracketed__binder_has__view();
lean::mark_persistent(l_lean_parser_term_bracketed__binder_has__view);
 l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens = _init_l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_bracketed__binder_parser_lean_parser_has__tokens);
 l_lean_parser_term_bracketed__binder_parser_lean_parser_has__view = _init_l_lean_parser_term_bracketed__binder_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_bracketed__binder_parser_lean_parser_has__view);
 l_lean_parser_term_bracketed__binder_parser___closed__1 = _init_l_lean_parser_term_bracketed__binder_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_bracketed__binder_parser___closed__1);
 l_lean_parser_term_binder = _init_l_lean_parser_term_binder();
lean::mark_persistent(l_lean_parser_term_binder);
 l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_binder_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_binder_has__view_x_27 = _init_l_lean_parser_term_binder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_binder_has__view_x_27);
 l_lean_parser_term_binder_has__view = _init_l_lean_parser_term_binder_has__view();
lean::mark_persistent(l_lean_parser_term_binder_has__view);
 l_lean_parser_term_binder_parser_lean_parser_has__tokens = _init_l_lean_parser_term_binder_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_binder_parser_lean_parser_has__tokens);
 l_lean_parser_term_binder_parser_lean_parser_has__view = _init_l_lean_parser_term_binder_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_binder_parser_lean_parser_has__view);
 l_lean_parser_term_binder_parser___closed__1 = _init_l_lean_parser_term_binder_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_binder_parser___closed__1);
 l_lean_parser_term_binders__types = _init_l_lean_parser_term_binders__types();
lean::mark_persistent(l_lean_parser_term_binders__types);
 l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_binders__types_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_binders__types_has__view_x_27 = _init_l_lean_parser_term_binders__types_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_binders__types_has__view_x_27);
 l_lean_parser_term_binders__types_has__view = _init_l_lean_parser_term_binders__types_has__view();
lean::mark_persistent(l_lean_parser_term_binders__types_has__view);
 l_lean_parser_term_mixed__binder = _init_l_lean_parser_term_mixed__binder();
lean::mark_persistent(l_lean_parser_term_mixed__binder);
 l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_mixed__binder_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_mixed__binder_has__view_x_27 = _init_l_lean_parser_term_mixed__binder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_mixed__binder_has__view_x_27);
 l_lean_parser_term_mixed__binder_has__view = _init_l_lean_parser_term_mixed__binder_has__view();
lean::mark_persistent(l_lean_parser_term_mixed__binder_has__view);
 l_lean_parser_term_binders__remainder = _init_l_lean_parser_term_binders__remainder();
lean::mark_persistent(l_lean_parser_term_binders__remainder);
 l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3();
lean::mark_persistent(l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__3);
 l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__4();
lean::mark_persistent(l_lean_parser_term_binders__remainder_has__view_x_27___lambda__1___closed__4);
 l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2___closed__1 = _init_l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2___closed__1();
lean::mark_persistent(l_lean_parser_term_binders__remainder_has__view_x_27___lambda__2___closed__1);
 l_lean_parser_term_binders__remainder_has__view_x_27 = _init_l_lean_parser_term_binders__remainder_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_binders__remainder_has__view_x_27);
 l_lean_parser_term_binders__remainder_has__view = _init_l_lean_parser_term_binders__remainder_has__view();
lean::mark_persistent(l_lean_parser_term_binders__remainder_has__view);
 l_lean_parser_term_binders__ext = _init_l_lean_parser_term_binders__ext();
lean::mark_persistent(l_lean_parser_term_binders__ext);
 l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__3();
lean::mark_persistent(l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__3);
 l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4();
lean::mark_persistent(l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__4);
 l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__5 = _init_l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__5();
lean::mark_persistent(l_lean_parser_term_binders__ext_has__view_x_27___lambda__1___closed__5);
 l_lean_parser_term_binders__ext_has__view_x_27 = _init_l_lean_parser_term_binders__ext_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_binders__ext_has__view_x_27);
 l_lean_parser_term_binders__ext_has__view = _init_l_lean_parser_term_binders__ext_has__view();
lean::mark_persistent(l_lean_parser_term_binders__ext_has__view);
 l_lean_parser_term_binders__ext_parser_lean_parser_has__tokens = _init_l_lean_parser_term_binders__ext_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_binders__ext_parser_lean_parser_has__tokens);
 l_lean_parser_term_binders__ext_parser_lean_parser_has__view = _init_l_lean_parser_term_binders__ext_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_binders__ext_parser_lean_parser_has__view);
 l_lean_parser_term_binders__ext_parser___closed__1 = _init_l_lean_parser_term_binders__ext_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_binders__ext_parser___closed__1);
 l_lean_parser_term_binders = _init_l_lean_parser_term_binders();
lean::mark_persistent(l_lean_parser_term_binders);
 l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_binders_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_binders_has__view_x_27 = _init_l_lean_parser_term_binders_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_binders_has__view_x_27);
 l_lean_parser_term_binders_has__view = _init_l_lean_parser_term_binders_has__view();
lean::mark_persistent(l_lean_parser_term_binders_has__view);
 l_lean_parser_term_binders_parser_lean_parser_has__tokens = _init_l_lean_parser_term_binders_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_binders_parser_lean_parser_has__tokens);
 l_lean_parser_term_binders_parser_lean_parser_has__view = _init_l_lean_parser_term_binders_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_binders_parser_lean_parser_has__view);
 l_lean_parser_term_binders_parser___closed__1 = _init_l_lean_parser_term_binders_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_binders_parser___closed__1);
 l_lean_parser_term_bracketed__binders = _init_l_lean_parser_term_bracketed__binders();
lean::mark_persistent(l_lean_parser_term_bracketed__binders);
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__3();
lean::mark_persistent(l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__3);
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4();
lean::mark_persistent(l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__4);
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5();
lean::mark_persistent(l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__5);
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__6 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__6();
lean::mark_persistent(l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__1___closed__6);
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__1 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__1();
lean::mark_persistent(l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__1);
 l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__2 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__2();
lean::mark_persistent(l_lean_parser_term_bracketed__binders_has__view_x_27___lambda__2___closed__2);
 l_lean_parser_term_bracketed__binders_has__view_x_27 = _init_l_lean_parser_term_bracketed__binders_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_bracketed__binders_has__view_x_27);
 l_lean_parser_term_bracketed__binders_has__view = _init_l_lean_parser_term_bracketed__binders_has__view();
lean::mark_persistent(l_lean_parser_term_bracketed__binders_has__view);
 l_lean_parser_term_bracketed__binders_parser_lean_parser_has__tokens = _init_l_lean_parser_term_bracketed__binders_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_bracketed__binders_parser_lean_parser_has__tokens);
 l_lean_parser_term_bracketed__binders_parser_lean_parser_has__view = _init_l_lean_parser_term_bracketed__binders_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_bracketed__binders_parser_lean_parser_has__view);
 l_lean_parser_term_bracketed__binders_parser___closed__1 = _init_l_lean_parser_term_bracketed__binders_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_bracketed__binders_parser___closed__1);
 l_lean_parser_term_lambda = _init_l_lean_parser_term_lambda();
lean::mark_persistent(l_lean_parser_term_lambda);
 l_lean_parser_term_lambda_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_lambda_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_lambda_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_lambda_has__view_x_27 = _init_l_lean_parser_term_lambda_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_lambda_has__view_x_27);
 l_lean_parser_term_lambda_has__view = _init_l_lean_parser_term_lambda_has__view();
lean::mark_persistent(l_lean_parser_term_lambda_has__view);
 l_lean_parser_term_lambda_parser_lean_parser_has__tokens = _init_l_lean_parser_term_lambda_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_lambda_parser_lean_parser_has__tokens);
 l_lean_parser_term_lambda_parser_lean_parser_has__view = _init_l_lean_parser_term_lambda_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_lambda_parser_lean_parser_has__view);
 l_lean_parser_term_lambda_parser___closed__1 = _init_l_lean_parser_term_lambda_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_lambda_parser___closed__1);
 l_lean_parser_term_assume__anonymous = _init_l_lean_parser_term_assume__anonymous();
lean::mark_persistent(l_lean_parser_term_assume__anonymous);
 l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_assume__anonymous_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_assume__anonymous_has__view_x_27 = _init_l_lean_parser_term_assume__anonymous_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_assume__anonymous_has__view_x_27);
 l_lean_parser_term_assume__anonymous_has__view = _init_l_lean_parser_term_assume__anonymous_has__view();
lean::mark_persistent(l_lean_parser_term_assume__anonymous_has__view);
 l_lean_parser_term_assume__binders = _init_l_lean_parser_term_assume__binders();
lean::mark_persistent(l_lean_parser_term_assume__binders);
 l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_assume__binders_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_assume__binders_has__view_x_27 = _init_l_lean_parser_term_assume__binders_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_assume__binders_has__view_x_27);
 l_lean_parser_term_assume__binders_has__view = _init_l_lean_parser_term_assume__binders_has__view();
lean::mark_persistent(l_lean_parser_term_assume__binders_has__view);
 l_lean_parser_term_assume = _init_l_lean_parser_term_assume();
lean::mark_persistent(l_lean_parser_term_assume);
 l_lean_parser_term_assume_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_assume_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_assume_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_assume_has__view_x_27 = _init_l_lean_parser_term_assume_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_assume_has__view_x_27);
 l_lean_parser_term_assume_has__view = _init_l_lean_parser_term_assume_has__view();
lean::mark_persistent(l_lean_parser_term_assume_has__view);
 l_lean_parser_term_assume_parser_lean_parser_has__tokens = _init_l_lean_parser_term_assume_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_assume_parser_lean_parser_has__tokens);
 l_lean_parser_term_assume_parser_lean_parser_has__view = _init_l_lean_parser_term_assume_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_assume_parser_lean_parser_has__view);
 l_lean_parser_term_assume_parser___closed__1 = _init_l_lean_parser_term_assume_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_assume_parser___closed__1);
 l_lean_parser_term_pi = _init_l_lean_parser_term_pi();
lean::mark_persistent(l_lean_parser_term_pi);
 l_lean_parser_term_pi_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_pi_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_pi_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_pi_has__view_x_27 = _init_l_lean_parser_term_pi_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_pi_has__view_x_27);
 l_lean_parser_term_pi_has__view = _init_l_lean_parser_term_pi_has__view();
lean::mark_persistent(l_lean_parser_term_pi_has__view);
 l_lean_parser_term_pi_parser_lean_parser_has__tokens = _init_l_lean_parser_term_pi_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_pi_parser_lean_parser_has__tokens);
 l_lean_parser_term_pi_parser_lean_parser_has__view = _init_l_lean_parser_term_pi_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_pi_parser_lean_parser_has__view);
 l_lean_parser_term_pi_parser___closed__1 = _init_l_lean_parser_term_pi_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_pi_parser___closed__1);
 l_lean_parser_term_explicit__modifier = _init_l_lean_parser_term_explicit__modifier();
lean::mark_persistent(l_lean_parser_term_explicit__modifier);
 l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3();
lean::mark_persistent(l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__3);
 l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__4();
lean::mark_persistent(l_lean_parser_term_explicit__modifier_has__view_x_27___lambda__1___closed__4);
 l_lean_parser_term_explicit__modifier_has__view_x_27 = _init_l_lean_parser_term_explicit__modifier_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_explicit__modifier_has__view_x_27);
 l_lean_parser_term_explicit__modifier_has__view = _init_l_lean_parser_term_explicit__modifier_has__view();
lean::mark_persistent(l_lean_parser_term_explicit__modifier_has__view);
 l_lean_parser_term_explicit = _init_l_lean_parser_term_explicit();
lean::mark_persistent(l_lean_parser_term_explicit);
 l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__3();
lean::mark_persistent(l_lean_parser_term_explicit_has__view_x_27___lambda__1___closed__3);
 l_lean_parser_term_explicit_has__view_x_27 = _init_l_lean_parser_term_explicit_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_explicit_has__view_x_27);
 l_lean_parser_term_explicit_has__view = _init_l_lean_parser_term_explicit_has__view();
lean::mark_persistent(l_lean_parser_term_explicit_has__view);
 l_lean_parser_term_explicit_parser_lean_parser_has__tokens = _init_l_lean_parser_term_explicit_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_explicit_parser_lean_parser_has__tokens);
 l_lean_parser_term_explicit_parser_lean_parser_has__view = _init_l_lean_parser_term_explicit_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_explicit_parser_lean_parser_has__view);
 l_lean_parser_term_explicit_parser___closed__1 = _init_l_lean_parser_term_explicit_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_explicit_parser___closed__1);
 l_lean_parser_term_from = _init_l_lean_parser_term_from();
lean::mark_persistent(l_lean_parser_term_from);
 l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_from_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_from_has__view_x_27 = _init_l_lean_parser_term_from_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_from_has__view_x_27);
 l_lean_parser_term_from_has__view = _init_l_lean_parser_term_from_has__view();
lean::mark_persistent(l_lean_parser_term_from_has__view);
 l_lean_parser_term_from_parser_lean_parser_has__tokens = _init_l_lean_parser_term_from_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_from_parser_lean_parser_has__tokens);
 l_lean_parser_term_from_parser_lean_parser_has__view = _init_l_lean_parser_term_from_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_from_parser_lean_parser_has__view);
 l_lean_parser_term_from_parser___closed__1 = _init_l_lean_parser_term_from_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_from_parser___closed__1);
 l_lean_parser_term_let__lhs__id = _init_l_lean_parser_term_let__lhs__id();
lean::mark_persistent(l_lean_parser_term_let__lhs__id);
 l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_let__lhs__id_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_let__lhs__id_has__view_x_27 = _init_l_lean_parser_term_let__lhs__id_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_let__lhs__id_has__view_x_27);
 l_lean_parser_term_let__lhs__id_has__view = _init_l_lean_parser_term_let__lhs__id_has__view();
lean::mark_persistent(l_lean_parser_term_let__lhs__id_has__view);
 l_lean_parser_term_let__lhs = _init_l_lean_parser_term_let__lhs();
lean::mark_persistent(l_lean_parser_term_let__lhs);
 l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_let__lhs_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_let__lhs_has__view_x_27 = _init_l_lean_parser_term_let__lhs_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_let__lhs_has__view_x_27);
 l_lean_parser_term_let__lhs_has__view = _init_l_lean_parser_term_let__lhs_has__view();
lean::mark_persistent(l_lean_parser_term_let__lhs_has__view);
 l_lean_parser_term_let = _init_l_lean_parser_term_let();
lean::mark_persistent(l_lean_parser_term_let);
 l_lean_parser_term_let_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_let_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_let_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_let_has__view_x_27 = _init_l_lean_parser_term_let_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_let_has__view_x_27);
 l_lean_parser_term_let_has__view = _init_l_lean_parser_term_let_has__view();
lean::mark_persistent(l_lean_parser_term_let_has__view);
 l_lean_parser_term_let_parser_lean_parser_has__tokens = _init_l_lean_parser_term_let_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_let_parser_lean_parser_has__tokens);
 l_lean_parser_term_let_parser_lean_parser_has__view = _init_l_lean_parser_term_let_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_let_parser_lean_parser_has__view);
 l_lean_parser_term_let_parser___closed__1 = _init_l_lean_parser_term_let_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_let_parser___closed__1);
 l_lean_parser_term_opt__ident = _init_l_lean_parser_term_opt__ident();
lean::mark_persistent(l_lean_parser_term_opt__ident);
 l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_opt__ident_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_opt__ident_has__view_x_27 = _init_l_lean_parser_term_opt__ident_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_opt__ident_has__view_x_27);
 l_lean_parser_term_opt__ident_has__view = _init_l_lean_parser_term_opt__ident_has__view();
lean::mark_persistent(l_lean_parser_term_opt__ident_has__view);
 l_lean_parser_term_opt__ident_parser_lean_parser_has__tokens = _init_l_lean_parser_term_opt__ident_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_opt__ident_parser_lean_parser_has__tokens);
 l_lean_parser_term_opt__ident_parser_lean_parser_has__view = _init_l_lean_parser_term_opt__ident_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_opt__ident_parser_lean_parser_has__view);
 l_lean_parser_term_opt__ident_parser___closed__1 = _init_l_lean_parser_term_opt__ident_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_opt__ident_parser___closed__1);
 l_lean_parser_term_have__term = _init_l_lean_parser_term_have__term();
lean::mark_persistent(l_lean_parser_term_have__term);
 l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_have__term_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_have__term_has__view_x_27 = _init_l_lean_parser_term_have__term_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_have__term_has__view_x_27);
 l_lean_parser_term_have__term_has__view = _init_l_lean_parser_term_have__term_has__view();
lean::mark_persistent(l_lean_parser_term_have__term_has__view);
 l_lean_parser_term_have__from = _init_l_lean_parser_term_have__from();
lean::mark_persistent(l_lean_parser_term_have__from);
 l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__3();
lean::mark_persistent(l_lean_parser_term_have__from_has__view_x_27___lambda__1___closed__3);
 l_lean_parser_term_have__from_has__view_x_27 = _init_l_lean_parser_term_have__from_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_have__from_has__view_x_27);
 l_lean_parser_term_have__from_has__view = _init_l_lean_parser_term_have__from_has__view();
lean::mark_persistent(l_lean_parser_term_have__from_has__view);
 l_lean_parser_term_have__proof = _init_l_lean_parser_term_have__proof();
lean::mark_persistent(l_lean_parser_term_have__proof);
 l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_have__proof_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_have__proof_has__view_x_27 = _init_l_lean_parser_term_have__proof_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_have__proof_has__view_x_27);
 l_lean_parser_term_have__proof_has__view = _init_l_lean_parser_term_have__proof_has__view();
lean::mark_persistent(l_lean_parser_term_have__proof_has__view);
 l_lean_parser_term_have = _init_l_lean_parser_term_have();
lean::mark_persistent(l_lean_parser_term_have);
 l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_have_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_have_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_have_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_have_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_have_has__view_x_27 = _init_l_lean_parser_term_have_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_have_has__view_x_27);
 l_lean_parser_term_have_has__view = _init_l_lean_parser_term_have_has__view();
lean::mark_persistent(l_lean_parser_term_have_has__view);
 l_lean_parser_term_have_parser_lean_parser_has__tokens = _init_l_lean_parser_term_have_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_have_parser_lean_parser_has__tokens);
 l_lean_parser_term_have_parser_lean_parser_has__view = _init_l_lean_parser_term_have_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_have_parser_lean_parser_has__view);
 l_lean_parser_term_have_parser___closed__1 = _init_l_lean_parser_term_have_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_have_parser___closed__1);
 l_lean_parser_term_show = _init_l_lean_parser_term_show();
lean::mark_persistent(l_lean_parser_term_show);
 l_lean_parser_term_show_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_show_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_show_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_show_has__view_x_27 = _init_l_lean_parser_term_show_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_show_has__view_x_27);
 l_lean_parser_term_show_has__view = _init_l_lean_parser_term_show_has__view();
lean::mark_persistent(l_lean_parser_term_show_has__view);
 l_lean_parser_term_show_parser_lean_parser_has__tokens = _init_l_lean_parser_term_show_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_show_parser_lean_parser_has__tokens);
 l_lean_parser_term_show_parser_lean_parser_has__view = _init_l_lean_parser_term_show_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_show_parser_lean_parser_has__view);
 l_lean_parser_term_show_parser___closed__1 = _init_l_lean_parser_term_show_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_show_parser___closed__1);
 l_lean_parser_term_match__equation = _init_l_lean_parser_term_match__equation();
lean::mark_persistent(l_lean_parser_term_match__equation);
 l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_match__equation_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_match__equation_has__view_x_27 = _init_l_lean_parser_term_match__equation_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_match__equation_has__view_x_27);
 l_lean_parser_term_match__equation_has__view = _init_l_lean_parser_term_match__equation_has__view();
lean::mark_persistent(l_lean_parser_term_match__equation_has__view);
 l_lean_parser_term_match = _init_l_lean_parser_term_match();
lean::mark_persistent(l_lean_parser_term_match);
 l_lean_parser_term_match_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_match_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_match_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_match_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_match_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_match_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_match_has__view_x_27 = _init_l_lean_parser_term_match_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_match_has__view_x_27);
 l_lean_parser_term_match_has__view = _init_l_lean_parser_term_match_has__view();
lean::mark_persistent(l_lean_parser_term_match_has__view);
 l_lean_parser_term_match_parser_lean_parser_has__tokens = _init_l_lean_parser_term_match_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_match_parser_lean_parser_has__tokens);
 l_lean_parser_term_match_parser_lean_parser_has__view = _init_l_lean_parser_term_match_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_match_parser_lean_parser_has__view);
 l_lean_parser_term_match_parser___closed__1 = _init_l_lean_parser_term_match_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_match_parser___closed__1);
 l_lean_parser_term_if = _init_l_lean_parser_term_if();
lean::mark_persistent(l_lean_parser_term_if);
 l_lean_parser_term_if_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_if_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_if_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_if_has__view_x_27 = _init_l_lean_parser_term_if_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_if_has__view_x_27);
 l_lean_parser_term_if_has__view = _init_l_lean_parser_term_if_has__view();
lean::mark_persistent(l_lean_parser_term_if_has__view);
 l_lean_parser_term_if_parser_lean_parser_has__tokens = _init_l_lean_parser_term_if_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_if_parser_lean_parser_has__tokens);
 l_lean_parser_term_if_parser_lean_parser_has__view = _init_l_lean_parser_term_if_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_if_parser_lean_parser_has__view);
 l_lean_parser_term_if_parser___closed__1 = _init_l_lean_parser_term_if_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_if_parser___closed__1);
 l_lean_parser_term_struct__inst__type = _init_l_lean_parser_term_struct__inst__type();
lean::mark_persistent(l_lean_parser_term_struct__inst__type);
 l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_struct__inst__type_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_struct__inst__type_has__view_x_27 = _init_l_lean_parser_term_struct__inst__type_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_struct__inst__type_has__view_x_27);
 l_lean_parser_term_struct__inst__type_has__view = _init_l_lean_parser_term_struct__inst__type_has__view();
lean::mark_persistent(l_lean_parser_term_struct__inst__type_has__view);
 l_lean_parser_term_struct__inst__with = _init_l_lean_parser_term_struct__inst__with();
lean::mark_persistent(l_lean_parser_term_struct__inst__with);
 l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_struct__inst__with_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_struct__inst__with_has__view_x_27 = _init_l_lean_parser_term_struct__inst__with_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_struct__inst__with_has__view_x_27);
 l_lean_parser_term_struct__inst__with_has__view = _init_l_lean_parser_term_struct__inst__with_has__view();
lean::mark_persistent(l_lean_parser_term_struct__inst__with_has__view);
 l_lean_parser_term_struct__inst__field = _init_l_lean_parser_term_struct__inst__field();
lean::mark_persistent(l_lean_parser_term_struct__inst__field);
 l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_struct__inst__field_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_struct__inst__field_has__view_x_27 = _init_l_lean_parser_term_struct__inst__field_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_struct__inst__field_has__view_x_27);
 l_lean_parser_term_struct__inst__field_has__view = _init_l_lean_parser_term_struct__inst__field_has__view();
lean::mark_persistent(l_lean_parser_term_struct__inst__field_has__view);
 l_lean_parser_term_struct__inst__source = _init_l_lean_parser_term_struct__inst__source();
lean::mark_persistent(l_lean_parser_term_struct__inst__source);
 l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_struct__inst__source_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_struct__inst__source_has__view_x_27 = _init_l_lean_parser_term_struct__inst__source_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_struct__inst__source_has__view_x_27);
 l_lean_parser_term_struct__inst__source_has__view = _init_l_lean_parser_term_struct__inst__source_has__view();
lean::mark_persistent(l_lean_parser_term_struct__inst__source_has__view);
 l_lean_parser_term_struct__inst__item = _init_l_lean_parser_term_struct__inst__item();
lean::mark_persistent(l_lean_parser_term_struct__inst__item);
 l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_struct__inst__item_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_struct__inst__item_has__view_x_27 = _init_l_lean_parser_term_struct__inst__item_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_struct__inst__item_has__view_x_27);
 l_lean_parser_term_struct__inst__item_has__view = _init_l_lean_parser_term_struct__inst__item_has__view();
lean::mark_persistent(l_lean_parser_term_struct__inst__item_has__view);
 l_lean_parser_term_struct__inst = _init_l_lean_parser_term_struct__inst();
lean::mark_persistent(l_lean_parser_term_struct__inst);
 l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3();
lean::mark_persistent(l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__3);
 l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__4();
lean::mark_persistent(l_lean_parser_term_struct__inst_has__view_x_27___lambda__1___closed__4);
 l_lean_parser_term_struct__inst_has__view_x_27 = _init_l_lean_parser_term_struct__inst_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_struct__inst_has__view_x_27);
 l_lean_parser_term_struct__inst_has__view = _init_l_lean_parser_term_struct__inst_has__view();
lean::mark_persistent(l_lean_parser_term_struct__inst_has__view);
 l_lean_parser_term_struct__inst_parser_lean_parser_has__tokens = _init_l_lean_parser_term_struct__inst_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_struct__inst_parser_lean_parser_has__tokens);
 l_lean_parser_term_struct__inst_parser_lean_parser_has__view = _init_l_lean_parser_term_struct__inst_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_struct__inst_parser_lean_parser_has__view);
 l_lean_parser_term_struct__inst_parser___closed__1 = _init_l_lean_parser_term_struct__inst_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_struct__inst_parser___closed__1);
 l_lean_parser_term_subtype = _init_l_lean_parser_term_subtype();
lean::mark_persistent(l_lean_parser_term_subtype);
 l_lean_parser_term_subtype_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_subtype_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_subtype_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_subtype_has__view_x_27 = _init_l_lean_parser_term_subtype_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_subtype_has__view_x_27);
 l_lean_parser_term_subtype_has__view = _init_l_lean_parser_term_subtype_has__view();
lean::mark_persistent(l_lean_parser_term_subtype_has__view);
 l_lean_parser_term_subtype_parser_lean_parser_has__tokens = _init_l_lean_parser_term_subtype_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_subtype_parser_lean_parser_has__tokens);
 l_lean_parser_term_subtype_parser_lean_parser_has__view = _init_l_lean_parser_term_subtype_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_subtype_parser_lean_parser_has__view);
 l_lean_parser_term_subtype_parser___closed__1 = _init_l_lean_parser_term_subtype_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_subtype_parser___closed__1);
 l_lean_parser_term_inaccessible = _init_l_lean_parser_term_inaccessible();
lean::mark_persistent(l_lean_parser_term_inaccessible);
 l_lean_parser_term_inaccessible_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_inaccessible_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_inaccessible_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_inaccessible_has__view_x_27 = _init_l_lean_parser_term_inaccessible_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_inaccessible_has__view_x_27);
 l_lean_parser_term_inaccessible_has__view = _init_l_lean_parser_term_inaccessible_has__view();
lean::mark_persistent(l_lean_parser_term_inaccessible_has__view);
 l_lean_parser_term_inaccessible_parser_lean_parser_has__tokens = _init_l_lean_parser_term_inaccessible_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_inaccessible_parser_lean_parser_has__tokens);
 l_lean_parser_term_inaccessible_parser_lean_parser_has__view = _init_l_lean_parser_term_inaccessible_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_inaccessible_parser_lean_parser_has__view);
 l_lean_parser_term_inaccessible_parser___closed__1 = _init_l_lean_parser_term_inaccessible_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_inaccessible_parser___closed__1);
 l_lean_parser_term_anonymous__inaccessible = _init_l_lean_parser_term_anonymous__inaccessible();
lean::mark_persistent(l_lean_parser_term_anonymous__inaccessible);
 l_lean_parser_term_anonymous__inaccessible_has__view_x_27 = _init_l_lean_parser_term_anonymous__inaccessible_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_anonymous__inaccessible_has__view_x_27);
 l_lean_parser_term_anonymous__inaccessible_has__view = _init_l_lean_parser_term_anonymous__inaccessible_has__view();
lean::mark_persistent(l_lean_parser_term_anonymous__inaccessible_has__view);
 l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__tokens = _init_l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__tokens);
 l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__view = _init_l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_anonymous__inaccessible_parser_lean_parser_has__view);
 l_lean_parser_term_anonymous__inaccessible_parser___closed__1 = _init_l_lean_parser_term_anonymous__inaccessible_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_anonymous__inaccessible_parser___closed__1);
 l_lean_parser_term_sorry = _init_l_lean_parser_term_sorry();
lean::mark_persistent(l_lean_parser_term_sorry);
 l_lean_parser_term_sorry_has__view_x_27 = _init_l_lean_parser_term_sorry_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_sorry_has__view_x_27);
 l_lean_parser_term_sorry_has__view = _init_l_lean_parser_term_sorry_has__view();
lean::mark_persistent(l_lean_parser_term_sorry_has__view);
 l_lean_parser_term_sorry_parser_lean_parser_has__tokens = _init_l_lean_parser_term_sorry_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_sorry_parser_lean_parser_has__tokens);
 l_lean_parser_term_sorry_parser_lean_parser_has__view = _init_l_lean_parser_term_sorry_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_sorry_parser_lean_parser_has__view);
 l_lean_parser_term_sorry_parser___closed__1 = _init_l_lean_parser_term_sorry_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_sorry_parser___closed__1);
 l_lean_parser_term_borrowed = _init_l_lean_parser_term_borrowed();
lean::mark_persistent(l_lean_parser_term_borrowed);
 l_lean_parser_term_borrowed_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_borrowed_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_borrowed_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_borrowed_has__view_x_27 = _init_l_lean_parser_term_borrowed_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_borrowed_has__view_x_27);
 l_lean_parser_term_borrowed_has__view = _init_l_lean_parser_term_borrowed_has__view();
lean::mark_persistent(l_lean_parser_term_borrowed_has__view);
 l_lean_parser_term_borrowed_parser_lean_parser_has__tokens = _init_l_lean_parser_term_borrowed_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_borrowed_parser_lean_parser_has__tokens);
 l_lean_parser_term_borrowed_parser_lean_parser_has__view = _init_l_lean_parser_term_borrowed_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_borrowed_parser_lean_parser_has__view);
 l_lean_parser_term_borrowed_parser___closed__1 = _init_l_lean_parser_term_borrowed_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_borrowed_parser___closed__1);
 l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens___spec__1___rarg___closed__1 = _init_l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens___spec__1___rarg___closed__1();
lean::mark_persistent(l_lean_parser_string__lit_parser___at_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens___spec__1___rarg___closed__1);
 l_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens = _init_l_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_builtin__leading__parsers_lean_parser_has__tokens);
 l_lean_parser_term_builtin__leading__parsers = _init_l_lean_parser_term_builtin__leading__parsers();
lean::mark_persistent(l_lean_parser_term_builtin__leading__parsers);
 l_lean_parser_term_sort__app = _init_l_lean_parser_term_sort__app();
lean::mark_persistent(l_lean_parser_term_sort__app);
 l_lean_parser_term_sort__app_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_sort__app_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_sort__app_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_sort__app_has__view_x_27 = _init_l_lean_parser_term_sort__app_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_sort__app_has__view_x_27);
 l_lean_parser_term_sort__app_has__view = _init_l_lean_parser_term_sort__app_has__view();
lean::mark_persistent(l_lean_parser_term_sort__app_has__view);
 l_lean_parser_term_sort__app_parser_lean_parser_has__tokens = _init_l_lean_parser_term_sort__app_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_sort__app_parser_lean_parser_has__tokens);
 l_lean_parser_term_sort__app_parser_lean_parser_has__view = _init_l_lean_parser_term_sort__app_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_sort__app_parser_lean_parser_has__view);
 l_lean_parser_term_sort__app_parser___closed__1 = _init_l_lean_parser_term_sort__app_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_sort__app_parser___closed__1);
 l_lean_parser_term_app = _init_l_lean_parser_term_app();
lean::mark_persistent(l_lean_parser_term_app);
 l_lean_parser_term_app_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_app_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_app_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_app_has__view_x_27 = _init_l_lean_parser_term_app_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_app_has__view_x_27);
 l_lean_parser_term_app_has__view = _init_l_lean_parser_term_app_has__view();
lean::mark_persistent(l_lean_parser_term_app_has__view);
 l_lean_parser_term_app_parser_lean_parser_has__tokens = _init_l_lean_parser_term_app_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_app_parser_lean_parser_has__tokens);
 l_lean_parser_term_app_parser_lean_parser_has__view = _init_l_lean_parser_term_app_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_app_parser_lean_parser_has__view);
 l_lean_parser_term_app_parser___closed__1 = _init_l_lean_parser_term_app_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_app_parser___closed__1);
 l_lean_parser_term_arrow = _init_l_lean_parser_term_arrow();
lean::mark_persistent(l_lean_parser_term_arrow);
 l_lean_parser_term_arrow_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_arrow_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_arrow_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_arrow_has__view_x_27 = _init_l_lean_parser_term_arrow_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_arrow_has__view_x_27);
 l_lean_parser_term_arrow_has__view = _init_l_lean_parser_term_arrow_has__view();
lean::mark_persistent(l_lean_parser_term_arrow_has__view);
 l_lean_parser_term_arrow_parser_lean_parser_has__tokens = _init_l_lean_parser_term_arrow_parser_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_arrow_parser_lean_parser_has__tokens);
 l_lean_parser_term_arrow_parser_lean_parser_has__view = _init_l_lean_parser_term_arrow_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_arrow_parser_lean_parser_has__view);
 l_lean_parser_term_arrow_parser___closed__1 = _init_l_lean_parser_term_arrow_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_arrow_parser___closed__1);
 l_lean_parser_term_projection__spec = _init_l_lean_parser_term_projection__spec();
lean::mark_persistent(l_lean_parser_term_projection__spec);
 l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3 = _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3();
lean::mark_persistent(l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__3);
 l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__4 = _init_l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__4();
lean::mark_persistent(l_lean_parser_term_projection__spec_has__view_x_27___lambda__1___closed__4);
 l_lean_parser_term_projection__spec_has__view_x_27 = _init_l_lean_parser_term_projection__spec_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_projection__spec_has__view_x_27);
 l_lean_parser_term_projection__spec_has__view = _init_l_lean_parser_term_projection__spec_has__view();
lean::mark_persistent(l_lean_parser_term_projection__spec_has__view);
 l_lean_parser_term_projection = _init_l_lean_parser_term_projection();
lean::mark_persistent(l_lean_parser_term_projection);
 l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1 = _init_l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1();
lean::mark_persistent(l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__1);
 l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__2 = _init_l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__2();
lean::mark_persistent(l_lean_parser_term_projection_has__view_x_27___lambda__1___closed__2);
 l_lean_parser_term_projection_has__view_x_27 = _init_l_lean_parser_term_projection_has__view_x_27();
lean::mark_persistent(l_lean_parser_term_projection_has__view_x_27);
 l_lean_parser_term_projection_has__view = _init_l_lean_parser_term_projection_has__view();
lean::mark_persistent(l_lean_parser_term_projection_has__view);
 l_lean_parser_term_projection_parser_lean_parser_has__view = _init_l_lean_parser_term_projection_parser_lean_parser_has__view();
lean::mark_persistent(l_lean_parser_term_projection_parser_lean_parser_has__view);
 l_lean_parser_term_projection_parser___closed__1 = _init_l_lean_parser_term_projection_parser___closed__1();
lean::mark_persistent(l_lean_parser_term_projection_parser___closed__1);
 l_lean_parser_term_projection_tokens = _init_l_lean_parser_term_projection_tokens();
lean::mark_persistent(l_lean_parser_term_projection_tokens);
 l_lean_parser_term_builtin__trailing__parsers_lean_parser_has__tokens = _init_l_lean_parser_term_builtin__trailing__parsers_lean_parser_has__tokens();
lean::mark_persistent(l_lean_parser_term_builtin__trailing__parsers_lean_parser_has__tokens);
 l_lean_parser_term_builtin__trailing__parsers = _init_l_lean_parser_term_builtin__trailing__parsers();
lean::mark_persistent(l_lean_parser_term_builtin__trailing__parsers);
 l___private_init_lean_parser_term_1__trailing___closed__1 = _init_l___private_init_lean_parser_term_1__trailing___closed__1();
lean::mark_persistent(l___private_init_lean_parser_term_1__trailing___closed__1);
 l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___closed__1 = _init_l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___closed__1();
lean::mark_persistent(l_lean_parser_rec__t_run__parsec___at_lean_parser_term__parser_run___spec__5___closed__1);
}
