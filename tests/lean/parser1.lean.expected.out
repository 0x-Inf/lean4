result: 
[(module [(prelude "prelude")] [] []) (parser.eoi "")]
result: 
[(module
  []
  [(import "import" [(import_path [] (id (ident_part (1 "me")) []))])]
  [])
 (parser.eoi "")]
error at line 1, column 0:
expected command
partial syntax tree:
[(module [] [] []) (parser.eoi "")]
error at line 1, column 6:

partial syntax tree:
[(module
  []
  [(import "import" [(import_path [] <missing>) <missing>]) <missing>]
  <missing>)
 (parser.eoi "")]
result: 
[(module
  [(prelude "prelude")]
  [(import
    "import"
    [(import_path ["." "."] (id (ident_part (1 "a")) []))
     (import_path [] (id (ident_part (1 "b")) []))])
   (import "import" [(import_path [] (id (ident_part (1 "c")) []))])]
  [])
 (parser.eoi "")]
result: 
[(module
  []
  []
  [(open
    "open"
    [(open_spec (id (ident_part (1 "me")) []) [] [] [] [])
     (open_spec (id (ident_part (1 "you")) []) [] [] [] [])])])
 (parser.eoi "")]
result: 
[(module
  []
  []
  [(open
    "open"
    [(open_spec
      (id (ident_part (1 "me")) [])
      [(open_spec.as "as" (id (ident_part (1 "you")) []))]
      [(open_spec.only
        ["(" (id (ident_part (1 "a")) [])]
        [(id (ident_part (1 "b")) []) (id (ident_part (1 "c")) [])]
        ")")]
      [(open_spec.renaming
        ["(" "renaming"]
        [(open_spec.renaming.item
          (id (ident_part (1 "a")) [])
          "->"
          (id (ident_part (1 "b")) []))
         (open_spec.renaming.item
          (id (ident_part (1 "c")) [])
          "->"
          (id (ident_part (1 "d")) []))]
        ")")]
      [(open_spec.hiding
        "("
        "hiding"
        [(id (ident_part (1 "a")) []) (id (ident_part (1 "b")) [])]
        ")")])])])
 (parser.eoi "")]
error at line 1, column 11:
expected command
partial syntax tree:
[(module
  []
  []
  [(open
    "open"
    [(open_spec (id (ident_part (1 "me")) []) [] [] [] [])
     (open_spec (id (ident_part (1 "you")) []) [] [] [] [])])])
 (parser.eoi "")]
error at line 1, column 5:
expected identifier
error at line 1, column 9:

partial syntax tree:
[(module
  []
  []
  [(open
    "open"
    [(open_spec <missing> <missing> <missing> <missing> <missing>) <missing>])
   (open
    "open"
    [(open_spec <missing> <missing> <missing> <missing> <missing>) <missing>])])
 (parser.eoi "")]
error at line 1, column 8:
expected command
partial syntax tree:
[(module
  []
  []
  [(open "open" [(open_spec (id (ident_part (1 "me")) []) [] [] [] [])])
   (open "open" [(open_spec (id (ident_part (1 "you")) []) [] [] [] [])])])
 (parser.eoi "")]
result: 
[(module
  []
  []
  [(open "open" [(open_spec (id (ident_part (1 "a")) []) [] [] [] [])])
   (section
    "section"
    [(id (ident_part (1 "b")) [])]
    [(open "open" [(open_spec (id (ident_part (1 "c")) []) [] [] [] [])])
     (section
      "section"
      [(id (ident_part (1 "d")) [])]
      [(open "open" [(open_spec (id (ident_part (1 "e")) []) [] [] [] [])])]
      "end"
      [(id (ident_part (1 "d")) [])])]
    "end"
    [(id (ident_part (1 "b")) [])])])
 (parser.eoi "")]
result: 
[(module [] [] [(section "section" [(id (ident_part (1 "a")) [])] [] "end" [])])
 (parser.eoi "")]
Type (max u v) : Type ((max u v)+1)
result: 
[(module
  []
  []
  [(check
    "#check"
    (term.app
     (term.app
      (term.sort_app
       (term.sort (1 "Type"))
       (level.leading (0 (id (ident_part (1 "max")) []))))
      (id (ident_part (1 "u")) []))
     (id (ident_part (1 "v")) [])))])
 (parser.eoi "")]
(notation
 "notation"
 (notation_spec
  (1
   (notation_spec.rules
    []
    [(notation_spec.rule
      (notation_spec.notation_symbol
       (0
        (notation_spec.notation_quoted_symbol
         "`"
         "+"
         "`"
         [(notation_spec.precedence ":" (parser.base10_lit "10"))])))
      [(notation_spec.transition
        (2
         (notation_spec.argument
          (id (ident_part (1 "b")) [])
          [(notation_spec.action
            ":"
            (notation_spec.action_kind (0 (parser.base10_lit "10"))))])))])])))
 ":="
 (term.hole "_"))
notation`+`:10 b:10 :=_
error at line 85, column 0:
expected command
partial syntax tree:
[(module
  [(prelude "prelude")]
  []
  [(notation
    "notation"
    (notation_spec
     (1
      (notation_spec.rules
       []
       [(notation_spec.rule
         (notation_spec.notation_symbol
          (0 (notation_spec.notation_quoted_symbol "`" "Prop" "`" [])))
         [])])))
    ":="
    (term.sort_app
     (term.sort (0 "Sort"))
     (level.leading (4 (parser.base10_lit "0")))))
   (notation
    "notation"
    (notation_spec
     (1
      (notation_spec.rules
       [(id (ident_part (1 "f")) [])]
       [(notation_spec.rule
         (notation_spec.notation_symbol
          (0
           (notation_spec.notation_quoted_symbol
            "`"
            "$ "
            "`"
            [(notation_spec.precedence ":" (parser.base10_lit "1"))])))
         [(notation_spec.transition
           (2
            (notation_spec.argument
             (id (ident_part (1 "a")) [])
             [(notation_spec.action
               ":"
               (notation_spec.action_kind (0 (parser.base10_lit "0"))))])))])])))
    ":="
    (term.app (id (ident_part (1 "f")) []) (id (ident_part (1 "a")) [])))
   (reserve_mixfix
    ["reserve" (mixfix.kind (0 "prefix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "¬"
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "40"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (0 "prefix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "~"
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "40"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (3 "infixr"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "∧ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "35"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (3 "infixr"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "/\\ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "35"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (3 "infixr"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "\\/ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "30"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (3 "infixr"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "∨ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "30"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "<-> "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "20"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "↔ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "20"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "= "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "== "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "≠ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "≈ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "~ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "≡ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (2 "infixl"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "⬝ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "75"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (3 "infixr"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "▸ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "75"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (3 "infixr"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "▹ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "75"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (3 "infixr"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "⊕ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "30"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (3 "infixr"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "× "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "35"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (2 "infixl"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "+ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "65"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (2 "infixl"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "- "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "65"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (2 "infixl"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "* "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "70"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (2 "infixl"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "/ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "70"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (2 "infixl"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "% "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "70"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (2 "infixl"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "%ₙ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "70"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (0 "prefix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "-"
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "100"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (3 "infixr"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "^ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "80"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (3 "infixr"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "∘ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "90"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "<= "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "≤ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "< "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       ">= "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "≥ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "> "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (0 "prefix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "!"
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "40"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (2 "infixl"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "&& "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "35"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (2 "infixl"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "|| "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "30"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "∈ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "∉ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (2 "infixl"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "∩ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "70"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (2 "infixl"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "∪ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "65"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "⊆ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "⊇ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "⊂ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "⊃ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "\\ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "70"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (1 "infix"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "∣ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "50"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (2 "infixl"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "++ "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "65"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (3 "infixr"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       ":: "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "67"))]))))
   (reserve_mixfix
    ["reserve" (mixfix.kind (2 "infixl"))]
    (notation_spec.notation_symbol
     (0
      (notation_spec.notation_quoted_symbol
       "`"
       "; "
       "`"
       [(notation_spec.precedence ":" (parser.base10_lit "1"))]))))
   (universes
    "universes"
    [(id (ident_part (1 "u")) [])
     (id (ident_part (1 "v")) [])
     (id (ident_part (1 "w")) [])])])
 (parser.eoi "")]
