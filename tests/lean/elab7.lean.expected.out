>> λ (x : nat), add x [prenum]
>> λ (x : nat), @add.{1} nat nat_has_add x (@one.{1} nat nat_has_one)
>> nat → nat
>> λ (x y : nat), add x y
>> λ (x y : nat), @add.{1} nat nat_has_add x y
>> nat → nat → nat
>> λ (x : _) (y : _), add (add x y) [prenum]
>> λ (x y : nat), @add.{1} nat nat_has_add (@add.{1} nat nat_has_add x y) (@one.{1} nat nat_has_one)
>> nat → nat → nat
>> λ (x : _), list.cons (add x [prenum]) list.nil
>> λ (x : nat), @list.cons.{1} nat (@add.{1} nat nat_has_add x (@one.{1} nat nat_has_one)) (@list.nil.{1} nat)
>> nat → list.{1} nat
