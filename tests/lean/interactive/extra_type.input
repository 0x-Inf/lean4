VISIT extra_type.lean
SET
pp.notation false
SYNC 20
import general_notation
import logic.connectives logic.decidable logic.inhabited

open eq eq.ops decidable

inductive bool : Type :=
  ff : bool,
  tt : bool
namespace bool
  protected definition rec_on {C : bool → Type} (b : bool) (H₁ : C ff) (H₂ : C tt) : C b :=
  rec H₁ H₂ b

  protected definition cases_on {p : bool → Prop} (b : bool) (H₁ : p ff) (H₂ : p tt) : p b :=
  rec H₁ H₂ b

  definition cond {A : Type} (b : bool) (t e : A) :=
  rec_on b e t

  theorem dichotomy (b : bool) : b = ff ∨ b = tt :=
  cases_on b (or.inl rfl) (or.inr rfl)
end bool
WAIT
INFO 20 13
